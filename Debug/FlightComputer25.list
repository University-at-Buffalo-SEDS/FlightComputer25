
FlightComputer25.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000134b0  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c78  08013690  08013690  00014690  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014308  08014308  00016370  2**0
                  CONTENTS
  4 .ARM          00000008  08014308  08014308  00015308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014310  08014310  00016370  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014310  08014310  00015310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08014314  08014314  00015314  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000370  20000000  08014318  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012620  20000370  08014688  00016370  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20012990  08014688  00016990  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00016370  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002983d  00000000  00000000  000163a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000061ec  00000000  00000000  0003fbdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002288  00000000  00000000  00045dd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001a47  00000000  00000000  00048058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025f43  00000000  00000000  00049a9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028006  00000000  00000000  0006f9e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1c34  00000000  00000000  000979e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017961c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a318  00000000  00000000  00179660  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  00183978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000370 	.word	0x20000370
 80001fc:	00000000 	.word	0x00000000
 8000200:	08013678 	.word	0x08013678

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000374 	.word	0x20000374
 800021c:	08013678 	.word	0x08013678

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <accel_read_reg>:
#include <Drivers/bmi088.h>

void accel_read_reg(BMI088 *imu, uint8_t regAddr, uint8_t *data) {
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b088      	sub	sp, #32
 8000bfc:	af02      	add	r7, sp, #8
 8000bfe:	60f8      	str	r0, [r7, #12]
 8000c00:	460b      	mov	r3, r1
 8000c02:	607a      	str	r2, [r7, #4]
 8000c04:	72fb      	strb	r3, [r7, #11]
	uint8_t tx[3] = {regAddr | 0x80, 0x00, 0x00};
 8000c06:	7afb      	ldrb	r3, [r7, #11]
 8000c08:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000c0c:	b2db      	uxtb	r3, r3
 8000c0e:	753b      	strb	r3, [r7, #20]
 8000c10:	2300      	movs	r3, #0
 8000c12:	757b      	strb	r3, [r7, #21]
 8000c14:	2300      	movs	r3, #0
 8000c16:	75bb      	strb	r3, [r7, #22]
	uint8_t rx[3];

	HAL_GPIO_WritePin(imu->csAccelPinBank, imu->accelCSPin, GPIO_PIN_RESET);
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	6858      	ldr	r0, [r3, #4]
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	899b      	ldrh	r3, [r3, #12]
 8000c20:	2200      	movs	r2, #0
 8000c22:	4619      	mov	r1, r3
 8000c24:	f003 fe14 	bl	8004850 <HAL_GPIO_WritePin>
	HAL_StatusTypeDef status = HAL_SPI_TransmitReceive(imu->hspi, tx, rx, 3, HAL_MAX_DELAY);
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	6818      	ldr	r0, [r3, #0]
 8000c2c:	f107 0210 	add.w	r2, r7, #16
 8000c30:	f107 0114 	add.w	r1, r7, #20
 8000c34:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000c38:	9300      	str	r3, [sp, #0]
 8000c3a:	2303      	movs	r3, #3
 8000c3c:	f006 fecf 	bl	80079de <HAL_SPI_TransmitReceive>
 8000c40:	4603      	mov	r3, r0
 8000c42:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(imu->csAccelPinBank, imu->accelCSPin, GPIO_PIN_SET);
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	6858      	ldr	r0, [r3, #4]
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	899b      	ldrh	r3, [r3, #12]
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	4619      	mov	r1, r3
 8000c50:	f003 fdfe 	bl	8004850 <HAL_GPIO_WritePin>
	if (status == HAL_OK) {
 8000c54:	7dfb      	ldrb	r3, [r7, #23]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d103      	bne.n	8000c62 <accel_read_reg+0x6a>
		*data = rx[2];
 8000c5a:	7cba      	ldrb	r2, [r7, #18]
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	701a      	strb	r2, [r3, #0]
	} else {
		debug_print("Error: 0x%02X\r\n", status);
	}
}
 8000c60:	e004      	b.n	8000c6c <accel_read_reg+0x74>
		debug_print("Error: 0x%02X\r\n", status);
 8000c62:	7dfb      	ldrb	r3, [r7, #23]
 8000c64:	4619      	mov	r1, r3
 8000c66:	4803      	ldr	r0, [pc, #12]	@ (8000c74 <accel_read_reg+0x7c>)
 8000c68:	f001 fd96 	bl	8002798 <debug_print>
}
 8000c6c:	bf00      	nop
 8000c6e:	3718      	adds	r7, #24
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	08013690 	.word	0x08013690

08000c78 <gyro_read_reg>:

void gyro_read_reg(BMI088 *imu, uint8_t regAddr, uint8_t *data) {
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b088      	sub	sp, #32
 8000c7c:	af02      	add	r7, sp, #8
 8000c7e:	60f8      	str	r0, [r7, #12]
 8000c80:	460b      	mov	r3, r1
 8000c82:	607a      	str	r2, [r7, #4]
 8000c84:	72fb      	strb	r3, [r7, #11]
	uint8_t tx[2] = {regAddr | 0x80, 0x00};
 8000c86:	7afb      	ldrb	r3, [r7, #11]
 8000c88:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	753b      	strb	r3, [r7, #20]
 8000c90:	2300      	movs	r3, #0
 8000c92:	757b      	strb	r3, [r7, #21]
	uint8_t rx[2];

	HAL_GPIO_WritePin(imu->csGyroPinBank, imu->gyroCSPin, GPIO_PIN_RESET);
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	6898      	ldr	r0, [r3, #8]
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	89db      	ldrh	r3, [r3, #14]
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	f003 fdd6 	bl	8004850 <HAL_GPIO_WritePin>
	HAL_StatusTypeDef status = HAL_SPI_TransmitReceive(imu->hspi, tx, rx, 2, HAL_MAX_DELAY);
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	6818      	ldr	r0, [r3, #0]
 8000ca8:	f107 0210 	add.w	r2, r7, #16
 8000cac:	f107 0114 	add.w	r1, r7, #20
 8000cb0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000cb4:	9300      	str	r3, [sp, #0]
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	f006 fe91 	bl	80079de <HAL_SPI_TransmitReceive>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(imu->csGyroPinBank, imu->gyroCSPin, GPIO_PIN_SET);
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	6898      	ldr	r0, [r3, #8]
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	89db      	ldrh	r3, [r3, #14]
 8000cc8:	2201      	movs	r2, #1
 8000cca:	4619      	mov	r1, r3
 8000ccc:	f003 fdc0 	bl	8004850 <HAL_GPIO_WritePin>
	if (status == HAL_OK) {
 8000cd0:	7dfb      	ldrb	r3, [r7, #23]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d103      	bne.n	8000cde <gyro_read_reg+0x66>
		*data = rx[1];
 8000cd6:	7c7a      	ldrb	r2, [r7, #17]
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	701a      	strb	r2, [r3, #0]
	} else {
		debug_print("Error: 0x%02X\r\n", status);
	}
}
 8000cdc:	e004      	b.n	8000ce8 <gyro_read_reg+0x70>
		debug_print("Error: 0x%02X\r\n", status);
 8000cde:	7dfb      	ldrb	r3, [r7, #23]
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	4803      	ldr	r0, [pc, #12]	@ (8000cf0 <gyro_read_reg+0x78>)
 8000ce4:	f001 fd58 	bl	8002798 <debug_print>
}
 8000ce8:	bf00      	nop
 8000cea:	3718      	adds	r7, #24
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	08013690 	.word	0x08013690

08000cf4 <accel_write_reg>:

void accel_write_reg(BMI088 *imu, uint8_t regAddr, uint8_t data) {
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
 8000cfc:	460b      	mov	r3, r1
 8000cfe:	70fb      	strb	r3, [r7, #3]
 8000d00:	4613      	mov	r3, r2
 8000d02:	70bb      	strb	r3, [r7, #2]
	uint8_t tx[2] = {regAddr, data};
 8000d04:	78fb      	ldrb	r3, [r7, #3]
 8000d06:	733b      	strb	r3, [r7, #12]
 8000d08:	78bb      	ldrb	r3, [r7, #2]
 8000d0a:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(imu->csAccelPinBank, imu->accelCSPin, GPIO_PIN_RESET);
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	6858      	ldr	r0, [r3, #4]
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	899b      	ldrh	r3, [r3, #12]
 8000d14:	2200      	movs	r2, #0
 8000d16:	4619      	mov	r1, r3
 8000d18:	f003 fd9a 	bl	8004850 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(imu->hspi, tx, 2, HAL_MAX_DELAY);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	6818      	ldr	r0, [r3, #0]
 8000d20:	f107 010c 	add.w	r1, r7, #12
 8000d24:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d28:	2202      	movs	r2, #2
 8000d2a:	f006 fbaa 	bl	8007482 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(imu->csAccelPinBank, imu->accelCSPin, GPIO_PIN_SET);
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	6858      	ldr	r0, [r3, #4]
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	899b      	ldrh	r3, [r3, #12]
 8000d36:	2201      	movs	r2, #1
 8000d38:	4619      	mov	r1, r3
 8000d3a:	f003 fd89 	bl	8004850 <HAL_GPIO_WritePin>
}
 8000d3e:	bf00      	nop
 8000d40:	3710      	adds	r7, #16
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}

08000d46 <gyro_write_reg>:

void gyro_write_reg(BMI088 *imu, uint8_t regAddr, uint8_t data) {
 8000d46:	b580      	push	{r7, lr}
 8000d48:	b084      	sub	sp, #16
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	6078      	str	r0, [r7, #4]
 8000d4e:	460b      	mov	r3, r1
 8000d50:	70fb      	strb	r3, [r7, #3]
 8000d52:	4613      	mov	r3, r2
 8000d54:	70bb      	strb	r3, [r7, #2]
	uint8_t tx[2] = {regAddr, data};
 8000d56:	78fb      	ldrb	r3, [r7, #3]
 8000d58:	733b      	strb	r3, [r7, #12]
 8000d5a:	78bb      	ldrb	r3, [r7, #2]
 8000d5c:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(imu->csGyroPinBank, imu->gyroCSPin, GPIO_PIN_RESET);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	6898      	ldr	r0, [r3, #8]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	89db      	ldrh	r3, [r3, #14]
 8000d66:	2200      	movs	r2, #0
 8000d68:	4619      	mov	r1, r3
 8000d6a:	f003 fd71 	bl	8004850 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(imu->hspi, tx, 2, HAL_MAX_DELAY);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	6818      	ldr	r0, [r3, #0]
 8000d72:	f107 010c 	add.w	r1, r7, #12
 8000d76:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d7a:	2202      	movs	r2, #2
 8000d7c:	f006 fb81 	bl	8007482 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(imu->csGyroPinBank, imu->gyroCSPin, GPIO_PIN_SET);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	6898      	ldr	r0, [r3, #8]
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	89db      	ldrh	r3, [r3, #14]
 8000d88:	2201      	movs	r2, #1
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	f003 fd60 	bl	8004850 <HAL_GPIO_WritePin>
}
 8000d90:	bf00      	nop
 8000d92:	3710      	adds	r7, #16
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <bmi088_init>:
void bmi088_init(BMI088 *imu,
		SPI_HandleTypeDef *spi,
		GPIO_TypeDef *csAccelPinBank,
		GPIO_TypeDef *csGyroPinBank,
		uint16_t accelCSPin,
		uint16_t gyroCSPin) {
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b088      	sub	sp, #32
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	60f8      	str	r0, [r7, #12]
 8000da0:	60b9      	str	r1, [r7, #8]
 8000da2:	607a      	str	r2, [r7, #4]
 8000da4:	603b      	str	r3, [r7, #0]

	imu->hspi = spi;
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	68ba      	ldr	r2, [r7, #8]
 8000daa:	601a      	str	r2, [r3, #0]
	imu->csAccelPinBank = csAccelPinBank;
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	687a      	ldr	r2, [r7, #4]
 8000db0:	605a      	str	r2, [r3, #4]
	imu->csGyroPinBank = csGyroPinBank;
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	683a      	ldr	r2, [r7, #0]
 8000db6:	609a      	str	r2, [r3, #8]

	imu->accelCSPin = accelCSPin;
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8000dbc:	819a      	strh	r2, [r3, #12]
	imu->gyroCSPin = gyroCSPin;
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8000dc2:	81da      	strh	r2, [r3, #14]

	float accel_multipilier = 1.0f/(1<<15) * (1<<(BMI088_ACC_24G_RANGE + 1)) * 1.5f;
 8000dc4:	f04f 5369 	mov.w	r3, #977272832	@ 0x3a400000
 8000dc8:	61fb      	str	r3, [r7, #28]
	imu->accelConversion = 9.80665f * accel_multipilier; // data sheet page 27
 8000dca:	edd7 7a07 	vldr	s15, [r7, #28]
 8000dce:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 8000f80 <bmi088_init+0x1e8>
 8000dd2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
	imu->gyroConversion = 0.01745329251f * 1000.0f / 16384.0f; // data sheet page 39 (rad/s)
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	4a69      	ldr	r2, [pc, #420]	@ (8000f84 <bmi088_init+0x1ec>)
 8000de0:	62da      	str	r2, [r3, #44]	@ 0x2c

	// accel setup
	HAL_GPIO_WritePin(imu->csAccelPinBank, imu->accelCSPin, GPIO_PIN_RESET);
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	6858      	ldr	r0, [r3, #4]
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	899b      	ldrh	r3, [r3, #12]
 8000dea:	2200      	movs	r2, #0
 8000dec:	4619      	mov	r1, r3
 8000dee:	f003 fd2f 	bl	8004850 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000df2:	2001      	movs	r0, #1
 8000df4:	f003 f82c 	bl	8003e50 <HAL_Delay>
	HAL_GPIO_WritePin(imu->csAccelPinBank, imu->accelCSPin, GPIO_PIN_SET);
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	6858      	ldr	r0, [r3, #4]
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	899b      	ldrh	r3, [r3, #12]
 8000e00:	2201      	movs	r2, #1
 8000e02:	4619      	mov	r1, r3
 8000e04:	f003 fd24 	bl	8004850 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8000e08:	2032      	movs	r0, #50	@ 0x32
 8000e0a:	f003 f821 	bl	8003e50 <HAL_Delay>

	//soft reset the accelerometer
	accel_write_reg(imu, BMI088_ACC_REG_SOFTRESET, 0xB6);
 8000e0e:	22b6      	movs	r2, #182	@ 0xb6
 8000e10:	217e      	movs	r1, #126	@ 0x7e
 8000e12:	68f8      	ldr	r0, [r7, #12]
 8000e14:	f7ff ff6e 	bl	8000cf4 <accel_write_reg>
	HAL_Delay(50);
 8000e18:	2032      	movs	r0, #50	@ 0x32
 8000e1a:	f003 f819 	bl	8003e50 <HAL_Delay>

	uint8_t dummy;
	accel_read_reg(imu, BMI088_ACC_REG_CHIP_ID, &dummy);
 8000e1e:	f107 031b 	add.w	r3, r7, #27
 8000e22:	461a      	mov	r2, r3
 8000e24:	2100      	movs	r1, #0
 8000e26:	68f8      	ldr	r0, [r7, #12]
 8000e28:	f7ff fee6 	bl	8000bf8 <accel_read_reg>

	uint8_t chipID;
	accel_read_reg(imu, BMI088_ACC_REG_CHIP_ID, &chipID);
 8000e2c:	f107 031a 	add.w	r3, r7, #26
 8000e30:	461a      	mov	r2, r3
 8000e32:	2100      	movs	r1, #0
 8000e34:	68f8      	ldr	r0, [r7, #12]
 8000e36:	f7ff fedf 	bl	8000bf8 <accel_read_reg>
	if (chipID != 0x1E) {
 8000e3a:	7ebb      	ldrb	r3, [r7, #26]
 8000e3c:	2b1e      	cmp	r3, #30
 8000e3e:	d004      	beq.n	8000e4a <bmi088_init+0xb2>
		debug_print("Chip ID Reg Address: 0x%02X\r\n", chipID);
 8000e40:	7ebb      	ldrb	r3, [r7, #26]
 8000e42:	4619      	mov	r1, r3
 8000e44:	4850      	ldr	r0, [pc, #320]	@ (8000f88 <bmi088_init+0x1f0>)
 8000e46:	f001 fca7 	bl	8002798 <debug_print>
	}
	HAL_Delay(10);
 8000e4a:	200a      	movs	r0, #10
 8000e4c:	f003 f800 	bl	8003e50 <HAL_Delay>

	gyro_read_reg(imu, BMI088_GYR_REG_CHIP_ID, &chipID);
 8000e50:	f107 031a 	add.w	r3, r7, #26
 8000e54:	461a      	mov	r2, r3
 8000e56:	2100      	movs	r1, #0
 8000e58:	68f8      	ldr	r0, [r7, #12]
 8000e5a:	f7ff ff0d 	bl	8000c78 <gyro_read_reg>
	if (chipID != 0x0F) {
 8000e5e:	7ebb      	ldrb	r3, [r7, #26]
 8000e60:	2b0f      	cmp	r3, #15
 8000e62:	d004      	beq.n	8000e6e <bmi088_init+0xd6>
		debug_print("fuck fuck 0x%02X\r\n", chipID);
 8000e64:	7ebb      	ldrb	r3, [r7, #26]
 8000e66:	4619      	mov	r1, r3
 8000e68:	4848      	ldr	r0, [pc, #288]	@ (8000f8c <bmi088_init+0x1f4>)
 8000e6a:	f001 fc95 	bl	8002798 <debug_print>
	}
	HAL_Delay(10);
 8000e6e:	200a      	movs	r0, #10
 8000e70:	f002 ffee 	bl	8003e50 <HAL_Delay>

	accel_write_reg(imu, BMI088_ACC_REG_PWR_CONF, 0x00);
 8000e74:	2200      	movs	r2, #0
 8000e76:	217c      	movs	r1, #124	@ 0x7c
 8000e78:	68f8      	ldr	r0, [r7, #12]
 8000e7a:	f7ff ff3b 	bl	8000cf4 <accel_write_reg>
	HAL_Delay(10);
 8000e7e:	200a      	movs	r0, #10
 8000e80:	f002 ffe6 	bl	8003e50 <HAL_Delay>

	accel_write_reg(imu, BMI088_ACC_REG_RANGE, BMI088_ACC_24G_RANGE);
 8000e84:	2203      	movs	r2, #3
 8000e86:	2141      	movs	r1, #65	@ 0x41
 8000e88:	68f8      	ldr	r0, [r7, #12]
 8000e8a:	f7ff ff33 	bl	8000cf4 <accel_write_reg>
	HAL_Delay(10);
 8000e8e:	200a      	movs	r0, #10
 8000e90:	f002 ffde 	bl	8003e50 <HAL_Delay>

	accel_write_reg(imu, BMI088_ACC_REG_CONF, BMI088_ACC_ODR_200Hz | BMI088_ACC_BWP_OSR4);
 8000e94:	2289      	movs	r2, #137	@ 0x89
 8000e96:	2140      	movs	r1, #64	@ 0x40
 8000e98:	68f8      	ldr	r0, [r7, #12]
 8000e9a:	f7ff ff2b 	bl	8000cf4 <accel_write_reg>
	HAL_Delay(10);
 8000e9e:	200a      	movs	r0, #10
 8000ea0:	f002 ffd6 	bl	8003e50 <HAL_Delay>


	accel_write_reg(imu, BMI088_ACC_REG_PWR_CTRL, 0x04);
 8000ea4:	2204      	movs	r2, #4
 8000ea6:	217d      	movs	r1, #125	@ 0x7d
 8000ea8:	68f8      	ldr	r0, [r7, #12]
 8000eaa:	f7ff ff23 	bl	8000cf4 <accel_write_reg>
	HAL_Delay(10);
 8000eae:	200a      	movs	r0, #10
 8000eb0:	f002 ffce 	bl	8003e50 <HAL_Delay>

	uint8_t range;
	accel_read_reg(imu, BMI088_ACC_REG_RANGE, &range);
 8000eb4:	f107 0319 	add.w	r3, r7, #25
 8000eb8:	461a      	mov	r2, r3
 8000eba:	2141      	movs	r1, #65	@ 0x41
 8000ebc:	68f8      	ldr	r0, [r7, #12]
 8000ebe:	f7ff fe9b 	bl	8000bf8 <accel_read_reg>
	if ((range & 0x03) != BMI088_ACC_24G_RANGE) {
 8000ec2:	7e7b      	ldrb	r3, [r7, #25]
 8000ec4:	f003 0303 	and.w	r3, r3, #3
 8000ec8:	2b03      	cmp	r3, #3
 8000eca:	d005      	beq.n	8000ed8 <bmi088_init+0x140>
		debug_print("Wrong accel range set! 0x%02X\r\n", range);
 8000ecc:	7e7b      	ldrb	r3, [r7, #25]
 8000ece:	4619      	mov	r1, r3
 8000ed0:	482f      	ldr	r0, [pc, #188]	@ (8000f90 <bmi088_init+0x1f8>)
 8000ed2:	f001 fc61 	bl	8002798 <debug_print>
 8000ed6:	e004      	b.n	8000ee2 <bmi088_init+0x14a>
	} else {
		debug_print("Correct accel range set! 0x%02X\r\n", range);
 8000ed8:	7e7b      	ldrb	r3, [r7, #25]
 8000eda:	4619      	mov	r1, r3
 8000edc:	482d      	ldr	r0, [pc, #180]	@ (8000f94 <bmi088_init+0x1fc>)
 8000ede:	f001 fc5b 	bl	8002798 <debug_print>
	}

	uint8_t sampling;
	accel_read_reg(imu, BMI088_ACC_REG_CONF, &sampling);
 8000ee2:	f107 0318 	add.w	r3, r7, #24
 8000ee6:	461a      	mov	r2, r3
 8000ee8:	2140      	movs	r1, #64	@ 0x40
 8000eea:	68f8      	ldr	r0, [r7, #12]
 8000eec:	f7ff fe84 	bl	8000bf8 <accel_read_reg>
	if (sampling != (BMI088_ACC_ODR_200Hz | BMI088_ACC_BWP_OSR4)) {
 8000ef0:	7e3b      	ldrb	r3, [r7, #24]
 8000ef2:	2b89      	cmp	r3, #137	@ 0x89
 8000ef4:	d005      	beq.n	8000f02 <bmi088_init+0x16a>
		debug_print("Wrong accel sampling set! 0x%02X\r\n", sampling);
 8000ef6:	7e3b      	ldrb	r3, [r7, #24]
 8000ef8:	4619      	mov	r1, r3
 8000efa:	4827      	ldr	r0, [pc, #156]	@ (8000f98 <bmi088_init+0x200>)
 8000efc:	f001 fc4c 	bl	8002798 <debug_print>
 8000f00:	e004      	b.n	8000f0c <bmi088_init+0x174>
	} else {
		debug_print("Correct accel sampling set! 0x%02X\r\n", sampling);
 8000f02:	7e3b      	ldrb	r3, [r7, #24]
 8000f04:	4619      	mov	r1, r3
 8000f06:	4825      	ldr	r0, [pc, #148]	@ (8000f9c <bmi088_init+0x204>)
 8000f08:	f001 fc46 	bl	8002798 <debug_print>
	}

	uint8_t isOn;
	accel_read_reg(imu, BMI088_ACC_REG_PWR_CTRL, &isOn);
 8000f0c:	f107 0317 	add.w	r3, r7, #23
 8000f10:	461a      	mov	r2, r3
 8000f12:	217d      	movs	r1, #125	@ 0x7d
 8000f14:	68f8      	ldr	r0, [r7, #12]
 8000f16:	f7ff fe6f 	bl	8000bf8 <accel_read_reg>
	if (isOn != 0x04) {
 8000f1a:	7dfb      	ldrb	r3, [r7, #23]
 8000f1c:	2b04      	cmp	r3, #4
 8000f1e:	d005      	beq.n	8000f2c <bmi088_init+0x194>
		debug_print("Accel not turned on! 0x%02X\r\n", isOn);
 8000f20:	7dfb      	ldrb	r3, [r7, #23]
 8000f22:	4619      	mov	r1, r3
 8000f24:	481e      	ldr	r0, [pc, #120]	@ (8000fa0 <bmi088_init+0x208>)
 8000f26:	f001 fc37 	bl	8002798 <debug_print>
 8000f2a:	e004      	b.n	8000f36 <bmi088_init+0x19e>
	} else {
		debug_print("Accel turned on! 0x%02X\r\n", isOn);
 8000f2c:	7dfb      	ldrb	r3, [r7, #23]
 8000f2e:	4619      	mov	r1, r3
 8000f30:	481c      	ldr	r0, [pc, #112]	@ (8000fa4 <bmi088_init+0x20c>)
 8000f32:	f001 fc31 	bl	8002798 <debug_print>
	}

	// gyro setup
	HAL_GPIO_WritePin(imu->csGyroPinBank, imu->gyroCSPin, GPIO_PIN_SET);
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	6898      	ldr	r0, [r3, #8]
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	89db      	ldrh	r3, [r3, #14]
 8000f3e:	2201      	movs	r2, #1
 8000f40:	4619      	mov	r1, r3
 8000f42:	f003 fc85 	bl	8004850 <HAL_GPIO_WritePin>

	gyro_write_reg(imu, BMI088_GYR_REG_SOFTRESET, 0xB6);
 8000f46:	22b6      	movs	r2, #182	@ 0xb6
 8000f48:	2114      	movs	r1, #20
 8000f4a:	68f8      	ldr	r0, [r7, #12]
 8000f4c:	f7ff fefb 	bl	8000d46 <gyro_write_reg>
	HAL_Delay(250);
 8000f50:	20fa      	movs	r0, #250	@ 0xfa
 8000f52:	f002 ff7d 	bl	8003e50 <HAL_Delay>

	gyro_write_reg(imu, BMI088_GYR_REG_RANGE, BMI088_GYR_2000DPS_RANGE);
 8000f56:	2200      	movs	r2, #0
 8000f58:	210f      	movs	r1, #15
 8000f5a:	68f8      	ldr	r0, [r7, #12]
 8000f5c:	f7ff fef3 	bl	8000d46 <gyro_write_reg>
	HAL_Delay(10);
 8000f60:	200a      	movs	r0, #10
 8000f62:	f002 ff75 	bl	8003e50 <HAL_Delay>

	gyro_write_reg(imu, BMI088_GYR_REG_BANDWIDTH, BMI088_GYR_ODR_100Hz_BW_32Hz);
 8000f66:	2207      	movs	r2, #7
 8000f68:	2110      	movs	r1, #16
 8000f6a:	68f8      	ldr	r0, [r7, #12]
 8000f6c:	f7ff feeb 	bl	8000d46 <gyro_write_reg>
	HAL_Delay(10);
 8000f70:	200a      	movs	r0, #10
 8000f72:	f002 ff6d 	bl	8003e50 <HAL_Delay>
}
 8000f76:	bf00      	nop
 8000f78:	3720      	adds	r7, #32
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	411ce80a 	.word	0x411ce80a
 8000f84:	3a8ba058 	.word	0x3a8ba058
 8000f88:	080136a0 	.word	0x080136a0
 8000f8c:	080136c0 	.word	0x080136c0
 8000f90:	080136d4 	.word	0x080136d4
 8000f94:	080136f4 	.word	0x080136f4
 8000f98:	08013718 	.word	0x08013718
 8000f9c:	0801373c 	.word	0x0801373c
 8000fa0:	08013764 	.word	0x08013764
 8000fa4:	08013784 	.word	0x08013784

08000fa8 <accel_step>:

void accel_step(BMI088 *imu) {
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b08a      	sub	sp, #40	@ 0x28
 8000fac:	af02      	add	r7, sp, #8
 8000fae:	6078      	str	r0, [r7, #4]
	uint8_t tx[8] = {(BMI088_ACC_REG_DATA | 0x80), 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8000fb0:	4a32      	ldr	r2, [pc, #200]	@ (800107c <accel_step+0xd4>)
 8000fb2:	f107 0310 	add.w	r3, r7, #16
 8000fb6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fba:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t rx[8];

	HAL_GPIO_WritePin(imu->csAccelPinBank, imu->accelCSPin, GPIO_PIN_RESET);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6858      	ldr	r0, [r3, #4]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	899b      	ldrh	r3, [r3, #12]
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	4619      	mov	r1, r3
 8000fca:	f003 fc41 	bl	8004850 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(imu->hspi, tx, rx, 8, HAL_MAX_DELAY);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6818      	ldr	r0, [r3, #0]
 8000fd2:	f107 0208 	add.w	r2, r7, #8
 8000fd6:	f107 0110 	add.w	r1, r7, #16
 8000fda:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000fde:	9300      	str	r3, [sp, #0]
 8000fe0:	2308      	movs	r3, #8
 8000fe2:	f006 fcfc 	bl	80079de <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(imu->csAccelPinBank, imu->accelCSPin, GPIO_PIN_SET);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6858      	ldr	r0, [r3, #4]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	899b      	ldrh	r3, [r3, #12]
 8000fee:	2201      	movs	r2, #1
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	f003 fc2d 	bl	8004850 <HAL_GPIO_WritePin>

	int16_t raw_x = (int16_t) ((rx[3] << 8) | rx[2]);
 8000ff6:	7afb      	ldrb	r3, [r7, #11]
 8000ff8:	021b      	lsls	r3, r3, #8
 8000ffa:	b21a      	sxth	r2, r3
 8000ffc:	7abb      	ldrb	r3, [r7, #10]
 8000ffe:	b21b      	sxth	r3, r3
 8001000:	4313      	orrs	r3, r2
 8001002:	83fb      	strh	r3, [r7, #30]
	int16_t raw_y = (int16_t) ((rx[5] << 8) | rx[4]);
 8001004:	7b7b      	ldrb	r3, [r7, #13]
 8001006:	021b      	lsls	r3, r3, #8
 8001008:	b21a      	sxth	r2, r3
 800100a:	7b3b      	ldrb	r3, [r7, #12]
 800100c:	b21b      	sxth	r3, r3
 800100e:	4313      	orrs	r3, r2
 8001010:	83bb      	strh	r3, [r7, #28]
	int16_t raw_z = (int16_t) ((rx[7] << 8) | rx[6]);
 8001012:	7bfb      	ldrb	r3, [r7, #15]
 8001014:	021b      	lsls	r3, r3, #8
 8001016:	b21a      	sxth	r2, r3
 8001018:	7bbb      	ldrb	r3, [r7, #14]
 800101a:	b21b      	sxth	r3, r3
 800101c:	4313      	orrs	r3, r2
 800101e:	837b      	strh	r3, [r7, #26]

	imu->lastAccel[0] = raw_x * imu->accelConversion;
 8001020:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001024:	ee07 3a90 	vmov	s15, r3
 8001028:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001032:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	edc3 7a04 	vstr	s15, [r3, #16]
	imu->lastAccel[1] = raw_y * imu->accelConversion;
 800103c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001040:	ee07 3a90 	vmov	s15, r3
 8001044:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800104e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	edc3 7a05 	vstr	s15, [r3, #20]
	imu->lastAccel[2] = raw_z * imu->accelConversion;
 8001058:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800105c:	ee07 3a90 	vmov	s15, r3
 8001060:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800106a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	edc3 7a06 	vstr	s15, [r3, #24]
}
 8001074:	bf00      	nop
 8001076:	3720      	adds	r7, #32
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	080137a0 	.word	0x080137a0

08001080 <gyro_step>:

void gyro_step(BMI088 *imu) {
 8001080:	b580      	push	{r7, lr}
 8001082:	b08a      	sub	sp, #40	@ 0x28
 8001084:	af02      	add	r7, sp, #8
 8001086:	6078      	str	r0, [r7, #4]
	uint8_t tx[7] = {(BMI088_GYR_REG_DATA | 0x80), 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8001088:	4a34      	ldr	r2, [pc, #208]	@ (800115c <gyro_step+0xdc>)
 800108a:	f107 0310 	add.w	r3, r7, #16
 800108e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001092:	6018      	str	r0, [r3, #0]
 8001094:	3304      	adds	r3, #4
 8001096:	8019      	strh	r1, [r3, #0]
 8001098:	3302      	adds	r3, #2
 800109a:	0c0a      	lsrs	r2, r1, #16
 800109c:	701a      	strb	r2, [r3, #0]
	uint8_t rx[7];

	HAL_GPIO_WritePin(imu->csGyroPinBank, imu->gyroCSPin, GPIO_PIN_RESET);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6898      	ldr	r0, [r3, #8]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	89db      	ldrh	r3, [r3, #14]
 80010a6:	2200      	movs	r2, #0
 80010a8:	4619      	mov	r1, r3
 80010aa:	f003 fbd1 	bl	8004850 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(imu->hspi, tx, rx, 7, HAL_MAX_DELAY);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6818      	ldr	r0, [r3, #0]
 80010b2:	f107 0208 	add.w	r2, r7, #8
 80010b6:	f107 0110 	add.w	r1, r7, #16
 80010ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80010be:	9300      	str	r3, [sp, #0]
 80010c0:	2307      	movs	r3, #7
 80010c2:	f006 fc8c 	bl	80079de <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(imu->csGyroPinBank, imu->gyroCSPin, GPIO_PIN_SET);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6898      	ldr	r0, [r3, #8]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	89db      	ldrh	r3, [r3, #14]
 80010ce:	2201      	movs	r2, #1
 80010d0:	4619      	mov	r1, r3
 80010d2:	f003 fbbd 	bl	8004850 <HAL_GPIO_WritePin>

	int16_t raw_x = (int16_t) ((rx[2] << 8) | rx[1]);
 80010d6:	7abb      	ldrb	r3, [r7, #10]
 80010d8:	021b      	lsls	r3, r3, #8
 80010da:	b21a      	sxth	r2, r3
 80010dc:	7a7b      	ldrb	r3, [r7, #9]
 80010de:	b21b      	sxth	r3, r3
 80010e0:	4313      	orrs	r3, r2
 80010e2:	83fb      	strh	r3, [r7, #30]
	int16_t raw_y = (int16_t) ((rx[4] << 8) | rx[3]);
 80010e4:	7b3b      	ldrb	r3, [r7, #12]
 80010e6:	021b      	lsls	r3, r3, #8
 80010e8:	b21a      	sxth	r2, r3
 80010ea:	7afb      	ldrb	r3, [r7, #11]
 80010ec:	b21b      	sxth	r3, r3
 80010ee:	4313      	orrs	r3, r2
 80010f0:	83bb      	strh	r3, [r7, #28]
	int16_t raw_z = (int16_t) ((rx[6] << 8) | rx[5]);
 80010f2:	7bbb      	ldrb	r3, [r7, #14]
 80010f4:	021b      	lsls	r3, r3, #8
 80010f6:	b21a      	sxth	r2, r3
 80010f8:	7b7b      	ldrb	r3, [r7, #13]
 80010fa:	b21b      	sxth	r3, r3
 80010fc:	4313      	orrs	r3, r2
 80010fe:	837b      	strh	r3, [r7, #26]

	imu->lastGyro[0] = raw_x * imu->gyroConversion;
 8001100:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001104:	ee07 3a90 	vmov	s15, r3
 8001108:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001112:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	edc3 7a07 	vstr	s15, [r3, #28]
	imu->lastGyro[1] = raw_y * imu->gyroConversion;
 800111c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001120:	ee07 3a90 	vmov	s15, r3
 8001124:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800112e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	edc3 7a08 	vstr	s15, [r3, #32]
	imu->lastGyro[2] = raw_z * imu->gyroConversion;
 8001138:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800113c:	ee07 3a90 	vmov	s15, r3
 8001140:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800114a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
}
 8001154:	bf00      	nop
 8001156:	3720      	adds	r7, #32
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	080137a8 	.word	0x080137a8

08001160 <accel_get>:

float *accel_get(BMI088 *imu) {
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
	return imu->lastAccel;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	3310      	adds	r3, #16
}
 800116c:	4618      	mov	r0, r3
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr

08001178 <gyro_get>:

float *gyro_get(BMI088 *imu) {
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
	return imu->lastGyro;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	331c      	adds	r3, #28
}
 8001184:	4618      	mov	r0, r3
 8001186:	370c      	adds	r7, #12
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr

08001190 <bmp_read_reg>:
#define BMP390_STATUS_DRDY_PRES (1 << 5) // Data ready pressure bit
#define BMP390_STATUS_DRDY_TEMP (1 << 6) // Data ready temperature bit
#define BMP390_SPI_TIMEOUT      (100)


static bool bmp_read_reg(BMP390 *baro, uint8_t reg, uint8_t *data) {
 8001190:	b580      	push	{r7, lr}
 8001192:	b088      	sub	sp, #32
 8001194:	af02      	add	r7, sp, #8
 8001196:	60f8      	str	r0, [r7, #12]
 8001198:	460b      	mov	r3, r1
 800119a:	607a      	str	r2, [r7, #4]
 800119c:	72fb      	strb	r3, [r7, #11]
    uint8_t tx[3] = { reg | 0x80, 0x00, 0x00 };
 800119e:	7afb      	ldrb	r3, [r7, #11]
 80011a0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	753b      	strb	r3, [r7, #20]
 80011a8:	2300      	movs	r3, #0
 80011aa:	757b      	strb	r3, [r7, #21]
 80011ac:	2300      	movs	r3, #0
 80011ae:	75bb      	strb	r3, [r7, #22]
    uint8_t rx[3] = {0};
 80011b0:	4b1a      	ldr	r3, [pc, #104]	@ (800121c <bmp_read_reg+0x8c>)
 80011b2:	881b      	ldrh	r3, [r3, #0]
 80011b4:	823b      	strh	r3, [r7, #16]
 80011b6:	2300      	movs	r3, #0
 80011b8:	74bb      	strb	r3, [r7, #18]
    HAL_StatusTypeDef status;

    HAL_GPIO_WritePin(baro->csPort, baro->csPin, GPIO_PIN_RESET);
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	6858      	ldr	r0, [r3, #4]
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	891b      	ldrh	r3, [r3, #8]
 80011c2:	2200      	movs	r2, #0
 80011c4:	4619      	mov	r1, r3
 80011c6:	f003 fb43 	bl	8004850 <HAL_GPIO_WritePin>
    status = HAL_SPI_TransmitReceive(baro->hspi, tx, rx, 3, BMP390_SPI_TIMEOUT);
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	6818      	ldr	r0, [r3, #0]
 80011ce:	f107 0210 	add.w	r2, r7, #16
 80011d2:	f107 0114 	add.w	r1, r7, #20
 80011d6:	2364      	movs	r3, #100	@ 0x64
 80011d8:	9300      	str	r3, [sp, #0]
 80011da:	2303      	movs	r3, #3
 80011dc:	f006 fbff 	bl	80079de <HAL_SPI_TransmitReceive>
 80011e0:	4603      	mov	r3, r0
 80011e2:	75fb      	strb	r3, [r7, #23]
    HAL_GPIO_WritePin(baro->csPort, baro->csPin, GPIO_PIN_SET);
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	6858      	ldr	r0, [r3, #4]
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	891b      	ldrh	r3, [r3, #8]
 80011ec:	2201      	movs	r2, #1
 80011ee:	4619      	mov	r1, r3
 80011f0:	f003 fb2e 	bl	8004850 <HAL_GPIO_WritePin>

    if (status != HAL_OK) {
 80011f4:	7dfb      	ldrb	r3, [r7, #23]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d007      	beq.n	800120a <bmp_read_reg+0x7a>
        debug_print("BMP390 SPI Error (Read Reg 0x%02X): %d\r\n", reg, status);
 80011fa:	7afb      	ldrb	r3, [r7, #11]
 80011fc:	7dfa      	ldrb	r2, [r7, #23]
 80011fe:	4619      	mov	r1, r3
 8001200:	4807      	ldr	r0, [pc, #28]	@ (8001220 <bmp_read_reg+0x90>)
 8001202:	f001 fac9 	bl	8002798 <debug_print>
        return false;
 8001206:	2300      	movs	r3, #0
 8001208:	e003      	b.n	8001212 <bmp_read_reg+0x82>
    }

    *data = rx[2];
 800120a:	7cba      	ldrb	r2, [r7, #18]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	701a      	strb	r2, [r3, #0]
    return true;
 8001210:	2301      	movs	r3, #1
}
 8001212:	4618      	mov	r0, r3
 8001214:	3718      	adds	r7, #24
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	080137dc 	.word	0x080137dc
 8001220:	080137b0 	.word	0x080137b0

08001224 <bmp_write_reg>:

static bool bmp_write_reg(BMP390 *baro, uint8_t reg, uint8_t data) {
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	460b      	mov	r3, r1
 800122e:	70fb      	strb	r3, [r7, #3]
 8001230:	4613      	mov	r3, r2
 8001232:	70bb      	strb	r3, [r7, #2]
    uint8_t tx[2] = { reg & ~0x80, data };
 8001234:	78fb      	ldrb	r3, [r7, #3]
 8001236:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800123a:	b2db      	uxtb	r3, r3
 800123c:	733b      	strb	r3, [r7, #12]
 800123e:	78bb      	ldrb	r3, [r7, #2]
 8001240:	737b      	strb	r3, [r7, #13]
    HAL_StatusTypeDef status;

    HAL_GPIO_WritePin(baro->csPort, baro->csPin, GPIO_PIN_RESET);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6858      	ldr	r0, [r3, #4]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	891b      	ldrh	r3, [r3, #8]
 800124a:	2200      	movs	r2, #0
 800124c:	4619      	mov	r1, r3
 800124e:	f003 faff 	bl	8004850 <HAL_GPIO_WritePin>
    status = HAL_SPI_Transmit(baro->hspi, tx, 2, BMP390_SPI_TIMEOUT);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6818      	ldr	r0, [r3, #0]
 8001256:	f107 010c 	add.w	r1, r7, #12
 800125a:	2364      	movs	r3, #100	@ 0x64
 800125c:	2202      	movs	r2, #2
 800125e:	f006 f910 	bl	8007482 <HAL_SPI_Transmit>
 8001262:	4603      	mov	r3, r0
 8001264:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(baro->csPort, baro->csPin, GPIO_PIN_SET);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6858      	ldr	r0, [r3, #4]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	891b      	ldrh	r3, [r3, #8]
 800126e:	2201      	movs	r2, #1
 8001270:	4619      	mov	r1, r3
 8001272:	f003 faed 	bl	8004850 <HAL_GPIO_WritePin>

    if (status != HAL_OK) {
 8001276:	7bfb      	ldrb	r3, [r7, #15]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d007      	beq.n	800128c <bmp_write_reg+0x68>
        debug_print("BMP390 SPI Error (Write Reg 0x%02X): %d\r\n", reg, status);
 800127c:	78fb      	ldrb	r3, [r7, #3]
 800127e:	7bfa      	ldrb	r2, [r7, #15]
 8001280:	4619      	mov	r1, r3
 8001282:	4805      	ldr	r0, [pc, #20]	@ (8001298 <bmp_write_reg+0x74>)
 8001284:	f001 fa88 	bl	8002798 <debug_print>
        return false;
 8001288:	2300      	movs	r3, #0
 800128a:	e000      	b.n	800128e <bmp_write_reg+0x6a>
    }
    return true;
 800128c:	2301      	movs	r3, #1
}
 800128e:	4618      	mov	r0, r3
 8001290:	3710      	adds	r7, #16
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	080137e0 	.word	0x080137e0

0800129c <bmp_read_buf>:

static bool bmp_read_buf(BMP390 *baro, uint8_t reg, uint8_t *data, uint8_t len) {
 800129c:	b590      	push	{r4, r7, lr}
 800129e:	b099      	sub	sp, #100	@ 0x64
 80012a0:	af02      	add	r7, sp, #8
 80012a2:	60f8      	str	r0, [r7, #12]
 80012a4:	607a      	str	r2, [r7, #4]
 80012a6:	461a      	mov	r2, r3
 80012a8:	460b      	mov	r3, r1
 80012aa:	72fb      	strb	r3, [r7, #11]
 80012ac:	4613      	mov	r3, r2
 80012ae:	72bb      	strb	r3, [r7, #10]
    if (len == 0) return true;
 80012b0:	7abb      	ldrb	r3, [r7, #10]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d101      	bne.n	80012ba <bmp_read_buf+0x1e>
 80012b6:	2301      	movs	r3, #1
 80012b8:	e061      	b.n	800137e <bmp_read_buf+0xe2>

    #define MAX_SPI_BUF_LEN 32
    if (len > MAX_SPI_BUF_LEN - 2) {
 80012ba:	7abb      	ldrb	r3, [r7, #10]
 80012bc:	2b1e      	cmp	r3, #30
 80012be:	d906      	bls.n	80012ce <bmp_read_buf+0x32>
         debug_print("BMP390 Read Buf Error: len %d too large\r\n", len);
 80012c0:	7abb      	ldrb	r3, [r7, #10]
 80012c2:	4619      	mov	r1, r3
 80012c4:	4830      	ldr	r0, [pc, #192]	@ (8001388 <bmp_read_buf+0xec>)
 80012c6:	f001 fa67 	bl	8002798 <debug_print>
         return false;
 80012ca:	2300      	movs	r3, #0
 80012cc:	e057      	b.n	800137e <bmp_read_buf+0xe2>
    }

    uint8_t total = 2 + len;
 80012ce:	7abb      	ldrb	r3, [r7, #10]
 80012d0:	3302      	adds	r3, #2
 80012d2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    uint8_t tx[MAX_SPI_BUF_LEN] = {0};
 80012d6:	2300      	movs	r3, #0
 80012d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80012da:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80012de:	2200      	movs	r2, #0
 80012e0:	601a      	str	r2, [r3, #0]
 80012e2:	605a      	str	r2, [r3, #4]
 80012e4:	609a      	str	r2, [r3, #8]
 80012e6:	60da      	str	r2, [r3, #12]
 80012e8:	611a      	str	r2, [r3, #16]
 80012ea:	615a      	str	r2, [r3, #20]
 80012ec:	619a      	str	r2, [r3, #24]
    uint8_t rx[MAX_SPI_BUF_LEN] = {0};
 80012ee:	2300      	movs	r3, #0
 80012f0:	617b      	str	r3, [r7, #20]
 80012f2:	f107 0318 	add.w	r3, r7, #24
 80012f6:	2200      	movs	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]
 80012fa:	605a      	str	r2, [r3, #4]
 80012fc:	609a      	str	r2, [r3, #8]
 80012fe:	60da      	str	r2, [r3, #12]
 8001300:	611a      	str	r2, [r3, #16]
 8001302:	615a      	str	r2, [r3, #20]
 8001304:	619a      	str	r2, [r3, #24]
    HAL_StatusTypeDef status;

    tx[0] = reg | 0x80;
 8001306:	7afb      	ldrb	r3, [r7, #11]
 8001308:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800130c:	b2db      	uxtb	r3, r3
 800130e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    HAL_GPIO_WritePin(baro->csPort, baro->csPin, GPIO_PIN_RESET);
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	6858      	ldr	r0, [r3, #4]
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	891b      	ldrh	r3, [r3, #8]
 800131a:	2200      	movs	r2, #0
 800131c:	4619      	mov	r1, r3
 800131e:	f003 fa97 	bl	8004850 <HAL_GPIO_WritePin>
    status = HAL_SPI_TransmitReceive(baro->hspi, tx, rx, total, BMP390_SPI_TIMEOUT);
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	6818      	ldr	r0, [r3, #0]
 8001326:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800132a:	b29b      	uxth	r3, r3
 800132c:	f107 0214 	add.w	r2, r7, #20
 8001330:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8001334:	2464      	movs	r4, #100	@ 0x64
 8001336:	9400      	str	r4, [sp, #0]
 8001338:	f006 fb51 	bl	80079de <HAL_SPI_TransmitReceive>
 800133c:	4603      	mov	r3, r0
 800133e:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
    HAL_GPIO_WritePin(baro->csPort, baro->csPin, GPIO_PIN_SET);
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	6858      	ldr	r0, [r3, #4]
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	891b      	ldrh	r3, [r3, #8]
 800134a:	2201      	movs	r2, #1
 800134c:	4619      	mov	r1, r3
 800134e:	f003 fa7f 	bl	8004850 <HAL_GPIO_WritePin>

    if (status != HAL_OK) {
 8001352:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8001356:	2b00      	cmp	r3, #0
 8001358:	d008      	beq.n	800136c <bmp_read_buf+0xd0>
        debug_print("BMP390 SPI Error (Read Buf 0x%02X, len %d): %d\r\n", reg, len, status);
 800135a:	7af9      	ldrb	r1, [r7, #11]
 800135c:	7aba      	ldrb	r2, [r7, #10]
 800135e:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8001362:	480a      	ldr	r0, [pc, #40]	@ (800138c <bmp_read_buf+0xf0>)
 8001364:	f001 fa18 	bl	8002798 <debug_print>
        return false;
 8001368:	2300      	movs	r3, #0
 800136a:	e008      	b.n	800137e <bmp_read_buf+0xe2>
    }

    memcpy(data, rx + 2, len);
 800136c:	f107 0314 	add.w	r3, r7, #20
 8001370:	3302      	adds	r3, #2
 8001372:	7aba      	ldrb	r2, [r7, #10]
 8001374:	4619      	mov	r1, r3
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	f00f fcc3 	bl	8010d02 <memcpy>
    return true;
 800137c:	2301      	movs	r3, #1
}
 800137e:	4618      	mov	r0, r3
 8001380:	375c      	adds	r7, #92	@ 0x5c
 8001382:	46bd      	mov	sp, r7
 8001384:	bd90      	pop	{r4, r7, pc}
 8001386:	bf00      	nop
 8001388:	0801380c 	.word	0x0801380c
 800138c:	08013838 	.word	0x08013838

08001390 <bmp_parse_calib>:

static void bmp_parse_calib(BMP390 *baro, uint8_t *raw) {
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	6039      	str	r1, [r7, #0]
    baro->raw_calib.nvm_par_t1 = BMP390_CONCAT2BYTES(raw[1], raw[0]);
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	3301      	adds	r3, #1
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	021b      	lsls	r3, r3, #8
 80013a2:	b21a      	sxth	r2, r3
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	b21b      	sxth	r3, r3
 80013aa:	4313      	orrs	r3, r2
 80013ac:	b21b      	sxth	r3, r3
 80013ae:	b29a      	uxth	r2, r3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	82da      	strh	r2, [r3, #22]
    baro->calib.par_t1 = (float)baro->raw_calib.nvm_par_t1 / powf(2, -8);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	8adb      	ldrh	r3, [r3, #22]
 80013b8:	ee07 3a90 	vmov	s15, r3
 80013bc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80013c0:	eddf 6aa4 	vldr	s13, [pc, #656]	@ 8001654 <bmp_parse_calib+0x2c4>
 80013c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

    baro->raw_calib.nvm_par_t2 = BMP390_CONCAT2BYTES(raw[3], raw[2]);
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	3303      	adds	r3, #3
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	021b      	lsls	r3, r3, #8
 80013d6:	b21a      	sxth	r2, r3
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	3302      	adds	r3, #2
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	b21b      	sxth	r3, r3
 80013e0:	4313      	orrs	r3, r2
 80013e2:	b21b      	sxth	r3, r3
 80013e4:	b29a      	uxth	r2, r3
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	831a      	strh	r2, [r3, #24]
    baro->calib.par_t2 = (float)baro->raw_calib.nvm_par_t2 / powf(2, 30);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	8b1b      	ldrh	r3, [r3, #24]
 80013ee:	ee07 3a90 	vmov	s15, r3
 80013f2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80013f6:	eddf 6a98 	vldr	s13, [pc, #608]	@ 8001658 <bmp_parse_calib+0x2c8>
 80013fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30

    baro->raw_calib.nvm_par_t3 = (int8_t)raw[4];
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	3304      	adds	r3, #4
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	b25a      	sxtb	r2, r3
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	769a      	strb	r2, [r3, #26]
    baro->calib.par_t3 = (float)baro->raw_calib.nvm_par_t3 / powf(2, 48);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	f993 301a 	ldrsb.w	r3, [r3, #26]
 8001416:	ee07 3a90 	vmov	s15, r3
 800141a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800141e:	eddf 6a8f 	vldr	s13, [pc, #572]	@ 800165c <bmp_parse_calib+0x2cc>
 8001422:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34

    baro->raw_calib.nvm_par_p1 = (int16_t)BMP390_CONCAT2BYTES(raw[6], raw[5]);
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	3306      	adds	r3, #6
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	021b      	lsls	r3, r3, #8
 8001434:	b21a      	sxth	r2, r3
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	3305      	adds	r3, #5
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	b21b      	sxth	r3, r3
 800143e:	4313      	orrs	r3, r2
 8001440:	b21a      	sxth	r2, r3
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	839a      	strh	r2, [r3, #28]
    baro->calib.par_p1 = (((float)baro->raw_calib.nvm_par_p1) - powf(2,14)) / powf(2,20);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800144c:	ee07 3a90 	vmov	s15, r3
 8001450:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001454:	ed9f 7a82 	vldr	s14, [pc, #520]	@ 8001660 <bmp_parse_calib+0x2d0>
 8001458:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800145c:	eddf 6a81 	vldr	s13, [pc, #516]	@ 8001664 <bmp_parse_calib+0x2d4>
 8001460:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38

    baro->raw_calib.nvm_par_p2 = (int16_t)BMP390_CONCAT2BYTES(raw[8], raw[7]);
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	3308      	adds	r3, #8
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	021b      	lsls	r3, r3, #8
 8001472:	b21a      	sxth	r2, r3
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	3307      	adds	r3, #7
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	b21b      	sxth	r3, r3
 800147c:	4313      	orrs	r3, r2
 800147e:	b21a      	sxth	r2, r3
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	83da      	strh	r2, [r3, #30]
    baro->calib.par_p2 = (((float)baro->raw_calib.nvm_par_p2) - powf(2,14)) / powf(2,29);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 800148a:	ee07 3a90 	vmov	s15, r3
 800148e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001492:	ed9f 7a73 	vldr	s14, [pc, #460]	@ 8001660 <bmp_parse_calib+0x2d0>
 8001496:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800149a:	eddf 6a73 	vldr	s13, [pc, #460]	@ 8001668 <bmp_parse_calib+0x2d8>
 800149e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c

    baro->raw_calib.nvm_par_p3 = (int8_t)raw[9];
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	3309      	adds	r3, #9
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	b25a      	sxtb	r2, r3
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	f883 2020 	strb.w	r2, [r3, #32]
    baro->calib.par_p3 = (float)baro->raw_calib.nvm_par_p3 / powf(2,32);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	f993 3020 	ldrsb.w	r3, [r3, #32]
 80014bc:	ee07 3a90 	vmov	s15, r3
 80014c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014c4:	eddf 6a69 	vldr	s13, [pc, #420]	@ 800166c <bmp_parse_calib+0x2dc>
 80014c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40

    baro->raw_calib.nvm_par_p4 = (int8_t)raw[10];
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	330a      	adds	r3, #10
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	b25a      	sxtb	r2, r3
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    baro->calib.par_p4 = (float)baro->raw_calib.nvm_par_p4 / powf(2,37);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	f993 3021 	ldrsb.w	r3, [r3, #33]	@ 0x21
 80014e6:	ee07 3a90 	vmov	s15, r3
 80014ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014ee:	eddf 6a60 	vldr	s13, [pc, #384]	@ 8001670 <bmp_parse_calib+0x2e0>
 80014f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44

    baro->raw_calib.nvm_par_p5 = BMP390_CONCAT2BYTES(raw[12], raw[11]);
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	330c      	adds	r3, #12
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	021b      	lsls	r3, r3, #8
 8001504:	b21a      	sxth	r2, r3
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	330b      	adds	r3, #11
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	b21b      	sxth	r3, r3
 800150e:	4313      	orrs	r3, r2
 8001510:	b21b      	sxth	r3, r3
 8001512:	b29a      	uxth	r2, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	845a      	strh	r2, [r3, #34]	@ 0x22
    baro->calib.par_p5 = (float)baro->raw_calib.nvm_par_p5 / powf(2, -3);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 800151c:	ee07 3a90 	vmov	s15, r3
 8001520:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001524:	eef4 6a00 	vmov.f32	s13, #64	@ 0x3e000000  0.125
 8001528:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48

    baro->raw_calib.nvm_par_p6 = BMP390_CONCAT2BYTES(raw[14], raw[13]);
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	330e      	adds	r3, #14
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	021b      	lsls	r3, r3, #8
 800153a:	b21a      	sxth	r2, r3
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	330d      	adds	r3, #13
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	b21b      	sxth	r3, r3
 8001544:	4313      	orrs	r3, r2
 8001546:	b21b      	sxth	r3, r3
 8001548:	b29a      	uxth	r2, r3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	849a      	strh	r2, [r3, #36]	@ 0x24
    baro->calib.par_p6 = (float)baro->raw_calib.nvm_par_p6 / powf(2,6);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001552:	ee07 3a90 	vmov	s15, r3
 8001556:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800155a:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8001674 <bmp_parse_calib+0x2e4>
 800155e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c

    baro->raw_calib.nvm_par_p7 = (int8_t)raw[15];
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	330f      	adds	r3, #15
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	b25a      	sxtb	r2, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
    baro->calib.par_p7 = (float)baro->raw_calib.nvm_par_p7 / powf(2,8);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	f993 3026 	ldrsb.w	r3, [r3, #38]	@ 0x26
 800157c:	ee07 3a90 	vmov	s15, r3
 8001580:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001584:	eddf 6a3c 	vldr	s13, [pc, #240]	@ 8001678 <bmp_parse_calib+0x2e8>
 8001588:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50

    baro->raw_calib.nvm_par_p8 = (int8_t)raw[16];
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	3310      	adds	r3, #16
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	b25a      	sxtb	r2, r3
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
    baro->calib.par_p8 = (float)baro->raw_calib.nvm_par_p8 / powf(2,15);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	f993 3027 	ldrsb.w	r3, [r3, #39]	@ 0x27
 80015a6:	ee07 3a90 	vmov	s15, r3
 80015aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015ae:	eddf 6a33 	vldr	s13, [pc, #204]	@ 800167c <bmp_parse_calib+0x2ec>
 80015b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	edc3 7a15 	vstr	s15, [r3, #84]	@ 0x54

    baro->raw_calib.nvm_par_p9 = (int16_t)BMP390_CONCAT2BYTES(raw[18], raw[17]);
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	3312      	adds	r3, #18
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	021b      	lsls	r3, r3, #8
 80015c4:	b21a      	sxth	r2, r3
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	3311      	adds	r3, #17
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	b21b      	sxth	r3, r3
 80015ce:	4313      	orrs	r3, r2
 80015d0:	b21a      	sxth	r2, r3
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	851a      	strh	r2, [r3, #40]	@ 0x28
    baro->calib.par_p9 = (float)baro->raw_calib.nvm_par_p9 / powf(2,48);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	@ 0x28
 80015dc:	ee07 3a90 	vmov	s15, r3
 80015e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015e4:	eddf 6a1d 	vldr	s13, [pc, #116]	@ 800165c <bmp_parse_calib+0x2cc>
 80015e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	edc3 7a16 	vstr	s15, [r3, #88]	@ 0x58

    baro->raw_calib.nvm_par_p10 = (int8_t)raw[19];
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	3313      	adds	r3, #19
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	b25a      	sxtb	r2, r3
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
    baro->calib.par_p10 = (float)baro->raw_calib.nvm_par_p10 / powf(2,48);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	f993 302a 	ldrsb.w	r3, [r3, #42]	@ 0x2a
 8001606:	ee07 3a90 	vmov	s15, r3
 800160a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800160e:	eddf 6a13 	vldr	s13, [pc, #76]	@ 800165c <bmp_parse_calib+0x2cc>
 8001612:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	edc3 7a17 	vstr	s15, [r3, #92]	@ 0x5c

    baro->raw_calib.nvm_par_p11 = (int8_t)raw[20];
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	3314      	adds	r3, #20
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	b25a      	sxtb	r2, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
    baro->calib.par_p11 = (float)baro->raw_calib.nvm_par_p11 / powf(2,65);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	f993 302b 	ldrsb.w	r3, [r3, #43]	@ 0x2b
 8001630:	ee07 3a90 	vmov	s15, r3
 8001634:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001638:	eddf 6a11 	vldr	s13, [pc, #68]	@ 8001680 <bmp_parse_calib+0x2f0>
 800163c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	edc3 7a18 	vstr	s15, [r3, #96]	@ 0x60
}
 8001646:	bf00      	nop
 8001648:	370c      	adds	r7, #12
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	3b800000 	.word	0x3b800000
 8001658:	4e800000 	.word	0x4e800000
 800165c:	57800000 	.word	0x57800000
 8001660:	46800000 	.word	0x46800000
 8001664:	49800000 	.word	0x49800000
 8001668:	4e000000 	.word	0x4e000000
 800166c:	4f800000 	.word	0x4f800000
 8001670:	52000000 	.word	0x52000000
 8001674:	42800000 	.word	0x42800000
 8001678:	43800000 	.word	0x43800000
 800167c:	47000000 	.word	0x47000000
 8001680:	60000000 	.word	0x60000000

08001684 <bmp_compensate_temperature>:

static float bmp_compensate_temperature(BMP390 *baro, uint32_t uncomp_temp) {
 8001684:	b480      	push	{r7}
 8001686:	b085      	sub	sp, #20
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
 800168c:	6039      	str	r1, [r7, #0]
    float partial1 = (float)uncomp_temp - baro->calib.par_t1;
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	ee07 3a90 	vmov	s15, r3
 8001694:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800169e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016a2:	edc7 7a03 	vstr	s15, [r7, #12]
    float partial2 = partial1 * baro->calib.par_t2;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80016ac:	ed97 7a03 	vldr	s14, [r7, #12]
 80016b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016b4:	edc7 7a02 	vstr	s15, [r7, #8]
    baro->calib.t_lin = partial2 + (partial1 * partial1) * baro->calib.par_t3;
 80016b8:	edd7 7a03 	vldr	s15, [r7, #12]
 80016bc:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80016c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016ca:	edd7 7a02 	vldr	s15, [r7, #8]
 80016ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	edc3 7a19 	vstr	s15, [r3, #100]	@ 0x64
    return baro->calib.t_lin;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80016dc:	ee07 3a90 	vmov	s15, r3
}
 80016e0:	eeb0 0a67 	vmov.f32	s0, s15
 80016e4:	3714      	adds	r7, #20
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr

080016ee <bmp_compensate_pressure>:

static float bmp_compensate_pressure(BMP390 *baro, uint32_t uncomp_press) {
 80016ee:	b480      	push	{r7}
 80016f0:	b091      	sub	sp, #68	@ 0x44
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]
 80016f6:	6039      	str	r1, [r7, #0]
    float partial_data1 = baro->calib.par_p6 * baro->calib.t_lin;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	ed93 7a13 	vldr	s14, [r3, #76]	@ 0x4c
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 8001704:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001708:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    float partial_data2 = baro->calib.par_p7 * (baro->calib.t_lin * baro->calib.t_lin);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	ed93 7a14 	vldr	s14, [r3, #80]	@ 0x50
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	edd3 6a19 	vldr	s13, [r3, #100]	@ 0x64
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 800171e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001722:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001726:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
    float partial_data3 = baro->calib.par_p8 * (baro->calib.t_lin * baro->calib.t_lin * baro->calib.t_lin);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	ed93 7a15 	vldr	s14, [r3, #84]	@ 0x54
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	edd3 6a19 	vldr	s13, [r3, #100]	@ 0x64
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 800173c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 8001746:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800174a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800174e:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    float partial_out1 = baro->calib.par_p5 + partial_data1 + partial_data2 + partial_data3;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 8001758:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800175c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001760:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001764:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001768:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800176c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001770:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

    float flt_uncomp_press = (float)uncomp_press;
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	ee07 3a90 	vmov	s15, r3
 800177a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800177e:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

    float partial_data1_p = baro->calib.par_p2 * baro->calib.t_lin;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 800178e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001792:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    float partial_data2_p = baro->calib.par_p3 * (baro->calib.t_lin * baro->calib.t_lin);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	edd3 6a19 	vldr	s13, [r3, #100]	@ 0x64
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 80017a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017b0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    float partial_data3_p = baro->calib.par_p4 * (baro->calib.t_lin * baro->calib.t_lin * baro->calib.t_lin);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	edd3 6a19 	vldr	s13, [r3, #100]	@ 0x64
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 80017c6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 80017d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017d8:	edc7 7a08 	vstr	s15, [r7, #32]
    float partial_out2 = flt_uncomp_press * (baro->calib.par_p1 + partial_data1_p + partial_data2_p + partial_data3_p);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 80017e2:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80017e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017ea:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80017ee:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017f2:	edd7 7a08 	vldr	s15, [r7, #32]
 80017f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017fa:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80017fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001802:	edc7 7a07 	vstr	s15, [r7, #28]


    float partial_data1_p2 = flt_uncomp_press * flt_uncomp_press;
 8001806:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800180a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800180e:	edc7 7a06 	vstr	s15, [r7, #24]
    float partial_data2_p2 = baro->calib.par_p9 + baro->calib.par_p10 * baro->calib.t_lin;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	ed93 7a16 	vldr	s14, [r3, #88]	@ 0x58
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	edd3 6a17 	vldr	s13, [r3, #92]	@ 0x5c
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 8001824:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001828:	ee77 7a27 	vadd.f32	s15, s14, s15
 800182c:	edc7 7a05 	vstr	s15, [r7, #20]
    float partial_data3_p2 = partial_data1_p2 * partial_data2_p2;
 8001830:	ed97 7a06 	vldr	s14, [r7, #24]
 8001834:	edd7 7a05 	vldr	s15, [r7, #20]
 8001838:	ee67 7a27 	vmul.f32	s15, s14, s15
 800183c:	edc7 7a04 	vstr	s15, [r7, #16]
    float partial_data4_p2 = partial_data3_p2 + (flt_uncomp_press * flt_uncomp_press * flt_uncomp_press) * baro->calib.par_p11;
 8001840:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001844:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001848:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800184c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 8001856:	ee67 7a27 	vmul.f32	s15, s14, s15
 800185a:	ed97 7a04 	vldr	s14, [r7, #16]
 800185e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001862:	edc7 7a03 	vstr	s15, [r7, #12]

    float comp_press = partial_out1 + partial_out2 + partial_data4_p2;
 8001866:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 800186a:	edd7 7a07 	vldr	s15, [r7, #28]
 800186e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001872:	ed97 7a03 	vldr	s14, [r7, #12]
 8001876:	ee77 7a27 	vadd.f32	s15, s14, s15
 800187a:	edc7 7a02 	vstr	s15, [r7, #8]

    return comp_press;
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	ee07 3a90 	vmov	s15, r3
}
 8001884:	eeb0 0a67 	vmov.f32	s0, s15
 8001888:	3744      	adds	r7, #68	@ 0x44
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
	...

08001894 <bmp_init>:

bool bmp_init(BMP390 *baro, SPI_HandleTypeDef *hspi, GPIO_TypeDef *csPort, uint16_t csPin) {
 8001894:	b5b0      	push	{r4, r5, r7, lr}
 8001896:	b090      	sub	sp, #64	@ 0x40
 8001898:	af04      	add	r7, sp, #16
 800189a:	60f8      	str	r0, [r7, #12]
 800189c:	60b9      	str	r1, [r7, #8]
 800189e:	607a      	str	r2, [r7, #4]
 80018a0:	807b      	strh	r3, [r7, #2]
    baro->hspi = hspi;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	68ba      	ldr	r2, [r7, #8]
 80018a6:	601a      	str	r2, [r3, #0]
    baro->csPort = csPort;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	605a      	str	r2, [r3, #4]
    baro->csPin = csPin;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	887a      	ldrh	r2, [r7, #2]
 80018b2:	811a      	strh	r2, [r3, #8]
    baro->last_press = NAN;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	4aa6      	ldr	r2, [pc, #664]	@ (8001b50 <bmp_init+0x2bc>)
 80018b8:	60da      	str	r2, [r3, #12]
    baro->last_alt   = NAN;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	4aa4      	ldr	r2, [pc, #656]	@ (8001b50 <bmp_init+0x2bc>)
 80018be:	611a      	str	r2, [r3, #16]
    baro->last_temp  = INT16_MIN;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80018c6:	829a      	strh	r2, [r3, #20]

    HAL_GPIO_WritePin(baro->csPort, baro->csPin, GPIO_PIN_SET);
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	6858      	ldr	r0, [r3, #4]
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	891b      	ldrh	r3, [r3, #8]
 80018d0:	2201      	movs	r2, #1
 80018d2:	4619      	mov	r1, r3
 80018d4:	f002 ffbc 	bl	8004850 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 80018d8:	200a      	movs	r0, #10
 80018da:	f002 fab9 	bl	8003e50 <HAL_Delay>

    uint8_t chip_id = 0;
 80018de:	2300      	movs	r3, #0
 80018e0:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    debug_print("BMP390 Init: Reading Chip ID...\r\n");
 80018e4:	489b      	ldr	r0, [pc, #620]	@ (8001b54 <bmp_init+0x2c0>)
 80018e6:	f000 ff57 	bl	8002798 <debug_print>
    if (!bmp_read_reg(baro, BMP390_REG_CHIP_ID, &chip_id)) {
 80018ea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80018ee:	461a      	mov	r2, r3
 80018f0:	2100      	movs	r1, #0
 80018f2:	68f8      	ldr	r0, [r7, #12]
 80018f4:	f7ff fc4c 	bl	8001190 <bmp_read_reg>
 80018f8:	4603      	mov	r3, r0
 80018fa:	f083 0301 	eor.w	r3, r3, #1
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	2b00      	cmp	r3, #0
 8001902:	d004      	beq.n	800190e <bmp_init+0x7a>
        debug_print("BMP390 Init ERROR: Failed SPI read for Chip ID\r\n");
 8001904:	4894      	ldr	r0, [pc, #592]	@ (8001b58 <bmp_init+0x2c4>)
 8001906:	f000 ff47 	bl	8002798 <debug_print>
        return false;
 800190a:	2300      	movs	r3, #0
 800190c:	e11c      	b.n	8001b48 <bmp_init+0x2b4>
    }
    if (chip_id != BMP390_CHIP_ID) {
 800190e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001912:	2b60      	cmp	r3, #96	@ 0x60
 8001914:	d008      	beq.n	8001928 <bmp_init+0x94>
        debug_print("BMP390 Init ERROR: Chip ID Mismatch! Read: 0x%02X Expected: 0x%02X\r\n", chip_id, BMP390_CHIP_ID);
 8001916:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800191a:	2260      	movs	r2, #96	@ 0x60
 800191c:	4619      	mov	r1, r3
 800191e:	488f      	ldr	r0, [pc, #572]	@ (8001b5c <bmp_init+0x2c8>)
 8001920:	f000 ff3a 	bl	8002798 <debug_print>
        return false;
 8001924:	2300      	movs	r3, #0
 8001926:	e10f      	b.n	8001b48 <bmp_init+0x2b4>
    }
    debug_print("BMP390 Init: Chip ID OK (0x%02X).\r\n", chip_id);
 8001928:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800192c:	4619      	mov	r1, r3
 800192e:	488c      	ldr	r0, [pc, #560]	@ (8001b60 <bmp_init+0x2cc>)
 8001930:	f000 ff32 	bl	8002798 <debug_print>


    debug_print("BMP390 Init: Sending Soft Reset...\r\n");
 8001934:	488b      	ldr	r0, [pc, #556]	@ (8001b64 <bmp_init+0x2d0>)
 8001936:	f000 ff2f 	bl	8002798 <debug_print>
    if (!bmp_write_reg(baro, BMP390_REG_CMD, SOFT_RESET)) {
 800193a:	22b6      	movs	r2, #182	@ 0xb6
 800193c:	217e      	movs	r1, #126	@ 0x7e
 800193e:	68f8      	ldr	r0, [r7, #12]
 8001940:	f7ff fc70 	bl	8001224 <bmp_write_reg>
 8001944:	4603      	mov	r3, r0
 8001946:	f083 0301 	eor.w	r3, r3, #1
 800194a:	b2db      	uxtb	r3, r3
 800194c:	2b00      	cmp	r3, #0
 800194e:	d004      	beq.n	800195a <bmp_init+0xc6>
         debug_print("BMP390 Init ERROR: Failed SPI write for Soft Reset\r\n");
 8001950:	4885      	ldr	r0, [pc, #532]	@ (8001b68 <bmp_init+0x2d4>)
 8001952:	f000 ff21 	bl	8002798 <debug_print>
         return false;
 8001956:	2300      	movs	r3, #0
 8001958:	e0f6      	b.n	8001b48 <bmp_init+0x2b4>
    }
    HAL_Delay(50);
 800195a:	2032      	movs	r0, #50	@ 0x32
 800195c:	f002 fa78 	bl	8003e50 <HAL_Delay>

    uint8_t power_conf = ENABLE_PRESSURE | ENABLE_TEMP | ENABLE_SENSOR; // 0x33
 8001960:	2333      	movs	r3, #51	@ 0x33
 8001962:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    debug_print("BMP390 Init: Writing PWR_CTRL = 0x%02X...\r\n", power_conf);
 8001966:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800196a:	4619      	mov	r1, r3
 800196c:	487f      	ldr	r0, [pc, #508]	@ (8001b6c <bmp_init+0x2d8>)
 800196e:	f000 ff13 	bl	8002798 <debug_print>
    if (!bmp_write_reg(baro, BMP390_REG_PWR_CTRL, power_conf)) {
 8001972:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001976:	461a      	mov	r2, r3
 8001978:	211b      	movs	r1, #27
 800197a:	68f8      	ldr	r0, [r7, #12]
 800197c:	f7ff fc52 	bl	8001224 <bmp_write_reg>
 8001980:	4603      	mov	r3, r0
 8001982:	f083 0301 	eor.w	r3, r3, #1
 8001986:	b2db      	uxtb	r3, r3
 8001988:	2b00      	cmp	r3, #0
 800198a:	d004      	beq.n	8001996 <bmp_init+0x102>
         debug_print("BMP390 Init ERROR: Failed SPI write for PWR_CTRL\r\n");
 800198c:	4878      	ldr	r0, [pc, #480]	@ (8001b70 <bmp_init+0x2dc>)
 800198e:	f000 ff03 	bl	8002798 <debug_print>
         return false;
 8001992:	2300      	movs	r3, #0
 8001994:	e0d8      	b.n	8001b48 <bmp_init+0x2b4>
    }
    HAL_Delay(5);
 8001996:	2005      	movs	r0, #5
 8001998:	f002 fa5a 	bl	8003e50 <HAL_Delay>

    uint8_t osr_conf = (OSR_TEMP_X2 << 3) | OSR_PRESSURE_X32; // 0x0D
 800199c:	230d      	movs	r3, #13
 800199e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    debug_print("BMP390 Init: Writing OSR = 0x%02X...\r\n", osr_conf);
 80019a2:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80019a6:	4619      	mov	r1, r3
 80019a8:	4872      	ldr	r0, [pc, #456]	@ (8001b74 <bmp_init+0x2e0>)
 80019aa:	f000 fef5 	bl	8002798 <debug_print>
    if (!bmp_write_reg(baro, BMP390_REG_OSR, osr_conf)) {
 80019ae:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80019b2:	461a      	mov	r2, r3
 80019b4:	211c      	movs	r1, #28
 80019b6:	68f8      	ldr	r0, [r7, #12]
 80019b8:	f7ff fc34 	bl	8001224 <bmp_write_reg>
 80019bc:	4603      	mov	r3, r0
 80019be:	f083 0301 	eor.w	r3, r3, #1
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d004      	beq.n	80019d2 <bmp_init+0x13e>
        debug_print("BMP390 Init ERROR: Failed SPI write for OSR\r\n");
 80019c8:	486b      	ldr	r0, [pc, #428]	@ (8001b78 <bmp_init+0x2e4>)
 80019ca:	f000 fee5 	bl	8002798 <debug_print>
        return false;
 80019ce:	2300      	movs	r3, #0
 80019d0:	e0ba      	b.n	8001b48 <bmp_init+0x2b4>
    }

    debug_print("BMP390 Init: Writing ODR = 0x%02X...\r\n", ODR_12p5_HZ); // 0x04
 80019d2:	2104      	movs	r1, #4
 80019d4:	4869      	ldr	r0, [pc, #420]	@ (8001b7c <bmp_init+0x2e8>)
 80019d6:	f000 fedf 	bl	8002798 <debug_print>
    if (!bmp_write_reg(baro, BMP390_REG_ODR, ODR_12p5_HZ)) {
 80019da:	2204      	movs	r2, #4
 80019dc:	211d      	movs	r1, #29
 80019de:	68f8      	ldr	r0, [r7, #12]
 80019e0:	f7ff fc20 	bl	8001224 <bmp_write_reg>
 80019e4:	4603      	mov	r3, r0
 80019e6:	f083 0301 	eor.w	r3, r3, #1
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d004      	beq.n	80019fa <bmp_init+0x166>
        debug_print("BMP390 Init ERROR: Failed SPI write for ODR\r\n");
 80019f0:	4863      	ldr	r0, [pc, #396]	@ (8001b80 <bmp_init+0x2ec>)
 80019f2:	f000 fed1 	bl	8002798 <debug_print>
        return false;
 80019f6:	2300      	movs	r3, #0
 80019f8:	e0a6      	b.n	8001b48 <bmp_init+0x2b4>
    }
    HAL_Delay(5);
 80019fa:	2005      	movs	r0, #5
 80019fc:	f002 fa28 	bl	8003e50 <HAL_Delay>

    uint8_t read_pwr = 0, read_osr = 0, read_odr = 0;
 8001a00:	2300      	movs	r3, #0
 8001a02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001a06:	2300      	movs	r3, #0
 8001a08:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
    bool readback_ok = true;
 8001a12:	2301      	movs	r3, #1
 8001a14:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    debug_print("BMP390 Init: Reading back configuration...\r\n");
 8001a18:	485a      	ldr	r0, [pc, #360]	@ (8001b84 <bmp_init+0x2f0>)
 8001a1a:	f000 febd 	bl	8002798 <debug_print>
    if (!bmp_read_reg(baro, BMP390_REG_PWR_CTRL, &read_pwr)) readback_ok = false;
 8001a1e:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 8001a22:	461a      	mov	r2, r3
 8001a24:	211b      	movs	r1, #27
 8001a26:	68f8      	ldr	r0, [r7, #12]
 8001a28:	f7ff fbb2 	bl	8001190 <bmp_read_reg>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	f083 0301 	eor.w	r3, r3, #1
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d002      	beq.n	8001a3e <bmp_init+0x1aa>
 8001a38:	2300      	movs	r3, #0
 8001a3a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (!bmp_read_reg(baro, BMP390_REG_OSR, &read_osr)) readback_ok = false;
 8001a3e:	f107 032a 	add.w	r3, r7, #42	@ 0x2a
 8001a42:	461a      	mov	r2, r3
 8001a44:	211c      	movs	r1, #28
 8001a46:	68f8      	ldr	r0, [r7, #12]
 8001a48:	f7ff fba2 	bl	8001190 <bmp_read_reg>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	f083 0301 	eor.w	r3, r3, #1
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d002      	beq.n	8001a5e <bmp_init+0x1ca>
 8001a58:	2300      	movs	r3, #0
 8001a5a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (!bmp_read_reg(baro, BMP390_REG_ODR, &read_odr)) readback_ok = false;
 8001a5e:	f107 0329 	add.w	r3, r7, #41	@ 0x29
 8001a62:	461a      	mov	r2, r3
 8001a64:	211d      	movs	r1, #29
 8001a66:	68f8      	ldr	r0, [r7, #12]
 8001a68:	f7ff fb92 	bl	8001190 <bmp_read_reg>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	f083 0301 	eor.w	r3, r3, #1
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d002      	beq.n	8001a7e <bmp_init+0x1ea>
 8001a78:	2300      	movs	r3, #0
 8001a7a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    if (!readback_ok) {
 8001a7e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001a82:	f083 0301 	eor.w	r3, r3, #1
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d004      	beq.n	8001a96 <bmp_init+0x202>
        debug_print("BMP390 Init ERROR: Failed SPI read during configuration readback!\r\n");
 8001a8c:	483e      	ldr	r0, [pc, #248]	@ (8001b88 <bmp_init+0x2f4>)
 8001a8e:	f000 fe83 	bl	8002798 <debug_print>
        return false;
 8001a92:	2300      	movs	r3, #0
 8001a94:	e058      	b.n	8001b48 <bmp_init+0x2b4>
    }

    debug_print("BMP390 Init Readback: PWR_CTRL=0x%02X (W:0x%02X), OSR=0x%02X (W:0x%02X), ODR=0x%02X (W:0x%02X)\r\n",
 8001a96:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001a9a:	461c      	mov	r4, r3
 8001a9c:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8001aa0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8001aa4:	461d      	mov	r5, r3
 8001aa6:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001aaa:	f897 1029 	ldrb.w	r1, [r7, #41]	@ 0x29
 8001aae:	4608      	mov	r0, r1
 8001ab0:	2104      	movs	r1, #4
 8001ab2:	9102      	str	r1, [sp, #8]
 8001ab4:	9001      	str	r0, [sp, #4]
 8001ab6:	9300      	str	r3, [sp, #0]
 8001ab8:	462b      	mov	r3, r5
 8001aba:	4621      	mov	r1, r4
 8001abc:	4833      	ldr	r0, [pc, #204]	@ (8001b8c <bmp_init+0x2f8>)
 8001abe:	f000 fe6b 	bl	8002798 <debug_print>
                read_pwr, power_conf, read_osr, osr_conf, read_odr, ODR_12p5_HZ);

    if (read_pwr != power_conf || read_osr != osr_conf || read_odr != ODR_12p5_HZ) {
 8001ac2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001ac6:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8001aca:	429a      	cmp	r2, r3
 8001acc:	d109      	bne.n	8001ae2 <bmp_init+0x24e>
 8001ace:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8001ad2:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d103      	bne.n	8001ae2 <bmp_init+0x24e>
 8001ada:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8001ade:	2b04      	cmp	r3, #4
 8001ae0:	d003      	beq.n	8001aea <bmp_init+0x256>
        debug_print("BMP390 Init WARNING: Configuration Readback Mismatch! Sensor may not operate as expected.\r\n");
 8001ae2:	482b      	ldr	r0, [pc, #172]	@ (8001b90 <bmp_init+0x2fc>)
 8001ae4:	f000 fe58 	bl	8002798 <debug_print>
 8001ae8:	e002      	b.n	8001af0 <bmp_init+0x25c>
    } else {
        debug_print("BMP390 Init: Configuration Readback OK.\r\n");
 8001aea:	482a      	ldr	r0, [pc, #168]	@ (8001b94 <bmp_init+0x300>)
 8001aec:	f000 fe54 	bl	8002798 <debug_print>
    }

    uint8_t calib_raw[21] = {0};
 8001af0:	2300      	movs	r3, #0
 8001af2:	617b      	str	r3, [r7, #20]
 8001af4:	f107 0318 	add.w	r3, r7, #24
 8001af8:	2200      	movs	r2, #0
 8001afa:	601a      	str	r2, [r3, #0]
 8001afc:	605a      	str	r2, [r3, #4]
 8001afe:	609a      	str	r2, [r3, #8]
 8001b00:	60da      	str	r2, [r3, #12]
 8001b02:	741a      	strb	r2, [r3, #16]
    debug_print("BMP390 Init: Reading Calibration Data...\r\n");
 8001b04:	4824      	ldr	r0, [pc, #144]	@ (8001b98 <bmp_init+0x304>)
 8001b06:	f000 fe47 	bl	8002798 <debug_print>
    if (!bmp_read_buf(baro, BMP390_REG_CAL, calib_raw, 21)) {
 8001b0a:	f107 0214 	add.w	r2, r7, #20
 8001b0e:	2315      	movs	r3, #21
 8001b10:	2131      	movs	r1, #49	@ 0x31
 8001b12:	68f8      	ldr	r0, [r7, #12]
 8001b14:	f7ff fbc2 	bl	800129c <bmp_read_buf>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	f083 0301 	eor.w	r3, r3, #1
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d004      	beq.n	8001b2e <bmp_init+0x29a>
        debug_print("BMP390 Init ERROR: Failed SPI read for Calibration Data\r\n");
 8001b24:	481d      	ldr	r0, [pc, #116]	@ (8001b9c <bmp_init+0x308>)
 8001b26:	f000 fe37 	bl	8002798 <debug_print>
        return false;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	e00c      	b.n	8001b48 <bmp_init+0x2b4>
    }
    bmp_parse_calib(baro, calib_raw);
 8001b2e:	f107 0314 	add.w	r3, r7, #20
 8001b32:	4619      	mov	r1, r3
 8001b34:	68f8      	ldr	r0, [r7, #12]
 8001b36:	f7ff fc2b 	bl	8001390 <bmp_parse_calib>

    HAL_Delay(100);
 8001b3a:	2064      	movs	r0, #100	@ 0x64
 8001b3c:	f002 f988 	bl	8003e50 <HAL_Delay>

    baro_step(baro);
 8001b40:	68f8      	ldr	r0, [r7, #12]
 8001b42:	f000 f82d 	bl	8001ba0 <baro_step>

    return true;
 8001b46:	2301      	movs	r3, #1
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3730      	adds	r7, #48	@ 0x30
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bdb0      	pop	{r4, r5, r7, pc}
 8001b50:	7fc00000 	.word	0x7fc00000
 8001b54:	0801386c 	.word	0x0801386c
 8001b58:	08013890 	.word	0x08013890
 8001b5c:	080138c4 	.word	0x080138c4
 8001b60:	0801390c 	.word	0x0801390c
 8001b64:	08013930 	.word	0x08013930
 8001b68:	08013958 	.word	0x08013958
 8001b6c:	08013990 	.word	0x08013990
 8001b70:	080139bc 	.word	0x080139bc
 8001b74:	080139f0 	.word	0x080139f0
 8001b78:	08013a18 	.word	0x08013a18
 8001b7c:	08013a48 	.word	0x08013a48
 8001b80:	08013a70 	.word	0x08013a70
 8001b84:	08013aa0 	.word	0x08013aa0
 8001b88:	08013ad0 	.word	0x08013ad0
 8001b8c:	08013b14 	.word	0x08013b14
 8001b90:	08013b78 	.word	0x08013b78
 8001b94:	08013bd4 	.word	0x08013bd4
 8001b98:	08013c00 	.word	0x08013c00
 8001b9c:	08013c2c 	.word	0x08013c2c

08001ba0 <baro_step>:

void baro_step(BMP390 *baro) {
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b088      	sub	sp, #32
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
    uint8_t status_reg = 0;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	73fb      	strb	r3, [r7, #15]
    uint8_t data[6] = {0};
 8001bac:	2300      	movs	r3, #0
 8001bae:	60bb      	str	r3, [r7, #8]
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	81bb      	strh	r3, [r7, #12]

    if (!bmp_read_reg(baro, BMP390_REG_STATUS, &status_reg)) {
 8001bb4:	f107 030f 	add.w	r3, r7, #15
 8001bb8:	461a      	mov	r2, r3
 8001bba:	2103      	movs	r1, #3
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f7ff fae7 	bl	8001190 <bmp_read_reg>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	f083 0301 	eor.w	r3, r3, #1
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d003      	beq.n	8001bd6 <baro_step+0x36>
        debug_print("baro_step ERROR: Failed to read STATUS register.\r\n");
 8001bce:	483a      	ldr	r0, [pc, #232]	@ (8001cb8 <baro_step+0x118>)
 8001bd0:	f000 fde2 	bl	8002798 <debug_print>
        return;
 8001bd4:	e06c      	b.n	8001cb0 <baro_step+0x110>
    }

    if (!(status_reg & BMP390_STATUS_DRDY_PRES) || !(status_reg & BMP390_STATUS_DRDY_TEMP)) {
 8001bd6:	7bfb      	ldrb	r3, [r7, #15]
 8001bd8:	f003 0320 	and.w	r3, r3, #32
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d066      	beq.n	8001cae <baro_step+0x10e>
 8001be0:	7bfb      	ldrb	r3, [r7, #15]
 8001be2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d061      	beq.n	8001cae <baro_step+0x10e>
        return;
    }

    if (!bmp_read_buf(baro, BMP390_REG_DATA, data, 6)) {
 8001bea:	f107 0208 	add.w	r2, r7, #8
 8001bee:	2306      	movs	r3, #6
 8001bf0:	2104      	movs	r1, #4
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f7ff fb52 	bl	800129c <bmp_read_buf>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	f083 0301 	eor.w	r3, r3, #1
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d003      	beq.n	8001c0c <baro_step+0x6c>
        debug_print("baro_step ERROR: Failed to read DATA registers after DRDY set!\r\n");
 8001c04:	482d      	ldr	r0, [pc, #180]	@ (8001cbc <baro_step+0x11c>)
 8001c06:	f000 fdc7 	bl	8002798 <debug_print>
        return;
 8001c0a:	e051      	b.n	8001cb0 <baro_step+0x110>
    }

    uint32_t uncomp_press = BMP390_CONCAT3BYTES(data[2], data[1], data[0]);
 8001c0c:	7abb      	ldrb	r3, [r7, #10]
 8001c0e:	041a      	lsls	r2, r3, #16
 8001c10:	7a7b      	ldrb	r3, [r7, #9]
 8001c12:	021b      	lsls	r3, r3, #8
 8001c14:	4313      	orrs	r3, r2
 8001c16:	7a3a      	ldrb	r2, [r7, #8]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	61fb      	str	r3, [r7, #28]
    uint32_t uncomp_temp  = BMP390_CONCAT3BYTES(data[5], data[4], data[3]);
 8001c1c:	7b7b      	ldrb	r3, [r7, #13]
 8001c1e:	041a      	lsls	r2, r3, #16
 8001c20:	7b3b      	ldrb	r3, [r7, #12]
 8001c22:	021b      	lsls	r3, r3, #8
 8001c24:	4313      	orrs	r3, r2
 8001c26:	7afa      	ldrb	r2, [r7, #11]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	61bb      	str	r3, [r7, #24]

    if (uncomp_press == 8388608 || uncomp_temp == 8388608) {
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001c32:	d003      	beq.n	8001c3c <baro_step+0x9c>
 8001c34:	69bb      	ldr	r3, [r7, #24]
 8001c36:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001c3a:	d102      	bne.n	8001c42 <baro_step+0xa2>
         debug_print("BMP390 WARN: Read reset value (8388608) despite DRDY flags being set!\r\n");
 8001c3c:	4820      	ldr	r0, [pc, #128]	@ (8001cc0 <baro_step+0x120>)
 8001c3e:	f000 fdab 	bl	8002798 <debug_print>
    }

    float t_lin = bmp_compensate_temperature(baro, uncomp_temp);
 8001c42:	69b9      	ldr	r1, [r7, #24]
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f7ff fd1d 	bl	8001684 <bmp_compensate_temperature>
 8001c4a:	ed87 0a05 	vstr	s0, [r7, #20]
    baro->last_temp = (int16_t)(t_lin * 100.0f);
 8001c4e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c52:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8001cc4 <baro_step+0x124>
 8001c56:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c5a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c5e:	ee17 3a90 	vmov	r3, s15
 8001c62:	b21a      	sxth	r2, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	829a      	strh	r2, [r3, #20]

    float comp_press = bmp_compensate_pressure(baro, uncomp_press);
 8001c68:	69f9      	ldr	r1, [r7, #28]
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f7ff fd3f 	bl	80016ee <bmp_compensate_pressure>
 8001c70:	ed87 0a04 	vstr	s0, [r7, #16]
    baro->last_press = comp_press;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	693a      	ldr	r2, [r7, #16]
 8001c78:	60da      	str	r2, [r3, #12]

    baro->last_alt = 44330.0f * (1.0f - powf(comp_press / 101325.0f, 1.0f / 5.255f));
 8001c7a:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c7e:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8001cc8 <baro_step+0x128>
 8001c82:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001c86:	eddf 0a11 	vldr	s1, [pc, #68]	@ 8001ccc <baro_step+0x12c>
 8001c8a:	eeb0 0a47 	vmov.f32	s0, s14
 8001c8e:	f011 f90b 	bl	8012ea8 <powf>
 8001c92:	eef0 7a40 	vmov.f32	s15, s0
 8001c96:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001c9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c9e:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8001cd0 <baro_step+0x130>
 8001ca2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	edc3 7a04 	vstr	s15, [r3, #16]
 8001cac:	e000      	b.n	8001cb0 <baro_step+0x110>
        return;
 8001cae:	bf00      	nop
}
 8001cb0:	3720      	adds	r7, #32
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	08013c68 	.word	0x08013c68
 8001cbc:	08013c9c 	.word	0x08013c9c
 8001cc0:	08013ce0 	.word	0x08013ce0
 8001cc4:	42c80000 	.word	0x42c80000
 8001cc8:	47c5e680 	.word	0x47c5e680
 8001ccc:	3e42dcae 	.word	0x3e42dcae
 8001cd0:	472d2a00 	.word	0x472d2a00

08001cd4 <baro_get_altitude>:

float baro_get_altitude(BMP390 *baro) {
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
    return baro->last_alt;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	691b      	ldr	r3, [r3, #16]
 8001ce0:	ee07 3a90 	vmov	s15, r3
}
 8001ce4:	eeb0 0a67 	vmov.f32	s0, s15
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr

08001cf2 <baro_get_temp>:

int16_t baro_get_temp(BMP390 *baro) {
 8001cf2:	b480      	push	{r7}
 8001cf4:	b083      	sub	sp, #12
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
    return baro->last_temp;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	370c      	adds	r7, #12
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr

08001d0c <baro_get_pressure>:

float baro_get_pressure(BMP390 *baro) {
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
    return baro->last_press;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	ee07 3a90 	vmov	s15, r3
}
 8001d1c:	eeb0 0a67 	vmov.f32	s0, s15
 8001d20:	370c      	adds	r7, #12
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
	...

08001d2c <spi_begin>:

//--------------------------------------------------------------------
// Static helper functions
//--------------------------------------------------------------------
static void spi_begin(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(flash_cs_port, flash_cs_pin, GPIO_PIN_RESET);
 8001d30:	4b04      	ldr	r3, [pc, #16]	@ (8001d44 <spi_begin+0x18>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a04      	ldr	r2, [pc, #16]	@ (8001d48 <spi_begin+0x1c>)
 8001d36:	8811      	ldrh	r1, [r2, #0]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f002 fd88 	bl	8004850 <HAL_GPIO_WritePin>
}
 8001d40:	bf00      	nop
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	20000390 	.word	0x20000390
 8001d48:	20000394 	.word	0x20000394

08001d4c <spi_end>:

static void spi_end(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(flash_cs_port, flash_cs_pin, GPIO_PIN_SET);
 8001d50:	4b04      	ldr	r3, [pc, #16]	@ (8001d64 <spi_end+0x18>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a04      	ldr	r2, [pc, #16]	@ (8001d68 <spi_end+0x1c>)
 8001d56:	8811      	ldrh	r1, [r2, #0]
 8001d58:	2201      	movs	r2, #1
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f002 fd78 	bl	8004850 <HAL_GPIO_WritePin>
}
 8001d60:	bf00      	nop
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	20000390 	.word	0x20000390
 8001d68:	20000394 	.word	0x20000394

08001d6c <flash_status_1>:

static uint8_t flash_status_1(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
    uint8_t cmd = FLASH_CMD_READ_STATUS_REGISTER;
 8001d72:	2305      	movs	r3, #5
 8001d74:	71fb      	strb	r3, [r7, #7]
    uint8_t status = 0;
 8001d76:	2300      	movs	r3, #0
 8001d78:	71bb      	strb	r3, [r7, #6]

    spi_begin();
 8001d7a:	f7ff ffd7 	bl	8001d2c <spi_begin>
    HAL_SPI_Transmit(flash_hspi, &cmd, 1, HAL_MAX_DELAY);
 8001d7e:	4b0b      	ldr	r3, [pc, #44]	@ (8001dac <flash_status_1+0x40>)
 8001d80:	6818      	ldr	r0, [r3, #0]
 8001d82:	1df9      	adds	r1, r7, #7
 8001d84:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d88:	2201      	movs	r2, #1
 8001d8a:	f005 fb7a 	bl	8007482 <HAL_SPI_Transmit>
    HAL_SPI_Receive(flash_hspi, &status, 1, HAL_MAX_DELAY);
 8001d8e:	4b07      	ldr	r3, [pc, #28]	@ (8001dac <flash_status_1+0x40>)
 8001d90:	6818      	ldr	r0, [r3, #0]
 8001d92:	1db9      	adds	r1, r7, #6
 8001d94:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d98:	2201      	movs	r2, #1
 8001d9a:	f005 fce8 	bl	800776e <HAL_SPI_Receive>
    spi_end();
 8001d9e:	f7ff ffd5 	bl	8001d4c <spi_end>

    return status;
 8001da2:	79bb      	ldrb	r3, [r7, #6]
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3708      	adds	r7, #8
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	2000038c 	.word	0x2000038c

08001db0 <flash_write_enable>:

static void flash_write_enable(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
    uint8_t cmd = FLASH_CMD_WRITE_ENABLE;
 8001db6:	2306      	movs	r3, #6
 8001db8:	71fb      	strb	r3, [r7, #7]
    spi_begin();
 8001dba:	f7ff ffb7 	bl	8001d2c <spi_begin>
    HAL_SPI_Transmit(flash_hspi, &cmd, 1, HAL_MAX_DELAY);
 8001dbe:	4b07      	ldr	r3, [pc, #28]	@ (8001ddc <flash_write_enable+0x2c>)
 8001dc0:	6818      	ldr	r0, [r3, #0]
 8001dc2:	1df9      	adds	r1, r7, #7
 8001dc4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001dc8:	2201      	movs	r2, #1
 8001dca:	f005 fb5a 	bl	8007482 <HAL_SPI_Transmit>
    spi_end();
 8001dce:	f7ff ffbd 	bl	8001d4c <spi_end>
}
 8001dd2:	bf00      	nop
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	2000038c 	.word	0x2000038c

08001de0 <Flash_Setup>:

void Flash_Setup(SPI_HandleTypeDef *hspi, GPIO_TypeDef *CS_GPIO_Port, uint16_t CS_Pin)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b086      	sub	sp, #24
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	60f8      	str	r0, [r7, #12]
 8001de8:	60b9      	str	r1, [r7, #8]
 8001dea:	4613      	mov	r3, r2
 8001dec:	80fb      	strh	r3, [r7, #6]
    uint8_t cmd;
    uint8_t dummy[3] = {0, 0, 0};
 8001dee:	4a20      	ldr	r2, [pc, #128]	@ (8001e70 <Flash_Setup+0x90>)
 8001df0:	f107 0314 	add.w	r3, r7, #20
 8001df4:	6812      	ldr	r2, [r2, #0]
 8001df6:	4611      	mov	r1, r2
 8001df8:	8019      	strh	r1, [r3, #0]
 8001dfa:	3302      	adds	r3, #2
 8001dfc:	0c12      	lsrs	r2, r2, #16
 8001dfe:	701a      	strb	r2, [r3, #0]
    uint8_t device_id = 0;
 8001e00:	2300      	movs	r3, #0
 8001e02:	74fb      	strb	r3, [r7, #19]

    // Save the provided configuration for later use.
    flash_hspi = hspi;
 8001e04:	4a1b      	ldr	r2, [pc, #108]	@ (8001e74 <Flash_Setup+0x94>)
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	6013      	str	r3, [r2, #0]
    flash_cs_port = CS_GPIO_Port;
 8001e0a:	4a1b      	ldr	r2, [pc, #108]	@ (8001e78 <Flash_Setup+0x98>)
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	6013      	str	r3, [r2, #0]
    flash_cs_pin = CS_Pin;
 8001e10:	4a1a      	ldr	r2, [pc, #104]	@ (8001e7c <Flash_Setup+0x9c>)
 8001e12:	88fb      	ldrh	r3, [r7, #6]
 8001e14:	8013      	strh	r3, [r2, #0]

    // Ensure CS is high initially.
    HAL_GPIO_WritePin(flash_cs_port, flash_cs_pin, GPIO_PIN_SET);
 8001e16:	4b18      	ldr	r3, [pc, #96]	@ (8001e78 <Flash_Setup+0x98>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a18      	ldr	r2, [pc, #96]	@ (8001e7c <Flash_Setup+0x9c>)
 8001e1c:	8811      	ldrh	r1, [r2, #0]
 8001e1e:	2201      	movs	r2, #1
 8001e20:	4618      	mov	r0, r3
 8001e22:	f002 fd15 	bl	8004850 <HAL_GPIO_WritePin>

    // Release flash from power-down.
    cmd = FLASH_CMD_RELEASE_POWER_DOWN;
 8001e26:	23ab      	movs	r3, #171	@ 0xab
 8001e28:	75fb      	strb	r3, [r7, #23]
    spi_begin();
 8001e2a:	f7ff ff7f 	bl	8001d2c <spi_begin>
    HAL_SPI_Transmit(flash_hspi, &cmd, 1, HAL_MAX_DELAY);
 8001e2e:	4b11      	ldr	r3, [pc, #68]	@ (8001e74 <Flash_Setup+0x94>)
 8001e30:	6818      	ldr	r0, [r3, #0]
 8001e32:	f107 0117 	add.w	r1, r7, #23
 8001e36:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	f005 fb21 	bl	8007482 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(flash_hspi, dummy, 3, HAL_MAX_DELAY);
 8001e40:	4b0c      	ldr	r3, [pc, #48]	@ (8001e74 <Flash_Setup+0x94>)
 8001e42:	6818      	ldr	r0, [r3, #0]
 8001e44:	f107 0114 	add.w	r1, r7, #20
 8001e48:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001e4c:	2203      	movs	r2, #3
 8001e4e:	f005 fb18 	bl	8007482 <HAL_SPI_Transmit>
    HAL_SPI_Receive(flash_hspi, &device_id, 1, HAL_MAX_DELAY);
 8001e52:	4b08      	ldr	r3, [pc, #32]	@ (8001e74 <Flash_Setup+0x94>)
 8001e54:	6818      	ldr	r0, [r3, #0]
 8001e56:	f107 0113 	add.w	r1, r7, #19
 8001e5a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001e5e:	2201      	movs	r2, #1
 8001e60:	f005 fc85 	bl	800776e <HAL_SPI_Receive>
    spi_end();
 8001e64:	f7ff ff72 	bl	8001d4c <spi_end>

    // (Optional) Compare device_id with W25Q32JV_DEVICE_ID to verify correct flash.
}
 8001e68:	bf00      	nop
 8001e6a:	3718      	adds	r7, #24
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	08013d28 	.word	0x08013d28
 8001e74:	2000038c 	.word	0x2000038c
 8001e78:	20000390 	.word	0x20000390
 8001e7c:	20000394 	.word	0x20000394

08001e80 <Flash_Busy>:

bool Flash_Busy(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
    // Return true if the busy bit is set in the status register.
    return ((flash_status_1() & FLASH_BUSY_MASK) != 0);
 8001e84:	f7ff ff72 	bl	8001d6c <flash_status_1>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	f003 0301 	and.w	r3, r3, #1
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	bf14      	ite	ne
 8001e92:	2301      	movne	r3, #1
 8001e94:	2300      	moveq	r3, #0
 8001e96:	b2db      	uxtb	r3, r3
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	bd80      	pop	{r7, pc}

08001e9c <Flash_Write>:

void Flash_Write(uint32_t page_addr, uint8_t page[EXT_FLASH_PAGE_SIZE])
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	6039      	str	r1, [r7, #0]
    uint8_t cmd;
    uint8_t addr[3];

    flash_write_enable();
 8001ea6:	f7ff ff83 	bl	8001db0 <flash_write_enable>

    cmd = FLASH_CMD_PAGE_PROGRAM;
 8001eaa:	2302      	movs	r3, #2
 8001eac:	73fb      	strb	r3, [r7, #15]
    // Convert the page index into a 24-bit address.
    // Here the page index corresponds to a byte address of (page_addr << 8).
    addr[0] = (uint8_t)((page_addr >> 8) & 0xFF);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	0a1b      	lsrs	r3, r3, #8
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	733b      	strb	r3, [r7, #12]
    addr[1] = (uint8_t)(page_addr & 0xFF);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	737b      	strb	r3, [r7, #13]
    addr[2] = 0;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	73bb      	strb	r3, [r7, #14]

    spi_begin();
 8001ec0:	f7ff ff34 	bl	8001d2c <spi_begin>
    HAL_SPI_Transmit(flash_hspi, &cmd, 1, HAL_MAX_DELAY);
 8001ec4:	4b15      	ldr	r3, [pc, #84]	@ (8001f1c <Flash_Write+0x80>)
 8001ec6:	6818      	ldr	r0, [r3, #0]
 8001ec8:	f107 010f 	add.w	r1, r7, #15
 8001ecc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	f005 fad6 	bl	8007482 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(flash_hspi, addr, 3, HAL_MAX_DELAY);
 8001ed6:	4b11      	ldr	r3, [pc, #68]	@ (8001f1c <Flash_Write+0x80>)
 8001ed8:	6818      	ldr	r0, [r3, #0]
 8001eda:	f107 010c 	add.w	r1, r7, #12
 8001ede:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001ee2:	2203      	movs	r2, #3
 8001ee4:	f005 facd 	bl	8007482 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(flash_hspi, page, EXT_FLASH_PAGE_SIZE, HAL_MAX_DELAY);
 8001ee8:	4b0c      	ldr	r3, [pc, #48]	@ (8001f1c <Flash_Write+0x80>)
 8001eea:	6818      	ldr	r0, [r3, #0]
 8001eec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001ef0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ef4:	6839      	ldr	r1, [r7, #0]
 8001ef6:	f005 fac4 	bl	8007482 <HAL_SPI_Transmit>
    spi_end();
 8001efa:	f7ff ff27 	bl	8001d4c <spi_end>

    // Wait for the write operation to complete.
    while (Flash_Busy())
 8001efe:	e002      	b.n	8001f06 <Flash_Write+0x6a>
    {
        HAL_Delay(1);
 8001f00:	2001      	movs	r0, #1
 8001f02:	f001 ffa5 	bl	8003e50 <HAL_Delay>
    while (Flash_Busy())
 8001f06:	f7ff ffbb 	bl	8001e80 <Flash_Busy>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d1f7      	bne.n	8001f00 <Flash_Write+0x64>
    }
}
 8001f10:	bf00      	nop
 8001f12:	bf00      	nop
 8001f14:	3710      	adds	r7, #16
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	2000038c 	.word	0x2000038c

08001f20 <calculate_gain>:
 8001f20:	b5b0      	push	{r4, r5, r7, lr}
 8001f22:	b0c0      	sub	sp, #256	@ 0x100
 8001f24:	af02      	add	r7, sp, #8
 8001f26:	60f8      	str	r0, [r7, #12]
 8001f28:	ed87 0a02 	vstr	s0, [r7, #8]
 8001f2c:	edc7 0a01 	vstr	s1, [r7, #4]
 8001f30:	ed87 1a00 	vstr	s2, [r7]
 8001f34:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f38:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001f3c:	edc7 7a39 	vstr	s15, [r7, #228]	@ 0xe4
 8001f40:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f44:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001f48:	edc7 7a38 	vstr	s15, [r7, #224]	@ 0xe0
 8001f4c:	edd7 7a00 	vldr	s15, [r7]
 8001f50:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001f54:	edc7 7a37 	vstr	s15, [r7, #220]	@ 0xdc
 8001f58:	68f8      	ldr	r0, [r7, #12]
 8001f5a:	f107 01ac 	add.w	r1, r7, #172	@ 0xac
 8001f5e:	2303      	movs	r3, #3
 8001f60:	2203      	movs	r2, #3
 8001f62:	f001 fd11 	bl	8003988 <matrix_transpose>
 8001f66:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	601a      	str	r2, [r3, #0]
 8001f6e:	605a      	str	r2, [r3, #4]
 8001f70:	609a      	str	r2, [r3, #8]
 8001f72:	60da      	str	r2, [r3, #12]
 8001f74:	611a      	str	r2, [r3, #16]
 8001f76:	615a      	str	r2, [r3, #20]
 8001f78:	2300      	movs	r3, #0
 8001f7a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8001f7e:	e013      	b.n	8001fa8 <calculate_gain+0x88>
 8001f80:	68fa      	ldr	r2, [r7, #12]
 8001f82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f86:	3308      	adds	r3, #8
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	4413      	add	r3, r2
 8001f8c:	3304      	adds	r3, #4
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	33f8      	adds	r3, #248	@ 0xf8
 8001f98:	443b      	add	r3, r7
 8001f9a:	3b64      	subs	r3, #100	@ 0x64
 8001f9c:	601a      	str	r2, [r3, #0]
 8001f9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8001fa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fac:	2b05      	cmp	r3, #5
 8001fae:	dde7      	ble.n	8001f80 <calculate_gain+0x60>
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8001fb6:	4bdd      	ldr	r3, [pc, #884]	@ (800232c <calculate_gain+0x40c>)
 8001fb8:	f107 0470 	add.w	r4, r7, #112	@ 0x70
 8001fbc:	461d      	mov	r5, r3
 8001fbe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fc0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fc2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fc4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fc6:	682b      	ldr	r3, [r5, #0]
 8001fc8:	6023      	str	r3, [r4, #0]
 8001fca:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001fce:	2224      	movs	r2, #36	@ 0x24
 8001fd0:	2100      	movs	r1, #0
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f00e fe06 	bl	8010be4 <memset>
 8001fd8:	68f8      	ldr	r0, [r7, #12]
 8001fda:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8001fde:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	9301      	str	r3, [sp, #4]
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	9300      	str	r3, [sp, #0]
 8001fea:	2303      	movs	r3, #3
 8001fec:	f001 fc64 	bl	80038b8 <matrix_multiply>
 8001ff0:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8001ff4:	f107 01ac 	add.w	r1, r7, #172	@ 0xac
 8001ff8:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	9301      	str	r3, [sp, #4]
 8002000:	2303      	movs	r3, #3
 8002002:	9300      	str	r3, [sp, #0]
 8002004:	2303      	movs	r3, #3
 8002006:	f001 fc57 	bl	80038b8 <matrix_multiply>
 800200a:	ed97 7a1b 	vldr	s14, [r7, #108]	@ 0x6c
 800200e:	edd7 7a37 	vldr	s15, [r7, #220]	@ 0xdc
 8002012:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002016:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
 800201a:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800201e:	edd7 7a39 	vldr	s15, [r7, #228]	@ 0xe4
 8002022:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002026:	edd7 6a1b 	vldr	s13, [r7, #108]	@ 0x6c
 800202a:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800202e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002032:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002036:	edd7 6a19 	vldr	s13, [r7, #100]	@ 0x64
 800203a:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800203e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002042:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002046:	edc7 7a36 	vstr	s15, [r7, #216]	@ 0xd8
 800204a:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800204e:	edd7 6a1b 	vldr	s13, [r7, #108]	@ 0x6c
 8002052:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8002056:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800205a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800205e:	edd7 6a15 	vldr	s13, [r7, #84]	@ 0x54
 8002062:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8002066:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800206a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800206e:	ed97 7a36 	vldr	s14, [r7, #216]	@ 0xd8
 8002072:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
 800207c:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8002080:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8002084:	eef1 7a67 	vneg.f32	s15, s15
 8002088:	ee27 7a27 	vmul.f32	s14, s14, s15
 800208c:	edd7 6a15 	vldr	s13, [r7, #84]	@ 0x54
 8002090:	ed97 6a13 	vldr	s12, [r7, #76]	@ 0x4c
 8002094:	edd7 7a39 	vldr	s15, [r7, #228]	@ 0xe4
 8002098:	ee76 7a27 	vadd.f32	s15, s12, s15
 800209c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020a0:	ee77 6a27 	vadd.f32	s13, s14, s15
 80020a4:	ed97 7a36 	vldr	s14, [r7, #216]	@ 0xd8
 80020a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
 80020b2:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 80020b6:	edd7 6a1b 	vldr	s13, [r7, #108]	@ 0x6c
 80020ba:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 80020be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80020c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020c6:	edd7 6a18 	vldr	s13, [r7, #96]	@ 0x60
 80020ca:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 80020ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020d2:	ee77 6a67 	vsub.f32	s13, s14, s15
 80020d6:	ed97 7a36 	vldr	s14, [r7, #216]	@ 0xd8
 80020da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
 80020e4:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 80020e8:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 80020ec:	eef1 7a67 	vneg.f32	s15, s15
 80020f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020f4:	edd7 6a18 	vldr	s13, [r7, #96]	@ 0x60
 80020f8:	ed97 6a13 	vldr	s12, [r7, #76]	@ 0x4c
 80020fc:	edd7 7a39 	vldr	s15, [r7, #228]	@ 0xe4
 8002100:	ee76 7a27 	vadd.f32	s15, s12, s15
 8002104:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002108:	ee77 6a27 	vadd.f32	s13, s14, s15
 800210c:	ed97 7a36 	vldr	s14, [r7, #216]	@ 0xd8
 8002110:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
 800211a:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 800211e:	edd7 6a1b 	vldr	s13, [r7, #108]	@ 0x6c
 8002122:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8002126:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800212a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800212e:	edd7 6a1b 	vldr	s13, [r7, #108]	@ 0x6c
 8002132:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8002136:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800213a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800213e:	ed97 7a36 	vldr	s14, [r7, #216]	@ 0xd8
 8002142:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
 800214c:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 8002150:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8002154:	eef1 7a67 	vneg.f32	s15, s15
 8002158:	ee27 7a27 	vmul.f32	s14, s14, s15
 800215c:	edd7 6a1b 	vldr	s13, [r7, #108]	@ 0x6c
 8002160:	ed97 6a13 	vldr	s12, [r7, #76]	@ 0x4c
 8002164:	edd7 7a39 	vldr	s15, [r7, #228]	@ 0xe4
 8002168:	ee76 7a27 	vadd.f32	s15, s12, s15
 800216c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002170:	ee77 6a27 	vadd.f32	s13, s14, s15
 8002174:	ed97 7a36 	vldr	s14, [r7, #216]	@ 0xd8
 8002178:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
 8002182:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800218c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002190:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002194:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 800219e:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 80021a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021aa:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
 80021ae:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80021b8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80021bc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80021c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 80021ca:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 80021ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021d6:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
 80021da:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80021e4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80021e8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80021ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 80021f6:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 80021fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002202:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
 8002206:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8002210:	eef1 7a67 	vneg.f32	s15, s15
 8002214:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002218:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 800221c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 8002226:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 800222a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800222e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002232:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
 8002236:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8002240:	eef1 7a67 	vneg.f32	s15, s15
 8002244:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002248:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 800224c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 8002256:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 800225a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800225e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002262:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
 8002266:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8002270:	eef1 7a67 	vneg.f32	s15, s15
 8002274:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002278:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 800227c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 8002286:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 800228a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800228e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002292:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800229c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80022a0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80022a4:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 80022a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	edd3 6a0d 	vldr	s13, [r3, #52]	@ 0x34
 80022b2:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 80022b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022be:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80022c8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80022cc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80022d0:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 80022d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	edd3 6a0d 	vldr	s13, [r3, #52]	@ 0x34
 80022de:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 80022e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022ea:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80022f4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80022f8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80022fc:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8002300:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	edd3 6a0d 	vldr	s13, [r3, #52]	@ 0x34
 800230a:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 800230e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002312:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002316:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
 800231a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800231e:	3301      	adds	r3, #1
 8002320:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8002324:	2300      	movs	r3, #0
 8002326:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800232a:	e023      	b.n	8002374 <calculate_gain+0x454>
 800232c:	08013d2c 	.word	0x08013d2c
 8002330:	2b8cbccc 	.word	0x2b8cbccc
 8002334:	68fa      	ldr	r2, [r7, #12]
 8002336:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800233a:	3308      	adds	r3, #8
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	4413      	add	r3, r2
 8002340:	3304      	adds	r3, #4
 8002342:	ed93 7a00 	vldr	s14, [r3]
 8002346:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	33f8      	adds	r3, #248	@ 0xf8
 800234e:	443b      	add	r3, r7
 8002350:	3b64      	subs	r3, #100	@ 0x64
 8002352:	edd3 7a00 	vldr	s15, [r3]
 8002356:	ee77 7a67 	vsub.f32	s15, s14, s15
 800235a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	33f8      	adds	r3, #248	@ 0xf8
 8002362:	443b      	add	r3, r7
 8002364:	3be8      	subs	r3, #232	@ 0xe8
 8002366:	edc3 7a00 	vstr	s15, [r3]
 800236a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800236e:	3301      	adds	r3, #1
 8002370:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8002374:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8002378:	2b05      	cmp	r3, #5
 800237a:	dddb      	ble.n	8002334 <calculate_gain+0x414>
 800237c:	f107 0310 	add.w	r3, r7, #16
 8002380:	2206      	movs	r2, #6
 8002382:	2101      	movs	r1, #1
 8002384:	4618      	mov	r0, r3
 8002386:	f001 fb35 	bl	80039f4 <matrix_norm_sq>
 800238a:	ed87 0a35 	vstr	s0, [r7, #212]	@ 0xd4
 800238e:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002392:	2206      	movs	r2, #6
 8002394:	2101      	movs	r1, #1
 8002396:	4618      	mov	r0, r3
 8002398:	f001 fb2c 	bl	80039f4 <matrix_norm_sq>
 800239c:	ed87 0a34 	vstr	s0, [r7, #208]	@ 0xd0
 80023a0:	edd7 7a34 	vldr	s15, [r7, #208]	@ 0xd0
 80023a4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80023a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023ac:	dd0c      	ble.n	80023c8 <calculate_gain+0x4a8>
 80023ae:	edd7 6a35 	vldr	s13, [r7, #212]	@ 0xd4
 80023b2:	ed97 7a34 	vldr	s14, [r7, #208]	@ 0xd0
 80023b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023ba:	ed1f 7a23 	vldr	s14, [pc, #-140]	@ 8002330 <calculate_gain+0x410>
 80023be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023c6:	d41c      	bmi.n	8002402 <calculate_gain+0x4e2>
 80023c8:	2300      	movs	r3, #0
 80023ca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80023ce:	e013      	b.n	80023f8 <calculate_gain+0x4d8>
 80023d0:	68fa      	ldr	r2, [r7, #12]
 80023d2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80023d6:	3308      	adds	r3, #8
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	4413      	add	r3, r2
 80023dc:	3304      	adds	r3, #4
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	33f8      	adds	r3, #248	@ 0xf8
 80023e8:	443b      	add	r3, r7
 80023ea:	3b64      	subs	r3, #100	@ 0x64
 80023ec:	601a      	str	r2, [r3, #0]
 80023ee:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80023f2:	3301      	adds	r3, #1
 80023f4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80023f8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80023fc:	2b05      	cmp	r3, #5
 80023fe:	dde7      	ble.n	80023d0 <calculate_gain+0x4b0>
 8002400:	e5ea      	b.n	8001fd8 <calculate_gain+0xb8>
 8002402:	bf00      	nop
 8002404:	37f8      	adds	r7, #248	@ 0xf8
 8002406:	46bd      	mov	sp, r7
 8002408:	bdb0      	pop	{r4, r5, r7, pc}
 800240a:	bf00      	nop

0800240c <KalmanFilter_init>:
 800240c:	b580      	push	{r7, lr}
 800240e:	b088      	sub	sp, #32
 8002410:	af00      	add	r7, sp, #0
 8002412:	6178      	str	r0, [r7, #20]
 8002414:	ed87 0a04 	vstr	s0, [r7, #16]
 8002418:	edc7 0a03 	vstr	s1, [r7, #12]
 800241c:	ed87 1a02 	vstr	s2, [r7, #8]
 8002420:	edc7 1a01 	vstr	s3, [r7, #4]
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800242a:	601a      	str	r2, [r3, #0]
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	693a      	ldr	r2, [r7, #16]
 8002430:	605a      	str	r2, [r3, #4]
 8002432:	edd7 7a04 	vldr	s15, [r7, #16]
 8002436:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800243a:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800243e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	edc3 7a02 	vstr	s15, [r3, #8]
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	f04f 0200 	mov.w	r2, #0
 800244e:	60da      	str	r2, [r3, #12]
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002456:	611a      	str	r2, [r3, #16]
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	693a      	ldr	r2, [r7, #16]
 800245c:	615a      	str	r2, [r3, #20]
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	f04f 0200 	mov.w	r2, #0
 8002464:	619a      	str	r2, [r3, #24]
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	f04f 0200 	mov.w	r2, #0
 800246c:	61da      	str	r2, [r3, #28]
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002474:	621a      	str	r2, [r3, #32]
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	2201      	movs	r2, #1
 800247a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 800247e:	2300      	movs	r3, #0
 8002480:	61fb      	str	r3, [r7, #28]
 8002482:	e013      	b.n	80024ac <KalmanFilter_init+0xa0>
 8002484:	697a      	ldr	r2, [r7, #20]
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	3312      	adds	r3, #18
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	4413      	add	r3, r2
 800248e:	f04f 0200 	mov.w	r2, #0
 8002492:	601a      	str	r2, [r3, #0]
 8002494:	697a      	ldr	r2, [r7, #20]
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	330e      	adds	r3, #14
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	4413      	add	r3, r2
 800249e:	3304      	adds	r3, #4
 80024a0:	f04f 0200 	mov.w	r2, #0
 80024a4:	601a      	str	r2, [r3, #0]
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	3301      	adds	r3, #1
 80024aa:	61fb      	str	r3, [r7, #28]
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	dde8      	ble.n	8002484 <KalmanFilter_init+0x78>
 80024b2:	2300      	movs	r3, #0
 80024b4:	61bb      	str	r3, [r7, #24]
 80024b6:	e00b      	b.n	80024d0 <KalmanFilter_init+0xc4>
 80024b8:	697a      	ldr	r2, [r7, #20]
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	3308      	adds	r3, #8
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	4413      	add	r3, r2
 80024c2:	3304      	adds	r3, #4
 80024c4:	f04f 0200 	mov.w	r2, #0
 80024c8:	601a      	str	r2, [r3, #0]
 80024ca:	69bb      	ldr	r3, [r7, #24]
 80024cc:	3301      	adds	r3, #1
 80024ce:	61bb      	str	r3, [r7, #24]
 80024d0:	69bb      	ldr	r3, [r7, #24]
 80024d2:	2b05      	cmp	r3, #5
 80024d4:	ddf0      	ble.n	80024b8 <KalmanFilter_init+0xac>
 80024d6:	ed97 1a01 	vldr	s2, [r7, #4]
 80024da:	edd7 0a02 	vldr	s1, [r7, #8]
 80024de:	ed97 0a03 	vldr	s0, [r7, #12]
 80024e2:	6978      	ldr	r0, [r7, #20]
 80024e4:	f7ff fd1c 	bl	8001f20 <calculate_gain>
 80024e8:	bf00      	nop
 80024ea:	3720      	adds	r7, #32
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}

080024f0 <KalmanFilter_step>:
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b08e      	sub	sp, #56	@ 0x38
 80024f4:	af02      	add	r7, sp, #8
 80024f6:	60f8      	str	r0, [r7, #12]
 80024f8:	ed87 0a02 	vstr	s0, [r7, #8]
 80024fc:	edc7 0a01 	vstr	s1, [r7, #4]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002506:	2b00      	cmp	r3, #0
 8002508:	d006      	beq.n	8002518 <KalmanFilter_step+0x28>
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2200      	movs	r2, #0
 800250e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	687a      	ldr	r2, [r7, #4]
 8002516:	649a      	str	r2, [r3, #72]	@ 0x48
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 800251e:	ed97 7a01 	vldr	s14, [r7, #4]
 8002522:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002526:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8002530:	ed97 7a02 	vldr	s14, [r7, #8]
 8002534:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002538:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
 800253c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002540:	eef0 7ae7 	vabs.f32	s15, s15
 8002544:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002548:	eef4 7ac7 	vcmpe.f32	s15, s14
 800254c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002550:	dd21      	ble.n	8002596 <KalmanFilter_step+0xa6>
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8002558:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800263c <KalmanFilter_step+0x14c>
 800255c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002564:	dd17      	ble.n	8002596 <KalmanFilter_step+0xa6>
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 800256c:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8002640 <KalmanFilter_step+0x150>
 8002570:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002574:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002578:	d50d      	bpl.n	8002596 <KalmanFilter_step+0xa6>
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8002580:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002584:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002588:	d505      	bpl.n	8002596 <KalmanFilter_step+0xa6>
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	649a      	str	r2, [r3, #72]	@ 0x48
 8002590:	f04f 0300 	mov.w	r3, #0
 8002594:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002596:	edd7 7a01 	vldr	s15, [r7, #4]
 800259a:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8002644 <KalmanFilter_step+0x154>
 800259e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025a6:	dd02      	ble.n	80025ae <KalmanFilter_step+0xbe>
 80025a8:	f04f 0300 	mov.w	r3, #0
 80025ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80025ae:	68f8      	ldr	r0, [r7, #12]
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 80025bc:	2301      	movs	r3, #1
 80025be:	9301      	str	r3, [sp, #4]
 80025c0:	2303      	movs	r3, #3
 80025c2:	9300      	str	r3, [sp, #0]
 80025c4:	2303      	movs	r3, #3
 80025c6:	f001 f977 	bl	80038b8 <matrix_multiply>
 80025ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025cc:	61fb      	str	r3, [r7, #28]
 80025ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025d0:	623b      	str	r3, [r7, #32]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 80025d8:	f107 0210 	add.w	r2, r7, #16
 80025dc:	f107 011c 	add.w	r1, r7, #28
 80025e0:	2301      	movs	r3, #1
 80025e2:	9301      	str	r3, [sp, #4]
 80025e4:	2302      	movs	r3, #2
 80025e6:	9300      	str	r3, [sp, #0]
 80025e8:	2303      	movs	r3, #3
 80025ea:	f001 f965 	bl	80038b8 <matrix_multiply>
 80025ee:	2300      	movs	r3, #0
 80025f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80025f2:	e01a      	b.n	800262a <KalmanFilter_step+0x13a>
 80025f4:	68fa      	ldr	r2, [r7, #12]
 80025f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025f8:	330e      	adds	r3, #14
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	4413      	add	r3, r2
 80025fe:	3304      	adds	r3, #4
 8002600:	ed93 7a00 	vldr	s14, [r3]
 8002604:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	3330      	adds	r3, #48	@ 0x30
 800260a:	443b      	add	r3, r7
 800260c:	3b20      	subs	r3, #32
 800260e:	edd3 7a00 	vldr	s15, [r3]
 8002612:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002616:	68fa      	ldr	r2, [r7, #12]
 8002618:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800261a:	3312      	adds	r3, #18
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	4413      	add	r3, r2
 8002620:	edc3 7a00 	vstr	s15, [r3]
 8002624:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002626:	3301      	adds	r3, #1
 8002628:	62bb      	str	r3, [r7, #40]	@ 0x28
 800262a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800262c:	2b02      	cmp	r3, #2
 800262e:	dde1      	ble.n	80025f4 <KalmanFilter_step+0x104>
 8002630:	bf00      	nop
 8002632:	bf00      	nop
 8002634:	3730      	adds	r7, #48	@ 0x30
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	43960000 	.word	0x43960000
 8002640:	43c80000 	.word	0x43c80000
 8002644:	463b8000 	.word	0x463b8000

08002648 <ring_buffer_available>:
    uint8_t *buf;     // Pointer to the buffer memory.
} RingBuffer;

void ring_buffer_init(RingBuffer *rb, void *buffer, size_t capacity, size_t elem_size);

static inline size_t ring_buffer_available(const RingBuffer *rb) {
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
    return rb->capacity - rb->size;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	68da      	ldr	r2, [r3, #12]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	1ad3      	subs	r3, r2, r3
}
 800265a:	4618      	mov	r0, r3
 800265c:	370c      	adds	r7, #12
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr

08002666 <ring_buffer_used>:

static inline size_t ring_buffer_used(const RingBuffer *rb) {
 8002666:	b480      	push	{r7}
 8002668:	b083      	sub	sp, #12
 800266a:	af00      	add	r7, sp, #0
 800266c:	6078      	str	r0, [r7, #4]
    return rb->size;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	689b      	ldr	r3, [r3, #8]
}
 8002672:	4618      	mov	r0, r3
 8002674:	370c      	adds	r7, #12
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr
	...

08002680 <log_add>:
{
    write_enabled = false;
}

void log_add(const LogMessage *data)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b084      	sub	sp, #16
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
    // Attempt to push the log record into the ring buffer.
    // (If buffer is full and overwrite is enabled, data will be overwritten.)
    bool ok = ring_buffer_push(&logBuffer, data, true);
 8002688:	2201      	movs	r2, #1
 800268a:	6879      	ldr	r1, [r7, #4]
 800268c:	480a      	ldr	r0, [pc, #40]	@ (80026b8 <log_add+0x38>)
 800268e:	f001 f9fb 	bl	8003a88 <ring_buffer_push>
 8002692:	4603      	mov	r3, r0
 8002694:	73fb      	strb	r3, [r7, #15]
    if (!ok && write_enabled) {
 8002696:	7bfb      	ldrb	r3, [r7, #15]
 8002698:	f083 0301 	eor.w	r3, r3, #1
 800269c:	b2db      	uxtb	r3, r3
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d006      	beq.n	80026b0 <log_add+0x30>
 80026a2:	4b06      	ldr	r3, [pc, #24]	@ (80026bc <log_add+0x3c>)
 80026a4:	781b      	ldrb	r3, [r3, #0]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d002      	beq.n	80026b0 <log_add+0x30>
        // In a real system you might log an error message
        debug_print("Log buffer overflow!\r\n");
 80026aa:	4805      	ldr	r0, [pc, #20]	@ (80026c0 <log_add+0x40>)
 80026ac:	f000 f874 	bl	8002798 <debug_print>
    }
}
 80026b0:	bf00      	nop
 80026b2:	3710      	adds	r7, #16
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	20000398 	.word	0x20000398
 80026bc:	200003c8 	.word	0x200003c8
 80026c0:	08013d50 	.word	0x08013d50

080026c4 <log_step>:
 * This function transfers log messages from the log ring buffer (RAM) into the
 * write ring buffer (a byte stream). When at least one full flash page of data is
 * available in the write buffer, it writes it to flash.
 */
void log_step(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b0ce      	sub	sp, #312	@ 0x138
 80026c8:	af00      	add	r7, sp, #0
    if (!write_enabled || written_pages >= FLASH_PAGE_COUNT) {
 80026ca:	4b2e      	ldr	r3, [pc, #184]	@ (8002784 <log_step+0xc0>)
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	f083 0301 	eor.w	r3, r3, #1
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d14d      	bne.n	8002774 <log_step+0xb0>
 80026d8:	4b2b      	ldr	r3, [pc, #172]	@ (8002788 <log_step+0xc4>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80026e0:	d248      	bcs.n	8002774 <log_step+0xb0>
    }

    LogMessage temp;
    // Transfer as many LogMessage records as possible from logBuffer to writeBuffer.
    // (We treat the record as a raw block of bytes.)
    while (ring_buffer_available(&writeBuffer) >= sizeof(LogMessage)) {
 80026e2:	e012      	b.n	800270a <log_step+0x46>
        if (!ring_buffer_pop(&logBuffer, &temp)) {
 80026e4:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 80026e8:	4619      	mov	r1, r3
 80026ea:	4828      	ldr	r0, [pc, #160]	@ (800278c <log_step+0xc8>)
 80026ec:	f001 fa18 	bl	8003b20 <ring_buffer_pop>
 80026f0:	4603      	mov	r3, r0
 80026f2:	f083 0301 	eor.w	r3, r3, #1
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d10d      	bne.n	8002718 <log_step+0x54>
            break;
        }
        // Push raw bytes of the log message into the write buffer.
        ring_buffer_push_array(&writeBuffer, (uint8_t *)&temp, sizeof(temp), false);
 80026fc:	f507 7182 	add.w	r1, r7, #260	@ 0x104
 8002700:	2300      	movs	r3, #0
 8002702:	2233      	movs	r2, #51	@ 0x33
 8002704:	4822      	ldr	r0, [pc, #136]	@ (8002790 <log_step+0xcc>)
 8002706:	f001 fa3a 	bl	8003b7e <ring_buffer_push_array>
    while (ring_buffer_available(&writeBuffer) >= sizeof(LogMessage)) {
 800270a:	4821      	ldr	r0, [pc, #132]	@ (8002790 <log_step+0xcc>)
 800270c:	f7ff ff9c 	bl	8002648 <ring_buffer_available>
 8002710:	4603      	mov	r3, r0
 8002712:	2b32      	cmp	r3, #50	@ 0x32
 8002714:	d8e6      	bhi.n	80026e4 <log_step+0x20>
 8002716:	e01f      	b.n	8002758 <log_step+0x94>
            break;
 8002718:	bf00      	nop
    }

    uint8_t page[EXT_FLASH_PAGE_SIZE];
    // Write out full flash pages from the write buffer.
    while (written_pages < FLASH_PAGE_COUNT && !Flash_Busy()) {
 800271a:	e01d      	b.n	8002758 <log_step+0x94>
        // (Optionally, if your flash requires erasing each block before writing,
        // you could check for block boundaries here and erase accordingly.
        // In this implementation, it is assumed that a full erase was done before logging.)

        // Check if a full page is available in the write buffer.
        if (ring_buffer_used(&writeBuffer) < EXT_FLASH_PAGE_SIZE) {
 800271c:	481c      	ldr	r0, [pc, #112]	@ (8002790 <log_step+0xcc>)
 800271e:	f7ff ffa2 	bl	8002666 <ring_buffer_used>
 8002722:	4603      	mov	r3, r0
 8002724:	2bff      	cmp	r3, #255	@ 0xff
 8002726:	d927      	bls.n	8002778 <log_step+0xb4>
            break;  // Not enough data yet.
        }

        // Pop one flash page worth of data.
        ring_buffer_pop_array(&writeBuffer, page, EXT_FLASH_PAGE_SIZE);
 8002728:	1d3b      	adds	r3, r7, #4
 800272a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800272e:	4619      	mov	r1, r3
 8002730:	4817      	ldr	r0, [pc, #92]	@ (8002790 <log_step+0xcc>)
 8002732:	f001 fac3 	bl	8003cbc <ring_buffer_pop_array>

        // Write this page to flash.
        Flash_Write(current_page, page);
 8002736:	4b17      	ldr	r3, [pc, #92]	@ (8002794 <log_step+0xd0>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	1d3a      	adds	r2, r7, #4
 800273c:	4611      	mov	r1, r2
 800273e:	4618      	mov	r0, r3
 8002740:	f7ff fbac 	bl	8001e9c <Flash_Write>

        current_page++;
 8002744:	4b13      	ldr	r3, [pc, #76]	@ (8002794 <log_step+0xd0>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	3301      	adds	r3, #1
 800274a:	4a12      	ldr	r2, [pc, #72]	@ (8002794 <log_step+0xd0>)
 800274c:	6013      	str	r3, [r2, #0]
        written_pages++;
 800274e:	4b0e      	ldr	r3, [pc, #56]	@ (8002788 <log_step+0xc4>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	3301      	adds	r3, #1
 8002754:	4a0c      	ldr	r2, [pc, #48]	@ (8002788 <log_step+0xc4>)
 8002756:	6013      	str	r3, [r2, #0]
    while (written_pages < FLASH_PAGE_COUNT && !Flash_Busy()) {
 8002758:	4b0b      	ldr	r3, [pc, #44]	@ (8002788 <log_step+0xc4>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002760:	d20b      	bcs.n	800277a <log_step+0xb6>
 8002762:	f7ff fb8d 	bl	8001e80 <Flash_Busy>
 8002766:	4603      	mov	r3, r0
 8002768:	f083 0301 	eor.w	r3, r3, #1
 800276c:	b2db      	uxtb	r3, r3
 800276e:	2b00      	cmp	r3, #0
 8002770:	d1d4      	bne.n	800271c <log_step+0x58>
 8002772:	e002      	b.n	800277a <log_step+0xb6>
        return;
 8002774:	bf00      	nop
 8002776:	e000      	b.n	800277a <log_step+0xb6>
            break;  // Not enough data yet.
 8002778:	bf00      	nop
    }
}
 800277a:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	200003c8 	.word	0x200003c8
 8002788:	200003d0 	.word	0x200003d0
 800278c:	20000398 	.word	0x20000398
 8002790:	200003b0 	.word	0x200003b0
 8002794:	200003cc 	.word	0x200003cc

08002798 <debug_print>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
extern void debug_print(const char *format, ...) {
 8002798:	b40f      	push	{r0, r1, r2, r3}
 800279a:	b580      	push	{r7, lr}
 800279c:	b0c2      	sub	sp, #264	@ 0x108
 800279e:	af00      	add	r7, sp, #0
	char buf[PRINT_BUFFER_SIZE];
	va_list args;
	va_start(args, format);
 80027a0:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 80027a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80027a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80027ac:	601a      	str	r2, [r3, #0]
	int n = vsnprintf(buf, sizeof(buf), format, args);
 80027ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80027b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80027b6:	1d38      	adds	r0, r7, #4
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 80027be:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80027c2:	f00e fa01 	bl	8010bc8 <vsniprintf>
 80027c6:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
	CDC_Transmit_FS(buf, n);
 80027ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80027ce:	b29a      	uxth	r2, r3
 80027d0:	1d3b      	adds	r3, r7, #4
 80027d2:	4611      	mov	r1, r2
 80027d4:	4618      	mov	r0, r3
 80027d6:	f00d f865 	bl	800f8a4 <CDC_Transmit_FS>
	va_end(args);
}
 80027da:	bf00      	nop
 80027dc:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80027e0:	46bd      	mov	sp, r7
 80027e2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80027e6:	b004      	add	sp, #16
 80027e8:	4770      	bx	lr
	...

080027ec <channel_fire>:

void channel_fire(uint8_t index) {
 80027ec:	b590      	push	{r4, r7, lr}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	4603      	mov	r3, r0
 80027f4:	71fb      	strb	r3, [r7, #7]
	if (index >= CHANNEL_COUNT) return;
 80027f6:	79fb      	ldrb	r3, [r7, #7]
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d81f      	bhi.n	800283c <channel_fire+0x50>
	pyros[index].firing = true;
 80027fc:	79fb      	ldrb	r3, [r7, #7]
 80027fe:	4a11      	ldr	r2, [pc, #68]	@ (8002844 <channel_fire+0x58>)
 8002800:	011b      	lsls	r3, r3, #4
 8002802:	4413      	add	r3, r2
 8002804:	330c      	adds	r3, #12
 8002806:	2201      	movs	r2, #1
 8002808:	701a      	strb	r2, [r3, #0]
	pyros[index].fire_time = HAL_GetTick();
 800280a:	79fc      	ldrb	r4, [r7, #7]
 800280c:	f001 fb14 	bl	8003e38 <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	490c      	ldr	r1, [pc, #48]	@ (8002844 <channel_fire+0x58>)
 8002814:	0123      	lsls	r3, r4, #4
 8002816:	440b      	add	r3, r1
 8002818:	3308      	adds	r3, #8
 800281a:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(pyros[index].port, pyros[index].pin, GPIO_PIN_SET);
 800281c:	79fb      	ldrb	r3, [r7, #7]
 800281e:	4a09      	ldr	r2, [pc, #36]	@ (8002844 <channel_fire+0x58>)
 8002820:	011b      	lsls	r3, r3, #4
 8002822:	4413      	add	r3, r2
 8002824:	6818      	ldr	r0, [r3, #0]
 8002826:	79fb      	ldrb	r3, [r7, #7]
 8002828:	4a06      	ldr	r2, [pc, #24]	@ (8002844 <channel_fire+0x58>)
 800282a:	011b      	lsls	r3, r3, #4
 800282c:	4413      	add	r3, r2
 800282e:	3304      	adds	r3, #4
 8002830:	881b      	ldrh	r3, [r3, #0]
 8002832:	2201      	movs	r2, #1
 8002834:	4619      	mov	r1, r3
 8002836:	f002 f80b 	bl	8004850 <HAL_GPIO_WritePin>
 800283a:	e000      	b.n	800283e <channel_fire+0x52>
	if (index >= CHANNEL_COUNT) return;
 800283c:	bf00      	nop
}
 800283e:	370c      	adds	r7, #12
 8002840:	46bd      	mov	sp, r7
 8002842:	bd90      	pop	{r4, r7, pc}
 8002844:	20000000 	.word	0x20000000

08002848 <channel_update>:

void channel_update(void) {
 8002848:	b580      	push	{r7, lr}
 800284a:	b082      	sub	sp, #8
 800284c:	af00      	add	r7, sp, #0
	uint32_t now = HAL_GetTick();
 800284e:	f001 faf3 	bl	8003e38 <HAL_GetTick>
 8002852:	6038      	str	r0, [r7, #0]
	for (uint8_t i = 0; i < CHANNEL_COUNT; i++) {
 8002854:	2300      	movs	r3, #0
 8002856:	71fb      	strb	r3, [r7, #7]
 8002858:	e02b      	b.n	80028b2 <channel_update+0x6a>
		if (pyros[i].firing && (now - pyros[i].fire_time >= CHANNEL_FIRE_TIME)) {
 800285a:	79fb      	ldrb	r3, [r7, #7]
 800285c:	4a19      	ldr	r2, [pc, #100]	@ (80028c4 <channel_update+0x7c>)
 800285e:	011b      	lsls	r3, r3, #4
 8002860:	4413      	add	r3, r2
 8002862:	330c      	adds	r3, #12
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d020      	beq.n	80028ac <channel_update+0x64>
 800286a:	79fb      	ldrb	r3, [r7, #7]
 800286c:	4a15      	ldr	r2, [pc, #84]	@ (80028c4 <channel_update+0x7c>)
 800286e:	011b      	lsls	r3, r3, #4
 8002870:	4413      	add	r3, r2
 8002872:	3308      	adds	r3, #8
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	683a      	ldr	r2, [r7, #0]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800287e:	d315      	bcc.n	80028ac <channel_update+0x64>
			pyros[i].firing = false;
 8002880:	79fb      	ldrb	r3, [r7, #7]
 8002882:	4a10      	ldr	r2, [pc, #64]	@ (80028c4 <channel_update+0x7c>)
 8002884:	011b      	lsls	r3, r3, #4
 8002886:	4413      	add	r3, r2
 8002888:	330c      	adds	r3, #12
 800288a:	2200      	movs	r2, #0
 800288c:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(pyros[i].port, pyros[i].pin, GPIO_PIN_RESET);
 800288e:	79fb      	ldrb	r3, [r7, #7]
 8002890:	4a0c      	ldr	r2, [pc, #48]	@ (80028c4 <channel_update+0x7c>)
 8002892:	011b      	lsls	r3, r3, #4
 8002894:	4413      	add	r3, r2
 8002896:	6818      	ldr	r0, [r3, #0]
 8002898:	79fb      	ldrb	r3, [r7, #7]
 800289a:	4a0a      	ldr	r2, [pc, #40]	@ (80028c4 <channel_update+0x7c>)
 800289c:	011b      	lsls	r3, r3, #4
 800289e:	4413      	add	r3, r2
 80028a0:	3304      	adds	r3, #4
 80028a2:	881b      	ldrh	r3, [r3, #0]
 80028a4:	2200      	movs	r2, #0
 80028a6:	4619      	mov	r1, r3
 80028a8:	f001 ffd2 	bl	8004850 <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i < CHANNEL_COUNT; i++) {
 80028ac:	79fb      	ldrb	r3, [r7, #7]
 80028ae:	3301      	adds	r3, #1
 80028b0:	71fb      	strb	r3, [r7, #7]
 80028b2:	79fb      	ldrb	r3, [r7, #7]
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d9d0      	bls.n	800285a <channel_update+0x12>

		}
	}
}
 80028b8:	bf00      	nop
 80028ba:	bf00      	nop
 80028bc:	3708      	adds	r7, #8
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	20000000 	.word	0x20000000

080028c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b082      	sub	sp, #8
 80028cc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80028ce:	f001 fa88 	bl	8003de2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80028d2:	f000 f8a9 	bl	8002a28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80028d6:	f000 f979 	bl	8002bcc <MX_GPIO_Init>
  MX_FDCAN2_Init();
 80028da:	f000 f8f3 	bl	8002ac4 <MX_FDCAN2_Init>
  MX_SPI1_Init();
 80028de:	f000 f937 	bl	8002b50 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(ACCEL_nCS_GPIO_Port, ACCEL_nCS_Pin, GPIO_PIN_SET);
 80028e2:	2201      	movs	r2, #1
 80028e4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80028e8:	4839      	ldr	r0, [pc, #228]	@ (80029d0 <main+0x108>)
 80028ea:	f001 ffb1 	bl	8004850 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GYRO_nCS_GPIO_Port, GYRO_nCS_Pin, GPIO_PIN_SET);
 80028ee:	2201      	movs	r2, #1
 80028f0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80028f4:	4836      	ldr	r0, [pc, #216]	@ (80029d0 <main+0x108>)
 80028f6:	f001 ffab 	bl	8004850 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(FLASH_nCS_GPIO_Port, FLASH_nCS_Pin, GPIO_PIN_SET);
 80028fa:	2201      	movs	r2, #1
 80028fc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002900:	4833      	ldr	r0, [pc, #204]	@ (80029d0 <main+0x108>)
 8002902:	f001 ffa5 	bl	8004850 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BARO_nCS_GPIO_Port, BARO_nCS_Pin, GPIO_PIN_SET);
 8002906:	2201      	movs	r2, #1
 8002908:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800290c:	4830      	ldr	r0, [pc, #192]	@ (80029d0 <main+0x108>)
 800290e:	f001 ff9f 	bl	8004850 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Backlight_GPIO_Port, Backlight_Pin, GPIO_PIN_SET);
 8002912:	2201      	movs	r2, #1
 8002914:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002918:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800291c:	f001 ff98 	bl	8004850 <HAL_GPIO_WritePin>

  bmi088_init(&imu, &hspi1, ACCEL_nCS_GPIO_Port, GYRO_nCS_GPIO_Port, ACCEL_nCS_Pin, GYRO_nCS_Pin);
 8002920:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002924:	9301      	str	r3, [sp, #4]
 8002926:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800292a:	9300      	str	r3, [sp, #0]
 800292c:	4b28      	ldr	r3, [pc, #160]	@ (80029d0 <main+0x108>)
 800292e:	4a28      	ldr	r2, [pc, #160]	@ (80029d0 <main+0x108>)
 8002930:	4928      	ldr	r1, [pc, #160]	@ (80029d4 <main+0x10c>)
 8002932:	4829      	ldr	r0, [pc, #164]	@ (80029d8 <main+0x110>)
 8002934:	f7fe fa30 	bl	8000d98 <bmi088_init>
  bmp_init(&baro, &hspi1, BARO_nCS_GPIO_Port, BARO_nCS_Pin);
 8002938:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800293c:	4a24      	ldr	r2, [pc, #144]	@ (80029d0 <main+0x108>)
 800293e:	4925      	ldr	r1, [pc, #148]	@ (80029d4 <main+0x10c>)
 8002940:	4826      	ldr	r0, [pc, #152]	@ (80029dc <main+0x114>)
 8002942:	f7fe ffa7 	bl	8001894 <bmp_init>
  KalmanFilter_init(&kf, KALMAN_PERIOD, ALTITUDE_SIGMA, ACCELERATION_SIGMA, MODEL_SIGMA);
 8002946:	eef7 1a00 	vmov.f32	s3, #112	@ 0x3f800000  1.0
 800294a:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 800294e:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8002952:	ed9f 0a23 	vldr	s0, [pc, #140]	@ 80029e0 <main+0x118>
 8002956:	4823      	ldr	r0, [pc, #140]	@ (80029e4 <main+0x11c>)
 8002958:	f7ff fd58 	bl	800240c <KalmanFilter_init>
  Flash_Setup(&hspi1, FLASH_nCS_GPIO_Port, FLASH_nCS_Pin);
 800295c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002960:	491b      	ldr	r1, [pc, #108]	@ (80029d0 <main+0x108>)
 8002962:	481c      	ldr	r0, [pc, #112]	@ (80029d4 <main+0x10c>)
 8002964:	f7ff fa3c 	bl	8001de0 <Flash_Setup>
//  log_setup();
//  log_start();
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002968:	f009 fa6c 	bl	800be44 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of sensorData */
  sensorDataHandle = osMutexNew(&sensorData_attributes);
 800296c:	481e      	ldr	r0, [pc, #120]	@ (80029e8 <main+0x120>)
 800296e:	f009 fba2 	bl	800c0b6 <osMutexNew>
 8002972:	4603      	mov	r3, r0
 8002974:	4a1d      	ldr	r2, [pc, #116]	@ (80029ec <main+0x124>)
 8002976:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of messageQueue */
  messageQueueHandle = osMessageQueueNew (16, sizeof(LogMessage), &messageQueue_attributes);
 8002978:	4a1d      	ldr	r2, [pc, #116]	@ (80029f0 <main+0x128>)
 800297a:	2133      	movs	r1, #51	@ 0x33
 800297c:	2010      	movs	r0, #16
 800297e:	f009 fca8 	bl	800c2d2 <osMessageQueueNew>
 8002982:	4603      	mov	r3, r0
 8002984:	4a1b      	ldr	r2, [pc, #108]	@ (80029f4 <main+0x12c>)
 8002986:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of sendMessage */
  sendMessageHandle = osThreadNew(StartSendMessage, NULL, &sendMessage_attributes);
 8002988:	4a1b      	ldr	r2, [pc, #108]	@ (80029f8 <main+0x130>)
 800298a:	2100      	movs	r1, #0
 800298c:	481b      	ldr	r0, [pc, #108]	@ (80029fc <main+0x134>)
 800298e:	f009 fab8 	bl	800bf02 <osThreadNew>
 8002992:	4603      	mov	r3, r0
 8002994:	4a1a      	ldr	r2, [pc, #104]	@ (8002a00 <main+0x138>)
 8002996:	6013      	str	r3, [r2, #0]

  /* creation of deploymentTask */
  deploymentTaskHandle = osThreadNew(StartDeployment, NULL, &deploymentTask_attributes);
 8002998:	4a1a      	ldr	r2, [pc, #104]	@ (8002a04 <main+0x13c>)
 800299a:	2100      	movs	r1, #0
 800299c:	481a      	ldr	r0, [pc, #104]	@ (8002a08 <main+0x140>)
 800299e:	f009 fab0 	bl	800bf02 <osThreadNew>
 80029a2:	4603      	mov	r3, r0
 80029a4:	4a19      	ldr	r2, [pc, #100]	@ (8002a0c <main+0x144>)
 80029a6:	6013      	str	r3, [r2, #0]

  /* creation of readSensors */
  readSensorsHandle = osThreadNew(StartReadSensors, NULL, &readSensors_attributes);
 80029a8:	4a19      	ldr	r2, [pc, #100]	@ (8002a10 <main+0x148>)
 80029aa:	2100      	movs	r1, #0
 80029ac:	4819      	ldr	r0, [pc, #100]	@ (8002a14 <main+0x14c>)
 80029ae:	f009 faa8 	bl	800bf02 <osThreadNew>
 80029b2:	4603      	mov	r3, r0
 80029b4:	4a18      	ldr	r2, [pc, #96]	@ (8002a18 <main+0x150>)
 80029b6:	6013      	str	r3, [r2, #0]

  /* creation of logTask */
  logTaskHandle = osThreadNew(StartLog, NULL, &logTask_attributes);
 80029b8:	4a18      	ldr	r2, [pc, #96]	@ (8002a1c <main+0x154>)
 80029ba:	2100      	movs	r1, #0
 80029bc:	4818      	ldr	r0, [pc, #96]	@ (8002a20 <main+0x158>)
 80029be:	f009 faa0 	bl	800bf02 <osThreadNew>
 80029c2:	4603      	mov	r3, r0
 80029c4:	4a17      	ldr	r2, [pc, #92]	@ (8002a24 <main+0x15c>)
 80029c6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80029c8:	f009 fa60 	bl	800be8c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80029cc:	bf00      	nop
 80029ce:	e7fd      	b.n	80029cc <main+0x104>
 80029d0:	48000400 	.word	0x48000400
 80029d4:	20000438 	.word	0x20000438
 80029d8:	200004b4 	.word	0x200004b4
 80029dc:	200004fc 	.word	0x200004fc
 80029e0:	3dcccccd 	.word	0x3dcccccd
 80029e4:	20000570 	.word	0x20000570
 80029e8:	08013f44 	.word	0x08013f44
 80029ec:	200004b0 	.word	0x200004b0
 80029f0:	08013f2c 	.word	0x08013f2c
 80029f4:	200004ac 	.word	0x200004ac
 80029f8:	08013e9c 	.word	0x08013e9c
 80029fc:	08002cad 	.word	0x08002cad
 8002a00:	2000049c 	.word	0x2000049c
 8002a04:	08013ec0 	.word	0x08013ec0
 8002a08:	08002d49 	.word	0x08002d49
 8002a0c:	200004a0 	.word	0x200004a0
 8002a10:	08013ee4 	.word	0x08013ee4
 8002a14:	08003331 	.word	0x08003331
 8002a18:	200004a4 	.word	0x200004a4
 8002a1c:	08013f08 	.word	0x08013f08
 8002a20:	080033fd 	.word	0x080033fd
 8002a24:	200004a8 	.word	0x200004a8

08002a28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b094      	sub	sp, #80	@ 0x50
 8002a2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a2e:	f107 0318 	add.w	r3, r7, #24
 8002a32:	2238      	movs	r2, #56	@ 0x38
 8002a34:	2100      	movs	r1, #0
 8002a36:	4618      	mov	r0, r3
 8002a38:	f00e f8d4 	bl	8010be4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a3c:	1d3b      	adds	r3, r7, #4
 8002a3e:	2200      	movs	r2, #0
 8002a40:	601a      	str	r2, [r3, #0]
 8002a42:	605a      	str	r2, [r3, #4]
 8002a44:	609a      	str	r2, [r3, #8]
 8002a46:	60da      	str	r2, [r3, #12]
 8002a48:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8002a4a:	2000      	movs	r0, #0
 8002a4c:	f003 fc34 	bl	80062b8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8002a50:	2322      	movs	r3, #34	@ 0x22
 8002a52:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a54:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002a58:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002a5a:	2340      	movs	r3, #64	@ 0x40
 8002a5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a62:	2302      	movs	r3, #2
 8002a64:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002a66:	2302      	movs	r3, #2
 8002a68:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8002a6a:	2304      	movs	r3, #4
 8002a6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8002a6e:	2355      	movs	r3, #85	@ 0x55
 8002a70:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002a72:	2302      	movs	r3, #2
 8002a74:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002a76:	2302      	movs	r3, #2
 8002a78:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002a7a:	2302      	movs	r3, #2
 8002a7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a7e:	f107 0318 	add.w	r3, r7, #24
 8002a82:	4618      	mov	r0, r3
 8002a84:	f003 fccc 	bl	8006420 <HAL_RCC_OscConfig>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d001      	beq.n	8002a92 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8002a8e:	f000 fcd3 	bl	8003438 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a92:	230f      	movs	r3, #15
 8002a94:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a96:	2303      	movs	r3, #3
 8002a98:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002aa6:	1d3b      	adds	r3, r7, #4
 8002aa8:	2104      	movs	r1, #4
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f003 ffca 	bl	8006a44 <HAL_RCC_ClockConfig>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d001      	beq.n	8002aba <SystemClock_Config+0x92>
  {
    Error_Handler();
 8002ab6:	f000 fcbf 	bl	8003438 <Error_Handler>
  }
}
 8002aba:	bf00      	nop
 8002abc:	3750      	adds	r7, #80	@ 0x50
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
	...

08002ac4 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8002ac8:	4b1f      	ldr	r3, [pc, #124]	@ (8002b48 <MX_FDCAN2_Init+0x84>)
 8002aca:	4a20      	ldr	r2, [pc, #128]	@ (8002b4c <MX_FDCAN2_Init+0x88>)
 8002acc:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8002ace:	4b1e      	ldr	r3, [pc, #120]	@ (8002b48 <MX_FDCAN2_Init+0x84>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8002ad4:	4b1c      	ldr	r3, [pc, #112]	@ (8002b48 <MX_FDCAN2_Init+0x84>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8002ada:	4b1b      	ldr	r3, [pc, #108]	@ (8002b48 <MX_FDCAN2_Init+0x84>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8002ae0:	4b19      	ldr	r3, [pc, #100]	@ (8002b48 <MX_FDCAN2_Init+0x84>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8002ae6:	4b18      	ldr	r3, [pc, #96]	@ (8002b48 <MX_FDCAN2_Init+0x84>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8002aec:	4b16      	ldr	r3, [pc, #88]	@ (8002b48 <MX_FDCAN2_Init+0x84>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 8002af2:	4b15      	ldr	r3, [pc, #84]	@ (8002b48 <MX_FDCAN2_Init+0x84>)
 8002af4:	2210      	movs	r2, #16
 8002af6:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8002af8:	4b13      	ldr	r3, [pc, #76]	@ (8002b48 <MX_FDCAN2_Init+0x84>)
 8002afa:	2201      	movs	r2, #1
 8002afc:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 1;
 8002afe:	4b12      	ldr	r3, [pc, #72]	@ (8002b48 <MX_FDCAN2_Init+0x84>)
 8002b00:	2201      	movs	r2, #1
 8002b02:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 1;
 8002b04:	4b10      	ldr	r3, [pc, #64]	@ (8002b48 <MX_FDCAN2_Init+0x84>)
 8002b06:	2201      	movs	r2, #1
 8002b08:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8002b0a:	4b0f      	ldr	r3, [pc, #60]	@ (8002b48 <MX_FDCAN2_Init+0x84>)
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8002b10:	4b0d      	ldr	r3, [pc, #52]	@ (8002b48 <MX_FDCAN2_Init+0x84>)
 8002b12:	2201      	movs	r2, #1
 8002b14:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8002b16:	4b0c      	ldr	r3, [pc, #48]	@ (8002b48 <MX_FDCAN2_Init+0x84>)
 8002b18:	2201      	movs	r2, #1
 8002b1a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8002b1c:	4b0a      	ldr	r3, [pc, #40]	@ (8002b48 <MX_FDCAN2_Init+0x84>)
 8002b1e:	2201      	movs	r2, #1
 8002b20:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.StdFiltersNbr = 0;
 8002b22:	4b09      	ldr	r3, [pc, #36]	@ (8002b48 <MX_FDCAN2_Init+0x84>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 8002b28:	4b07      	ldr	r3, [pc, #28]	@ (8002b48 <MX_FDCAN2_Init+0x84>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8002b2e:	4b06      	ldr	r3, [pc, #24]	@ (8002b48 <MX_FDCAN2_Init+0x84>)
 8002b30:	2200      	movs	r2, #0
 8002b32:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8002b34:	4804      	ldr	r0, [pc, #16]	@ (8002b48 <MX_FDCAN2_Init+0x84>)
 8002b36:	f001 fa8d 	bl	8004054 <HAL_FDCAN_Init>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d001      	beq.n	8002b44 <MX_FDCAN2_Init+0x80>
  {
    Error_Handler();
 8002b40:	f000 fc7a 	bl	8003438 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8002b44:	bf00      	nop
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	200003d4 	.word	0x200003d4
 8002b4c:	40006800 	.word	0x40006800

08002b50 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002b54:	4b1b      	ldr	r3, [pc, #108]	@ (8002bc4 <MX_SPI1_Init+0x74>)
 8002b56:	4a1c      	ldr	r2, [pc, #112]	@ (8002bc8 <MX_SPI1_Init+0x78>)
 8002b58:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002b5a:	4b1a      	ldr	r3, [pc, #104]	@ (8002bc4 <MX_SPI1_Init+0x74>)
 8002b5c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002b60:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002b62:	4b18      	ldr	r3, [pc, #96]	@ (8002bc4 <MX_SPI1_Init+0x74>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002b68:	4b16      	ldr	r3, [pc, #88]	@ (8002bc4 <MX_SPI1_Init+0x74>)
 8002b6a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002b6e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b70:	4b14      	ldr	r3, [pc, #80]	@ (8002bc4 <MX_SPI1_Init+0x74>)
 8002b72:	2200      	movs	r2, #0
 8002b74:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002b76:	4b13      	ldr	r3, [pc, #76]	@ (8002bc4 <MX_SPI1_Init+0x74>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002b7c:	4b11      	ldr	r3, [pc, #68]	@ (8002bc4 <MX_SPI1_Init+0x74>)
 8002b7e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b82:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002b84:	4b0f      	ldr	r3, [pc, #60]	@ (8002bc4 <MX_SPI1_Init+0x74>)
 8002b86:	2220      	movs	r2, #32
 8002b88:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002b8a:	4b0e      	ldr	r3, [pc, #56]	@ (8002bc4 <MX_SPI1_Init+0x74>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002b90:	4b0c      	ldr	r3, [pc, #48]	@ (8002bc4 <MX_SPI1_Init+0x74>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b96:	4b0b      	ldr	r3, [pc, #44]	@ (8002bc4 <MX_SPI1_Init+0x74>)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002b9c:	4b09      	ldr	r3, [pc, #36]	@ (8002bc4 <MX_SPI1_Init+0x74>)
 8002b9e:	2207      	movs	r2, #7
 8002ba0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002ba2:	4b08      	ldr	r3, [pc, #32]	@ (8002bc4 <MX_SPI1_Init+0x74>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002ba8:	4b06      	ldr	r3, [pc, #24]	@ (8002bc4 <MX_SPI1_Init+0x74>)
 8002baa:	2208      	movs	r2, #8
 8002bac:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002bae:	4805      	ldr	r0, [pc, #20]	@ (8002bc4 <MX_SPI1_Init+0x74>)
 8002bb0:	f004 fbbc 	bl	800732c <HAL_SPI_Init>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d001      	beq.n	8002bbe <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002bba:	f000 fc3d 	bl	8003438 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002bbe:	bf00      	nop
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	20000438 	.word	0x20000438
 8002bc8:	40013000 	.word	0x40013000

08002bcc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b08a      	sub	sp, #40	@ 0x28
 8002bd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bd2:	f107 0314 	add.w	r3, r7, #20
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	601a      	str	r2, [r3, #0]
 8002bda:	605a      	str	r2, [r3, #4]
 8002bdc:	609a      	str	r2, [r3, #8]
 8002bde:	60da      	str	r2, [r3, #12]
 8002be0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002be2:	4b30      	ldr	r3, [pc, #192]	@ (8002ca4 <MX_GPIO_Init+0xd8>)
 8002be4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002be6:	4a2f      	ldr	r2, [pc, #188]	@ (8002ca4 <MX_GPIO_Init+0xd8>)
 8002be8:	f043 0304 	orr.w	r3, r3, #4
 8002bec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002bee:	4b2d      	ldr	r3, [pc, #180]	@ (8002ca4 <MX_GPIO_Init+0xd8>)
 8002bf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bf2:	f003 0304 	and.w	r3, r3, #4
 8002bf6:	613b      	str	r3, [r7, #16]
 8002bf8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002bfa:	4b2a      	ldr	r3, [pc, #168]	@ (8002ca4 <MX_GPIO_Init+0xd8>)
 8002bfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bfe:	4a29      	ldr	r2, [pc, #164]	@ (8002ca4 <MX_GPIO_Init+0xd8>)
 8002c00:	f043 0320 	orr.w	r3, r3, #32
 8002c04:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c06:	4b27      	ldr	r3, [pc, #156]	@ (8002ca4 <MX_GPIO_Init+0xd8>)
 8002c08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c0a:	f003 0320 	and.w	r3, r3, #32
 8002c0e:	60fb      	str	r3, [r7, #12]
 8002c10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c12:	4b24      	ldr	r3, [pc, #144]	@ (8002ca4 <MX_GPIO_Init+0xd8>)
 8002c14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c16:	4a23      	ldr	r2, [pc, #140]	@ (8002ca4 <MX_GPIO_Init+0xd8>)
 8002c18:	f043 0301 	orr.w	r3, r3, #1
 8002c1c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c1e:	4b21      	ldr	r3, [pc, #132]	@ (8002ca4 <MX_GPIO_Init+0xd8>)
 8002c20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c22:	f003 0301 	and.w	r3, r3, #1
 8002c26:	60bb      	str	r3, [r7, #8]
 8002c28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c2a:	4b1e      	ldr	r3, [pc, #120]	@ (8002ca4 <MX_GPIO_Init+0xd8>)
 8002c2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c2e:	4a1d      	ldr	r2, [pc, #116]	@ (8002ca4 <MX_GPIO_Init+0xd8>)
 8002c30:	f043 0302 	orr.w	r3, r3, #2
 8002c34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c36:	4b1b      	ldr	r3, [pc, #108]	@ (8002ca4 <MX_GPIO_Init+0xd8>)
 8002c38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c3a:	f003 0302 	and.w	r3, r3, #2
 8002c3e:	607b      	str	r3, [r7, #4]
 8002c40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ACCEL_nCS_Pin|GYRO_nCS_Pin|BARO_nCS_Pin|FLASH_nCS_Pin
 8002c42:	2200      	movs	r2, #0
 8002c44:	f64f 0180 	movw	r1, #63616	@ 0xf880
 8002c48:	4817      	ldr	r0, [pc, #92]	@ (8002ca8 <MX_GPIO_Init+0xdc>)
 8002c4a:	f001 fe01 	bl	8004850 <HAL_GPIO_WritePin>
                          |PIRANHA_Pin|RAPTOR_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, STATUS_LED_Pin|Backlight_Pin, GPIO_PIN_RESET);
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8002c54:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002c58:	f001 fdfa 	bl	8004850 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ACCEL_nCS_Pin GYRO_nCS_Pin BARO_nCS_Pin FLASH_nCS_Pin
                           PIRANHA_Pin RAPTOR_Pin */
  GPIO_InitStruct.Pin = ACCEL_nCS_Pin|GYRO_nCS_Pin|BARO_nCS_Pin|FLASH_nCS_Pin
 8002c5c:	f64f 0380 	movw	r3, #63616	@ 0xf880
 8002c60:	617b      	str	r3, [r7, #20]
                          |PIRANHA_Pin|RAPTOR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c62:	2301      	movs	r3, #1
 8002c64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c66:	2300      	movs	r3, #0
 8002c68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c6e:	f107 0314 	add.w	r3, r7, #20
 8002c72:	4619      	mov	r1, r3
 8002c74:	480c      	ldr	r0, [pc, #48]	@ (8002ca8 <MX_GPIO_Init+0xdc>)
 8002c76:	f001 fc69 	bl	800454c <HAL_GPIO_Init>

  /*Configure GPIO pins : STATUS_LED_Pin Backlight_Pin */
  GPIO_InitStruct.Pin = STATUS_LED_Pin|Backlight_Pin;
 8002c7a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002c7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c80:	2301      	movs	r3, #1
 8002c82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c84:	2300      	movs	r3, #0
 8002c86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c8c:	f107 0314 	add.w	r3, r7, #20
 8002c90:	4619      	mov	r1, r3
 8002c92:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002c96:	f001 fc59 	bl	800454c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002c9a:	bf00      	nop
 8002c9c:	3728      	adds	r7, #40	@ 0x28
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	40021000 	.word	0x40021000
 8002ca8:	48000400 	.word	0x48000400

08002cac <StartSendMessage>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartSendMessage */
void StartSendMessage(void *argument)
{
 8002cac:	b5b0      	push	{r4, r5, r7, lr}
 8002cae:	b0a8      	sub	sp, #160	@ 0xa0
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
    MX_USB_Device_Init();
 8002cb4:	f00c fd38 	bl	800f728 <MX_USB_Device_Init>

    // Prepare a CAN-FD Tx header
    FDCAN_TxHeaderTypeDef txHeader = {
 8002cb8:	4b1f      	ldr	r3, [pc, #124]	@ (8002d38 <StartSendMessage+0x8c>)
 8002cba:	f107 047c 	add.w	r4, r7, #124	@ 0x7c
 8002cbe:	461d      	mov	r5, r3
 8002cc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002cc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002cc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002cc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002cc8:	682b      	ldr	r3, [r5, #0]
 8002cca:	6023      	str	r3, [r4, #0]

    for (;;)
    {
        LogMessage msg;
        // wait forever for one LogMessage to arrive
        if (osMessageQueueGet(messageQueueHandle, &msg, NULL, osWaitForever) == osOK)
 8002ccc:	4b1b      	ldr	r3, [pc, #108]	@ (8002d3c <StartSendMessage+0x90>)
 8002cce:	6818      	ldr	r0, [r3, #0]
 8002cd0:	f107 0108 	add.w	r1, r7, #8
 8002cd4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f009 fbcd 	bl	800c478 <osMessageQueueGet>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d124      	bne.n	8002d2e <StartSendMessage+0x82>
        {
            // zero the buffer & copy in the packed struct
            memset(txBuf, 0, sizeof(txBuf));
 8002ce4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002ce8:	2240      	movs	r2, #64	@ 0x40
 8002cea:	2100      	movs	r1, #0
 8002cec:	4618      	mov	r0, r3
 8002cee:	f00d ff79 	bl	8010be4 <memset>
            memcpy(txBuf, &msg, sizeof(msg));
 8002cf2:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8002cf6:	f107 0508 	add.w	r5, r7, #8
 8002cfa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002cfc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002cfe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d06:	682b      	ldr	r3, [r5, #0]
 8002d08:	461a      	mov	r2, r3
 8002d0a:	8022      	strh	r2, [r4, #0]
 8002d0c:	3402      	adds	r4, #2
 8002d0e:	0c1b      	lsrs	r3, r3, #16
 8002d10:	7023      	strb	r3, [r4, #0]

            if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &txHeader, txBuf) != HAL_OK)
 8002d12:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8002d16:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	4808      	ldr	r0, [pc, #32]	@ (8002d40 <StartSendMessage+0x94>)
 8002d1e:	f001 faf3 	bl	8004308 <HAL_FDCAN_AddMessageToTxFifoQ>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d002      	beq.n	8002d2e <StartSendMessage+0x82>
            {
                debug_print("CAN Tx Error\r\n");
 8002d28:	4806      	ldr	r0, [pc, #24]	@ (8002d44 <StartSendMessage+0x98>)
 8002d2a:	f7ff fd35 	bl	8002798 <debug_print>
            }
        }
        // small yield so lower-priority tasks still run
        osDelay(10);
 8002d2e:	200a      	movs	r0, #10
 8002d30:	f009 f979 	bl	800c026 <osDelay>
    {
 8002d34:	e7ca      	b.n	8002ccc <StartSendMessage+0x20>
 8002d36:	bf00      	nop
 8002d38:	08013e18 	.word	0x08013e18
 8002d3c:	200004ac 	.word	0x200004ac
 8002d40:	200003d4 	.word	0x200003d4
 8002d44:	08013e08 	.word	0x08013e08

08002d48 <StartDeployment>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDeployment */
void StartDeployment(void *argument)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b0ac      	sub	sp, #176	@ 0xb0
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDeployment */
	MX_USB_Device_Init();
 8002d50:	f00c fcea 	bl	800f728 <MX_USB_Device_Init>

	FlightPhase phase = Startup;
 8002d54:	2300      	movs	r3, #0
 8002d56:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
	uint32_t land_time = 0;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
	bool send_now = true;
 8002d60:	2301      	movs	r3, #1
 8002d62:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
	static int    alt_idx    = 0, alt_cnt    = 0;
	static bool   alt_ready  = false;
	static float  alt_zero   = 0.0f;

	// for fixed 100 ms period
	uint32_t next_wake = osKernelGetTickCount() + 100;
 8002d66:	f009 f8b7 	bl	800bed8 <osKernelGetTickCount>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	3364      	adds	r3, #100	@ 0x64
 8002d6e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
	  /* Infinite loop */
	for(;;) {
		uint32_t now = HAL_GetTick();
 8002d72:	f001 f861 	bl	8003e38 <HAL_GetTick>
 8002d76:	6778      	str	r0, [r7, #116]	@ 0x74
        float raw_altitude;
        float current_pressure;
        int16_t current_temp;

        // grab sensors
        if (osMutexAcquire(sensorDataHandle, osWaitForever) == osOK) {
 8002d78:	4bb7      	ldr	r3, [pc, #732]	@ (8003058 <StartDeployment+0x310>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002d80:	4618      	mov	r0, r3
 8002d82:	f009 fa1e 	bl	800c1c2 <osMutexAcquire>
 8002d86:	4603      	mov	r3, r0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d13e      	bne.n	8002e0a <StartDeployment+0xc2>
            memcpy(currentAccel, accelData, sizeof(accelData));
 8002d8c:	4ab3      	ldr	r2, [pc, #716]	@ (800305c <StartDeployment+0x314>)
 8002d8e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002d92:	ca07      	ldmia	r2, {r0, r1, r2}
 8002d94:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            memcpy(currentGyro, gyroData, sizeof(gyroData));
 8002d98:	4ab1      	ldr	r2, [pc, #708]	@ (8003060 <StartDeployment+0x318>)
 8002d9a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002d9e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002da0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            raw_altitude = baro_altitude;
 8002da4:	4baf      	ldr	r3, [pc, #700]	@ (8003064 <StartDeployment+0x31c>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	673b      	str	r3, [r7, #112]	@ 0x70
            current_pressure = pressure;
 8002daa:	4baf      	ldr	r3, [pc, #700]	@ (8003068 <StartDeployment+0x320>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	66fb      	str	r3, [r7, #108]	@ 0x6c
            current_temp = temp;
 8002db0:	4bae      	ldr	r3, [pc, #696]	@ (800306c <StartDeployment+0x324>)
 8002db2:	881b      	ldrh	r3, [r3, #0]
 8002db4:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
            osMutexRelease(sensorDataHandle);
 8002db8:	4ba7      	ldr	r3, [pc, #668]	@ (8003058 <StartDeployment+0x310>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f009 fa4b 	bl	800c258 <osMutexRelease>
            continue;
        }

        // compute accel magnitude
        float accel_mag = sqrtf(
            currentAccel[0]*currentAccel[0] +
 8002dc2:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8002dc6:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8002dca:	ee27 7a27 	vmul.f32	s14, s14, s15
            currentAccel[1]*currentAccel[1] +
 8002dce:	edd7 6a13 	vldr	s13, [r7, #76]	@ 0x4c
 8002dd2:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8002dd6:	ee66 7aa7 	vmul.f32	s15, s13, s15
            currentAccel[0]*currentAccel[0] +
 8002dda:	ee37 7a27 	vadd.f32	s14, s14, s15
            currentAccel[2]*currentAccel[2]
 8002dde:	edd7 6a14 	vldr	s13, [r7, #80]	@ 0x50
 8002de2:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8002de6:	ee66 7aa7 	vmul.f32	s15, s13, s15
        float accel_mag = sqrtf(
 8002dea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dee:	eeb0 0a67 	vmov.f32	s0, s15
 8002df2:	f010 f8b1 	bl	8012f58 <sqrtf>
 8002df6:	ed87 0a19 	vstr	s0, [r7, #100]	@ 0x64
        );

        // —— update trimmed-mean baselines ——
        if (!grav_ready) {
 8002dfa:	4b9d      	ldr	r3, [pc, #628]	@ (8003070 <StartDeployment+0x328>)
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	f083 0301 	eor.w	r3, r3, #1
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d078      	beq.n	8002efa <StartDeployment+0x1b2>
 8002e08:	e009      	b.n	8002e1e <StartDeployment+0xd6>
            osDelayUntil(next_wake);
 8002e0a:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8002e0e:	f009 f925 	bl	800c05c <osDelayUntil>
            next_wake += 100;
 8002e12:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002e16:	3364      	adds	r3, #100	@ 0x64
 8002e18:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
            continue;
 8002e1c:	e27c      	b.n	8003318 <StartDeployment+0x5d0>
            grav_buf[grav_idx++] = accel_mag;
 8002e1e:	4b95      	ldr	r3, [pc, #596]	@ (8003074 <StartDeployment+0x32c>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	1c5a      	adds	r2, r3, #1
 8002e24:	4993      	ldr	r1, [pc, #588]	@ (8003074 <StartDeployment+0x32c>)
 8002e26:	600a      	str	r2, [r1, #0]
 8002e28:	4a93      	ldr	r2, [pc, #588]	@ (8003078 <StartDeployment+0x330>)
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	4413      	add	r3, r2
 8002e2e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8002e30:	601a      	str	r2, [r3, #0]
            if (grav_idx >= BASELINE_SAMPLES) grav_idx = 0;
 8002e32:	4b90      	ldr	r3, [pc, #576]	@ (8003074 <StartDeployment+0x32c>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	2b09      	cmp	r3, #9
 8002e38:	dd02      	ble.n	8002e40 <StartDeployment+0xf8>
 8002e3a:	4b8e      	ldr	r3, [pc, #568]	@ (8003074 <StartDeployment+0x32c>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	601a      	str	r2, [r3, #0]
            if (++grav_cnt >= BASELINE_SAMPLES) {
 8002e40:	4b8e      	ldr	r3, [pc, #568]	@ (800307c <StartDeployment+0x334>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	3301      	adds	r3, #1
 8002e46:	4a8d      	ldr	r2, [pc, #564]	@ (800307c <StartDeployment+0x334>)
 8002e48:	6013      	str	r3, [r2, #0]
 8002e4a:	4b8c      	ldr	r3, [pc, #560]	@ (800307c <StartDeployment+0x334>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	2b09      	cmp	r3, #9
 8002e50:	dd53      	ble.n	8002efa <StartDeployment+0x1b2>
                // compute trimmed mean
                float sum = 0, mn = grav_buf[0], mx = grav_buf[0];
 8002e52:	f04f 0300 	mov.w	r3, #0
 8002e56:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002e5a:	4b87      	ldr	r3, [pc, #540]	@ (8003078 <StartDeployment+0x330>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002e62:	4b85      	ldr	r3, [pc, #532]	@ (8003078 <StartDeployment+0x330>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
                for (int i = 0; i < BASELINE_SAMPLES; i++) {
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002e70:	e02b      	b.n	8002eca <StartDeployment+0x182>
                    float v = grav_buf[i];
 8002e72:	4a81      	ldr	r2, [pc, #516]	@ (8003078 <StartDeployment+0x330>)
 8002e74:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	4413      	add	r3, r2
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	663b      	str	r3, [r7, #96]	@ 0x60
                    sum += v;
 8002e80:	ed97 7a27 	vldr	s14, [r7, #156]	@ 0x9c
 8002e84:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8002e88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e8c:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
                    if (v < mn) mn = v;
 8002e90:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8002e94:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 8002e98:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ea0:	d502      	bpl.n	8002ea8 <StartDeployment+0x160>
 8002ea2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002ea4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
                    if (v > mx) mx = v;
 8002ea8:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8002eac:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 8002eb0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002eb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eb8:	dd02      	ble.n	8002ec0 <StartDeployment+0x178>
 8002eba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002ebc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
                for (int i = 0; i < BASELINE_SAMPLES; i++) {
 8002ec0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002ec4:	3301      	adds	r3, #1
 8002ec6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002eca:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002ece:	2b09      	cmp	r3, #9
 8002ed0:	ddcf      	ble.n	8002e72 <StartDeployment+0x12a>
                }
                grav_zero  = (sum - mn - mx) / (BASELINE_SAMPLES - 2);
 8002ed2:	ed97 7a27 	vldr	s14, [r7, #156]	@ 0x9c
 8002ed6:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 8002eda:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002ede:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 8002ee2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002ee6:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 8002eea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002eee:	4b64      	ldr	r3, [pc, #400]	@ (8003080 <StartDeployment+0x338>)
 8002ef0:	edc3 7a00 	vstr	s15, [r3]
                grav_ready = true;
 8002ef4:	4b5e      	ldr	r3, [pc, #376]	@ (8003070 <StartDeployment+0x328>)
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	701a      	strb	r2, [r3, #0]
            }
        }
        if (!alt_ready) {
 8002efa:	4b62      	ldr	r3, [pc, #392]	@ (8003084 <StartDeployment+0x33c>)
 8002efc:	781b      	ldrb	r3, [r3, #0]
 8002efe:	f083 0301 	eor.w	r3, r3, #1
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d06d      	beq.n	8002fe4 <StartDeployment+0x29c>
            alt_buf[alt_idx++] = raw_altitude;
 8002f08:	4b5f      	ldr	r3, [pc, #380]	@ (8003088 <StartDeployment+0x340>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	1c5a      	adds	r2, r3, #1
 8002f0e:	495e      	ldr	r1, [pc, #376]	@ (8003088 <StartDeployment+0x340>)
 8002f10:	600a      	str	r2, [r1, #0]
 8002f12:	4a5e      	ldr	r2, [pc, #376]	@ (800308c <StartDeployment+0x344>)
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	4413      	add	r3, r2
 8002f18:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8002f1a:	601a      	str	r2, [r3, #0]
            if (alt_idx >= BASELINE_SAMPLES) alt_idx = 0;
 8002f1c:	4b5a      	ldr	r3, [pc, #360]	@ (8003088 <StartDeployment+0x340>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	2b09      	cmp	r3, #9
 8002f22:	dd02      	ble.n	8002f2a <StartDeployment+0x1e2>
 8002f24:	4b58      	ldr	r3, [pc, #352]	@ (8003088 <StartDeployment+0x340>)
 8002f26:	2200      	movs	r2, #0
 8002f28:	601a      	str	r2, [r3, #0]
            if (++alt_cnt >= BASELINE_SAMPLES) {
 8002f2a:	4b59      	ldr	r3, [pc, #356]	@ (8003090 <StartDeployment+0x348>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	3301      	adds	r3, #1
 8002f30:	4a57      	ldr	r2, [pc, #348]	@ (8003090 <StartDeployment+0x348>)
 8002f32:	6013      	str	r3, [r2, #0]
 8002f34:	4b56      	ldr	r3, [pc, #344]	@ (8003090 <StartDeployment+0x348>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	2b09      	cmp	r3, #9
 8002f3a:	dd53      	ble.n	8002fe4 <StartDeployment+0x29c>
                float sum = 0, mn = alt_buf[0], mx = alt_buf[0];
 8002f3c:	f04f 0300 	mov.w	r3, #0
 8002f40:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002f44:	4b51      	ldr	r3, [pc, #324]	@ (800308c <StartDeployment+0x344>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002f4c:	4b4f      	ldr	r3, [pc, #316]	@ (800308c <StartDeployment+0x344>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                for (int i = 0; i < BASELINE_SAMPLES; i++) {
 8002f54:	2300      	movs	r3, #0
 8002f56:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002f5a:	e02b      	b.n	8002fb4 <StartDeployment+0x26c>
                    float v = alt_buf[i];
 8002f5c:	4a4b      	ldr	r2, [pc, #300]	@ (800308c <StartDeployment+0x344>)
 8002f5e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	4413      	add	r3, r2
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	65fb      	str	r3, [r7, #92]	@ 0x5c
                    sum += v;
 8002f6a:	ed97 7a23 	vldr	s14, [r7, #140]	@ 0x8c
 8002f6e:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8002f72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f76:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
                    if (v < mn) mn = v;
 8002f7a:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8002f7e:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8002f82:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f8a:	d502      	bpl.n	8002f92 <StartDeployment+0x24a>
 8002f8c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002f8e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
                    if (v > mx) mx = v;
 8002f92:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8002f96:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8002f9a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fa2:	dd02      	ble.n	8002faa <StartDeployment+0x262>
 8002fa4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002fa6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                for (int i = 0; i < BASELINE_SAMPLES; i++) {
 8002faa:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002fae:	3301      	adds	r3, #1
 8002fb0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002fb4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002fb8:	2b09      	cmp	r3, #9
 8002fba:	ddcf      	ble.n	8002f5c <StartDeployment+0x214>
                }
                alt_zero  = (sum - mn - mx) / (BASELINE_SAMPLES - 2);
 8002fbc:	ed97 7a23 	vldr	s14, [r7, #140]	@ 0x8c
 8002fc0:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8002fc4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002fc8:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8002fcc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002fd0:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 8002fd4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002fd8:	4b2e      	ldr	r3, [pc, #184]	@ (8003094 <StartDeployment+0x34c>)
 8002fda:	edc3 7a00 	vstr	s15, [r3]
                alt_ready = true;
 8002fde:	4b29      	ldr	r3, [pc, #164]	@ (8003084 <StartDeployment+0x33c>)
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	701a      	strb	r2, [r3, #0]
            }
        }

        // don’t proceed until both baselines are locked in
        if (!grav_ready || !alt_ready) {
 8002fe4:	4b22      	ldr	r3, [pc, #136]	@ (8003070 <StartDeployment+0x328>)
 8002fe6:	781b      	ldrb	r3, [r3, #0]
 8002fe8:	f083 0301 	eor.w	r3, r3, #1
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d106      	bne.n	8003000 <StartDeployment+0x2b8>
 8002ff2:	4b24      	ldr	r3, [pc, #144]	@ (8003084 <StartDeployment+0x33c>)
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	f083 0301 	eor.w	r3, r3, #1
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d009      	beq.n	8003014 <StartDeployment+0x2cc>
            osDelayUntil(next_wake);
 8003000:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8003004:	f009 f82a 	bl	800c05c <osDelayUntil>
            next_wake += 100;
 8003008:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800300c:	3364      	adds	r3, #100	@ 0x64
 800300e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
            continue;
 8003012:	e181      	b.n	8003318 <StartDeployment+0x5d0>
        }

        // once baselines ready, transition to Idle (first time only)
        if (phase == Startup) {
 8003014:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 8003018:	2b00      	cmp	r3, #0
 800301a:	d102      	bne.n	8003022 <StartDeployment+0x2da>
            phase = Idle;
 800301c:	2301      	movs	r3, #1
 800301e:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
        }

        // subtract baselines to get net accel & relative alt
        float net_accel = accel_mag - grav_zero;
 8003022:	4b17      	ldr	r3, [pc, #92]	@ (8003080 <StartDeployment+0x338>)
 8003024:	edd3 7a00 	vldr	s15, [r3]
 8003028:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 800302c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003030:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
        float rel_alt   = raw_altitude - alt_zero;
 8003034:	4b17      	ldr	r3, [pc, #92]	@ (8003094 <StartDeployment+0x34c>)
 8003036:	edd3 7a00 	vldr	s15, [r3]
 800303a:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 800303e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003042:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54

        channel_update();
 8003046:	f7ff fbff 	bl	8002848 <channel_update>

        // check pyro channels
        bool any_channel_firing = false;
 800304a:	2300      	movs	r3, #0
 800304c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
        for (int i = 0; i < CHANNEL_COUNT; i++) {
 8003050:	2300      	movs	r3, #0
 8003052:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003054:	e02f      	b.n	80030b6 <StartDeployment+0x36e>
 8003056:	bf00      	nop
 8003058:	200004b0 	.word	0x200004b0
 800305c:	200004e4 	.word	0x200004e4
 8003060:	200004f0 	.word	0x200004f0
 8003064:	20000568 	.word	0x20000568
 8003068:	20000564 	.word	0x20000564
 800306c:	2000056c 	.word	0x2000056c
 8003070:	200005c8 	.word	0x200005c8
 8003074:	200005cc 	.word	0x200005cc
 8003078:	200005d0 	.word	0x200005d0
 800307c:	200005f8 	.word	0x200005f8
 8003080:	200005fc 	.word	0x200005fc
 8003084:	20000600 	.word	0x20000600
 8003088:	20000604 	.word	0x20000604
 800308c:	20000608 	.word	0x20000608
 8003090:	20000630 	.word	0x20000630
 8003094:	20000634 	.word	0x20000634
            if (pyros[i].firing) { any_channel_firing = true; break; }
 8003098:	4aa0      	ldr	r2, [pc, #640]	@ (800331c <StartDeployment+0x5d4>)
 800309a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800309c:	011b      	lsls	r3, r3, #4
 800309e:	4413      	add	r3, r2
 80030a0:	330c      	adds	r3, #12
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d003      	beq.n	80030b0 <StartDeployment+0x368>
 80030a8:	2301      	movs	r3, #1
 80030aa:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80030ae:	e005      	b.n	80030bc <StartDeployment+0x374>
        for (int i = 0; i < CHANNEL_COUNT; i++) {
 80030b0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80030b2:	3301      	adds	r3, #1
 80030b4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80030b6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	dded      	ble.n	8003098 <StartDeployment+0x350>
        }

        // feed Kalman
        if (isfinite(net_accel) && isfinite(rel_alt) && !any_channel_firing) {
 80030bc:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 80030c0:	eef0 7ae7 	vabs.f32	s15, s15
 80030c4:	ed9f 7a96 	vldr	s14, [pc, #600]	@ 8003320 <StartDeployment+0x5d8>
 80030c8:	eef4 7a47 	vcmp.f32	s15, s14
 80030cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030d0:	bf8c      	ite	hi
 80030d2:	2301      	movhi	r3, #1
 80030d4:	2300      	movls	r3, #0
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	f083 0301 	eor.w	r3, r3, #1
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d020      	beq.n	8003124 <StartDeployment+0x3dc>
 80030e2:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 80030e6:	eef0 7ae7 	vabs.f32	s15, s15
 80030ea:	ed9f 7a8d 	vldr	s14, [pc, #564]	@ 8003320 <StartDeployment+0x5d8>
 80030ee:	eef4 7a47 	vcmp.f32	s15, s14
 80030f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030f6:	bf8c      	ite	hi
 80030f8:	2301      	movhi	r3, #1
 80030fa:	2300      	movls	r3, #0
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	f083 0301 	eor.w	r3, r3, #1
 8003102:	b2db      	uxtb	r3, r3
 8003104:	2b00      	cmp	r3, #0
 8003106:	d00d      	beq.n	8003124 <StartDeployment+0x3dc>
 8003108:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800310c:	f083 0301 	eor.w	r3, r3, #1
 8003110:	b2db      	uxtb	r3, r3
 8003112:	2b00      	cmp	r3, #0
 8003114:	d006      	beq.n	8003124 <StartDeployment+0x3dc>
            KalmanFilter_step(&kf, net_accel, rel_alt);
 8003116:	edd7 0a15 	vldr	s1, [r7, #84]	@ 0x54
 800311a:	ed97 0a16 	vldr	s0, [r7, #88]	@ 0x58
 800311e:	4881      	ldr	r0, [pc, #516]	@ (8003324 <StartDeployment+0x5dc>)
 8003120:	f7ff f9e6 	bl	80024f0 <KalmanFilter_step>
        }

        // flight‐phase state machine
        switch (phase) {
 8003124:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 8003128:	3b01      	subs	r3, #1
 800312a:	2b03      	cmp	r3, #3
 800312c:	f200 809d 	bhi.w	800326a <StartDeployment+0x522>
 8003130:	a201      	add	r2, pc, #4	@ (adr r2, 8003138 <StartDeployment+0x3f0>)
 8003132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003136:	bf00      	nop
 8003138:	08003149 	.word	0x08003149
 800313c:	08003183 	.word	0x08003183
 8003140:	080031a9 	.word	0x080031a9
 8003144:	080031e3 	.word	0x080031e3
            case Idle:
                if (kf.est[1] > LAUNCH_VELOCITY && kf.est[2] > LAUNCH_ACCEL) {
 8003148:	4b76      	ldr	r3, [pc, #472]	@ (8003324 <StartDeployment+0x5dc>)
 800314a:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800314e:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 8003152:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003156:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800315a:	dc00      	bgt.n	800315e <StartDeployment+0x416>
                    phase         = Launched;
//                    log_start();
                    send_now      = true;
                }
                break;
 800315c:	e088      	b.n	8003270 <StartDeployment+0x528>
                if (kf.est[1] > LAUNCH_VELOCITY && kf.est[2] > LAUNCH_ACCEL) {
 800315e:	4b71      	ldr	r3, [pc, #452]	@ (8003324 <StartDeployment+0x5dc>)
 8003160:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 8003164:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8003168:	eef4 7ac7 	vcmpe.f32	s15, s14
 800316c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003170:	dc00      	bgt.n	8003174 <StartDeployment+0x42c>
                break;
 8003172:	e07d      	b.n	8003270 <StartDeployment+0x528>
                    phase         = Launched;
 8003174:	2302      	movs	r3, #2
 8003176:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
                    send_now      = true;
 800317a:	2301      	movs	r3, #1
 800317c:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
                break;
 8003180:	e076      	b.n	8003270 <StartDeployment+0x528>
            case Launched:
                if (kf.est[1] < 0) {
 8003182:	4b68      	ldr	r3, [pc, #416]	@ (8003324 <StartDeployment+0x5dc>)
 8003184:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8003188:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800318c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003190:	d400      	bmi.n	8003194 <StartDeployment+0x44c>
                    channel_fire(SEPARATION_INDEX);
                    phase        = DescendingAfterSeparation;
                    send_now     = true;
                }
                break;
 8003192:	e06d      	b.n	8003270 <StartDeployment+0x528>
                    channel_fire(SEPARATION_INDEX);
 8003194:	2000      	movs	r0, #0
 8003196:	f7ff fb29 	bl	80027ec <channel_fire>
                    phase        = DescendingAfterSeparation;
 800319a:	2303      	movs	r3, #3
 800319c:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
                    send_now     = true;
 80031a0:	2301      	movs	r3, #1
 80031a2:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
                break;
 80031a6:	e063      	b.n	8003270 <StartDeployment+0x528>
            case DescendingAfterSeparation:
                if (kf.est[0] < REEFING_ALTITUDE &&
 80031a8:	4b5e      	ldr	r3, [pc, #376]	@ (8003324 <StartDeployment+0x5dc>)
 80031aa:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 80031ae:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 8003328 <StartDeployment+0x5e0>
 80031b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031ba:	d400      	bmi.n	80031be <StartDeployment+0x476>
                    (now - pyros[SEPARATION_INDEX].fire_time) > 3000) {
                    channel_fire(REEFING_INDEX);
                    phase    = DescendingAfterReefing;
                    send_now = true;
                }
                break;
 80031bc:	e057      	b.n	800326e <StartDeployment+0x526>
                    (now - pyros[SEPARATION_INDEX].fire_time) > 3000) {
 80031be:	4b57      	ldr	r3, [pc, #348]	@ (800331c <StartDeployment+0x5d4>)
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80031c4:	1ad3      	subs	r3, r2, r3
                if (kf.est[0] < REEFING_ALTITUDE &&
 80031c6:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d94f      	bls.n	800326e <StartDeployment+0x526>
                    channel_fire(REEFING_INDEX);
 80031ce:	2001      	movs	r0, #1
 80031d0:	f7ff fb0c 	bl	80027ec <channel_fire>
                    phase    = DescendingAfterReefing;
 80031d4:	2304      	movs	r3, #4
 80031d6:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
                    send_now = true;
 80031da:	2301      	movs	r3, #1
 80031dc:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
                break;
 80031e0:	e045      	b.n	800326e <StartDeployment+0x526>
            case DescendingAfterReefing:
                if (kf.est[0] < LANDED_ALTITUDE &&
 80031e2:	4b50      	ldr	r3, [pc, #320]	@ (8003324 <StartDeployment+0x5dc>)
 80031e4:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 80031e8:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 80031ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031f4:	d533      	bpl.n	800325e <StartDeployment+0x516>
                    fabsf(kf.est[1]) < LANDED_VELOCITY &&
 80031f6:	4b4b      	ldr	r3, [pc, #300]	@ (8003324 <StartDeployment+0x5dc>)
 80031f8:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 80031fc:	eef0 7ae7 	vabs.f32	s15, s15
                if (kf.est[0] < LANDED_ALTITUDE &&
 8003200:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8003204:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003208:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800320c:	d527      	bpl.n	800325e <StartDeployment+0x516>
                    fabsf(kf.est[2]) < LANDED_ACCEL) {
 800320e:	4b45      	ldr	r3, [pc, #276]	@ (8003324 <StartDeployment+0x5dc>)
 8003210:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 8003214:	eef0 7ae7 	vabs.f32	s15, s15
                    fabsf(kf.est[1]) < LANDED_VELOCITY &&
 8003218:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800321c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003224:	d51b      	bpl.n	800325e <StartDeployment+0x516>
                    if (land_time == 0) {
 8003226:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800322a:	2b00      	cmp	r3, #0
 800322c:	d108      	bne.n	8003240 <StartDeployment+0x4f8>
                        land_time = now ? now : 1;
 800322e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003230:	2b00      	cmp	r3, #0
 8003232:	d001      	beq.n	8003238 <StartDeployment+0x4f0>
 8003234:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003236:	e000      	b.n	800323a <StartDeployment+0x4f2>
 8003238:	2301      	movs	r3, #1
 800323a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
                    if (land_time == 0) {
 800323e:	e012      	b.n	8003266 <StartDeployment+0x51e>
                    }
                    else if ((now - land_time) >= LANDED_TIME) {
 8003240:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003242:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 800324c:	4293      	cmp	r3, r2
 800324e:	d90a      	bls.n	8003266 <StartDeployment+0x51e>
                        phase    = Landed;
 8003250:	2305      	movs	r3, #5
 8003252:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
//                        log_stop();
                        send_now = true;
 8003256:	2301      	movs	r3, #1
 8003258:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
                    if (land_time == 0) {
 800325c:	e003      	b.n	8003266 <StartDeployment+0x51e>
                    }
                } else {
                    land_time = 0;
 800325e:	2300      	movs	r3, #0
 8003260:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
                }
                break;
 8003264:	e004      	b.n	8003270 <StartDeployment+0x528>
                    if (land_time == 0) {
 8003266:	bf00      	nop
                break;
 8003268:	e002      	b.n	8003270 <StartDeployment+0x528>
            default:
                break;
 800326a:	bf00      	nop
 800326c:	e000      	b.n	8003270 <StartDeployment+0x528>
                break;
 800326e:	bf00      	nop
        }

        HAL_GPIO_TogglePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin);
 8003270:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003274:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003278:	f001 fb02 	bl	8004880 <HAL_GPIO_TogglePin>

        LogMessage data;
        data.time_ms = now;
 800327c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800327e:	60bb      	str	r3, [r7, #8]
        data.phase = phase;
 8003280:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 8003284:	733b      	strb	r3, [r7, #12]
        data.accel_x = currentAccel[0];
 8003286:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003288:	f8c7 301d 	str.w	r3, [r7, #29]
        data.accel_y = currentAccel[1];
 800328c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800328e:	f8c7 3021 	str.w	r3, [r7, #33]	@ 0x21
        data.accel_z = currentAccel[2];
 8003292:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003294:	f8c7 3025 	str.w	r3, [r7, #37]	@ 0x25
        data.gyro_x = currentGyro[0];
 8003298:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800329a:	f8c7 3029 	str.w	r3, [r7, #41]	@ 0x29
        data.gyro_y = currentGyro[1];
 800329e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032a0:	f8c7 302d 	str.w	r3, [r7, #45]	@ 0x2d
        data.gyro_z = currentGyro[2];
 80032a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80032a6:	f8c7 3031 	str.w	r3, [r7, #49]	@ 0x31
        data.altitude = raw_altitude;
 80032aa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80032ac:	f8c7 3019 	str.w	r3, [r7, #25]
        data.pressure = current_pressure;
 80032b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80032b2:	f8c7 3035 	str.w	r3, [r7, #53]	@ 0x35
        data.temp = current_temp;
 80032b6:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 80032ba:	f8a7 3039 	strh.w	r3, [r7, #57]	@ 0x39
        data.kf_pos = kf.est[0];
 80032be:	4b19      	ldr	r3, [pc, #100]	@ (8003324 <StartDeployment+0x5dc>)
 80032c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032c2:	f8c7 300d 	str.w	r3, [r7, #13]
        data.kf_vel = kf.est[1];
 80032c6:	4b17      	ldr	r3, [pc, #92]	@ (8003324 <StartDeployment+0x5dc>)
 80032c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032ca:	f8c7 3011 	str.w	r3, [r7, #17]
        data.kf_accel = kf.est[2];
 80032ce:	4b15      	ldr	r3, [pc, #84]	@ (8003324 <StartDeployment+0x5dc>)
 80032d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032d2:	f8c7 3015 	str.w	r3, [r7, #21]

        log_add(&data);
 80032d6:	f107 0308 	add.w	r3, r7, #8
 80032da:	4618      	mov	r0, r3
 80032dc:	f7ff f9d0 	bl	8002680 <log_add>

        // throttle amount of data being sent
        if (send_now) {
 80032e0:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d00b      	beq.n	8003300 <StartDeployment+0x5b8>
            osMessageQueuePut(messageQueueHandle, &data, 0, 0);
 80032e8:	4b10      	ldr	r3, [pc, #64]	@ (800332c <StartDeployment+0x5e4>)
 80032ea:	6818      	ldr	r0, [r3, #0]
 80032ec:	f107 0108 	add.w	r1, r7, #8
 80032f0:	2300      	movs	r3, #0
 80032f2:	2200      	movs	r2, #0
 80032f4:	f009 f860 	bl	800c3b8 <osMessageQueuePut>
            send_now = false;
 80032f8:	2300      	movs	r3, #0
 80032fa:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
 80032fe:	e002      	b.n	8003306 <StartDeployment+0x5be>
        } else {
            send_now = true;
 8003300:	2301      	movs	r3, #1
 8003302:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
        }

        // wait until next 100 ms tick
        osDelayUntil(next_wake);
 8003306:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 800330a:	f008 fea7 	bl	800c05c <osDelayUntil>
        next_wake += 100;
 800330e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003312:	3364      	adds	r3, #100	@ 0x64
 8003314:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
	for(;;) {
 8003318:	e52b      	b.n	8002d72 <StartDeployment+0x2a>
 800331a:	bf00      	nop
 800331c:	20000000 	.word	0x20000000
 8003320:	7f7fffff 	.word	0x7f7fffff
 8003324:	20000570 	.word	0x20000570
 8003328:	449c4000 	.word	0x449c4000
 800332c:	200004ac 	.word	0x200004ac

08003330 <StartReadSensors>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadSensors */
void StartReadSensors(void *argument)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b088      	sub	sp, #32
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReadSensors */
  /* Infinite loop */
	for(;;) {
         accel_step(&imu);
 8003338:	4828      	ldr	r0, [pc, #160]	@ (80033dc <StartReadSensors+0xac>)
 800333a:	f7fd fe35 	bl	8000fa8 <accel_step>
         gyro_step(&imu);
 800333e:	4827      	ldr	r0, [pc, #156]	@ (80033dc <StartReadSensors+0xac>)
 8003340:	f7fd fe9e 	bl	8001080 <gyro_step>
		 baro_step(&baro);
 8003344:	4826      	ldr	r0, [pc, #152]	@ (80033e0 <StartReadSensors+0xb0>)
 8003346:	f7fe fc2b 	bl	8001ba0 <baro_step>

		 float *accel = accel_get(&imu);
 800334a:	4824      	ldr	r0, [pc, #144]	@ (80033dc <StartReadSensors+0xac>)
 800334c:	f7fd ff08 	bl	8001160 <accel_get>
 8003350:	61f8      	str	r0, [r7, #28]
		 float *gyro = gyro_get(&imu);
 8003352:	4822      	ldr	r0, [pc, #136]	@ (80033dc <StartReadSensors+0xac>)
 8003354:	f7fd ff10 	bl	8001178 <gyro_get>
 8003358:	61b8      	str	r0, [r7, #24]
		 float local_pressure = baro_get_pressure(&baro);
 800335a:	4821      	ldr	r0, [pc, #132]	@ (80033e0 <StartReadSensors+0xb0>)
 800335c:	f7fe fcd6 	bl	8001d0c <baro_get_pressure>
 8003360:	ed87 0a05 	vstr	s0, [r7, #20]
		 float local_altitude = baro_get_altitude(&baro);
 8003364:	481e      	ldr	r0, [pc, #120]	@ (80033e0 <StartReadSensors+0xb0>)
 8003366:	f7fe fcb5 	bl	8001cd4 <baro_get_altitude>
 800336a:	ed87 0a04 	vstr	s0, [r7, #16]
		 int16_t local_temp = baro_get_temp(&baro);
 800336e:	481c      	ldr	r0, [pc, #112]	@ (80033e0 <StartReadSensors+0xb0>)
 8003370:	f7fe fcbf 	bl	8001cf2 <baro_get_temp>
 8003374:	4603      	mov	r3, r0
 8003376:	81fb      	strh	r3, [r7, #14]

		 osMutexAcquire(sensorDataHandle, osWaitForever);
 8003378:	4b1a      	ldr	r3, [pc, #104]	@ (80033e4 <StartReadSensors+0xb4>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003380:	4618      	mov	r0, r3
 8003382:	f008 ff1e 	bl	800c1c2 <osMutexAcquire>

		 accelData[0] = accel[0];
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a17      	ldr	r2, [pc, #92]	@ (80033e8 <StartReadSensors+0xb8>)
 800338c:	6013      	str	r3, [r2, #0]
		 accelData[1] = accel[1];
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	4a15      	ldr	r2, [pc, #84]	@ (80033e8 <StartReadSensors+0xb8>)
 8003394:	6053      	str	r3, [r2, #4]
		 accelData[2] = accel[2];
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	4a13      	ldr	r2, [pc, #76]	@ (80033e8 <StartReadSensors+0xb8>)
 800339c:	6093      	str	r3, [r2, #8]

		 gyroData[0] = gyro[0];
 800339e:	69bb      	ldr	r3, [r7, #24]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a12      	ldr	r2, [pc, #72]	@ (80033ec <StartReadSensors+0xbc>)
 80033a4:	6013      	str	r3, [r2, #0]
		 gyroData[1] = gyro[1];
 80033a6:	69bb      	ldr	r3, [r7, #24]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	4a10      	ldr	r2, [pc, #64]	@ (80033ec <StartReadSensors+0xbc>)
 80033ac:	6053      	str	r3, [r2, #4]
		 gyroData[2] = gyro[2];
 80033ae:	69bb      	ldr	r3, [r7, #24]
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	4a0e      	ldr	r2, [pc, #56]	@ (80033ec <StartReadSensors+0xbc>)
 80033b4:	6093      	str	r3, [r2, #8]

		 pressure = local_pressure;
 80033b6:	4a0e      	ldr	r2, [pc, #56]	@ (80033f0 <StartReadSensors+0xc0>)
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	6013      	str	r3, [r2, #0]
		 baro_altitude = local_altitude;
 80033bc:	4a0d      	ldr	r2, [pc, #52]	@ (80033f4 <StartReadSensors+0xc4>)
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	6013      	str	r3, [r2, #0]
		 temp = local_temp;
 80033c2:	4a0d      	ldr	r2, [pc, #52]	@ (80033f8 <StartReadSensors+0xc8>)
 80033c4:	89fb      	ldrh	r3, [r7, #14]
 80033c6:	8013      	strh	r3, [r2, #0]

		 osMutexRelease(sensorDataHandle);
 80033c8:	4b06      	ldr	r3, [pc, #24]	@ (80033e4 <StartReadSensors+0xb4>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4618      	mov	r0, r3
 80033ce:	f008 ff43 	bl	800c258 <osMutexRelease>

		 osDelay(100);
 80033d2:	2064      	movs	r0, #100	@ 0x64
 80033d4:	f008 fe27 	bl	800c026 <osDelay>
	for(;;) {
 80033d8:	bf00      	nop
 80033da:	e7ad      	b.n	8003338 <StartReadSensors+0x8>
 80033dc:	200004b4 	.word	0x200004b4
 80033e0:	200004fc 	.word	0x200004fc
 80033e4:	200004b0 	.word	0x200004b0
 80033e8:	200004e4 	.word	0x200004e4
 80033ec:	200004f0 	.word	0x200004f0
 80033f0:	20000564 	.word	0x20000564
 80033f4:	20000568 	.word	0x20000568
 80033f8:	2000056c 	.word	0x2000056c

080033fc <StartLog>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLog */
void StartLog(void *argument)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b082      	sub	sp, #8
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLog */
  /* Infinite loop */
  for(;;)
  {
    log_step();
 8003404:	f7ff f95e 	bl	80026c4 <log_step>
    osDelay(500);
 8003408:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800340c:	f008 fe0b 	bl	800c026 <osDelay>
    log_step();
 8003410:	bf00      	nop
 8003412:	e7f7      	b.n	8003404 <StartLog+0x8>

08003414 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b082      	sub	sp, #8
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a04      	ldr	r2, [pc, #16]	@ (8003434 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d101      	bne.n	800342a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003426:	f000 fcf5 	bl	8003e14 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800342a:	bf00      	nop
 800342c:	3708      	adds	r7, #8
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	40012c00 	.word	0x40012c00

08003438 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003438:	b480      	push	{r7}
 800343a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800343c:	b672      	cpsid	i
}
 800343e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003440:	bf00      	nop
 8003442:	e7fd      	b.n	8003440 <Error_Handler+0x8>

08003444 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b082      	sub	sp, #8
 8003448:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800344a:	4b12      	ldr	r3, [pc, #72]	@ (8003494 <HAL_MspInit+0x50>)
 800344c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800344e:	4a11      	ldr	r2, [pc, #68]	@ (8003494 <HAL_MspInit+0x50>)
 8003450:	f043 0301 	orr.w	r3, r3, #1
 8003454:	6613      	str	r3, [r2, #96]	@ 0x60
 8003456:	4b0f      	ldr	r3, [pc, #60]	@ (8003494 <HAL_MspInit+0x50>)
 8003458:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800345a:	f003 0301 	and.w	r3, r3, #1
 800345e:	607b      	str	r3, [r7, #4]
 8003460:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003462:	4b0c      	ldr	r3, [pc, #48]	@ (8003494 <HAL_MspInit+0x50>)
 8003464:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003466:	4a0b      	ldr	r2, [pc, #44]	@ (8003494 <HAL_MspInit+0x50>)
 8003468:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800346c:	6593      	str	r3, [r2, #88]	@ 0x58
 800346e:	4b09      	ldr	r3, [pc, #36]	@ (8003494 <HAL_MspInit+0x50>)
 8003470:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003472:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003476:	603b      	str	r3, [r7, #0]
 8003478:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800347a:	2200      	movs	r2, #0
 800347c:	210f      	movs	r1, #15
 800347e:	f06f 0001 	mvn.w	r0, #1
 8003482:	f000 fdbf 	bl	8004004 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8003486:	f002 ffbb 	bl	8006400 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800348a:	bf00      	nop
 800348c:	3708      	adds	r7, #8
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	40021000 	.word	0x40021000

08003498 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b09e      	sub	sp, #120	@ 0x78
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034a0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80034a4:	2200      	movs	r2, #0
 80034a6:	601a      	str	r2, [r3, #0]
 80034a8:	605a      	str	r2, [r3, #4]
 80034aa:	609a      	str	r2, [r3, #8]
 80034ac:	60da      	str	r2, [r3, #12]
 80034ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80034b0:	f107 0314 	add.w	r3, r7, #20
 80034b4:	2250      	movs	r2, #80	@ 0x50
 80034b6:	2100      	movs	r1, #0
 80034b8:	4618      	mov	r0, r3
 80034ba:	f00d fb93 	bl	8010be4 <memset>
  if(hfdcan->Instance==FDCAN2)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a1f      	ldr	r2, [pc, #124]	@ (8003540 <HAL_FDCAN_MspInit+0xa8>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d137      	bne.n	8003538 <HAL_FDCAN_MspInit+0xa0>

  /* USER CODE END FDCAN2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80034c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80034cc:	617b      	str	r3, [r7, #20]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80034ce:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80034d2:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80034d4:	f107 0314 	add.w	r3, r7, #20
 80034d8:	4618      	mov	r0, r3
 80034da:	f003 fceb 	bl	8006eb4 <HAL_RCCEx_PeriphCLKConfig>
 80034de:	4603      	mov	r3, r0
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d001      	beq.n	80034e8 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80034e4:	f7ff ffa8 	bl	8003438 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80034e8:	4b16      	ldr	r3, [pc, #88]	@ (8003544 <HAL_FDCAN_MspInit+0xac>)
 80034ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034ec:	4a15      	ldr	r2, [pc, #84]	@ (8003544 <HAL_FDCAN_MspInit+0xac>)
 80034ee:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80034f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80034f4:	4b13      	ldr	r3, [pc, #76]	@ (8003544 <HAL_FDCAN_MspInit+0xac>)
 80034f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034fc:	613b      	str	r3, [r7, #16]
 80034fe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003500:	4b10      	ldr	r3, [pc, #64]	@ (8003544 <HAL_FDCAN_MspInit+0xac>)
 8003502:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003504:	4a0f      	ldr	r2, [pc, #60]	@ (8003544 <HAL_FDCAN_MspInit+0xac>)
 8003506:	f043 0302 	orr.w	r3, r3, #2
 800350a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800350c:	4b0d      	ldr	r3, [pc, #52]	@ (8003544 <HAL_FDCAN_MspInit+0xac>)
 800350e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003510:	f003 0302 	and.w	r3, r3, #2
 8003514:	60fb      	str	r3, [r7, #12]
 8003516:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN2 GPIO Configuration
    PB5     ------> FDCAN2_RX
    PB6     ------> FDCAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8003518:	2360      	movs	r3, #96	@ 0x60
 800351a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800351c:	2302      	movs	r3, #2
 800351e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003520:	2300      	movs	r3, #0
 8003522:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003524:	2300      	movs	r3, #0
 8003526:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8003528:	2309      	movs	r3, #9
 800352a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800352c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003530:	4619      	mov	r1, r3
 8003532:	4805      	ldr	r0, [pc, #20]	@ (8003548 <HAL_FDCAN_MspInit+0xb0>)
 8003534:	f001 f80a 	bl	800454c <HAL_GPIO_Init>

  /* USER CODE END FDCAN2_MspInit 1 */

  }

}
 8003538:	bf00      	nop
 800353a:	3778      	adds	r7, #120	@ 0x78
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}
 8003540:	40006800 	.word	0x40006800
 8003544:	40021000 	.word	0x40021000
 8003548:	48000400 	.word	0x48000400

0800354c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b08a      	sub	sp, #40	@ 0x28
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003554:	f107 0314 	add.w	r3, r7, #20
 8003558:	2200      	movs	r2, #0
 800355a:	601a      	str	r2, [r3, #0]
 800355c:	605a      	str	r2, [r3, #4]
 800355e:	609a      	str	r2, [r3, #8]
 8003560:	60da      	str	r2, [r3, #12]
 8003562:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a17      	ldr	r2, [pc, #92]	@ (80035c8 <HAL_SPI_MspInit+0x7c>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d128      	bne.n	80035c0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800356e:	4b17      	ldr	r3, [pc, #92]	@ (80035cc <HAL_SPI_MspInit+0x80>)
 8003570:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003572:	4a16      	ldr	r2, [pc, #88]	@ (80035cc <HAL_SPI_MspInit+0x80>)
 8003574:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003578:	6613      	str	r3, [r2, #96]	@ 0x60
 800357a:	4b14      	ldr	r3, [pc, #80]	@ (80035cc <HAL_SPI_MspInit+0x80>)
 800357c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800357e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003582:	613b      	str	r3, [r7, #16]
 8003584:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003586:	4b11      	ldr	r3, [pc, #68]	@ (80035cc <HAL_SPI_MspInit+0x80>)
 8003588:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800358a:	4a10      	ldr	r2, [pc, #64]	@ (80035cc <HAL_SPI_MspInit+0x80>)
 800358c:	f043 0301 	orr.w	r3, r3, #1
 8003590:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003592:	4b0e      	ldr	r3, [pc, #56]	@ (80035cc <HAL_SPI_MspInit+0x80>)
 8003594:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003596:	f003 0301 	and.w	r3, r3, #1
 800359a:	60fb      	str	r3, [r7, #12]
 800359c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800359e:	23e0      	movs	r3, #224	@ 0xe0
 80035a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035a2:	2302      	movs	r3, #2
 80035a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035a6:	2300      	movs	r3, #0
 80035a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035aa:	2300      	movs	r3, #0
 80035ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80035ae:	2305      	movs	r3, #5
 80035b0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035b2:	f107 0314 	add.w	r3, r7, #20
 80035b6:	4619      	mov	r1, r3
 80035b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80035bc:	f000 ffc6 	bl	800454c <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80035c0:	bf00      	nop
 80035c2:	3728      	adds	r7, #40	@ 0x28
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}
 80035c8:	40013000 	.word	0x40013000
 80035cc:	40021000 	.word	0x40021000

080035d0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b08c      	sub	sp, #48	@ 0x30
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80035d8:	2300      	movs	r3, #0
 80035da:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 80035dc:	2300      	movs	r3, #0
 80035de:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80035e0:	4b2c      	ldr	r3, [pc, #176]	@ (8003694 <HAL_InitTick+0xc4>)
 80035e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035e4:	4a2b      	ldr	r2, [pc, #172]	@ (8003694 <HAL_InitTick+0xc4>)
 80035e6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80035ea:	6613      	str	r3, [r2, #96]	@ 0x60
 80035ec:	4b29      	ldr	r3, [pc, #164]	@ (8003694 <HAL_InitTick+0xc4>)
 80035ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80035f4:	60bb      	str	r3, [r7, #8]
 80035f6:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80035f8:	f107 020c 	add.w	r2, r7, #12
 80035fc:	f107 0310 	add.w	r3, r7, #16
 8003600:	4611      	mov	r1, r2
 8003602:	4618      	mov	r0, r3
 8003604:	f003 fbde 	bl	8006dc4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8003608:	f003 fbc6 	bl	8006d98 <HAL_RCC_GetPCLK2Freq>
 800360c:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800360e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003610:	4a21      	ldr	r2, [pc, #132]	@ (8003698 <HAL_InitTick+0xc8>)
 8003612:	fba2 2303 	umull	r2, r3, r2, r3
 8003616:	0c9b      	lsrs	r3, r3, #18
 8003618:	3b01      	subs	r3, #1
 800361a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800361c:	4b1f      	ldr	r3, [pc, #124]	@ (800369c <HAL_InitTick+0xcc>)
 800361e:	4a20      	ldr	r2, [pc, #128]	@ (80036a0 <HAL_InitTick+0xd0>)
 8003620:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8003622:	4b1e      	ldr	r3, [pc, #120]	@ (800369c <HAL_InitTick+0xcc>)
 8003624:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003628:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800362a:	4a1c      	ldr	r2, [pc, #112]	@ (800369c <HAL_InitTick+0xcc>)
 800362c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800362e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8003630:	4b1a      	ldr	r3, [pc, #104]	@ (800369c <HAL_InitTick+0xcc>)
 8003632:	2200      	movs	r2, #0
 8003634:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003636:	4b19      	ldr	r3, [pc, #100]	@ (800369c <HAL_InitTick+0xcc>)
 8003638:	2200      	movs	r2, #0
 800363a:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 800363c:	4817      	ldr	r0, [pc, #92]	@ (800369c <HAL_InitTick+0xcc>)
 800363e:	f004 fda9 	bl	8008194 <HAL_TIM_Base_Init>
 8003642:	4603      	mov	r3, r0
 8003644:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8003648:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800364c:	2b00      	cmp	r3, #0
 800364e:	d11b      	bne.n	8003688 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8003650:	4812      	ldr	r0, [pc, #72]	@ (800369c <HAL_InitTick+0xcc>)
 8003652:	f004 fe01 	bl	8008258 <HAL_TIM_Base_Start_IT>
 8003656:	4603      	mov	r3, r0
 8003658:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800365c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003660:	2b00      	cmp	r3, #0
 8003662:	d111      	bne.n	8003688 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003664:	2019      	movs	r0, #25
 8003666:	f000 fce7 	bl	8004038 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2b0f      	cmp	r3, #15
 800366e:	d808      	bhi.n	8003682 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8003670:	2200      	movs	r2, #0
 8003672:	6879      	ldr	r1, [r7, #4]
 8003674:	2019      	movs	r0, #25
 8003676:	f000 fcc5 	bl	8004004 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800367a:	4a0a      	ldr	r2, [pc, #40]	@ (80036a4 <HAL_InitTick+0xd4>)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6013      	str	r3, [r2, #0]
 8003680:	e002      	b.n	8003688 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8003688:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800368c:	4618      	mov	r0, r3
 800368e:	3730      	adds	r7, #48	@ 0x30
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}
 8003694:	40021000 	.word	0x40021000
 8003698:	431bde83 	.word	0x431bde83
 800369c:	20000638 	.word	0x20000638
 80036a0:	40012c00 	.word	0x40012c00
 80036a4:	20000024 	.word	0x20000024

080036a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80036a8:	b480      	push	{r7}
 80036aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80036ac:	bf00      	nop
 80036ae:	e7fd      	b.n	80036ac <NMI_Handler+0x4>

080036b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80036b0:	b480      	push	{r7}
 80036b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80036b4:	bf00      	nop
 80036b6:	e7fd      	b.n	80036b4 <HardFault_Handler+0x4>

080036b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80036b8:	b480      	push	{r7}
 80036ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80036bc:	bf00      	nop
 80036be:	e7fd      	b.n	80036bc <MemManage_Handler+0x4>

080036c0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80036c0:	b480      	push	{r7}
 80036c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80036c4:	bf00      	nop
 80036c6:	e7fd      	b.n	80036c4 <BusFault_Handler+0x4>

080036c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80036c8:	b480      	push	{r7}
 80036ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80036cc:	bf00      	nop
 80036ce:	e7fd      	b.n	80036cc <UsageFault_Handler+0x4>

080036d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80036d0:	b480      	push	{r7}
 80036d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80036d4:	bf00      	nop
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr
	...

080036e0 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80036e4:	4802      	ldr	r0, [pc, #8]	@ (80036f0 <USB_LP_IRQHandler+0x10>)
 80036e6:	f001 f9d5 	bl	8004a94 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80036ea:	bf00      	nop
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	20012348 	.word	0x20012348

080036f4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80036f8:	4802      	ldr	r0, [pc, #8]	@ (8003704 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80036fa:	f004 fe1d 	bl	8008338 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80036fe:	bf00      	nop
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	20000638 	.word	0x20000638

08003708 <_getpid>:
 8003708:	b480      	push	{r7}
 800370a:	af00      	add	r7, sp, #0
 800370c:	2301      	movs	r3, #1
 800370e:	4618      	mov	r0, r3
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr

08003718 <_kill>:
 8003718:	b580      	push	{r7, lr}
 800371a:	b082      	sub	sp, #8
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	6039      	str	r1, [r7, #0]
 8003722:	f00d fac1 	bl	8010ca8 <__errno>
 8003726:	4603      	mov	r3, r0
 8003728:	2216      	movs	r2, #22
 800372a:	601a      	str	r2, [r3, #0]
 800372c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003730:	4618      	mov	r0, r3
 8003732:	3708      	adds	r7, #8
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}

08003738 <_exit>:
 8003738:	b580      	push	{r7, lr}
 800373a:	b082      	sub	sp, #8
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	f7ff ffe7 	bl	8003718 <_kill>
 800374a:	bf00      	nop
 800374c:	e7fd      	b.n	800374a <_exit+0x12>

0800374e <_read>:
 800374e:	b580      	push	{r7, lr}
 8003750:	b086      	sub	sp, #24
 8003752:	af00      	add	r7, sp, #0
 8003754:	60f8      	str	r0, [r7, #12]
 8003756:	60b9      	str	r1, [r7, #8]
 8003758:	607a      	str	r2, [r7, #4]
 800375a:	2300      	movs	r3, #0
 800375c:	617b      	str	r3, [r7, #20]
 800375e:	e00a      	b.n	8003776 <_read+0x28>
 8003760:	f3af 8000 	nop.w
 8003764:	4601      	mov	r1, r0
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	1c5a      	adds	r2, r3, #1
 800376a:	60ba      	str	r2, [r7, #8]
 800376c:	b2ca      	uxtb	r2, r1
 800376e:	701a      	strb	r2, [r3, #0]
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	3301      	adds	r3, #1
 8003774:	617b      	str	r3, [r7, #20]
 8003776:	697a      	ldr	r2, [r7, #20]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	429a      	cmp	r2, r3
 800377c:	dbf0      	blt.n	8003760 <_read+0x12>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4618      	mov	r0, r3
 8003782:	3718      	adds	r7, #24
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}

08003788 <_write>:
 8003788:	b580      	push	{r7, lr}
 800378a:	b086      	sub	sp, #24
 800378c:	af00      	add	r7, sp, #0
 800378e:	60f8      	str	r0, [r7, #12]
 8003790:	60b9      	str	r1, [r7, #8]
 8003792:	607a      	str	r2, [r7, #4]
 8003794:	2300      	movs	r3, #0
 8003796:	617b      	str	r3, [r7, #20]
 8003798:	e009      	b.n	80037ae <_write+0x26>
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	1c5a      	adds	r2, r3, #1
 800379e:	60ba      	str	r2, [r7, #8]
 80037a0:	781b      	ldrb	r3, [r3, #0]
 80037a2:	4618      	mov	r0, r3
 80037a4:	f3af 8000 	nop.w
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	3301      	adds	r3, #1
 80037ac:	617b      	str	r3, [r7, #20]
 80037ae:	697a      	ldr	r2, [r7, #20]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	429a      	cmp	r2, r3
 80037b4:	dbf1      	blt.n	800379a <_write+0x12>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4618      	mov	r0, r3
 80037ba:	3718      	adds	r7, #24
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}

080037c0 <_close>:
 80037c0:	b480      	push	{r7}
 80037c2:	b083      	sub	sp, #12
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80037cc:	4618      	mov	r0, r3
 80037ce:	370c      	adds	r7, #12
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr

080037d8 <_fstat>:
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	6039      	str	r1, [r7, #0]
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80037e8:	605a      	str	r2, [r3, #4]
 80037ea:	2300      	movs	r3, #0
 80037ec:	4618      	mov	r0, r3
 80037ee:	370c      	adds	r7, #12
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr

080037f8 <_isatty>:
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	2301      	movs	r3, #1
 8003802:	4618      	mov	r0, r3
 8003804:	370c      	adds	r7, #12
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr

0800380e <_lseek>:
 800380e:	b480      	push	{r7}
 8003810:	b085      	sub	sp, #20
 8003812:	af00      	add	r7, sp, #0
 8003814:	60f8      	str	r0, [r7, #12]
 8003816:	60b9      	str	r1, [r7, #8]
 8003818:	607a      	str	r2, [r7, #4]
 800381a:	2300      	movs	r3, #0
 800381c:	4618      	mov	r0, r3
 800381e:	3714      	adds	r7, #20
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr

08003828 <_sbrk>:
 8003828:	b580      	push	{r7, lr}
 800382a:	b086      	sub	sp, #24
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	4a14      	ldr	r2, [pc, #80]	@ (8003884 <_sbrk+0x5c>)
 8003832:	4b15      	ldr	r3, [pc, #84]	@ (8003888 <_sbrk+0x60>)
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	617b      	str	r3, [r7, #20]
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	613b      	str	r3, [r7, #16]
 800383c:	4b13      	ldr	r3, [pc, #76]	@ (800388c <_sbrk+0x64>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d102      	bne.n	800384a <_sbrk+0x22>
 8003844:	4b11      	ldr	r3, [pc, #68]	@ (800388c <_sbrk+0x64>)
 8003846:	4a12      	ldr	r2, [pc, #72]	@ (8003890 <_sbrk+0x68>)
 8003848:	601a      	str	r2, [r3, #0]
 800384a:	4b10      	ldr	r3, [pc, #64]	@ (800388c <_sbrk+0x64>)
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4413      	add	r3, r2
 8003852:	693a      	ldr	r2, [r7, #16]
 8003854:	429a      	cmp	r2, r3
 8003856:	d207      	bcs.n	8003868 <_sbrk+0x40>
 8003858:	f00d fa26 	bl	8010ca8 <__errno>
 800385c:	4603      	mov	r3, r0
 800385e:	220c      	movs	r2, #12
 8003860:	601a      	str	r2, [r3, #0]
 8003862:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003866:	e009      	b.n	800387c <_sbrk+0x54>
 8003868:	4b08      	ldr	r3, [pc, #32]	@ (800388c <_sbrk+0x64>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	60fb      	str	r3, [r7, #12]
 800386e:	4b07      	ldr	r3, [pc, #28]	@ (800388c <_sbrk+0x64>)
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	4413      	add	r3, r2
 8003876:	4a05      	ldr	r2, [pc, #20]	@ (800388c <_sbrk+0x64>)
 8003878:	6013      	str	r3, [r2, #0]
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	4618      	mov	r0, r3
 800387e:	3718      	adds	r7, #24
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}
 8003884:	2001c000 	.word	0x2001c000
 8003888:	00000400 	.word	0x00000400
 800388c:	20000684 	.word	0x20000684
 8003890:	20012990 	.word	0x20012990

08003894 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003894:	b480      	push	{r7}
 8003896:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003898:	4b06      	ldr	r3, [pc, #24]	@ (80038b4 <SystemInit+0x20>)
 800389a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800389e:	4a05      	ldr	r2, [pc, #20]	@ (80038b4 <SystemInit+0x20>)
 80038a0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80038a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80038a8:	bf00      	nop
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr
 80038b2:	bf00      	nop
 80038b4:	e000ed00 	.word	0xe000ed00

080038b8 <matrix_multiply>:
 80038b8:	b480      	push	{r7}
 80038ba:	b089      	sub	sp, #36	@ 0x24
 80038bc:	af00      	add	r7, sp, #0
 80038be:	60f8      	str	r0, [r7, #12]
 80038c0:	60b9      	str	r1, [r7, #8]
 80038c2:	607a      	str	r2, [r7, #4]
 80038c4:	603b      	str	r3, [r7, #0]
 80038c6:	2300      	movs	r3, #0
 80038c8:	61fb      	str	r3, [r7, #28]
 80038ca:	e052      	b.n	8003972 <matrix_multiply+0xba>
 80038cc:	2300      	movs	r3, #0
 80038ce:	61bb      	str	r3, [r7, #24]
 80038d0:	e048      	b.n	8003964 <matrix_multiply+0xac>
 80038d2:	69fb      	ldr	r3, [r7, #28]
 80038d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80038d6:	fb03 f202 	mul.w	r2, r3, r2
 80038da:	69bb      	ldr	r3, [r7, #24]
 80038dc:	4413      	add	r3, r2
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	4413      	add	r3, r2
 80038e4:	f04f 0200 	mov.w	r2, #0
 80038e8:	601a      	str	r2, [r3, #0]
 80038ea:	2300      	movs	r3, #0
 80038ec:	617b      	str	r3, [r7, #20]
 80038ee:	e032      	b.n	8003956 <matrix_multiply+0x9e>
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80038f4:	fb03 f202 	mul.w	r2, r3, r2
 80038f8:	69bb      	ldr	r3, [r7, #24]
 80038fa:	4413      	add	r3, r2
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	4413      	add	r3, r2
 8003902:	ed93 7a00 	vldr	s14, [r3]
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800390a:	fb03 f202 	mul.w	r2, r3, r2
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	4413      	add	r3, r2
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	68fa      	ldr	r2, [r7, #12]
 8003916:	4413      	add	r3, r2
 8003918:	edd3 6a00 	vldr	s13, [r3]
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003920:	fb03 f202 	mul.w	r2, r3, r2
 8003924:	69bb      	ldr	r3, [r7, #24]
 8003926:	4413      	add	r3, r2
 8003928:	009b      	lsls	r3, r3, #2
 800392a:	68ba      	ldr	r2, [r7, #8]
 800392c:	4413      	add	r3, r2
 800392e:	edd3 7a00 	vldr	s15, [r3]
 8003932:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800393a:	fb03 f202 	mul.w	r2, r3, r2
 800393e:	69bb      	ldr	r3, [r7, #24]
 8003940:	4413      	add	r3, r2
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	4413      	add	r3, r2
 8003948:	ee77 7a27 	vadd.f32	s15, s14, s15
 800394c:	edc3 7a00 	vstr	s15, [r3]
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	3301      	adds	r3, #1
 8003954:	617b      	str	r3, [r7, #20]
 8003956:	697a      	ldr	r2, [r7, #20]
 8003958:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800395a:	429a      	cmp	r2, r3
 800395c:	d3c8      	bcc.n	80038f0 <matrix_multiply+0x38>
 800395e:	69bb      	ldr	r3, [r7, #24]
 8003960:	3301      	adds	r3, #1
 8003962:	61bb      	str	r3, [r7, #24]
 8003964:	69ba      	ldr	r2, [r7, #24]
 8003966:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003968:	429a      	cmp	r2, r3
 800396a:	d3b2      	bcc.n	80038d2 <matrix_multiply+0x1a>
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	3301      	adds	r3, #1
 8003970:	61fb      	str	r3, [r7, #28]
 8003972:	69fa      	ldr	r2, [r7, #28]
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	429a      	cmp	r2, r3
 8003978:	d3a8      	bcc.n	80038cc <matrix_multiply+0x14>
 800397a:	bf00      	nop
 800397c:	bf00      	nop
 800397e:	3724      	adds	r7, #36	@ 0x24
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr

08003988 <matrix_transpose>:
 8003988:	b480      	push	{r7}
 800398a:	b087      	sub	sp, #28
 800398c:	af00      	add	r7, sp, #0
 800398e:	60f8      	str	r0, [r7, #12]
 8003990:	60b9      	str	r1, [r7, #8]
 8003992:	607a      	str	r2, [r7, #4]
 8003994:	603b      	str	r3, [r7, #0]
 8003996:	2300      	movs	r3, #0
 8003998:	617b      	str	r3, [r7, #20]
 800399a:	e020      	b.n	80039de <matrix_transpose+0x56>
 800399c:	2300      	movs	r3, #0
 800399e:	613b      	str	r3, [r7, #16]
 80039a0:	e016      	b.n	80039d0 <matrix_transpose+0x48>
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	683a      	ldr	r2, [r7, #0]
 80039a6:	fb03 f202 	mul.w	r2, r3, r2
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	4413      	add	r3, r2
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	68fa      	ldr	r2, [r7, #12]
 80039b2:	441a      	add	r2, r3
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	6879      	ldr	r1, [r7, #4]
 80039b8:	fb03 f101 	mul.w	r1, r3, r1
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	440b      	add	r3, r1
 80039c0:	009b      	lsls	r3, r3, #2
 80039c2:	68b9      	ldr	r1, [r7, #8]
 80039c4:	440b      	add	r3, r1
 80039c6:	6812      	ldr	r2, [r2, #0]
 80039c8:	601a      	str	r2, [r3, #0]
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	3301      	adds	r3, #1
 80039ce:	613b      	str	r3, [r7, #16]
 80039d0:	693a      	ldr	r2, [r7, #16]
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d3e4      	bcc.n	80039a2 <matrix_transpose+0x1a>
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	3301      	adds	r3, #1
 80039dc:	617b      	str	r3, [r7, #20]
 80039de:	697a      	ldr	r2, [r7, #20]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d3da      	bcc.n	800399c <matrix_transpose+0x14>
 80039e6:	bf00      	nop
 80039e8:	bf00      	nop
 80039ea:	371c      	adds	r7, #28
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr

080039f4 <matrix_norm_sq>:
 80039f4:	b480      	push	{r7}
 80039f6:	b087      	sub	sp, #28
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	60f8      	str	r0, [r7, #12]
 80039fc:	60b9      	str	r1, [r7, #8]
 80039fe:	607a      	str	r2, [r7, #4]
 8003a00:	f04f 0300 	mov.w	r3, #0
 8003a04:	617b      	str	r3, [r7, #20]
 8003a06:	2300      	movs	r3, #0
 8003a08:	613b      	str	r3, [r7, #16]
 8003a0a:	e016      	b.n	8003a3a <matrix_norm_sq+0x46>
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	68fa      	ldr	r2, [r7, #12]
 8003a12:	4413      	add	r3, r2
 8003a14:	ed93 7a00 	vldr	s14, [r3]
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	68fa      	ldr	r2, [r7, #12]
 8003a1e:	4413      	add	r3, r2
 8003a20:	edd3 7a00 	vldr	s15, [r3]
 8003a24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a28:	ed97 7a05 	vldr	s14, [r7, #20]
 8003a2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a30:	edc7 7a05 	vstr	s15, [r7, #20]
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	3301      	adds	r3, #1
 8003a38:	613b      	str	r3, [r7, #16]
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	687a      	ldr	r2, [r7, #4]
 8003a3e:	fb02 f303 	mul.w	r3, r2, r3
 8003a42:	693a      	ldr	r2, [r7, #16]
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d3e1      	bcc.n	8003a0c <matrix_norm_sq+0x18>
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	ee07 3a90 	vmov	s15, r3
 8003a4e:	eeb0 0a67 	vmov.f32	s0, s15
 8003a52:	371c      	adds	r7, #28
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr

08003a5c <wrapping_add>:
 8003a5c:	b480      	push	{r7}
 8003a5e:	b085      	sub	sp, #20
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	60f8      	str	r0, [r7, #12]
 8003a64:	60b9      	str	r1, [r7, #8]
 8003a66:	607a      	str	r2, [r7, #4]
 8003a68:	68fa      	ldr	r2, [r7, #12]
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	4413      	add	r3, r2
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	fbb3 f2f2 	udiv	r2, r3, r2
 8003a74:	6879      	ldr	r1, [r7, #4]
 8003a76:	fb01 f202 	mul.w	r2, r1, r2
 8003a7a:	1a9b      	subs	r3, r3, r2
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3714      	adds	r7, #20
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr

08003a88 <ring_buffer_push>:
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b084      	sub	sp, #16
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	60f8      	str	r0, [r7, #12]
 8003a90:	60b9      	str	r1, [r7, #8]
 8003a92:	4613      	mov	r3, r2
 8003a94:	71fb      	strb	r3, [r7, #7]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	689a      	ldr	r2, [r3, #8]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d107      	bne.n	8003ab2 <ring_buffer_push+0x2a>
 8003aa2:	79fb      	ldrb	r3, [r7, #7]
 8003aa4:	f083 0301 	eor.w	r3, r3, #1
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d001      	beq.n	8003ab2 <ring_buffer_push+0x2a>
 8003aae:	2300      	movs	r3, #0
 8003ab0:	e032      	b.n	8003b18 <ring_buffer_push+0x90>
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	695a      	ldr	r2, [r3, #20]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	68f9      	ldr	r1, [r7, #12]
 8003abc:	6909      	ldr	r1, [r1, #16]
 8003abe:	fb01 f303 	mul.w	r3, r1, r3
 8003ac2:	18d0      	adds	r0, r2, r3
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	691b      	ldr	r3, [r3, #16]
 8003ac8:	461a      	mov	r2, r3
 8003aca:	68b9      	ldr	r1, [r7, #8]
 8003acc:	f00d f919 	bl	8010d02 <memcpy>
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	6858      	ldr	r0, [r3, #4]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	461a      	mov	r2, r3
 8003ada:	2101      	movs	r1, #1
 8003adc:	f7ff ffbe 	bl	8003a5c <wrapping_add>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	605a      	str	r2, [r3, #4]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	689a      	ldr	r2, [r3, #8]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	68db      	ldr	r3, [r3, #12]
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d206      	bcs.n	8003b00 <ring_buffer_push+0x78>
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	1c5a      	adds	r2, r3, #1
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	609a      	str	r2, [r3, #8]
 8003afc:	2301      	movs	r3, #1
 8003afe:	e00b      	b.n	8003b18 <ring_buffer_push+0x90>
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6818      	ldr	r0, [r3, #0]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	461a      	mov	r2, r3
 8003b0a:	2101      	movs	r1, #1
 8003b0c:	f7ff ffa6 	bl	8003a5c <wrapping_add>
 8003b10:	4602      	mov	r2, r0
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	601a      	str	r2, [r3, #0]
 8003b16:	2300      	movs	r3, #0
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3710      	adds	r7, #16
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}

08003b20 <ring_buffer_pop>:
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b082      	sub	sp, #8
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
 8003b28:	6039      	str	r1, [r7, #0]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d101      	bne.n	8003b36 <ring_buffer_pop+0x16>
 8003b32:	2300      	movs	r3, #0
 8003b34:	e01f      	b.n	8003b76 <ring_buffer_pop+0x56>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	695a      	ldr	r2, [r3, #20]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	6879      	ldr	r1, [r7, #4]
 8003b40:	6909      	ldr	r1, [r1, #16]
 8003b42:	fb01 f303 	mul.w	r3, r1, r3
 8003b46:	18d1      	adds	r1, r2, r3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	691b      	ldr	r3, [r3, #16]
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	6838      	ldr	r0, [r7, #0]
 8003b50:	f00d f8d7 	bl	8010d02 <memcpy>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6818      	ldr	r0, [r3, #0]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	461a      	mov	r2, r3
 8003b5e:	2101      	movs	r1, #1
 8003b60:	f7ff ff7c 	bl	8003a5c <wrapping_add>
 8003b64:	4602      	mov	r2, r0
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	601a      	str	r2, [r3, #0]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	1e5a      	subs	r2, r3, #1
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	609a      	str	r2, [r3, #8]
 8003b74:	2301      	movs	r3, #1
 8003b76:	4618      	mov	r0, r3
 8003b78:	3708      	adds	r7, #8
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}

08003b7e <ring_buffer_push_array>:
 8003b7e:	b580      	push	{r7, lr}
 8003b80:	b088      	sub	sp, #32
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	60f8      	str	r0, [r7, #12]
 8003b86:	60b9      	str	r1, [r7, #8]
 8003b88:	607a      	str	r2, [r7, #4]
 8003b8a:	70fb      	strb	r3, [r7, #3]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	689a      	ldr	r2, [r3, #8]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	441a      	add	r2, r3
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d907      	bls.n	8003bac <ring_buffer_push_array+0x2e>
 8003b9c:	78fb      	ldrb	r3, [r7, #3]
 8003b9e:	f083 0301 	eor.w	r3, r3, #1
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d001      	beq.n	8003bac <ring_buffer_push_array+0x2e>
 8003ba8:	2300      	movs	r3, #0
 8003baa:	e083      	b.n	8003cb4 <ring_buffer_push_array+0x136>
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	d90d      	bls.n	8003bd2 <ring_buffer_push_array+0x54>
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	68fa      	ldr	r2, [r7, #12]
 8003bc0:	6912      	ldr	r2, [r2, #16]
 8003bc2:	fb02 f303 	mul.w	r3, r2, r3
 8003bc6:	68ba      	ldr	r2, [r7, #8]
 8003bc8:	4413      	add	r3, r2
 8003bca:	60bb      	str	r3, [r7, #8]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	607b      	str	r3, [r7, #4]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	61fb      	str	r3, [r7, #28]
 8003bd8:	69fa      	ldr	r2, [r7, #28]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	441a      	add	r2, r3
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	68db      	ldr	r3, [r3, #12]
 8003be2:	429a      	cmp	r2, r3
 8003be4:	d92b      	bls.n	8003c3e <ring_buffer_push_array+0xc0>
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	68da      	ldr	r2, [r3, #12]
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	1ad3      	subs	r3, r2, r3
 8003bee:	61bb      	str	r3, [r7, #24]
 8003bf0:	687a      	ldr	r2, [r7, #4]
 8003bf2:	69bb      	ldr	r3, [r7, #24]
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	617b      	str	r3, [r7, #20]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	695a      	ldr	r2, [r3, #20]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	691b      	ldr	r3, [r3, #16]
 8003c00:	69f9      	ldr	r1, [r7, #28]
 8003c02:	fb01 f303 	mul.w	r3, r1, r3
 8003c06:	18d0      	adds	r0, r2, r3
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	691b      	ldr	r3, [r3, #16]
 8003c0c:	69ba      	ldr	r2, [r7, #24]
 8003c0e:	fb02 f303 	mul.w	r3, r2, r3
 8003c12:	461a      	mov	r2, r3
 8003c14:	68b9      	ldr	r1, [r7, #8]
 8003c16:	f00d f874 	bl	8010d02 <memcpy>
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	6958      	ldr	r0, [r3, #20]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	691b      	ldr	r3, [r3, #16]
 8003c22:	69ba      	ldr	r2, [r7, #24]
 8003c24:	fb02 f303 	mul.w	r3, r2, r3
 8003c28:	68ba      	ldr	r2, [r7, #8]
 8003c2a:	18d1      	adds	r1, r2, r3
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	691b      	ldr	r3, [r3, #16]
 8003c30:	697a      	ldr	r2, [r7, #20]
 8003c32:	fb02 f303 	mul.w	r3, r2, r3
 8003c36:	461a      	mov	r2, r3
 8003c38:	f00d f863 	bl	8010d02 <memcpy>
 8003c3c:	e010      	b.n	8003c60 <ring_buffer_push_array+0xe2>
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	695a      	ldr	r2, [r3, #20]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	691b      	ldr	r3, [r3, #16]
 8003c46:	69f9      	ldr	r1, [r7, #28]
 8003c48:	fb01 f303 	mul.w	r3, r1, r3
 8003c4c:	18d0      	adds	r0, r2, r3
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	691b      	ldr	r3, [r3, #16]
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	fb02 f303 	mul.w	r3, r2, r3
 8003c58:	461a      	mov	r2, r3
 8003c5a:	68b9      	ldr	r1, [r7, #8]
 8003c5c:	f00d f851 	bl	8010d02 <memcpy>
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	6858      	ldr	r0, [r3, #4]
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	461a      	mov	r2, r3
 8003c6a:	6879      	ldr	r1, [r7, #4]
 8003c6c:	f7ff fef6 	bl	8003a5c <wrapping_add>
 8003c70:	4602      	mov	r2, r0
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	605a      	str	r2, [r3, #4]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	689a      	ldr	r2, [r3, #8]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	441a      	add	r2, r3
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	68db      	ldr	r3, [r3, #12]
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d903      	bls.n	8003c8e <ring_buffer_push_array+0x110>
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	685a      	ldr	r2, [r3, #4]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	601a      	str	r2, [r3, #0]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	689a      	ldr	r2, [r3, #8]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	441a      	add	r2, r3
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	609a      	str	r2, [r3, #8]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	689a      	ldr	r2, [r3, #8]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d905      	bls.n	8003cb2 <ring_buffer_push_array+0x134>
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	68da      	ldr	r2, [r3, #12]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	609a      	str	r2, [r3, #8]
 8003cae:	2300      	movs	r3, #0
 8003cb0:	e000      	b.n	8003cb4 <ring_buffer_push_array+0x136>
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	3720      	adds	r7, #32
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}

08003cbc <ring_buffer_pop_array>:
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b088      	sub	sp, #32
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	60f8      	str	r0, [r7, #12]
 8003cc4:	60b9      	str	r1, [r7, #8]
 8003cc6:	607a      	str	r2, [r7, #4]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	687a      	ldr	r2, [r7, #4]
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d901      	bls.n	8003cd6 <ring_buffer_pop_array+0x1a>
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	e058      	b.n	8003d88 <ring_buffer_pop_array+0xcc>
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	61fb      	str	r3, [r7, #28]
 8003cdc:	69fa      	ldr	r2, [r7, #28]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	441a      	add	r2, r3
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	68db      	ldr	r3, [r3, #12]
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	d92b      	bls.n	8003d42 <ring_buffer_pop_array+0x86>
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	68da      	ldr	r2, [r3, #12]
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	61bb      	str	r3, [r7, #24]
 8003cf4:	687a      	ldr	r2, [r7, #4]
 8003cf6:	69bb      	ldr	r3, [r7, #24]
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	617b      	str	r3, [r7, #20]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	695a      	ldr	r2, [r3, #20]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	691b      	ldr	r3, [r3, #16]
 8003d04:	69f9      	ldr	r1, [r7, #28]
 8003d06:	fb01 f303 	mul.w	r3, r1, r3
 8003d0a:	18d1      	adds	r1, r2, r3
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	691b      	ldr	r3, [r3, #16]
 8003d10:	69ba      	ldr	r2, [r7, #24]
 8003d12:	fb02 f303 	mul.w	r3, r2, r3
 8003d16:	461a      	mov	r2, r3
 8003d18:	68b8      	ldr	r0, [r7, #8]
 8003d1a:	f00c fff2 	bl	8010d02 <memcpy>
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	691b      	ldr	r3, [r3, #16]
 8003d22:	69ba      	ldr	r2, [r7, #24]
 8003d24:	fb02 f303 	mul.w	r3, r2, r3
 8003d28:	68ba      	ldr	r2, [r7, #8]
 8003d2a:	18d0      	adds	r0, r2, r3
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	6959      	ldr	r1, [r3, #20]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	691b      	ldr	r3, [r3, #16]
 8003d34:	697a      	ldr	r2, [r7, #20]
 8003d36:	fb02 f303 	mul.w	r3, r2, r3
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	f00c ffe1 	bl	8010d02 <memcpy>
 8003d40:	e010      	b.n	8003d64 <ring_buffer_pop_array+0xa8>
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	695a      	ldr	r2, [r3, #20]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	691b      	ldr	r3, [r3, #16]
 8003d4a:	69f9      	ldr	r1, [r7, #28]
 8003d4c:	fb01 f303 	mul.w	r3, r1, r3
 8003d50:	18d1      	adds	r1, r2, r3
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	691b      	ldr	r3, [r3, #16]
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	fb02 f303 	mul.w	r3, r2, r3
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	68b8      	ldr	r0, [r7, #8]
 8003d60:	f00c ffcf 	bl	8010d02 <memcpy>
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	6818      	ldr	r0, [r3, #0]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	461a      	mov	r2, r3
 8003d6e:	6879      	ldr	r1, [r7, #4]
 8003d70:	f7ff fe74 	bl	8003a5c <wrapping_add>
 8003d74:	4602      	mov	r2, r0
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	601a      	str	r2, [r3, #0]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	689a      	ldr	r2, [r3, #8]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	1ad2      	subs	r2, r2, r3
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	609a      	str	r2, [r3, #8]
 8003d86:	2301      	movs	r3, #1
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3720      	adds	r7, #32
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}

08003d90 <Reset_Handler>:
 8003d90:	480d      	ldr	r0, [pc, #52]	@ (8003dc8 <LoopForever+0x2>)
 8003d92:	4685      	mov	sp, r0
 8003d94:	f7ff fd7e 	bl	8003894 <SystemInit>
 8003d98:	480c      	ldr	r0, [pc, #48]	@ (8003dcc <LoopForever+0x6>)
 8003d9a:	490d      	ldr	r1, [pc, #52]	@ (8003dd0 <LoopForever+0xa>)
 8003d9c:	4a0d      	ldr	r2, [pc, #52]	@ (8003dd4 <LoopForever+0xe>)
 8003d9e:	2300      	movs	r3, #0
 8003da0:	e002      	b.n	8003da8 <LoopCopyDataInit>

08003da2 <CopyDataInit>:
 8003da2:	58d4      	ldr	r4, [r2, r3]
 8003da4:	50c4      	str	r4, [r0, r3]
 8003da6:	3304      	adds	r3, #4

08003da8 <LoopCopyDataInit>:
 8003da8:	18c4      	adds	r4, r0, r3
 8003daa:	428c      	cmp	r4, r1
 8003dac:	d3f9      	bcc.n	8003da2 <CopyDataInit>
 8003dae:	4a0a      	ldr	r2, [pc, #40]	@ (8003dd8 <LoopForever+0x12>)
 8003db0:	4c0a      	ldr	r4, [pc, #40]	@ (8003ddc <LoopForever+0x16>)
 8003db2:	2300      	movs	r3, #0
 8003db4:	e001      	b.n	8003dba <LoopFillZerobss>

08003db6 <FillZerobss>:
 8003db6:	6013      	str	r3, [r2, #0]
 8003db8:	3204      	adds	r2, #4

08003dba <LoopFillZerobss>:
 8003dba:	42a2      	cmp	r2, r4
 8003dbc:	d3fb      	bcc.n	8003db6 <FillZerobss>
 8003dbe:	f00c ff79 	bl	8010cb4 <__libc_init_array>
 8003dc2:	f7fe fd81 	bl	80028c8 <main>

08003dc6 <LoopForever>:
 8003dc6:	e7fe      	b.n	8003dc6 <LoopForever>
 8003dc8:	2001c000 	.word	0x2001c000
 8003dcc:	20000000 	.word	0x20000000
 8003dd0:	20000370 	.word	0x20000370
 8003dd4:	08014318 	.word	0x08014318
 8003dd8:	20000370 	.word	0x20000370
 8003ddc:	20012990 	.word	0x20012990

08003de0 <ADC1_2_IRQHandler>:
 8003de0:	e7fe      	b.n	8003de0 <ADC1_2_IRQHandler>

08003de2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003de2:	b580      	push	{r7, lr}
 8003de4:	b082      	sub	sp, #8
 8003de6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003de8:	2300      	movs	r3, #0
 8003dea:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003dec:	2003      	movs	r0, #3
 8003dee:	f000 f8fe 	bl	8003fee <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003df2:	200f      	movs	r0, #15
 8003df4:	f7ff fbec 	bl	80035d0 <HAL_InitTick>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d002      	beq.n	8003e04 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	71fb      	strb	r3, [r7, #7]
 8003e02:	e001      	b.n	8003e08 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003e04:	f7ff fb1e 	bl	8003444 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003e08:	79fb      	ldrb	r3, [r7, #7]

}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3708      	adds	r7, #8
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
	...

08003e14 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e14:	b480      	push	{r7}
 8003e16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003e18:	4b05      	ldr	r3, [pc, #20]	@ (8003e30 <HAL_IncTick+0x1c>)
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	4b05      	ldr	r3, [pc, #20]	@ (8003e34 <HAL_IncTick+0x20>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4413      	add	r3, r2
 8003e22:	4a03      	ldr	r2, [pc, #12]	@ (8003e30 <HAL_IncTick+0x1c>)
 8003e24:	6013      	str	r3, [r2, #0]
}
 8003e26:	bf00      	nop
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr
 8003e30:	20000688 	.word	0x20000688
 8003e34:	20000028 	.word	0x20000028

08003e38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	af00      	add	r7, sp, #0
  return uwTick;
 8003e3c:	4b03      	ldr	r3, [pc, #12]	@ (8003e4c <HAL_GetTick+0x14>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr
 8003e4a:	bf00      	nop
 8003e4c:	20000688 	.word	0x20000688

08003e50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b084      	sub	sp, #16
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003e58:	f7ff ffee 	bl	8003e38 <HAL_GetTick>
 8003e5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003e68:	d004      	beq.n	8003e74 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8003e6a:	4b09      	ldr	r3, [pc, #36]	@ (8003e90 <HAL_Delay+0x40>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	68fa      	ldr	r2, [r7, #12]
 8003e70:	4413      	add	r3, r2
 8003e72:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003e74:	bf00      	nop
 8003e76:	f7ff ffdf 	bl	8003e38 <HAL_GetTick>
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	1ad3      	subs	r3, r2, r3
 8003e80:	68fa      	ldr	r2, [r7, #12]
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d8f7      	bhi.n	8003e76 <HAL_Delay+0x26>
  {
  }
}
 8003e86:	bf00      	nop
 8003e88:	bf00      	nop
 8003e8a:	3710      	adds	r7, #16
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}
 8003e90:	20000028 	.word	0x20000028

08003e94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b085      	sub	sp, #20
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	f003 0307 	and.w	r3, r3, #7
 8003ea2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ea4:	4b0c      	ldr	r3, [pc, #48]	@ (8003ed8 <__NVIC_SetPriorityGrouping+0x44>)
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003eaa:	68ba      	ldr	r2, [r7, #8]
 8003eac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ebc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003ec0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ec4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ec6:	4a04      	ldr	r2, [pc, #16]	@ (8003ed8 <__NVIC_SetPriorityGrouping+0x44>)
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	60d3      	str	r3, [r2, #12]
}
 8003ecc:	bf00      	nop
 8003ece:	3714      	adds	r7, #20
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr
 8003ed8:	e000ed00 	.word	0xe000ed00

08003edc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003edc:	b480      	push	{r7}
 8003ede:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ee0:	4b04      	ldr	r3, [pc, #16]	@ (8003ef4 <__NVIC_GetPriorityGrouping+0x18>)
 8003ee2:	68db      	ldr	r3, [r3, #12]
 8003ee4:	0a1b      	lsrs	r3, r3, #8
 8003ee6:	f003 0307 	and.w	r3, r3, #7
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr
 8003ef4:	e000ed00 	.word	0xe000ed00

08003ef8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b083      	sub	sp, #12
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	4603      	mov	r3, r0
 8003f00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	db0b      	blt.n	8003f22 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f0a:	79fb      	ldrb	r3, [r7, #7]
 8003f0c:	f003 021f 	and.w	r2, r3, #31
 8003f10:	4907      	ldr	r1, [pc, #28]	@ (8003f30 <__NVIC_EnableIRQ+0x38>)
 8003f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f16:	095b      	lsrs	r3, r3, #5
 8003f18:	2001      	movs	r0, #1
 8003f1a:	fa00 f202 	lsl.w	r2, r0, r2
 8003f1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003f22:	bf00      	nop
 8003f24:	370c      	adds	r7, #12
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr
 8003f2e:	bf00      	nop
 8003f30:	e000e100 	.word	0xe000e100

08003f34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b083      	sub	sp, #12
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	6039      	str	r1, [r7, #0]
 8003f3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	db0a      	blt.n	8003f5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	b2da      	uxtb	r2, r3
 8003f4c:	490c      	ldr	r1, [pc, #48]	@ (8003f80 <__NVIC_SetPriority+0x4c>)
 8003f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f52:	0112      	lsls	r2, r2, #4
 8003f54:	b2d2      	uxtb	r2, r2
 8003f56:	440b      	add	r3, r1
 8003f58:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f5c:	e00a      	b.n	8003f74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	b2da      	uxtb	r2, r3
 8003f62:	4908      	ldr	r1, [pc, #32]	@ (8003f84 <__NVIC_SetPriority+0x50>)
 8003f64:	79fb      	ldrb	r3, [r7, #7]
 8003f66:	f003 030f 	and.w	r3, r3, #15
 8003f6a:	3b04      	subs	r3, #4
 8003f6c:	0112      	lsls	r2, r2, #4
 8003f6e:	b2d2      	uxtb	r2, r2
 8003f70:	440b      	add	r3, r1
 8003f72:	761a      	strb	r2, [r3, #24]
}
 8003f74:	bf00      	nop
 8003f76:	370c      	adds	r7, #12
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr
 8003f80:	e000e100 	.word	0xe000e100
 8003f84:	e000ed00 	.word	0xe000ed00

08003f88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b089      	sub	sp, #36	@ 0x24
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	60f8      	str	r0, [r7, #12]
 8003f90:	60b9      	str	r1, [r7, #8]
 8003f92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f003 0307 	and.w	r3, r3, #7
 8003f9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f9c:	69fb      	ldr	r3, [r7, #28]
 8003f9e:	f1c3 0307 	rsb	r3, r3, #7
 8003fa2:	2b04      	cmp	r3, #4
 8003fa4:	bf28      	it	cs
 8003fa6:	2304      	movcs	r3, #4
 8003fa8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003faa:	69fb      	ldr	r3, [r7, #28]
 8003fac:	3304      	adds	r3, #4
 8003fae:	2b06      	cmp	r3, #6
 8003fb0:	d902      	bls.n	8003fb8 <NVIC_EncodePriority+0x30>
 8003fb2:	69fb      	ldr	r3, [r7, #28]
 8003fb4:	3b03      	subs	r3, #3
 8003fb6:	e000      	b.n	8003fba <NVIC_EncodePriority+0x32>
 8003fb8:	2300      	movs	r3, #0
 8003fba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fbc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003fc0:	69bb      	ldr	r3, [r7, #24]
 8003fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc6:	43da      	mvns	r2, r3
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	401a      	ands	r2, r3
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003fd0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	fa01 f303 	lsl.w	r3, r1, r3
 8003fda:	43d9      	mvns	r1, r3
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fe0:	4313      	orrs	r3, r2
         );
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	3724      	adds	r7, #36	@ 0x24
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr

08003fee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fee:	b580      	push	{r7, lr}
 8003ff0:	b082      	sub	sp, #8
 8003ff2:	af00      	add	r7, sp, #0
 8003ff4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f7ff ff4c 	bl	8003e94 <__NVIC_SetPriorityGrouping>
}
 8003ffc:	bf00      	nop
 8003ffe:	3708      	adds	r7, #8
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}

08004004 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b086      	sub	sp, #24
 8004008:	af00      	add	r7, sp, #0
 800400a:	4603      	mov	r3, r0
 800400c:	60b9      	str	r1, [r7, #8]
 800400e:	607a      	str	r2, [r7, #4]
 8004010:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004012:	f7ff ff63 	bl	8003edc <__NVIC_GetPriorityGrouping>
 8004016:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004018:	687a      	ldr	r2, [r7, #4]
 800401a:	68b9      	ldr	r1, [r7, #8]
 800401c:	6978      	ldr	r0, [r7, #20]
 800401e:	f7ff ffb3 	bl	8003f88 <NVIC_EncodePriority>
 8004022:	4602      	mov	r2, r0
 8004024:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004028:	4611      	mov	r1, r2
 800402a:	4618      	mov	r0, r3
 800402c:	f7ff ff82 	bl	8003f34 <__NVIC_SetPriority>
}
 8004030:	bf00      	nop
 8004032:	3718      	adds	r7, #24
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}

08004038 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b082      	sub	sp, #8
 800403c:	af00      	add	r7, sp, #0
 800403e:	4603      	mov	r3, r0
 8004040:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004046:	4618      	mov	r0, r3
 8004048:	f7ff ff56 	bl	8003ef8 <__NVIC_EnableIRQ>
}
 800404c:	bf00      	nop
 800404e:	3708      	adds	r7, #8
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}

08004054 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b084      	sub	sp, #16
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d101      	bne.n	8004066 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e147      	b.n	80042f6 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800406c:	b2db      	uxtb	r3, r3
 800406e:	2b00      	cmp	r3, #0
 8004070:	d106      	bne.n	8004080 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f7ff fa0c 	bl	8003498 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	699a      	ldr	r2, [r3, #24]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f022 0210 	bic.w	r2, r2, #16
 800408e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004090:	f7ff fed2 	bl	8003e38 <HAL_GetTick>
 8004094:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004096:	e012      	b.n	80040be <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004098:	f7ff fece 	bl	8003e38 <HAL_GetTick>
 800409c:	4602      	mov	r2, r0
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	1ad3      	subs	r3, r2, r3
 80040a2:	2b0a      	cmp	r3, #10
 80040a4:	d90b      	bls.n	80040be <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040aa:	f043 0201 	orr.w	r2, r3, #1
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2203      	movs	r2, #3
 80040b6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e11b      	b.n	80042f6 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	699b      	ldr	r3, [r3, #24]
 80040c4:	f003 0308 	and.w	r3, r3, #8
 80040c8:	2b08      	cmp	r3, #8
 80040ca:	d0e5      	beq.n	8004098 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	699a      	ldr	r2, [r3, #24]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f042 0201 	orr.w	r2, r2, #1
 80040da:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80040dc:	f7ff feac 	bl	8003e38 <HAL_GetTick>
 80040e0:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80040e2:	e012      	b.n	800410a <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80040e4:	f7ff fea8 	bl	8003e38 <HAL_GetTick>
 80040e8:	4602      	mov	r2, r0
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	1ad3      	subs	r3, r2, r3
 80040ee:	2b0a      	cmp	r3, #10
 80040f0:	d90b      	bls.n	800410a <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040f6:	f043 0201 	orr.w	r2, r3, #1
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2203      	movs	r2, #3
 8004102:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e0f5      	b.n	80042f6 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	699b      	ldr	r3, [r3, #24]
 8004110:	f003 0301 	and.w	r3, r3, #1
 8004114:	2b00      	cmp	r3, #0
 8004116:	d0e5      	beq.n	80040e4 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	699a      	ldr	r2, [r3, #24]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f042 0202 	orr.w	r2, r2, #2
 8004126:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a74      	ldr	r2, [pc, #464]	@ (8004300 <HAL_FDCAN_Init+0x2ac>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d103      	bne.n	800413a <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8004132:	4a74      	ldr	r2, [pc, #464]	@ (8004304 <HAL_FDCAN_Init+0x2b0>)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	7c1b      	ldrb	r3, [r3, #16]
 800413e:	2b01      	cmp	r3, #1
 8004140:	d108      	bne.n	8004154 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	699a      	ldr	r2, [r3, #24]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004150:	619a      	str	r2, [r3, #24]
 8004152:	e007      	b.n	8004164 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	699a      	ldr	r2, [r3, #24]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004162:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	7c5b      	ldrb	r3, [r3, #17]
 8004168:	2b01      	cmp	r3, #1
 800416a:	d108      	bne.n	800417e <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	699a      	ldr	r2, [r3, #24]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800417a:	619a      	str	r2, [r3, #24]
 800417c:	e007      	b.n	800418e <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	699a      	ldr	r2, [r3, #24]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800418c:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	7c9b      	ldrb	r3, [r3, #18]
 8004192:	2b01      	cmp	r3, #1
 8004194:	d108      	bne.n	80041a8 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	699a      	ldr	r2, [r3, #24]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80041a4:	619a      	str	r2, [r3, #24]
 80041a6:	e007      	b.n	80041b8 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	699a      	ldr	r2, [r3, #24]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80041b6:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	699b      	ldr	r3, [r3, #24]
 80041be:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	689a      	ldr	r2, [r3, #8]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	430a      	orrs	r2, r1
 80041cc:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	699a      	ldr	r2, [r3, #24]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 80041dc:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	691a      	ldr	r2, [r3, #16]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f022 0210 	bic.w	r2, r2, #16
 80041ec:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	68db      	ldr	r3, [r3, #12]
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d108      	bne.n	8004208 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	699a      	ldr	r2, [r3, #24]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f042 0204 	orr.w	r2, r2, #4
 8004204:	619a      	str	r2, [r3, #24]
 8004206:	e02c      	b.n	8004262 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d028      	beq.n	8004262 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	2b02      	cmp	r3, #2
 8004216:	d01c      	beq.n	8004252 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	699a      	ldr	r2, [r3, #24]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004226:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	691a      	ldr	r2, [r3, #16]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f042 0210 	orr.w	r2, r2, #16
 8004236:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	2b03      	cmp	r3, #3
 800423e:	d110      	bne.n	8004262 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	699a      	ldr	r2, [r3, #24]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f042 0220 	orr.w	r2, r2, #32
 800424e:	619a      	str	r2, [r3, #24]
 8004250:	e007      	b.n	8004262 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	699a      	ldr	r2, [r3, #24]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f042 0220 	orr.w	r2, r2, #32
 8004260:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	699b      	ldr	r3, [r3, #24]
 8004266:	3b01      	subs	r3, #1
 8004268:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	69db      	ldr	r3, [r3, #28]
 800426e:	3b01      	subs	r3, #1
 8004270:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004272:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6a1b      	ldr	r3, [r3, #32]
 8004278:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800427a:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	695b      	ldr	r3, [r3, #20]
 8004282:	3b01      	subs	r3, #1
 8004284:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800428a:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800428c:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004296:	d115      	bne.n	80042c4 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800429c:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042a2:	3b01      	subs	r3, #1
 80042a4:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80042a6:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042ac:	3b01      	subs	r3, #1
 80042ae:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80042b0:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042b8:	3b01      	subs	r3, #1
 80042ba:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80042c0:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80042c2:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	430a      	orrs	r2, r1
 80042d6:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f000 f858 	bl	8004390 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2200      	movs	r2, #0
 80042e4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2200      	movs	r2, #0
 80042ea:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2201      	movs	r2, #1
 80042f0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 80042f4:	2300      	movs	r3, #0
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3710      	adds	r7, #16
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}
 80042fe:	bf00      	nop
 8004300:	40006400 	.word	0x40006400
 8004304:	40006500 	.word	0x40006500

08004308 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b086      	sub	sp, #24
 800430c:	af00      	add	r7, sp, #0
 800430e:	60f8      	str	r0, [r7, #12]
 8004310:	60b9      	str	r1, [r7, #8]
 8004312:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800431a:	b2db      	uxtb	r3, r3
 800431c:	2b02      	cmp	r3, #2
 800431e:	d12c      	bne.n	800437a <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004328:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800432c:	2b00      	cmp	r3, #0
 800432e:	d007      	beq.n	8004340 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004334:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	e023      	b.n	8004388 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004348:	0c1b      	lsrs	r3, r3, #16
 800434a:	f003 0303 	and.w	r3, r3, #3
 800434e:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	687a      	ldr	r2, [r7, #4]
 8004354:	68b9      	ldr	r1, [r7, #8]
 8004356:	68f8      	ldr	r0, [r7, #12]
 8004358:	f000 f87c 	bl	8004454 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	2101      	movs	r1, #1
 8004362:	697a      	ldr	r2, [r7, #20]
 8004364:	fa01 f202 	lsl.w	r2, r1, r2
 8004368:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 800436c:	2201      	movs	r2, #1
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	409a      	lsls	r2, r3
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 8004376:	2300      	movs	r3, #0
 8004378:	e006      	b.n	8004388 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800437e:	f043 0208 	orr.w	r2, r3, #8
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8004386:	2301      	movs	r3, #1
  }
}
 8004388:	4618      	mov	r0, r3
 800438a:	3718      	adds	r7, #24
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}

08004390 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8004390:	b480      	push	{r7}
 8004392:	b085      	sub	sp, #20
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8004398:	4b2c      	ldr	r3, [pc, #176]	@ (800444c <FDCAN_CalcultateRamBlockAddresses+0xbc>)
 800439a:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a2b      	ldr	r2, [pc, #172]	@ (8004450 <FDCAN_CalcultateRamBlockAddresses+0xc0>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d103      	bne.n	80043ae <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80043ac:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	68ba      	ldr	r2, [r7, #8]
 80043b2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80043bc:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043c4:	041a      	lsls	r2, r3, #16
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	430a      	orrs	r2, r1
 80043cc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80043e2:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043ea:	061a      	lsls	r2, r3, #24
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	430a      	orrs	r2, r1
 80043f2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	60fb      	str	r3, [r7, #12]
 8004422:	e005      	b.n	8004430 <FDCAN_CalcultateRamBlockAddresses+0xa0>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2200      	movs	r2, #0
 8004428:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	3304      	adds	r3, #4
 800442e:	60fb      	str	r3, [r7, #12]
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8004436:	68fa      	ldr	r2, [r7, #12]
 8004438:	429a      	cmp	r2, r3
 800443a:	d3f3      	bcc.n	8004424 <FDCAN_CalcultateRamBlockAddresses+0x94>
  }
}
 800443c:	bf00      	nop
 800443e:	bf00      	nop
 8004440:	3714      	adds	r7, #20
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr
 800444a:	bf00      	nop
 800444c:	4000a400 	.word	0x4000a400
 8004450:	40006800 	.word	0x40006800

08004454 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8004454:	b480      	push	{r7}
 8004456:	b089      	sub	sp, #36	@ 0x24
 8004458:	af00      	add	r7, sp, #0
 800445a:	60f8      	str	r0, [r7, #12]
 800445c:	60b9      	str	r1, [r7, #8]
 800445e:	607a      	str	r2, [r7, #4]
 8004460:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d10a      	bne.n	8004480 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8004472:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800447a:	4313      	orrs	r3, r2
 800447c:	61fb      	str	r3, [r7, #28]
 800447e:	e00a      	b.n	8004496 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8004488:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800448e:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004490:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004494:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	6a1b      	ldr	r3, [r3, #32]
 800449a:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80044a0:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80044a6:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80044ac:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80044b4:	4313      	orrs	r3, r2
 80044b6:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80044bc:	683a      	ldr	r2, [r7, #0]
 80044be:	4613      	mov	r3, r2
 80044c0:	00db      	lsls	r3, r3, #3
 80044c2:	4413      	add	r3, r2
 80044c4:	00db      	lsls	r3, r3, #3
 80044c6:	440b      	add	r3, r1
 80044c8:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80044ca:	69bb      	ldr	r3, [r7, #24]
 80044cc:	69fa      	ldr	r2, [r7, #28]
 80044ce:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80044d0:	69bb      	ldr	r3, [r7, #24]
 80044d2:	3304      	adds	r3, #4
 80044d4:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80044d6:	69bb      	ldr	r3, [r7, #24]
 80044d8:	693a      	ldr	r2, [r7, #16]
 80044da:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80044dc:	69bb      	ldr	r3, [r7, #24]
 80044de:	3304      	adds	r3, #4
 80044e0:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80044e2:	2300      	movs	r3, #0
 80044e4:	617b      	str	r3, [r7, #20]
 80044e6:	e020      	b.n	800452a <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	3303      	adds	r3, #3
 80044ec:	687a      	ldr	r2, [r7, #4]
 80044ee:	4413      	add	r3, r2
 80044f0:	781b      	ldrb	r3, [r3, #0]
 80044f2:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	3302      	adds	r3, #2
 80044f8:	6879      	ldr	r1, [r7, #4]
 80044fa:	440b      	add	r3, r1
 80044fc:	781b      	ldrb	r3, [r3, #0]
 80044fe:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004500:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	3301      	adds	r3, #1
 8004506:	6879      	ldr	r1, [r7, #4]
 8004508:	440b      	add	r3, r1
 800450a:	781b      	ldrb	r3, [r3, #0]
 800450c:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800450e:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8004510:	6879      	ldr	r1, [r7, #4]
 8004512:	697a      	ldr	r2, [r7, #20]
 8004514:	440a      	add	r2, r1
 8004516:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8004518:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800451a:	69bb      	ldr	r3, [r7, #24]
 800451c:	601a      	str	r2, [r3, #0]
    TxAddress++;
 800451e:	69bb      	ldr	r3, [r7, #24]
 8004520:	3304      	adds	r3, #4
 8004522:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	3304      	adds	r3, #4
 8004528:	617b      	str	r3, [r7, #20]
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	68db      	ldr	r3, [r3, #12]
 800452e:	4a06      	ldr	r2, [pc, #24]	@ (8004548 <FDCAN_CopyMessageToRAM+0xf4>)
 8004530:	5cd3      	ldrb	r3, [r2, r3]
 8004532:	461a      	mov	r2, r3
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	4293      	cmp	r3, r2
 8004538:	d3d6      	bcc.n	80044e8 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 800453a:	bf00      	nop
 800453c:	bf00      	nop
 800453e:	3724      	adds	r7, #36	@ 0x24
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr
 8004548:	08013f6c 	.word	0x08013f6c

0800454c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800454c:	b480      	push	{r7}
 800454e:	b087      	sub	sp, #28
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
 8004554:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004556:	2300      	movs	r3, #0
 8004558:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800455a:	e15a      	b.n	8004812 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	2101      	movs	r1, #1
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	fa01 f303 	lsl.w	r3, r1, r3
 8004568:	4013      	ands	r3, r2
 800456a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2b00      	cmp	r3, #0
 8004570:	f000 814c 	beq.w	800480c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	f003 0303 	and.w	r3, r3, #3
 800457c:	2b01      	cmp	r3, #1
 800457e:	d005      	beq.n	800458c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004588:	2b02      	cmp	r3, #2
 800458a:	d130      	bne.n	80045ee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	005b      	lsls	r3, r3, #1
 8004596:	2203      	movs	r2, #3
 8004598:	fa02 f303 	lsl.w	r3, r2, r3
 800459c:	43db      	mvns	r3, r3
 800459e:	693a      	ldr	r2, [r7, #16]
 80045a0:	4013      	ands	r3, r2
 80045a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	68da      	ldr	r2, [r3, #12]
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	005b      	lsls	r3, r3, #1
 80045ac:	fa02 f303 	lsl.w	r3, r2, r3
 80045b0:	693a      	ldr	r2, [r7, #16]
 80045b2:	4313      	orrs	r3, r2
 80045b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	693a      	ldr	r2, [r7, #16]
 80045ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80045c2:	2201      	movs	r2, #1
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	fa02 f303 	lsl.w	r3, r2, r3
 80045ca:	43db      	mvns	r3, r3
 80045cc:	693a      	ldr	r2, [r7, #16]
 80045ce:	4013      	ands	r3, r2
 80045d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	091b      	lsrs	r3, r3, #4
 80045d8:	f003 0201 	and.w	r2, r3, #1
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	fa02 f303 	lsl.w	r3, r2, r3
 80045e2:	693a      	ldr	r2, [r7, #16]
 80045e4:	4313      	orrs	r3, r2
 80045e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	693a      	ldr	r2, [r7, #16]
 80045ec:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	f003 0303 	and.w	r3, r3, #3
 80045f6:	2b03      	cmp	r3, #3
 80045f8:	d017      	beq.n	800462a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	68db      	ldr	r3, [r3, #12]
 80045fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	005b      	lsls	r3, r3, #1
 8004604:	2203      	movs	r2, #3
 8004606:	fa02 f303 	lsl.w	r3, r2, r3
 800460a:	43db      	mvns	r3, r3
 800460c:	693a      	ldr	r2, [r7, #16]
 800460e:	4013      	ands	r3, r2
 8004610:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	689a      	ldr	r2, [r3, #8]
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	005b      	lsls	r3, r3, #1
 800461a:	fa02 f303 	lsl.w	r3, r2, r3
 800461e:	693a      	ldr	r2, [r7, #16]
 8004620:	4313      	orrs	r3, r2
 8004622:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	693a      	ldr	r2, [r7, #16]
 8004628:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	f003 0303 	and.w	r3, r3, #3
 8004632:	2b02      	cmp	r3, #2
 8004634:	d123      	bne.n	800467e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	08da      	lsrs	r2, r3, #3
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	3208      	adds	r2, #8
 800463e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004642:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	f003 0307 	and.w	r3, r3, #7
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	220f      	movs	r2, #15
 800464e:	fa02 f303 	lsl.w	r3, r2, r3
 8004652:	43db      	mvns	r3, r3
 8004654:	693a      	ldr	r2, [r7, #16]
 8004656:	4013      	ands	r3, r2
 8004658:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	691a      	ldr	r2, [r3, #16]
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	f003 0307 	and.w	r3, r3, #7
 8004664:	009b      	lsls	r3, r3, #2
 8004666:	fa02 f303 	lsl.w	r3, r2, r3
 800466a:	693a      	ldr	r2, [r7, #16]
 800466c:	4313      	orrs	r3, r2
 800466e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	08da      	lsrs	r2, r3, #3
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	3208      	adds	r2, #8
 8004678:	6939      	ldr	r1, [r7, #16]
 800467a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	005b      	lsls	r3, r3, #1
 8004688:	2203      	movs	r2, #3
 800468a:	fa02 f303 	lsl.w	r3, r2, r3
 800468e:	43db      	mvns	r3, r3
 8004690:	693a      	ldr	r2, [r7, #16]
 8004692:	4013      	ands	r3, r2
 8004694:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	f003 0203 	and.w	r2, r3, #3
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	005b      	lsls	r3, r3, #1
 80046a2:	fa02 f303 	lsl.w	r3, r2, r3
 80046a6:	693a      	ldr	r2, [r7, #16]
 80046a8:	4313      	orrs	r3, r2
 80046aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	693a      	ldr	r2, [r7, #16]
 80046b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	f000 80a6 	beq.w	800480c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046c0:	4b5b      	ldr	r3, [pc, #364]	@ (8004830 <HAL_GPIO_Init+0x2e4>)
 80046c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046c4:	4a5a      	ldr	r2, [pc, #360]	@ (8004830 <HAL_GPIO_Init+0x2e4>)
 80046c6:	f043 0301 	orr.w	r3, r3, #1
 80046ca:	6613      	str	r3, [r2, #96]	@ 0x60
 80046cc:	4b58      	ldr	r3, [pc, #352]	@ (8004830 <HAL_GPIO_Init+0x2e4>)
 80046ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046d0:	f003 0301 	and.w	r3, r3, #1
 80046d4:	60bb      	str	r3, [r7, #8]
 80046d6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80046d8:	4a56      	ldr	r2, [pc, #344]	@ (8004834 <HAL_GPIO_Init+0x2e8>)
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	089b      	lsrs	r3, r3, #2
 80046de:	3302      	adds	r3, #2
 80046e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	f003 0303 	and.w	r3, r3, #3
 80046ec:	009b      	lsls	r3, r3, #2
 80046ee:	220f      	movs	r2, #15
 80046f0:	fa02 f303 	lsl.w	r3, r2, r3
 80046f4:	43db      	mvns	r3, r3
 80046f6:	693a      	ldr	r2, [r7, #16]
 80046f8:	4013      	ands	r3, r2
 80046fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004702:	d01f      	beq.n	8004744 <HAL_GPIO_Init+0x1f8>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	4a4c      	ldr	r2, [pc, #304]	@ (8004838 <HAL_GPIO_Init+0x2ec>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d019      	beq.n	8004740 <HAL_GPIO_Init+0x1f4>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	4a4b      	ldr	r2, [pc, #300]	@ (800483c <HAL_GPIO_Init+0x2f0>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d013      	beq.n	800473c <HAL_GPIO_Init+0x1f0>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	4a4a      	ldr	r2, [pc, #296]	@ (8004840 <HAL_GPIO_Init+0x2f4>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d00d      	beq.n	8004738 <HAL_GPIO_Init+0x1ec>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	4a49      	ldr	r2, [pc, #292]	@ (8004844 <HAL_GPIO_Init+0x2f8>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d007      	beq.n	8004734 <HAL_GPIO_Init+0x1e8>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	4a48      	ldr	r2, [pc, #288]	@ (8004848 <HAL_GPIO_Init+0x2fc>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d101      	bne.n	8004730 <HAL_GPIO_Init+0x1e4>
 800472c:	2305      	movs	r3, #5
 800472e:	e00a      	b.n	8004746 <HAL_GPIO_Init+0x1fa>
 8004730:	2306      	movs	r3, #6
 8004732:	e008      	b.n	8004746 <HAL_GPIO_Init+0x1fa>
 8004734:	2304      	movs	r3, #4
 8004736:	e006      	b.n	8004746 <HAL_GPIO_Init+0x1fa>
 8004738:	2303      	movs	r3, #3
 800473a:	e004      	b.n	8004746 <HAL_GPIO_Init+0x1fa>
 800473c:	2302      	movs	r3, #2
 800473e:	e002      	b.n	8004746 <HAL_GPIO_Init+0x1fa>
 8004740:	2301      	movs	r3, #1
 8004742:	e000      	b.n	8004746 <HAL_GPIO_Init+0x1fa>
 8004744:	2300      	movs	r3, #0
 8004746:	697a      	ldr	r2, [r7, #20]
 8004748:	f002 0203 	and.w	r2, r2, #3
 800474c:	0092      	lsls	r2, r2, #2
 800474e:	4093      	lsls	r3, r2
 8004750:	693a      	ldr	r2, [r7, #16]
 8004752:	4313      	orrs	r3, r2
 8004754:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004756:	4937      	ldr	r1, [pc, #220]	@ (8004834 <HAL_GPIO_Init+0x2e8>)
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	089b      	lsrs	r3, r3, #2
 800475c:	3302      	adds	r3, #2
 800475e:	693a      	ldr	r2, [r7, #16]
 8004760:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004764:	4b39      	ldr	r3, [pc, #228]	@ (800484c <HAL_GPIO_Init+0x300>)
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	43db      	mvns	r3, r3
 800476e:	693a      	ldr	r2, [r7, #16]
 8004770:	4013      	ands	r3, r2
 8004772:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800477c:	2b00      	cmp	r3, #0
 800477e:	d003      	beq.n	8004788 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004780:	693a      	ldr	r2, [r7, #16]
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	4313      	orrs	r3, r2
 8004786:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004788:	4a30      	ldr	r2, [pc, #192]	@ (800484c <HAL_GPIO_Init+0x300>)
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800478e:	4b2f      	ldr	r3, [pc, #188]	@ (800484c <HAL_GPIO_Init+0x300>)
 8004790:	68db      	ldr	r3, [r3, #12]
 8004792:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	43db      	mvns	r3, r3
 8004798:	693a      	ldr	r2, [r7, #16]
 800479a:	4013      	ands	r3, r2
 800479c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d003      	beq.n	80047b2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80047aa:	693a      	ldr	r2, [r7, #16]
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	4313      	orrs	r3, r2
 80047b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80047b2:	4a26      	ldr	r2, [pc, #152]	@ (800484c <HAL_GPIO_Init+0x300>)
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80047b8:	4b24      	ldr	r3, [pc, #144]	@ (800484c <HAL_GPIO_Init+0x300>)
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	43db      	mvns	r3, r3
 80047c2:	693a      	ldr	r2, [r7, #16]
 80047c4:	4013      	ands	r3, r2
 80047c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d003      	beq.n	80047dc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80047d4:	693a      	ldr	r2, [r7, #16]
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	4313      	orrs	r3, r2
 80047da:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80047dc:	4a1b      	ldr	r2, [pc, #108]	@ (800484c <HAL_GPIO_Init+0x300>)
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80047e2:	4b1a      	ldr	r3, [pc, #104]	@ (800484c <HAL_GPIO_Init+0x300>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	43db      	mvns	r3, r3
 80047ec:	693a      	ldr	r2, [r7, #16]
 80047ee:	4013      	ands	r3, r2
 80047f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d003      	beq.n	8004806 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80047fe:	693a      	ldr	r2, [r7, #16]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	4313      	orrs	r3, r2
 8004804:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004806:	4a11      	ldr	r2, [pc, #68]	@ (800484c <HAL_GPIO_Init+0x300>)
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	3301      	adds	r3, #1
 8004810:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	fa22 f303 	lsr.w	r3, r2, r3
 800481c:	2b00      	cmp	r3, #0
 800481e:	f47f ae9d 	bne.w	800455c <HAL_GPIO_Init+0x10>
  }
}
 8004822:	bf00      	nop
 8004824:	bf00      	nop
 8004826:	371c      	adds	r7, #28
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr
 8004830:	40021000 	.word	0x40021000
 8004834:	40010000 	.word	0x40010000
 8004838:	48000400 	.word	0x48000400
 800483c:	48000800 	.word	0x48000800
 8004840:	48000c00 	.word	0x48000c00
 8004844:	48001000 	.word	0x48001000
 8004848:	48001400 	.word	0x48001400
 800484c:	40010400 	.word	0x40010400

08004850 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004850:	b480      	push	{r7}
 8004852:	b083      	sub	sp, #12
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	460b      	mov	r3, r1
 800485a:	807b      	strh	r3, [r7, #2]
 800485c:	4613      	mov	r3, r2
 800485e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004860:	787b      	ldrb	r3, [r7, #1]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d003      	beq.n	800486e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004866:	887a      	ldrh	r2, [r7, #2]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800486c:	e002      	b.n	8004874 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800486e:	887a      	ldrh	r2, [r7, #2]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004874:	bf00      	nop
 8004876:	370c      	adds	r7, #12
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr

08004880 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004880:	b480      	push	{r7}
 8004882:	b085      	sub	sp, #20
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	460b      	mov	r3, r1
 800488a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	695b      	ldr	r3, [r3, #20]
 8004890:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004892:	887a      	ldrh	r2, [r7, #2]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	4013      	ands	r3, r2
 8004898:	041a      	lsls	r2, r3, #16
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	43d9      	mvns	r1, r3
 800489e:	887b      	ldrh	r3, [r7, #2]
 80048a0:	400b      	ands	r3, r1
 80048a2:	431a      	orrs	r2, r3
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	619a      	str	r2, [r3, #24]
}
 80048a8:	bf00      	nop
 80048aa:	3714      	adds	r7, #20
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr

080048b4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b084      	sub	sp, #16
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d101      	bne.n	80048c6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	e0c0      	b.n	8004a48 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d106      	bne.n	80048e0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2200      	movs	r2, #0
 80048d6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f00b f92a 	bl	800fb34 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2203      	movs	r2, #3
 80048e4:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4618      	mov	r0, r3
 80048ee:	f003 ffa2 	bl	8008836 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80048f2:	2300      	movs	r3, #0
 80048f4:	73fb      	strb	r3, [r7, #15]
 80048f6:	e03e      	b.n	8004976 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80048f8:	7bfa      	ldrb	r2, [r7, #15]
 80048fa:	6879      	ldr	r1, [r7, #4]
 80048fc:	4613      	mov	r3, r2
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	4413      	add	r3, r2
 8004902:	00db      	lsls	r3, r3, #3
 8004904:	440b      	add	r3, r1
 8004906:	3311      	adds	r3, #17
 8004908:	2201      	movs	r2, #1
 800490a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800490c:	7bfa      	ldrb	r2, [r7, #15]
 800490e:	6879      	ldr	r1, [r7, #4]
 8004910:	4613      	mov	r3, r2
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	4413      	add	r3, r2
 8004916:	00db      	lsls	r3, r3, #3
 8004918:	440b      	add	r3, r1
 800491a:	3310      	adds	r3, #16
 800491c:	7bfa      	ldrb	r2, [r7, #15]
 800491e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004920:	7bfa      	ldrb	r2, [r7, #15]
 8004922:	6879      	ldr	r1, [r7, #4]
 8004924:	4613      	mov	r3, r2
 8004926:	009b      	lsls	r3, r3, #2
 8004928:	4413      	add	r3, r2
 800492a:	00db      	lsls	r3, r3, #3
 800492c:	440b      	add	r3, r1
 800492e:	3313      	adds	r3, #19
 8004930:	2200      	movs	r2, #0
 8004932:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004934:	7bfa      	ldrb	r2, [r7, #15]
 8004936:	6879      	ldr	r1, [r7, #4]
 8004938:	4613      	mov	r3, r2
 800493a:	009b      	lsls	r3, r3, #2
 800493c:	4413      	add	r3, r2
 800493e:	00db      	lsls	r3, r3, #3
 8004940:	440b      	add	r3, r1
 8004942:	3320      	adds	r3, #32
 8004944:	2200      	movs	r2, #0
 8004946:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004948:	7bfa      	ldrb	r2, [r7, #15]
 800494a:	6879      	ldr	r1, [r7, #4]
 800494c:	4613      	mov	r3, r2
 800494e:	009b      	lsls	r3, r3, #2
 8004950:	4413      	add	r3, r2
 8004952:	00db      	lsls	r3, r3, #3
 8004954:	440b      	add	r3, r1
 8004956:	3324      	adds	r3, #36	@ 0x24
 8004958:	2200      	movs	r2, #0
 800495a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800495c:	7bfb      	ldrb	r3, [r7, #15]
 800495e:	6879      	ldr	r1, [r7, #4]
 8004960:	1c5a      	adds	r2, r3, #1
 8004962:	4613      	mov	r3, r2
 8004964:	009b      	lsls	r3, r3, #2
 8004966:	4413      	add	r3, r2
 8004968:	00db      	lsls	r3, r3, #3
 800496a:	440b      	add	r3, r1
 800496c:	2200      	movs	r2, #0
 800496e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004970:	7bfb      	ldrb	r3, [r7, #15]
 8004972:	3301      	adds	r3, #1
 8004974:	73fb      	strb	r3, [r7, #15]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	791b      	ldrb	r3, [r3, #4]
 800497a:	7bfa      	ldrb	r2, [r7, #15]
 800497c:	429a      	cmp	r2, r3
 800497e:	d3bb      	bcc.n	80048f8 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004980:	2300      	movs	r3, #0
 8004982:	73fb      	strb	r3, [r7, #15]
 8004984:	e044      	b.n	8004a10 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004986:	7bfa      	ldrb	r2, [r7, #15]
 8004988:	6879      	ldr	r1, [r7, #4]
 800498a:	4613      	mov	r3, r2
 800498c:	009b      	lsls	r3, r3, #2
 800498e:	4413      	add	r3, r2
 8004990:	00db      	lsls	r3, r3, #3
 8004992:	440b      	add	r3, r1
 8004994:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8004998:	2200      	movs	r2, #0
 800499a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800499c:	7bfa      	ldrb	r2, [r7, #15]
 800499e:	6879      	ldr	r1, [r7, #4]
 80049a0:	4613      	mov	r3, r2
 80049a2:	009b      	lsls	r3, r3, #2
 80049a4:	4413      	add	r3, r2
 80049a6:	00db      	lsls	r3, r3, #3
 80049a8:	440b      	add	r3, r1
 80049aa:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80049ae:	7bfa      	ldrb	r2, [r7, #15]
 80049b0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80049b2:	7bfa      	ldrb	r2, [r7, #15]
 80049b4:	6879      	ldr	r1, [r7, #4]
 80049b6:	4613      	mov	r3, r2
 80049b8:	009b      	lsls	r3, r3, #2
 80049ba:	4413      	add	r3, r2
 80049bc:	00db      	lsls	r3, r3, #3
 80049be:	440b      	add	r3, r1
 80049c0:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80049c4:	2200      	movs	r2, #0
 80049c6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80049c8:	7bfa      	ldrb	r2, [r7, #15]
 80049ca:	6879      	ldr	r1, [r7, #4]
 80049cc:	4613      	mov	r3, r2
 80049ce:	009b      	lsls	r3, r3, #2
 80049d0:	4413      	add	r3, r2
 80049d2:	00db      	lsls	r3, r3, #3
 80049d4:	440b      	add	r3, r1
 80049d6:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80049da:	2200      	movs	r2, #0
 80049dc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80049de:	7bfa      	ldrb	r2, [r7, #15]
 80049e0:	6879      	ldr	r1, [r7, #4]
 80049e2:	4613      	mov	r3, r2
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	4413      	add	r3, r2
 80049e8:	00db      	lsls	r3, r3, #3
 80049ea:	440b      	add	r3, r1
 80049ec:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80049f0:	2200      	movs	r2, #0
 80049f2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80049f4:	7bfa      	ldrb	r2, [r7, #15]
 80049f6:	6879      	ldr	r1, [r7, #4]
 80049f8:	4613      	mov	r3, r2
 80049fa:	009b      	lsls	r3, r3, #2
 80049fc:	4413      	add	r3, r2
 80049fe:	00db      	lsls	r3, r3, #3
 8004a00:	440b      	add	r3, r1
 8004a02:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8004a06:	2200      	movs	r2, #0
 8004a08:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a0a:	7bfb      	ldrb	r3, [r7, #15]
 8004a0c:	3301      	adds	r3, #1
 8004a0e:	73fb      	strb	r3, [r7, #15]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	791b      	ldrb	r3, [r3, #4]
 8004a14:	7bfa      	ldrb	r2, [r7, #15]
 8004a16:	429a      	cmp	r2, r3
 8004a18:	d3b5      	bcc.n	8004986 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6818      	ldr	r0, [r3, #0]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	3304      	adds	r3, #4
 8004a22:	e893 0006 	ldmia.w	r3, {r1, r2}
 8004a26:	f003 ff21 	bl	800886c <USB_DevInit>

  hpcd->USB_Address = 0U;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2201      	movs	r2, #1
 8004a34:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	7a9b      	ldrb	r3, [r3, #10]
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d102      	bne.n	8004a46 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	f001 fc0e 	bl	8006262 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8004a46:	2300      	movs	r3, #0
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3710      	adds	r7, #16
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}

08004a50 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b082      	sub	sp, #8
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004a5e:	2b01      	cmp	r3, #1
 8004a60:	d101      	bne.n	8004a66 <HAL_PCD_Start+0x16>
 8004a62:	2302      	movs	r3, #2
 8004a64:	e012      	b.n	8004a8c <HAL_PCD_Start+0x3c>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2201      	movs	r2, #1
 8004a6a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4618      	mov	r0, r3
 8004a74:	f003 fec8 	bl	8008808 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f005 fca5 	bl	800a3cc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2200      	movs	r2, #0
 8004a86:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8004a8a:	2300      	movs	r3, #0
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3708      	adds	r7, #8
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}

08004a94 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b084      	sub	sp, #16
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f005 fcaa 	bl	800a3fa <USB_ReadInterrupts>
 8004aa6:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d003      	beq.n	8004aba <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f000 fb06 	bl	80050c4 <PCD_EP_ISR_Handler>

    return;
 8004ab8:	e110      	b.n	8004cdc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d013      	beq.n	8004aec <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004acc:	b29a      	uxth	r2, r3
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ad6:	b292      	uxth	r2, r2
 8004ad8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f00b f8ba 	bl	800fc56 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004ae2:	2100      	movs	r1, #0
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f000 f8fc 	bl	8004ce2 <HAL_PCD_SetAddress>

    return;
 8004aea:	e0f7      	b.n	8004cdc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d00c      	beq.n	8004b10 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004afe:	b29a      	uxth	r2, r3
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004b08:	b292      	uxth	r2, r2
 8004b0a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004b0e:	e0e5      	b.n	8004cdc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d00c      	beq.n	8004b34 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004b22:	b29a      	uxth	r2, r3
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004b2c:	b292      	uxth	r2, r2
 8004b2e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004b32:	e0d3      	b.n	8004cdc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d034      	beq.n	8004ba8 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004b46:	b29a      	uxth	r2, r3
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f022 0204 	bic.w	r2, r2, #4
 8004b50:	b292      	uxth	r2, r2
 8004b52:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004b5e:	b29a      	uxth	r2, r3
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f022 0208 	bic.w	r2, r2, #8
 8004b68:	b292      	uxth	r2, r2
 8004b6a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d107      	bne.n	8004b88 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004b80:	2100      	movs	r1, #0
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f00b fa5a 	bl	801003c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	f00b f89d 	bl	800fcc8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004b96:	b29a      	uxth	r2, r3
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004ba0:	b292      	uxth	r2, r2
 8004ba2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004ba6:	e099      	b.n	8004cdc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d027      	beq.n	8004c02 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004bba:	b29a      	uxth	r2, r3
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f042 0208 	orr.w	r2, r2, #8
 8004bc4:	b292      	uxth	r2, r2
 8004bc6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004bd2:	b29a      	uxth	r2, r3
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004bdc:	b292      	uxth	r2, r2
 8004bde:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004bea:	b29a      	uxth	r2, r3
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f042 0204 	orr.w	r2, r2, #4
 8004bf4:	b292      	uxth	r2, r2
 8004bf6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f00b f84a 	bl	800fc94 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004c00:	e06c      	b.n	8004cdc <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d040      	beq.n	8004c8e <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004c14:	b29a      	uxth	r2, r3
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004c1e:	b292      	uxth	r2, r2
 8004c20:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d12b      	bne.n	8004c86 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004c36:	b29a      	uxth	r2, r3
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f042 0204 	orr.w	r2, r2, #4
 8004c40:	b292      	uxth	r2, r2
 8004c42:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004c4e:	b29a      	uxth	r2, r3
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f042 0208 	orr.w	r2, r2, #8
 8004c58:	b292      	uxth	r2, r2
 8004c5a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2201      	movs	r2, #1
 8004c62:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	089b      	lsrs	r3, r3, #2
 8004c72:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004c7c:	2101      	movs	r1, #1
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f00b f9dc 	bl	801003c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8004c84:	e02a      	b.n	8004cdc <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f00b f804 	bl	800fc94 <HAL_PCD_SuspendCallback>
    return;
 8004c8c:	e026      	b.n	8004cdc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d00f      	beq.n	8004cb8 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004ca0:	b29a      	uxth	r2, r3
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004caa:	b292      	uxth	r2, r2
 8004cac:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	f00a ffc2 	bl	800fc3a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004cb6:	e011      	b.n	8004cdc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d00c      	beq.n	8004cdc <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004cca:	b29a      	uxth	r2, r3
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004cd4:	b292      	uxth	r2, r2
 8004cd6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004cda:	bf00      	nop
  }
}
 8004cdc:	3710      	adds	r7, #16
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}

08004ce2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004ce2:	b580      	push	{r7, lr}
 8004ce4:	b082      	sub	sp, #8
 8004ce6:	af00      	add	r7, sp, #0
 8004ce8:	6078      	str	r0, [r7, #4]
 8004cea:	460b      	mov	r3, r1
 8004cec:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d101      	bne.n	8004cfc <HAL_PCD_SetAddress+0x1a>
 8004cf8:	2302      	movs	r3, #2
 8004cfa:	e012      	b.n	8004d22 <HAL_PCD_SetAddress+0x40>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	78fa      	ldrb	r2, [r7, #3]
 8004d08:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	78fa      	ldrb	r2, [r7, #3]
 8004d10:	4611      	mov	r1, r2
 8004d12:	4618      	mov	r0, r3
 8004d14:	f005 fb46 	bl	800a3a4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8004d20:	2300      	movs	r3, #0
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3708      	adds	r7, #8
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}

08004d2a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004d2a:	b580      	push	{r7, lr}
 8004d2c:	b084      	sub	sp, #16
 8004d2e:	af00      	add	r7, sp, #0
 8004d30:	6078      	str	r0, [r7, #4]
 8004d32:	4608      	mov	r0, r1
 8004d34:	4611      	mov	r1, r2
 8004d36:	461a      	mov	r2, r3
 8004d38:	4603      	mov	r3, r0
 8004d3a:	70fb      	strb	r3, [r7, #3]
 8004d3c:	460b      	mov	r3, r1
 8004d3e:	803b      	strh	r3, [r7, #0]
 8004d40:	4613      	mov	r3, r2
 8004d42:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8004d44:	2300      	movs	r3, #0
 8004d46:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004d48:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	da0e      	bge.n	8004d6e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d50:	78fb      	ldrb	r3, [r7, #3]
 8004d52:	f003 0207 	and.w	r2, r3, #7
 8004d56:	4613      	mov	r3, r2
 8004d58:	009b      	lsls	r3, r3, #2
 8004d5a:	4413      	add	r3, r2
 8004d5c:	00db      	lsls	r3, r3, #3
 8004d5e:	3310      	adds	r3, #16
 8004d60:	687a      	ldr	r2, [r7, #4]
 8004d62:	4413      	add	r3, r2
 8004d64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2201      	movs	r2, #1
 8004d6a:	705a      	strb	r2, [r3, #1]
 8004d6c:	e00e      	b.n	8004d8c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004d6e:	78fb      	ldrb	r3, [r7, #3]
 8004d70:	f003 0207 	and.w	r2, r3, #7
 8004d74:	4613      	mov	r3, r2
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	4413      	add	r3, r2
 8004d7a:	00db      	lsls	r3, r3, #3
 8004d7c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004d80:	687a      	ldr	r2, [r7, #4]
 8004d82:	4413      	add	r3, r2
 8004d84:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004d8c:	78fb      	ldrb	r3, [r7, #3]
 8004d8e:	f003 0307 	and.w	r3, r3, #7
 8004d92:	b2da      	uxtb	r2, r3
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8004d98:	883b      	ldrh	r3, [r7, #0]
 8004d9a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	78ba      	ldrb	r2, [r7, #2]
 8004da6:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004da8:	78bb      	ldrb	r3, [r7, #2]
 8004daa:	2b02      	cmp	r3, #2
 8004dac:	d102      	bne.n	8004db4 <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2200      	movs	r2, #0
 8004db2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	d101      	bne.n	8004dc2 <HAL_PCD_EP_Open+0x98>
 8004dbe:	2302      	movs	r3, #2
 8004dc0:	e00e      	b.n	8004de0 <HAL_PCD_EP_Open+0xb6>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	68f9      	ldr	r1, [r7, #12]
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	f003 fd69 	bl	80088a8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8004dde:	7afb      	ldrb	r3, [r7, #11]
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	3710      	adds	r7, #16
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}

08004de8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b084      	sub	sp, #16
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
 8004df0:	460b      	mov	r3, r1
 8004df2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004df4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	da0e      	bge.n	8004e1a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004dfc:	78fb      	ldrb	r3, [r7, #3]
 8004dfe:	f003 0207 	and.w	r2, r3, #7
 8004e02:	4613      	mov	r3, r2
 8004e04:	009b      	lsls	r3, r3, #2
 8004e06:	4413      	add	r3, r2
 8004e08:	00db      	lsls	r3, r3, #3
 8004e0a:	3310      	adds	r3, #16
 8004e0c:	687a      	ldr	r2, [r7, #4]
 8004e0e:	4413      	add	r3, r2
 8004e10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2201      	movs	r2, #1
 8004e16:	705a      	strb	r2, [r3, #1]
 8004e18:	e00e      	b.n	8004e38 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004e1a:	78fb      	ldrb	r3, [r7, #3]
 8004e1c:	f003 0207 	and.w	r2, r3, #7
 8004e20:	4613      	mov	r3, r2
 8004e22:	009b      	lsls	r3, r3, #2
 8004e24:	4413      	add	r3, r2
 8004e26:	00db      	lsls	r3, r3, #3
 8004e28:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004e2c:	687a      	ldr	r2, [r7, #4]
 8004e2e:	4413      	add	r3, r2
 8004e30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2200      	movs	r2, #0
 8004e36:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004e38:	78fb      	ldrb	r3, [r7, #3]
 8004e3a:	f003 0307 	and.w	r3, r3, #7
 8004e3e:	b2da      	uxtb	r2, r3
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004e4a:	2b01      	cmp	r3, #1
 8004e4c:	d101      	bne.n	8004e52 <HAL_PCD_EP_Close+0x6a>
 8004e4e:	2302      	movs	r3, #2
 8004e50:	e00e      	b.n	8004e70 <HAL_PCD_EP_Close+0x88>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2201      	movs	r2, #1
 8004e56:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	68f9      	ldr	r1, [r7, #12]
 8004e60:	4618      	mov	r0, r3
 8004e62:	f004 fa09 	bl	8009278 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8004e6e:	2300      	movs	r3, #0
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	3710      	adds	r7, #16
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}

08004e78 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b086      	sub	sp, #24
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	60f8      	str	r0, [r7, #12]
 8004e80:	607a      	str	r2, [r7, #4]
 8004e82:	603b      	str	r3, [r7, #0]
 8004e84:	460b      	mov	r3, r1
 8004e86:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004e88:	7afb      	ldrb	r3, [r7, #11]
 8004e8a:	f003 0207 	and.w	r2, r3, #7
 8004e8e:	4613      	mov	r3, r2
 8004e90:	009b      	lsls	r3, r3, #2
 8004e92:	4413      	add	r3, r2
 8004e94:	00db      	lsls	r3, r3, #3
 8004e96:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004e9a:	68fa      	ldr	r2, [r7, #12]
 8004e9c:	4413      	add	r3, r2
 8004e9e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	687a      	ldr	r2, [r7, #4]
 8004ea4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	683a      	ldr	r2, [r7, #0]
 8004eaa:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004eb8:	7afb      	ldrb	r3, [r7, #11]
 8004eba:	f003 0307 	and.w	r3, r3, #7
 8004ebe:	b2da      	uxtb	r2, r3
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	6979      	ldr	r1, [r7, #20]
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f004 fbc1 	bl	8009652 <USB_EPStartXfer>

  return HAL_OK;
 8004ed0:	2300      	movs	r3, #0
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	3718      	adds	r7, #24
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}

08004eda <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004eda:	b480      	push	{r7}
 8004edc:	b083      	sub	sp, #12
 8004ede:	af00      	add	r7, sp, #0
 8004ee0:	6078      	str	r0, [r7, #4]
 8004ee2:	460b      	mov	r3, r1
 8004ee4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004ee6:	78fb      	ldrb	r3, [r7, #3]
 8004ee8:	f003 0207 	and.w	r2, r3, #7
 8004eec:	6879      	ldr	r1, [r7, #4]
 8004eee:	4613      	mov	r3, r2
 8004ef0:	009b      	lsls	r3, r3, #2
 8004ef2:	4413      	add	r3, r2
 8004ef4:	00db      	lsls	r3, r3, #3
 8004ef6:	440b      	add	r3, r1
 8004ef8:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8004efc:	681b      	ldr	r3, [r3, #0]
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	370c      	adds	r7, #12
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr

08004f0a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004f0a:	b580      	push	{r7, lr}
 8004f0c:	b086      	sub	sp, #24
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	60f8      	str	r0, [r7, #12]
 8004f12:	607a      	str	r2, [r7, #4]
 8004f14:	603b      	str	r3, [r7, #0]
 8004f16:	460b      	mov	r3, r1
 8004f18:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f1a:	7afb      	ldrb	r3, [r7, #11]
 8004f1c:	f003 0207 	and.w	r2, r3, #7
 8004f20:	4613      	mov	r3, r2
 8004f22:	009b      	lsls	r3, r3, #2
 8004f24:	4413      	add	r3, r2
 8004f26:	00db      	lsls	r3, r3, #3
 8004f28:	3310      	adds	r3, #16
 8004f2a:	68fa      	ldr	r2, [r7, #12]
 8004f2c:	4413      	add	r3, r2
 8004f2e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	687a      	ldr	r2, [r7, #4]
 8004f34:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	683a      	ldr	r2, [r7, #0]
 8004f3a:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	2201      	movs	r2, #1
 8004f40:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	683a      	ldr	r2, [r7, #0]
 8004f48:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	2201      	movs	r2, #1
 8004f54:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004f56:	7afb      	ldrb	r3, [r7, #11]
 8004f58:	f003 0307 	and.w	r3, r3, #7
 8004f5c:	b2da      	uxtb	r2, r3
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	6979      	ldr	r1, [r7, #20]
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f004 fb72 	bl	8009652 <USB_EPStartXfer>

  return HAL_OK;
 8004f6e:	2300      	movs	r3, #0
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	3718      	adds	r7, #24
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}

08004f78 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b084      	sub	sp, #16
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
 8004f80:	460b      	mov	r3, r1
 8004f82:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004f84:	78fb      	ldrb	r3, [r7, #3]
 8004f86:	f003 0307 	and.w	r3, r3, #7
 8004f8a:	687a      	ldr	r2, [r7, #4]
 8004f8c:	7912      	ldrb	r2, [r2, #4]
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d901      	bls.n	8004f96 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	e03e      	b.n	8005014 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004f96:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	da0e      	bge.n	8004fbc <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f9e:	78fb      	ldrb	r3, [r7, #3]
 8004fa0:	f003 0207 	and.w	r2, r3, #7
 8004fa4:	4613      	mov	r3, r2
 8004fa6:	009b      	lsls	r3, r3, #2
 8004fa8:	4413      	add	r3, r2
 8004faa:	00db      	lsls	r3, r3, #3
 8004fac:	3310      	adds	r3, #16
 8004fae:	687a      	ldr	r2, [r7, #4]
 8004fb0:	4413      	add	r3, r2
 8004fb2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	705a      	strb	r2, [r3, #1]
 8004fba:	e00c      	b.n	8004fd6 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004fbc:	78fa      	ldrb	r2, [r7, #3]
 8004fbe:	4613      	mov	r3, r2
 8004fc0:	009b      	lsls	r3, r3, #2
 8004fc2:	4413      	add	r3, r2
 8004fc4:	00db      	lsls	r3, r3, #3
 8004fc6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004fca:	687a      	ldr	r2, [r7, #4]
 8004fcc:	4413      	add	r3, r2
 8004fce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2201      	movs	r2, #1
 8004fda:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004fdc:	78fb      	ldrb	r3, [r7, #3]
 8004fde:	f003 0307 	and.w	r3, r3, #7
 8004fe2:	b2da      	uxtb	r2, r3
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004fee:	2b01      	cmp	r3, #1
 8004ff0:	d101      	bne.n	8004ff6 <HAL_PCD_EP_SetStall+0x7e>
 8004ff2:	2302      	movs	r3, #2
 8004ff4:	e00e      	b.n	8005014 <HAL_PCD_EP_SetStall+0x9c>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	68f9      	ldr	r1, [r7, #12]
 8005004:	4618      	mov	r0, r3
 8005006:	f005 f8d3 	bl	800a1b0 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2200      	movs	r2, #0
 800500e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8005012:	2300      	movs	r3, #0
}
 8005014:	4618      	mov	r0, r3
 8005016:	3710      	adds	r7, #16
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}

0800501c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b084      	sub	sp, #16
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
 8005024:	460b      	mov	r3, r1
 8005026:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005028:	78fb      	ldrb	r3, [r7, #3]
 800502a:	f003 030f 	and.w	r3, r3, #15
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	7912      	ldrb	r2, [r2, #4]
 8005032:	4293      	cmp	r3, r2
 8005034:	d901      	bls.n	800503a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	e040      	b.n	80050bc <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800503a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800503e:	2b00      	cmp	r3, #0
 8005040:	da0e      	bge.n	8005060 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005042:	78fb      	ldrb	r3, [r7, #3]
 8005044:	f003 0207 	and.w	r2, r3, #7
 8005048:	4613      	mov	r3, r2
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	4413      	add	r3, r2
 800504e:	00db      	lsls	r3, r3, #3
 8005050:	3310      	adds	r3, #16
 8005052:	687a      	ldr	r2, [r7, #4]
 8005054:	4413      	add	r3, r2
 8005056:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2201      	movs	r2, #1
 800505c:	705a      	strb	r2, [r3, #1]
 800505e:	e00e      	b.n	800507e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005060:	78fb      	ldrb	r3, [r7, #3]
 8005062:	f003 0207 	and.w	r2, r3, #7
 8005066:	4613      	mov	r3, r2
 8005068:	009b      	lsls	r3, r3, #2
 800506a:	4413      	add	r3, r2
 800506c:	00db      	lsls	r3, r3, #3
 800506e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	4413      	add	r3, r2
 8005076:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2200      	movs	r2, #0
 800507c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2200      	movs	r2, #0
 8005082:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005084:	78fb      	ldrb	r3, [r7, #3]
 8005086:	f003 0307 	and.w	r3, r3, #7
 800508a:	b2da      	uxtb	r2, r3
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005096:	2b01      	cmp	r3, #1
 8005098:	d101      	bne.n	800509e <HAL_PCD_EP_ClrStall+0x82>
 800509a:	2302      	movs	r3, #2
 800509c:	e00e      	b.n	80050bc <HAL_PCD_EP_ClrStall+0xa0>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2201      	movs	r2, #1
 80050a2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	68f9      	ldr	r1, [r7, #12]
 80050ac:	4618      	mov	r0, r3
 80050ae:	f005 f8d0 	bl	800a252 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2200      	movs	r2, #0
 80050b6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80050ba:	2300      	movs	r3, #0
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3710      	adds	r7, #16
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}

080050c4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b092      	sub	sp, #72	@ 0x48
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80050cc:	e333      	b.n	8005736 <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80050d6:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80050d8:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80050da:	b2db      	uxtb	r3, r3
 80050dc:	f003 030f 	and.w	r3, r3, #15
 80050e0:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 80050e4:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	f040 8108 	bne.w	80052fe <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80050ee:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80050f0:	f003 0310 	and.w	r3, r3, #16
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d14c      	bne.n	8005192 <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	881b      	ldrh	r3, [r3, #0]
 80050fe:	b29b      	uxth	r3, r3
 8005100:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8005104:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005108:	813b      	strh	r3, [r7, #8]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	893b      	ldrh	r3, [r7, #8]
 8005110:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005114:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005118:	b29b      	uxth	r3, r3
 800511a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	3310      	adds	r3, #16
 8005120:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800512a:	b29b      	uxth	r3, r3
 800512c:	461a      	mov	r2, r3
 800512e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005130:	781b      	ldrb	r3, [r3, #0]
 8005132:	00db      	lsls	r3, r3, #3
 8005134:	4413      	add	r3, r2
 8005136:	687a      	ldr	r2, [r7, #4]
 8005138:	6812      	ldr	r2, [r2, #0]
 800513a:	4413      	add	r3, r2
 800513c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005140:	881b      	ldrh	r3, [r3, #0]
 8005142:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005146:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005148:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800514a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800514c:	695a      	ldr	r2, [r3, #20]
 800514e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005150:	69db      	ldr	r3, [r3, #28]
 8005152:	441a      	add	r2, r3
 8005154:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005156:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8005158:	2100      	movs	r1, #0
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f00a fd53 	bl	800fc06 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	7b1b      	ldrb	r3, [r3, #12]
 8005164:	b2db      	uxtb	r3, r3
 8005166:	2b00      	cmp	r3, #0
 8005168:	f000 82e5 	beq.w	8005736 <PCD_EP_ISR_Handler+0x672>
 800516c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800516e:	699b      	ldr	r3, [r3, #24]
 8005170:	2b00      	cmp	r3, #0
 8005172:	f040 82e0 	bne.w	8005736 <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	7b1b      	ldrb	r3, [r3, #12]
 800517a:	b2db      	uxtb	r3, r3
 800517c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005180:	b2da      	uxtb	r2, r3
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2200      	movs	r2, #0
 800518e:	731a      	strb	r2, [r3, #12]
 8005190:	e2d1      	b.n	8005736 <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005198:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	881b      	ldrh	r3, [r3, #0]
 80051a0:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80051a2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80051a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d032      	beq.n	8005212 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80051b4:	b29b      	uxth	r3, r3
 80051b6:	461a      	mov	r2, r3
 80051b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80051ba:	781b      	ldrb	r3, [r3, #0]
 80051bc:	00db      	lsls	r3, r3, #3
 80051be:	4413      	add	r3, r2
 80051c0:	687a      	ldr	r2, [r7, #4]
 80051c2:	6812      	ldr	r2, [r2, #0]
 80051c4:	4413      	add	r3, r2
 80051c6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80051ca:	881b      	ldrh	r3, [r3, #0]
 80051cc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80051d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80051d2:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6818      	ldr	r0, [r3, #0]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 80051de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80051e0:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80051e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80051e4:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80051e6:	b29b      	uxth	r3, r3
 80051e8:	f005 f959 	bl	800a49e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	881b      	ldrh	r3, [r3, #0]
 80051f2:	b29a      	uxth	r2, r3
 80051f4:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80051f8:	4013      	ands	r3, r2
 80051fa:	817b      	strh	r3, [r7, #10]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	897a      	ldrh	r2, [r7, #10]
 8005202:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005206:	b292      	uxth	r2, r2
 8005208:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f00a fcce 	bl	800fbac <HAL_PCD_SetupStageCallback>
 8005210:	e291      	b.n	8005736 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005212:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8005216:	2b00      	cmp	r3, #0
 8005218:	f280 828d 	bge.w	8005736 <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	881b      	ldrh	r3, [r3, #0]
 8005222:	b29a      	uxth	r2, r3
 8005224:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8005228:	4013      	ands	r3, r2
 800522a:	81fb      	strh	r3, [r7, #14]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	89fa      	ldrh	r2, [r7, #14]
 8005232:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005236:	b292      	uxth	r2, r2
 8005238:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005242:	b29b      	uxth	r3, r3
 8005244:	461a      	mov	r2, r3
 8005246:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005248:	781b      	ldrb	r3, [r3, #0]
 800524a:	00db      	lsls	r3, r3, #3
 800524c:	4413      	add	r3, r2
 800524e:	687a      	ldr	r2, [r7, #4]
 8005250:	6812      	ldr	r2, [r2, #0]
 8005252:	4413      	add	r3, r2
 8005254:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005258:	881b      	ldrh	r3, [r3, #0]
 800525a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800525e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005260:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8005262:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005264:	69db      	ldr	r3, [r3, #28]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d019      	beq.n	800529e <PCD_EP_ISR_Handler+0x1da>
 800526a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800526c:	695b      	ldr	r3, [r3, #20]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d015      	beq.n	800529e <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6818      	ldr	r0, [r3, #0]
 8005276:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005278:	6959      	ldr	r1, [r3, #20]
 800527a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800527c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800527e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005280:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005282:	b29b      	uxth	r3, r3
 8005284:	f005 f90b 	bl	800a49e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8005288:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800528a:	695a      	ldr	r2, [r3, #20]
 800528c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800528e:	69db      	ldr	r3, [r3, #28]
 8005290:	441a      	add	r2, r3
 8005292:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005294:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8005296:	2100      	movs	r1, #0
 8005298:	6878      	ldr	r0, [r7, #4]
 800529a:	f00a fc99 	bl	800fbd0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	881b      	ldrh	r3, [r3, #0]
 80052a4:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80052a6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80052a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	f040 8242 	bne.w	8005736 <PCD_EP_ISR_Handler+0x672>
 80052b2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80052b4:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80052b8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80052bc:	f000 823b 	beq.w	8005736 <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	881b      	ldrh	r3, [r3, #0]
 80052c6:	b29b      	uxth	r3, r3
 80052c8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80052cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052d0:	81bb      	strh	r3, [r7, #12]
 80052d2:	89bb      	ldrh	r3, [r7, #12]
 80052d4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80052d8:	81bb      	strh	r3, [r7, #12]
 80052da:	89bb      	ldrh	r3, [r7, #12]
 80052dc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80052e0:	81bb      	strh	r3, [r7, #12]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681a      	ldr	r2, [r3, #0]
 80052e6:	89bb      	ldrh	r3, [r7, #12]
 80052e8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80052ec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80052f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80052f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80052f8:	b29b      	uxth	r3, r3
 80052fa:	8013      	strh	r3, [r2, #0]
 80052fc:	e21b      	b.n	8005736 <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	461a      	mov	r2, r3
 8005304:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8005308:	009b      	lsls	r3, r3, #2
 800530a:	4413      	add	r3, r2
 800530c:	881b      	ldrh	r3, [r3, #0]
 800530e:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005310:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8005314:	2b00      	cmp	r3, #0
 8005316:	f280 80f1 	bge.w	80054fc <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	461a      	mov	r2, r3
 8005320:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8005324:	009b      	lsls	r3, r3, #2
 8005326:	4413      	add	r3, r2
 8005328:	881b      	ldrh	r3, [r3, #0]
 800532a:	b29a      	uxth	r2, r3
 800532c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8005330:	4013      	ands	r3, r2
 8005332:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	461a      	mov	r2, r3
 800533a:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800533e:	009b      	lsls	r3, r3, #2
 8005340:	4413      	add	r3, r2
 8005342:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005344:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005348:	b292      	uxth	r2, r2
 800534a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800534c:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8005350:	4613      	mov	r3, r2
 8005352:	009b      	lsls	r3, r3, #2
 8005354:	4413      	add	r3, r2
 8005356:	00db      	lsls	r3, r3, #3
 8005358:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800535c:	687a      	ldr	r2, [r7, #4]
 800535e:	4413      	add	r3, r2
 8005360:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8005362:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005364:	7b1b      	ldrb	r3, [r3, #12]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d123      	bne.n	80053b2 <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005372:	b29b      	uxth	r3, r3
 8005374:	461a      	mov	r2, r3
 8005376:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005378:	781b      	ldrb	r3, [r3, #0]
 800537a:	00db      	lsls	r3, r3, #3
 800537c:	4413      	add	r3, r2
 800537e:	687a      	ldr	r2, [r7, #4]
 8005380:	6812      	ldr	r2, [r2, #0]
 8005382:	4413      	add	r3, r2
 8005384:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005388:	881b      	ldrh	r3, [r3, #0]
 800538a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800538e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 8005392:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005396:	2b00      	cmp	r3, #0
 8005398:	f000 808b 	beq.w	80054b2 <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6818      	ldr	r0, [r3, #0]
 80053a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80053a2:	6959      	ldr	r1, [r3, #20]
 80053a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80053a6:	88da      	ldrh	r2, [r3, #6]
 80053a8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80053ac:	f005 f877 	bl	800a49e <USB_ReadPMA>
 80053b0:	e07f      	b.n	80054b2 <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80053b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80053b4:	78db      	ldrb	r3, [r3, #3]
 80053b6:	2b02      	cmp	r3, #2
 80053b8:	d109      	bne.n	80053ce <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80053ba:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80053bc:	461a      	mov	r2, r3
 80053be:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	f000 f9c6 	bl	8005752 <HAL_PCD_EP_DB_Receive>
 80053c6:	4603      	mov	r3, r0
 80053c8:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80053cc:	e071      	b.n	80054b2 <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	461a      	mov	r2, r3
 80053d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80053d6:	781b      	ldrb	r3, [r3, #0]
 80053d8:	009b      	lsls	r3, r3, #2
 80053da:	4413      	add	r3, r2
 80053dc:	881b      	ldrh	r3, [r3, #0]
 80053de:	b29b      	uxth	r3, r3
 80053e0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80053e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053e8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	461a      	mov	r2, r3
 80053f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80053f2:	781b      	ldrb	r3, [r3, #0]
 80053f4:	009b      	lsls	r3, r3, #2
 80053f6:	441a      	add	r2, r3
 80053f8:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80053fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80053fe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005402:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005406:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800540a:	b29b      	uxth	r3, r3
 800540c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	461a      	mov	r2, r3
 8005414:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005416:	781b      	ldrb	r3, [r3, #0]
 8005418:	009b      	lsls	r3, r3, #2
 800541a:	4413      	add	r3, r2
 800541c:	881b      	ldrh	r3, [r3, #0]
 800541e:	b29b      	uxth	r3, r3
 8005420:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005424:	2b00      	cmp	r3, #0
 8005426:	d022      	beq.n	800546e <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005430:	b29b      	uxth	r3, r3
 8005432:	461a      	mov	r2, r3
 8005434:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005436:	781b      	ldrb	r3, [r3, #0]
 8005438:	00db      	lsls	r3, r3, #3
 800543a:	4413      	add	r3, r2
 800543c:	687a      	ldr	r2, [r7, #4]
 800543e:	6812      	ldr	r2, [r2, #0]
 8005440:	4413      	add	r3, r2
 8005442:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005446:	881b      	ldrh	r3, [r3, #0]
 8005448:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800544c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8005450:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005454:	2b00      	cmp	r3, #0
 8005456:	d02c      	beq.n	80054b2 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6818      	ldr	r0, [r3, #0]
 800545c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800545e:	6959      	ldr	r1, [r3, #20]
 8005460:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005462:	891a      	ldrh	r2, [r3, #8]
 8005464:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005468:	f005 f819 	bl	800a49e <USB_ReadPMA>
 800546c:	e021      	b.n	80054b2 <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005476:	b29b      	uxth	r3, r3
 8005478:	461a      	mov	r2, r3
 800547a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800547c:	781b      	ldrb	r3, [r3, #0]
 800547e:	00db      	lsls	r3, r3, #3
 8005480:	4413      	add	r3, r2
 8005482:	687a      	ldr	r2, [r7, #4]
 8005484:	6812      	ldr	r2, [r2, #0]
 8005486:	4413      	add	r3, r2
 8005488:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800548c:	881b      	ldrh	r3, [r3, #0]
 800548e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005492:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8005496:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800549a:	2b00      	cmp	r3, #0
 800549c:	d009      	beq.n	80054b2 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6818      	ldr	r0, [r3, #0]
 80054a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80054a4:	6959      	ldr	r1, [r3, #20]
 80054a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80054a8:	895a      	ldrh	r2, [r3, #10]
 80054aa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80054ae:	f004 fff6 	bl	800a49e <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80054b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80054b4:	69da      	ldr	r2, [r3, #28]
 80054b6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80054ba:	441a      	add	r2, r3
 80054bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80054be:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80054c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80054c2:	695a      	ldr	r2, [r3, #20]
 80054c4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80054c8:	441a      	add	r2, r3
 80054ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80054cc:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80054ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80054d0:	699b      	ldr	r3, [r3, #24]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d005      	beq.n	80054e2 <PCD_EP_ISR_Handler+0x41e>
 80054d6:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80054da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80054dc:	691b      	ldr	r3, [r3, #16]
 80054de:	429a      	cmp	r2, r3
 80054e0:	d206      	bcs.n	80054f0 <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80054e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80054e4:	781b      	ldrb	r3, [r3, #0]
 80054e6:	4619      	mov	r1, r3
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f00a fb71 	bl	800fbd0 <HAL_PCD_DataOutStageCallback>
 80054ee:	e005      	b.n	80054fc <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80054f6:	4618      	mov	r0, r3
 80054f8:	f004 f8ab 	bl	8009652 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80054fc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80054fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005502:	2b00      	cmp	r3, #0
 8005504:	f000 8117 	beq.w	8005736 <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 8005508:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800550c:	4613      	mov	r3, r2
 800550e:	009b      	lsls	r3, r3, #2
 8005510:	4413      	add	r3, r2
 8005512:	00db      	lsls	r3, r3, #3
 8005514:	3310      	adds	r3, #16
 8005516:	687a      	ldr	r2, [r7, #4]
 8005518:	4413      	add	r3, r2
 800551a:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	461a      	mov	r2, r3
 8005522:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8005526:	009b      	lsls	r3, r3, #2
 8005528:	4413      	add	r3, r2
 800552a:	881b      	ldrh	r3, [r3, #0]
 800552c:	b29b      	uxth	r3, r3
 800552e:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8005532:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005536:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	461a      	mov	r2, r3
 800553e:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8005542:	009b      	lsls	r3, r3, #2
 8005544:	441a      	add	r2, r3
 8005546:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8005548:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800554c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005550:	b29b      	uxth	r3, r3
 8005552:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8005554:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005556:	78db      	ldrb	r3, [r3, #3]
 8005558:	2b01      	cmp	r3, #1
 800555a:	f040 80a1 	bne.w	80056a0 <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 800555e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005560:	2200      	movs	r2, #0
 8005562:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8005564:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005566:	7b1b      	ldrb	r3, [r3, #12]
 8005568:	2b00      	cmp	r3, #0
 800556a:	f000 8092 	beq.w	8005692 <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800556e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005570:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005574:	2b00      	cmp	r3, #0
 8005576:	d046      	beq.n	8005606 <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005578:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800557a:	785b      	ldrb	r3, [r3, #1]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d126      	bne.n	80055ce <PCD_EP_ISR_Handler+0x50a>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	617b      	str	r3, [r7, #20]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800558e:	b29b      	uxth	r3, r3
 8005590:	461a      	mov	r2, r3
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	4413      	add	r3, r2
 8005596:	617b      	str	r3, [r7, #20]
 8005598:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800559a:	781b      	ldrb	r3, [r3, #0]
 800559c:	00da      	lsls	r2, r3, #3
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	4413      	add	r3, r2
 80055a2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80055a6:	613b      	str	r3, [r7, #16]
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	881b      	ldrh	r3, [r3, #0]
 80055ac:	b29b      	uxth	r3, r3
 80055ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055b2:	b29a      	uxth	r2, r3
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	801a      	strh	r2, [r3, #0]
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	881b      	ldrh	r3, [r3, #0]
 80055bc:	b29b      	uxth	r3, r3
 80055be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055c6:	b29a      	uxth	r2, r3
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	801a      	strh	r2, [r3, #0]
 80055cc:	e061      	b.n	8005692 <PCD_EP_ISR_Handler+0x5ce>
 80055ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80055d0:	785b      	ldrb	r3, [r3, #1]
 80055d2:	2b01      	cmp	r3, #1
 80055d4:	d15d      	bne.n	8005692 <PCD_EP_ISR_Handler+0x5ce>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	61fb      	str	r3, [r7, #28]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80055e4:	b29b      	uxth	r3, r3
 80055e6:	461a      	mov	r2, r3
 80055e8:	69fb      	ldr	r3, [r7, #28]
 80055ea:	4413      	add	r3, r2
 80055ec:	61fb      	str	r3, [r7, #28]
 80055ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80055f0:	781b      	ldrb	r3, [r3, #0]
 80055f2:	00da      	lsls	r2, r3, #3
 80055f4:	69fb      	ldr	r3, [r7, #28]
 80055f6:	4413      	add	r3, r2
 80055f8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80055fc:	61bb      	str	r3, [r7, #24]
 80055fe:	69bb      	ldr	r3, [r7, #24]
 8005600:	2200      	movs	r2, #0
 8005602:	801a      	strh	r2, [r3, #0]
 8005604:	e045      	b.n	8005692 <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800560c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800560e:	785b      	ldrb	r3, [r3, #1]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d126      	bne.n	8005662 <PCD_EP_ISR_Handler+0x59e>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	627b      	str	r3, [r7, #36]	@ 0x24
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005622:	b29b      	uxth	r3, r3
 8005624:	461a      	mov	r2, r3
 8005626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005628:	4413      	add	r3, r2
 800562a:	627b      	str	r3, [r7, #36]	@ 0x24
 800562c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800562e:	781b      	ldrb	r3, [r3, #0]
 8005630:	00da      	lsls	r2, r3, #3
 8005632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005634:	4413      	add	r3, r2
 8005636:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800563a:	623b      	str	r3, [r7, #32]
 800563c:	6a3b      	ldr	r3, [r7, #32]
 800563e:	881b      	ldrh	r3, [r3, #0]
 8005640:	b29b      	uxth	r3, r3
 8005642:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005646:	b29a      	uxth	r2, r3
 8005648:	6a3b      	ldr	r3, [r7, #32]
 800564a:	801a      	strh	r2, [r3, #0]
 800564c:	6a3b      	ldr	r3, [r7, #32]
 800564e:	881b      	ldrh	r3, [r3, #0]
 8005650:	b29b      	uxth	r3, r3
 8005652:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005656:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800565a:	b29a      	uxth	r2, r3
 800565c:	6a3b      	ldr	r3, [r7, #32]
 800565e:	801a      	strh	r2, [r3, #0]
 8005660:	e017      	b.n	8005692 <PCD_EP_ISR_Handler+0x5ce>
 8005662:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005664:	785b      	ldrb	r3, [r3, #1]
 8005666:	2b01      	cmp	r3, #1
 8005668:	d113      	bne.n	8005692 <PCD_EP_ISR_Handler+0x5ce>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005672:	b29b      	uxth	r3, r3
 8005674:	461a      	mov	r2, r3
 8005676:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005678:	4413      	add	r3, r2
 800567a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800567c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800567e:	781b      	ldrb	r3, [r3, #0]
 8005680:	00da      	lsls	r2, r3, #3
 8005682:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005684:	4413      	add	r3, r2
 8005686:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800568a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800568c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800568e:	2200      	movs	r2, #0
 8005690:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005692:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005694:	781b      	ldrb	r3, [r3, #0]
 8005696:	4619      	mov	r1, r3
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	f00a fab4 	bl	800fc06 <HAL_PCD_DataInStageCallback>
 800569e:	e04a      	b.n	8005736 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80056a0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80056a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d13f      	bne.n	800572a <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80056b2:	b29b      	uxth	r3, r3
 80056b4:	461a      	mov	r2, r3
 80056b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056b8:	781b      	ldrb	r3, [r3, #0]
 80056ba:	00db      	lsls	r3, r3, #3
 80056bc:	4413      	add	r3, r2
 80056be:	687a      	ldr	r2, [r7, #4]
 80056c0:	6812      	ldr	r2, [r2, #0]
 80056c2:	4413      	add	r3, r2
 80056c4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80056c8:	881b      	ldrh	r3, [r3, #0]
 80056ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80056ce:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 80056d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056d2:	699a      	ldr	r2, [r3, #24]
 80056d4:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80056d6:	429a      	cmp	r2, r3
 80056d8:	d906      	bls.n	80056e8 <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 80056da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056dc:	699a      	ldr	r2, [r3, #24]
 80056de:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80056e0:	1ad2      	subs	r2, r2, r3
 80056e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056e4:	619a      	str	r2, [r3, #24]
 80056e6:	e002      	b.n	80056ee <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 80056e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056ea:	2200      	movs	r2, #0
 80056ec:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80056ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056f0:	699b      	ldr	r3, [r3, #24]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d106      	bne.n	8005704 <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80056f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056f8:	781b      	ldrb	r3, [r3, #0]
 80056fa:	4619      	mov	r1, r3
 80056fc:	6878      	ldr	r0, [r7, #4]
 80056fe:	f00a fa82 	bl	800fc06 <HAL_PCD_DataInStageCallback>
 8005702:	e018      	b.n	8005736 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8005704:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005706:	695a      	ldr	r2, [r3, #20]
 8005708:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800570a:	441a      	add	r2, r3
 800570c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800570e:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8005710:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005712:	69da      	ldr	r2, [r3, #28]
 8005714:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8005716:	441a      	add	r2, r3
 8005718:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800571a:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005722:	4618      	mov	r0, r3
 8005724:	f003 ff95 	bl	8009652 <USB_EPStartXfer>
 8005728:	e005      	b.n	8005736 <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800572a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800572c:	461a      	mov	r2, r3
 800572e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	f000 f917 	bl	8005964 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800573e:	b29b      	uxth	r3, r3
 8005740:	b21b      	sxth	r3, r3
 8005742:	2b00      	cmp	r3, #0
 8005744:	f6ff acc3 	blt.w	80050ce <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8005748:	2300      	movs	r3, #0
}
 800574a:	4618      	mov	r0, r3
 800574c:	3748      	adds	r7, #72	@ 0x48
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}

08005752 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005752:	b580      	push	{r7, lr}
 8005754:	b088      	sub	sp, #32
 8005756:	af00      	add	r7, sp, #0
 8005758:	60f8      	str	r0, [r7, #12]
 800575a:	60b9      	str	r1, [r7, #8]
 800575c:	4613      	mov	r3, r2
 800575e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005760:	88fb      	ldrh	r3, [r7, #6]
 8005762:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005766:	2b00      	cmp	r3, #0
 8005768:	d07c      	beq.n	8005864 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005772:	b29b      	uxth	r3, r3
 8005774:	461a      	mov	r2, r3
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	781b      	ldrb	r3, [r3, #0]
 800577a:	00db      	lsls	r3, r3, #3
 800577c:	4413      	add	r3, r2
 800577e:	68fa      	ldr	r2, [r7, #12]
 8005780:	6812      	ldr	r2, [r2, #0]
 8005782:	4413      	add	r3, r2
 8005784:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005788:	881b      	ldrh	r3, [r3, #0]
 800578a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800578e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	699a      	ldr	r2, [r3, #24]
 8005794:	8b7b      	ldrh	r3, [r7, #26]
 8005796:	429a      	cmp	r2, r3
 8005798:	d306      	bcc.n	80057a8 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	699a      	ldr	r2, [r3, #24]
 800579e:	8b7b      	ldrh	r3, [r7, #26]
 80057a0:	1ad2      	subs	r2, r2, r3
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	619a      	str	r2, [r3, #24]
 80057a6:	e002      	b.n	80057ae <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	2200      	movs	r2, #0
 80057ac:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	699b      	ldr	r3, [r3, #24]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d123      	bne.n	80057fe <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	461a      	mov	r2, r3
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	781b      	ldrb	r3, [r3, #0]
 80057c0:	009b      	lsls	r3, r3, #2
 80057c2:	4413      	add	r3, r2
 80057c4:	881b      	ldrh	r3, [r3, #0]
 80057c6:	b29b      	uxth	r3, r3
 80057c8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80057cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057d0:	833b      	strh	r3, [r7, #24]
 80057d2:	8b3b      	ldrh	r3, [r7, #24]
 80057d4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80057d8:	833b      	strh	r3, [r7, #24]
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	461a      	mov	r2, r3
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	781b      	ldrb	r3, [r3, #0]
 80057e4:	009b      	lsls	r3, r3, #2
 80057e6:	441a      	add	r2, r3
 80057e8:	8b3b      	ldrh	r3, [r7, #24]
 80057ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80057ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80057f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80057f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057fa:	b29b      	uxth	r3, r3
 80057fc:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80057fe:	88fb      	ldrh	r3, [r7, #6]
 8005800:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005804:	2b00      	cmp	r3, #0
 8005806:	d01f      	beq.n	8005848 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	461a      	mov	r2, r3
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	781b      	ldrb	r3, [r3, #0]
 8005812:	009b      	lsls	r3, r3, #2
 8005814:	4413      	add	r3, r2
 8005816:	881b      	ldrh	r3, [r3, #0]
 8005818:	b29b      	uxth	r3, r3
 800581a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800581e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005822:	82fb      	strh	r3, [r7, #22]
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	461a      	mov	r2, r3
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	781b      	ldrb	r3, [r3, #0]
 800582e:	009b      	lsls	r3, r3, #2
 8005830:	441a      	add	r2, r3
 8005832:	8afb      	ldrh	r3, [r7, #22]
 8005834:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005838:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800583c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005840:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005844:	b29b      	uxth	r3, r3
 8005846:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005848:	8b7b      	ldrh	r3, [r7, #26]
 800584a:	2b00      	cmp	r3, #0
 800584c:	f000 8085 	beq.w	800595a <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	6818      	ldr	r0, [r3, #0]
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	6959      	ldr	r1, [r3, #20]
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	891a      	ldrh	r2, [r3, #8]
 800585c:	8b7b      	ldrh	r3, [r7, #26]
 800585e:	f004 fe1e 	bl	800a49e <USB_ReadPMA>
 8005862:	e07a      	b.n	800595a <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800586c:	b29b      	uxth	r3, r3
 800586e:	461a      	mov	r2, r3
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	781b      	ldrb	r3, [r3, #0]
 8005874:	00db      	lsls	r3, r3, #3
 8005876:	4413      	add	r3, r2
 8005878:	68fa      	ldr	r2, [r7, #12]
 800587a:	6812      	ldr	r2, [r2, #0]
 800587c:	4413      	add	r3, r2
 800587e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005882:	881b      	ldrh	r3, [r3, #0]
 8005884:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005888:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	699a      	ldr	r2, [r3, #24]
 800588e:	8b7b      	ldrh	r3, [r7, #26]
 8005890:	429a      	cmp	r2, r3
 8005892:	d306      	bcc.n	80058a2 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	699a      	ldr	r2, [r3, #24]
 8005898:	8b7b      	ldrh	r3, [r7, #26]
 800589a:	1ad2      	subs	r2, r2, r3
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	619a      	str	r2, [r3, #24]
 80058a0:	e002      	b.n	80058a8 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	2200      	movs	r2, #0
 80058a6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	699b      	ldr	r3, [r3, #24]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d123      	bne.n	80058f8 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	461a      	mov	r2, r3
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	781b      	ldrb	r3, [r3, #0]
 80058ba:	009b      	lsls	r3, r3, #2
 80058bc:	4413      	add	r3, r2
 80058be:	881b      	ldrh	r3, [r3, #0]
 80058c0:	b29b      	uxth	r3, r3
 80058c2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80058c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058ca:	83fb      	strh	r3, [r7, #30]
 80058cc:	8bfb      	ldrh	r3, [r7, #30]
 80058ce:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80058d2:	83fb      	strh	r3, [r7, #30]
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	461a      	mov	r2, r3
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	781b      	ldrb	r3, [r3, #0]
 80058de:	009b      	lsls	r3, r3, #2
 80058e0:	441a      	add	r2, r3
 80058e2:	8bfb      	ldrh	r3, [r7, #30]
 80058e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80058e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80058ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80058f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80058f4:	b29b      	uxth	r3, r3
 80058f6:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80058f8:	88fb      	ldrh	r3, [r7, #6]
 80058fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d11f      	bne.n	8005942 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	461a      	mov	r2, r3
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	781b      	ldrb	r3, [r3, #0]
 800590c:	009b      	lsls	r3, r3, #2
 800590e:	4413      	add	r3, r2
 8005910:	881b      	ldrh	r3, [r3, #0]
 8005912:	b29b      	uxth	r3, r3
 8005914:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005918:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800591c:	83bb      	strh	r3, [r7, #28]
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	461a      	mov	r2, r3
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	781b      	ldrb	r3, [r3, #0]
 8005928:	009b      	lsls	r3, r3, #2
 800592a:	441a      	add	r2, r3
 800592c:	8bbb      	ldrh	r3, [r7, #28]
 800592e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005932:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005936:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800593a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800593e:	b29b      	uxth	r3, r3
 8005940:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005942:	8b7b      	ldrh	r3, [r7, #26]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d008      	beq.n	800595a <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	6818      	ldr	r0, [r3, #0]
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	6959      	ldr	r1, [r3, #20]
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	895a      	ldrh	r2, [r3, #10]
 8005954:	8b7b      	ldrh	r3, [r7, #26]
 8005956:	f004 fda2 	bl	800a49e <USB_ReadPMA>
    }
  }

  return count;
 800595a:	8b7b      	ldrh	r3, [r7, #26]
}
 800595c:	4618      	mov	r0, r3
 800595e:	3720      	adds	r7, #32
 8005960:	46bd      	mov	sp, r7
 8005962:	bd80      	pop	{r7, pc}

08005964 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b0a6      	sub	sp, #152	@ 0x98
 8005968:	af00      	add	r7, sp, #0
 800596a:	60f8      	str	r0, [r7, #12]
 800596c:	60b9      	str	r1, [r7, #8]
 800596e:	4613      	mov	r3, r2
 8005970:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005972:	88fb      	ldrh	r3, [r7, #6]
 8005974:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005978:	2b00      	cmp	r3, #0
 800597a:	f000 81f7 	beq.w	8005d6c <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005986:	b29b      	uxth	r3, r3
 8005988:	461a      	mov	r2, r3
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	781b      	ldrb	r3, [r3, #0]
 800598e:	00db      	lsls	r3, r3, #3
 8005990:	4413      	add	r3, r2
 8005992:	68fa      	ldr	r2, [r7, #12]
 8005994:	6812      	ldr	r2, [r2, #0]
 8005996:	4413      	add	r3, r2
 8005998:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800599c:	881b      	ldrh	r3, [r3, #0]
 800599e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80059a2:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	699a      	ldr	r2, [r3, #24]
 80059aa:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80059ae:	429a      	cmp	r2, r3
 80059b0:	d907      	bls.n	80059c2 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	699a      	ldr	r2, [r3, #24]
 80059b6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80059ba:	1ad2      	subs	r2, r2, r3
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	619a      	str	r2, [r3, #24]
 80059c0:	e002      	b.n	80059c8 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	2200      	movs	r2, #0
 80059c6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	699b      	ldr	r3, [r3, #24]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	f040 80e1 	bne.w	8005b94 <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	785b      	ldrb	r3, [r3, #1]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d126      	bne.n	8005a28 <HAL_PCD_EP_DB_Transmit+0xc4>
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	633b      	str	r3, [r7, #48]	@ 0x30
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80059e8:	b29b      	uxth	r3, r3
 80059ea:	461a      	mov	r2, r3
 80059ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059ee:	4413      	add	r3, r2
 80059f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	781b      	ldrb	r3, [r3, #0]
 80059f6:	00da      	lsls	r2, r3, #3
 80059f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059fa:	4413      	add	r3, r2
 80059fc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005a00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005a02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a04:	881b      	ldrh	r3, [r3, #0]
 8005a06:	b29b      	uxth	r3, r3
 8005a08:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a0c:	b29a      	uxth	r2, r3
 8005a0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a10:	801a      	strh	r2, [r3, #0]
 8005a12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a14:	881b      	ldrh	r3, [r3, #0]
 8005a16:	b29b      	uxth	r3, r3
 8005a18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a20:	b29a      	uxth	r2, r3
 8005a22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a24:	801a      	strh	r2, [r3, #0]
 8005a26:	e01a      	b.n	8005a5e <HAL_PCD_EP_DB_Transmit+0xfa>
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	785b      	ldrb	r3, [r3, #1]
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d116      	bne.n	8005a5e <HAL_PCD_EP_DB_Transmit+0xfa>
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a3e:	b29b      	uxth	r3, r3
 8005a40:	461a      	mov	r2, r3
 8005a42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a44:	4413      	add	r3, r2
 8005a46:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	781b      	ldrb	r3, [r3, #0]
 8005a4c:	00da      	lsls	r2, r3, #3
 8005a4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a50:	4413      	add	r3, r2
 8005a52:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005a56:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	785b      	ldrb	r3, [r3, #1]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d126      	bne.n	8005aba <HAL_PCD_EP_DB_Transmit+0x156>
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	623b      	str	r3, [r7, #32]
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a7a:	b29b      	uxth	r3, r3
 8005a7c:	461a      	mov	r2, r3
 8005a7e:	6a3b      	ldr	r3, [r7, #32]
 8005a80:	4413      	add	r3, r2
 8005a82:	623b      	str	r3, [r7, #32]
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	781b      	ldrb	r3, [r3, #0]
 8005a88:	00da      	lsls	r2, r3, #3
 8005a8a:	6a3b      	ldr	r3, [r7, #32]
 8005a8c:	4413      	add	r3, r2
 8005a8e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005a92:	61fb      	str	r3, [r7, #28]
 8005a94:	69fb      	ldr	r3, [r7, #28]
 8005a96:	881b      	ldrh	r3, [r3, #0]
 8005a98:	b29b      	uxth	r3, r3
 8005a9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a9e:	b29a      	uxth	r2, r3
 8005aa0:	69fb      	ldr	r3, [r7, #28]
 8005aa2:	801a      	strh	r2, [r3, #0]
 8005aa4:	69fb      	ldr	r3, [r7, #28]
 8005aa6:	881b      	ldrh	r3, [r3, #0]
 8005aa8:	b29b      	uxth	r3, r3
 8005aaa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005aae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ab2:	b29a      	uxth	r2, r3
 8005ab4:	69fb      	ldr	r3, [r7, #28]
 8005ab6:	801a      	strh	r2, [r3, #0]
 8005ab8:	e017      	b.n	8005aea <HAL_PCD_EP_DB_Transmit+0x186>
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	785b      	ldrb	r3, [r3, #1]
 8005abe:	2b01      	cmp	r3, #1
 8005ac0:	d113      	bne.n	8005aea <HAL_PCD_EP_DB_Transmit+0x186>
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005aca:	b29b      	uxth	r3, r3
 8005acc:	461a      	mov	r2, r3
 8005ace:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ad0:	4413      	add	r3, r2
 8005ad2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	781b      	ldrb	r3, [r3, #0]
 8005ad8:	00da      	lsls	r2, r3, #3
 8005ada:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005adc:	4413      	add	r3, r2
 8005ade:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005ae2:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	78db      	ldrb	r3, [r3, #3]
 8005aee:	2b02      	cmp	r3, #2
 8005af0:	d123      	bne.n	8005b3a <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	461a      	mov	r2, r3
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	781b      	ldrb	r3, [r3, #0]
 8005afc:	009b      	lsls	r3, r3, #2
 8005afe:	4413      	add	r3, r2
 8005b00:	881b      	ldrh	r3, [r3, #0]
 8005b02:	b29b      	uxth	r3, r3
 8005b04:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b08:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b0c:	837b      	strh	r3, [r7, #26]
 8005b0e:	8b7b      	ldrh	r3, [r7, #26]
 8005b10:	f083 0320 	eor.w	r3, r3, #32
 8005b14:	837b      	strh	r3, [r7, #26]
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	461a      	mov	r2, r3
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	781b      	ldrb	r3, [r3, #0]
 8005b20:	009b      	lsls	r3, r3, #2
 8005b22:	441a      	add	r2, r3
 8005b24:	8b7b      	ldrh	r3, [r7, #26]
 8005b26:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b2a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b36:	b29b      	uxth	r3, r3
 8005b38:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	781b      	ldrb	r3, [r3, #0]
 8005b3e:	4619      	mov	r1, r3
 8005b40:	68f8      	ldr	r0, [r7, #12]
 8005b42:	f00a f860 	bl	800fc06 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005b46:	88fb      	ldrh	r3, [r7, #6]
 8005b48:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d01f      	beq.n	8005b90 <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	461a      	mov	r2, r3
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	781b      	ldrb	r3, [r3, #0]
 8005b5a:	009b      	lsls	r3, r3, #2
 8005b5c:	4413      	add	r3, r2
 8005b5e:	881b      	ldrh	r3, [r3, #0]
 8005b60:	b29b      	uxth	r3, r3
 8005b62:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b6a:	833b      	strh	r3, [r7, #24]
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	461a      	mov	r2, r3
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	781b      	ldrb	r3, [r3, #0]
 8005b76:	009b      	lsls	r3, r3, #2
 8005b78:	441a      	add	r2, r3
 8005b7a:	8b3b      	ldrh	r3, [r7, #24]
 8005b7c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b80:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b84:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005b88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8005b90:	2300      	movs	r3, #0
 8005b92:	e31f      	b.n	80061d4 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005b94:	88fb      	ldrh	r3, [r7, #6]
 8005b96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d021      	beq.n	8005be2 <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	461a      	mov	r2, r3
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	781b      	ldrb	r3, [r3, #0]
 8005ba8:	009b      	lsls	r3, r3, #2
 8005baa:	4413      	add	r3, r2
 8005bac:	881b      	ldrh	r3, [r3, #0]
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005bb4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bb8:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	461a      	mov	r2, r3
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	781b      	ldrb	r3, [r3, #0]
 8005bc6:	009b      	lsls	r3, r3, #2
 8005bc8:	441a      	add	r2, r3
 8005bca:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8005bce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005bd2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005bd6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005bda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	f040 82ca 	bne.w	8006182 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	695a      	ldr	r2, [r3, #20]
 8005bf2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005bf6:	441a      	add	r2, r3
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	69da      	ldr	r2, [r3, #28]
 8005c00:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005c04:	441a      	add	r2, r3
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	6a1a      	ldr	r2, [r3, #32]
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	691b      	ldr	r3, [r3, #16]
 8005c12:	429a      	cmp	r2, r3
 8005c14:	d309      	bcc.n	8005c2a <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	691b      	ldr	r3, [r3, #16]
 8005c1a:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	6a1a      	ldr	r2, [r3, #32]
 8005c20:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005c22:	1ad2      	subs	r2, r2, r3
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	621a      	str	r2, [r3, #32]
 8005c28:	e015      	b.n	8005c56 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	6a1b      	ldr	r3, [r3, #32]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d107      	bne.n	8005c42 <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 8005c32:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005c36:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8005c40:	e009      	b.n	8005c56 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	2200      	movs	r2, #0
 8005c46:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	6a1b      	ldr	r3, [r3, #32]
 8005c4e:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	2200      	movs	r2, #0
 8005c54:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	785b      	ldrb	r3, [r3, #1]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d15f      	bne.n	8005d1e <HAL_PCD_EP_DB_Transmit+0x3ba>
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	643b      	str	r3, [r7, #64]	@ 0x40
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c6c:	b29b      	uxth	r3, r3
 8005c6e:	461a      	mov	r2, r3
 8005c70:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c72:	4413      	add	r3, r2
 8005c74:	643b      	str	r3, [r7, #64]	@ 0x40
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	781b      	ldrb	r3, [r3, #0]
 8005c7a:	00da      	lsls	r2, r3, #3
 8005c7c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c7e:	4413      	add	r3, r2
 8005c80:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005c84:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c88:	881b      	ldrh	r3, [r3, #0]
 8005c8a:	b29b      	uxth	r3, r3
 8005c8c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c90:	b29a      	uxth	r2, r3
 8005c92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c94:	801a      	strh	r2, [r3, #0]
 8005c96:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d10a      	bne.n	8005cb2 <HAL_PCD_EP_DB_Transmit+0x34e>
 8005c9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c9e:	881b      	ldrh	r3, [r3, #0]
 8005ca0:	b29b      	uxth	r3, r3
 8005ca2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ca6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005caa:	b29a      	uxth	r2, r3
 8005cac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005cae:	801a      	strh	r2, [r3, #0]
 8005cb0:	e051      	b.n	8005d56 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8005cb2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005cb4:	2b3e      	cmp	r3, #62	@ 0x3e
 8005cb6:	d816      	bhi.n	8005ce6 <HAL_PCD_EP_DB_Transmit+0x382>
 8005cb8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005cba:	085b      	lsrs	r3, r3, #1
 8005cbc:	653b      	str	r3, [r7, #80]	@ 0x50
 8005cbe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005cc0:	f003 0301 	and.w	r3, r3, #1
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d002      	beq.n	8005cce <HAL_PCD_EP_DB_Transmit+0x36a>
 8005cc8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005cca:	3301      	adds	r3, #1
 8005ccc:	653b      	str	r3, [r7, #80]	@ 0x50
 8005cce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005cd0:	881b      	ldrh	r3, [r3, #0]
 8005cd2:	b29a      	uxth	r2, r3
 8005cd4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005cd6:	b29b      	uxth	r3, r3
 8005cd8:	029b      	lsls	r3, r3, #10
 8005cda:	b29b      	uxth	r3, r3
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	b29a      	uxth	r2, r3
 8005ce0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ce2:	801a      	strh	r2, [r3, #0]
 8005ce4:	e037      	b.n	8005d56 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8005ce6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005ce8:	095b      	lsrs	r3, r3, #5
 8005cea:	653b      	str	r3, [r7, #80]	@ 0x50
 8005cec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005cee:	f003 031f 	and.w	r3, r3, #31
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d102      	bne.n	8005cfc <HAL_PCD_EP_DB_Transmit+0x398>
 8005cf6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005cf8:	3b01      	subs	r3, #1
 8005cfa:	653b      	str	r3, [r7, #80]	@ 0x50
 8005cfc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005cfe:	881b      	ldrh	r3, [r3, #0]
 8005d00:	b29a      	uxth	r2, r3
 8005d02:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005d04:	b29b      	uxth	r3, r3
 8005d06:	029b      	lsls	r3, r3, #10
 8005d08:	b29b      	uxth	r3, r3
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	b29b      	uxth	r3, r3
 8005d0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d16:	b29a      	uxth	r2, r3
 8005d18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d1a:	801a      	strh	r2, [r3, #0]
 8005d1c:	e01b      	b.n	8005d56 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	785b      	ldrb	r3, [r3, #1]
 8005d22:	2b01      	cmp	r3, #1
 8005d24:	d117      	bne.n	8005d56 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d34:	b29b      	uxth	r3, r3
 8005d36:	461a      	mov	r2, r3
 8005d38:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005d3a:	4413      	add	r3, r2
 8005d3c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	781b      	ldrb	r3, [r3, #0]
 8005d42:	00da      	lsls	r2, r3, #3
 8005d44:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005d46:	4413      	add	r3, r2
 8005d48:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005d4c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d4e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005d50:	b29a      	uxth	r2, r3
 8005d52:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d54:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	6818      	ldr	r0, [r3, #0]
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	6959      	ldr	r1, [r3, #20]
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	891a      	ldrh	r2, [r3, #8]
 8005d62:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005d64:	b29b      	uxth	r3, r3
 8005d66:	f004 fb58 	bl	800a41a <USB_WritePMA>
 8005d6a:	e20a      	b.n	8006182 <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d74:	b29b      	uxth	r3, r3
 8005d76:	461a      	mov	r2, r3
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	781b      	ldrb	r3, [r3, #0]
 8005d7c:	00db      	lsls	r3, r3, #3
 8005d7e:	4413      	add	r3, r2
 8005d80:	68fa      	ldr	r2, [r7, #12]
 8005d82:	6812      	ldr	r2, [r2, #0]
 8005d84:	4413      	add	r3, r2
 8005d86:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005d8a:	881b      	ldrh	r3, [r3, #0]
 8005d8c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d90:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	699a      	ldr	r2, [r3, #24]
 8005d98:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	d307      	bcc.n	8005db0 <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	699a      	ldr	r2, [r3, #24]
 8005da4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005da8:	1ad2      	subs	r2, r2, r3
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	619a      	str	r2, [r3, #24]
 8005dae:	e002      	b.n	8005db6 <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	2200      	movs	r2, #0
 8005db4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	699b      	ldr	r3, [r3, #24]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	f040 80f6 	bne.w	8005fac <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	785b      	ldrb	r3, [r3, #1]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d126      	bne.n	8005e16 <HAL_PCD_EP_DB_Transmit+0x4b2>
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	677b      	str	r3, [r7, #116]	@ 0x74
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005dd6:	b29b      	uxth	r3, r3
 8005dd8:	461a      	mov	r2, r3
 8005dda:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005ddc:	4413      	add	r3, r2
 8005dde:	677b      	str	r3, [r7, #116]	@ 0x74
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	781b      	ldrb	r3, [r3, #0]
 8005de4:	00da      	lsls	r2, r3, #3
 8005de6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005de8:	4413      	add	r3, r2
 8005dea:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005dee:	673b      	str	r3, [r7, #112]	@ 0x70
 8005df0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005df2:	881b      	ldrh	r3, [r3, #0]
 8005df4:	b29b      	uxth	r3, r3
 8005df6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005dfa:	b29a      	uxth	r2, r3
 8005dfc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005dfe:	801a      	strh	r2, [r3, #0]
 8005e00:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005e02:	881b      	ldrh	r3, [r3, #0]
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e0e:	b29a      	uxth	r2, r3
 8005e10:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005e12:	801a      	strh	r2, [r3, #0]
 8005e14:	e01a      	b.n	8005e4c <HAL_PCD_EP_DB_Transmit+0x4e8>
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	785b      	ldrb	r3, [r3, #1]
 8005e1a:	2b01      	cmp	r3, #1
 8005e1c:	d116      	bne.n	8005e4c <HAL_PCD_EP_DB_Transmit+0x4e8>
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e2c:	b29b      	uxth	r3, r3
 8005e2e:	461a      	mov	r2, r3
 8005e30:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005e32:	4413      	add	r3, r2
 8005e34:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	781b      	ldrb	r3, [r3, #0]
 8005e3a:	00da      	lsls	r2, r3, #3
 8005e3c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005e3e:	4413      	add	r3, r2
 8005e40:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005e44:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005e46:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005e48:	2200      	movs	r2, #0
 8005e4a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	785b      	ldrb	r3, [r3, #1]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d12f      	bne.n	8005ebc <HAL_PCD_EP_DB_Transmit+0x558>
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e6c:	b29b      	uxth	r3, r3
 8005e6e:	461a      	mov	r2, r3
 8005e70:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005e74:	4413      	add	r3, r2
 8005e76:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	781b      	ldrb	r3, [r3, #0]
 8005e7e:	00da      	lsls	r2, r3, #3
 8005e80:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005e84:	4413      	add	r3, r2
 8005e86:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005e8a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005e8e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005e92:	881b      	ldrh	r3, [r3, #0]
 8005e94:	b29b      	uxth	r3, r3
 8005e96:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e9a:	b29a      	uxth	r2, r3
 8005e9c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005ea0:	801a      	strh	r2, [r3, #0]
 8005ea2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005ea6:	881b      	ldrh	r3, [r3, #0]
 8005ea8:	b29b      	uxth	r3, r3
 8005eaa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005eae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005eb2:	b29a      	uxth	r2, r3
 8005eb4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005eb8:	801a      	strh	r2, [r3, #0]
 8005eba:	e01c      	b.n	8005ef6 <HAL_PCD_EP_DB_Transmit+0x592>
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	785b      	ldrb	r3, [r3, #1]
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	d118      	bne.n	8005ef6 <HAL_PCD_EP_DB_Transmit+0x592>
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005ecc:	b29b      	uxth	r3, r3
 8005ece:	461a      	mov	r2, r3
 8005ed0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005ed4:	4413      	add	r3, r2
 8005ed6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	781b      	ldrb	r3, [r3, #0]
 8005ede:	00da      	lsls	r2, r3, #3
 8005ee0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005ee4:	4413      	add	r3, r2
 8005ee6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005eea:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005eee:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	78db      	ldrb	r3, [r3, #3]
 8005efa:	2b02      	cmp	r3, #2
 8005efc:	d127      	bne.n	8005f4e <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	461a      	mov	r2, r3
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	781b      	ldrb	r3, [r3, #0]
 8005f08:	009b      	lsls	r3, r3, #2
 8005f0a:	4413      	add	r3, r2
 8005f0c:	881b      	ldrh	r3, [r3, #0]
 8005f0e:	b29b      	uxth	r3, r3
 8005f10:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f14:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f18:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8005f1c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8005f20:	f083 0320 	eor.w	r3, r3, #32
 8005f24:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	461a      	mov	r2, r3
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	781b      	ldrb	r3, [r3, #0]
 8005f32:	009b      	lsls	r3, r3, #2
 8005f34:	441a      	add	r2, r3
 8005f36:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8005f3a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f3e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f4a:	b29b      	uxth	r3, r3
 8005f4c:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	781b      	ldrb	r3, [r3, #0]
 8005f52:	4619      	mov	r1, r3
 8005f54:	68f8      	ldr	r0, [r7, #12]
 8005f56:	f009 fe56 	bl	800fc06 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005f5a:	88fb      	ldrh	r3, [r7, #6]
 8005f5c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d121      	bne.n	8005fa8 <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	461a      	mov	r2, r3
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	781b      	ldrb	r3, [r3, #0]
 8005f6e:	009b      	lsls	r3, r3, #2
 8005f70:	4413      	add	r3, r2
 8005f72:	881b      	ldrh	r3, [r3, #0]
 8005f74:	b29b      	uxth	r3, r3
 8005f76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f7e:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	461a      	mov	r2, r3
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	781b      	ldrb	r3, [r3, #0]
 8005f8c:	009b      	lsls	r3, r3, #2
 8005f8e:	441a      	add	r2, r3
 8005f90:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8005f94:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f98:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f9c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005fa0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005fa4:	b29b      	uxth	r3, r3
 8005fa6:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8005fa8:	2300      	movs	r3, #0
 8005faa:	e113      	b.n	80061d4 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005fac:	88fb      	ldrh	r3, [r7, #6]
 8005fae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d121      	bne.n	8005ffa <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	461a      	mov	r2, r3
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	781b      	ldrb	r3, [r3, #0]
 8005fc0:	009b      	lsls	r3, r3, #2
 8005fc2:	4413      	add	r3, r2
 8005fc4:	881b      	ldrh	r3, [r3, #0]
 8005fc6:	b29b      	uxth	r3, r3
 8005fc8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005fcc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fd0:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	461a      	mov	r2, r3
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	781b      	ldrb	r3, [r3, #0]
 8005fde:	009b      	lsls	r3, r3, #2
 8005fe0:	441a      	add	r2, r3
 8005fe2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8005fe6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005fea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005fee:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005ff2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ff6:	b29b      	uxth	r3, r3
 8005ff8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006000:	2b01      	cmp	r3, #1
 8006002:	f040 80be 	bne.w	8006182 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	695a      	ldr	r2, [r3, #20]
 800600a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800600e:	441a      	add	r2, r3
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	69da      	ldr	r2, [r3, #28]
 8006018:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800601c:	441a      	add	r2, r3
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	6a1a      	ldr	r2, [r3, #32]
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	691b      	ldr	r3, [r3, #16]
 800602a:	429a      	cmp	r2, r3
 800602c:	d309      	bcc.n	8006042 <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	691b      	ldr	r3, [r3, #16]
 8006032:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	6a1a      	ldr	r2, [r3, #32]
 8006038:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800603a:	1ad2      	subs	r2, r2, r3
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	621a      	str	r2, [r3, #32]
 8006040:	e015      	b.n	800606e <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	6a1b      	ldr	r3, [r3, #32]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d107      	bne.n	800605a <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 800604a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800604e:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	2200      	movs	r2, #0
 8006054:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8006058:	e009      	b.n	800606e <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	6a1b      	ldr	r3, [r3, #32]
 800605e:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	2200      	movs	r2, #0
 8006064:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	2200      	movs	r2, #0
 800606a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	785b      	ldrb	r3, [r3, #1]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d15f      	bne.n	800613c <HAL_PCD_EP_DB_Transmit+0x7d8>
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800608a:	b29b      	uxth	r3, r3
 800608c:	461a      	mov	r2, r3
 800608e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006090:	4413      	add	r3, r2
 8006092:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	781b      	ldrb	r3, [r3, #0]
 8006098:	00da      	lsls	r2, r3, #3
 800609a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800609c:	4413      	add	r3, r2
 800609e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80060a2:	667b      	str	r3, [r7, #100]	@ 0x64
 80060a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80060a6:	881b      	ldrh	r3, [r3, #0]
 80060a8:	b29b      	uxth	r3, r3
 80060aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80060ae:	b29a      	uxth	r2, r3
 80060b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80060b2:	801a      	strh	r2, [r3, #0]
 80060b4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d10a      	bne.n	80060d0 <HAL_PCD_EP_DB_Transmit+0x76c>
 80060ba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80060bc:	881b      	ldrh	r3, [r3, #0]
 80060be:	b29b      	uxth	r3, r3
 80060c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060c8:	b29a      	uxth	r2, r3
 80060ca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80060cc:	801a      	strh	r2, [r3, #0]
 80060ce:	e04e      	b.n	800616e <HAL_PCD_EP_DB_Transmit+0x80a>
 80060d0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80060d2:	2b3e      	cmp	r3, #62	@ 0x3e
 80060d4:	d816      	bhi.n	8006104 <HAL_PCD_EP_DB_Transmit+0x7a0>
 80060d6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80060d8:	085b      	lsrs	r3, r3, #1
 80060da:	663b      	str	r3, [r7, #96]	@ 0x60
 80060dc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80060de:	f003 0301 	and.w	r3, r3, #1
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d002      	beq.n	80060ec <HAL_PCD_EP_DB_Transmit+0x788>
 80060e6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80060e8:	3301      	adds	r3, #1
 80060ea:	663b      	str	r3, [r7, #96]	@ 0x60
 80060ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80060ee:	881b      	ldrh	r3, [r3, #0]
 80060f0:	b29a      	uxth	r2, r3
 80060f2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	029b      	lsls	r3, r3, #10
 80060f8:	b29b      	uxth	r3, r3
 80060fa:	4313      	orrs	r3, r2
 80060fc:	b29a      	uxth	r2, r3
 80060fe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006100:	801a      	strh	r2, [r3, #0]
 8006102:	e034      	b.n	800616e <HAL_PCD_EP_DB_Transmit+0x80a>
 8006104:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006106:	095b      	lsrs	r3, r3, #5
 8006108:	663b      	str	r3, [r7, #96]	@ 0x60
 800610a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800610c:	f003 031f 	and.w	r3, r3, #31
 8006110:	2b00      	cmp	r3, #0
 8006112:	d102      	bne.n	800611a <HAL_PCD_EP_DB_Transmit+0x7b6>
 8006114:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006116:	3b01      	subs	r3, #1
 8006118:	663b      	str	r3, [r7, #96]	@ 0x60
 800611a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800611c:	881b      	ldrh	r3, [r3, #0]
 800611e:	b29a      	uxth	r2, r3
 8006120:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006122:	b29b      	uxth	r3, r3
 8006124:	029b      	lsls	r3, r3, #10
 8006126:	b29b      	uxth	r3, r3
 8006128:	4313      	orrs	r3, r2
 800612a:	b29b      	uxth	r3, r3
 800612c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006130:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006134:	b29a      	uxth	r2, r3
 8006136:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006138:	801a      	strh	r2, [r3, #0]
 800613a:	e018      	b.n	800616e <HAL_PCD_EP_DB_Transmit+0x80a>
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	785b      	ldrb	r3, [r3, #1]
 8006140:	2b01      	cmp	r3, #1
 8006142:	d114      	bne.n	800616e <HAL_PCD_EP_DB_Transmit+0x80a>
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800614c:	b29b      	uxth	r3, r3
 800614e:	461a      	mov	r2, r3
 8006150:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006152:	4413      	add	r3, r2
 8006154:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	781b      	ldrb	r3, [r3, #0]
 800615a:	00da      	lsls	r2, r3, #3
 800615c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800615e:	4413      	add	r3, r2
 8006160:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006164:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006166:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006168:	b29a      	uxth	r2, r3
 800616a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800616c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	6818      	ldr	r0, [r3, #0]
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	6959      	ldr	r1, [r3, #20]
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	895a      	ldrh	r2, [r3, #10]
 800617a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800617c:	b29b      	uxth	r3, r3
 800617e:	f004 f94c 	bl	800a41a <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	461a      	mov	r2, r3
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	781b      	ldrb	r3, [r3, #0]
 800618c:	009b      	lsls	r3, r3, #2
 800618e:	4413      	add	r3, r2
 8006190:	881b      	ldrh	r3, [r3, #0]
 8006192:	b29b      	uxth	r3, r3
 8006194:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006198:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800619c:	82fb      	strh	r3, [r7, #22]
 800619e:	8afb      	ldrh	r3, [r7, #22]
 80061a0:	f083 0310 	eor.w	r3, r3, #16
 80061a4:	82fb      	strh	r3, [r7, #22]
 80061a6:	8afb      	ldrh	r3, [r7, #22]
 80061a8:	f083 0320 	eor.w	r3, r3, #32
 80061ac:	82fb      	strh	r3, [r7, #22]
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	461a      	mov	r2, r3
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	781b      	ldrb	r3, [r3, #0]
 80061b8:	009b      	lsls	r3, r3, #2
 80061ba:	441a      	add	r2, r3
 80061bc:	8afb      	ldrh	r3, [r7, #22]
 80061be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80061c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80061c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80061ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061ce:	b29b      	uxth	r3, r3
 80061d0:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80061d2:	2300      	movs	r3, #0
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	3798      	adds	r7, #152	@ 0x98
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd80      	pop	{r7, pc}

080061dc <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80061dc:	b480      	push	{r7}
 80061de:	b087      	sub	sp, #28
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	60f8      	str	r0, [r7, #12]
 80061e4:	607b      	str	r3, [r7, #4]
 80061e6:	460b      	mov	r3, r1
 80061e8:	817b      	strh	r3, [r7, #10]
 80061ea:	4613      	mov	r3, r2
 80061ec:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80061ee:	897b      	ldrh	r3, [r7, #10]
 80061f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d00b      	beq.n	8006212 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80061fa:	897b      	ldrh	r3, [r7, #10]
 80061fc:	f003 0207 	and.w	r2, r3, #7
 8006200:	4613      	mov	r3, r2
 8006202:	009b      	lsls	r3, r3, #2
 8006204:	4413      	add	r3, r2
 8006206:	00db      	lsls	r3, r3, #3
 8006208:	3310      	adds	r3, #16
 800620a:	68fa      	ldr	r2, [r7, #12]
 800620c:	4413      	add	r3, r2
 800620e:	617b      	str	r3, [r7, #20]
 8006210:	e009      	b.n	8006226 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006212:	897a      	ldrh	r2, [r7, #10]
 8006214:	4613      	mov	r3, r2
 8006216:	009b      	lsls	r3, r3, #2
 8006218:	4413      	add	r3, r2
 800621a:	00db      	lsls	r3, r3, #3
 800621c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006220:	68fa      	ldr	r2, [r7, #12]
 8006222:	4413      	add	r3, r2
 8006224:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8006226:	893b      	ldrh	r3, [r7, #8]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d107      	bne.n	800623c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	2200      	movs	r2, #0
 8006230:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	b29a      	uxth	r2, r3
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	80da      	strh	r2, [r3, #6]
 800623a:	e00b      	b.n	8006254 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	2201      	movs	r2, #1
 8006240:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	b29a      	uxth	r2, r3
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	0c1b      	lsrs	r3, r3, #16
 800624e:	b29a      	uxth	r2, r3
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006254:	2300      	movs	r3, #0
}
 8006256:	4618      	mov	r0, r3
 8006258:	371c      	adds	r7, #28
 800625a:	46bd      	mov	sp, r7
 800625c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006260:	4770      	bx	lr

08006262 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006262:	b480      	push	{r7}
 8006264:	b085      	sub	sp, #20
 8006266:	af00      	add	r7, sp, #0
 8006268:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2201      	movs	r2, #1
 8006274:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2200      	movs	r2, #0
 800627c:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8006286:	b29b      	uxth	r3, r3
 8006288:	f043 0301 	orr.w	r3, r3, #1
 800628c:	b29a      	uxth	r2, r3
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800629a:	b29b      	uxth	r3, r3
 800629c:	f043 0302 	orr.w	r3, r3, #2
 80062a0:	b29a      	uxth	r2, r3
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80062a8:	2300      	movs	r3, #0
}
 80062aa:	4618      	mov	r0, r3
 80062ac:	3714      	adds	r7, #20
 80062ae:	46bd      	mov	sp, r7
 80062b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b4:	4770      	bx	lr
	...

080062b8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80062b8:	b480      	push	{r7}
 80062ba:	b085      	sub	sp, #20
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d141      	bne.n	800634a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80062c6:	4b4b      	ldr	r3, [pc, #300]	@ (80063f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80062ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80062d2:	d131      	bne.n	8006338 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80062d4:	4b47      	ldr	r3, [pc, #284]	@ (80063f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80062d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80062da:	4a46      	ldr	r2, [pc, #280]	@ (80063f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80062dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80062e0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80062e4:	4b43      	ldr	r3, [pc, #268]	@ (80063f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80062ec:	4a41      	ldr	r2, [pc, #260]	@ (80063f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80062ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80062f2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80062f4:	4b40      	ldr	r3, [pc, #256]	@ (80063f8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	2232      	movs	r2, #50	@ 0x32
 80062fa:	fb02 f303 	mul.w	r3, r2, r3
 80062fe:	4a3f      	ldr	r2, [pc, #252]	@ (80063fc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006300:	fba2 2303 	umull	r2, r3, r2, r3
 8006304:	0c9b      	lsrs	r3, r3, #18
 8006306:	3301      	adds	r3, #1
 8006308:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800630a:	e002      	b.n	8006312 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	3b01      	subs	r3, #1
 8006310:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006312:	4b38      	ldr	r3, [pc, #224]	@ (80063f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006314:	695b      	ldr	r3, [r3, #20]
 8006316:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800631a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800631e:	d102      	bne.n	8006326 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d1f2      	bne.n	800630c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006326:	4b33      	ldr	r3, [pc, #204]	@ (80063f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006328:	695b      	ldr	r3, [r3, #20]
 800632a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800632e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006332:	d158      	bne.n	80063e6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006334:	2303      	movs	r3, #3
 8006336:	e057      	b.n	80063e8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006338:	4b2e      	ldr	r3, [pc, #184]	@ (80063f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800633a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800633e:	4a2d      	ldr	r2, [pc, #180]	@ (80063f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006340:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006344:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006348:	e04d      	b.n	80063e6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006350:	d141      	bne.n	80063d6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006352:	4b28      	ldr	r3, [pc, #160]	@ (80063f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800635a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800635e:	d131      	bne.n	80063c4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006360:	4b24      	ldr	r3, [pc, #144]	@ (80063f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006362:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006366:	4a23      	ldr	r2, [pc, #140]	@ (80063f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006368:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800636c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006370:	4b20      	ldr	r3, [pc, #128]	@ (80063f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006378:	4a1e      	ldr	r2, [pc, #120]	@ (80063f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800637a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800637e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006380:	4b1d      	ldr	r3, [pc, #116]	@ (80063f8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	2232      	movs	r2, #50	@ 0x32
 8006386:	fb02 f303 	mul.w	r3, r2, r3
 800638a:	4a1c      	ldr	r2, [pc, #112]	@ (80063fc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800638c:	fba2 2303 	umull	r2, r3, r2, r3
 8006390:	0c9b      	lsrs	r3, r3, #18
 8006392:	3301      	adds	r3, #1
 8006394:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006396:	e002      	b.n	800639e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	3b01      	subs	r3, #1
 800639c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800639e:	4b15      	ldr	r3, [pc, #84]	@ (80063f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063a0:	695b      	ldr	r3, [r3, #20]
 80063a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80063a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063aa:	d102      	bne.n	80063b2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d1f2      	bne.n	8006398 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80063b2:	4b10      	ldr	r3, [pc, #64]	@ (80063f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063b4:	695b      	ldr	r3, [r3, #20]
 80063b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80063ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063be:	d112      	bne.n	80063e6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80063c0:	2303      	movs	r3, #3
 80063c2:	e011      	b.n	80063e8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80063c4:	4b0b      	ldr	r3, [pc, #44]	@ (80063f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80063ca:	4a0a      	ldr	r2, [pc, #40]	@ (80063f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80063d0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80063d4:	e007      	b.n	80063e6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80063d6:	4b07      	ldr	r3, [pc, #28]	@ (80063f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80063de:	4a05      	ldr	r2, [pc, #20]	@ (80063f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063e0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80063e4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80063e6:	2300      	movs	r3, #0
}
 80063e8:	4618      	mov	r0, r3
 80063ea:	3714      	adds	r7, #20
 80063ec:	46bd      	mov	sp, r7
 80063ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f2:	4770      	bx	lr
 80063f4:	40007000 	.word	0x40007000
 80063f8:	20000020 	.word	0x20000020
 80063fc:	431bde83 	.word	0x431bde83

08006400 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8006400:	b480      	push	{r7}
 8006402:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006404:	4b05      	ldr	r3, [pc, #20]	@ (800641c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006406:	689b      	ldr	r3, [r3, #8]
 8006408:	4a04      	ldr	r2, [pc, #16]	@ (800641c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800640a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800640e:	6093      	str	r3, [r2, #8]
}
 8006410:	bf00      	nop
 8006412:	46bd      	mov	sp, r7
 8006414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006418:	4770      	bx	lr
 800641a:	bf00      	nop
 800641c:	40007000 	.word	0x40007000

08006420 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b088      	sub	sp, #32
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d101      	bne.n	8006432 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800642e:	2301      	movs	r3, #1
 8006430:	e2fe      	b.n	8006a30 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f003 0301 	and.w	r3, r3, #1
 800643a:	2b00      	cmp	r3, #0
 800643c:	d075      	beq.n	800652a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800643e:	4b97      	ldr	r3, [pc, #604]	@ (800669c <HAL_RCC_OscConfig+0x27c>)
 8006440:	689b      	ldr	r3, [r3, #8]
 8006442:	f003 030c 	and.w	r3, r3, #12
 8006446:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006448:	4b94      	ldr	r3, [pc, #592]	@ (800669c <HAL_RCC_OscConfig+0x27c>)
 800644a:	68db      	ldr	r3, [r3, #12]
 800644c:	f003 0303 	and.w	r3, r3, #3
 8006450:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006452:	69bb      	ldr	r3, [r7, #24]
 8006454:	2b0c      	cmp	r3, #12
 8006456:	d102      	bne.n	800645e <HAL_RCC_OscConfig+0x3e>
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	2b03      	cmp	r3, #3
 800645c:	d002      	beq.n	8006464 <HAL_RCC_OscConfig+0x44>
 800645e:	69bb      	ldr	r3, [r7, #24]
 8006460:	2b08      	cmp	r3, #8
 8006462:	d10b      	bne.n	800647c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006464:	4b8d      	ldr	r3, [pc, #564]	@ (800669c <HAL_RCC_OscConfig+0x27c>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800646c:	2b00      	cmp	r3, #0
 800646e:	d05b      	beq.n	8006528 <HAL_RCC_OscConfig+0x108>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d157      	bne.n	8006528 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006478:	2301      	movs	r3, #1
 800647a:	e2d9      	b.n	8006a30 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006484:	d106      	bne.n	8006494 <HAL_RCC_OscConfig+0x74>
 8006486:	4b85      	ldr	r3, [pc, #532]	@ (800669c <HAL_RCC_OscConfig+0x27c>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a84      	ldr	r2, [pc, #528]	@ (800669c <HAL_RCC_OscConfig+0x27c>)
 800648c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006490:	6013      	str	r3, [r2, #0]
 8006492:	e01d      	b.n	80064d0 <HAL_RCC_OscConfig+0xb0>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	685b      	ldr	r3, [r3, #4]
 8006498:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800649c:	d10c      	bne.n	80064b8 <HAL_RCC_OscConfig+0x98>
 800649e:	4b7f      	ldr	r3, [pc, #508]	@ (800669c <HAL_RCC_OscConfig+0x27c>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a7e      	ldr	r2, [pc, #504]	@ (800669c <HAL_RCC_OscConfig+0x27c>)
 80064a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80064a8:	6013      	str	r3, [r2, #0]
 80064aa:	4b7c      	ldr	r3, [pc, #496]	@ (800669c <HAL_RCC_OscConfig+0x27c>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a7b      	ldr	r2, [pc, #492]	@ (800669c <HAL_RCC_OscConfig+0x27c>)
 80064b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80064b4:	6013      	str	r3, [r2, #0]
 80064b6:	e00b      	b.n	80064d0 <HAL_RCC_OscConfig+0xb0>
 80064b8:	4b78      	ldr	r3, [pc, #480]	@ (800669c <HAL_RCC_OscConfig+0x27c>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a77      	ldr	r2, [pc, #476]	@ (800669c <HAL_RCC_OscConfig+0x27c>)
 80064be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80064c2:	6013      	str	r3, [r2, #0]
 80064c4:	4b75      	ldr	r3, [pc, #468]	@ (800669c <HAL_RCC_OscConfig+0x27c>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a74      	ldr	r2, [pc, #464]	@ (800669c <HAL_RCC_OscConfig+0x27c>)
 80064ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80064ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d013      	beq.n	8006500 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064d8:	f7fd fcae 	bl	8003e38 <HAL_GetTick>
 80064dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80064de:	e008      	b.n	80064f2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80064e0:	f7fd fcaa 	bl	8003e38 <HAL_GetTick>
 80064e4:	4602      	mov	r2, r0
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	1ad3      	subs	r3, r2, r3
 80064ea:	2b64      	cmp	r3, #100	@ 0x64
 80064ec:	d901      	bls.n	80064f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80064ee:	2303      	movs	r3, #3
 80064f0:	e29e      	b.n	8006a30 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80064f2:	4b6a      	ldr	r3, [pc, #424]	@ (800669c <HAL_RCC_OscConfig+0x27c>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d0f0      	beq.n	80064e0 <HAL_RCC_OscConfig+0xc0>
 80064fe:	e014      	b.n	800652a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006500:	f7fd fc9a 	bl	8003e38 <HAL_GetTick>
 8006504:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006506:	e008      	b.n	800651a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006508:	f7fd fc96 	bl	8003e38 <HAL_GetTick>
 800650c:	4602      	mov	r2, r0
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	1ad3      	subs	r3, r2, r3
 8006512:	2b64      	cmp	r3, #100	@ 0x64
 8006514:	d901      	bls.n	800651a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006516:	2303      	movs	r3, #3
 8006518:	e28a      	b.n	8006a30 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800651a:	4b60      	ldr	r3, [pc, #384]	@ (800669c <HAL_RCC_OscConfig+0x27c>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006522:	2b00      	cmp	r3, #0
 8006524:	d1f0      	bne.n	8006508 <HAL_RCC_OscConfig+0xe8>
 8006526:	e000      	b.n	800652a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006528:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f003 0302 	and.w	r3, r3, #2
 8006532:	2b00      	cmp	r3, #0
 8006534:	d075      	beq.n	8006622 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006536:	4b59      	ldr	r3, [pc, #356]	@ (800669c <HAL_RCC_OscConfig+0x27c>)
 8006538:	689b      	ldr	r3, [r3, #8]
 800653a:	f003 030c 	and.w	r3, r3, #12
 800653e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006540:	4b56      	ldr	r3, [pc, #344]	@ (800669c <HAL_RCC_OscConfig+0x27c>)
 8006542:	68db      	ldr	r3, [r3, #12]
 8006544:	f003 0303 	and.w	r3, r3, #3
 8006548:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800654a:	69bb      	ldr	r3, [r7, #24]
 800654c:	2b0c      	cmp	r3, #12
 800654e:	d102      	bne.n	8006556 <HAL_RCC_OscConfig+0x136>
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	2b02      	cmp	r3, #2
 8006554:	d002      	beq.n	800655c <HAL_RCC_OscConfig+0x13c>
 8006556:	69bb      	ldr	r3, [r7, #24]
 8006558:	2b04      	cmp	r3, #4
 800655a:	d11f      	bne.n	800659c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800655c:	4b4f      	ldr	r3, [pc, #316]	@ (800669c <HAL_RCC_OscConfig+0x27c>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006564:	2b00      	cmp	r3, #0
 8006566:	d005      	beq.n	8006574 <HAL_RCC_OscConfig+0x154>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	68db      	ldr	r3, [r3, #12]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d101      	bne.n	8006574 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006570:	2301      	movs	r3, #1
 8006572:	e25d      	b.n	8006a30 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006574:	4b49      	ldr	r3, [pc, #292]	@ (800669c <HAL_RCC_OscConfig+0x27c>)
 8006576:	685b      	ldr	r3, [r3, #4]
 8006578:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	691b      	ldr	r3, [r3, #16]
 8006580:	061b      	lsls	r3, r3, #24
 8006582:	4946      	ldr	r1, [pc, #280]	@ (800669c <HAL_RCC_OscConfig+0x27c>)
 8006584:	4313      	orrs	r3, r2
 8006586:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006588:	4b45      	ldr	r3, [pc, #276]	@ (80066a0 <HAL_RCC_OscConfig+0x280>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4618      	mov	r0, r3
 800658e:	f7fd f81f 	bl	80035d0 <HAL_InitTick>
 8006592:	4603      	mov	r3, r0
 8006594:	2b00      	cmp	r3, #0
 8006596:	d043      	beq.n	8006620 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006598:	2301      	movs	r3, #1
 800659a:	e249      	b.n	8006a30 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	68db      	ldr	r3, [r3, #12]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d023      	beq.n	80065ec <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80065a4:	4b3d      	ldr	r3, [pc, #244]	@ (800669c <HAL_RCC_OscConfig+0x27c>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a3c      	ldr	r2, [pc, #240]	@ (800669c <HAL_RCC_OscConfig+0x27c>)
 80065aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80065ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065b0:	f7fd fc42 	bl	8003e38 <HAL_GetTick>
 80065b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80065b6:	e008      	b.n	80065ca <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80065b8:	f7fd fc3e 	bl	8003e38 <HAL_GetTick>
 80065bc:	4602      	mov	r2, r0
 80065be:	693b      	ldr	r3, [r7, #16]
 80065c0:	1ad3      	subs	r3, r2, r3
 80065c2:	2b02      	cmp	r3, #2
 80065c4:	d901      	bls.n	80065ca <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80065c6:	2303      	movs	r3, #3
 80065c8:	e232      	b.n	8006a30 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80065ca:	4b34      	ldr	r3, [pc, #208]	@ (800669c <HAL_RCC_OscConfig+0x27c>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d0f0      	beq.n	80065b8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065d6:	4b31      	ldr	r3, [pc, #196]	@ (800669c <HAL_RCC_OscConfig+0x27c>)
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	691b      	ldr	r3, [r3, #16]
 80065e2:	061b      	lsls	r3, r3, #24
 80065e4:	492d      	ldr	r1, [pc, #180]	@ (800669c <HAL_RCC_OscConfig+0x27c>)
 80065e6:	4313      	orrs	r3, r2
 80065e8:	604b      	str	r3, [r1, #4]
 80065ea:	e01a      	b.n	8006622 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80065ec:	4b2b      	ldr	r3, [pc, #172]	@ (800669c <HAL_RCC_OscConfig+0x27c>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a2a      	ldr	r2, [pc, #168]	@ (800669c <HAL_RCC_OscConfig+0x27c>)
 80065f2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80065f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065f8:	f7fd fc1e 	bl	8003e38 <HAL_GetTick>
 80065fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80065fe:	e008      	b.n	8006612 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006600:	f7fd fc1a 	bl	8003e38 <HAL_GetTick>
 8006604:	4602      	mov	r2, r0
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	1ad3      	subs	r3, r2, r3
 800660a:	2b02      	cmp	r3, #2
 800660c:	d901      	bls.n	8006612 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800660e:	2303      	movs	r3, #3
 8006610:	e20e      	b.n	8006a30 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006612:	4b22      	ldr	r3, [pc, #136]	@ (800669c <HAL_RCC_OscConfig+0x27c>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800661a:	2b00      	cmp	r3, #0
 800661c:	d1f0      	bne.n	8006600 <HAL_RCC_OscConfig+0x1e0>
 800661e:	e000      	b.n	8006622 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006620:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f003 0308 	and.w	r3, r3, #8
 800662a:	2b00      	cmp	r3, #0
 800662c:	d041      	beq.n	80066b2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	695b      	ldr	r3, [r3, #20]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d01c      	beq.n	8006670 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006636:	4b19      	ldr	r3, [pc, #100]	@ (800669c <HAL_RCC_OscConfig+0x27c>)
 8006638:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800663c:	4a17      	ldr	r2, [pc, #92]	@ (800669c <HAL_RCC_OscConfig+0x27c>)
 800663e:	f043 0301 	orr.w	r3, r3, #1
 8006642:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006646:	f7fd fbf7 	bl	8003e38 <HAL_GetTick>
 800664a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800664c:	e008      	b.n	8006660 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800664e:	f7fd fbf3 	bl	8003e38 <HAL_GetTick>
 8006652:	4602      	mov	r2, r0
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	1ad3      	subs	r3, r2, r3
 8006658:	2b02      	cmp	r3, #2
 800665a:	d901      	bls.n	8006660 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800665c:	2303      	movs	r3, #3
 800665e:	e1e7      	b.n	8006a30 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006660:	4b0e      	ldr	r3, [pc, #56]	@ (800669c <HAL_RCC_OscConfig+0x27c>)
 8006662:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006666:	f003 0302 	and.w	r3, r3, #2
 800666a:	2b00      	cmp	r3, #0
 800666c:	d0ef      	beq.n	800664e <HAL_RCC_OscConfig+0x22e>
 800666e:	e020      	b.n	80066b2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006670:	4b0a      	ldr	r3, [pc, #40]	@ (800669c <HAL_RCC_OscConfig+0x27c>)
 8006672:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006676:	4a09      	ldr	r2, [pc, #36]	@ (800669c <HAL_RCC_OscConfig+0x27c>)
 8006678:	f023 0301 	bic.w	r3, r3, #1
 800667c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006680:	f7fd fbda 	bl	8003e38 <HAL_GetTick>
 8006684:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006686:	e00d      	b.n	80066a4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006688:	f7fd fbd6 	bl	8003e38 <HAL_GetTick>
 800668c:	4602      	mov	r2, r0
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	1ad3      	subs	r3, r2, r3
 8006692:	2b02      	cmp	r3, #2
 8006694:	d906      	bls.n	80066a4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006696:	2303      	movs	r3, #3
 8006698:	e1ca      	b.n	8006a30 <HAL_RCC_OscConfig+0x610>
 800669a:	bf00      	nop
 800669c:	40021000 	.word	0x40021000
 80066a0:	20000024 	.word	0x20000024
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80066a4:	4b8c      	ldr	r3, [pc, #560]	@ (80068d8 <HAL_RCC_OscConfig+0x4b8>)
 80066a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80066aa:	f003 0302 	and.w	r3, r3, #2
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d1ea      	bne.n	8006688 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f003 0304 	and.w	r3, r3, #4
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	f000 80a6 	beq.w	800680c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80066c0:	2300      	movs	r3, #0
 80066c2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80066c4:	4b84      	ldr	r3, [pc, #528]	@ (80068d8 <HAL_RCC_OscConfig+0x4b8>)
 80066c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d101      	bne.n	80066d4 <HAL_RCC_OscConfig+0x2b4>
 80066d0:	2301      	movs	r3, #1
 80066d2:	e000      	b.n	80066d6 <HAL_RCC_OscConfig+0x2b6>
 80066d4:	2300      	movs	r3, #0
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d00d      	beq.n	80066f6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80066da:	4b7f      	ldr	r3, [pc, #508]	@ (80068d8 <HAL_RCC_OscConfig+0x4b8>)
 80066dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066de:	4a7e      	ldr	r2, [pc, #504]	@ (80068d8 <HAL_RCC_OscConfig+0x4b8>)
 80066e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80066e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80066e6:	4b7c      	ldr	r3, [pc, #496]	@ (80068d8 <HAL_RCC_OscConfig+0x4b8>)
 80066e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80066ee:	60fb      	str	r3, [r7, #12]
 80066f0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80066f2:	2301      	movs	r3, #1
 80066f4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80066f6:	4b79      	ldr	r3, [pc, #484]	@ (80068dc <HAL_RCC_OscConfig+0x4bc>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d118      	bne.n	8006734 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006702:	4b76      	ldr	r3, [pc, #472]	@ (80068dc <HAL_RCC_OscConfig+0x4bc>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4a75      	ldr	r2, [pc, #468]	@ (80068dc <HAL_RCC_OscConfig+0x4bc>)
 8006708:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800670c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800670e:	f7fd fb93 	bl	8003e38 <HAL_GetTick>
 8006712:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006714:	e008      	b.n	8006728 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006716:	f7fd fb8f 	bl	8003e38 <HAL_GetTick>
 800671a:	4602      	mov	r2, r0
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	1ad3      	subs	r3, r2, r3
 8006720:	2b02      	cmp	r3, #2
 8006722:	d901      	bls.n	8006728 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006724:	2303      	movs	r3, #3
 8006726:	e183      	b.n	8006a30 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006728:	4b6c      	ldr	r3, [pc, #432]	@ (80068dc <HAL_RCC_OscConfig+0x4bc>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006730:	2b00      	cmp	r3, #0
 8006732:	d0f0      	beq.n	8006716 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	689b      	ldr	r3, [r3, #8]
 8006738:	2b01      	cmp	r3, #1
 800673a:	d108      	bne.n	800674e <HAL_RCC_OscConfig+0x32e>
 800673c:	4b66      	ldr	r3, [pc, #408]	@ (80068d8 <HAL_RCC_OscConfig+0x4b8>)
 800673e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006742:	4a65      	ldr	r2, [pc, #404]	@ (80068d8 <HAL_RCC_OscConfig+0x4b8>)
 8006744:	f043 0301 	orr.w	r3, r3, #1
 8006748:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800674c:	e024      	b.n	8006798 <HAL_RCC_OscConfig+0x378>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	689b      	ldr	r3, [r3, #8]
 8006752:	2b05      	cmp	r3, #5
 8006754:	d110      	bne.n	8006778 <HAL_RCC_OscConfig+0x358>
 8006756:	4b60      	ldr	r3, [pc, #384]	@ (80068d8 <HAL_RCC_OscConfig+0x4b8>)
 8006758:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800675c:	4a5e      	ldr	r2, [pc, #376]	@ (80068d8 <HAL_RCC_OscConfig+0x4b8>)
 800675e:	f043 0304 	orr.w	r3, r3, #4
 8006762:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006766:	4b5c      	ldr	r3, [pc, #368]	@ (80068d8 <HAL_RCC_OscConfig+0x4b8>)
 8006768:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800676c:	4a5a      	ldr	r2, [pc, #360]	@ (80068d8 <HAL_RCC_OscConfig+0x4b8>)
 800676e:	f043 0301 	orr.w	r3, r3, #1
 8006772:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006776:	e00f      	b.n	8006798 <HAL_RCC_OscConfig+0x378>
 8006778:	4b57      	ldr	r3, [pc, #348]	@ (80068d8 <HAL_RCC_OscConfig+0x4b8>)
 800677a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800677e:	4a56      	ldr	r2, [pc, #344]	@ (80068d8 <HAL_RCC_OscConfig+0x4b8>)
 8006780:	f023 0301 	bic.w	r3, r3, #1
 8006784:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006788:	4b53      	ldr	r3, [pc, #332]	@ (80068d8 <HAL_RCC_OscConfig+0x4b8>)
 800678a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800678e:	4a52      	ldr	r2, [pc, #328]	@ (80068d8 <HAL_RCC_OscConfig+0x4b8>)
 8006790:	f023 0304 	bic.w	r3, r3, #4
 8006794:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	689b      	ldr	r3, [r3, #8]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d016      	beq.n	80067ce <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067a0:	f7fd fb4a 	bl	8003e38 <HAL_GetTick>
 80067a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80067a6:	e00a      	b.n	80067be <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067a8:	f7fd fb46 	bl	8003e38 <HAL_GetTick>
 80067ac:	4602      	mov	r2, r0
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	1ad3      	subs	r3, r2, r3
 80067b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d901      	bls.n	80067be <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80067ba:	2303      	movs	r3, #3
 80067bc:	e138      	b.n	8006a30 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80067be:	4b46      	ldr	r3, [pc, #280]	@ (80068d8 <HAL_RCC_OscConfig+0x4b8>)
 80067c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067c4:	f003 0302 	and.w	r3, r3, #2
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d0ed      	beq.n	80067a8 <HAL_RCC_OscConfig+0x388>
 80067cc:	e015      	b.n	80067fa <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067ce:	f7fd fb33 	bl	8003e38 <HAL_GetTick>
 80067d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80067d4:	e00a      	b.n	80067ec <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067d6:	f7fd fb2f 	bl	8003e38 <HAL_GetTick>
 80067da:	4602      	mov	r2, r0
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	1ad3      	subs	r3, r2, r3
 80067e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d901      	bls.n	80067ec <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80067e8:	2303      	movs	r3, #3
 80067ea:	e121      	b.n	8006a30 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80067ec:	4b3a      	ldr	r3, [pc, #232]	@ (80068d8 <HAL_RCC_OscConfig+0x4b8>)
 80067ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067f2:	f003 0302 	and.w	r3, r3, #2
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d1ed      	bne.n	80067d6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80067fa:	7ffb      	ldrb	r3, [r7, #31]
 80067fc:	2b01      	cmp	r3, #1
 80067fe:	d105      	bne.n	800680c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006800:	4b35      	ldr	r3, [pc, #212]	@ (80068d8 <HAL_RCC_OscConfig+0x4b8>)
 8006802:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006804:	4a34      	ldr	r2, [pc, #208]	@ (80068d8 <HAL_RCC_OscConfig+0x4b8>)
 8006806:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800680a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f003 0320 	and.w	r3, r3, #32
 8006814:	2b00      	cmp	r3, #0
 8006816:	d03c      	beq.n	8006892 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	699b      	ldr	r3, [r3, #24]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d01c      	beq.n	800685a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006820:	4b2d      	ldr	r3, [pc, #180]	@ (80068d8 <HAL_RCC_OscConfig+0x4b8>)
 8006822:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006826:	4a2c      	ldr	r2, [pc, #176]	@ (80068d8 <HAL_RCC_OscConfig+0x4b8>)
 8006828:	f043 0301 	orr.w	r3, r3, #1
 800682c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006830:	f7fd fb02 	bl	8003e38 <HAL_GetTick>
 8006834:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006836:	e008      	b.n	800684a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006838:	f7fd fafe 	bl	8003e38 <HAL_GetTick>
 800683c:	4602      	mov	r2, r0
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	1ad3      	subs	r3, r2, r3
 8006842:	2b02      	cmp	r3, #2
 8006844:	d901      	bls.n	800684a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8006846:	2303      	movs	r3, #3
 8006848:	e0f2      	b.n	8006a30 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800684a:	4b23      	ldr	r3, [pc, #140]	@ (80068d8 <HAL_RCC_OscConfig+0x4b8>)
 800684c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006850:	f003 0302 	and.w	r3, r3, #2
 8006854:	2b00      	cmp	r3, #0
 8006856:	d0ef      	beq.n	8006838 <HAL_RCC_OscConfig+0x418>
 8006858:	e01b      	b.n	8006892 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800685a:	4b1f      	ldr	r3, [pc, #124]	@ (80068d8 <HAL_RCC_OscConfig+0x4b8>)
 800685c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006860:	4a1d      	ldr	r2, [pc, #116]	@ (80068d8 <HAL_RCC_OscConfig+0x4b8>)
 8006862:	f023 0301 	bic.w	r3, r3, #1
 8006866:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800686a:	f7fd fae5 	bl	8003e38 <HAL_GetTick>
 800686e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006870:	e008      	b.n	8006884 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006872:	f7fd fae1 	bl	8003e38 <HAL_GetTick>
 8006876:	4602      	mov	r2, r0
 8006878:	693b      	ldr	r3, [r7, #16]
 800687a:	1ad3      	subs	r3, r2, r3
 800687c:	2b02      	cmp	r3, #2
 800687e:	d901      	bls.n	8006884 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006880:	2303      	movs	r3, #3
 8006882:	e0d5      	b.n	8006a30 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006884:	4b14      	ldr	r3, [pc, #80]	@ (80068d8 <HAL_RCC_OscConfig+0x4b8>)
 8006886:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800688a:	f003 0302 	and.w	r3, r3, #2
 800688e:	2b00      	cmp	r3, #0
 8006890:	d1ef      	bne.n	8006872 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	69db      	ldr	r3, [r3, #28]
 8006896:	2b00      	cmp	r3, #0
 8006898:	f000 80c9 	beq.w	8006a2e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800689c:	4b0e      	ldr	r3, [pc, #56]	@ (80068d8 <HAL_RCC_OscConfig+0x4b8>)
 800689e:	689b      	ldr	r3, [r3, #8]
 80068a0:	f003 030c 	and.w	r3, r3, #12
 80068a4:	2b0c      	cmp	r3, #12
 80068a6:	f000 8083 	beq.w	80069b0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	69db      	ldr	r3, [r3, #28]
 80068ae:	2b02      	cmp	r3, #2
 80068b0:	d15e      	bne.n	8006970 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068b2:	4b09      	ldr	r3, [pc, #36]	@ (80068d8 <HAL_RCC_OscConfig+0x4b8>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a08      	ldr	r2, [pc, #32]	@ (80068d8 <HAL_RCC_OscConfig+0x4b8>)
 80068b8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80068bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068be:	f7fd fabb 	bl	8003e38 <HAL_GetTick>
 80068c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80068c4:	e00c      	b.n	80068e0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068c6:	f7fd fab7 	bl	8003e38 <HAL_GetTick>
 80068ca:	4602      	mov	r2, r0
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	1ad3      	subs	r3, r2, r3
 80068d0:	2b02      	cmp	r3, #2
 80068d2:	d905      	bls.n	80068e0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80068d4:	2303      	movs	r3, #3
 80068d6:	e0ab      	b.n	8006a30 <HAL_RCC_OscConfig+0x610>
 80068d8:	40021000 	.word	0x40021000
 80068dc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80068e0:	4b55      	ldr	r3, [pc, #340]	@ (8006a38 <HAL_RCC_OscConfig+0x618>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d1ec      	bne.n	80068c6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80068ec:	4b52      	ldr	r3, [pc, #328]	@ (8006a38 <HAL_RCC_OscConfig+0x618>)
 80068ee:	68da      	ldr	r2, [r3, #12]
 80068f0:	4b52      	ldr	r3, [pc, #328]	@ (8006a3c <HAL_RCC_OscConfig+0x61c>)
 80068f2:	4013      	ands	r3, r2
 80068f4:	687a      	ldr	r2, [r7, #4]
 80068f6:	6a11      	ldr	r1, [r2, #32]
 80068f8:	687a      	ldr	r2, [r7, #4]
 80068fa:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80068fc:	3a01      	subs	r2, #1
 80068fe:	0112      	lsls	r2, r2, #4
 8006900:	4311      	orrs	r1, r2
 8006902:	687a      	ldr	r2, [r7, #4]
 8006904:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8006906:	0212      	lsls	r2, r2, #8
 8006908:	4311      	orrs	r1, r2
 800690a:	687a      	ldr	r2, [r7, #4]
 800690c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800690e:	0852      	lsrs	r2, r2, #1
 8006910:	3a01      	subs	r2, #1
 8006912:	0552      	lsls	r2, r2, #21
 8006914:	4311      	orrs	r1, r2
 8006916:	687a      	ldr	r2, [r7, #4]
 8006918:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800691a:	0852      	lsrs	r2, r2, #1
 800691c:	3a01      	subs	r2, #1
 800691e:	0652      	lsls	r2, r2, #25
 8006920:	4311      	orrs	r1, r2
 8006922:	687a      	ldr	r2, [r7, #4]
 8006924:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006926:	06d2      	lsls	r2, r2, #27
 8006928:	430a      	orrs	r2, r1
 800692a:	4943      	ldr	r1, [pc, #268]	@ (8006a38 <HAL_RCC_OscConfig+0x618>)
 800692c:	4313      	orrs	r3, r2
 800692e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006930:	4b41      	ldr	r3, [pc, #260]	@ (8006a38 <HAL_RCC_OscConfig+0x618>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4a40      	ldr	r2, [pc, #256]	@ (8006a38 <HAL_RCC_OscConfig+0x618>)
 8006936:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800693a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800693c:	4b3e      	ldr	r3, [pc, #248]	@ (8006a38 <HAL_RCC_OscConfig+0x618>)
 800693e:	68db      	ldr	r3, [r3, #12]
 8006940:	4a3d      	ldr	r2, [pc, #244]	@ (8006a38 <HAL_RCC_OscConfig+0x618>)
 8006942:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006946:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006948:	f7fd fa76 	bl	8003e38 <HAL_GetTick>
 800694c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800694e:	e008      	b.n	8006962 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006950:	f7fd fa72 	bl	8003e38 <HAL_GetTick>
 8006954:	4602      	mov	r2, r0
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	1ad3      	subs	r3, r2, r3
 800695a:	2b02      	cmp	r3, #2
 800695c:	d901      	bls.n	8006962 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800695e:	2303      	movs	r3, #3
 8006960:	e066      	b.n	8006a30 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006962:	4b35      	ldr	r3, [pc, #212]	@ (8006a38 <HAL_RCC_OscConfig+0x618>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800696a:	2b00      	cmp	r3, #0
 800696c:	d0f0      	beq.n	8006950 <HAL_RCC_OscConfig+0x530>
 800696e:	e05e      	b.n	8006a2e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006970:	4b31      	ldr	r3, [pc, #196]	@ (8006a38 <HAL_RCC_OscConfig+0x618>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a30      	ldr	r2, [pc, #192]	@ (8006a38 <HAL_RCC_OscConfig+0x618>)
 8006976:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800697a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800697c:	f7fd fa5c 	bl	8003e38 <HAL_GetTick>
 8006980:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006982:	e008      	b.n	8006996 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006984:	f7fd fa58 	bl	8003e38 <HAL_GetTick>
 8006988:	4602      	mov	r2, r0
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	1ad3      	subs	r3, r2, r3
 800698e:	2b02      	cmp	r3, #2
 8006990:	d901      	bls.n	8006996 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8006992:	2303      	movs	r3, #3
 8006994:	e04c      	b.n	8006a30 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006996:	4b28      	ldr	r3, [pc, #160]	@ (8006a38 <HAL_RCC_OscConfig+0x618>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d1f0      	bne.n	8006984 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80069a2:	4b25      	ldr	r3, [pc, #148]	@ (8006a38 <HAL_RCC_OscConfig+0x618>)
 80069a4:	68da      	ldr	r2, [r3, #12]
 80069a6:	4924      	ldr	r1, [pc, #144]	@ (8006a38 <HAL_RCC_OscConfig+0x618>)
 80069a8:	4b25      	ldr	r3, [pc, #148]	@ (8006a40 <HAL_RCC_OscConfig+0x620>)
 80069aa:	4013      	ands	r3, r2
 80069ac:	60cb      	str	r3, [r1, #12]
 80069ae:	e03e      	b.n	8006a2e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	69db      	ldr	r3, [r3, #28]
 80069b4:	2b01      	cmp	r3, #1
 80069b6:	d101      	bne.n	80069bc <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80069b8:	2301      	movs	r3, #1
 80069ba:	e039      	b.n	8006a30 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80069bc:	4b1e      	ldr	r3, [pc, #120]	@ (8006a38 <HAL_RCC_OscConfig+0x618>)
 80069be:	68db      	ldr	r3, [r3, #12]
 80069c0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	f003 0203 	and.w	r2, r3, #3
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6a1b      	ldr	r3, [r3, #32]
 80069cc:	429a      	cmp	r2, r3
 80069ce:	d12c      	bne.n	8006a2a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069da:	3b01      	subs	r3, #1
 80069dc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80069de:	429a      	cmp	r2, r3
 80069e0:	d123      	bne.n	8006a2a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80069e2:	697b      	ldr	r3, [r7, #20]
 80069e4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069ec:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80069ee:	429a      	cmp	r2, r3
 80069f0:	d11b      	bne.n	8006a2a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069fc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80069fe:	429a      	cmp	r2, r3
 8006a00:	d113      	bne.n	8006a2a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a0c:	085b      	lsrs	r3, r3, #1
 8006a0e:	3b01      	subs	r3, #1
 8006a10:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006a12:	429a      	cmp	r2, r3
 8006a14:	d109      	bne.n	8006a2a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a20:	085b      	lsrs	r3, r3, #1
 8006a22:	3b01      	subs	r3, #1
 8006a24:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006a26:	429a      	cmp	r2, r3
 8006a28:	d001      	beq.n	8006a2e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	e000      	b.n	8006a30 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8006a2e:	2300      	movs	r3, #0
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	3720      	adds	r7, #32
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bd80      	pop	{r7, pc}
 8006a38:	40021000 	.word	0x40021000
 8006a3c:	019f800c 	.word	0x019f800c
 8006a40:	feeefffc 	.word	0xfeeefffc

08006a44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b086      	sub	sp, #24
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
 8006a4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006a4e:	2300      	movs	r3, #0
 8006a50:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d101      	bne.n	8006a5c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006a58:	2301      	movs	r3, #1
 8006a5a:	e11e      	b.n	8006c9a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006a5c:	4b91      	ldr	r3, [pc, #580]	@ (8006ca4 <HAL_RCC_ClockConfig+0x260>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f003 030f 	and.w	r3, r3, #15
 8006a64:	683a      	ldr	r2, [r7, #0]
 8006a66:	429a      	cmp	r2, r3
 8006a68:	d910      	bls.n	8006a8c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a6a:	4b8e      	ldr	r3, [pc, #568]	@ (8006ca4 <HAL_RCC_ClockConfig+0x260>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f023 020f 	bic.w	r2, r3, #15
 8006a72:	498c      	ldr	r1, [pc, #560]	@ (8006ca4 <HAL_RCC_ClockConfig+0x260>)
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	4313      	orrs	r3, r2
 8006a78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a7a:	4b8a      	ldr	r3, [pc, #552]	@ (8006ca4 <HAL_RCC_ClockConfig+0x260>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f003 030f 	and.w	r3, r3, #15
 8006a82:	683a      	ldr	r2, [r7, #0]
 8006a84:	429a      	cmp	r2, r3
 8006a86:	d001      	beq.n	8006a8c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006a88:	2301      	movs	r3, #1
 8006a8a:	e106      	b.n	8006c9a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f003 0301 	and.w	r3, r3, #1
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d073      	beq.n	8006b80 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	685b      	ldr	r3, [r3, #4]
 8006a9c:	2b03      	cmp	r3, #3
 8006a9e:	d129      	bne.n	8006af4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006aa0:	4b81      	ldr	r3, [pc, #516]	@ (8006ca8 <HAL_RCC_ClockConfig+0x264>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d101      	bne.n	8006ab0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006aac:	2301      	movs	r3, #1
 8006aae:	e0f4      	b.n	8006c9a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006ab0:	f000 f9ba 	bl	8006e28 <RCC_GetSysClockFreqFromPLLSource>
 8006ab4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8006ab6:	693b      	ldr	r3, [r7, #16]
 8006ab8:	4a7c      	ldr	r2, [pc, #496]	@ (8006cac <HAL_RCC_ClockConfig+0x268>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d93f      	bls.n	8006b3e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006abe:	4b7a      	ldr	r3, [pc, #488]	@ (8006ca8 <HAL_RCC_ClockConfig+0x264>)
 8006ac0:	689b      	ldr	r3, [r3, #8]
 8006ac2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d009      	beq.n	8006ade <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d033      	beq.n	8006b3e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d12f      	bne.n	8006b3e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006ade:	4b72      	ldr	r3, [pc, #456]	@ (8006ca8 <HAL_RCC_ClockConfig+0x264>)
 8006ae0:	689b      	ldr	r3, [r3, #8]
 8006ae2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006ae6:	4a70      	ldr	r2, [pc, #448]	@ (8006ca8 <HAL_RCC_ClockConfig+0x264>)
 8006ae8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006aec:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006aee:	2380      	movs	r3, #128	@ 0x80
 8006af0:	617b      	str	r3, [r7, #20]
 8006af2:	e024      	b.n	8006b3e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	685b      	ldr	r3, [r3, #4]
 8006af8:	2b02      	cmp	r3, #2
 8006afa:	d107      	bne.n	8006b0c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006afc:	4b6a      	ldr	r3, [pc, #424]	@ (8006ca8 <HAL_RCC_ClockConfig+0x264>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d109      	bne.n	8006b1c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006b08:	2301      	movs	r3, #1
 8006b0a:	e0c6      	b.n	8006c9a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006b0c:	4b66      	ldr	r3, [pc, #408]	@ (8006ca8 <HAL_RCC_ClockConfig+0x264>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d101      	bne.n	8006b1c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006b18:	2301      	movs	r3, #1
 8006b1a:	e0be      	b.n	8006c9a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006b1c:	f000 f8ce 	bl	8006cbc <HAL_RCC_GetSysClockFreq>
 8006b20:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8006b22:	693b      	ldr	r3, [r7, #16]
 8006b24:	4a61      	ldr	r2, [pc, #388]	@ (8006cac <HAL_RCC_ClockConfig+0x268>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d909      	bls.n	8006b3e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006b2a:	4b5f      	ldr	r3, [pc, #380]	@ (8006ca8 <HAL_RCC_ClockConfig+0x264>)
 8006b2c:	689b      	ldr	r3, [r3, #8]
 8006b2e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006b32:	4a5d      	ldr	r2, [pc, #372]	@ (8006ca8 <HAL_RCC_ClockConfig+0x264>)
 8006b34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b38:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006b3a:	2380      	movs	r3, #128	@ 0x80
 8006b3c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006b3e:	4b5a      	ldr	r3, [pc, #360]	@ (8006ca8 <HAL_RCC_ClockConfig+0x264>)
 8006b40:	689b      	ldr	r3, [r3, #8]
 8006b42:	f023 0203 	bic.w	r2, r3, #3
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	685b      	ldr	r3, [r3, #4]
 8006b4a:	4957      	ldr	r1, [pc, #348]	@ (8006ca8 <HAL_RCC_ClockConfig+0x264>)
 8006b4c:	4313      	orrs	r3, r2
 8006b4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b50:	f7fd f972 	bl	8003e38 <HAL_GetTick>
 8006b54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b56:	e00a      	b.n	8006b6e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b58:	f7fd f96e 	bl	8003e38 <HAL_GetTick>
 8006b5c:	4602      	mov	r2, r0
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	1ad3      	subs	r3, r2, r3
 8006b62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d901      	bls.n	8006b6e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006b6a:	2303      	movs	r3, #3
 8006b6c:	e095      	b.n	8006c9a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b6e:	4b4e      	ldr	r3, [pc, #312]	@ (8006ca8 <HAL_RCC_ClockConfig+0x264>)
 8006b70:	689b      	ldr	r3, [r3, #8]
 8006b72:	f003 020c 	and.w	r2, r3, #12
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	009b      	lsls	r3, r3, #2
 8006b7c:	429a      	cmp	r2, r3
 8006b7e:	d1eb      	bne.n	8006b58 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f003 0302 	and.w	r3, r3, #2
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d023      	beq.n	8006bd4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f003 0304 	and.w	r3, r3, #4
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d005      	beq.n	8006ba4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006b98:	4b43      	ldr	r3, [pc, #268]	@ (8006ca8 <HAL_RCC_ClockConfig+0x264>)
 8006b9a:	689b      	ldr	r3, [r3, #8]
 8006b9c:	4a42      	ldr	r2, [pc, #264]	@ (8006ca8 <HAL_RCC_ClockConfig+0x264>)
 8006b9e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006ba2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f003 0308 	and.w	r3, r3, #8
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d007      	beq.n	8006bc0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006bb0:	4b3d      	ldr	r3, [pc, #244]	@ (8006ca8 <HAL_RCC_ClockConfig+0x264>)
 8006bb2:	689b      	ldr	r3, [r3, #8]
 8006bb4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006bb8:	4a3b      	ldr	r2, [pc, #236]	@ (8006ca8 <HAL_RCC_ClockConfig+0x264>)
 8006bba:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006bbe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006bc0:	4b39      	ldr	r3, [pc, #228]	@ (8006ca8 <HAL_RCC_ClockConfig+0x264>)
 8006bc2:	689b      	ldr	r3, [r3, #8]
 8006bc4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	689b      	ldr	r3, [r3, #8]
 8006bcc:	4936      	ldr	r1, [pc, #216]	@ (8006ca8 <HAL_RCC_ClockConfig+0x264>)
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	608b      	str	r3, [r1, #8]
 8006bd2:	e008      	b.n	8006be6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	2b80      	cmp	r3, #128	@ 0x80
 8006bd8:	d105      	bne.n	8006be6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006bda:	4b33      	ldr	r3, [pc, #204]	@ (8006ca8 <HAL_RCC_ClockConfig+0x264>)
 8006bdc:	689b      	ldr	r3, [r3, #8]
 8006bde:	4a32      	ldr	r2, [pc, #200]	@ (8006ca8 <HAL_RCC_ClockConfig+0x264>)
 8006be0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006be4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006be6:	4b2f      	ldr	r3, [pc, #188]	@ (8006ca4 <HAL_RCC_ClockConfig+0x260>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f003 030f 	and.w	r3, r3, #15
 8006bee:	683a      	ldr	r2, [r7, #0]
 8006bf0:	429a      	cmp	r2, r3
 8006bf2:	d21d      	bcs.n	8006c30 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006bf4:	4b2b      	ldr	r3, [pc, #172]	@ (8006ca4 <HAL_RCC_ClockConfig+0x260>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f023 020f 	bic.w	r2, r3, #15
 8006bfc:	4929      	ldr	r1, [pc, #164]	@ (8006ca4 <HAL_RCC_ClockConfig+0x260>)
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	4313      	orrs	r3, r2
 8006c02:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006c04:	f7fd f918 	bl	8003e38 <HAL_GetTick>
 8006c08:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c0a:	e00a      	b.n	8006c22 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c0c:	f7fd f914 	bl	8003e38 <HAL_GetTick>
 8006c10:	4602      	mov	r2, r0
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	1ad3      	subs	r3, r2, r3
 8006c16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d901      	bls.n	8006c22 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006c1e:	2303      	movs	r3, #3
 8006c20:	e03b      	b.n	8006c9a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c22:	4b20      	ldr	r3, [pc, #128]	@ (8006ca4 <HAL_RCC_ClockConfig+0x260>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f003 030f 	and.w	r3, r3, #15
 8006c2a:	683a      	ldr	r2, [r7, #0]
 8006c2c:	429a      	cmp	r2, r3
 8006c2e:	d1ed      	bne.n	8006c0c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f003 0304 	and.w	r3, r3, #4
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d008      	beq.n	8006c4e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006c3c:	4b1a      	ldr	r3, [pc, #104]	@ (8006ca8 <HAL_RCC_ClockConfig+0x264>)
 8006c3e:	689b      	ldr	r3, [r3, #8]
 8006c40:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	68db      	ldr	r3, [r3, #12]
 8006c48:	4917      	ldr	r1, [pc, #92]	@ (8006ca8 <HAL_RCC_ClockConfig+0x264>)
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f003 0308 	and.w	r3, r3, #8
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d009      	beq.n	8006c6e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006c5a:	4b13      	ldr	r3, [pc, #76]	@ (8006ca8 <HAL_RCC_ClockConfig+0x264>)
 8006c5c:	689b      	ldr	r3, [r3, #8]
 8006c5e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	691b      	ldr	r3, [r3, #16]
 8006c66:	00db      	lsls	r3, r3, #3
 8006c68:	490f      	ldr	r1, [pc, #60]	@ (8006ca8 <HAL_RCC_ClockConfig+0x264>)
 8006c6a:	4313      	orrs	r3, r2
 8006c6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006c6e:	f000 f825 	bl	8006cbc <HAL_RCC_GetSysClockFreq>
 8006c72:	4602      	mov	r2, r0
 8006c74:	4b0c      	ldr	r3, [pc, #48]	@ (8006ca8 <HAL_RCC_ClockConfig+0x264>)
 8006c76:	689b      	ldr	r3, [r3, #8]
 8006c78:	091b      	lsrs	r3, r3, #4
 8006c7a:	f003 030f 	and.w	r3, r3, #15
 8006c7e:	490c      	ldr	r1, [pc, #48]	@ (8006cb0 <HAL_RCC_ClockConfig+0x26c>)
 8006c80:	5ccb      	ldrb	r3, [r1, r3]
 8006c82:	f003 031f 	and.w	r3, r3, #31
 8006c86:	fa22 f303 	lsr.w	r3, r2, r3
 8006c8a:	4a0a      	ldr	r2, [pc, #40]	@ (8006cb4 <HAL_RCC_ClockConfig+0x270>)
 8006c8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006c8e:	4b0a      	ldr	r3, [pc, #40]	@ (8006cb8 <HAL_RCC_ClockConfig+0x274>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4618      	mov	r0, r3
 8006c94:	f7fc fc9c 	bl	80035d0 <HAL_InitTick>
 8006c98:	4603      	mov	r3, r0
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	3718      	adds	r7, #24
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}
 8006ca2:	bf00      	nop
 8006ca4:	40022000 	.word	0x40022000
 8006ca8:	40021000 	.word	0x40021000
 8006cac:	04c4b400 	.word	0x04c4b400
 8006cb0:	08013f54 	.word	0x08013f54
 8006cb4:	20000020 	.word	0x20000020
 8006cb8:	20000024 	.word	0x20000024

08006cbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b087      	sub	sp, #28
 8006cc0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006cc2:	4b2c      	ldr	r3, [pc, #176]	@ (8006d74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006cc4:	689b      	ldr	r3, [r3, #8]
 8006cc6:	f003 030c 	and.w	r3, r3, #12
 8006cca:	2b04      	cmp	r3, #4
 8006ccc:	d102      	bne.n	8006cd4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006cce:	4b2a      	ldr	r3, [pc, #168]	@ (8006d78 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006cd0:	613b      	str	r3, [r7, #16]
 8006cd2:	e047      	b.n	8006d64 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006cd4:	4b27      	ldr	r3, [pc, #156]	@ (8006d74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006cd6:	689b      	ldr	r3, [r3, #8]
 8006cd8:	f003 030c 	and.w	r3, r3, #12
 8006cdc:	2b08      	cmp	r3, #8
 8006cde:	d102      	bne.n	8006ce6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006ce0:	4b26      	ldr	r3, [pc, #152]	@ (8006d7c <HAL_RCC_GetSysClockFreq+0xc0>)
 8006ce2:	613b      	str	r3, [r7, #16]
 8006ce4:	e03e      	b.n	8006d64 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006ce6:	4b23      	ldr	r3, [pc, #140]	@ (8006d74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006ce8:	689b      	ldr	r3, [r3, #8]
 8006cea:	f003 030c 	and.w	r3, r3, #12
 8006cee:	2b0c      	cmp	r3, #12
 8006cf0:	d136      	bne.n	8006d60 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006cf2:	4b20      	ldr	r3, [pc, #128]	@ (8006d74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006cf4:	68db      	ldr	r3, [r3, #12]
 8006cf6:	f003 0303 	and.w	r3, r3, #3
 8006cfa:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006cfc:	4b1d      	ldr	r3, [pc, #116]	@ (8006d74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006cfe:	68db      	ldr	r3, [r3, #12]
 8006d00:	091b      	lsrs	r3, r3, #4
 8006d02:	f003 030f 	and.w	r3, r3, #15
 8006d06:	3301      	adds	r3, #1
 8006d08:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	2b03      	cmp	r3, #3
 8006d0e:	d10c      	bne.n	8006d2a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006d10:	4a1a      	ldr	r2, [pc, #104]	@ (8006d7c <HAL_RCC_GetSysClockFreq+0xc0>)
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d18:	4a16      	ldr	r2, [pc, #88]	@ (8006d74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006d1a:	68d2      	ldr	r2, [r2, #12]
 8006d1c:	0a12      	lsrs	r2, r2, #8
 8006d1e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006d22:	fb02 f303 	mul.w	r3, r2, r3
 8006d26:	617b      	str	r3, [r7, #20]
      break;
 8006d28:	e00c      	b.n	8006d44 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006d2a:	4a13      	ldr	r2, [pc, #76]	@ (8006d78 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d32:	4a10      	ldr	r2, [pc, #64]	@ (8006d74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006d34:	68d2      	ldr	r2, [r2, #12]
 8006d36:	0a12      	lsrs	r2, r2, #8
 8006d38:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006d3c:	fb02 f303 	mul.w	r3, r2, r3
 8006d40:	617b      	str	r3, [r7, #20]
      break;
 8006d42:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006d44:	4b0b      	ldr	r3, [pc, #44]	@ (8006d74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006d46:	68db      	ldr	r3, [r3, #12]
 8006d48:	0e5b      	lsrs	r3, r3, #25
 8006d4a:	f003 0303 	and.w	r3, r3, #3
 8006d4e:	3301      	adds	r3, #1
 8006d50:	005b      	lsls	r3, r3, #1
 8006d52:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006d54:	697a      	ldr	r2, [r7, #20]
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d5c:	613b      	str	r3, [r7, #16]
 8006d5e:	e001      	b.n	8006d64 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006d60:	2300      	movs	r3, #0
 8006d62:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006d64:	693b      	ldr	r3, [r7, #16]
}
 8006d66:	4618      	mov	r0, r3
 8006d68:	371c      	adds	r7, #28
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d70:	4770      	bx	lr
 8006d72:	bf00      	nop
 8006d74:	40021000 	.word	0x40021000
 8006d78:	00f42400 	.word	0x00f42400
 8006d7c:	007a1200 	.word	0x007a1200

08006d80 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006d80:	b480      	push	{r7}
 8006d82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006d84:	4b03      	ldr	r3, [pc, #12]	@ (8006d94 <HAL_RCC_GetHCLKFreq+0x14>)
 8006d86:	681b      	ldr	r3, [r3, #0]
}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d90:	4770      	bx	lr
 8006d92:	bf00      	nop
 8006d94:	20000020 	.word	0x20000020

08006d98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006d9c:	f7ff fff0 	bl	8006d80 <HAL_RCC_GetHCLKFreq>
 8006da0:	4602      	mov	r2, r0
 8006da2:	4b06      	ldr	r3, [pc, #24]	@ (8006dbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8006da4:	689b      	ldr	r3, [r3, #8]
 8006da6:	0adb      	lsrs	r3, r3, #11
 8006da8:	f003 0307 	and.w	r3, r3, #7
 8006dac:	4904      	ldr	r1, [pc, #16]	@ (8006dc0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006dae:	5ccb      	ldrb	r3, [r1, r3]
 8006db0:	f003 031f 	and.w	r3, r3, #31
 8006db4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	bd80      	pop	{r7, pc}
 8006dbc:	40021000 	.word	0x40021000
 8006dc0:	08013f64 	.word	0x08013f64

08006dc4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b083      	sub	sp, #12
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
 8006dcc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	220f      	movs	r2, #15
 8006dd2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8006dd4:	4b12      	ldr	r3, [pc, #72]	@ (8006e20 <HAL_RCC_GetClockConfig+0x5c>)
 8006dd6:	689b      	ldr	r3, [r3, #8]
 8006dd8:	f003 0203 	and.w	r2, r3, #3
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8006de0:	4b0f      	ldr	r3, [pc, #60]	@ (8006e20 <HAL_RCC_GetClockConfig+0x5c>)
 8006de2:	689b      	ldr	r3, [r3, #8]
 8006de4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8006dec:	4b0c      	ldr	r3, [pc, #48]	@ (8006e20 <HAL_RCC_GetClockConfig+0x5c>)
 8006dee:	689b      	ldr	r3, [r3, #8]
 8006df0:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8006df8:	4b09      	ldr	r3, [pc, #36]	@ (8006e20 <HAL_RCC_GetClockConfig+0x5c>)
 8006dfa:	689b      	ldr	r3, [r3, #8]
 8006dfc:	08db      	lsrs	r3, r3, #3
 8006dfe:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8006e06:	4b07      	ldr	r3, [pc, #28]	@ (8006e24 <HAL_RCC_GetClockConfig+0x60>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f003 020f 	and.w	r2, r3, #15
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	601a      	str	r2, [r3, #0]
}
 8006e12:	bf00      	nop
 8006e14:	370c      	adds	r7, #12
 8006e16:	46bd      	mov	sp, r7
 8006e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1c:	4770      	bx	lr
 8006e1e:	bf00      	nop
 8006e20:	40021000 	.word	0x40021000
 8006e24:	40022000 	.word	0x40022000

08006e28 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b087      	sub	sp, #28
 8006e2c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006e2e:	4b1e      	ldr	r3, [pc, #120]	@ (8006ea8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006e30:	68db      	ldr	r3, [r3, #12]
 8006e32:	f003 0303 	and.w	r3, r3, #3
 8006e36:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006e38:	4b1b      	ldr	r3, [pc, #108]	@ (8006ea8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006e3a:	68db      	ldr	r3, [r3, #12]
 8006e3c:	091b      	lsrs	r3, r3, #4
 8006e3e:	f003 030f 	and.w	r3, r3, #15
 8006e42:	3301      	adds	r3, #1
 8006e44:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006e46:	693b      	ldr	r3, [r7, #16]
 8006e48:	2b03      	cmp	r3, #3
 8006e4a:	d10c      	bne.n	8006e66 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006e4c:	4a17      	ldr	r2, [pc, #92]	@ (8006eac <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e54:	4a14      	ldr	r2, [pc, #80]	@ (8006ea8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006e56:	68d2      	ldr	r2, [r2, #12]
 8006e58:	0a12      	lsrs	r2, r2, #8
 8006e5a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006e5e:	fb02 f303 	mul.w	r3, r2, r3
 8006e62:	617b      	str	r3, [r7, #20]
    break;
 8006e64:	e00c      	b.n	8006e80 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006e66:	4a12      	ldr	r2, [pc, #72]	@ (8006eb0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e6e:	4a0e      	ldr	r2, [pc, #56]	@ (8006ea8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006e70:	68d2      	ldr	r2, [r2, #12]
 8006e72:	0a12      	lsrs	r2, r2, #8
 8006e74:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006e78:	fb02 f303 	mul.w	r3, r2, r3
 8006e7c:	617b      	str	r3, [r7, #20]
    break;
 8006e7e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006e80:	4b09      	ldr	r3, [pc, #36]	@ (8006ea8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006e82:	68db      	ldr	r3, [r3, #12]
 8006e84:	0e5b      	lsrs	r3, r3, #25
 8006e86:	f003 0303 	and.w	r3, r3, #3
 8006e8a:	3301      	adds	r3, #1
 8006e8c:	005b      	lsls	r3, r3, #1
 8006e8e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006e90:	697a      	ldr	r2, [r7, #20]
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e98:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006e9a:	687b      	ldr	r3, [r7, #4]
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	371c      	adds	r7, #28
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea6:	4770      	bx	lr
 8006ea8:	40021000 	.word	0x40021000
 8006eac:	007a1200 	.word	0x007a1200
 8006eb0:	00f42400 	.word	0x00f42400

08006eb4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b086      	sub	sp, #24
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	f000 8098 	beq.w	8007002 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006ed6:	4b43      	ldr	r3, [pc, #268]	@ (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ed8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006eda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d10d      	bne.n	8006efe <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006ee2:	4b40      	ldr	r3, [pc, #256]	@ (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ee4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ee6:	4a3f      	ldr	r2, [pc, #252]	@ (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ee8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006eec:	6593      	str	r3, [r2, #88]	@ 0x58
 8006eee:	4b3d      	ldr	r3, [pc, #244]	@ (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ef0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ef2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006ef6:	60bb      	str	r3, [r7, #8]
 8006ef8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006efa:	2301      	movs	r3, #1
 8006efc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006efe:	4b3a      	ldr	r3, [pc, #232]	@ (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4a39      	ldr	r2, [pc, #228]	@ (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006f04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f08:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006f0a:	f7fc ff95 	bl	8003e38 <HAL_GetTick>
 8006f0e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006f10:	e009      	b.n	8006f26 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f12:	f7fc ff91 	bl	8003e38 <HAL_GetTick>
 8006f16:	4602      	mov	r2, r0
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	1ad3      	subs	r3, r2, r3
 8006f1c:	2b02      	cmp	r3, #2
 8006f1e:	d902      	bls.n	8006f26 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006f20:	2303      	movs	r3, #3
 8006f22:	74fb      	strb	r3, [r7, #19]
        break;
 8006f24:	e005      	b.n	8006f32 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006f26:	4b30      	ldr	r3, [pc, #192]	@ (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d0ef      	beq.n	8006f12 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006f32:	7cfb      	ldrb	r3, [r7, #19]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d159      	bne.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006f38:	4b2a      	ldr	r3, [pc, #168]	@ (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006f42:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d01e      	beq.n	8006f88 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f4e:	697a      	ldr	r2, [r7, #20]
 8006f50:	429a      	cmp	r2, r3
 8006f52:	d019      	beq.n	8006f88 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006f54:	4b23      	ldr	r3, [pc, #140]	@ (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f5a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006f5e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006f60:	4b20      	ldr	r3, [pc, #128]	@ (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f66:	4a1f      	ldr	r2, [pc, #124]	@ (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006f68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006f6c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006f70:	4b1c      	ldr	r3, [pc, #112]	@ (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f76:	4a1b      	ldr	r2, [pc, #108]	@ (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006f78:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006f7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006f80:	4a18      	ldr	r2, [pc, #96]	@ (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006f88:	697b      	ldr	r3, [r7, #20]
 8006f8a:	f003 0301 	and.w	r3, r3, #1
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d016      	beq.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f92:	f7fc ff51 	bl	8003e38 <HAL_GetTick>
 8006f96:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006f98:	e00b      	b.n	8006fb2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f9a:	f7fc ff4d 	bl	8003e38 <HAL_GetTick>
 8006f9e:	4602      	mov	r2, r0
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	1ad3      	subs	r3, r2, r3
 8006fa4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d902      	bls.n	8006fb2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006fac:	2303      	movs	r3, #3
 8006fae:	74fb      	strb	r3, [r7, #19]
            break;
 8006fb0:	e006      	b.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006fb2:	4b0c      	ldr	r3, [pc, #48]	@ (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006fb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fb8:	f003 0302 	and.w	r3, r3, #2
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d0ec      	beq.n	8006f9a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006fc0:	7cfb      	ldrb	r3, [r7, #19]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d10b      	bne.n	8006fde <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006fc6:	4b07      	ldr	r3, [pc, #28]	@ (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006fc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fcc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006fd4:	4903      	ldr	r1, [pc, #12]	@ (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006fd6:	4313      	orrs	r3, r2
 8006fd8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006fdc:	e008      	b.n	8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006fde:	7cfb      	ldrb	r3, [r7, #19]
 8006fe0:	74bb      	strb	r3, [r7, #18]
 8006fe2:	e005      	b.n	8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006fe4:	40021000 	.word	0x40021000
 8006fe8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fec:	7cfb      	ldrb	r3, [r7, #19]
 8006fee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006ff0:	7c7b      	ldrb	r3, [r7, #17]
 8006ff2:	2b01      	cmp	r3, #1
 8006ff4:	d105      	bne.n	8007002 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006ff6:	4ba7      	ldr	r3, [pc, #668]	@ (8007294 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ff8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ffa:	4aa6      	ldr	r2, [pc, #664]	@ (8007294 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ffc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007000:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f003 0301 	and.w	r3, r3, #1
 800700a:	2b00      	cmp	r3, #0
 800700c:	d00a      	beq.n	8007024 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800700e:	4ba1      	ldr	r3, [pc, #644]	@ (8007294 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007010:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007014:	f023 0203 	bic.w	r2, r3, #3
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	685b      	ldr	r3, [r3, #4]
 800701c:	499d      	ldr	r1, [pc, #628]	@ (8007294 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800701e:	4313      	orrs	r3, r2
 8007020:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f003 0302 	and.w	r3, r3, #2
 800702c:	2b00      	cmp	r3, #0
 800702e:	d00a      	beq.n	8007046 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007030:	4b98      	ldr	r3, [pc, #608]	@ (8007294 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007032:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007036:	f023 020c 	bic.w	r2, r3, #12
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	689b      	ldr	r3, [r3, #8]
 800703e:	4995      	ldr	r1, [pc, #596]	@ (8007294 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007040:	4313      	orrs	r3, r2
 8007042:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f003 0304 	and.w	r3, r3, #4
 800704e:	2b00      	cmp	r3, #0
 8007050:	d00a      	beq.n	8007068 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007052:	4b90      	ldr	r3, [pc, #576]	@ (8007294 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007054:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007058:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	68db      	ldr	r3, [r3, #12]
 8007060:	498c      	ldr	r1, [pc, #560]	@ (8007294 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007062:	4313      	orrs	r3, r2
 8007064:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f003 0308 	and.w	r3, r3, #8
 8007070:	2b00      	cmp	r3, #0
 8007072:	d00a      	beq.n	800708a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007074:	4b87      	ldr	r3, [pc, #540]	@ (8007294 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007076:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800707a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	691b      	ldr	r3, [r3, #16]
 8007082:	4984      	ldr	r1, [pc, #528]	@ (8007294 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007084:	4313      	orrs	r3, r2
 8007086:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f003 0310 	and.w	r3, r3, #16
 8007092:	2b00      	cmp	r3, #0
 8007094:	d00a      	beq.n	80070ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007096:	4b7f      	ldr	r3, [pc, #508]	@ (8007294 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007098:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800709c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	695b      	ldr	r3, [r3, #20]
 80070a4:	497b      	ldr	r1, [pc, #492]	@ (8007294 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070a6:	4313      	orrs	r3, r2
 80070a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f003 0320 	and.w	r3, r3, #32
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d00a      	beq.n	80070ce <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80070b8:	4b76      	ldr	r3, [pc, #472]	@ (8007294 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070be:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	699b      	ldr	r3, [r3, #24]
 80070c6:	4973      	ldr	r1, [pc, #460]	@ (8007294 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070c8:	4313      	orrs	r3, r2
 80070ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d00a      	beq.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80070da:	4b6e      	ldr	r3, [pc, #440]	@ (8007294 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070e0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	69db      	ldr	r3, [r3, #28]
 80070e8:	496a      	ldr	r1, [pc, #424]	@ (8007294 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070ea:	4313      	orrs	r3, r2
 80070ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d00a      	beq.n	8007112 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80070fc:	4b65      	ldr	r3, [pc, #404]	@ (8007294 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007102:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6a1b      	ldr	r3, [r3, #32]
 800710a:	4962      	ldr	r1, [pc, #392]	@ (8007294 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800710c:	4313      	orrs	r3, r2
 800710e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800711a:	2b00      	cmp	r3, #0
 800711c:	d00a      	beq.n	8007134 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800711e:	4b5d      	ldr	r3, [pc, #372]	@ (8007294 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007120:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007124:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800712c:	4959      	ldr	r1, [pc, #356]	@ (8007294 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800712e:	4313      	orrs	r3, r2
 8007130:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800713c:	2b00      	cmp	r3, #0
 800713e:	d00a      	beq.n	8007156 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007140:	4b54      	ldr	r3, [pc, #336]	@ (8007294 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007142:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007146:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800714e:	4951      	ldr	r1, [pc, #324]	@ (8007294 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007150:	4313      	orrs	r3, r2
 8007152:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800715e:	2b00      	cmp	r3, #0
 8007160:	d015      	beq.n	800718e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007162:	4b4c      	ldr	r3, [pc, #304]	@ (8007294 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007164:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007168:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007170:	4948      	ldr	r1, [pc, #288]	@ (8007294 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007172:	4313      	orrs	r3, r2
 8007174:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800717c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007180:	d105      	bne.n	800718e <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007182:	4b44      	ldr	r3, [pc, #272]	@ (8007294 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007184:	68db      	ldr	r3, [r3, #12]
 8007186:	4a43      	ldr	r2, [pc, #268]	@ (8007294 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007188:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800718c:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007196:	2b00      	cmp	r3, #0
 8007198:	d015      	beq.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800719a:	4b3e      	ldr	r3, [pc, #248]	@ (8007294 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800719c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071a0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071a8:	493a      	ldr	r1, [pc, #232]	@ (8007294 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071aa:	4313      	orrs	r3, r2
 80071ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071b4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80071b8:	d105      	bne.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80071ba:	4b36      	ldr	r3, [pc, #216]	@ (8007294 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071bc:	68db      	ldr	r3, [r3, #12]
 80071be:	4a35      	ldr	r2, [pc, #212]	@ (8007294 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071c0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80071c4:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d015      	beq.n	80071fe <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80071d2:	4b30      	ldr	r3, [pc, #192]	@ (8007294 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071d8:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80071e0:	492c      	ldr	r1, [pc, #176]	@ (8007294 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071e2:	4313      	orrs	r3, r2
 80071e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80071ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80071f0:	d105      	bne.n	80071fe <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80071f2:	4b28      	ldr	r3, [pc, #160]	@ (8007294 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071f4:	68db      	ldr	r3, [r3, #12]
 80071f6:	4a27      	ldr	r2, [pc, #156]	@ (8007294 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071f8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80071fc:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007206:	2b00      	cmp	r3, #0
 8007208:	d015      	beq.n	8007236 <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800720a:	4b22      	ldr	r3, [pc, #136]	@ (8007294 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800720c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007210:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007218:	491e      	ldr	r1, [pc, #120]	@ (8007294 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800721a:	4313      	orrs	r3, r2
 800721c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007224:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007228:	d105      	bne.n	8007236 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800722a:	4b1a      	ldr	r3, [pc, #104]	@ (8007294 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800722c:	68db      	ldr	r3, [r3, #12]
 800722e:	4a19      	ldr	r2, [pc, #100]	@ (8007294 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007230:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007234:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800723e:	2b00      	cmp	r3, #0
 8007240:	d015      	beq.n	800726e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007242:	4b14      	ldr	r3, [pc, #80]	@ (8007294 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007244:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007248:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007250:	4910      	ldr	r1, [pc, #64]	@ (8007294 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007252:	4313      	orrs	r3, r2
 8007254:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800725c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007260:	d105      	bne.n	800726e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007262:	4b0c      	ldr	r3, [pc, #48]	@ (8007294 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007264:	68db      	ldr	r3, [r3, #12]
 8007266:	4a0b      	ldr	r2, [pc, #44]	@ (8007294 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007268:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800726c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007276:	2b00      	cmp	r3, #0
 8007278:	d018      	beq.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800727a:	4b06      	ldr	r3, [pc, #24]	@ (8007294 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800727c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007280:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007288:	4902      	ldr	r1, [pc, #8]	@ (8007294 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800728a:	4313      	orrs	r3, r2
 800728c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	e001      	b.n	8007298 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8007294:	40021000 	.word	0x40021000
 8007298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800729a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800729e:	d105      	bne.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80072a0:	4b21      	ldr	r3, [pc, #132]	@ (8007328 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80072a2:	68db      	ldr	r3, [r3, #12]
 80072a4:	4a20      	ldr	r2, [pc, #128]	@ (8007328 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80072a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80072aa:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d015      	beq.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80072b8:	4b1b      	ldr	r3, [pc, #108]	@ (8007328 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80072ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072be:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072c6:	4918      	ldr	r1, [pc, #96]	@ (8007328 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80072c8:	4313      	orrs	r3, r2
 80072ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80072d6:	d105      	bne.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80072d8:	4b13      	ldr	r3, [pc, #76]	@ (8007328 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80072da:	68db      	ldr	r3, [r3, #12]
 80072dc:	4a12      	ldr	r2, [pc, #72]	@ (8007328 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80072de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80072e2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d015      	beq.n	800731c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80072f0:	4b0d      	ldr	r3, [pc, #52]	@ (8007328 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80072f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80072f6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80072fe:	490a      	ldr	r1, [pc, #40]	@ (8007328 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8007300:	4313      	orrs	r3, r2
 8007302:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800730a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800730e:	d105      	bne.n	800731c <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007310:	4b05      	ldr	r3, [pc, #20]	@ (8007328 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8007312:	68db      	ldr	r3, [r3, #12]
 8007314:	4a04      	ldr	r2, [pc, #16]	@ (8007328 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8007316:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800731a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800731c:	7cbb      	ldrb	r3, [r7, #18]
}
 800731e:	4618      	mov	r0, r3
 8007320:	3718      	adds	r7, #24
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}
 8007326:	bf00      	nop
 8007328:	40021000 	.word	0x40021000

0800732c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b084      	sub	sp, #16
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d101      	bne.n	800733e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800733a:	2301      	movs	r3, #1
 800733c:	e09d      	b.n	800747a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007342:	2b00      	cmp	r3, #0
 8007344:	d108      	bne.n	8007358 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	685b      	ldr	r3, [r3, #4]
 800734a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800734e:	d009      	beq.n	8007364 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2200      	movs	r2, #0
 8007354:	61da      	str	r2, [r3, #28]
 8007356:	e005      	b.n	8007364 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2200      	movs	r2, #0
 800735c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2200      	movs	r2, #0
 8007362:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2200      	movs	r2, #0
 8007368:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007370:	b2db      	uxtb	r3, r3
 8007372:	2b00      	cmp	r3, #0
 8007374:	d106      	bne.n	8007384 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2200      	movs	r2, #0
 800737a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f7fc f8e4 	bl	800354c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2202      	movs	r2, #2
 8007388:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	681a      	ldr	r2, [r3, #0]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800739a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	68db      	ldr	r3, [r3, #12]
 80073a0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80073a4:	d902      	bls.n	80073ac <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80073a6:	2300      	movs	r3, #0
 80073a8:	60fb      	str	r3, [r7, #12]
 80073aa:	e002      	b.n	80073b2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80073ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80073b0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	68db      	ldr	r3, [r3, #12]
 80073b6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80073ba:	d007      	beq.n	80073cc <HAL_SPI_Init+0xa0>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	68db      	ldr	r3, [r3, #12]
 80073c0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80073c4:	d002      	beq.n	80073cc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2200      	movs	r2, #0
 80073ca:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	685b      	ldr	r3, [r3, #4]
 80073d0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	689b      	ldr	r3, [r3, #8]
 80073d8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80073dc:	431a      	orrs	r2, r3
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	691b      	ldr	r3, [r3, #16]
 80073e2:	f003 0302 	and.w	r3, r3, #2
 80073e6:	431a      	orrs	r2, r3
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	695b      	ldr	r3, [r3, #20]
 80073ec:	f003 0301 	and.w	r3, r3, #1
 80073f0:	431a      	orrs	r2, r3
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	699b      	ldr	r3, [r3, #24]
 80073f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80073fa:	431a      	orrs	r2, r3
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	69db      	ldr	r3, [r3, #28]
 8007400:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007404:	431a      	orrs	r2, r3
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6a1b      	ldr	r3, [r3, #32]
 800740a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800740e:	ea42 0103 	orr.w	r1, r2, r3
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007416:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	430a      	orrs	r2, r1
 8007420:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	699b      	ldr	r3, [r3, #24]
 8007426:	0c1b      	lsrs	r3, r3, #16
 8007428:	f003 0204 	and.w	r2, r3, #4
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007430:	f003 0310 	and.w	r3, r3, #16
 8007434:	431a      	orrs	r2, r3
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800743a:	f003 0308 	and.w	r3, r3, #8
 800743e:	431a      	orrs	r2, r3
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	68db      	ldr	r3, [r3, #12]
 8007444:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8007448:	ea42 0103 	orr.w	r1, r2, r3
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	430a      	orrs	r2, r1
 8007458:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	69da      	ldr	r2, [r3, #28]
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007468:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2200      	movs	r2, #0
 800746e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2201      	movs	r2, #1
 8007474:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8007478:	2300      	movs	r3, #0
}
 800747a:	4618      	mov	r0, r3
 800747c:	3710      	adds	r7, #16
 800747e:	46bd      	mov	sp, r7
 8007480:	bd80      	pop	{r7, pc}

08007482 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007482:	b580      	push	{r7, lr}
 8007484:	b088      	sub	sp, #32
 8007486:	af00      	add	r7, sp, #0
 8007488:	60f8      	str	r0, [r7, #12]
 800748a:	60b9      	str	r1, [r7, #8]
 800748c:	603b      	str	r3, [r7, #0]
 800748e:	4613      	mov	r3, r2
 8007490:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007492:	f7fc fcd1 	bl	8003e38 <HAL_GetTick>
 8007496:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8007498:	88fb      	ldrh	r3, [r7, #6]
 800749a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80074a2:	b2db      	uxtb	r3, r3
 80074a4:	2b01      	cmp	r3, #1
 80074a6:	d001      	beq.n	80074ac <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80074a8:	2302      	movs	r3, #2
 80074aa:	e15c      	b.n	8007766 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d002      	beq.n	80074b8 <HAL_SPI_Transmit+0x36>
 80074b2:	88fb      	ldrh	r3, [r7, #6]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d101      	bne.n	80074bc <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80074b8:	2301      	movs	r3, #1
 80074ba:	e154      	b.n	8007766 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80074c2:	2b01      	cmp	r3, #1
 80074c4:	d101      	bne.n	80074ca <HAL_SPI_Transmit+0x48>
 80074c6:	2302      	movs	r3, #2
 80074c8:	e14d      	b.n	8007766 <HAL_SPI_Transmit+0x2e4>
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	2201      	movs	r2, #1
 80074ce:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	2203      	movs	r2, #3
 80074d6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	2200      	movs	r2, #0
 80074de:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	68ba      	ldr	r2, [r7, #8]
 80074e4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	88fa      	ldrh	r2, [r7, #6]
 80074ea:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	88fa      	ldrh	r2, [r7, #6]
 80074f0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	2200      	movs	r2, #0
 80074f6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	2200      	movs	r2, #0
 80074fc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	2200      	movs	r2, #0
 8007504:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	2200      	movs	r2, #0
 800750c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	2200      	movs	r2, #0
 8007512:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	689b      	ldr	r3, [r3, #8]
 8007518:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800751c:	d10f      	bne.n	800753e <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	681a      	ldr	r2, [r3, #0]
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800752c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	681a      	ldr	r2, [r3, #0]
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800753c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007548:	2b40      	cmp	r3, #64	@ 0x40
 800754a:	d007      	beq.n	800755c <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	681a      	ldr	r2, [r3, #0]
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800755a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	68db      	ldr	r3, [r3, #12]
 8007560:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007564:	d952      	bls.n	800760c <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	685b      	ldr	r3, [r3, #4]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d002      	beq.n	8007574 <HAL_SPI_Transmit+0xf2>
 800756e:	8b7b      	ldrh	r3, [r7, #26]
 8007570:	2b01      	cmp	r3, #1
 8007572:	d145      	bne.n	8007600 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007578:	881a      	ldrh	r2, [r3, #0]
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007584:	1c9a      	adds	r2, r3, #2
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800758e:	b29b      	uxth	r3, r3
 8007590:	3b01      	subs	r3, #1
 8007592:	b29a      	uxth	r2, r3
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007598:	e032      	b.n	8007600 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	689b      	ldr	r3, [r3, #8]
 80075a0:	f003 0302 	and.w	r3, r3, #2
 80075a4:	2b02      	cmp	r3, #2
 80075a6:	d112      	bne.n	80075ce <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075ac:	881a      	ldrh	r2, [r3, #0]
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075b8:	1c9a      	adds	r2, r3, #2
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80075c2:	b29b      	uxth	r3, r3
 80075c4:	3b01      	subs	r3, #1
 80075c6:	b29a      	uxth	r2, r3
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80075cc:	e018      	b.n	8007600 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80075ce:	f7fc fc33 	bl	8003e38 <HAL_GetTick>
 80075d2:	4602      	mov	r2, r0
 80075d4:	69fb      	ldr	r3, [r7, #28]
 80075d6:	1ad3      	subs	r3, r2, r3
 80075d8:	683a      	ldr	r2, [r7, #0]
 80075da:	429a      	cmp	r2, r3
 80075dc:	d803      	bhi.n	80075e6 <HAL_SPI_Transmit+0x164>
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80075e4:	d102      	bne.n	80075ec <HAL_SPI_Transmit+0x16a>
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d109      	bne.n	8007600 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	2201      	movs	r2, #1
 80075f0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	2200      	movs	r2, #0
 80075f8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80075fc:	2303      	movs	r3, #3
 80075fe:	e0b2      	b.n	8007766 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007604:	b29b      	uxth	r3, r3
 8007606:	2b00      	cmp	r3, #0
 8007608:	d1c7      	bne.n	800759a <HAL_SPI_Transmit+0x118>
 800760a:	e083      	b.n	8007714 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	685b      	ldr	r3, [r3, #4]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d002      	beq.n	800761a <HAL_SPI_Transmit+0x198>
 8007614:	8b7b      	ldrh	r3, [r7, #26]
 8007616:	2b01      	cmp	r3, #1
 8007618:	d177      	bne.n	800770a <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800761e:	b29b      	uxth	r3, r3
 8007620:	2b01      	cmp	r3, #1
 8007622:	d912      	bls.n	800764a <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007628:	881a      	ldrh	r2, [r3, #0]
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007634:	1c9a      	adds	r2, r3, #2
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800763e:	b29b      	uxth	r3, r3
 8007640:	3b02      	subs	r3, #2
 8007642:	b29a      	uxth	r2, r3
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007648:	e05f      	b.n	800770a <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	330c      	adds	r3, #12
 8007654:	7812      	ldrb	r2, [r2, #0]
 8007656:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800765c:	1c5a      	adds	r2, r3, #1
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007666:	b29b      	uxth	r3, r3
 8007668:	3b01      	subs	r3, #1
 800766a:	b29a      	uxth	r2, r3
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8007670:	e04b      	b.n	800770a <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	689b      	ldr	r3, [r3, #8]
 8007678:	f003 0302 	and.w	r3, r3, #2
 800767c:	2b02      	cmp	r3, #2
 800767e:	d12b      	bne.n	80076d8 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007684:	b29b      	uxth	r3, r3
 8007686:	2b01      	cmp	r3, #1
 8007688:	d912      	bls.n	80076b0 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800768e:	881a      	ldrh	r2, [r3, #0]
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800769a:	1c9a      	adds	r2, r3, #2
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80076a4:	b29b      	uxth	r3, r3
 80076a6:	3b02      	subs	r3, #2
 80076a8:	b29a      	uxth	r2, r3
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80076ae:	e02c      	b.n	800770a <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	330c      	adds	r3, #12
 80076ba:	7812      	ldrb	r2, [r2, #0]
 80076bc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076c2:	1c5a      	adds	r2, r3, #1
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80076cc:	b29b      	uxth	r3, r3
 80076ce:	3b01      	subs	r3, #1
 80076d0:	b29a      	uxth	r2, r3
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80076d6:	e018      	b.n	800770a <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80076d8:	f7fc fbae 	bl	8003e38 <HAL_GetTick>
 80076dc:	4602      	mov	r2, r0
 80076de:	69fb      	ldr	r3, [r7, #28]
 80076e0:	1ad3      	subs	r3, r2, r3
 80076e2:	683a      	ldr	r2, [r7, #0]
 80076e4:	429a      	cmp	r2, r3
 80076e6:	d803      	bhi.n	80076f0 <HAL_SPI_Transmit+0x26e>
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80076ee:	d102      	bne.n	80076f6 <HAL_SPI_Transmit+0x274>
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d109      	bne.n	800770a <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	2201      	movs	r2, #1
 80076fa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	2200      	movs	r2, #0
 8007702:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8007706:	2303      	movs	r3, #3
 8007708:	e02d      	b.n	8007766 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800770e:	b29b      	uxth	r3, r3
 8007710:	2b00      	cmp	r3, #0
 8007712:	d1ae      	bne.n	8007672 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007714:	69fa      	ldr	r2, [r7, #28]
 8007716:	6839      	ldr	r1, [r7, #0]
 8007718:	68f8      	ldr	r0, [r7, #12]
 800771a:	f000 fcf5 	bl	8008108 <SPI_EndRxTxTransaction>
 800771e:	4603      	mov	r3, r0
 8007720:	2b00      	cmp	r3, #0
 8007722:	d002      	beq.n	800772a <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	2220      	movs	r2, #32
 8007728:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	689b      	ldr	r3, [r3, #8]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d10a      	bne.n	8007748 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007732:	2300      	movs	r3, #0
 8007734:	617b      	str	r3, [r7, #20]
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	68db      	ldr	r3, [r3, #12]
 800773c:	617b      	str	r3, [r7, #20]
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	689b      	ldr	r3, [r3, #8]
 8007744:	617b      	str	r3, [r7, #20]
 8007746:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	2201      	movs	r2, #1
 800774c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	2200      	movs	r2, #0
 8007754:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800775c:	2b00      	cmp	r3, #0
 800775e:	d001      	beq.n	8007764 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8007760:	2301      	movs	r3, #1
 8007762:	e000      	b.n	8007766 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8007764:	2300      	movs	r3, #0
  }
}
 8007766:	4618      	mov	r0, r3
 8007768:	3720      	adds	r7, #32
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}

0800776e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800776e:	b580      	push	{r7, lr}
 8007770:	b088      	sub	sp, #32
 8007772:	af02      	add	r7, sp, #8
 8007774:	60f8      	str	r0, [r7, #12]
 8007776:	60b9      	str	r1, [r7, #8]
 8007778:	603b      	str	r3, [r7, #0]
 800777a:	4613      	mov	r3, r2
 800777c:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007784:	b2db      	uxtb	r3, r3
 8007786:	2b01      	cmp	r3, #1
 8007788:	d001      	beq.n	800778e <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800778a:	2302      	movs	r3, #2
 800778c:	e123      	b.n	80079d6 <HAL_SPI_Receive+0x268>
  }

  if ((pData == NULL) || (Size == 0U))
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d002      	beq.n	800779a <HAL_SPI_Receive+0x2c>
 8007794:	88fb      	ldrh	r3, [r7, #6]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d101      	bne.n	800779e <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 800779a:	2301      	movs	r3, #1
 800779c:	e11b      	b.n	80079d6 <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	685b      	ldr	r3, [r3, #4]
 80077a2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80077a6:	d112      	bne.n	80077ce <HAL_SPI_Receive+0x60>
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	689b      	ldr	r3, [r3, #8]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d10e      	bne.n	80077ce <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	2204      	movs	r2, #4
 80077b4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80077b8:	88fa      	ldrh	r2, [r7, #6]
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	9300      	str	r3, [sp, #0]
 80077be:	4613      	mov	r3, r2
 80077c0:	68ba      	ldr	r2, [r7, #8]
 80077c2:	68b9      	ldr	r1, [r7, #8]
 80077c4:	68f8      	ldr	r0, [r7, #12]
 80077c6:	f000 f90a 	bl	80079de <HAL_SPI_TransmitReceive>
 80077ca:	4603      	mov	r3, r0
 80077cc:	e103      	b.n	80079d6 <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80077ce:	f7fc fb33 	bl	8003e38 <HAL_GetTick>
 80077d2:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80077da:	2b01      	cmp	r3, #1
 80077dc:	d101      	bne.n	80077e2 <HAL_SPI_Receive+0x74>
 80077de:	2302      	movs	r3, #2
 80077e0:	e0f9      	b.n	80079d6 <HAL_SPI_Receive+0x268>
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	2201      	movs	r2, #1
 80077e6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	2204      	movs	r2, #4
 80077ee:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	2200      	movs	r2, #0
 80077f6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	68ba      	ldr	r2, [r7, #8]
 80077fc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	88fa      	ldrh	r2, [r7, #6]
 8007802:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	88fa      	ldrh	r2, [r7, #6]
 800780a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	2200      	movs	r2, #0
 8007812:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	2200      	movs	r2, #0
 8007818:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	2200      	movs	r2, #0
 800781e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	2200      	movs	r2, #0
 8007824:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	2200      	movs	r2, #0
 800782a:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	68db      	ldr	r3, [r3, #12]
 8007830:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007834:	d908      	bls.n	8007848 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	685a      	ldr	r2, [r3, #4]
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007844:	605a      	str	r2, [r3, #4]
 8007846:	e007      	b.n	8007858 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	685a      	ldr	r2, [r3, #4]
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007856:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	689b      	ldr	r3, [r3, #8]
 800785c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007860:	d10f      	bne.n	8007882 <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	681a      	ldr	r2, [r3, #0]
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007870:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	681a      	ldr	r2, [r3, #0]
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007880:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800788c:	2b40      	cmp	r3, #64	@ 0x40
 800788e:	d007      	beq.n	80078a0 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	681a      	ldr	r2, [r3, #0]
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800789e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	68db      	ldr	r3, [r3, #12]
 80078a4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80078a8:	d875      	bhi.n	8007996 <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80078aa:	e037      	b.n	800791c <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	689b      	ldr	r3, [r3, #8]
 80078b2:	f003 0301 	and.w	r3, r3, #1
 80078b6:	2b01      	cmp	r3, #1
 80078b8:	d117      	bne.n	80078ea <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f103 020c 	add.w	r2, r3, #12
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078c6:	7812      	ldrb	r2, [r2, #0]
 80078c8:	b2d2      	uxtb	r2, r2
 80078ca:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078d0:	1c5a      	adds	r2, r3, #1
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80078dc:	b29b      	uxth	r3, r3
 80078de:	3b01      	subs	r3, #1
 80078e0:	b29a      	uxth	r2, r3
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80078e8:	e018      	b.n	800791c <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80078ea:	f7fc faa5 	bl	8003e38 <HAL_GetTick>
 80078ee:	4602      	mov	r2, r0
 80078f0:	697b      	ldr	r3, [r7, #20]
 80078f2:	1ad3      	subs	r3, r2, r3
 80078f4:	683a      	ldr	r2, [r7, #0]
 80078f6:	429a      	cmp	r2, r3
 80078f8:	d803      	bhi.n	8007902 <HAL_SPI_Receive+0x194>
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007900:	d102      	bne.n	8007908 <HAL_SPI_Receive+0x19a>
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d109      	bne.n	800791c <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	2201      	movs	r2, #1
 800790c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	2200      	movs	r2, #0
 8007914:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8007918:	2303      	movs	r3, #3
 800791a:	e05c      	b.n	80079d6 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007922:	b29b      	uxth	r3, r3
 8007924:	2b00      	cmp	r3, #0
 8007926:	d1c1      	bne.n	80078ac <HAL_SPI_Receive+0x13e>
 8007928:	e03b      	b.n	80079a2 <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	689b      	ldr	r3, [r3, #8]
 8007930:	f003 0301 	and.w	r3, r3, #1
 8007934:	2b01      	cmp	r3, #1
 8007936:	d115      	bne.n	8007964 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	68da      	ldr	r2, [r3, #12]
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007942:	b292      	uxth	r2, r2
 8007944:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800794a:	1c9a      	adds	r2, r3, #2
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007956:	b29b      	uxth	r3, r3
 8007958:	3b01      	subs	r3, #1
 800795a:	b29a      	uxth	r2, r3
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8007962:	e018      	b.n	8007996 <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007964:	f7fc fa68 	bl	8003e38 <HAL_GetTick>
 8007968:	4602      	mov	r2, r0
 800796a:	697b      	ldr	r3, [r7, #20]
 800796c:	1ad3      	subs	r3, r2, r3
 800796e:	683a      	ldr	r2, [r7, #0]
 8007970:	429a      	cmp	r2, r3
 8007972:	d803      	bhi.n	800797c <HAL_SPI_Receive+0x20e>
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800797a:	d102      	bne.n	8007982 <HAL_SPI_Receive+0x214>
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d109      	bne.n	8007996 <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	2201      	movs	r2, #1
 8007986:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	2200      	movs	r2, #0
 800798e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8007992:	2303      	movs	r3, #3
 8007994:	e01f      	b.n	80079d6 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800799c:	b29b      	uxth	r3, r3
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d1c3      	bne.n	800792a <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80079a2:	697a      	ldr	r2, [r7, #20]
 80079a4:	6839      	ldr	r1, [r7, #0]
 80079a6:	68f8      	ldr	r0, [r7, #12]
 80079a8:	f000 fb56 	bl	8008058 <SPI_EndRxTransaction>
 80079ac:	4603      	mov	r3, r0
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d002      	beq.n	80079b8 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	2220      	movs	r2, #32
 80079b6:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	2201      	movs	r2, #1
 80079bc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	2200      	movs	r2, #0
 80079c4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d001      	beq.n	80079d4 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 80079d0:	2301      	movs	r3, #1
 80079d2:	e000      	b.n	80079d6 <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 80079d4:	2300      	movs	r3, #0
  }
}
 80079d6:	4618      	mov	r0, r3
 80079d8:	3718      	adds	r7, #24
 80079da:	46bd      	mov	sp, r7
 80079dc:	bd80      	pop	{r7, pc}

080079de <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80079de:	b580      	push	{r7, lr}
 80079e0:	b08a      	sub	sp, #40	@ 0x28
 80079e2:	af00      	add	r7, sp, #0
 80079e4:	60f8      	str	r0, [r7, #12]
 80079e6:	60b9      	str	r1, [r7, #8]
 80079e8:	607a      	str	r2, [r7, #4]
 80079ea:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80079ec:	2301      	movs	r3, #1
 80079ee:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80079f0:	f7fc fa22 	bl	8003e38 <HAL_GetTick>
 80079f4:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80079fc:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	685b      	ldr	r3, [r3, #4]
 8007a02:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8007a04:	887b      	ldrh	r3, [r7, #2]
 8007a06:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8007a08:	887b      	ldrh	r3, [r7, #2]
 8007a0a:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007a0c:	7ffb      	ldrb	r3, [r7, #31]
 8007a0e:	2b01      	cmp	r3, #1
 8007a10:	d00c      	beq.n	8007a2c <HAL_SPI_TransmitReceive+0x4e>
 8007a12:	69bb      	ldr	r3, [r7, #24]
 8007a14:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007a18:	d106      	bne.n	8007a28 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	689b      	ldr	r3, [r3, #8]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d102      	bne.n	8007a28 <HAL_SPI_TransmitReceive+0x4a>
 8007a22:	7ffb      	ldrb	r3, [r7, #31]
 8007a24:	2b04      	cmp	r3, #4
 8007a26:	d001      	beq.n	8007a2c <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8007a28:	2302      	movs	r3, #2
 8007a2a:	e1f3      	b.n	8007e14 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d005      	beq.n	8007a3e <HAL_SPI_TransmitReceive+0x60>
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d002      	beq.n	8007a3e <HAL_SPI_TransmitReceive+0x60>
 8007a38:	887b      	ldrh	r3, [r7, #2]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d101      	bne.n	8007a42 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8007a3e:	2301      	movs	r3, #1
 8007a40:	e1e8      	b.n	8007e14 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007a48:	2b01      	cmp	r3, #1
 8007a4a:	d101      	bne.n	8007a50 <HAL_SPI_TransmitReceive+0x72>
 8007a4c:	2302      	movs	r3, #2
 8007a4e:	e1e1      	b.n	8007e14 <HAL_SPI_TransmitReceive+0x436>
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	2201      	movs	r2, #1
 8007a54:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007a5e:	b2db      	uxtb	r3, r3
 8007a60:	2b04      	cmp	r3, #4
 8007a62:	d003      	beq.n	8007a6c <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	2205      	movs	r2, #5
 8007a68:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	2200      	movs	r2, #0
 8007a70:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	687a      	ldr	r2, [r7, #4]
 8007a76:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	887a      	ldrh	r2, [r7, #2]
 8007a7c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	887a      	ldrh	r2, [r7, #2]
 8007a84:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	68ba      	ldr	r2, [r7, #8]
 8007a8c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	887a      	ldrh	r2, [r7, #2]
 8007a92:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	887a      	ldrh	r2, [r7, #2]
 8007a98:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	68db      	ldr	r3, [r3, #12]
 8007aaa:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007aae:	d802      	bhi.n	8007ab6 <HAL_SPI_TransmitReceive+0xd8>
 8007ab0:	8abb      	ldrh	r3, [r7, #20]
 8007ab2:	2b01      	cmp	r3, #1
 8007ab4:	d908      	bls.n	8007ac8 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	685a      	ldr	r2, [r3, #4]
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007ac4:	605a      	str	r2, [r3, #4]
 8007ac6:	e007      	b.n	8007ad8 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	685a      	ldr	r2, [r3, #4]
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007ad6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ae2:	2b40      	cmp	r3, #64	@ 0x40
 8007ae4:	d007      	beq.n	8007af6 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	681a      	ldr	r2, [r3, #0]
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007af4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	68db      	ldr	r3, [r3, #12]
 8007afa:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007afe:	f240 8083 	bls.w	8007c08 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	685b      	ldr	r3, [r3, #4]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d002      	beq.n	8007b10 <HAL_SPI_TransmitReceive+0x132>
 8007b0a:	8afb      	ldrh	r3, [r7, #22]
 8007b0c:	2b01      	cmp	r3, #1
 8007b0e:	d16f      	bne.n	8007bf0 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b14:	881a      	ldrh	r2, [r3, #0]
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b20:	1c9a      	adds	r2, r3, #2
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b2a:	b29b      	uxth	r3, r3
 8007b2c:	3b01      	subs	r3, #1
 8007b2e:	b29a      	uxth	r2, r3
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007b34:	e05c      	b.n	8007bf0 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	689b      	ldr	r3, [r3, #8]
 8007b3c:	f003 0302 	and.w	r3, r3, #2
 8007b40:	2b02      	cmp	r3, #2
 8007b42:	d11b      	bne.n	8007b7c <HAL_SPI_TransmitReceive+0x19e>
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b48:	b29b      	uxth	r3, r3
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d016      	beq.n	8007b7c <HAL_SPI_TransmitReceive+0x19e>
 8007b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b50:	2b01      	cmp	r3, #1
 8007b52:	d113      	bne.n	8007b7c <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b58:	881a      	ldrh	r2, [r3, #0]
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b64:	1c9a      	adds	r2, r3, #2
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b6e:	b29b      	uxth	r3, r3
 8007b70:	3b01      	subs	r3, #1
 8007b72:	b29a      	uxth	r2, r3
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007b78:	2300      	movs	r3, #0
 8007b7a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	689b      	ldr	r3, [r3, #8]
 8007b82:	f003 0301 	and.w	r3, r3, #1
 8007b86:	2b01      	cmp	r3, #1
 8007b88:	d11c      	bne.n	8007bc4 <HAL_SPI_TransmitReceive+0x1e6>
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007b90:	b29b      	uxth	r3, r3
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d016      	beq.n	8007bc4 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	68da      	ldr	r2, [r3, #12]
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ba0:	b292      	uxth	r2, r2
 8007ba2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ba8:	1c9a      	adds	r2, r3, #2
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007bb4:	b29b      	uxth	r3, r3
 8007bb6:	3b01      	subs	r3, #1
 8007bb8:	b29a      	uxth	r2, r3
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007bc4:	f7fc f938 	bl	8003e38 <HAL_GetTick>
 8007bc8:	4602      	mov	r2, r0
 8007bca:	6a3b      	ldr	r3, [r7, #32]
 8007bcc:	1ad3      	subs	r3, r2, r3
 8007bce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007bd0:	429a      	cmp	r2, r3
 8007bd2:	d80d      	bhi.n	8007bf0 <HAL_SPI_TransmitReceive+0x212>
 8007bd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bd6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007bda:	d009      	beq.n	8007bf0 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	2201      	movs	r2, #1
 8007be0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	2200      	movs	r2, #0
 8007be8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8007bec:	2303      	movs	r3, #3
 8007bee:	e111      	b.n	8007e14 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007bf4:	b29b      	uxth	r3, r3
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d19d      	bne.n	8007b36 <HAL_SPI_TransmitReceive+0x158>
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007c00:	b29b      	uxth	r3, r3
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d197      	bne.n	8007b36 <HAL_SPI_TransmitReceive+0x158>
 8007c06:	e0e5      	b.n	8007dd4 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	685b      	ldr	r3, [r3, #4]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d003      	beq.n	8007c18 <HAL_SPI_TransmitReceive+0x23a>
 8007c10:	8afb      	ldrh	r3, [r7, #22]
 8007c12:	2b01      	cmp	r3, #1
 8007c14:	f040 80d1 	bne.w	8007dba <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c1c:	b29b      	uxth	r3, r3
 8007c1e:	2b01      	cmp	r3, #1
 8007c20:	d912      	bls.n	8007c48 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c26:	881a      	ldrh	r2, [r3, #0]
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c32:	1c9a      	adds	r2, r3, #2
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c3c:	b29b      	uxth	r3, r3
 8007c3e:	3b02      	subs	r3, #2
 8007c40:	b29a      	uxth	r2, r3
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007c46:	e0b8      	b.n	8007dba <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	330c      	adds	r3, #12
 8007c52:	7812      	ldrb	r2, [r2, #0]
 8007c54:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c5a:	1c5a      	adds	r2, r3, #1
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c64:	b29b      	uxth	r3, r3
 8007c66:	3b01      	subs	r3, #1
 8007c68:	b29a      	uxth	r2, r3
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007c6e:	e0a4      	b.n	8007dba <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	689b      	ldr	r3, [r3, #8]
 8007c76:	f003 0302 	and.w	r3, r3, #2
 8007c7a:	2b02      	cmp	r3, #2
 8007c7c:	d134      	bne.n	8007ce8 <HAL_SPI_TransmitReceive+0x30a>
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c82:	b29b      	uxth	r3, r3
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d02f      	beq.n	8007ce8 <HAL_SPI_TransmitReceive+0x30a>
 8007c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c8a:	2b01      	cmp	r3, #1
 8007c8c:	d12c      	bne.n	8007ce8 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c92:	b29b      	uxth	r3, r3
 8007c94:	2b01      	cmp	r3, #1
 8007c96:	d912      	bls.n	8007cbe <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c9c:	881a      	ldrh	r2, [r3, #0]
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ca8:	1c9a      	adds	r2, r3, #2
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007cb2:	b29b      	uxth	r3, r3
 8007cb4:	3b02      	subs	r3, #2
 8007cb6:	b29a      	uxth	r2, r3
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007cbc:	e012      	b.n	8007ce4 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	330c      	adds	r3, #12
 8007cc8:	7812      	ldrb	r2, [r2, #0]
 8007cca:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cd0:	1c5a      	adds	r2, r3, #1
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007cda:	b29b      	uxth	r3, r3
 8007cdc:	3b01      	subs	r3, #1
 8007cde:	b29a      	uxth	r2, r3
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	689b      	ldr	r3, [r3, #8]
 8007cee:	f003 0301 	and.w	r3, r3, #1
 8007cf2:	2b01      	cmp	r3, #1
 8007cf4:	d148      	bne.n	8007d88 <HAL_SPI_TransmitReceive+0x3aa>
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007cfc:	b29b      	uxth	r3, r3
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d042      	beq.n	8007d88 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007d08:	b29b      	uxth	r3, r3
 8007d0a:	2b01      	cmp	r3, #1
 8007d0c:	d923      	bls.n	8007d56 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	68da      	ldr	r2, [r3, #12]
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d18:	b292      	uxth	r2, r2
 8007d1a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d20:	1c9a      	adds	r2, r3, #2
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007d2c:	b29b      	uxth	r3, r3
 8007d2e:	3b02      	subs	r3, #2
 8007d30:	b29a      	uxth	r2, r3
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007d3e:	b29b      	uxth	r3, r3
 8007d40:	2b01      	cmp	r3, #1
 8007d42:	d81f      	bhi.n	8007d84 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	685a      	ldr	r2, [r3, #4]
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007d52:	605a      	str	r2, [r3, #4]
 8007d54:	e016      	b.n	8007d84 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f103 020c 	add.w	r2, r3, #12
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d62:	7812      	ldrb	r2, [r2, #0]
 8007d64:	b2d2      	uxtb	r2, r2
 8007d66:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d6c:	1c5a      	adds	r2, r3, #1
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007d78:	b29b      	uxth	r3, r3
 8007d7a:	3b01      	subs	r3, #1
 8007d7c:	b29a      	uxth	r2, r3
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007d84:	2301      	movs	r3, #1
 8007d86:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007d88:	f7fc f856 	bl	8003e38 <HAL_GetTick>
 8007d8c:	4602      	mov	r2, r0
 8007d8e:	6a3b      	ldr	r3, [r7, #32]
 8007d90:	1ad3      	subs	r3, r2, r3
 8007d92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d94:	429a      	cmp	r2, r3
 8007d96:	d803      	bhi.n	8007da0 <HAL_SPI_TransmitReceive+0x3c2>
 8007d98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d9a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007d9e:	d102      	bne.n	8007da6 <HAL_SPI_TransmitReceive+0x3c8>
 8007da0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d109      	bne.n	8007dba <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	2201      	movs	r2, #1
 8007daa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	2200      	movs	r2, #0
 8007db2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8007db6:	2303      	movs	r3, #3
 8007db8:	e02c      	b.n	8007e14 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007dbe:	b29b      	uxth	r3, r3
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	f47f af55 	bne.w	8007c70 <HAL_SPI_TransmitReceive+0x292>
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007dcc:	b29b      	uxth	r3, r3
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	f47f af4e 	bne.w	8007c70 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007dd4:	6a3a      	ldr	r2, [r7, #32]
 8007dd6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007dd8:	68f8      	ldr	r0, [r7, #12]
 8007dda:	f000 f995 	bl	8008108 <SPI_EndRxTxTransaction>
 8007dde:	4603      	mov	r3, r0
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d008      	beq.n	8007df6 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	2220      	movs	r2, #32
 8007de8:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	2200      	movs	r2, #0
 8007dee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8007df2:	2301      	movs	r3, #1
 8007df4:	e00e      	b.n	8007e14 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	2201      	movs	r2, #1
 8007dfa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	2200      	movs	r2, #0
 8007e02:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d001      	beq.n	8007e12 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8007e0e:	2301      	movs	r3, #1
 8007e10:	e000      	b.n	8007e14 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8007e12:	2300      	movs	r3, #0
  }
}
 8007e14:	4618      	mov	r0, r3
 8007e16:	3728      	adds	r7, #40	@ 0x28
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bd80      	pop	{r7, pc}

08007e1c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b088      	sub	sp, #32
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	60f8      	str	r0, [r7, #12]
 8007e24:	60b9      	str	r1, [r7, #8]
 8007e26:	603b      	str	r3, [r7, #0]
 8007e28:	4613      	mov	r3, r2
 8007e2a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007e2c:	f7fc f804 	bl	8003e38 <HAL_GetTick>
 8007e30:	4602      	mov	r2, r0
 8007e32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e34:	1a9b      	subs	r3, r3, r2
 8007e36:	683a      	ldr	r2, [r7, #0]
 8007e38:	4413      	add	r3, r2
 8007e3a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007e3c:	f7fb fffc 	bl	8003e38 <HAL_GetTick>
 8007e40:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007e42:	4b39      	ldr	r3, [pc, #228]	@ (8007f28 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	015b      	lsls	r3, r3, #5
 8007e48:	0d1b      	lsrs	r3, r3, #20
 8007e4a:	69fa      	ldr	r2, [r7, #28]
 8007e4c:	fb02 f303 	mul.w	r3, r2, r3
 8007e50:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007e52:	e054      	b.n	8007efe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007e5a:	d050      	beq.n	8007efe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007e5c:	f7fb ffec 	bl	8003e38 <HAL_GetTick>
 8007e60:	4602      	mov	r2, r0
 8007e62:	69bb      	ldr	r3, [r7, #24]
 8007e64:	1ad3      	subs	r3, r2, r3
 8007e66:	69fa      	ldr	r2, [r7, #28]
 8007e68:	429a      	cmp	r2, r3
 8007e6a:	d902      	bls.n	8007e72 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007e6c:	69fb      	ldr	r3, [r7, #28]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d13d      	bne.n	8007eee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	685a      	ldr	r2, [r3, #4]
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007e80:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	685b      	ldr	r3, [r3, #4]
 8007e86:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007e8a:	d111      	bne.n	8007eb0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	689b      	ldr	r3, [r3, #8]
 8007e90:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007e94:	d004      	beq.n	8007ea0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	689b      	ldr	r3, [r3, #8]
 8007e9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007e9e:	d107      	bne.n	8007eb0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	681a      	ldr	r2, [r3, #0]
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007eae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007eb4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007eb8:	d10f      	bne.n	8007eda <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	681a      	ldr	r2, [r3, #0]
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007ec8:	601a      	str	r2, [r3, #0]
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	681a      	ldr	r2, [r3, #0]
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007ed8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	2201      	movs	r2, #1
 8007ede:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007eea:	2303      	movs	r3, #3
 8007eec:	e017      	b.n	8007f1e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007eee:	697b      	ldr	r3, [r7, #20]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d101      	bne.n	8007ef8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007ef8:	697b      	ldr	r3, [r7, #20]
 8007efa:	3b01      	subs	r3, #1
 8007efc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	689a      	ldr	r2, [r3, #8]
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	4013      	ands	r3, r2
 8007f08:	68ba      	ldr	r2, [r7, #8]
 8007f0a:	429a      	cmp	r2, r3
 8007f0c:	bf0c      	ite	eq
 8007f0e:	2301      	moveq	r3, #1
 8007f10:	2300      	movne	r3, #0
 8007f12:	b2db      	uxtb	r3, r3
 8007f14:	461a      	mov	r2, r3
 8007f16:	79fb      	ldrb	r3, [r7, #7]
 8007f18:	429a      	cmp	r2, r3
 8007f1a:	d19b      	bne.n	8007e54 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007f1c:	2300      	movs	r3, #0
}
 8007f1e:	4618      	mov	r0, r3
 8007f20:	3720      	adds	r7, #32
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd80      	pop	{r7, pc}
 8007f26:	bf00      	nop
 8007f28:	20000020 	.word	0x20000020

08007f2c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b08a      	sub	sp, #40	@ 0x28
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	60f8      	str	r0, [r7, #12]
 8007f34:	60b9      	str	r1, [r7, #8]
 8007f36:	607a      	str	r2, [r7, #4]
 8007f38:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007f3e:	f7fb ff7b 	bl	8003e38 <HAL_GetTick>
 8007f42:	4602      	mov	r2, r0
 8007f44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f46:	1a9b      	subs	r3, r3, r2
 8007f48:	683a      	ldr	r2, [r7, #0]
 8007f4a:	4413      	add	r3, r2
 8007f4c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8007f4e:	f7fb ff73 	bl	8003e38 <HAL_GetTick>
 8007f52:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	330c      	adds	r3, #12
 8007f5a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007f5c:	4b3d      	ldr	r3, [pc, #244]	@ (8008054 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007f5e:	681a      	ldr	r2, [r3, #0]
 8007f60:	4613      	mov	r3, r2
 8007f62:	009b      	lsls	r3, r3, #2
 8007f64:	4413      	add	r3, r2
 8007f66:	00da      	lsls	r2, r3, #3
 8007f68:	1ad3      	subs	r3, r2, r3
 8007f6a:	0d1b      	lsrs	r3, r3, #20
 8007f6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f6e:	fb02 f303 	mul.w	r3, r2, r3
 8007f72:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007f74:	e060      	b.n	8008038 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007f76:	68bb      	ldr	r3, [r7, #8]
 8007f78:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007f7c:	d107      	bne.n	8007f8e <SPI_WaitFifoStateUntilTimeout+0x62>
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d104      	bne.n	8007f8e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007f84:	69fb      	ldr	r3, [r7, #28]
 8007f86:	781b      	ldrb	r3, [r3, #0]
 8007f88:	b2db      	uxtb	r3, r3
 8007f8a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007f8c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007f94:	d050      	beq.n	8008038 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007f96:	f7fb ff4f 	bl	8003e38 <HAL_GetTick>
 8007f9a:	4602      	mov	r2, r0
 8007f9c:	6a3b      	ldr	r3, [r7, #32]
 8007f9e:	1ad3      	subs	r3, r2, r3
 8007fa0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007fa2:	429a      	cmp	r2, r3
 8007fa4:	d902      	bls.n	8007fac <SPI_WaitFifoStateUntilTimeout+0x80>
 8007fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d13d      	bne.n	8008028 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	685a      	ldr	r2, [r3, #4]
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007fba:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	685b      	ldr	r3, [r3, #4]
 8007fc0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007fc4:	d111      	bne.n	8007fea <SPI_WaitFifoStateUntilTimeout+0xbe>
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	689b      	ldr	r3, [r3, #8]
 8007fca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007fce:	d004      	beq.n	8007fda <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	689b      	ldr	r3, [r3, #8]
 8007fd4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007fd8:	d107      	bne.n	8007fea <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	681a      	ldr	r2, [r3, #0]
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007fe8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ff2:	d10f      	bne.n	8008014 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	681a      	ldr	r2, [r3, #0]
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008002:	601a      	str	r2, [r3, #0]
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	681a      	ldr	r2, [r3, #0]
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008012:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	2201      	movs	r2, #1
 8008018:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	2200      	movs	r2, #0
 8008020:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8008024:	2303      	movs	r3, #3
 8008026:	e010      	b.n	800804a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008028:	69bb      	ldr	r3, [r7, #24]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d101      	bne.n	8008032 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800802e:	2300      	movs	r3, #0
 8008030:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8008032:	69bb      	ldr	r3, [r7, #24]
 8008034:	3b01      	subs	r3, #1
 8008036:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	689a      	ldr	r2, [r3, #8]
 800803e:	68bb      	ldr	r3, [r7, #8]
 8008040:	4013      	ands	r3, r2
 8008042:	687a      	ldr	r2, [r7, #4]
 8008044:	429a      	cmp	r2, r3
 8008046:	d196      	bne.n	8007f76 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8008048:	2300      	movs	r3, #0
}
 800804a:	4618      	mov	r0, r3
 800804c:	3728      	adds	r7, #40	@ 0x28
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}
 8008052:	bf00      	nop
 8008054:	20000020 	.word	0x20000020

08008058 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b086      	sub	sp, #24
 800805c:	af02      	add	r7, sp, #8
 800805e:	60f8      	str	r0, [r7, #12]
 8008060:	60b9      	str	r1, [r7, #8]
 8008062:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	685b      	ldr	r3, [r3, #4]
 8008068:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800806c:	d111      	bne.n	8008092 <SPI_EndRxTransaction+0x3a>
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	689b      	ldr	r3, [r3, #8]
 8008072:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008076:	d004      	beq.n	8008082 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	689b      	ldr	r3, [r3, #8]
 800807c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008080:	d107      	bne.n	8008092 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	681a      	ldr	r2, [r3, #0]
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008090:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	9300      	str	r3, [sp, #0]
 8008096:	68bb      	ldr	r3, [r7, #8]
 8008098:	2200      	movs	r2, #0
 800809a:	2180      	movs	r1, #128	@ 0x80
 800809c:	68f8      	ldr	r0, [r7, #12]
 800809e:	f7ff febd 	bl	8007e1c <SPI_WaitFlagStateUntilTimeout>
 80080a2:	4603      	mov	r3, r0
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d007      	beq.n	80080b8 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80080ac:	f043 0220 	orr.w	r2, r3, #32
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80080b4:	2303      	movs	r3, #3
 80080b6:	e023      	b.n	8008100 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	685b      	ldr	r3, [r3, #4]
 80080bc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80080c0:	d11d      	bne.n	80080fe <SPI_EndRxTransaction+0xa6>
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	689b      	ldr	r3, [r3, #8]
 80080c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80080ca:	d004      	beq.n	80080d6 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	689b      	ldr	r3, [r3, #8]
 80080d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80080d4:	d113      	bne.n	80080fe <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	9300      	str	r3, [sp, #0]
 80080da:	68bb      	ldr	r3, [r7, #8]
 80080dc:	2200      	movs	r2, #0
 80080de:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80080e2:	68f8      	ldr	r0, [r7, #12]
 80080e4:	f7ff ff22 	bl	8007f2c <SPI_WaitFifoStateUntilTimeout>
 80080e8:	4603      	mov	r3, r0
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d007      	beq.n	80080fe <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80080f2:	f043 0220 	orr.w	r2, r3, #32
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80080fa:	2303      	movs	r3, #3
 80080fc:	e000      	b.n	8008100 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80080fe:	2300      	movs	r3, #0
}
 8008100:	4618      	mov	r0, r3
 8008102:	3710      	adds	r7, #16
 8008104:	46bd      	mov	sp, r7
 8008106:	bd80      	pop	{r7, pc}

08008108 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b086      	sub	sp, #24
 800810c:	af02      	add	r7, sp, #8
 800810e:	60f8      	str	r0, [r7, #12]
 8008110:	60b9      	str	r1, [r7, #8]
 8008112:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	9300      	str	r3, [sp, #0]
 8008118:	68bb      	ldr	r3, [r7, #8]
 800811a:	2200      	movs	r2, #0
 800811c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8008120:	68f8      	ldr	r0, [r7, #12]
 8008122:	f7ff ff03 	bl	8007f2c <SPI_WaitFifoStateUntilTimeout>
 8008126:	4603      	mov	r3, r0
 8008128:	2b00      	cmp	r3, #0
 800812a:	d007      	beq.n	800813c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008130:	f043 0220 	orr.w	r2, r3, #32
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008138:	2303      	movs	r3, #3
 800813a:	e027      	b.n	800818c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	9300      	str	r3, [sp, #0]
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	2200      	movs	r2, #0
 8008144:	2180      	movs	r1, #128	@ 0x80
 8008146:	68f8      	ldr	r0, [r7, #12]
 8008148:	f7ff fe68 	bl	8007e1c <SPI_WaitFlagStateUntilTimeout>
 800814c:	4603      	mov	r3, r0
 800814e:	2b00      	cmp	r3, #0
 8008150:	d007      	beq.n	8008162 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008156:	f043 0220 	orr.w	r2, r3, #32
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800815e:	2303      	movs	r3, #3
 8008160:	e014      	b.n	800818c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	9300      	str	r3, [sp, #0]
 8008166:	68bb      	ldr	r3, [r7, #8]
 8008168:	2200      	movs	r2, #0
 800816a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800816e:	68f8      	ldr	r0, [r7, #12]
 8008170:	f7ff fedc 	bl	8007f2c <SPI_WaitFifoStateUntilTimeout>
 8008174:	4603      	mov	r3, r0
 8008176:	2b00      	cmp	r3, #0
 8008178:	d007      	beq.n	800818a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800817e:	f043 0220 	orr.w	r2, r3, #32
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008186:	2303      	movs	r3, #3
 8008188:	e000      	b.n	800818c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800818a:	2300      	movs	r3, #0
}
 800818c:	4618      	mov	r0, r3
 800818e:	3710      	adds	r7, #16
 8008190:	46bd      	mov	sp, r7
 8008192:	bd80      	pop	{r7, pc}

08008194 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b082      	sub	sp, #8
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d101      	bne.n	80081a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80081a2:	2301      	movs	r3, #1
 80081a4:	e049      	b.n	800823a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80081ac:	b2db      	uxtb	r3, r3
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d106      	bne.n	80081c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2200      	movs	r2, #0
 80081b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	f000 f841 	bl	8008242 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2202      	movs	r2, #2
 80081c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681a      	ldr	r2, [r3, #0]
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	3304      	adds	r3, #4
 80081d0:	4619      	mov	r1, r3
 80081d2:	4610      	mov	r0, r2
 80081d4:	f000 fa28 	bl	8008628 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2201      	movs	r2, #1
 80081dc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2201      	movs	r2, #1
 80081e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2201      	movs	r2, #1
 80081ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2201      	movs	r2, #1
 80081f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2201      	movs	r2, #1
 80081fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2201      	movs	r2, #1
 8008204:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2201      	movs	r2, #1
 800820c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2201      	movs	r2, #1
 8008214:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2201      	movs	r2, #1
 800821c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2201      	movs	r2, #1
 8008224:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2201      	movs	r2, #1
 800822c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2201      	movs	r2, #1
 8008234:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008238:	2300      	movs	r3, #0
}
 800823a:	4618      	mov	r0, r3
 800823c:	3708      	adds	r7, #8
 800823e:	46bd      	mov	sp, r7
 8008240:	bd80      	pop	{r7, pc}

08008242 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8008242:	b480      	push	{r7}
 8008244:	b083      	sub	sp, #12
 8008246:	af00      	add	r7, sp, #0
 8008248:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800824a:	bf00      	nop
 800824c:	370c      	adds	r7, #12
 800824e:	46bd      	mov	sp, r7
 8008250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008254:	4770      	bx	lr
	...

08008258 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008258:	b480      	push	{r7}
 800825a:	b085      	sub	sp, #20
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008266:	b2db      	uxtb	r3, r3
 8008268:	2b01      	cmp	r3, #1
 800826a:	d001      	beq.n	8008270 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800826c:	2301      	movs	r3, #1
 800826e:	e04f      	b.n	8008310 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2202      	movs	r2, #2
 8008274:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	68da      	ldr	r2, [r3, #12]
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f042 0201 	orr.w	r2, r2, #1
 8008286:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	4a23      	ldr	r2, [pc, #140]	@ (800831c <HAL_TIM_Base_Start_IT+0xc4>)
 800828e:	4293      	cmp	r3, r2
 8008290:	d01d      	beq.n	80082ce <HAL_TIM_Base_Start_IT+0x76>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800829a:	d018      	beq.n	80082ce <HAL_TIM_Base_Start_IT+0x76>
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	4a1f      	ldr	r2, [pc, #124]	@ (8008320 <HAL_TIM_Base_Start_IT+0xc8>)
 80082a2:	4293      	cmp	r3, r2
 80082a4:	d013      	beq.n	80082ce <HAL_TIM_Base_Start_IT+0x76>
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	4a1e      	ldr	r2, [pc, #120]	@ (8008324 <HAL_TIM_Base_Start_IT+0xcc>)
 80082ac:	4293      	cmp	r3, r2
 80082ae:	d00e      	beq.n	80082ce <HAL_TIM_Base_Start_IT+0x76>
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	4a1c      	ldr	r2, [pc, #112]	@ (8008328 <HAL_TIM_Base_Start_IT+0xd0>)
 80082b6:	4293      	cmp	r3, r2
 80082b8:	d009      	beq.n	80082ce <HAL_TIM_Base_Start_IT+0x76>
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	4a1b      	ldr	r2, [pc, #108]	@ (800832c <HAL_TIM_Base_Start_IT+0xd4>)
 80082c0:	4293      	cmp	r3, r2
 80082c2:	d004      	beq.n	80082ce <HAL_TIM_Base_Start_IT+0x76>
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	4a19      	ldr	r2, [pc, #100]	@ (8008330 <HAL_TIM_Base_Start_IT+0xd8>)
 80082ca:	4293      	cmp	r3, r2
 80082cc:	d115      	bne.n	80082fa <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	689a      	ldr	r2, [r3, #8]
 80082d4:	4b17      	ldr	r3, [pc, #92]	@ (8008334 <HAL_TIM_Base_Start_IT+0xdc>)
 80082d6:	4013      	ands	r3, r2
 80082d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	2b06      	cmp	r3, #6
 80082de:	d015      	beq.n	800830c <HAL_TIM_Base_Start_IT+0xb4>
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80082e6:	d011      	beq.n	800830c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	681a      	ldr	r2, [r3, #0]
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f042 0201 	orr.w	r2, r2, #1
 80082f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082f8:	e008      	b.n	800830c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	681a      	ldr	r2, [r3, #0]
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f042 0201 	orr.w	r2, r2, #1
 8008308:	601a      	str	r2, [r3, #0]
 800830a:	e000      	b.n	800830e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800830c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800830e:	2300      	movs	r3, #0
}
 8008310:	4618      	mov	r0, r3
 8008312:	3714      	adds	r7, #20
 8008314:	46bd      	mov	sp, r7
 8008316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831a:	4770      	bx	lr
 800831c:	40012c00 	.word	0x40012c00
 8008320:	40000400 	.word	0x40000400
 8008324:	40000800 	.word	0x40000800
 8008328:	40013400 	.word	0x40013400
 800832c:	40014000 	.word	0x40014000
 8008330:	40015000 	.word	0x40015000
 8008334:	00010007 	.word	0x00010007

08008338 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b084      	sub	sp, #16
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	68db      	ldr	r3, [r3, #12]
 8008346:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	691b      	ldr	r3, [r3, #16]
 800834e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	f003 0302 	and.w	r3, r3, #2
 8008356:	2b00      	cmp	r3, #0
 8008358:	d020      	beq.n	800839c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	f003 0302 	and.w	r3, r3, #2
 8008360:	2b00      	cmp	r3, #0
 8008362:	d01b      	beq.n	800839c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f06f 0202 	mvn.w	r2, #2
 800836c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2201      	movs	r2, #1
 8008372:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	699b      	ldr	r3, [r3, #24]
 800837a:	f003 0303 	and.w	r3, r3, #3
 800837e:	2b00      	cmp	r3, #0
 8008380:	d003      	beq.n	800838a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	f000 f931 	bl	80085ea <HAL_TIM_IC_CaptureCallback>
 8008388:	e005      	b.n	8008396 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	f000 f923 	bl	80085d6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008390:	6878      	ldr	r0, [r7, #4]
 8008392:	f000 f934 	bl	80085fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2200      	movs	r2, #0
 800839a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	f003 0304 	and.w	r3, r3, #4
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d020      	beq.n	80083e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	f003 0304 	and.w	r3, r3, #4
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d01b      	beq.n	80083e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f06f 0204 	mvn.w	r2, #4
 80083b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2202      	movs	r2, #2
 80083be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	699b      	ldr	r3, [r3, #24]
 80083c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d003      	beq.n	80083d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f000 f90b 	bl	80085ea <HAL_TIM_IC_CaptureCallback>
 80083d4:	e005      	b.n	80083e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	f000 f8fd 	bl	80085d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083dc:	6878      	ldr	r0, [r7, #4]
 80083de:	f000 f90e 	bl	80085fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	2200      	movs	r2, #0
 80083e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	f003 0308 	and.w	r3, r3, #8
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d020      	beq.n	8008434 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	f003 0308 	and.w	r3, r3, #8
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d01b      	beq.n	8008434 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f06f 0208 	mvn.w	r2, #8
 8008404:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2204      	movs	r2, #4
 800840a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	69db      	ldr	r3, [r3, #28]
 8008412:	f003 0303 	and.w	r3, r3, #3
 8008416:	2b00      	cmp	r3, #0
 8008418:	d003      	beq.n	8008422 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f000 f8e5 	bl	80085ea <HAL_TIM_IC_CaptureCallback>
 8008420:	e005      	b.n	800842e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f000 f8d7 	bl	80085d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008428:	6878      	ldr	r0, [r7, #4]
 800842a:	f000 f8e8 	bl	80085fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	2200      	movs	r2, #0
 8008432:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	f003 0310 	and.w	r3, r3, #16
 800843a:	2b00      	cmp	r3, #0
 800843c:	d020      	beq.n	8008480 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	f003 0310 	and.w	r3, r3, #16
 8008444:	2b00      	cmp	r3, #0
 8008446:	d01b      	beq.n	8008480 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f06f 0210 	mvn.w	r2, #16
 8008450:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2208      	movs	r2, #8
 8008456:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	69db      	ldr	r3, [r3, #28]
 800845e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008462:	2b00      	cmp	r3, #0
 8008464:	d003      	beq.n	800846e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	f000 f8bf 	bl	80085ea <HAL_TIM_IC_CaptureCallback>
 800846c:	e005      	b.n	800847a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800846e:	6878      	ldr	r0, [r7, #4]
 8008470:	f000 f8b1 	bl	80085d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008474:	6878      	ldr	r0, [r7, #4]
 8008476:	f000 f8c2 	bl	80085fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2200      	movs	r2, #0
 800847e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	f003 0301 	and.w	r3, r3, #1
 8008486:	2b00      	cmp	r3, #0
 8008488:	d00c      	beq.n	80084a4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	f003 0301 	and.w	r3, r3, #1
 8008490:	2b00      	cmp	r3, #0
 8008492:	d007      	beq.n	80084a4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f06f 0201 	mvn.w	r2, #1
 800849c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	f7fa ffb8 	bl	8003414 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d104      	bne.n	80084b8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80084ae:	68bb      	ldr	r3, [r7, #8]
 80084b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d00c      	beq.n	80084d2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d007      	beq.n	80084d2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80084ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80084cc:	6878      	ldr	r0, [r7, #4]
 80084ce:	f000 f95f 	bl	8008790 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80084d2:	68bb      	ldr	r3, [r7, #8]
 80084d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d00c      	beq.n	80084f6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d007      	beq.n	80084f6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80084ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	f000 f957 	bl	80087a4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80084f6:	68bb      	ldr	r3, [r7, #8]
 80084f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d00c      	beq.n	800851a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008506:	2b00      	cmp	r3, #0
 8008508:	d007      	beq.n	800851a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008512:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008514:	6878      	ldr	r0, [r7, #4]
 8008516:	f000 f87c 	bl	8008612 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800851a:	68bb      	ldr	r3, [r7, #8]
 800851c:	f003 0320 	and.w	r3, r3, #32
 8008520:	2b00      	cmp	r3, #0
 8008522:	d00c      	beq.n	800853e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	f003 0320 	and.w	r3, r3, #32
 800852a:	2b00      	cmp	r3, #0
 800852c:	d007      	beq.n	800853e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	f06f 0220 	mvn.w	r2, #32
 8008536:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008538:	6878      	ldr	r0, [r7, #4]
 800853a:	f000 f91f 	bl	800877c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800853e:	68bb      	ldr	r3, [r7, #8]
 8008540:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008544:	2b00      	cmp	r3, #0
 8008546:	d00c      	beq.n	8008562 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800854e:	2b00      	cmp	r3, #0
 8008550:	d007      	beq.n	8008562 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800855a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800855c:	6878      	ldr	r0, [r7, #4]
 800855e:	f000 f92b 	bl	80087b8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8008562:	68bb      	ldr	r3, [r7, #8]
 8008564:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008568:	2b00      	cmp	r3, #0
 800856a:	d00c      	beq.n	8008586 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008572:	2b00      	cmp	r3, #0
 8008574:	d007      	beq.n	8008586 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800857e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8008580:	6878      	ldr	r0, [r7, #4]
 8008582:	f000 f923 	bl	80087cc <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8008586:	68bb      	ldr	r3, [r7, #8]
 8008588:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800858c:	2b00      	cmp	r3, #0
 800858e:	d00c      	beq.n	80085aa <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008596:	2b00      	cmp	r3, #0
 8008598:	d007      	beq.n	80085aa <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80085a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80085a4:	6878      	ldr	r0, [r7, #4]
 80085a6:	f000 f91b 	bl	80087e0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80085aa:	68bb      	ldr	r3, [r7, #8]
 80085ac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d00c      	beq.n	80085ce <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d007      	beq.n	80085ce <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80085c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80085c8:	6878      	ldr	r0, [r7, #4]
 80085ca:	f000 f913 	bl	80087f4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80085ce:	bf00      	nop
 80085d0:	3710      	adds	r7, #16
 80085d2:	46bd      	mov	sp, r7
 80085d4:	bd80      	pop	{r7, pc}

080085d6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80085d6:	b480      	push	{r7}
 80085d8:	b083      	sub	sp, #12
 80085da:	af00      	add	r7, sp, #0
 80085dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80085de:	bf00      	nop
 80085e0:	370c      	adds	r7, #12
 80085e2:	46bd      	mov	sp, r7
 80085e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e8:	4770      	bx	lr

080085ea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80085ea:	b480      	push	{r7}
 80085ec:	b083      	sub	sp, #12
 80085ee:	af00      	add	r7, sp, #0
 80085f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80085f2:	bf00      	nop
 80085f4:	370c      	adds	r7, #12
 80085f6:	46bd      	mov	sp, r7
 80085f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fc:	4770      	bx	lr

080085fe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80085fe:	b480      	push	{r7}
 8008600:	b083      	sub	sp, #12
 8008602:	af00      	add	r7, sp, #0
 8008604:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008606:	bf00      	nop
 8008608:	370c      	adds	r7, #12
 800860a:	46bd      	mov	sp, r7
 800860c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008610:	4770      	bx	lr

08008612 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008612:	b480      	push	{r7}
 8008614:	b083      	sub	sp, #12
 8008616:	af00      	add	r7, sp, #0
 8008618:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800861a:	bf00      	nop
 800861c:	370c      	adds	r7, #12
 800861e:	46bd      	mov	sp, r7
 8008620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008624:	4770      	bx	lr
	...

08008628 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008628:	b480      	push	{r7}
 800862a:	b085      	sub	sp, #20
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
 8008630:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	4a48      	ldr	r2, [pc, #288]	@ (800875c <TIM_Base_SetConfig+0x134>)
 800863c:	4293      	cmp	r3, r2
 800863e:	d013      	beq.n	8008668 <TIM_Base_SetConfig+0x40>
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008646:	d00f      	beq.n	8008668 <TIM_Base_SetConfig+0x40>
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	4a45      	ldr	r2, [pc, #276]	@ (8008760 <TIM_Base_SetConfig+0x138>)
 800864c:	4293      	cmp	r3, r2
 800864e:	d00b      	beq.n	8008668 <TIM_Base_SetConfig+0x40>
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	4a44      	ldr	r2, [pc, #272]	@ (8008764 <TIM_Base_SetConfig+0x13c>)
 8008654:	4293      	cmp	r3, r2
 8008656:	d007      	beq.n	8008668 <TIM_Base_SetConfig+0x40>
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	4a43      	ldr	r2, [pc, #268]	@ (8008768 <TIM_Base_SetConfig+0x140>)
 800865c:	4293      	cmp	r3, r2
 800865e:	d003      	beq.n	8008668 <TIM_Base_SetConfig+0x40>
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	4a42      	ldr	r2, [pc, #264]	@ (800876c <TIM_Base_SetConfig+0x144>)
 8008664:	4293      	cmp	r3, r2
 8008666:	d108      	bne.n	800867a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800866e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	685b      	ldr	r3, [r3, #4]
 8008674:	68fa      	ldr	r2, [r7, #12]
 8008676:	4313      	orrs	r3, r2
 8008678:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	4a37      	ldr	r2, [pc, #220]	@ (800875c <TIM_Base_SetConfig+0x134>)
 800867e:	4293      	cmp	r3, r2
 8008680:	d01f      	beq.n	80086c2 <TIM_Base_SetConfig+0x9a>
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008688:	d01b      	beq.n	80086c2 <TIM_Base_SetConfig+0x9a>
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	4a34      	ldr	r2, [pc, #208]	@ (8008760 <TIM_Base_SetConfig+0x138>)
 800868e:	4293      	cmp	r3, r2
 8008690:	d017      	beq.n	80086c2 <TIM_Base_SetConfig+0x9a>
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	4a33      	ldr	r2, [pc, #204]	@ (8008764 <TIM_Base_SetConfig+0x13c>)
 8008696:	4293      	cmp	r3, r2
 8008698:	d013      	beq.n	80086c2 <TIM_Base_SetConfig+0x9a>
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	4a32      	ldr	r2, [pc, #200]	@ (8008768 <TIM_Base_SetConfig+0x140>)
 800869e:	4293      	cmp	r3, r2
 80086a0:	d00f      	beq.n	80086c2 <TIM_Base_SetConfig+0x9a>
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	4a32      	ldr	r2, [pc, #200]	@ (8008770 <TIM_Base_SetConfig+0x148>)
 80086a6:	4293      	cmp	r3, r2
 80086a8:	d00b      	beq.n	80086c2 <TIM_Base_SetConfig+0x9a>
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	4a31      	ldr	r2, [pc, #196]	@ (8008774 <TIM_Base_SetConfig+0x14c>)
 80086ae:	4293      	cmp	r3, r2
 80086b0:	d007      	beq.n	80086c2 <TIM_Base_SetConfig+0x9a>
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	4a30      	ldr	r2, [pc, #192]	@ (8008778 <TIM_Base_SetConfig+0x150>)
 80086b6:	4293      	cmp	r3, r2
 80086b8:	d003      	beq.n	80086c2 <TIM_Base_SetConfig+0x9a>
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	4a2b      	ldr	r2, [pc, #172]	@ (800876c <TIM_Base_SetConfig+0x144>)
 80086be:	4293      	cmp	r3, r2
 80086c0:	d108      	bne.n	80086d4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80086c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	68db      	ldr	r3, [r3, #12]
 80086ce:	68fa      	ldr	r2, [r7, #12]
 80086d0:	4313      	orrs	r3, r2
 80086d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	695b      	ldr	r3, [r3, #20]
 80086de:	4313      	orrs	r3, r2
 80086e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	68fa      	ldr	r2, [r7, #12]
 80086e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	689a      	ldr	r2, [r3, #8]
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	681a      	ldr	r2, [r3, #0]
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	4a18      	ldr	r2, [pc, #96]	@ (800875c <TIM_Base_SetConfig+0x134>)
 80086fc:	4293      	cmp	r3, r2
 80086fe:	d013      	beq.n	8008728 <TIM_Base_SetConfig+0x100>
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	4a19      	ldr	r2, [pc, #100]	@ (8008768 <TIM_Base_SetConfig+0x140>)
 8008704:	4293      	cmp	r3, r2
 8008706:	d00f      	beq.n	8008728 <TIM_Base_SetConfig+0x100>
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	4a19      	ldr	r2, [pc, #100]	@ (8008770 <TIM_Base_SetConfig+0x148>)
 800870c:	4293      	cmp	r3, r2
 800870e:	d00b      	beq.n	8008728 <TIM_Base_SetConfig+0x100>
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	4a18      	ldr	r2, [pc, #96]	@ (8008774 <TIM_Base_SetConfig+0x14c>)
 8008714:	4293      	cmp	r3, r2
 8008716:	d007      	beq.n	8008728 <TIM_Base_SetConfig+0x100>
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	4a17      	ldr	r2, [pc, #92]	@ (8008778 <TIM_Base_SetConfig+0x150>)
 800871c:	4293      	cmp	r3, r2
 800871e:	d003      	beq.n	8008728 <TIM_Base_SetConfig+0x100>
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	4a12      	ldr	r2, [pc, #72]	@ (800876c <TIM_Base_SetConfig+0x144>)
 8008724:	4293      	cmp	r3, r2
 8008726:	d103      	bne.n	8008730 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	691a      	ldr	r2, [r3, #16]
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2201      	movs	r2, #1
 8008734:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	691b      	ldr	r3, [r3, #16]
 800873a:	f003 0301 	and.w	r3, r3, #1
 800873e:	2b01      	cmp	r3, #1
 8008740:	d105      	bne.n	800874e <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	691b      	ldr	r3, [r3, #16]
 8008746:	f023 0201 	bic.w	r2, r3, #1
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	611a      	str	r2, [r3, #16]
  }
}
 800874e:	bf00      	nop
 8008750:	3714      	adds	r7, #20
 8008752:	46bd      	mov	sp, r7
 8008754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008758:	4770      	bx	lr
 800875a:	bf00      	nop
 800875c:	40012c00 	.word	0x40012c00
 8008760:	40000400 	.word	0x40000400
 8008764:	40000800 	.word	0x40000800
 8008768:	40013400 	.word	0x40013400
 800876c:	40015000 	.word	0x40015000
 8008770:	40014000 	.word	0x40014000
 8008774:	40014400 	.word	0x40014400
 8008778:	40014800 	.word	0x40014800

0800877c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800877c:	b480      	push	{r7}
 800877e:	b083      	sub	sp, #12
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008784:	bf00      	nop
 8008786:	370c      	adds	r7, #12
 8008788:	46bd      	mov	sp, r7
 800878a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878e:	4770      	bx	lr

08008790 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008790:	b480      	push	{r7}
 8008792:	b083      	sub	sp, #12
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008798:	bf00      	nop
 800879a:	370c      	adds	r7, #12
 800879c:	46bd      	mov	sp, r7
 800879e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a2:	4770      	bx	lr

080087a4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80087a4:	b480      	push	{r7}
 80087a6:	b083      	sub	sp, #12
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80087ac:	bf00      	nop
 80087ae:	370c      	adds	r7, #12
 80087b0:	46bd      	mov	sp, r7
 80087b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b6:	4770      	bx	lr

080087b8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80087b8:	b480      	push	{r7}
 80087ba:	b083      	sub	sp, #12
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80087c0:	bf00      	nop
 80087c2:	370c      	adds	r7, #12
 80087c4:	46bd      	mov	sp, r7
 80087c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ca:	4770      	bx	lr

080087cc <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80087cc:	b480      	push	{r7}
 80087ce:	b083      	sub	sp, #12
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80087d4:	bf00      	nop
 80087d6:	370c      	adds	r7, #12
 80087d8:	46bd      	mov	sp, r7
 80087da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087de:	4770      	bx	lr

080087e0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80087e0:	b480      	push	{r7}
 80087e2:	b083      	sub	sp, #12
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80087e8:	bf00      	nop
 80087ea:	370c      	adds	r7, #12
 80087ec:	46bd      	mov	sp, r7
 80087ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f2:	4770      	bx	lr

080087f4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80087f4:	b480      	push	{r7}
 80087f6:	b083      	sub	sp, #12
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80087fc:	bf00      	nop
 80087fe:	370c      	adds	r7, #12
 8008800:	46bd      	mov	sp, r7
 8008802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008806:	4770      	bx	lr

08008808 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8008808:	b480      	push	{r7}
 800880a:	b085      	sub	sp, #20
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2200      	movs	r2, #0
 8008814:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008818:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800881c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	b29a      	uxth	r2, r3
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008828:	2300      	movs	r3, #0
}
 800882a:	4618      	mov	r0, r3
 800882c:	3714      	adds	r7, #20
 800882e:	46bd      	mov	sp, r7
 8008830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008834:	4770      	bx	lr

08008836 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8008836:	b480      	push	{r7}
 8008838:	b085      	sub	sp, #20
 800883a:	af00      	add	r7, sp, #0
 800883c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800883e:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8008842:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800884a:	b29a      	uxth	r2, r3
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	b29b      	uxth	r3, r3
 8008850:	43db      	mvns	r3, r3
 8008852:	b29b      	uxth	r3, r3
 8008854:	4013      	ands	r3, r2
 8008856:	b29a      	uxth	r2, r3
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800885e:	2300      	movs	r3, #0
}
 8008860:	4618      	mov	r0, r3
 8008862:	3714      	adds	r7, #20
 8008864:	46bd      	mov	sp, r7
 8008866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886a:	4770      	bx	lr

0800886c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800886c:	b480      	push	{r7}
 800886e:	b085      	sub	sp, #20
 8008870:	af00      	add	r7, sp, #0
 8008872:	60f8      	str	r0, [r7, #12]
 8008874:	1d3b      	adds	r3, r7, #4
 8008876:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	2201      	movs	r2, #1
 800887e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	2200      	movs	r2, #0
 8008886:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	2200      	movs	r2, #0
 800888e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	2200      	movs	r2, #0
 8008896:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800889a:	2300      	movs	r3, #0
}
 800889c:	4618      	mov	r0, r3
 800889e:	3714      	adds	r7, #20
 80088a0:	46bd      	mov	sp, r7
 80088a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a6:	4770      	bx	lr

080088a8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80088a8:	b480      	push	{r7}
 80088aa:	b0a7      	sub	sp, #156	@ 0x9c
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
 80088b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80088b2:	2300      	movs	r3, #0
 80088b4:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80088b8:	687a      	ldr	r2, [r7, #4]
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	781b      	ldrb	r3, [r3, #0]
 80088be:	009b      	lsls	r3, r3, #2
 80088c0:	4413      	add	r3, r2
 80088c2:	881b      	ldrh	r3, [r3, #0]
 80088c4:	b29b      	uxth	r3, r3
 80088c6:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 80088ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80088ce:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	78db      	ldrb	r3, [r3, #3]
 80088d6:	2b03      	cmp	r3, #3
 80088d8:	d81f      	bhi.n	800891a <USB_ActivateEndpoint+0x72>
 80088da:	a201      	add	r2, pc, #4	@ (adr r2, 80088e0 <USB_ActivateEndpoint+0x38>)
 80088dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088e0:	080088f1 	.word	0x080088f1
 80088e4:	0800890d 	.word	0x0800890d
 80088e8:	08008923 	.word	0x08008923
 80088ec:	080088ff 	.word	0x080088ff
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80088f0:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80088f4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80088f8:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 80088fc:	e012      	b.n	8008924 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80088fe:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8008902:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8008906:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800890a:	e00b      	b.n	8008924 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800890c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8008910:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008914:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8008918:	e004      	b.n	8008924 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800891a:	2301      	movs	r3, #1
 800891c:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 8008920:	e000      	b.n	8008924 <USB_ActivateEndpoint+0x7c>
      break;
 8008922:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8008924:	687a      	ldr	r2, [r7, #4]
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	781b      	ldrb	r3, [r3, #0]
 800892a:	009b      	lsls	r3, r3, #2
 800892c:	441a      	add	r2, r3
 800892e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8008932:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008936:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800893a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800893e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008942:	b29b      	uxth	r3, r3
 8008944:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8008946:	687a      	ldr	r2, [r7, #4]
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	781b      	ldrb	r3, [r3, #0]
 800894c:	009b      	lsls	r3, r3, #2
 800894e:	4413      	add	r3, r2
 8008950:	881b      	ldrh	r3, [r3, #0]
 8008952:	b29b      	uxth	r3, r3
 8008954:	b21b      	sxth	r3, r3
 8008956:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800895a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800895e:	b21a      	sxth	r2, r3
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	781b      	ldrb	r3, [r3, #0]
 8008964:	b21b      	sxth	r3, r3
 8008966:	4313      	orrs	r3, r2
 8008968:	b21b      	sxth	r3, r3
 800896a:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 800896e:	687a      	ldr	r2, [r7, #4]
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	781b      	ldrb	r3, [r3, #0]
 8008974:	009b      	lsls	r3, r3, #2
 8008976:	441a      	add	r2, r3
 8008978:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800897c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008980:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008984:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008988:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800898c:	b29b      	uxth	r3, r3
 800898e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	7b1b      	ldrb	r3, [r3, #12]
 8008994:	2b00      	cmp	r3, #0
 8008996:	f040 8180 	bne.w	8008c9a <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	785b      	ldrb	r3, [r3, #1]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	f000 8084 	beq.w	8008aac <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	61bb      	str	r3, [r7, #24]
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80089ae:	b29b      	uxth	r3, r3
 80089b0:	461a      	mov	r2, r3
 80089b2:	69bb      	ldr	r3, [r7, #24]
 80089b4:	4413      	add	r3, r2
 80089b6:	61bb      	str	r3, [r7, #24]
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	781b      	ldrb	r3, [r3, #0]
 80089bc:	00da      	lsls	r2, r3, #3
 80089be:	69bb      	ldr	r3, [r7, #24]
 80089c0:	4413      	add	r3, r2
 80089c2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80089c6:	617b      	str	r3, [r7, #20]
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	88db      	ldrh	r3, [r3, #6]
 80089cc:	085b      	lsrs	r3, r3, #1
 80089ce:	b29b      	uxth	r3, r3
 80089d0:	005b      	lsls	r3, r3, #1
 80089d2:	b29a      	uxth	r2, r3
 80089d4:	697b      	ldr	r3, [r7, #20]
 80089d6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80089d8:	687a      	ldr	r2, [r7, #4]
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	781b      	ldrb	r3, [r3, #0]
 80089de:	009b      	lsls	r3, r3, #2
 80089e0:	4413      	add	r3, r2
 80089e2:	881b      	ldrh	r3, [r3, #0]
 80089e4:	827b      	strh	r3, [r7, #18]
 80089e6:	8a7b      	ldrh	r3, [r7, #18]
 80089e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d01b      	beq.n	8008a28 <USB_ActivateEndpoint+0x180>
 80089f0:	687a      	ldr	r2, [r7, #4]
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	781b      	ldrb	r3, [r3, #0]
 80089f6:	009b      	lsls	r3, r3, #2
 80089f8:	4413      	add	r3, r2
 80089fa:	881b      	ldrh	r3, [r3, #0]
 80089fc:	b29b      	uxth	r3, r3
 80089fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008a02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a06:	823b      	strh	r3, [r7, #16]
 8008a08:	687a      	ldr	r2, [r7, #4]
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	781b      	ldrb	r3, [r3, #0]
 8008a0e:	009b      	lsls	r3, r3, #2
 8008a10:	441a      	add	r2, r3
 8008a12:	8a3b      	ldrh	r3, [r7, #16]
 8008a14:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008a18:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008a1c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008a20:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008a24:	b29b      	uxth	r3, r3
 8008a26:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	78db      	ldrb	r3, [r3, #3]
 8008a2c:	2b01      	cmp	r3, #1
 8008a2e:	d020      	beq.n	8008a72 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008a30:	687a      	ldr	r2, [r7, #4]
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	781b      	ldrb	r3, [r3, #0]
 8008a36:	009b      	lsls	r3, r3, #2
 8008a38:	4413      	add	r3, r2
 8008a3a:	881b      	ldrh	r3, [r3, #0]
 8008a3c:	b29b      	uxth	r3, r3
 8008a3e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008a42:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008a46:	81bb      	strh	r3, [r7, #12]
 8008a48:	89bb      	ldrh	r3, [r7, #12]
 8008a4a:	f083 0320 	eor.w	r3, r3, #32
 8008a4e:	81bb      	strh	r3, [r7, #12]
 8008a50:	687a      	ldr	r2, [r7, #4]
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	781b      	ldrb	r3, [r3, #0]
 8008a56:	009b      	lsls	r3, r3, #2
 8008a58:	441a      	add	r2, r3
 8008a5a:	89bb      	ldrh	r3, [r7, #12]
 8008a5c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008a60:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008a64:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008a68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a6c:	b29b      	uxth	r3, r3
 8008a6e:	8013      	strh	r3, [r2, #0]
 8008a70:	e3f9      	b.n	8009266 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008a72:	687a      	ldr	r2, [r7, #4]
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	781b      	ldrb	r3, [r3, #0]
 8008a78:	009b      	lsls	r3, r3, #2
 8008a7a:	4413      	add	r3, r2
 8008a7c:	881b      	ldrh	r3, [r3, #0]
 8008a7e:	b29b      	uxth	r3, r3
 8008a80:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008a84:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008a88:	81fb      	strh	r3, [r7, #14]
 8008a8a:	687a      	ldr	r2, [r7, #4]
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	781b      	ldrb	r3, [r3, #0]
 8008a90:	009b      	lsls	r3, r3, #2
 8008a92:	441a      	add	r2, r3
 8008a94:	89fb      	ldrh	r3, [r7, #14]
 8008a96:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008a9a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008a9e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008aa2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008aa6:	b29b      	uxth	r3, r3
 8008aa8:	8013      	strh	r3, [r2, #0]
 8008aaa:	e3dc      	b.n	8009266 <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	633b      	str	r3, [r7, #48]	@ 0x30
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008ab6:	b29b      	uxth	r3, r3
 8008ab8:	461a      	mov	r2, r3
 8008aba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008abc:	4413      	add	r3, r2
 8008abe:	633b      	str	r3, [r7, #48]	@ 0x30
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	781b      	ldrb	r3, [r3, #0]
 8008ac4:	00da      	lsls	r2, r3, #3
 8008ac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ac8:	4413      	add	r3, r2
 8008aca:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008ace:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	88db      	ldrh	r3, [r3, #6]
 8008ad4:	085b      	lsrs	r3, r3, #1
 8008ad6:	b29b      	uxth	r3, r3
 8008ad8:	005b      	lsls	r3, r3, #1
 8008ada:	b29a      	uxth	r2, r3
 8008adc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ade:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008aea:	b29b      	uxth	r3, r3
 8008aec:	461a      	mov	r2, r3
 8008aee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008af0:	4413      	add	r3, r2
 8008af2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	781b      	ldrb	r3, [r3, #0]
 8008af8:	00da      	lsls	r2, r3, #3
 8008afa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008afc:	4413      	add	r3, r2
 8008afe:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008b02:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b06:	881b      	ldrh	r3, [r3, #0]
 8008b08:	b29b      	uxth	r3, r3
 8008b0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008b0e:	b29a      	uxth	r2, r3
 8008b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b12:	801a      	strh	r2, [r3, #0]
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	691b      	ldr	r3, [r3, #16]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d10a      	bne.n	8008b32 <USB_ActivateEndpoint+0x28a>
 8008b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b1e:	881b      	ldrh	r3, [r3, #0]
 8008b20:	b29b      	uxth	r3, r3
 8008b22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b2a:	b29a      	uxth	r2, r3
 8008b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b2e:	801a      	strh	r2, [r3, #0]
 8008b30:	e041      	b.n	8008bb6 <USB_ActivateEndpoint+0x30e>
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	691b      	ldr	r3, [r3, #16]
 8008b36:	2b3e      	cmp	r3, #62	@ 0x3e
 8008b38:	d81c      	bhi.n	8008b74 <USB_ActivateEndpoint+0x2cc>
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	691b      	ldr	r3, [r3, #16]
 8008b3e:	085b      	lsrs	r3, r3, #1
 8008b40:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	691b      	ldr	r3, [r3, #16]
 8008b48:	f003 0301 	and.w	r3, r3, #1
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d004      	beq.n	8008b5a <USB_ActivateEndpoint+0x2b2>
 8008b50:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008b54:	3301      	adds	r3, #1
 8008b56:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b5c:	881b      	ldrh	r3, [r3, #0]
 8008b5e:	b29a      	uxth	r2, r3
 8008b60:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008b64:	b29b      	uxth	r3, r3
 8008b66:	029b      	lsls	r3, r3, #10
 8008b68:	b29b      	uxth	r3, r3
 8008b6a:	4313      	orrs	r3, r2
 8008b6c:	b29a      	uxth	r2, r3
 8008b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b70:	801a      	strh	r2, [r3, #0]
 8008b72:	e020      	b.n	8008bb6 <USB_ActivateEndpoint+0x30e>
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	691b      	ldr	r3, [r3, #16]
 8008b78:	095b      	lsrs	r3, r3, #5
 8008b7a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	691b      	ldr	r3, [r3, #16]
 8008b82:	f003 031f 	and.w	r3, r3, #31
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d104      	bne.n	8008b94 <USB_ActivateEndpoint+0x2ec>
 8008b8a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008b8e:	3b01      	subs	r3, #1
 8008b90:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b96:	881b      	ldrh	r3, [r3, #0]
 8008b98:	b29a      	uxth	r2, r3
 8008b9a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008b9e:	b29b      	uxth	r3, r3
 8008ba0:	029b      	lsls	r3, r3, #10
 8008ba2:	b29b      	uxth	r3, r3
 8008ba4:	4313      	orrs	r3, r2
 8008ba6:	b29b      	uxth	r3, r3
 8008ba8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008bac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008bb0:	b29a      	uxth	r2, r3
 8008bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bb4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008bb6:	687a      	ldr	r2, [r7, #4]
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	781b      	ldrb	r3, [r3, #0]
 8008bbc:	009b      	lsls	r3, r3, #2
 8008bbe:	4413      	add	r3, r2
 8008bc0:	881b      	ldrh	r3, [r3, #0]
 8008bc2:	847b      	strh	r3, [r7, #34]	@ 0x22
 8008bc4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008bc6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d01b      	beq.n	8008c06 <USB_ActivateEndpoint+0x35e>
 8008bce:	687a      	ldr	r2, [r7, #4]
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	781b      	ldrb	r3, [r3, #0]
 8008bd4:	009b      	lsls	r3, r3, #2
 8008bd6:	4413      	add	r3, r2
 8008bd8:	881b      	ldrh	r3, [r3, #0]
 8008bda:	b29b      	uxth	r3, r3
 8008bdc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008be0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008be4:	843b      	strh	r3, [r7, #32]
 8008be6:	687a      	ldr	r2, [r7, #4]
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	781b      	ldrb	r3, [r3, #0]
 8008bec:	009b      	lsls	r3, r3, #2
 8008bee:	441a      	add	r2, r3
 8008bf0:	8c3b      	ldrh	r3, [r7, #32]
 8008bf2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008bf6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008bfa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008bfe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c02:	b29b      	uxth	r3, r3
 8008c04:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	781b      	ldrb	r3, [r3, #0]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d124      	bne.n	8008c58 <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008c0e:	687a      	ldr	r2, [r7, #4]
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	781b      	ldrb	r3, [r3, #0]
 8008c14:	009b      	lsls	r3, r3, #2
 8008c16:	4413      	add	r3, r2
 8008c18:	881b      	ldrh	r3, [r3, #0]
 8008c1a:	b29b      	uxth	r3, r3
 8008c1c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008c20:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c24:	83bb      	strh	r3, [r7, #28]
 8008c26:	8bbb      	ldrh	r3, [r7, #28]
 8008c28:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008c2c:	83bb      	strh	r3, [r7, #28]
 8008c2e:	8bbb      	ldrh	r3, [r7, #28]
 8008c30:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008c34:	83bb      	strh	r3, [r7, #28]
 8008c36:	687a      	ldr	r2, [r7, #4]
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	781b      	ldrb	r3, [r3, #0]
 8008c3c:	009b      	lsls	r3, r3, #2
 8008c3e:	441a      	add	r2, r3
 8008c40:	8bbb      	ldrh	r3, [r7, #28]
 8008c42:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008c46:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008c4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008c4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c52:	b29b      	uxth	r3, r3
 8008c54:	8013      	strh	r3, [r2, #0]
 8008c56:	e306      	b.n	8009266 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8008c58:	687a      	ldr	r2, [r7, #4]
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	781b      	ldrb	r3, [r3, #0]
 8008c5e:	009b      	lsls	r3, r3, #2
 8008c60:	4413      	add	r3, r2
 8008c62:	881b      	ldrh	r3, [r3, #0]
 8008c64:	b29b      	uxth	r3, r3
 8008c66:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008c6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c6e:	83fb      	strh	r3, [r7, #30]
 8008c70:	8bfb      	ldrh	r3, [r7, #30]
 8008c72:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008c76:	83fb      	strh	r3, [r7, #30]
 8008c78:	687a      	ldr	r2, [r7, #4]
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	781b      	ldrb	r3, [r3, #0]
 8008c7e:	009b      	lsls	r3, r3, #2
 8008c80:	441a      	add	r2, r3
 8008c82:	8bfb      	ldrh	r3, [r7, #30]
 8008c84:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008c88:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008c8c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008c90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c94:	b29b      	uxth	r3, r3
 8008c96:	8013      	strh	r3, [r2, #0]
 8008c98:	e2e5      	b.n	8009266 <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	78db      	ldrb	r3, [r3, #3]
 8008c9e:	2b02      	cmp	r3, #2
 8008ca0:	d11e      	bne.n	8008ce0 <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008ca2:	687a      	ldr	r2, [r7, #4]
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	781b      	ldrb	r3, [r3, #0]
 8008ca8:	009b      	lsls	r3, r3, #2
 8008caa:	4413      	add	r3, r2
 8008cac:	881b      	ldrh	r3, [r3, #0]
 8008cae:	b29b      	uxth	r3, r3
 8008cb0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008cb4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008cb8:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 8008cbc:	687a      	ldr	r2, [r7, #4]
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	781b      	ldrb	r3, [r3, #0]
 8008cc2:	009b      	lsls	r3, r3, #2
 8008cc4:	441a      	add	r2, r3
 8008cc6:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8008cca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008cce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008cd2:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8008cd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008cda:	b29b      	uxth	r3, r3
 8008cdc:	8013      	strh	r3, [r2, #0]
 8008cde:	e01d      	b.n	8008d1c <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8008ce0:	687a      	ldr	r2, [r7, #4]
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	781b      	ldrb	r3, [r3, #0]
 8008ce6:	009b      	lsls	r3, r3, #2
 8008ce8:	4413      	add	r3, r2
 8008cea:	881b      	ldrh	r3, [r3, #0]
 8008cec:	b29b      	uxth	r3, r3
 8008cee:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8008cf2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008cf6:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 8008cfa:	687a      	ldr	r2, [r7, #4]
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	781b      	ldrb	r3, [r3, #0]
 8008d00:	009b      	lsls	r3, r3, #2
 8008d02:	441a      	add	r2, r3
 8008d04:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 8008d08:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008d0c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008d10:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008d14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d18:	b29b      	uxth	r3, r3
 8008d1a:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008d26:	b29b      	uxth	r3, r3
 8008d28:	461a      	mov	r2, r3
 8008d2a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008d2c:	4413      	add	r3, r2
 8008d2e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	781b      	ldrb	r3, [r3, #0]
 8008d34:	00da      	lsls	r2, r3, #3
 8008d36:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008d38:	4413      	add	r3, r2
 8008d3a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008d3e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	891b      	ldrh	r3, [r3, #8]
 8008d44:	085b      	lsrs	r3, r3, #1
 8008d46:	b29b      	uxth	r3, r3
 8008d48:	005b      	lsls	r3, r3, #1
 8008d4a:	b29a      	uxth	r2, r3
 8008d4c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008d4e:	801a      	strh	r2, [r3, #0]
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	677b      	str	r3, [r7, #116]	@ 0x74
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008d5a:	b29b      	uxth	r3, r3
 8008d5c:	461a      	mov	r2, r3
 8008d5e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008d60:	4413      	add	r3, r2
 8008d62:	677b      	str	r3, [r7, #116]	@ 0x74
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	781b      	ldrb	r3, [r3, #0]
 8008d68:	00da      	lsls	r2, r3, #3
 8008d6a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008d6c:	4413      	add	r3, r2
 8008d6e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008d72:	673b      	str	r3, [r7, #112]	@ 0x70
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	895b      	ldrh	r3, [r3, #10]
 8008d78:	085b      	lsrs	r3, r3, #1
 8008d7a:	b29b      	uxth	r3, r3
 8008d7c:	005b      	lsls	r3, r3, #1
 8008d7e:	b29a      	uxth	r2, r3
 8008d80:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008d82:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	785b      	ldrb	r3, [r3, #1]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	f040 81af 	bne.w	80090ec <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008d8e:	687a      	ldr	r2, [r7, #4]
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	781b      	ldrb	r3, [r3, #0]
 8008d94:	009b      	lsls	r3, r3, #2
 8008d96:	4413      	add	r3, r2
 8008d98:	881b      	ldrh	r3, [r3, #0]
 8008d9a:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 8008d9e:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 8008da2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d01d      	beq.n	8008de6 <USB_ActivateEndpoint+0x53e>
 8008daa:	687a      	ldr	r2, [r7, #4]
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	781b      	ldrb	r3, [r3, #0]
 8008db0:	009b      	lsls	r3, r3, #2
 8008db2:	4413      	add	r3, r2
 8008db4:	881b      	ldrh	r3, [r3, #0]
 8008db6:	b29b      	uxth	r3, r3
 8008db8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008dbc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008dc0:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 8008dc4:	687a      	ldr	r2, [r7, #4]
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	781b      	ldrb	r3, [r3, #0]
 8008dca:	009b      	lsls	r3, r3, #2
 8008dcc:	441a      	add	r2, r3
 8008dce:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8008dd2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008dd6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008dda:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008dde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008de2:	b29b      	uxth	r3, r3
 8008de4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008de6:	687a      	ldr	r2, [r7, #4]
 8008de8:	683b      	ldr	r3, [r7, #0]
 8008dea:	781b      	ldrb	r3, [r3, #0]
 8008dec:	009b      	lsls	r3, r3, #2
 8008dee:	4413      	add	r3, r2
 8008df0:	881b      	ldrh	r3, [r3, #0]
 8008df2:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 8008df6:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8008dfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d01d      	beq.n	8008e3e <USB_ActivateEndpoint+0x596>
 8008e02:	687a      	ldr	r2, [r7, #4]
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	781b      	ldrb	r3, [r3, #0]
 8008e08:	009b      	lsls	r3, r3, #2
 8008e0a:	4413      	add	r3, r2
 8008e0c:	881b      	ldrh	r3, [r3, #0]
 8008e0e:	b29b      	uxth	r3, r3
 8008e10:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008e14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e18:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 8008e1c:	687a      	ldr	r2, [r7, #4]
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	781b      	ldrb	r3, [r3, #0]
 8008e22:	009b      	lsls	r3, r3, #2
 8008e24:	441a      	add	r2, r3
 8008e26:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8008e2a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008e2e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008e32:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008e36:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008e3a:	b29b      	uxth	r3, r3
 8008e3c:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	785b      	ldrb	r3, [r3, #1]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d16b      	bne.n	8008f1e <USB_ActivateEndpoint+0x676>
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008e50:	b29b      	uxth	r3, r3
 8008e52:	461a      	mov	r2, r3
 8008e54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008e56:	4413      	add	r3, r2
 8008e58:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	781b      	ldrb	r3, [r3, #0]
 8008e5e:	00da      	lsls	r2, r3, #3
 8008e60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008e62:	4413      	add	r3, r2
 8008e64:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008e68:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008e6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008e6c:	881b      	ldrh	r3, [r3, #0]
 8008e6e:	b29b      	uxth	r3, r3
 8008e70:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008e74:	b29a      	uxth	r2, r3
 8008e76:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008e78:	801a      	strh	r2, [r3, #0]
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	691b      	ldr	r3, [r3, #16]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d10a      	bne.n	8008e98 <USB_ActivateEndpoint+0x5f0>
 8008e82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008e84:	881b      	ldrh	r3, [r3, #0]
 8008e86:	b29b      	uxth	r3, r3
 8008e88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e90:	b29a      	uxth	r2, r3
 8008e92:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008e94:	801a      	strh	r2, [r3, #0]
 8008e96:	e05d      	b.n	8008f54 <USB_ActivateEndpoint+0x6ac>
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	691b      	ldr	r3, [r3, #16]
 8008e9c:	2b3e      	cmp	r3, #62	@ 0x3e
 8008e9e:	d81c      	bhi.n	8008eda <USB_ActivateEndpoint+0x632>
 8008ea0:	683b      	ldr	r3, [r7, #0]
 8008ea2:	691b      	ldr	r3, [r3, #16]
 8008ea4:	085b      	lsrs	r3, r3, #1
 8008ea6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	691b      	ldr	r3, [r3, #16]
 8008eae:	f003 0301 	and.w	r3, r3, #1
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d004      	beq.n	8008ec0 <USB_ActivateEndpoint+0x618>
 8008eb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008eba:	3301      	adds	r3, #1
 8008ebc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008ec0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008ec2:	881b      	ldrh	r3, [r3, #0]
 8008ec4:	b29a      	uxth	r2, r3
 8008ec6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008eca:	b29b      	uxth	r3, r3
 8008ecc:	029b      	lsls	r3, r3, #10
 8008ece:	b29b      	uxth	r3, r3
 8008ed0:	4313      	orrs	r3, r2
 8008ed2:	b29a      	uxth	r2, r3
 8008ed4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008ed6:	801a      	strh	r2, [r3, #0]
 8008ed8:	e03c      	b.n	8008f54 <USB_ActivateEndpoint+0x6ac>
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	691b      	ldr	r3, [r3, #16]
 8008ede:	095b      	lsrs	r3, r3, #5
 8008ee0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	691b      	ldr	r3, [r3, #16]
 8008ee8:	f003 031f 	and.w	r3, r3, #31
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d104      	bne.n	8008efa <USB_ActivateEndpoint+0x652>
 8008ef0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008ef4:	3b01      	subs	r3, #1
 8008ef6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008efa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008efc:	881b      	ldrh	r3, [r3, #0]
 8008efe:	b29a      	uxth	r2, r3
 8008f00:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008f04:	b29b      	uxth	r3, r3
 8008f06:	029b      	lsls	r3, r3, #10
 8008f08:	b29b      	uxth	r3, r3
 8008f0a:	4313      	orrs	r3, r2
 8008f0c:	b29b      	uxth	r3, r3
 8008f0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f16:	b29a      	uxth	r2, r3
 8008f18:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008f1a:	801a      	strh	r2, [r3, #0]
 8008f1c:	e01a      	b.n	8008f54 <USB_ActivateEndpoint+0x6ac>
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	785b      	ldrb	r3, [r3, #1]
 8008f22:	2b01      	cmp	r3, #1
 8008f24:	d116      	bne.n	8008f54 <USB_ActivateEndpoint+0x6ac>
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	657b      	str	r3, [r7, #84]	@ 0x54
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008f30:	b29b      	uxth	r3, r3
 8008f32:	461a      	mov	r2, r3
 8008f34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008f36:	4413      	add	r3, r2
 8008f38:	657b      	str	r3, [r7, #84]	@ 0x54
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	781b      	ldrb	r3, [r3, #0]
 8008f3e:	00da      	lsls	r2, r3, #3
 8008f40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008f42:	4413      	add	r3, r2
 8008f44:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008f48:	653b      	str	r3, [r7, #80]	@ 0x50
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	691b      	ldr	r3, [r3, #16]
 8008f4e:	b29a      	uxth	r2, r3
 8008f50:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008f52:	801a      	strh	r2, [r3, #0]
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	647b      	str	r3, [r7, #68]	@ 0x44
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	785b      	ldrb	r3, [r3, #1]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d16b      	bne.n	8009038 <USB_ActivateEndpoint+0x790>
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008f6a:	b29b      	uxth	r3, r3
 8008f6c:	461a      	mov	r2, r3
 8008f6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f70:	4413      	add	r3, r2
 8008f72:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	781b      	ldrb	r3, [r3, #0]
 8008f78:	00da      	lsls	r2, r3, #3
 8008f7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f7c:	4413      	add	r3, r2
 8008f7e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008f82:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008f84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f86:	881b      	ldrh	r3, [r3, #0]
 8008f88:	b29b      	uxth	r3, r3
 8008f8a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008f8e:	b29a      	uxth	r2, r3
 8008f90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f92:	801a      	strh	r2, [r3, #0]
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	691b      	ldr	r3, [r3, #16]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d10a      	bne.n	8008fb2 <USB_ActivateEndpoint+0x70a>
 8008f9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f9e:	881b      	ldrh	r3, [r3, #0]
 8008fa0:	b29b      	uxth	r3, r3
 8008fa2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008fa6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008faa:	b29a      	uxth	r2, r3
 8008fac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fae:	801a      	strh	r2, [r3, #0]
 8008fb0:	e05b      	b.n	800906a <USB_ActivateEndpoint+0x7c2>
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	691b      	ldr	r3, [r3, #16]
 8008fb6:	2b3e      	cmp	r3, #62	@ 0x3e
 8008fb8:	d81c      	bhi.n	8008ff4 <USB_ActivateEndpoint+0x74c>
 8008fba:	683b      	ldr	r3, [r7, #0]
 8008fbc:	691b      	ldr	r3, [r3, #16]
 8008fbe:	085b      	lsrs	r3, r3, #1
 8008fc0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	691b      	ldr	r3, [r3, #16]
 8008fc8:	f003 0301 	and.w	r3, r3, #1
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d004      	beq.n	8008fda <USB_ActivateEndpoint+0x732>
 8008fd0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008fd4:	3301      	adds	r3, #1
 8008fd6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008fda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fdc:	881b      	ldrh	r3, [r3, #0]
 8008fde:	b29a      	uxth	r2, r3
 8008fe0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008fe4:	b29b      	uxth	r3, r3
 8008fe6:	029b      	lsls	r3, r3, #10
 8008fe8:	b29b      	uxth	r3, r3
 8008fea:	4313      	orrs	r3, r2
 8008fec:	b29a      	uxth	r2, r3
 8008fee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ff0:	801a      	strh	r2, [r3, #0]
 8008ff2:	e03a      	b.n	800906a <USB_ActivateEndpoint+0x7c2>
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	691b      	ldr	r3, [r3, #16]
 8008ff8:	095b      	lsrs	r3, r3, #5
 8008ffa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008ffe:	683b      	ldr	r3, [r7, #0]
 8009000:	691b      	ldr	r3, [r3, #16]
 8009002:	f003 031f 	and.w	r3, r3, #31
 8009006:	2b00      	cmp	r3, #0
 8009008:	d104      	bne.n	8009014 <USB_ActivateEndpoint+0x76c>
 800900a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800900e:	3b01      	subs	r3, #1
 8009010:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009014:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009016:	881b      	ldrh	r3, [r3, #0]
 8009018:	b29a      	uxth	r2, r3
 800901a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800901e:	b29b      	uxth	r3, r3
 8009020:	029b      	lsls	r3, r3, #10
 8009022:	b29b      	uxth	r3, r3
 8009024:	4313      	orrs	r3, r2
 8009026:	b29b      	uxth	r3, r3
 8009028:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800902c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009030:	b29a      	uxth	r2, r3
 8009032:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009034:	801a      	strh	r2, [r3, #0]
 8009036:	e018      	b.n	800906a <USB_ActivateEndpoint+0x7c2>
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	785b      	ldrb	r3, [r3, #1]
 800903c:	2b01      	cmp	r3, #1
 800903e:	d114      	bne.n	800906a <USB_ActivateEndpoint+0x7c2>
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009046:	b29b      	uxth	r3, r3
 8009048:	461a      	mov	r2, r3
 800904a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800904c:	4413      	add	r3, r2
 800904e:	647b      	str	r3, [r7, #68]	@ 0x44
 8009050:	683b      	ldr	r3, [r7, #0]
 8009052:	781b      	ldrb	r3, [r3, #0]
 8009054:	00da      	lsls	r2, r3, #3
 8009056:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009058:	4413      	add	r3, r2
 800905a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800905e:	643b      	str	r3, [r7, #64]	@ 0x40
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	691b      	ldr	r3, [r3, #16]
 8009064:	b29a      	uxth	r2, r3
 8009066:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009068:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800906a:	687a      	ldr	r2, [r7, #4]
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	781b      	ldrb	r3, [r3, #0]
 8009070:	009b      	lsls	r3, r3, #2
 8009072:	4413      	add	r3, r2
 8009074:	881b      	ldrh	r3, [r3, #0]
 8009076:	b29b      	uxth	r3, r3
 8009078:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800907c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009080:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8009082:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009084:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009088:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800908a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800908c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009090:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8009092:	687a      	ldr	r2, [r7, #4]
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	781b      	ldrb	r3, [r3, #0]
 8009098:	009b      	lsls	r3, r3, #2
 800909a:	441a      	add	r2, r3
 800909c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800909e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80090a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80090a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80090aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80090ae:	b29b      	uxth	r3, r3
 80090b0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80090b2:	687a      	ldr	r2, [r7, #4]
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	781b      	ldrb	r3, [r3, #0]
 80090b8:	009b      	lsls	r3, r3, #2
 80090ba:	4413      	add	r3, r2
 80090bc:	881b      	ldrh	r3, [r3, #0]
 80090be:	b29b      	uxth	r3, r3
 80090c0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80090c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80090c8:	86bb      	strh	r3, [r7, #52]	@ 0x34
 80090ca:	687a      	ldr	r2, [r7, #4]
 80090cc:	683b      	ldr	r3, [r7, #0]
 80090ce:	781b      	ldrb	r3, [r3, #0]
 80090d0:	009b      	lsls	r3, r3, #2
 80090d2:	441a      	add	r2, r3
 80090d4:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80090d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80090da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80090de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80090e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80090e6:	b29b      	uxth	r3, r3
 80090e8:	8013      	strh	r3, [r2, #0]
 80090ea:	e0bc      	b.n	8009266 <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80090ec:	687a      	ldr	r2, [r7, #4]
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	781b      	ldrb	r3, [r3, #0]
 80090f2:	009b      	lsls	r3, r3, #2
 80090f4:	4413      	add	r3, r2
 80090f6:	881b      	ldrh	r3, [r3, #0]
 80090f8:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 80090fc:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8009100:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009104:	2b00      	cmp	r3, #0
 8009106:	d01d      	beq.n	8009144 <USB_ActivateEndpoint+0x89c>
 8009108:	687a      	ldr	r2, [r7, #4]
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	781b      	ldrb	r3, [r3, #0]
 800910e:	009b      	lsls	r3, r3, #2
 8009110:	4413      	add	r3, r2
 8009112:	881b      	ldrh	r3, [r3, #0]
 8009114:	b29b      	uxth	r3, r3
 8009116:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800911a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800911e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 8009122:	687a      	ldr	r2, [r7, #4]
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	781b      	ldrb	r3, [r3, #0]
 8009128:	009b      	lsls	r3, r3, #2
 800912a:	441a      	add	r2, r3
 800912c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8009130:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009134:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009138:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800913c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009140:	b29b      	uxth	r3, r3
 8009142:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009144:	687a      	ldr	r2, [r7, #4]
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	781b      	ldrb	r3, [r3, #0]
 800914a:	009b      	lsls	r3, r3, #2
 800914c:	4413      	add	r3, r2
 800914e:	881b      	ldrh	r3, [r3, #0]
 8009150:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 8009154:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8009158:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800915c:	2b00      	cmp	r3, #0
 800915e:	d01d      	beq.n	800919c <USB_ActivateEndpoint+0x8f4>
 8009160:	687a      	ldr	r2, [r7, #4]
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	781b      	ldrb	r3, [r3, #0]
 8009166:	009b      	lsls	r3, r3, #2
 8009168:	4413      	add	r3, r2
 800916a:	881b      	ldrh	r3, [r3, #0]
 800916c:	b29b      	uxth	r3, r3
 800916e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009172:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009176:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 800917a:	687a      	ldr	r2, [r7, #4]
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	781b      	ldrb	r3, [r3, #0]
 8009180:	009b      	lsls	r3, r3, #2
 8009182:	441a      	add	r2, r3
 8009184:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 8009188:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800918c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009190:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009194:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009198:	b29b      	uxth	r3, r3
 800919a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	78db      	ldrb	r3, [r3, #3]
 80091a0:	2b01      	cmp	r3, #1
 80091a2:	d024      	beq.n	80091ee <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80091a4:	687a      	ldr	r2, [r7, #4]
 80091a6:	683b      	ldr	r3, [r7, #0]
 80091a8:	781b      	ldrb	r3, [r3, #0]
 80091aa:	009b      	lsls	r3, r3, #2
 80091ac:	4413      	add	r3, r2
 80091ae:	881b      	ldrh	r3, [r3, #0]
 80091b0:	b29b      	uxth	r3, r3
 80091b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80091b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80091ba:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80091be:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80091c2:	f083 0320 	eor.w	r3, r3, #32
 80091c6:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80091ca:	687a      	ldr	r2, [r7, #4]
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	781b      	ldrb	r3, [r3, #0]
 80091d0:	009b      	lsls	r3, r3, #2
 80091d2:	441a      	add	r2, r3
 80091d4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80091d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80091dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80091e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80091e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80091e8:	b29b      	uxth	r3, r3
 80091ea:	8013      	strh	r3, [r2, #0]
 80091ec:	e01d      	b.n	800922a <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80091ee:	687a      	ldr	r2, [r7, #4]
 80091f0:	683b      	ldr	r3, [r7, #0]
 80091f2:	781b      	ldrb	r3, [r3, #0]
 80091f4:	009b      	lsls	r3, r3, #2
 80091f6:	4413      	add	r3, r2
 80091f8:	881b      	ldrh	r3, [r3, #0]
 80091fa:	b29b      	uxth	r3, r3
 80091fc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009200:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009204:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8009208:	687a      	ldr	r2, [r7, #4]
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	781b      	ldrb	r3, [r3, #0]
 800920e:	009b      	lsls	r3, r3, #2
 8009210:	441a      	add	r2, r3
 8009212:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8009216:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800921a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800921e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009222:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009226:	b29b      	uxth	r3, r3
 8009228:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800922a:	687a      	ldr	r2, [r7, #4]
 800922c:	683b      	ldr	r3, [r7, #0]
 800922e:	781b      	ldrb	r3, [r3, #0]
 8009230:	009b      	lsls	r3, r3, #2
 8009232:	4413      	add	r3, r2
 8009234:	881b      	ldrh	r3, [r3, #0]
 8009236:	b29b      	uxth	r3, r3
 8009238:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800923c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009240:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8009244:	687a      	ldr	r2, [r7, #4]
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	781b      	ldrb	r3, [r3, #0]
 800924a:	009b      	lsls	r3, r3, #2
 800924c:	441a      	add	r2, r3
 800924e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8009252:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009256:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800925a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800925e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009262:	b29b      	uxth	r3, r3
 8009264:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8009266:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 800926a:	4618      	mov	r0, r3
 800926c:	379c      	adds	r7, #156	@ 0x9c
 800926e:	46bd      	mov	sp, r7
 8009270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009274:	4770      	bx	lr
 8009276:	bf00      	nop

08009278 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009278:	b480      	push	{r7}
 800927a:	b08d      	sub	sp, #52	@ 0x34
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
 8009280:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	7b1b      	ldrb	r3, [r3, #12]
 8009286:	2b00      	cmp	r3, #0
 8009288:	f040 808e 	bne.w	80093a8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800928c:	683b      	ldr	r3, [r7, #0]
 800928e:	785b      	ldrb	r3, [r3, #1]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d044      	beq.n	800931e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009294:	687a      	ldr	r2, [r7, #4]
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	781b      	ldrb	r3, [r3, #0]
 800929a:	009b      	lsls	r3, r3, #2
 800929c:	4413      	add	r3, r2
 800929e:	881b      	ldrh	r3, [r3, #0]
 80092a0:	81bb      	strh	r3, [r7, #12]
 80092a2:	89bb      	ldrh	r3, [r7, #12]
 80092a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d01b      	beq.n	80092e4 <USB_DeactivateEndpoint+0x6c>
 80092ac:	687a      	ldr	r2, [r7, #4]
 80092ae:	683b      	ldr	r3, [r7, #0]
 80092b0:	781b      	ldrb	r3, [r3, #0]
 80092b2:	009b      	lsls	r3, r3, #2
 80092b4:	4413      	add	r3, r2
 80092b6:	881b      	ldrh	r3, [r3, #0]
 80092b8:	b29b      	uxth	r3, r3
 80092ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80092be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80092c2:	817b      	strh	r3, [r7, #10]
 80092c4:	687a      	ldr	r2, [r7, #4]
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	781b      	ldrb	r3, [r3, #0]
 80092ca:	009b      	lsls	r3, r3, #2
 80092cc:	441a      	add	r2, r3
 80092ce:	897b      	ldrh	r3, [r7, #10]
 80092d0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80092d4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80092d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80092dc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80092e0:	b29b      	uxth	r3, r3
 80092e2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80092e4:	687a      	ldr	r2, [r7, #4]
 80092e6:	683b      	ldr	r3, [r7, #0]
 80092e8:	781b      	ldrb	r3, [r3, #0]
 80092ea:	009b      	lsls	r3, r3, #2
 80092ec:	4413      	add	r3, r2
 80092ee:	881b      	ldrh	r3, [r3, #0]
 80092f0:	b29b      	uxth	r3, r3
 80092f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80092f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80092fa:	813b      	strh	r3, [r7, #8]
 80092fc:	687a      	ldr	r2, [r7, #4]
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	781b      	ldrb	r3, [r3, #0]
 8009302:	009b      	lsls	r3, r3, #2
 8009304:	441a      	add	r2, r3
 8009306:	893b      	ldrh	r3, [r7, #8]
 8009308:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800930c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009310:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009314:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009318:	b29b      	uxth	r3, r3
 800931a:	8013      	strh	r3, [r2, #0]
 800931c:	e192      	b.n	8009644 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800931e:	687a      	ldr	r2, [r7, #4]
 8009320:	683b      	ldr	r3, [r7, #0]
 8009322:	781b      	ldrb	r3, [r3, #0]
 8009324:	009b      	lsls	r3, r3, #2
 8009326:	4413      	add	r3, r2
 8009328:	881b      	ldrh	r3, [r3, #0]
 800932a:	827b      	strh	r3, [r7, #18]
 800932c:	8a7b      	ldrh	r3, [r7, #18]
 800932e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009332:	2b00      	cmp	r3, #0
 8009334:	d01b      	beq.n	800936e <USB_DeactivateEndpoint+0xf6>
 8009336:	687a      	ldr	r2, [r7, #4]
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	781b      	ldrb	r3, [r3, #0]
 800933c:	009b      	lsls	r3, r3, #2
 800933e:	4413      	add	r3, r2
 8009340:	881b      	ldrh	r3, [r3, #0]
 8009342:	b29b      	uxth	r3, r3
 8009344:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009348:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800934c:	823b      	strh	r3, [r7, #16]
 800934e:	687a      	ldr	r2, [r7, #4]
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	781b      	ldrb	r3, [r3, #0]
 8009354:	009b      	lsls	r3, r3, #2
 8009356:	441a      	add	r2, r3
 8009358:	8a3b      	ldrh	r3, [r7, #16]
 800935a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800935e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009362:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009366:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800936a:	b29b      	uxth	r3, r3
 800936c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800936e:	687a      	ldr	r2, [r7, #4]
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	781b      	ldrb	r3, [r3, #0]
 8009374:	009b      	lsls	r3, r3, #2
 8009376:	4413      	add	r3, r2
 8009378:	881b      	ldrh	r3, [r3, #0]
 800937a:	b29b      	uxth	r3, r3
 800937c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009380:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009384:	81fb      	strh	r3, [r7, #14]
 8009386:	687a      	ldr	r2, [r7, #4]
 8009388:	683b      	ldr	r3, [r7, #0]
 800938a:	781b      	ldrb	r3, [r3, #0]
 800938c:	009b      	lsls	r3, r3, #2
 800938e:	441a      	add	r2, r3
 8009390:	89fb      	ldrh	r3, [r7, #14]
 8009392:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009396:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800939a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800939e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80093a2:	b29b      	uxth	r3, r3
 80093a4:	8013      	strh	r3, [r2, #0]
 80093a6:	e14d      	b.n	8009644 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	785b      	ldrb	r3, [r3, #1]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	f040 80a5 	bne.w	80094fc <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80093b2:	687a      	ldr	r2, [r7, #4]
 80093b4:	683b      	ldr	r3, [r7, #0]
 80093b6:	781b      	ldrb	r3, [r3, #0]
 80093b8:	009b      	lsls	r3, r3, #2
 80093ba:	4413      	add	r3, r2
 80093bc:	881b      	ldrh	r3, [r3, #0]
 80093be:	843b      	strh	r3, [r7, #32]
 80093c0:	8c3b      	ldrh	r3, [r7, #32]
 80093c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d01b      	beq.n	8009402 <USB_DeactivateEndpoint+0x18a>
 80093ca:	687a      	ldr	r2, [r7, #4]
 80093cc:	683b      	ldr	r3, [r7, #0]
 80093ce:	781b      	ldrb	r3, [r3, #0]
 80093d0:	009b      	lsls	r3, r3, #2
 80093d2:	4413      	add	r3, r2
 80093d4:	881b      	ldrh	r3, [r3, #0]
 80093d6:	b29b      	uxth	r3, r3
 80093d8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80093dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80093e0:	83fb      	strh	r3, [r7, #30]
 80093e2:	687a      	ldr	r2, [r7, #4]
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	781b      	ldrb	r3, [r3, #0]
 80093e8:	009b      	lsls	r3, r3, #2
 80093ea:	441a      	add	r2, r3
 80093ec:	8bfb      	ldrh	r3, [r7, #30]
 80093ee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80093f2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80093f6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80093fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80093fe:	b29b      	uxth	r3, r3
 8009400:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009402:	687a      	ldr	r2, [r7, #4]
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	781b      	ldrb	r3, [r3, #0]
 8009408:	009b      	lsls	r3, r3, #2
 800940a:	4413      	add	r3, r2
 800940c:	881b      	ldrh	r3, [r3, #0]
 800940e:	83bb      	strh	r3, [r7, #28]
 8009410:	8bbb      	ldrh	r3, [r7, #28]
 8009412:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009416:	2b00      	cmp	r3, #0
 8009418:	d01b      	beq.n	8009452 <USB_DeactivateEndpoint+0x1da>
 800941a:	687a      	ldr	r2, [r7, #4]
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	781b      	ldrb	r3, [r3, #0]
 8009420:	009b      	lsls	r3, r3, #2
 8009422:	4413      	add	r3, r2
 8009424:	881b      	ldrh	r3, [r3, #0]
 8009426:	b29b      	uxth	r3, r3
 8009428:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800942c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009430:	837b      	strh	r3, [r7, #26]
 8009432:	687a      	ldr	r2, [r7, #4]
 8009434:	683b      	ldr	r3, [r7, #0]
 8009436:	781b      	ldrb	r3, [r3, #0]
 8009438:	009b      	lsls	r3, r3, #2
 800943a:	441a      	add	r2, r3
 800943c:	8b7b      	ldrh	r3, [r7, #26]
 800943e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009442:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009446:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800944a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800944e:	b29b      	uxth	r3, r3
 8009450:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8009452:	687a      	ldr	r2, [r7, #4]
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	781b      	ldrb	r3, [r3, #0]
 8009458:	009b      	lsls	r3, r3, #2
 800945a:	4413      	add	r3, r2
 800945c:	881b      	ldrh	r3, [r3, #0]
 800945e:	b29b      	uxth	r3, r3
 8009460:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009464:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009468:	833b      	strh	r3, [r7, #24]
 800946a:	687a      	ldr	r2, [r7, #4]
 800946c:	683b      	ldr	r3, [r7, #0]
 800946e:	781b      	ldrb	r3, [r3, #0]
 8009470:	009b      	lsls	r3, r3, #2
 8009472:	441a      	add	r2, r3
 8009474:	8b3b      	ldrh	r3, [r7, #24]
 8009476:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800947a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800947e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009482:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009486:	b29b      	uxth	r3, r3
 8009488:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800948a:	687a      	ldr	r2, [r7, #4]
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	781b      	ldrb	r3, [r3, #0]
 8009490:	009b      	lsls	r3, r3, #2
 8009492:	4413      	add	r3, r2
 8009494:	881b      	ldrh	r3, [r3, #0]
 8009496:	b29b      	uxth	r3, r3
 8009498:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800949c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80094a0:	82fb      	strh	r3, [r7, #22]
 80094a2:	687a      	ldr	r2, [r7, #4]
 80094a4:	683b      	ldr	r3, [r7, #0]
 80094a6:	781b      	ldrb	r3, [r3, #0]
 80094a8:	009b      	lsls	r3, r3, #2
 80094aa:	441a      	add	r2, r3
 80094ac:	8afb      	ldrh	r3, [r7, #22]
 80094ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80094b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80094b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80094ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80094be:	b29b      	uxth	r3, r3
 80094c0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80094c2:	687a      	ldr	r2, [r7, #4]
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	781b      	ldrb	r3, [r3, #0]
 80094c8:	009b      	lsls	r3, r3, #2
 80094ca:	4413      	add	r3, r2
 80094cc:	881b      	ldrh	r3, [r3, #0]
 80094ce:	b29b      	uxth	r3, r3
 80094d0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80094d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80094d8:	82bb      	strh	r3, [r7, #20]
 80094da:	687a      	ldr	r2, [r7, #4]
 80094dc:	683b      	ldr	r3, [r7, #0]
 80094de:	781b      	ldrb	r3, [r3, #0]
 80094e0:	009b      	lsls	r3, r3, #2
 80094e2:	441a      	add	r2, r3
 80094e4:	8abb      	ldrh	r3, [r7, #20]
 80094e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80094ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80094ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80094f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80094f6:	b29b      	uxth	r3, r3
 80094f8:	8013      	strh	r3, [r2, #0]
 80094fa:	e0a3      	b.n	8009644 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80094fc:	687a      	ldr	r2, [r7, #4]
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	781b      	ldrb	r3, [r3, #0]
 8009502:	009b      	lsls	r3, r3, #2
 8009504:	4413      	add	r3, r2
 8009506:	881b      	ldrh	r3, [r3, #0]
 8009508:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800950a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800950c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009510:	2b00      	cmp	r3, #0
 8009512:	d01b      	beq.n	800954c <USB_DeactivateEndpoint+0x2d4>
 8009514:	687a      	ldr	r2, [r7, #4]
 8009516:	683b      	ldr	r3, [r7, #0]
 8009518:	781b      	ldrb	r3, [r3, #0]
 800951a:	009b      	lsls	r3, r3, #2
 800951c:	4413      	add	r3, r2
 800951e:	881b      	ldrh	r3, [r3, #0]
 8009520:	b29b      	uxth	r3, r3
 8009522:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009526:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800952a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800952c:	687a      	ldr	r2, [r7, #4]
 800952e:	683b      	ldr	r3, [r7, #0]
 8009530:	781b      	ldrb	r3, [r3, #0]
 8009532:	009b      	lsls	r3, r3, #2
 8009534:	441a      	add	r2, r3
 8009536:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8009538:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800953c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009540:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009544:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009548:	b29b      	uxth	r3, r3
 800954a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800954c:	687a      	ldr	r2, [r7, #4]
 800954e:	683b      	ldr	r3, [r7, #0]
 8009550:	781b      	ldrb	r3, [r3, #0]
 8009552:	009b      	lsls	r3, r3, #2
 8009554:	4413      	add	r3, r2
 8009556:	881b      	ldrh	r3, [r3, #0]
 8009558:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800955a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800955c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009560:	2b00      	cmp	r3, #0
 8009562:	d01b      	beq.n	800959c <USB_DeactivateEndpoint+0x324>
 8009564:	687a      	ldr	r2, [r7, #4]
 8009566:	683b      	ldr	r3, [r7, #0]
 8009568:	781b      	ldrb	r3, [r3, #0]
 800956a:	009b      	lsls	r3, r3, #2
 800956c:	4413      	add	r3, r2
 800956e:	881b      	ldrh	r3, [r3, #0]
 8009570:	b29b      	uxth	r3, r3
 8009572:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009576:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800957a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800957c:	687a      	ldr	r2, [r7, #4]
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	781b      	ldrb	r3, [r3, #0]
 8009582:	009b      	lsls	r3, r3, #2
 8009584:	441a      	add	r2, r3
 8009586:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009588:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800958c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009590:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009594:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009598:	b29b      	uxth	r3, r3
 800959a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800959c:	687a      	ldr	r2, [r7, #4]
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	781b      	ldrb	r3, [r3, #0]
 80095a2:	009b      	lsls	r3, r3, #2
 80095a4:	4413      	add	r3, r2
 80095a6:	881b      	ldrh	r3, [r3, #0]
 80095a8:	b29b      	uxth	r3, r3
 80095aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80095ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80095b2:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80095b4:	687a      	ldr	r2, [r7, #4]
 80095b6:	683b      	ldr	r3, [r7, #0]
 80095b8:	781b      	ldrb	r3, [r3, #0]
 80095ba:	009b      	lsls	r3, r3, #2
 80095bc:	441a      	add	r2, r3
 80095be:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80095c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80095c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80095c8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80095cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80095d0:	b29b      	uxth	r3, r3
 80095d2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80095d4:	687a      	ldr	r2, [r7, #4]
 80095d6:	683b      	ldr	r3, [r7, #0]
 80095d8:	781b      	ldrb	r3, [r3, #0]
 80095da:	009b      	lsls	r3, r3, #2
 80095dc:	4413      	add	r3, r2
 80095de:	881b      	ldrh	r3, [r3, #0]
 80095e0:	b29b      	uxth	r3, r3
 80095e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80095e6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80095ea:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80095ec:	687a      	ldr	r2, [r7, #4]
 80095ee:	683b      	ldr	r3, [r7, #0]
 80095f0:	781b      	ldrb	r3, [r3, #0]
 80095f2:	009b      	lsls	r3, r3, #2
 80095f4:	441a      	add	r2, r3
 80095f6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80095f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80095fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009600:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009604:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009608:	b29b      	uxth	r3, r3
 800960a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800960c:	687a      	ldr	r2, [r7, #4]
 800960e:	683b      	ldr	r3, [r7, #0]
 8009610:	781b      	ldrb	r3, [r3, #0]
 8009612:	009b      	lsls	r3, r3, #2
 8009614:	4413      	add	r3, r2
 8009616:	881b      	ldrh	r3, [r3, #0]
 8009618:	b29b      	uxth	r3, r3
 800961a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800961e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009622:	847b      	strh	r3, [r7, #34]	@ 0x22
 8009624:	687a      	ldr	r2, [r7, #4]
 8009626:	683b      	ldr	r3, [r7, #0]
 8009628:	781b      	ldrb	r3, [r3, #0]
 800962a:	009b      	lsls	r3, r3, #2
 800962c:	441a      	add	r2, r3
 800962e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009630:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009634:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009638:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800963c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009640:	b29b      	uxth	r3, r3
 8009642:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8009644:	2300      	movs	r3, #0
}
 8009646:	4618      	mov	r0, r3
 8009648:	3734      	adds	r7, #52	@ 0x34
 800964a:	46bd      	mov	sp, r7
 800964c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009650:	4770      	bx	lr

08009652 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009652:	b580      	push	{r7, lr}
 8009654:	b0ac      	sub	sp, #176	@ 0xb0
 8009656:	af00      	add	r7, sp, #0
 8009658:	6078      	str	r0, [r7, #4]
 800965a:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800965c:	683b      	ldr	r3, [r7, #0]
 800965e:	785b      	ldrb	r3, [r3, #1]
 8009660:	2b01      	cmp	r3, #1
 8009662:	f040 84ca 	bne.w	8009ffa <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 8009666:	683b      	ldr	r3, [r7, #0]
 8009668:	699a      	ldr	r2, [r3, #24]
 800966a:	683b      	ldr	r3, [r7, #0]
 800966c:	691b      	ldr	r3, [r3, #16]
 800966e:	429a      	cmp	r2, r3
 8009670:	d904      	bls.n	800967c <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	691b      	ldr	r3, [r3, #16]
 8009676:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800967a:	e003      	b.n	8009684 <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 800967c:	683b      	ldr	r3, [r7, #0]
 800967e:	699b      	ldr	r3, [r3, #24]
 8009680:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	7b1b      	ldrb	r3, [r3, #12]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d122      	bne.n	80096d2 <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800968c:	683b      	ldr	r3, [r7, #0]
 800968e:	6959      	ldr	r1, [r3, #20]
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	88da      	ldrh	r2, [r3, #6]
 8009694:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009698:	b29b      	uxth	r3, r3
 800969a:	6878      	ldr	r0, [r7, #4]
 800969c:	f000 febd 	bl	800a41a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	613b      	str	r3, [r7, #16]
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80096aa:	b29b      	uxth	r3, r3
 80096ac:	461a      	mov	r2, r3
 80096ae:	693b      	ldr	r3, [r7, #16]
 80096b0:	4413      	add	r3, r2
 80096b2:	613b      	str	r3, [r7, #16]
 80096b4:	683b      	ldr	r3, [r7, #0]
 80096b6:	781b      	ldrb	r3, [r3, #0]
 80096b8:	00da      	lsls	r2, r3, #3
 80096ba:	693b      	ldr	r3, [r7, #16]
 80096bc:	4413      	add	r3, r2
 80096be:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80096c2:	60fb      	str	r3, [r7, #12]
 80096c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80096c8:	b29a      	uxth	r2, r3
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	801a      	strh	r2, [r3, #0]
 80096ce:	f000 bc6f 	b.w	8009fb0 <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80096d2:	683b      	ldr	r3, [r7, #0]
 80096d4:	78db      	ldrb	r3, [r3, #3]
 80096d6:	2b02      	cmp	r3, #2
 80096d8:	f040 831e 	bne.w	8009d18 <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	6a1a      	ldr	r2, [r3, #32]
 80096e0:	683b      	ldr	r3, [r7, #0]
 80096e2:	691b      	ldr	r3, [r3, #16]
 80096e4:	429a      	cmp	r2, r3
 80096e6:	f240 82cf 	bls.w	8009c88 <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80096ea:	687a      	ldr	r2, [r7, #4]
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	781b      	ldrb	r3, [r3, #0]
 80096f0:	009b      	lsls	r3, r3, #2
 80096f2:	4413      	add	r3, r2
 80096f4:	881b      	ldrh	r3, [r3, #0]
 80096f6:	b29b      	uxth	r3, r3
 80096f8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80096fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009700:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8009704:	687a      	ldr	r2, [r7, #4]
 8009706:	683b      	ldr	r3, [r7, #0]
 8009708:	781b      	ldrb	r3, [r3, #0]
 800970a:	009b      	lsls	r3, r3, #2
 800970c:	441a      	add	r2, r3
 800970e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8009712:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009716:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800971a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800971e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009722:	b29b      	uxth	r3, r3
 8009724:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	6a1a      	ldr	r2, [r3, #32]
 800972a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800972e:	1ad2      	subs	r2, r2, r3
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009734:	687a      	ldr	r2, [r7, #4]
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	781b      	ldrb	r3, [r3, #0]
 800973a:	009b      	lsls	r3, r3, #2
 800973c:	4413      	add	r3, r2
 800973e:	881b      	ldrh	r3, [r3, #0]
 8009740:	b29b      	uxth	r3, r3
 8009742:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009746:	2b00      	cmp	r3, #0
 8009748:	f000 814f 	beq.w	80099ea <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	785b      	ldrb	r3, [r3, #1]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d16b      	bne.n	8009830 <USB_EPStartXfer+0x1de>
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009762:	b29b      	uxth	r3, r3
 8009764:	461a      	mov	r2, r3
 8009766:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009768:	4413      	add	r3, r2
 800976a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	781b      	ldrb	r3, [r3, #0]
 8009770:	00da      	lsls	r2, r3, #3
 8009772:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009774:	4413      	add	r3, r2
 8009776:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800977a:	627b      	str	r3, [r7, #36]	@ 0x24
 800977c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800977e:	881b      	ldrh	r3, [r3, #0]
 8009780:	b29b      	uxth	r3, r3
 8009782:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009786:	b29a      	uxth	r2, r3
 8009788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800978a:	801a      	strh	r2, [r3, #0]
 800978c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009790:	2b00      	cmp	r3, #0
 8009792:	d10a      	bne.n	80097aa <USB_EPStartXfer+0x158>
 8009794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009796:	881b      	ldrh	r3, [r3, #0]
 8009798:	b29b      	uxth	r3, r3
 800979a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800979e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80097a2:	b29a      	uxth	r2, r3
 80097a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097a6:	801a      	strh	r2, [r3, #0]
 80097a8:	e05b      	b.n	8009862 <USB_EPStartXfer+0x210>
 80097aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80097ae:	2b3e      	cmp	r3, #62	@ 0x3e
 80097b0:	d81c      	bhi.n	80097ec <USB_EPStartXfer+0x19a>
 80097b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80097b6:	085b      	lsrs	r3, r3, #1
 80097b8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80097bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80097c0:	f003 0301 	and.w	r3, r3, #1
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d004      	beq.n	80097d2 <USB_EPStartXfer+0x180>
 80097c8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80097cc:	3301      	adds	r3, #1
 80097ce:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80097d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097d4:	881b      	ldrh	r3, [r3, #0]
 80097d6:	b29a      	uxth	r2, r3
 80097d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80097dc:	b29b      	uxth	r3, r3
 80097de:	029b      	lsls	r3, r3, #10
 80097e0:	b29b      	uxth	r3, r3
 80097e2:	4313      	orrs	r3, r2
 80097e4:	b29a      	uxth	r2, r3
 80097e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097e8:	801a      	strh	r2, [r3, #0]
 80097ea:	e03a      	b.n	8009862 <USB_EPStartXfer+0x210>
 80097ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80097f0:	095b      	lsrs	r3, r3, #5
 80097f2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80097f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80097fa:	f003 031f 	and.w	r3, r3, #31
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d104      	bne.n	800980c <USB_EPStartXfer+0x1ba>
 8009802:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009806:	3b01      	subs	r3, #1
 8009808:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800980c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800980e:	881b      	ldrh	r3, [r3, #0]
 8009810:	b29a      	uxth	r2, r3
 8009812:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009816:	b29b      	uxth	r3, r3
 8009818:	029b      	lsls	r3, r3, #10
 800981a:	b29b      	uxth	r3, r3
 800981c:	4313      	orrs	r3, r2
 800981e:	b29b      	uxth	r3, r3
 8009820:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009824:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009828:	b29a      	uxth	r2, r3
 800982a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800982c:	801a      	strh	r2, [r3, #0]
 800982e:	e018      	b.n	8009862 <USB_EPStartXfer+0x210>
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	785b      	ldrb	r3, [r3, #1]
 8009834:	2b01      	cmp	r3, #1
 8009836:	d114      	bne.n	8009862 <USB_EPStartXfer+0x210>
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800983e:	b29b      	uxth	r3, r3
 8009840:	461a      	mov	r2, r3
 8009842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009844:	4413      	add	r3, r2
 8009846:	633b      	str	r3, [r7, #48]	@ 0x30
 8009848:	683b      	ldr	r3, [r7, #0]
 800984a:	781b      	ldrb	r3, [r3, #0]
 800984c:	00da      	lsls	r2, r3, #3
 800984e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009850:	4413      	add	r3, r2
 8009852:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009856:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009858:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800985c:	b29a      	uxth	r2, r3
 800985e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009860:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009862:	683b      	ldr	r3, [r7, #0]
 8009864:	895b      	ldrh	r3, [r3, #10]
 8009866:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	6959      	ldr	r1, [r3, #20]
 800986e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009872:	b29b      	uxth	r3, r3
 8009874:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009878:	6878      	ldr	r0, [r7, #4]
 800987a:	f000 fdce 	bl	800a41a <USB_WritePMA>
            ep->xfer_buff += len;
 800987e:	683b      	ldr	r3, [r7, #0]
 8009880:	695a      	ldr	r2, [r3, #20]
 8009882:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009886:	441a      	add	r2, r3
 8009888:	683b      	ldr	r3, [r7, #0]
 800988a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800988c:	683b      	ldr	r3, [r7, #0]
 800988e:	6a1a      	ldr	r2, [r3, #32]
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	691b      	ldr	r3, [r3, #16]
 8009894:	429a      	cmp	r2, r3
 8009896:	d907      	bls.n	80098a8 <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	6a1a      	ldr	r2, [r3, #32]
 800989c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80098a0:	1ad2      	subs	r2, r2, r3
 80098a2:	683b      	ldr	r3, [r7, #0]
 80098a4:	621a      	str	r2, [r3, #32]
 80098a6:	e006      	b.n	80098b6 <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	6a1b      	ldr	r3, [r3, #32]
 80098ac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 80098b0:	683b      	ldr	r3, [r7, #0]
 80098b2:	2200      	movs	r2, #0
 80098b4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80098b6:	683b      	ldr	r3, [r7, #0]
 80098b8:	785b      	ldrb	r3, [r3, #1]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d16b      	bne.n	8009996 <USB_EPStartXfer+0x344>
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	61bb      	str	r3, [r7, #24]
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80098c8:	b29b      	uxth	r3, r3
 80098ca:	461a      	mov	r2, r3
 80098cc:	69bb      	ldr	r3, [r7, #24]
 80098ce:	4413      	add	r3, r2
 80098d0:	61bb      	str	r3, [r7, #24]
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	781b      	ldrb	r3, [r3, #0]
 80098d6:	00da      	lsls	r2, r3, #3
 80098d8:	69bb      	ldr	r3, [r7, #24]
 80098da:	4413      	add	r3, r2
 80098dc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80098e0:	617b      	str	r3, [r7, #20]
 80098e2:	697b      	ldr	r3, [r7, #20]
 80098e4:	881b      	ldrh	r3, [r3, #0]
 80098e6:	b29b      	uxth	r3, r3
 80098e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80098ec:	b29a      	uxth	r2, r3
 80098ee:	697b      	ldr	r3, [r7, #20]
 80098f0:	801a      	strh	r2, [r3, #0]
 80098f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d10a      	bne.n	8009910 <USB_EPStartXfer+0x2be>
 80098fa:	697b      	ldr	r3, [r7, #20]
 80098fc:	881b      	ldrh	r3, [r3, #0]
 80098fe:	b29b      	uxth	r3, r3
 8009900:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009904:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009908:	b29a      	uxth	r2, r3
 800990a:	697b      	ldr	r3, [r7, #20]
 800990c:	801a      	strh	r2, [r3, #0]
 800990e:	e05d      	b.n	80099cc <USB_EPStartXfer+0x37a>
 8009910:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009914:	2b3e      	cmp	r3, #62	@ 0x3e
 8009916:	d81c      	bhi.n	8009952 <USB_EPStartXfer+0x300>
 8009918:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800991c:	085b      	lsrs	r3, r3, #1
 800991e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009922:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009926:	f003 0301 	and.w	r3, r3, #1
 800992a:	2b00      	cmp	r3, #0
 800992c:	d004      	beq.n	8009938 <USB_EPStartXfer+0x2e6>
 800992e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009932:	3301      	adds	r3, #1
 8009934:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009938:	697b      	ldr	r3, [r7, #20]
 800993a:	881b      	ldrh	r3, [r3, #0]
 800993c:	b29a      	uxth	r2, r3
 800993e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009942:	b29b      	uxth	r3, r3
 8009944:	029b      	lsls	r3, r3, #10
 8009946:	b29b      	uxth	r3, r3
 8009948:	4313      	orrs	r3, r2
 800994a:	b29a      	uxth	r2, r3
 800994c:	697b      	ldr	r3, [r7, #20]
 800994e:	801a      	strh	r2, [r3, #0]
 8009950:	e03c      	b.n	80099cc <USB_EPStartXfer+0x37a>
 8009952:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009956:	095b      	lsrs	r3, r3, #5
 8009958:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800995c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009960:	f003 031f 	and.w	r3, r3, #31
 8009964:	2b00      	cmp	r3, #0
 8009966:	d104      	bne.n	8009972 <USB_EPStartXfer+0x320>
 8009968:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800996c:	3b01      	subs	r3, #1
 800996e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009972:	697b      	ldr	r3, [r7, #20]
 8009974:	881b      	ldrh	r3, [r3, #0]
 8009976:	b29a      	uxth	r2, r3
 8009978:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800997c:	b29b      	uxth	r3, r3
 800997e:	029b      	lsls	r3, r3, #10
 8009980:	b29b      	uxth	r3, r3
 8009982:	4313      	orrs	r3, r2
 8009984:	b29b      	uxth	r3, r3
 8009986:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800998a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800998e:	b29a      	uxth	r2, r3
 8009990:	697b      	ldr	r3, [r7, #20]
 8009992:	801a      	strh	r2, [r3, #0]
 8009994:	e01a      	b.n	80099cc <USB_EPStartXfer+0x37a>
 8009996:	683b      	ldr	r3, [r7, #0]
 8009998:	785b      	ldrb	r3, [r3, #1]
 800999a:	2b01      	cmp	r3, #1
 800999c:	d116      	bne.n	80099cc <USB_EPStartXfer+0x37a>
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	623b      	str	r3, [r7, #32]
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80099a8:	b29b      	uxth	r3, r3
 80099aa:	461a      	mov	r2, r3
 80099ac:	6a3b      	ldr	r3, [r7, #32]
 80099ae:	4413      	add	r3, r2
 80099b0:	623b      	str	r3, [r7, #32]
 80099b2:	683b      	ldr	r3, [r7, #0]
 80099b4:	781b      	ldrb	r3, [r3, #0]
 80099b6:	00da      	lsls	r2, r3, #3
 80099b8:	6a3b      	ldr	r3, [r7, #32]
 80099ba:	4413      	add	r3, r2
 80099bc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80099c0:	61fb      	str	r3, [r7, #28]
 80099c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80099c6:	b29a      	uxth	r2, r3
 80099c8:	69fb      	ldr	r3, [r7, #28]
 80099ca:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80099cc:	683b      	ldr	r3, [r7, #0]
 80099ce:	891b      	ldrh	r3, [r3, #8]
 80099d0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80099d4:	683b      	ldr	r3, [r7, #0]
 80099d6:	6959      	ldr	r1, [r3, #20]
 80099d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80099dc:	b29b      	uxth	r3, r3
 80099de:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80099e2:	6878      	ldr	r0, [r7, #4]
 80099e4:	f000 fd19 	bl	800a41a <USB_WritePMA>
 80099e8:	e2e2      	b.n	8009fb0 <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80099ea:	683b      	ldr	r3, [r7, #0]
 80099ec:	785b      	ldrb	r3, [r3, #1]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d16b      	bne.n	8009aca <USB_EPStartXfer+0x478>
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80099fc:	b29b      	uxth	r3, r3
 80099fe:	461a      	mov	r2, r3
 8009a00:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009a02:	4413      	add	r3, r2
 8009a04:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009a06:	683b      	ldr	r3, [r7, #0]
 8009a08:	781b      	ldrb	r3, [r3, #0]
 8009a0a:	00da      	lsls	r2, r3, #3
 8009a0c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009a0e:	4413      	add	r3, r2
 8009a10:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009a14:	647b      	str	r3, [r7, #68]	@ 0x44
 8009a16:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009a18:	881b      	ldrh	r3, [r3, #0]
 8009a1a:	b29b      	uxth	r3, r3
 8009a1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009a20:	b29a      	uxth	r2, r3
 8009a22:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009a24:	801a      	strh	r2, [r3, #0]
 8009a26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d10a      	bne.n	8009a44 <USB_EPStartXfer+0x3f2>
 8009a2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009a30:	881b      	ldrh	r3, [r3, #0]
 8009a32:	b29b      	uxth	r3, r3
 8009a34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a3c:	b29a      	uxth	r2, r3
 8009a3e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009a40:	801a      	strh	r2, [r3, #0]
 8009a42:	e05d      	b.n	8009b00 <USB_EPStartXfer+0x4ae>
 8009a44:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009a48:	2b3e      	cmp	r3, #62	@ 0x3e
 8009a4a:	d81c      	bhi.n	8009a86 <USB_EPStartXfer+0x434>
 8009a4c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009a50:	085b      	lsrs	r3, r3, #1
 8009a52:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009a56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009a5a:	f003 0301 	and.w	r3, r3, #1
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d004      	beq.n	8009a6c <USB_EPStartXfer+0x41a>
 8009a62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009a66:	3301      	adds	r3, #1
 8009a68:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009a6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009a6e:	881b      	ldrh	r3, [r3, #0]
 8009a70:	b29a      	uxth	r2, r3
 8009a72:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009a76:	b29b      	uxth	r3, r3
 8009a78:	029b      	lsls	r3, r3, #10
 8009a7a:	b29b      	uxth	r3, r3
 8009a7c:	4313      	orrs	r3, r2
 8009a7e:	b29a      	uxth	r2, r3
 8009a80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009a82:	801a      	strh	r2, [r3, #0]
 8009a84:	e03c      	b.n	8009b00 <USB_EPStartXfer+0x4ae>
 8009a86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009a8a:	095b      	lsrs	r3, r3, #5
 8009a8c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009a90:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009a94:	f003 031f 	and.w	r3, r3, #31
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d104      	bne.n	8009aa6 <USB_EPStartXfer+0x454>
 8009a9c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009aa0:	3b01      	subs	r3, #1
 8009aa2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009aa6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009aa8:	881b      	ldrh	r3, [r3, #0]
 8009aaa:	b29a      	uxth	r2, r3
 8009aac:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009ab0:	b29b      	uxth	r3, r3
 8009ab2:	029b      	lsls	r3, r3, #10
 8009ab4:	b29b      	uxth	r3, r3
 8009ab6:	4313      	orrs	r3, r2
 8009ab8:	b29b      	uxth	r3, r3
 8009aba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009abe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009ac2:	b29a      	uxth	r2, r3
 8009ac4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009ac6:	801a      	strh	r2, [r3, #0]
 8009ac8:	e01a      	b.n	8009b00 <USB_EPStartXfer+0x4ae>
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	785b      	ldrb	r3, [r3, #1]
 8009ace:	2b01      	cmp	r3, #1
 8009ad0:	d116      	bne.n	8009b00 <USB_EPStartXfer+0x4ae>
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	653b      	str	r3, [r7, #80]	@ 0x50
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009adc:	b29b      	uxth	r3, r3
 8009ade:	461a      	mov	r2, r3
 8009ae0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009ae2:	4413      	add	r3, r2
 8009ae4:	653b      	str	r3, [r7, #80]	@ 0x50
 8009ae6:	683b      	ldr	r3, [r7, #0]
 8009ae8:	781b      	ldrb	r3, [r3, #0]
 8009aea:	00da      	lsls	r2, r3, #3
 8009aec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009aee:	4413      	add	r3, r2
 8009af0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009af4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009af6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009afa:	b29a      	uxth	r2, r3
 8009afc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009afe:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009b00:	683b      	ldr	r3, [r7, #0]
 8009b02:	891b      	ldrh	r3, [r3, #8]
 8009b04:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009b08:	683b      	ldr	r3, [r7, #0]
 8009b0a:	6959      	ldr	r1, [r3, #20]
 8009b0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009b10:	b29b      	uxth	r3, r3
 8009b12:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009b16:	6878      	ldr	r0, [r7, #4]
 8009b18:	f000 fc7f 	bl	800a41a <USB_WritePMA>
            ep->xfer_buff += len;
 8009b1c:	683b      	ldr	r3, [r7, #0]
 8009b1e:	695a      	ldr	r2, [r3, #20]
 8009b20:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009b24:	441a      	add	r2, r3
 8009b26:	683b      	ldr	r3, [r7, #0]
 8009b28:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009b2a:	683b      	ldr	r3, [r7, #0]
 8009b2c:	6a1a      	ldr	r2, [r3, #32]
 8009b2e:	683b      	ldr	r3, [r7, #0]
 8009b30:	691b      	ldr	r3, [r3, #16]
 8009b32:	429a      	cmp	r2, r3
 8009b34:	d907      	bls.n	8009b46 <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 8009b36:	683b      	ldr	r3, [r7, #0]
 8009b38:	6a1a      	ldr	r2, [r3, #32]
 8009b3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009b3e:	1ad2      	subs	r2, r2, r3
 8009b40:	683b      	ldr	r3, [r7, #0]
 8009b42:	621a      	str	r2, [r3, #32]
 8009b44:	e006      	b.n	8009b54 <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 8009b46:	683b      	ldr	r3, [r7, #0]
 8009b48:	6a1b      	ldr	r3, [r3, #32]
 8009b4a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 8009b4e:	683b      	ldr	r3, [r7, #0]
 8009b50:	2200      	movs	r2, #0
 8009b52:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	643b      	str	r3, [r7, #64]	@ 0x40
 8009b58:	683b      	ldr	r3, [r7, #0]
 8009b5a:	785b      	ldrb	r3, [r3, #1]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d16b      	bne.n	8009c38 <USB_EPStartXfer+0x5e6>
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009b6a:	b29b      	uxth	r3, r3
 8009b6c:	461a      	mov	r2, r3
 8009b6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b70:	4413      	add	r3, r2
 8009b72:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009b74:	683b      	ldr	r3, [r7, #0]
 8009b76:	781b      	ldrb	r3, [r3, #0]
 8009b78:	00da      	lsls	r2, r3, #3
 8009b7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b7c:	4413      	add	r3, r2
 8009b7e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009b82:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b86:	881b      	ldrh	r3, [r3, #0]
 8009b88:	b29b      	uxth	r3, r3
 8009b8a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009b8e:	b29a      	uxth	r2, r3
 8009b90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b92:	801a      	strh	r2, [r3, #0]
 8009b94:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d10a      	bne.n	8009bb2 <USB_EPStartXfer+0x560>
 8009b9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b9e:	881b      	ldrh	r3, [r3, #0]
 8009ba0:	b29b      	uxth	r3, r3
 8009ba2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009ba6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009baa:	b29a      	uxth	r2, r3
 8009bac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009bae:	801a      	strh	r2, [r3, #0]
 8009bb0:	e05b      	b.n	8009c6a <USB_EPStartXfer+0x618>
 8009bb2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009bb6:	2b3e      	cmp	r3, #62	@ 0x3e
 8009bb8:	d81c      	bhi.n	8009bf4 <USB_EPStartXfer+0x5a2>
 8009bba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009bbe:	085b      	lsrs	r3, r3, #1
 8009bc0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009bc4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009bc8:	f003 0301 	and.w	r3, r3, #1
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d004      	beq.n	8009bda <USB_EPStartXfer+0x588>
 8009bd0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009bd4:	3301      	adds	r3, #1
 8009bd6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009bda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009bdc:	881b      	ldrh	r3, [r3, #0]
 8009bde:	b29a      	uxth	r2, r3
 8009be0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009be4:	b29b      	uxth	r3, r3
 8009be6:	029b      	lsls	r3, r3, #10
 8009be8:	b29b      	uxth	r3, r3
 8009bea:	4313      	orrs	r3, r2
 8009bec:	b29a      	uxth	r2, r3
 8009bee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009bf0:	801a      	strh	r2, [r3, #0]
 8009bf2:	e03a      	b.n	8009c6a <USB_EPStartXfer+0x618>
 8009bf4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009bf8:	095b      	lsrs	r3, r3, #5
 8009bfa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009bfe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009c02:	f003 031f 	and.w	r3, r3, #31
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d104      	bne.n	8009c14 <USB_EPStartXfer+0x5c2>
 8009c0a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009c0e:	3b01      	subs	r3, #1
 8009c10:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009c14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c16:	881b      	ldrh	r3, [r3, #0]
 8009c18:	b29a      	uxth	r2, r3
 8009c1a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009c1e:	b29b      	uxth	r3, r3
 8009c20:	029b      	lsls	r3, r3, #10
 8009c22:	b29b      	uxth	r3, r3
 8009c24:	4313      	orrs	r3, r2
 8009c26:	b29b      	uxth	r3, r3
 8009c28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c30:	b29a      	uxth	r2, r3
 8009c32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c34:	801a      	strh	r2, [r3, #0]
 8009c36:	e018      	b.n	8009c6a <USB_EPStartXfer+0x618>
 8009c38:	683b      	ldr	r3, [r7, #0]
 8009c3a:	785b      	ldrb	r3, [r3, #1]
 8009c3c:	2b01      	cmp	r3, #1
 8009c3e:	d114      	bne.n	8009c6a <USB_EPStartXfer+0x618>
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009c46:	b29b      	uxth	r3, r3
 8009c48:	461a      	mov	r2, r3
 8009c4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009c4c:	4413      	add	r3, r2
 8009c4e:	643b      	str	r3, [r7, #64]	@ 0x40
 8009c50:	683b      	ldr	r3, [r7, #0]
 8009c52:	781b      	ldrb	r3, [r3, #0]
 8009c54:	00da      	lsls	r2, r3, #3
 8009c56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009c58:	4413      	add	r3, r2
 8009c5a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009c5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009c60:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009c64:	b29a      	uxth	r2, r3
 8009c66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c68:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009c6a:	683b      	ldr	r3, [r7, #0]
 8009c6c:	895b      	ldrh	r3, [r3, #10]
 8009c6e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009c72:	683b      	ldr	r3, [r7, #0]
 8009c74:	6959      	ldr	r1, [r3, #20]
 8009c76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009c7a:	b29b      	uxth	r3, r3
 8009c7c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009c80:	6878      	ldr	r0, [r7, #4]
 8009c82:	f000 fbca 	bl	800a41a <USB_WritePMA>
 8009c86:	e193      	b.n	8009fb0 <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8009c88:	683b      	ldr	r3, [r7, #0]
 8009c8a:	6a1b      	ldr	r3, [r3, #32]
 8009c8c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8009c90:	687a      	ldr	r2, [r7, #4]
 8009c92:	683b      	ldr	r3, [r7, #0]
 8009c94:	781b      	ldrb	r3, [r3, #0]
 8009c96:	009b      	lsls	r3, r3, #2
 8009c98:	4413      	add	r3, r2
 8009c9a:	881b      	ldrh	r3, [r3, #0]
 8009c9c:	b29b      	uxth	r3, r3
 8009c9e:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8009ca2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009ca6:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8009caa:	687a      	ldr	r2, [r7, #4]
 8009cac:	683b      	ldr	r3, [r7, #0]
 8009cae:	781b      	ldrb	r3, [r3, #0]
 8009cb0:	009b      	lsls	r3, r3, #2
 8009cb2:	441a      	add	r2, r3
 8009cb4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8009cb8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009cbc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009cc0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009cc4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009cc8:	b29b      	uxth	r3, r3
 8009cca:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009cd6:	b29b      	uxth	r3, r3
 8009cd8:	461a      	mov	r2, r3
 8009cda:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009cdc:	4413      	add	r3, r2
 8009cde:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009ce0:	683b      	ldr	r3, [r7, #0]
 8009ce2:	781b      	ldrb	r3, [r3, #0]
 8009ce4:	00da      	lsls	r2, r3, #3
 8009ce6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009ce8:	4413      	add	r3, r2
 8009cea:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009cee:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009cf0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009cf4:	b29a      	uxth	r2, r3
 8009cf6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009cf8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009cfa:	683b      	ldr	r3, [r7, #0]
 8009cfc:	891b      	ldrh	r3, [r3, #8]
 8009cfe:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009d02:	683b      	ldr	r3, [r7, #0]
 8009d04:	6959      	ldr	r1, [r3, #20]
 8009d06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009d0a:	b29b      	uxth	r3, r3
 8009d0c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009d10:	6878      	ldr	r0, [r7, #4]
 8009d12:	f000 fb82 	bl	800a41a <USB_WritePMA>
 8009d16:	e14b      	b.n	8009fb0 <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	6a1a      	ldr	r2, [r3, #32]
 8009d1c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009d20:	1ad2      	subs	r2, r2, r3
 8009d22:	683b      	ldr	r3, [r7, #0]
 8009d24:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009d26:	687a      	ldr	r2, [r7, #4]
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	781b      	ldrb	r3, [r3, #0]
 8009d2c:	009b      	lsls	r3, r3, #2
 8009d2e:	4413      	add	r3, r2
 8009d30:	881b      	ldrh	r3, [r3, #0]
 8009d32:	b29b      	uxth	r3, r3
 8009d34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	f000 809a 	beq.w	8009e72 <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	673b      	str	r3, [r7, #112]	@ 0x70
 8009d42:	683b      	ldr	r3, [r7, #0]
 8009d44:	785b      	ldrb	r3, [r3, #1]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d16b      	bne.n	8009e22 <USB_EPStartXfer+0x7d0>
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009d54:	b29b      	uxth	r3, r3
 8009d56:	461a      	mov	r2, r3
 8009d58:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009d5a:	4413      	add	r3, r2
 8009d5c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009d5e:	683b      	ldr	r3, [r7, #0]
 8009d60:	781b      	ldrb	r3, [r3, #0]
 8009d62:	00da      	lsls	r2, r3, #3
 8009d64:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009d66:	4413      	add	r3, r2
 8009d68:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009d6c:	667b      	str	r3, [r7, #100]	@ 0x64
 8009d6e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009d70:	881b      	ldrh	r3, [r3, #0]
 8009d72:	b29b      	uxth	r3, r3
 8009d74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009d78:	b29a      	uxth	r2, r3
 8009d7a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009d7c:	801a      	strh	r2, [r3, #0]
 8009d7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d10a      	bne.n	8009d9c <USB_EPStartXfer+0x74a>
 8009d86:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009d88:	881b      	ldrh	r3, [r3, #0]
 8009d8a:	b29b      	uxth	r3, r3
 8009d8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d94:	b29a      	uxth	r2, r3
 8009d96:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009d98:	801a      	strh	r2, [r3, #0]
 8009d9a:	e05b      	b.n	8009e54 <USB_EPStartXfer+0x802>
 8009d9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009da0:	2b3e      	cmp	r3, #62	@ 0x3e
 8009da2:	d81c      	bhi.n	8009dde <USB_EPStartXfer+0x78c>
 8009da4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009da8:	085b      	lsrs	r3, r3, #1
 8009daa:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009dae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009db2:	f003 0301 	and.w	r3, r3, #1
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d004      	beq.n	8009dc4 <USB_EPStartXfer+0x772>
 8009dba:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009dbe:	3301      	adds	r3, #1
 8009dc0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009dc4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009dc6:	881b      	ldrh	r3, [r3, #0]
 8009dc8:	b29a      	uxth	r2, r3
 8009dca:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009dce:	b29b      	uxth	r3, r3
 8009dd0:	029b      	lsls	r3, r3, #10
 8009dd2:	b29b      	uxth	r3, r3
 8009dd4:	4313      	orrs	r3, r2
 8009dd6:	b29a      	uxth	r2, r3
 8009dd8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009dda:	801a      	strh	r2, [r3, #0]
 8009ddc:	e03a      	b.n	8009e54 <USB_EPStartXfer+0x802>
 8009dde:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009de2:	095b      	lsrs	r3, r3, #5
 8009de4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009de8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009dec:	f003 031f 	and.w	r3, r3, #31
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d104      	bne.n	8009dfe <USB_EPStartXfer+0x7ac>
 8009df4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009df8:	3b01      	subs	r3, #1
 8009dfa:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009dfe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009e00:	881b      	ldrh	r3, [r3, #0]
 8009e02:	b29a      	uxth	r2, r3
 8009e04:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009e08:	b29b      	uxth	r3, r3
 8009e0a:	029b      	lsls	r3, r3, #10
 8009e0c:	b29b      	uxth	r3, r3
 8009e0e:	4313      	orrs	r3, r2
 8009e10:	b29b      	uxth	r3, r3
 8009e12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009e16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009e1a:	b29a      	uxth	r2, r3
 8009e1c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009e1e:	801a      	strh	r2, [r3, #0]
 8009e20:	e018      	b.n	8009e54 <USB_EPStartXfer+0x802>
 8009e22:	683b      	ldr	r3, [r7, #0]
 8009e24:	785b      	ldrb	r3, [r3, #1]
 8009e26:	2b01      	cmp	r3, #1
 8009e28:	d114      	bne.n	8009e54 <USB_EPStartXfer+0x802>
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009e30:	b29b      	uxth	r3, r3
 8009e32:	461a      	mov	r2, r3
 8009e34:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009e36:	4413      	add	r3, r2
 8009e38:	673b      	str	r3, [r7, #112]	@ 0x70
 8009e3a:	683b      	ldr	r3, [r7, #0]
 8009e3c:	781b      	ldrb	r3, [r3, #0]
 8009e3e:	00da      	lsls	r2, r3, #3
 8009e40:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009e42:	4413      	add	r3, r2
 8009e44:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009e48:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009e4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009e4e:	b29a      	uxth	r2, r3
 8009e50:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e52:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8009e54:	683b      	ldr	r3, [r7, #0]
 8009e56:	895b      	ldrh	r3, [r3, #10]
 8009e58:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009e5c:	683b      	ldr	r3, [r7, #0]
 8009e5e:	6959      	ldr	r1, [r3, #20]
 8009e60:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009e64:	b29b      	uxth	r3, r3
 8009e66:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009e6a:	6878      	ldr	r0, [r7, #4]
 8009e6c:	f000 fad5 	bl	800a41a <USB_WritePMA>
 8009e70:	e09e      	b.n	8009fb0 <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009e72:	683b      	ldr	r3, [r7, #0]
 8009e74:	785b      	ldrb	r3, [r3, #1]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d16b      	bne.n	8009f52 <USB_EPStartXfer+0x900>
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009e84:	b29b      	uxth	r3, r3
 8009e86:	461a      	mov	r2, r3
 8009e88:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009e8a:	4413      	add	r3, r2
 8009e8c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009e8e:	683b      	ldr	r3, [r7, #0]
 8009e90:	781b      	ldrb	r3, [r3, #0]
 8009e92:	00da      	lsls	r2, r3, #3
 8009e94:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009e96:	4413      	add	r3, r2
 8009e98:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009e9c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009e9e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009ea0:	881b      	ldrh	r3, [r3, #0]
 8009ea2:	b29b      	uxth	r3, r3
 8009ea4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009ea8:	b29a      	uxth	r2, r3
 8009eaa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009eac:	801a      	strh	r2, [r3, #0]
 8009eae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d10a      	bne.n	8009ecc <USB_EPStartXfer+0x87a>
 8009eb6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009eb8:	881b      	ldrh	r3, [r3, #0]
 8009eba:	b29b      	uxth	r3, r3
 8009ebc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009ec0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009ec4:	b29a      	uxth	r2, r3
 8009ec6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009ec8:	801a      	strh	r2, [r3, #0]
 8009eca:	e063      	b.n	8009f94 <USB_EPStartXfer+0x942>
 8009ecc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009ed0:	2b3e      	cmp	r3, #62	@ 0x3e
 8009ed2:	d81c      	bhi.n	8009f0e <USB_EPStartXfer+0x8bc>
 8009ed4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009ed8:	085b      	lsrs	r3, r3, #1
 8009eda:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009ede:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009ee2:	f003 0301 	and.w	r3, r3, #1
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d004      	beq.n	8009ef4 <USB_EPStartXfer+0x8a2>
 8009eea:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009eee:	3301      	adds	r3, #1
 8009ef0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009ef4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009ef6:	881b      	ldrh	r3, [r3, #0]
 8009ef8:	b29a      	uxth	r2, r3
 8009efa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009efe:	b29b      	uxth	r3, r3
 8009f00:	029b      	lsls	r3, r3, #10
 8009f02:	b29b      	uxth	r3, r3
 8009f04:	4313      	orrs	r3, r2
 8009f06:	b29a      	uxth	r2, r3
 8009f08:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009f0a:	801a      	strh	r2, [r3, #0]
 8009f0c:	e042      	b.n	8009f94 <USB_EPStartXfer+0x942>
 8009f0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009f12:	095b      	lsrs	r3, r3, #5
 8009f14:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009f18:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009f1c:	f003 031f 	and.w	r3, r3, #31
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d104      	bne.n	8009f2e <USB_EPStartXfer+0x8dc>
 8009f24:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009f28:	3b01      	subs	r3, #1
 8009f2a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009f2e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009f30:	881b      	ldrh	r3, [r3, #0]
 8009f32:	b29a      	uxth	r2, r3
 8009f34:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009f38:	b29b      	uxth	r3, r3
 8009f3a:	029b      	lsls	r3, r3, #10
 8009f3c:	b29b      	uxth	r3, r3
 8009f3e:	4313      	orrs	r3, r2
 8009f40:	b29b      	uxth	r3, r3
 8009f42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f4a:	b29a      	uxth	r2, r3
 8009f4c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009f4e:	801a      	strh	r2, [r3, #0]
 8009f50:	e020      	b.n	8009f94 <USB_EPStartXfer+0x942>
 8009f52:	683b      	ldr	r3, [r7, #0]
 8009f54:	785b      	ldrb	r3, [r3, #1]
 8009f56:	2b01      	cmp	r3, #1
 8009f58:	d11c      	bne.n	8009f94 <USB_EPStartXfer+0x942>
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009f66:	b29b      	uxth	r3, r3
 8009f68:	461a      	mov	r2, r3
 8009f6a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009f6e:	4413      	add	r3, r2
 8009f70:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009f74:	683b      	ldr	r3, [r7, #0]
 8009f76:	781b      	ldrb	r3, [r3, #0]
 8009f78:	00da      	lsls	r2, r3, #3
 8009f7a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009f7e:	4413      	add	r3, r2
 8009f80:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009f84:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009f88:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009f8c:	b29a      	uxth	r2, r3
 8009f8e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009f92:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	891b      	ldrh	r3, [r3, #8]
 8009f98:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009f9c:	683b      	ldr	r3, [r7, #0]
 8009f9e:	6959      	ldr	r1, [r3, #20]
 8009fa0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009fa4:	b29b      	uxth	r3, r3
 8009fa6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009faa:	6878      	ldr	r0, [r7, #4]
 8009fac:	f000 fa35 	bl	800a41a <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8009fb0:	687a      	ldr	r2, [r7, #4]
 8009fb2:	683b      	ldr	r3, [r7, #0]
 8009fb4:	781b      	ldrb	r3, [r3, #0]
 8009fb6:	009b      	lsls	r3, r3, #2
 8009fb8:	4413      	add	r3, r2
 8009fba:	881b      	ldrh	r3, [r3, #0]
 8009fbc:	b29b      	uxth	r3, r3
 8009fbe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009fc2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009fc6:	817b      	strh	r3, [r7, #10]
 8009fc8:	897b      	ldrh	r3, [r7, #10]
 8009fca:	f083 0310 	eor.w	r3, r3, #16
 8009fce:	817b      	strh	r3, [r7, #10]
 8009fd0:	897b      	ldrh	r3, [r7, #10]
 8009fd2:	f083 0320 	eor.w	r3, r3, #32
 8009fd6:	817b      	strh	r3, [r7, #10]
 8009fd8:	687a      	ldr	r2, [r7, #4]
 8009fda:	683b      	ldr	r3, [r7, #0]
 8009fdc:	781b      	ldrb	r3, [r3, #0]
 8009fde:	009b      	lsls	r3, r3, #2
 8009fe0:	441a      	add	r2, r3
 8009fe2:	897b      	ldrh	r3, [r7, #10]
 8009fe4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009fe8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009fec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009ff0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009ff4:	b29b      	uxth	r3, r3
 8009ff6:	8013      	strh	r3, [r2, #0]
 8009ff8:	e0d5      	b.n	800a1a6 <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8009ffa:	683b      	ldr	r3, [r7, #0]
 8009ffc:	7b1b      	ldrb	r3, [r3, #12]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d156      	bne.n	800a0b0 <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 800a002:	683b      	ldr	r3, [r7, #0]
 800a004:	699b      	ldr	r3, [r3, #24]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d122      	bne.n	800a050 <USB_EPStartXfer+0x9fe>
 800a00a:	683b      	ldr	r3, [r7, #0]
 800a00c:	78db      	ldrb	r3, [r3, #3]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d11e      	bne.n	800a050 <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 800a012:	687a      	ldr	r2, [r7, #4]
 800a014:	683b      	ldr	r3, [r7, #0]
 800a016:	781b      	ldrb	r3, [r3, #0]
 800a018:	009b      	lsls	r3, r3, #2
 800a01a:	4413      	add	r3, r2
 800a01c:	881b      	ldrh	r3, [r3, #0]
 800a01e:	b29b      	uxth	r3, r3
 800a020:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a024:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a028:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 800a02c:	687a      	ldr	r2, [r7, #4]
 800a02e:	683b      	ldr	r3, [r7, #0]
 800a030:	781b      	ldrb	r3, [r3, #0]
 800a032:	009b      	lsls	r3, r3, #2
 800a034:	441a      	add	r2, r3
 800a036:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800a03a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a03e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a042:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800a046:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a04a:	b29b      	uxth	r3, r3
 800a04c:	8013      	strh	r3, [r2, #0]
 800a04e:	e01d      	b.n	800a08c <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 800a050:	687a      	ldr	r2, [r7, #4]
 800a052:	683b      	ldr	r3, [r7, #0]
 800a054:	781b      	ldrb	r3, [r3, #0]
 800a056:	009b      	lsls	r3, r3, #2
 800a058:	4413      	add	r3, r2
 800a05a:	881b      	ldrh	r3, [r3, #0]
 800a05c:	b29b      	uxth	r3, r3
 800a05e:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800a062:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a066:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 800a06a:	687a      	ldr	r2, [r7, #4]
 800a06c:	683b      	ldr	r3, [r7, #0]
 800a06e:	781b      	ldrb	r3, [r3, #0]
 800a070:	009b      	lsls	r3, r3, #2
 800a072:	441a      	add	r2, r3
 800a074:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 800a078:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a07c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a080:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a084:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a088:	b29b      	uxth	r3, r3
 800a08a:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800a08c:	683b      	ldr	r3, [r7, #0]
 800a08e:	699a      	ldr	r2, [r3, #24]
 800a090:	683b      	ldr	r3, [r7, #0]
 800a092:	691b      	ldr	r3, [r3, #16]
 800a094:	429a      	cmp	r2, r3
 800a096:	d907      	bls.n	800a0a8 <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 800a098:	683b      	ldr	r3, [r7, #0]
 800a09a:	699a      	ldr	r2, [r3, #24]
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	691b      	ldr	r3, [r3, #16]
 800a0a0:	1ad2      	subs	r2, r2, r3
 800a0a2:	683b      	ldr	r3, [r7, #0]
 800a0a4:	619a      	str	r2, [r3, #24]
 800a0a6:	e054      	b.n	800a152 <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 800a0a8:	683b      	ldr	r3, [r7, #0]
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	619a      	str	r2, [r3, #24]
 800a0ae:	e050      	b.n	800a152 <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800a0b0:	683b      	ldr	r3, [r7, #0]
 800a0b2:	78db      	ldrb	r3, [r3, #3]
 800a0b4:	2b02      	cmp	r3, #2
 800a0b6:	d142      	bne.n	800a13e <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800a0b8:	683b      	ldr	r3, [r7, #0]
 800a0ba:	69db      	ldr	r3, [r3, #28]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d048      	beq.n	800a152 <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800a0c0:	687a      	ldr	r2, [r7, #4]
 800a0c2:	683b      	ldr	r3, [r7, #0]
 800a0c4:	781b      	ldrb	r3, [r3, #0]
 800a0c6:	009b      	lsls	r3, r3, #2
 800a0c8:	4413      	add	r3, r2
 800a0ca:	881b      	ldrh	r3, [r3, #0]
 800a0cc:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a0d0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800a0d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d005      	beq.n	800a0e8 <USB_EPStartXfer+0xa96>
 800a0dc:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800a0e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d10b      	bne.n	800a100 <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a0e8:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800a0ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d12e      	bne.n	800a152 <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a0f4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800a0f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d128      	bne.n	800a152 <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800a100:	687a      	ldr	r2, [r7, #4]
 800a102:	683b      	ldr	r3, [r7, #0]
 800a104:	781b      	ldrb	r3, [r3, #0]
 800a106:	009b      	lsls	r3, r3, #2
 800a108:	4413      	add	r3, r2
 800a10a:	881b      	ldrh	r3, [r3, #0]
 800a10c:	b29b      	uxth	r3, r3
 800a10e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a112:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a116:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 800a11a:	687a      	ldr	r2, [r7, #4]
 800a11c:	683b      	ldr	r3, [r7, #0]
 800a11e:	781b      	ldrb	r3, [r3, #0]
 800a120:	009b      	lsls	r3, r3, #2
 800a122:	441a      	add	r2, r3
 800a124:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 800a128:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a12c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a130:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a134:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a138:	b29b      	uxth	r3, r3
 800a13a:	8013      	strh	r3, [r2, #0]
 800a13c:	e009      	b.n	800a152 <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800a13e:	683b      	ldr	r3, [r7, #0]
 800a140:	78db      	ldrb	r3, [r3, #3]
 800a142:	2b01      	cmp	r3, #1
 800a144:	d103      	bne.n	800a14e <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 800a146:	683b      	ldr	r3, [r7, #0]
 800a148:	2200      	movs	r2, #0
 800a14a:	619a      	str	r2, [r3, #24]
 800a14c:	e001      	b.n	800a152 <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 800a14e:	2301      	movs	r3, #1
 800a150:	e02a      	b.n	800a1a8 <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a152:	687a      	ldr	r2, [r7, #4]
 800a154:	683b      	ldr	r3, [r7, #0]
 800a156:	781b      	ldrb	r3, [r3, #0]
 800a158:	009b      	lsls	r3, r3, #2
 800a15a:	4413      	add	r3, r2
 800a15c:	881b      	ldrh	r3, [r3, #0]
 800a15e:	b29b      	uxth	r3, r3
 800a160:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a164:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a168:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800a16c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800a170:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800a174:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800a178:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800a17c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800a180:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800a184:	687a      	ldr	r2, [r7, #4]
 800a186:	683b      	ldr	r3, [r7, #0]
 800a188:	781b      	ldrb	r3, [r3, #0]
 800a18a:	009b      	lsls	r3, r3, #2
 800a18c:	441a      	add	r2, r3
 800a18e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800a192:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a196:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a19a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a19e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a1a2:	b29b      	uxth	r3, r3
 800a1a4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a1a6:	2300      	movs	r3, #0
}
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	37b0      	adds	r7, #176	@ 0xb0
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	bd80      	pop	{r7, pc}

0800a1b0 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a1b0:	b480      	push	{r7}
 800a1b2:	b085      	sub	sp, #20
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	6078      	str	r0, [r7, #4]
 800a1b8:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800a1ba:	683b      	ldr	r3, [r7, #0]
 800a1bc:	785b      	ldrb	r3, [r3, #1]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d020      	beq.n	800a204 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800a1c2:	687a      	ldr	r2, [r7, #4]
 800a1c4:	683b      	ldr	r3, [r7, #0]
 800a1c6:	781b      	ldrb	r3, [r3, #0]
 800a1c8:	009b      	lsls	r3, r3, #2
 800a1ca:	4413      	add	r3, r2
 800a1cc:	881b      	ldrh	r3, [r3, #0]
 800a1ce:	b29b      	uxth	r3, r3
 800a1d0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a1d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a1d8:	81bb      	strh	r3, [r7, #12]
 800a1da:	89bb      	ldrh	r3, [r7, #12]
 800a1dc:	f083 0310 	eor.w	r3, r3, #16
 800a1e0:	81bb      	strh	r3, [r7, #12]
 800a1e2:	687a      	ldr	r2, [r7, #4]
 800a1e4:	683b      	ldr	r3, [r7, #0]
 800a1e6:	781b      	ldrb	r3, [r3, #0]
 800a1e8:	009b      	lsls	r3, r3, #2
 800a1ea:	441a      	add	r2, r3
 800a1ec:	89bb      	ldrh	r3, [r7, #12]
 800a1ee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a1f2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a1f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a1fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a1fe:	b29b      	uxth	r3, r3
 800a200:	8013      	strh	r3, [r2, #0]
 800a202:	e01f      	b.n	800a244 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800a204:	687a      	ldr	r2, [r7, #4]
 800a206:	683b      	ldr	r3, [r7, #0]
 800a208:	781b      	ldrb	r3, [r3, #0]
 800a20a:	009b      	lsls	r3, r3, #2
 800a20c:	4413      	add	r3, r2
 800a20e:	881b      	ldrh	r3, [r3, #0]
 800a210:	b29b      	uxth	r3, r3
 800a212:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a216:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a21a:	81fb      	strh	r3, [r7, #14]
 800a21c:	89fb      	ldrh	r3, [r7, #14]
 800a21e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800a222:	81fb      	strh	r3, [r7, #14]
 800a224:	687a      	ldr	r2, [r7, #4]
 800a226:	683b      	ldr	r3, [r7, #0]
 800a228:	781b      	ldrb	r3, [r3, #0]
 800a22a:	009b      	lsls	r3, r3, #2
 800a22c:	441a      	add	r2, r3
 800a22e:	89fb      	ldrh	r3, [r7, #14]
 800a230:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a234:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a238:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a23c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a240:	b29b      	uxth	r3, r3
 800a242:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a244:	2300      	movs	r3, #0
}
 800a246:	4618      	mov	r0, r3
 800a248:	3714      	adds	r7, #20
 800a24a:	46bd      	mov	sp, r7
 800a24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a250:	4770      	bx	lr

0800a252 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a252:	b480      	push	{r7}
 800a254:	b087      	sub	sp, #28
 800a256:	af00      	add	r7, sp, #0
 800a258:	6078      	str	r0, [r7, #4]
 800a25a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800a25c:	683b      	ldr	r3, [r7, #0]
 800a25e:	785b      	ldrb	r3, [r3, #1]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d04c      	beq.n	800a2fe <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a264:	687a      	ldr	r2, [r7, #4]
 800a266:	683b      	ldr	r3, [r7, #0]
 800a268:	781b      	ldrb	r3, [r3, #0]
 800a26a:	009b      	lsls	r3, r3, #2
 800a26c:	4413      	add	r3, r2
 800a26e:	881b      	ldrh	r3, [r3, #0]
 800a270:	823b      	strh	r3, [r7, #16]
 800a272:	8a3b      	ldrh	r3, [r7, #16]
 800a274:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d01b      	beq.n	800a2b4 <USB_EPClearStall+0x62>
 800a27c:	687a      	ldr	r2, [r7, #4]
 800a27e:	683b      	ldr	r3, [r7, #0]
 800a280:	781b      	ldrb	r3, [r3, #0]
 800a282:	009b      	lsls	r3, r3, #2
 800a284:	4413      	add	r3, r2
 800a286:	881b      	ldrh	r3, [r3, #0]
 800a288:	b29b      	uxth	r3, r3
 800a28a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a28e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a292:	81fb      	strh	r3, [r7, #14]
 800a294:	687a      	ldr	r2, [r7, #4]
 800a296:	683b      	ldr	r3, [r7, #0]
 800a298:	781b      	ldrb	r3, [r3, #0]
 800a29a:	009b      	lsls	r3, r3, #2
 800a29c:	441a      	add	r2, r3
 800a29e:	89fb      	ldrh	r3, [r7, #14]
 800a2a0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a2a4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a2a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a2ac:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a2b0:	b29b      	uxth	r3, r3
 800a2b2:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800a2b4:	683b      	ldr	r3, [r7, #0]
 800a2b6:	78db      	ldrb	r3, [r3, #3]
 800a2b8:	2b01      	cmp	r3, #1
 800a2ba:	d06c      	beq.n	800a396 <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a2bc:	687a      	ldr	r2, [r7, #4]
 800a2be:	683b      	ldr	r3, [r7, #0]
 800a2c0:	781b      	ldrb	r3, [r3, #0]
 800a2c2:	009b      	lsls	r3, r3, #2
 800a2c4:	4413      	add	r3, r2
 800a2c6:	881b      	ldrh	r3, [r3, #0]
 800a2c8:	b29b      	uxth	r3, r3
 800a2ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a2ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a2d2:	81bb      	strh	r3, [r7, #12]
 800a2d4:	89bb      	ldrh	r3, [r7, #12]
 800a2d6:	f083 0320 	eor.w	r3, r3, #32
 800a2da:	81bb      	strh	r3, [r7, #12]
 800a2dc:	687a      	ldr	r2, [r7, #4]
 800a2de:	683b      	ldr	r3, [r7, #0]
 800a2e0:	781b      	ldrb	r3, [r3, #0]
 800a2e2:	009b      	lsls	r3, r3, #2
 800a2e4:	441a      	add	r2, r3
 800a2e6:	89bb      	ldrh	r3, [r7, #12]
 800a2e8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a2ec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a2f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a2f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a2f8:	b29b      	uxth	r3, r3
 800a2fa:	8013      	strh	r3, [r2, #0]
 800a2fc:	e04b      	b.n	800a396 <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a2fe:	687a      	ldr	r2, [r7, #4]
 800a300:	683b      	ldr	r3, [r7, #0]
 800a302:	781b      	ldrb	r3, [r3, #0]
 800a304:	009b      	lsls	r3, r3, #2
 800a306:	4413      	add	r3, r2
 800a308:	881b      	ldrh	r3, [r3, #0]
 800a30a:	82fb      	strh	r3, [r7, #22]
 800a30c:	8afb      	ldrh	r3, [r7, #22]
 800a30e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a312:	2b00      	cmp	r3, #0
 800a314:	d01b      	beq.n	800a34e <USB_EPClearStall+0xfc>
 800a316:	687a      	ldr	r2, [r7, #4]
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	781b      	ldrb	r3, [r3, #0]
 800a31c:	009b      	lsls	r3, r3, #2
 800a31e:	4413      	add	r3, r2
 800a320:	881b      	ldrh	r3, [r3, #0]
 800a322:	b29b      	uxth	r3, r3
 800a324:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a328:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a32c:	82bb      	strh	r3, [r7, #20]
 800a32e:	687a      	ldr	r2, [r7, #4]
 800a330:	683b      	ldr	r3, [r7, #0]
 800a332:	781b      	ldrb	r3, [r3, #0]
 800a334:	009b      	lsls	r3, r3, #2
 800a336:	441a      	add	r2, r3
 800a338:	8abb      	ldrh	r3, [r7, #20]
 800a33a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a33e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a342:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a346:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a34a:	b29b      	uxth	r3, r3
 800a34c:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a34e:	687a      	ldr	r2, [r7, #4]
 800a350:	683b      	ldr	r3, [r7, #0]
 800a352:	781b      	ldrb	r3, [r3, #0]
 800a354:	009b      	lsls	r3, r3, #2
 800a356:	4413      	add	r3, r2
 800a358:	881b      	ldrh	r3, [r3, #0]
 800a35a:	b29b      	uxth	r3, r3
 800a35c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a360:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a364:	827b      	strh	r3, [r7, #18]
 800a366:	8a7b      	ldrh	r3, [r7, #18]
 800a368:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800a36c:	827b      	strh	r3, [r7, #18]
 800a36e:	8a7b      	ldrh	r3, [r7, #18]
 800a370:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800a374:	827b      	strh	r3, [r7, #18]
 800a376:	687a      	ldr	r2, [r7, #4]
 800a378:	683b      	ldr	r3, [r7, #0]
 800a37a:	781b      	ldrb	r3, [r3, #0]
 800a37c:	009b      	lsls	r3, r3, #2
 800a37e:	441a      	add	r2, r3
 800a380:	8a7b      	ldrh	r3, [r7, #18]
 800a382:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a386:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a38a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a38e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a392:	b29b      	uxth	r3, r3
 800a394:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a396:	2300      	movs	r3, #0
}
 800a398:	4618      	mov	r0, r3
 800a39a:	371c      	adds	r7, #28
 800a39c:	46bd      	mov	sp, r7
 800a39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a2:	4770      	bx	lr

0800a3a4 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800a3a4:	b480      	push	{r7}
 800a3a6:	b083      	sub	sp, #12
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	6078      	str	r0, [r7, #4]
 800a3ac:	460b      	mov	r3, r1
 800a3ae:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800a3b0:	78fb      	ldrb	r3, [r7, #3]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d103      	bne.n	800a3be <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	2280      	movs	r2, #128	@ 0x80
 800a3ba:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800a3be:	2300      	movs	r3, #0
}
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	370c      	adds	r7, #12
 800a3c4:	46bd      	mov	sp, r7
 800a3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ca:	4770      	bx	lr

0800a3cc <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800a3cc:	b480      	push	{r7}
 800a3ce:	b083      	sub	sp, #12
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800a3da:	b29b      	uxth	r3, r3
 800a3dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a3e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a3e4:	b29a      	uxth	r2, r3
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800a3ec:	2300      	movs	r3, #0
}
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	370c      	adds	r7, #12
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f8:	4770      	bx	lr

0800a3fa <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800a3fa:	b480      	push	{r7}
 800a3fc:	b085      	sub	sp, #20
 800a3fe:	af00      	add	r7, sp, #0
 800a400:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a408:	b29b      	uxth	r3, r3
 800a40a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800a40c:	68fb      	ldr	r3, [r7, #12]
}
 800a40e:	4618      	mov	r0, r3
 800a410:	3714      	adds	r7, #20
 800a412:	46bd      	mov	sp, r7
 800a414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a418:	4770      	bx	lr

0800a41a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a41a:	b480      	push	{r7}
 800a41c:	b08b      	sub	sp, #44	@ 0x2c
 800a41e:	af00      	add	r7, sp, #0
 800a420:	60f8      	str	r0, [r7, #12]
 800a422:	60b9      	str	r1, [r7, #8]
 800a424:	4611      	mov	r1, r2
 800a426:	461a      	mov	r2, r3
 800a428:	460b      	mov	r3, r1
 800a42a:	80fb      	strh	r3, [r7, #6]
 800a42c:	4613      	mov	r3, r2
 800a42e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800a430:	88bb      	ldrh	r3, [r7, #4]
 800a432:	3301      	adds	r3, #1
 800a434:	085b      	lsrs	r3, r3, #1
 800a436:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a43c:	68bb      	ldr	r3, [r7, #8]
 800a43e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a440:	88fa      	ldrh	r2, [r7, #6]
 800a442:	697b      	ldr	r3, [r7, #20]
 800a444:	4413      	add	r3, r2
 800a446:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a44a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800a44c:	69bb      	ldr	r3, [r7, #24]
 800a44e:	627b      	str	r3, [r7, #36]	@ 0x24
 800a450:	e01b      	b.n	800a48a <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800a452:	69fb      	ldr	r3, [r7, #28]
 800a454:	781b      	ldrb	r3, [r3, #0]
 800a456:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800a458:	69fb      	ldr	r3, [r7, #28]
 800a45a:	3301      	adds	r3, #1
 800a45c:	781b      	ldrb	r3, [r3, #0]
 800a45e:	021b      	lsls	r3, r3, #8
 800a460:	b21a      	sxth	r2, r3
 800a462:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a466:	4313      	orrs	r3, r2
 800a468:	b21b      	sxth	r3, r3
 800a46a:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800a46c:	6a3b      	ldr	r3, [r7, #32]
 800a46e:	8a7a      	ldrh	r2, [r7, #18]
 800a470:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800a472:	6a3b      	ldr	r3, [r7, #32]
 800a474:	3302      	adds	r3, #2
 800a476:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800a478:	69fb      	ldr	r3, [r7, #28]
 800a47a:	3301      	adds	r3, #1
 800a47c:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800a47e:	69fb      	ldr	r3, [r7, #28]
 800a480:	3301      	adds	r3, #1
 800a482:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800a484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a486:	3b01      	subs	r3, #1
 800a488:	627b      	str	r3, [r7, #36]	@ 0x24
 800a48a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d1e0      	bne.n	800a452 <USB_WritePMA+0x38>
  }
}
 800a490:	bf00      	nop
 800a492:	bf00      	nop
 800a494:	372c      	adds	r7, #44	@ 0x2c
 800a496:	46bd      	mov	sp, r7
 800a498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49c:	4770      	bx	lr

0800a49e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a49e:	b480      	push	{r7}
 800a4a0:	b08b      	sub	sp, #44	@ 0x2c
 800a4a2:	af00      	add	r7, sp, #0
 800a4a4:	60f8      	str	r0, [r7, #12]
 800a4a6:	60b9      	str	r1, [r7, #8]
 800a4a8:	4611      	mov	r1, r2
 800a4aa:	461a      	mov	r2, r3
 800a4ac:	460b      	mov	r3, r1
 800a4ae:	80fb      	strh	r3, [r7, #6]
 800a4b0:	4613      	mov	r3, r2
 800a4b2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800a4b4:	88bb      	ldrh	r3, [r7, #4]
 800a4b6:	085b      	lsrs	r3, r3, #1
 800a4b8:	b29b      	uxth	r3, r3
 800a4ba:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a4c0:	68bb      	ldr	r3, [r7, #8]
 800a4c2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a4c4:	88fa      	ldrh	r2, [r7, #6]
 800a4c6:	697b      	ldr	r3, [r7, #20]
 800a4c8:	4413      	add	r3, r2
 800a4ca:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a4ce:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800a4d0:	69bb      	ldr	r3, [r7, #24]
 800a4d2:	627b      	str	r3, [r7, #36]	@ 0x24
 800a4d4:	e018      	b.n	800a508 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800a4d6:	6a3b      	ldr	r3, [r7, #32]
 800a4d8:	881b      	ldrh	r3, [r3, #0]
 800a4da:	b29b      	uxth	r3, r3
 800a4dc:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800a4de:	6a3b      	ldr	r3, [r7, #32]
 800a4e0:	3302      	adds	r3, #2
 800a4e2:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800a4e4:	693b      	ldr	r3, [r7, #16]
 800a4e6:	b2da      	uxtb	r2, r3
 800a4e8:	69fb      	ldr	r3, [r7, #28]
 800a4ea:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a4ec:	69fb      	ldr	r3, [r7, #28]
 800a4ee:	3301      	adds	r3, #1
 800a4f0:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800a4f2:	693b      	ldr	r3, [r7, #16]
 800a4f4:	0a1b      	lsrs	r3, r3, #8
 800a4f6:	b2da      	uxtb	r2, r3
 800a4f8:	69fb      	ldr	r3, [r7, #28]
 800a4fa:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a4fc:	69fb      	ldr	r3, [r7, #28]
 800a4fe:	3301      	adds	r3, #1
 800a500:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800a502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a504:	3b01      	subs	r3, #1
 800a506:	627b      	str	r3, [r7, #36]	@ 0x24
 800a508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d1e3      	bne.n	800a4d6 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800a50e:	88bb      	ldrh	r3, [r7, #4]
 800a510:	f003 0301 	and.w	r3, r3, #1
 800a514:	b29b      	uxth	r3, r3
 800a516:	2b00      	cmp	r3, #0
 800a518:	d007      	beq.n	800a52a <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800a51a:	6a3b      	ldr	r3, [r7, #32]
 800a51c:	881b      	ldrh	r3, [r3, #0]
 800a51e:	b29b      	uxth	r3, r3
 800a520:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800a522:	693b      	ldr	r3, [r7, #16]
 800a524:	b2da      	uxtb	r2, r3
 800a526:	69fb      	ldr	r3, [r7, #28]
 800a528:	701a      	strb	r2, [r3, #0]
  }
}
 800a52a:	bf00      	nop
 800a52c:	372c      	adds	r7, #44	@ 0x2c
 800a52e:	46bd      	mov	sp, r7
 800a530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a534:	4770      	bx	lr

0800a536 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a536:	b580      	push	{r7, lr}
 800a538:	b084      	sub	sp, #16
 800a53a:	af00      	add	r7, sp, #0
 800a53c:	6078      	str	r0, [r7, #4]
 800a53e:	460b      	mov	r3, r1
 800a540:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a542:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800a546:	f005 fdaf 	bl	80100a8 <USBD_static_malloc>
 800a54a:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d105      	bne.n	800a55e <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	2200      	movs	r2, #0
 800a556:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 800a55a:	2302      	movs	r3, #2
 800a55c:	e066      	b.n	800a62c <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	68fa      	ldr	r2, [r7, #12]
 800a562:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	7c1b      	ldrb	r3, [r3, #16]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d119      	bne.n	800a5a2 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a56e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a572:	2202      	movs	r2, #2
 800a574:	2181      	movs	r1, #129	@ 0x81
 800a576:	6878      	ldr	r0, [r7, #4]
 800a578:	f005 fc3d 	bl	800fdf6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2201      	movs	r2, #1
 800a580:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a582:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a586:	2202      	movs	r2, #2
 800a588:	2101      	movs	r1, #1
 800a58a:	6878      	ldr	r0, [r7, #4]
 800a58c:	f005 fc33 	bl	800fdf6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	2201      	movs	r2, #1
 800a594:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	2210      	movs	r2, #16
 800a59c:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 800a5a0:	e016      	b.n	800a5d0 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a5a2:	2340      	movs	r3, #64	@ 0x40
 800a5a4:	2202      	movs	r2, #2
 800a5a6:	2181      	movs	r1, #129	@ 0x81
 800a5a8:	6878      	ldr	r0, [r7, #4]
 800a5aa:	f005 fc24 	bl	800fdf6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	2201      	movs	r2, #1
 800a5b2:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a5b4:	2340      	movs	r3, #64	@ 0x40
 800a5b6:	2202      	movs	r2, #2
 800a5b8:	2101      	movs	r1, #1
 800a5ba:	6878      	ldr	r0, [r7, #4]
 800a5bc:	f005 fc1b 	bl	800fdf6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	2201      	movs	r2, #1
 800a5c4:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	2210      	movs	r2, #16
 800a5cc:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a5d0:	2308      	movs	r3, #8
 800a5d2:	2203      	movs	r2, #3
 800a5d4:	2182      	movs	r1, #130	@ 0x82
 800a5d6:	6878      	ldr	r0, [r7, #4]
 800a5d8:	f005 fc0d 	bl	800fdf6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	2201      	movs	r2, #1
 800a5e0:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	2200      	movs	r2, #0
 800a5f2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	2200      	movs	r2, #0
 800a5fa:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	7c1b      	ldrb	r3, [r3, #16]
 800a602:	2b00      	cmp	r3, #0
 800a604:	d109      	bne.n	800a61a <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a60c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a610:	2101      	movs	r1, #1
 800a612:	6878      	ldr	r0, [r7, #4]
 800a614:	f005 fcde 	bl	800ffd4 <USBD_LL_PrepareReceive>
 800a618:	e007      	b.n	800a62a <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a620:	2340      	movs	r3, #64	@ 0x40
 800a622:	2101      	movs	r1, #1
 800a624:	6878      	ldr	r0, [r7, #4]
 800a626:	f005 fcd5 	bl	800ffd4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a62a:	2300      	movs	r3, #0
}
 800a62c:	4618      	mov	r0, r3
 800a62e:	3710      	adds	r7, #16
 800a630:	46bd      	mov	sp, r7
 800a632:	bd80      	pop	{r7, pc}

0800a634 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a634:	b580      	push	{r7, lr}
 800a636:	b082      	sub	sp, #8
 800a638:	af00      	add	r7, sp, #0
 800a63a:	6078      	str	r0, [r7, #4]
 800a63c:	460b      	mov	r3, r1
 800a63e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800a640:	2181      	movs	r1, #129	@ 0x81
 800a642:	6878      	ldr	r0, [r7, #4]
 800a644:	f005 fbfd 	bl	800fe42 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	2200      	movs	r2, #0
 800a64c:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a64e:	2101      	movs	r1, #1
 800a650:	6878      	ldr	r0, [r7, #4]
 800a652:	f005 fbf6 	bl	800fe42 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	2200      	movs	r2, #0
 800a65a:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800a65e:	2182      	movs	r1, #130	@ 0x82
 800a660:	6878      	ldr	r0, [r7, #4]
 800a662:	f005 fbee 	bl	800fe42 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	2200      	movs	r2, #0
 800a66a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	2200      	movs	r2, #0
 800a672:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d00e      	beq.n	800a69e <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a686:	685b      	ldr	r3, [r3, #4]
 800a688:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a690:	4618      	mov	r0, r3
 800a692:	f005 fd17 	bl	80100c4 <USBD_static_free>
    pdev->pClassData = NULL;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	2200      	movs	r2, #0
 800a69a:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a69e:	2300      	movs	r3, #0
}
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	3708      	adds	r7, #8
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	bd80      	pop	{r7, pc}

0800a6a8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a6a8:	b580      	push	{r7, lr}
 800a6aa:	b086      	sub	sp, #24
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
 800a6b0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a6b8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a6be:	2300      	movs	r3, #0
 800a6c0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a6c6:	693b      	ldr	r3, [r7, #16]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d101      	bne.n	800a6d0 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800a6cc:	2303      	movs	r3, #3
 800a6ce:	e0af      	b.n	800a830 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a6d0:	683b      	ldr	r3, [r7, #0]
 800a6d2:	781b      	ldrb	r3, [r3, #0]
 800a6d4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d03f      	beq.n	800a75c <USBD_CDC_Setup+0xb4>
 800a6dc:	2b20      	cmp	r3, #32
 800a6de:	f040 809f 	bne.w	800a820 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a6e2:	683b      	ldr	r3, [r7, #0]
 800a6e4:	88db      	ldrh	r3, [r3, #6]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d02e      	beq.n	800a748 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a6ea:	683b      	ldr	r3, [r7, #0]
 800a6ec:	781b      	ldrb	r3, [r3, #0]
 800a6ee:	b25b      	sxtb	r3, r3
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	da16      	bge.n	800a722 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a6fa:	689b      	ldr	r3, [r3, #8]
 800a6fc:	683a      	ldr	r2, [r7, #0]
 800a6fe:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800a700:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a702:	683a      	ldr	r2, [r7, #0]
 800a704:	88d2      	ldrh	r2, [r2, #6]
 800a706:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a708:	683b      	ldr	r3, [r7, #0]
 800a70a:	88db      	ldrh	r3, [r3, #6]
 800a70c:	2b07      	cmp	r3, #7
 800a70e:	bf28      	it	cs
 800a710:	2307      	movcs	r3, #7
 800a712:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a714:	693b      	ldr	r3, [r7, #16]
 800a716:	89fa      	ldrh	r2, [r7, #14]
 800a718:	4619      	mov	r1, r3
 800a71a:	6878      	ldr	r0, [r7, #4]
 800a71c:	f001 facd 	bl	800bcba <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800a720:	e085      	b.n	800a82e <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800a722:	683b      	ldr	r3, [r7, #0]
 800a724:	785a      	ldrb	r2, [r3, #1]
 800a726:	693b      	ldr	r3, [r7, #16]
 800a728:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800a72c:	683b      	ldr	r3, [r7, #0]
 800a72e:	88db      	ldrh	r3, [r3, #6]
 800a730:	b2da      	uxtb	r2, r3
 800a732:	693b      	ldr	r3, [r7, #16]
 800a734:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800a738:	6939      	ldr	r1, [r7, #16]
 800a73a:	683b      	ldr	r3, [r7, #0]
 800a73c:	88db      	ldrh	r3, [r3, #6]
 800a73e:	461a      	mov	r2, r3
 800a740:	6878      	ldr	r0, [r7, #4]
 800a742:	f001 fae6 	bl	800bd12 <USBD_CtlPrepareRx>
      break;
 800a746:	e072      	b.n	800a82e <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a74e:	689b      	ldr	r3, [r3, #8]
 800a750:	683a      	ldr	r2, [r7, #0]
 800a752:	7850      	ldrb	r0, [r2, #1]
 800a754:	2200      	movs	r2, #0
 800a756:	6839      	ldr	r1, [r7, #0]
 800a758:	4798      	blx	r3
      break;
 800a75a:	e068      	b.n	800a82e <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a75c:	683b      	ldr	r3, [r7, #0]
 800a75e:	785b      	ldrb	r3, [r3, #1]
 800a760:	2b0b      	cmp	r3, #11
 800a762:	d852      	bhi.n	800a80a <USBD_CDC_Setup+0x162>
 800a764:	a201      	add	r2, pc, #4	@ (adr r2, 800a76c <USBD_CDC_Setup+0xc4>)
 800a766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a76a:	bf00      	nop
 800a76c:	0800a79d 	.word	0x0800a79d
 800a770:	0800a819 	.word	0x0800a819
 800a774:	0800a80b 	.word	0x0800a80b
 800a778:	0800a80b 	.word	0x0800a80b
 800a77c:	0800a80b 	.word	0x0800a80b
 800a780:	0800a80b 	.word	0x0800a80b
 800a784:	0800a80b 	.word	0x0800a80b
 800a788:	0800a80b 	.word	0x0800a80b
 800a78c:	0800a80b 	.word	0x0800a80b
 800a790:	0800a80b 	.word	0x0800a80b
 800a794:	0800a7c7 	.word	0x0800a7c7
 800a798:	0800a7f1 	.word	0x0800a7f1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a7a2:	b2db      	uxtb	r3, r3
 800a7a4:	2b03      	cmp	r3, #3
 800a7a6:	d107      	bne.n	800a7b8 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a7a8:	f107 030a 	add.w	r3, r7, #10
 800a7ac:	2202      	movs	r2, #2
 800a7ae:	4619      	mov	r1, r3
 800a7b0:	6878      	ldr	r0, [r7, #4]
 800a7b2:	f001 fa82 	bl	800bcba <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a7b6:	e032      	b.n	800a81e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800a7b8:	6839      	ldr	r1, [r7, #0]
 800a7ba:	6878      	ldr	r0, [r7, #4]
 800a7bc:	f001 fa0c 	bl	800bbd8 <USBD_CtlError>
            ret = USBD_FAIL;
 800a7c0:	2303      	movs	r3, #3
 800a7c2:	75fb      	strb	r3, [r7, #23]
          break;
 800a7c4:	e02b      	b.n	800a81e <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a7cc:	b2db      	uxtb	r3, r3
 800a7ce:	2b03      	cmp	r3, #3
 800a7d0:	d107      	bne.n	800a7e2 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a7d2:	f107 030d 	add.w	r3, r7, #13
 800a7d6:	2201      	movs	r2, #1
 800a7d8:	4619      	mov	r1, r3
 800a7da:	6878      	ldr	r0, [r7, #4]
 800a7dc:	f001 fa6d 	bl	800bcba <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a7e0:	e01d      	b.n	800a81e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800a7e2:	6839      	ldr	r1, [r7, #0]
 800a7e4:	6878      	ldr	r0, [r7, #4]
 800a7e6:	f001 f9f7 	bl	800bbd8 <USBD_CtlError>
            ret = USBD_FAIL;
 800a7ea:	2303      	movs	r3, #3
 800a7ec:	75fb      	strb	r3, [r7, #23]
          break;
 800a7ee:	e016      	b.n	800a81e <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a7f6:	b2db      	uxtb	r3, r3
 800a7f8:	2b03      	cmp	r3, #3
 800a7fa:	d00f      	beq.n	800a81c <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800a7fc:	6839      	ldr	r1, [r7, #0]
 800a7fe:	6878      	ldr	r0, [r7, #4]
 800a800:	f001 f9ea 	bl	800bbd8 <USBD_CtlError>
            ret = USBD_FAIL;
 800a804:	2303      	movs	r3, #3
 800a806:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a808:	e008      	b.n	800a81c <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a80a:	6839      	ldr	r1, [r7, #0]
 800a80c:	6878      	ldr	r0, [r7, #4]
 800a80e:	f001 f9e3 	bl	800bbd8 <USBD_CtlError>
          ret = USBD_FAIL;
 800a812:	2303      	movs	r3, #3
 800a814:	75fb      	strb	r3, [r7, #23]
          break;
 800a816:	e002      	b.n	800a81e <USBD_CDC_Setup+0x176>
          break;
 800a818:	bf00      	nop
 800a81a:	e008      	b.n	800a82e <USBD_CDC_Setup+0x186>
          break;
 800a81c:	bf00      	nop
      }
      break;
 800a81e:	e006      	b.n	800a82e <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800a820:	6839      	ldr	r1, [r7, #0]
 800a822:	6878      	ldr	r0, [r7, #4]
 800a824:	f001 f9d8 	bl	800bbd8 <USBD_CtlError>
      ret = USBD_FAIL;
 800a828:	2303      	movs	r3, #3
 800a82a:	75fb      	strb	r3, [r7, #23]
      break;
 800a82c:	bf00      	nop
  }

  return (uint8_t)ret;
 800a82e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a830:	4618      	mov	r0, r3
 800a832:	3718      	adds	r7, #24
 800a834:	46bd      	mov	sp, r7
 800a836:	bd80      	pop	{r7, pc}

0800a838 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	b084      	sub	sp, #16
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
 800a840:	460b      	mov	r3, r1
 800a842:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a84a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a852:	2b00      	cmp	r3, #0
 800a854:	d101      	bne.n	800a85a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a856:	2303      	movs	r3, #3
 800a858:	e04f      	b.n	800a8fa <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a860:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a862:	78fa      	ldrb	r2, [r7, #3]
 800a864:	6879      	ldr	r1, [r7, #4]
 800a866:	4613      	mov	r3, r2
 800a868:	009b      	lsls	r3, r3, #2
 800a86a:	4413      	add	r3, r2
 800a86c:	009b      	lsls	r3, r3, #2
 800a86e:	440b      	add	r3, r1
 800a870:	3318      	adds	r3, #24
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	2b00      	cmp	r3, #0
 800a876:	d029      	beq.n	800a8cc <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a878:	78fa      	ldrb	r2, [r7, #3]
 800a87a:	6879      	ldr	r1, [r7, #4]
 800a87c:	4613      	mov	r3, r2
 800a87e:	009b      	lsls	r3, r3, #2
 800a880:	4413      	add	r3, r2
 800a882:	009b      	lsls	r3, r3, #2
 800a884:	440b      	add	r3, r1
 800a886:	3318      	adds	r3, #24
 800a888:	681a      	ldr	r2, [r3, #0]
 800a88a:	78f9      	ldrb	r1, [r7, #3]
 800a88c:	68f8      	ldr	r0, [r7, #12]
 800a88e:	460b      	mov	r3, r1
 800a890:	009b      	lsls	r3, r3, #2
 800a892:	440b      	add	r3, r1
 800a894:	00db      	lsls	r3, r3, #3
 800a896:	4403      	add	r3, r0
 800a898:	3320      	adds	r3, #32
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	fbb2 f1f3 	udiv	r1, r2, r3
 800a8a0:	fb01 f303 	mul.w	r3, r1, r3
 800a8a4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d110      	bne.n	800a8cc <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800a8aa:	78fa      	ldrb	r2, [r7, #3]
 800a8ac:	6879      	ldr	r1, [r7, #4]
 800a8ae:	4613      	mov	r3, r2
 800a8b0:	009b      	lsls	r3, r3, #2
 800a8b2:	4413      	add	r3, r2
 800a8b4:	009b      	lsls	r3, r3, #2
 800a8b6:	440b      	add	r3, r1
 800a8b8:	3318      	adds	r3, #24
 800a8ba:	2200      	movs	r2, #0
 800a8bc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a8be:	78f9      	ldrb	r1, [r7, #3]
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	6878      	ldr	r0, [r7, #4]
 800a8c6:	f005 fb64 	bl	800ff92 <USBD_LL_Transmit>
 800a8ca:	e015      	b.n	800a8f8 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800a8cc:	68bb      	ldr	r3, [r7, #8]
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a8da:	691b      	ldr	r3, [r3, #16]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d00b      	beq.n	800a8f8 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a8e6:	691b      	ldr	r3, [r3, #16]
 800a8e8:	68ba      	ldr	r2, [r7, #8]
 800a8ea:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800a8ee:	68ba      	ldr	r2, [r7, #8]
 800a8f0:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800a8f4:	78fa      	ldrb	r2, [r7, #3]
 800a8f6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a8f8:	2300      	movs	r3, #0
}
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	3710      	adds	r7, #16
 800a8fe:	46bd      	mov	sp, r7
 800a900:	bd80      	pop	{r7, pc}

0800a902 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a902:	b580      	push	{r7, lr}
 800a904:	b084      	sub	sp, #16
 800a906:	af00      	add	r7, sp, #0
 800a908:	6078      	str	r0, [r7, #4]
 800a90a:	460b      	mov	r3, r1
 800a90c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a914:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d101      	bne.n	800a924 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a920:	2303      	movs	r3, #3
 800a922:	e015      	b.n	800a950 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a924:	78fb      	ldrb	r3, [r7, #3]
 800a926:	4619      	mov	r1, r3
 800a928:	6878      	ldr	r0, [r7, #4]
 800a92a:	f005 fb74 	bl	8010016 <USBD_LL_GetRxDataSize>
 800a92e:	4602      	mov	r2, r0
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a93c:	68db      	ldr	r3, [r3, #12]
 800a93e:	68fa      	ldr	r2, [r7, #12]
 800a940:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800a944:	68fa      	ldr	r2, [r7, #12]
 800a946:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800a94a:	4611      	mov	r1, r2
 800a94c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a94e:	2300      	movs	r3, #0
}
 800a950:	4618      	mov	r0, r3
 800a952:	3710      	adds	r7, #16
 800a954:	46bd      	mov	sp, r7
 800a956:	bd80      	pop	{r7, pc}

0800a958 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a958:	b580      	push	{r7, lr}
 800a95a:	b084      	sub	sp, #16
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a966:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d101      	bne.n	800a972 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800a96e:	2303      	movs	r3, #3
 800a970:	e01a      	b.n	800a9a8 <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d014      	beq.n	800a9a6 <USBD_CDC_EP0_RxReady+0x4e>
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800a982:	2bff      	cmp	r3, #255	@ 0xff
 800a984:	d00f      	beq.n	800a9a6 <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a98c:	689b      	ldr	r3, [r3, #8]
 800a98e:	68fa      	ldr	r2, [r7, #12]
 800a990:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 800a994:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a996:	68fa      	ldr	r2, [r7, #12]
 800a998:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a99c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	22ff      	movs	r2, #255	@ 0xff
 800a9a2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800a9a6:	2300      	movs	r3, #0
}
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	3710      	adds	r7, #16
 800a9ac:	46bd      	mov	sp, r7
 800a9ae:	bd80      	pop	{r7, pc}

0800a9b0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a9b0:	b480      	push	{r7}
 800a9b2:	b083      	sub	sp, #12
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	2243      	movs	r2, #67	@ 0x43
 800a9bc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800a9be:	4b03      	ldr	r3, [pc, #12]	@ (800a9cc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	370c      	adds	r7, #12
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ca:	4770      	bx	lr
 800a9cc:	200000b4 	.word	0x200000b4

0800a9d0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a9d0:	b480      	push	{r7}
 800a9d2:	b083      	sub	sp, #12
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	2243      	movs	r2, #67	@ 0x43
 800a9dc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800a9de:	4b03      	ldr	r3, [pc, #12]	@ (800a9ec <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	370c      	adds	r7, #12
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ea:	4770      	bx	lr
 800a9ec:	20000070 	.word	0x20000070

0800a9f0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a9f0:	b480      	push	{r7}
 800a9f2:	b083      	sub	sp, #12
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	2243      	movs	r2, #67	@ 0x43
 800a9fc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800a9fe:	4b03      	ldr	r3, [pc, #12]	@ (800aa0c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800aa00:	4618      	mov	r0, r3
 800aa02:	370c      	adds	r7, #12
 800aa04:	46bd      	mov	sp, r7
 800aa06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0a:	4770      	bx	lr
 800aa0c:	200000f8 	.word	0x200000f8

0800aa10 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800aa10:	b480      	push	{r7}
 800aa12:	b083      	sub	sp, #12
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	220a      	movs	r2, #10
 800aa1c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800aa1e:	4b03      	ldr	r3, [pc, #12]	@ (800aa2c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800aa20:	4618      	mov	r0, r3
 800aa22:	370c      	adds	r7, #12
 800aa24:	46bd      	mov	sp, r7
 800aa26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2a:	4770      	bx	lr
 800aa2c:	2000002c 	.word	0x2000002c

0800aa30 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800aa30:	b480      	push	{r7}
 800aa32:	b083      	sub	sp, #12
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	6078      	str	r0, [r7, #4]
 800aa38:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800aa3a:	683b      	ldr	r3, [r7, #0]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d101      	bne.n	800aa44 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800aa40:	2303      	movs	r3, #3
 800aa42:	e004      	b.n	800aa4e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	683a      	ldr	r2, [r7, #0]
 800aa48:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 800aa4c:	2300      	movs	r3, #0
}
 800aa4e:	4618      	mov	r0, r3
 800aa50:	370c      	adds	r7, #12
 800aa52:	46bd      	mov	sp, r7
 800aa54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa58:	4770      	bx	lr

0800aa5a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800aa5a:	b480      	push	{r7}
 800aa5c:	b087      	sub	sp, #28
 800aa5e:	af00      	add	r7, sp, #0
 800aa60:	60f8      	str	r0, [r7, #12]
 800aa62:	60b9      	str	r1, [r7, #8]
 800aa64:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800aa6c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800aa6e:	697b      	ldr	r3, [r7, #20]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d101      	bne.n	800aa78 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800aa74:	2303      	movs	r3, #3
 800aa76:	e008      	b.n	800aa8a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800aa78:	697b      	ldr	r3, [r7, #20]
 800aa7a:	68ba      	ldr	r2, [r7, #8]
 800aa7c:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800aa80:	697b      	ldr	r3, [r7, #20]
 800aa82:	687a      	ldr	r2, [r7, #4]
 800aa84:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800aa88:	2300      	movs	r3, #0
}
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	371c      	adds	r7, #28
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa94:	4770      	bx	lr

0800aa96 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800aa96:	b480      	push	{r7}
 800aa98:	b085      	sub	sp, #20
 800aa9a:	af00      	add	r7, sp, #0
 800aa9c:	6078      	str	r0, [r7, #4]
 800aa9e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800aaa6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d101      	bne.n	800aab2 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800aaae:	2303      	movs	r3, #3
 800aab0:	e004      	b.n	800aabc <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	683a      	ldr	r2, [r7, #0]
 800aab6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800aaba:	2300      	movs	r3, #0
}
 800aabc:	4618      	mov	r0, r3
 800aabe:	3714      	adds	r7, #20
 800aac0:	46bd      	mov	sp, r7
 800aac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac6:	4770      	bx	lr

0800aac8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800aac8:	b580      	push	{r7, lr}
 800aaca:	b084      	sub	sp, #16
 800aacc:	af00      	add	r7, sp, #0
 800aace:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800aad6:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800aad8:	2301      	movs	r3, #1
 800aada:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d101      	bne.n	800aaea <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800aae6:	2303      	movs	r3, #3
 800aae8:	e01a      	b.n	800ab20 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800aaea:	68bb      	ldr	r3, [r7, #8]
 800aaec:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d114      	bne.n	800ab1e <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800aaf4:	68bb      	ldr	r3, [r7, #8]
 800aaf6:	2201      	movs	r2, #1
 800aaf8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800aafc:	68bb      	ldr	r3, [r7, #8]
 800aafe:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800ab06:	68bb      	ldr	r3, [r7, #8]
 800ab08:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800ab0c:	68bb      	ldr	r3, [r7, #8]
 800ab0e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800ab12:	2181      	movs	r1, #129	@ 0x81
 800ab14:	6878      	ldr	r0, [r7, #4]
 800ab16:	f005 fa3c 	bl	800ff92 <USBD_LL_Transmit>

    ret = USBD_OK;
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800ab1e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab20:	4618      	mov	r0, r3
 800ab22:	3710      	adds	r7, #16
 800ab24:	46bd      	mov	sp, r7
 800ab26:	bd80      	pop	{r7, pc}

0800ab28 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800ab28:	b580      	push	{r7, lr}
 800ab2a:	b084      	sub	sp, #16
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ab36:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d101      	bne.n	800ab46 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800ab42:	2303      	movs	r3, #3
 800ab44:	e016      	b.n	800ab74 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	7c1b      	ldrb	r3, [r3, #16]
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d109      	bne.n	800ab62 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ab54:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ab58:	2101      	movs	r1, #1
 800ab5a:	6878      	ldr	r0, [r7, #4]
 800ab5c:	f005 fa3a 	bl	800ffd4 <USBD_LL_PrepareReceive>
 800ab60:	e007      	b.n	800ab72 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ab68:	2340      	movs	r3, #64	@ 0x40
 800ab6a:	2101      	movs	r1, #1
 800ab6c:	6878      	ldr	r0, [r7, #4]
 800ab6e:	f005 fa31 	bl	800ffd4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ab72:	2300      	movs	r3, #0
}
 800ab74:	4618      	mov	r0, r3
 800ab76:	3710      	adds	r7, #16
 800ab78:	46bd      	mov	sp, r7
 800ab7a:	bd80      	pop	{r7, pc}

0800ab7c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ab7c:	b580      	push	{r7, lr}
 800ab7e:	b086      	sub	sp, #24
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	60f8      	str	r0, [r7, #12]
 800ab84:	60b9      	str	r1, [r7, #8]
 800ab86:	4613      	mov	r3, r2
 800ab88:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d101      	bne.n	800ab94 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800ab90:	2303      	movs	r3, #3
 800ab92:	e01f      	b.n	800abd4 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	2200      	movs	r2, #0
 800ab98:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	2200      	movs	r2, #0
 800aba0:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	2200      	movs	r2, #0
 800aba8:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800abac:	68bb      	ldr	r3, [r7, #8]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d003      	beq.n	800abba <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	68ba      	ldr	r2, [r7, #8]
 800abb6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	2201      	movs	r2, #1
 800abbe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	79fa      	ldrb	r2, [r7, #7]
 800abc6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800abc8:	68f8      	ldr	r0, [r7, #12]
 800abca:	f005 f899 	bl	800fd00 <USBD_LL_Init>
 800abce:	4603      	mov	r3, r0
 800abd0:	75fb      	strb	r3, [r7, #23]

  return ret;
 800abd2:	7dfb      	ldrb	r3, [r7, #23]
}
 800abd4:	4618      	mov	r0, r3
 800abd6:	3718      	adds	r7, #24
 800abd8:	46bd      	mov	sp, r7
 800abda:	bd80      	pop	{r7, pc}

0800abdc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800abdc:	b580      	push	{r7, lr}
 800abde:	b084      	sub	sp, #16
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	6078      	str	r0, [r7, #4]
 800abe4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800abe6:	2300      	movs	r3, #0
 800abe8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800abea:	683b      	ldr	r3, [r7, #0]
 800abec:	2b00      	cmp	r3, #0
 800abee:	d101      	bne.n	800abf4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800abf0:	2303      	movs	r3, #3
 800abf2:	e016      	b.n	800ac22 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	683a      	ldr	r2, [r7, #0]
 800abf8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ac02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d00b      	beq.n	800ac20 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ac0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac10:	f107 020e 	add.w	r2, r7, #14
 800ac14:	4610      	mov	r0, r2
 800ac16:	4798      	blx	r3
 800ac18:	4602      	mov	r2, r0
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800ac20:	2300      	movs	r3, #0
}
 800ac22:	4618      	mov	r0, r3
 800ac24:	3710      	adds	r7, #16
 800ac26:	46bd      	mov	sp, r7
 800ac28:	bd80      	pop	{r7, pc}

0800ac2a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ac2a:	b580      	push	{r7, lr}
 800ac2c:	b082      	sub	sp, #8
 800ac2e:	af00      	add	r7, sp, #0
 800ac30:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ac32:	6878      	ldr	r0, [r7, #4]
 800ac34:	f005 f8c4 	bl	800fdc0 <USBD_LL_Start>
 800ac38:	4603      	mov	r3, r0
}
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	3708      	adds	r7, #8
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	bd80      	pop	{r7, pc}

0800ac42 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800ac42:	b480      	push	{r7}
 800ac44:	b083      	sub	sp, #12
 800ac46:	af00      	add	r7, sp, #0
 800ac48:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ac4a:	2300      	movs	r3, #0
}
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	370c      	adds	r7, #12
 800ac50:	46bd      	mov	sp, r7
 800ac52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac56:	4770      	bx	lr

0800ac58 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b084      	sub	sp, #16
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
 800ac60:	460b      	mov	r3, r1
 800ac62:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800ac64:	2303      	movs	r3, #3
 800ac66:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d009      	beq.n	800ac86 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	78fa      	ldrb	r2, [r7, #3]
 800ac7c:	4611      	mov	r1, r2
 800ac7e:	6878      	ldr	r0, [r7, #4]
 800ac80:	4798      	blx	r3
 800ac82:	4603      	mov	r3, r0
 800ac84:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800ac86:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac88:	4618      	mov	r0, r3
 800ac8a:	3710      	adds	r7, #16
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	bd80      	pop	{r7, pc}

0800ac90 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ac90:	b580      	push	{r7, lr}
 800ac92:	b082      	sub	sp, #8
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
 800ac98:	460b      	mov	r3, r1
 800ac9a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d007      	beq.n	800acb6 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800acac:	685b      	ldr	r3, [r3, #4]
 800acae:	78fa      	ldrb	r2, [r7, #3]
 800acb0:	4611      	mov	r1, r2
 800acb2:	6878      	ldr	r0, [r7, #4]
 800acb4:	4798      	blx	r3
  }

  return USBD_OK;
 800acb6:	2300      	movs	r3, #0
}
 800acb8:	4618      	mov	r0, r3
 800acba:	3708      	adds	r7, #8
 800acbc:	46bd      	mov	sp, r7
 800acbe:	bd80      	pop	{r7, pc}

0800acc0 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800acc0:	b580      	push	{r7, lr}
 800acc2:	b084      	sub	sp, #16
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	6078      	str	r0, [r7, #4]
 800acc8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800acd0:	6839      	ldr	r1, [r7, #0]
 800acd2:	4618      	mov	r0, r3
 800acd4:	f000 ff46 	bl	800bb64 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	2201      	movs	r2, #1
 800acdc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800ace6:	461a      	mov	r2, r3
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800acf4:	f003 031f 	and.w	r3, r3, #31
 800acf8:	2b02      	cmp	r3, #2
 800acfa:	d01a      	beq.n	800ad32 <USBD_LL_SetupStage+0x72>
 800acfc:	2b02      	cmp	r3, #2
 800acfe:	d822      	bhi.n	800ad46 <USBD_LL_SetupStage+0x86>
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d002      	beq.n	800ad0a <USBD_LL_SetupStage+0x4a>
 800ad04:	2b01      	cmp	r3, #1
 800ad06:	d00a      	beq.n	800ad1e <USBD_LL_SetupStage+0x5e>
 800ad08:	e01d      	b.n	800ad46 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ad10:	4619      	mov	r1, r3
 800ad12:	6878      	ldr	r0, [r7, #4]
 800ad14:	f000 f9ee 	bl	800b0f4 <USBD_StdDevReq>
 800ad18:	4603      	mov	r3, r0
 800ad1a:	73fb      	strb	r3, [r7, #15]
      break;
 800ad1c:	e020      	b.n	800ad60 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ad24:	4619      	mov	r1, r3
 800ad26:	6878      	ldr	r0, [r7, #4]
 800ad28:	f000 fa52 	bl	800b1d0 <USBD_StdItfReq>
 800ad2c:	4603      	mov	r3, r0
 800ad2e:	73fb      	strb	r3, [r7, #15]
      break;
 800ad30:	e016      	b.n	800ad60 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ad38:	4619      	mov	r1, r3
 800ad3a:	6878      	ldr	r0, [r7, #4]
 800ad3c:	f000 fa91 	bl	800b262 <USBD_StdEPReq>
 800ad40:	4603      	mov	r3, r0
 800ad42:	73fb      	strb	r3, [r7, #15]
      break;
 800ad44:	e00c      	b.n	800ad60 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800ad4c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800ad50:	b2db      	uxtb	r3, r3
 800ad52:	4619      	mov	r1, r3
 800ad54:	6878      	ldr	r0, [r7, #4]
 800ad56:	f005 f893 	bl	800fe80 <USBD_LL_StallEP>
 800ad5a:	4603      	mov	r3, r0
 800ad5c:	73fb      	strb	r3, [r7, #15]
      break;
 800ad5e:	bf00      	nop
  }

  return ret;
 800ad60:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad62:	4618      	mov	r0, r3
 800ad64:	3710      	adds	r7, #16
 800ad66:	46bd      	mov	sp, r7
 800ad68:	bd80      	pop	{r7, pc}

0800ad6a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ad6a:	b580      	push	{r7, lr}
 800ad6c:	b086      	sub	sp, #24
 800ad6e:	af00      	add	r7, sp, #0
 800ad70:	60f8      	str	r0, [r7, #12]
 800ad72:	460b      	mov	r3, r1
 800ad74:	607a      	str	r2, [r7, #4]
 800ad76:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800ad78:	7afb      	ldrb	r3, [r7, #11]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d138      	bne.n	800adf0 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800ad84:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800ad8c:	2b03      	cmp	r3, #3
 800ad8e:	d14a      	bne.n	800ae26 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800ad90:	693b      	ldr	r3, [r7, #16]
 800ad92:	689a      	ldr	r2, [r3, #8]
 800ad94:	693b      	ldr	r3, [r7, #16]
 800ad96:	68db      	ldr	r3, [r3, #12]
 800ad98:	429a      	cmp	r2, r3
 800ad9a:	d913      	bls.n	800adc4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ad9c:	693b      	ldr	r3, [r7, #16]
 800ad9e:	689a      	ldr	r2, [r3, #8]
 800ada0:	693b      	ldr	r3, [r7, #16]
 800ada2:	68db      	ldr	r3, [r3, #12]
 800ada4:	1ad2      	subs	r2, r2, r3
 800ada6:	693b      	ldr	r3, [r7, #16]
 800ada8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800adaa:	693b      	ldr	r3, [r7, #16]
 800adac:	68da      	ldr	r2, [r3, #12]
 800adae:	693b      	ldr	r3, [r7, #16]
 800adb0:	689b      	ldr	r3, [r3, #8]
 800adb2:	4293      	cmp	r3, r2
 800adb4:	bf28      	it	cs
 800adb6:	4613      	movcs	r3, r2
 800adb8:	461a      	mov	r2, r3
 800adba:	6879      	ldr	r1, [r7, #4]
 800adbc:	68f8      	ldr	r0, [r7, #12]
 800adbe:	f000 ffc5 	bl	800bd4c <USBD_CtlContinueRx>
 800adc2:	e030      	b.n	800ae26 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800adca:	b2db      	uxtb	r3, r3
 800adcc:	2b03      	cmp	r3, #3
 800adce:	d10b      	bne.n	800ade8 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800add6:	691b      	ldr	r3, [r3, #16]
 800add8:	2b00      	cmp	r3, #0
 800adda:	d005      	beq.n	800ade8 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ade2:	691b      	ldr	r3, [r3, #16]
 800ade4:	68f8      	ldr	r0, [r7, #12]
 800ade6:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800ade8:	68f8      	ldr	r0, [r7, #12]
 800adea:	f000 ffc0 	bl	800bd6e <USBD_CtlSendStatus>
 800adee:	e01a      	b.n	800ae26 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800adf6:	b2db      	uxtb	r3, r3
 800adf8:	2b03      	cmp	r3, #3
 800adfa:	d114      	bne.n	800ae26 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ae02:	699b      	ldr	r3, [r3, #24]
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d00e      	beq.n	800ae26 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ae0e:	699b      	ldr	r3, [r3, #24]
 800ae10:	7afa      	ldrb	r2, [r7, #11]
 800ae12:	4611      	mov	r1, r2
 800ae14:	68f8      	ldr	r0, [r7, #12]
 800ae16:	4798      	blx	r3
 800ae18:	4603      	mov	r3, r0
 800ae1a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800ae1c:	7dfb      	ldrb	r3, [r7, #23]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d001      	beq.n	800ae26 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800ae22:	7dfb      	ldrb	r3, [r7, #23]
 800ae24:	e000      	b.n	800ae28 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800ae26:	2300      	movs	r3, #0
}
 800ae28:	4618      	mov	r0, r3
 800ae2a:	3718      	adds	r7, #24
 800ae2c:	46bd      	mov	sp, r7
 800ae2e:	bd80      	pop	{r7, pc}

0800ae30 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b086      	sub	sp, #24
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	60f8      	str	r0, [r7, #12]
 800ae38:	460b      	mov	r3, r1
 800ae3a:	607a      	str	r2, [r7, #4]
 800ae3c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800ae3e:	7afb      	ldrb	r3, [r7, #11]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d16b      	bne.n	800af1c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	3314      	adds	r3, #20
 800ae48:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800ae50:	2b02      	cmp	r3, #2
 800ae52:	d156      	bne.n	800af02 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800ae54:	693b      	ldr	r3, [r7, #16]
 800ae56:	689a      	ldr	r2, [r3, #8]
 800ae58:	693b      	ldr	r3, [r7, #16]
 800ae5a:	68db      	ldr	r3, [r3, #12]
 800ae5c:	429a      	cmp	r2, r3
 800ae5e:	d914      	bls.n	800ae8a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ae60:	693b      	ldr	r3, [r7, #16]
 800ae62:	689a      	ldr	r2, [r3, #8]
 800ae64:	693b      	ldr	r3, [r7, #16]
 800ae66:	68db      	ldr	r3, [r3, #12]
 800ae68:	1ad2      	subs	r2, r2, r3
 800ae6a:	693b      	ldr	r3, [r7, #16]
 800ae6c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ae6e:	693b      	ldr	r3, [r7, #16]
 800ae70:	689b      	ldr	r3, [r3, #8]
 800ae72:	461a      	mov	r2, r3
 800ae74:	6879      	ldr	r1, [r7, #4]
 800ae76:	68f8      	ldr	r0, [r7, #12]
 800ae78:	f000 ff3a 	bl	800bcf0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	2200      	movs	r2, #0
 800ae80:	2100      	movs	r1, #0
 800ae82:	68f8      	ldr	r0, [r7, #12]
 800ae84:	f005 f8a6 	bl	800ffd4 <USBD_LL_PrepareReceive>
 800ae88:	e03b      	b.n	800af02 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800ae8a:	693b      	ldr	r3, [r7, #16]
 800ae8c:	68da      	ldr	r2, [r3, #12]
 800ae8e:	693b      	ldr	r3, [r7, #16]
 800ae90:	689b      	ldr	r3, [r3, #8]
 800ae92:	429a      	cmp	r2, r3
 800ae94:	d11c      	bne.n	800aed0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800ae96:	693b      	ldr	r3, [r7, #16]
 800ae98:	685a      	ldr	r2, [r3, #4]
 800ae9a:	693b      	ldr	r3, [r7, #16]
 800ae9c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800ae9e:	429a      	cmp	r2, r3
 800aea0:	d316      	bcc.n	800aed0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800aea2:	693b      	ldr	r3, [r7, #16]
 800aea4:	685a      	ldr	r2, [r3, #4]
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800aeac:	429a      	cmp	r2, r3
 800aeae:	d20f      	bcs.n	800aed0 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800aeb0:	2200      	movs	r2, #0
 800aeb2:	2100      	movs	r1, #0
 800aeb4:	68f8      	ldr	r0, [r7, #12]
 800aeb6:	f000 ff1b 	bl	800bcf0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	2200      	movs	r2, #0
 800aebe:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800aec2:	2300      	movs	r3, #0
 800aec4:	2200      	movs	r2, #0
 800aec6:	2100      	movs	r1, #0
 800aec8:	68f8      	ldr	r0, [r7, #12]
 800aeca:	f005 f883 	bl	800ffd4 <USBD_LL_PrepareReceive>
 800aece:	e018      	b.n	800af02 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aed6:	b2db      	uxtb	r3, r3
 800aed8:	2b03      	cmp	r3, #3
 800aeda:	d10b      	bne.n	800aef4 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aee2:	68db      	ldr	r3, [r3, #12]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d005      	beq.n	800aef4 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aeee:	68db      	ldr	r3, [r3, #12]
 800aef0:	68f8      	ldr	r0, [r7, #12]
 800aef2:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800aef4:	2180      	movs	r1, #128	@ 0x80
 800aef6:	68f8      	ldr	r0, [r7, #12]
 800aef8:	f004 ffc2 	bl	800fe80 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800aefc:	68f8      	ldr	r0, [r7, #12]
 800aefe:	f000 ff49 	bl	800bd94 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800af08:	2b01      	cmp	r3, #1
 800af0a:	d122      	bne.n	800af52 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800af0c:	68f8      	ldr	r0, [r7, #12]
 800af0e:	f7ff fe98 	bl	800ac42 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	2200      	movs	r2, #0
 800af16:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800af1a:	e01a      	b.n	800af52 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800af22:	b2db      	uxtb	r3, r3
 800af24:	2b03      	cmp	r3, #3
 800af26:	d114      	bne.n	800af52 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800af2e:	695b      	ldr	r3, [r3, #20]
 800af30:	2b00      	cmp	r3, #0
 800af32:	d00e      	beq.n	800af52 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800af3a:	695b      	ldr	r3, [r3, #20]
 800af3c:	7afa      	ldrb	r2, [r7, #11]
 800af3e:	4611      	mov	r1, r2
 800af40:	68f8      	ldr	r0, [r7, #12]
 800af42:	4798      	blx	r3
 800af44:	4603      	mov	r3, r0
 800af46:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800af48:	7dfb      	ldrb	r3, [r7, #23]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d001      	beq.n	800af52 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800af4e:	7dfb      	ldrb	r3, [r7, #23]
 800af50:	e000      	b.n	800af54 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800af52:	2300      	movs	r3, #0
}
 800af54:	4618      	mov	r0, r3
 800af56:	3718      	adds	r7, #24
 800af58:	46bd      	mov	sp, r7
 800af5a:	bd80      	pop	{r7, pc}

0800af5c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800af5c:	b580      	push	{r7, lr}
 800af5e:	b082      	sub	sp, #8
 800af60:	af00      	add	r7, sp, #0
 800af62:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	2201      	movs	r2, #1
 800af68:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	2200      	movs	r2, #0
 800af70:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	2200      	movs	r2, #0
 800af78:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	2200      	movs	r2, #0
 800af7e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d101      	bne.n	800af90 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800af8c:	2303      	movs	r3, #3
 800af8e:	e02f      	b.n	800aff0 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800af96:	2b00      	cmp	r3, #0
 800af98:	d00f      	beq.n	800afba <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800afa0:	685b      	ldr	r3, [r3, #4]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d009      	beq.n	800afba <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800afac:	685b      	ldr	r3, [r3, #4]
 800afae:	687a      	ldr	r2, [r7, #4]
 800afb0:	6852      	ldr	r2, [r2, #4]
 800afb2:	b2d2      	uxtb	r2, r2
 800afb4:	4611      	mov	r1, r2
 800afb6:	6878      	ldr	r0, [r7, #4]
 800afb8:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800afba:	2340      	movs	r3, #64	@ 0x40
 800afbc:	2200      	movs	r2, #0
 800afbe:	2100      	movs	r1, #0
 800afc0:	6878      	ldr	r0, [r7, #4]
 800afc2:	f004 ff18 	bl	800fdf6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	2201      	movs	r2, #1
 800afca:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	2240      	movs	r2, #64	@ 0x40
 800afd2:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800afd6:	2340      	movs	r3, #64	@ 0x40
 800afd8:	2200      	movs	r2, #0
 800afda:	2180      	movs	r1, #128	@ 0x80
 800afdc:	6878      	ldr	r0, [r7, #4]
 800afde:	f004 ff0a 	bl	800fdf6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	2201      	movs	r2, #1
 800afe6:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	2240      	movs	r2, #64	@ 0x40
 800afec:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800afee:	2300      	movs	r3, #0
}
 800aff0:	4618      	mov	r0, r3
 800aff2:	3708      	adds	r7, #8
 800aff4:	46bd      	mov	sp, r7
 800aff6:	bd80      	pop	{r7, pc}

0800aff8 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800aff8:	b480      	push	{r7}
 800affa:	b083      	sub	sp, #12
 800affc:	af00      	add	r7, sp, #0
 800affe:	6078      	str	r0, [r7, #4]
 800b000:	460b      	mov	r3, r1
 800b002:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	78fa      	ldrb	r2, [r7, #3]
 800b008:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b00a:	2300      	movs	r3, #0
}
 800b00c:	4618      	mov	r0, r3
 800b00e:	370c      	adds	r7, #12
 800b010:	46bd      	mov	sp, r7
 800b012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b016:	4770      	bx	lr

0800b018 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b018:	b480      	push	{r7}
 800b01a:	b083      	sub	sp, #12
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b026:	b2da      	uxtb	r2, r3
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	2204      	movs	r2, #4
 800b032:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800b036:	2300      	movs	r3, #0
}
 800b038:	4618      	mov	r0, r3
 800b03a:	370c      	adds	r7, #12
 800b03c:	46bd      	mov	sp, r7
 800b03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b042:	4770      	bx	lr

0800b044 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b044:	b480      	push	{r7}
 800b046:	b083      	sub	sp, #12
 800b048:	af00      	add	r7, sp, #0
 800b04a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b052:	b2db      	uxtb	r3, r3
 800b054:	2b04      	cmp	r3, #4
 800b056:	d106      	bne.n	800b066 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800b05e:	b2da      	uxtb	r2, r3
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800b066:	2300      	movs	r3, #0
}
 800b068:	4618      	mov	r0, r3
 800b06a:	370c      	adds	r7, #12
 800b06c:	46bd      	mov	sp, r7
 800b06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b072:	4770      	bx	lr

0800b074 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b074:	b580      	push	{r7, lr}
 800b076:	b082      	sub	sp, #8
 800b078:	af00      	add	r7, sp, #0
 800b07a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b082:	2b00      	cmp	r3, #0
 800b084:	d101      	bne.n	800b08a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800b086:	2303      	movs	r3, #3
 800b088:	e012      	b.n	800b0b0 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b090:	b2db      	uxtb	r3, r3
 800b092:	2b03      	cmp	r3, #3
 800b094:	d10b      	bne.n	800b0ae <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b09c:	69db      	ldr	r3, [r3, #28]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d005      	beq.n	800b0ae <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b0a8:	69db      	ldr	r3, [r3, #28]
 800b0aa:	6878      	ldr	r0, [r7, #4]
 800b0ac:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b0ae:	2300      	movs	r3, #0
}
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	3708      	adds	r7, #8
 800b0b4:	46bd      	mov	sp, r7
 800b0b6:	bd80      	pop	{r7, pc}

0800b0b8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b0b8:	b480      	push	{r7}
 800b0ba:	b087      	sub	sp, #28
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b0c4:	697b      	ldr	r3, [r7, #20]
 800b0c6:	781b      	ldrb	r3, [r3, #0]
 800b0c8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b0ca:	697b      	ldr	r3, [r7, #20]
 800b0cc:	3301      	adds	r3, #1
 800b0ce:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b0d0:	697b      	ldr	r3, [r7, #20]
 800b0d2:	781b      	ldrb	r3, [r3, #0]
 800b0d4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b0d6:	8a3b      	ldrh	r3, [r7, #16]
 800b0d8:	021b      	lsls	r3, r3, #8
 800b0da:	b21a      	sxth	r2, r3
 800b0dc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b0e0:	4313      	orrs	r3, r2
 800b0e2:	b21b      	sxth	r3, r3
 800b0e4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b0e6:	89fb      	ldrh	r3, [r7, #14]
}
 800b0e8:	4618      	mov	r0, r3
 800b0ea:	371c      	adds	r7, #28
 800b0ec:	46bd      	mov	sp, r7
 800b0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f2:	4770      	bx	lr

0800b0f4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b0f4:	b580      	push	{r7, lr}
 800b0f6:	b084      	sub	sp, #16
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	6078      	str	r0, [r7, #4]
 800b0fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b0fe:	2300      	movs	r3, #0
 800b100:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b102:	683b      	ldr	r3, [r7, #0]
 800b104:	781b      	ldrb	r3, [r3, #0]
 800b106:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b10a:	2b40      	cmp	r3, #64	@ 0x40
 800b10c:	d005      	beq.n	800b11a <USBD_StdDevReq+0x26>
 800b10e:	2b40      	cmp	r3, #64	@ 0x40
 800b110:	d853      	bhi.n	800b1ba <USBD_StdDevReq+0xc6>
 800b112:	2b00      	cmp	r3, #0
 800b114:	d00b      	beq.n	800b12e <USBD_StdDevReq+0x3a>
 800b116:	2b20      	cmp	r3, #32
 800b118:	d14f      	bne.n	800b1ba <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b120:	689b      	ldr	r3, [r3, #8]
 800b122:	6839      	ldr	r1, [r7, #0]
 800b124:	6878      	ldr	r0, [r7, #4]
 800b126:	4798      	blx	r3
 800b128:	4603      	mov	r3, r0
 800b12a:	73fb      	strb	r3, [r7, #15]
      break;
 800b12c:	e04a      	b.n	800b1c4 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b12e:	683b      	ldr	r3, [r7, #0]
 800b130:	785b      	ldrb	r3, [r3, #1]
 800b132:	2b09      	cmp	r3, #9
 800b134:	d83b      	bhi.n	800b1ae <USBD_StdDevReq+0xba>
 800b136:	a201      	add	r2, pc, #4	@ (adr r2, 800b13c <USBD_StdDevReq+0x48>)
 800b138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b13c:	0800b191 	.word	0x0800b191
 800b140:	0800b1a5 	.word	0x0800b1a5
 800b144:	0800b1af 	.word	0x0800b1af
 800b148:	0800b19b 	.word	0x0800b19b
 800b14c:	0800b1af 	.word	0x0800b1af
 800b150:	0800b16f 	.word	0x0800b16f
 800b154:	0800b165 	.word	0x0800b165
 800b158:	0800b1af 	.word	0x0800b1af
 800b15c:	0800b187 	.word	0x0800b187
 800b160:	0800b179 	.word	0x0800b179
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b164:	6839      	ldr	r1, [r7, #0]
 800b166:	6878      	ldr	r0, [r7, #4]
 800b168:	f000 f9de 	bl	800b528 <USBD_GetDescriptor>
          break;
 800b16c:	e024      	b.n	800b1b8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b16e:	6839      	ldr	r1, [r7, #0]
 800b170:	6878      	ldr	r0, [r7, #4]
 800b172:	f000 fb6d 	bl	800b850 <USBD_SetAddress>
          break;
 800b176:	e01f      	b.n	800b1b8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b178:	6839      	ldr	r1, [r7, #0]
 800b17a:	6878      	ldr	r0, [r7, #4]
 800b17c:	f000 fbac 	bl	800b8d8 <USBD_SetConfig>
 800b180:	4603      	mov	r3, r0
 800b182:	73fb      	strb	r3, [r7, #15]
          break;
 800b184:	e018      	b.n	800b1b8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b186:	6839      	ldr	r1, [r7, #0]
 800b188:	6878      	ldr	r0, [r7, #4]
 800b18a:	f000 fc4b 	bl	800ba24 <USBD_GetConfig>
          break;
 800b18e:	e013      	b.n	800b1b8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b190:	6839      	ldr	r1, [r7, #0]
 800b192:	6878      	ldr	r0, [r7, #4]
 800b194:	f000 fc7c 	bl	800ba90 <USBD_GetStatus>
          break;
 800b198:	e00e      	b.n	800b1b8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b19a:	6839      	ldr	r1, [r7, #0]
 800b19c:	6878      	ldr	r0, [r7, #4]
 800b19e:	f000 fcab 	bl	800baf8 <USBD_SetFeature>
          break;
 800b1a2:	e009      	b.n	800b1b8 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b1a4:	6839      	ldr	r1, [r7, #0]
 800b1a6:	6878      	ldr	r0, [r7, #4]
 800b1a8:	f000 fcba 	bl	800bb20 <USBD_ClrFeature>
          break;
 800b1ac:	e004      	b.n	800b1b8 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800b1ae:	6839      	ldr	r1, [r7, #0]
 800b1b0:	6878      	ldr	r0, [r7, #4]
 800b1b2:	f000 fd11 	bl	800bbd8 <USBD_CtlError>
          break;
 800b1b6:	bf00      	nop
      }
      break;
 800b1b8:	e004      	b.n	800b1c4 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800b1ba:	6839      	ldr	r1, [r7, #0]
 800b1bc:	6878      	ldr	r0, [r7, #4]
 800b1be:	f000 fd0b 	bl	800bbd8 <USBD_CtlError>
      break;
 800b1c2:	bf00      	nop
  }

  return ret;
 800b1c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	3710      	adds	r7, #16
 800b1ca:	46bd      	mov	sp, r7
 800b1cc:	bd80      	pop	{r7, pc}
 800b1ce:	bf00      	nop

0800b1d0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b084      	sub	sp, #16
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	6078      	str	r0, [r7, #4]
 800b1d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b1da:	2300      	movs	r3, #0
 800b1dc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b1de:	683b      	ldr	r3, [r7, #0]
 800b1e0:	781b      	ldrb	r3, [r3, #0]
 800b1e2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b1e6:	2b40      	cmp	r3, #64	@ 0x40
 800b1e8:	d005      	beq.n	800b1f6 <USBD_StdItfReq+0x26>
 800b1ea:	2b40      	cmp	r3, #64	@ 0x40
 800b1ec:	d82f      	bhi.n	800b24e <USBD_StdItfReq+0x7e>
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d001      	beq.n	800b1f6 <USBD_StdItfReq+0x26>
 800b1f2:	2b20      	cmp	r3, #32
 800b1f4:	d12b      	bne.n	800b24e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b1fc:	b2db      	uxtb	r3, r3
 800b1fe:	3b01      	subs	r3, #1
 800b200:	2b02      	cmp	r3, #2
 800b202:	d81d      	bhi.n	800b240 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b204:	683b      	ldr	r3, [r7, #0]
 800b206:	889b      	ldrh	r3, [r3, #4]
 800b208:	b2db      	uxtb	r3, r3
 800b20a:	2b01      	cmp	r3, #1
 800b20c:	d813      	bhi.n	800b236 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b214:	689b      	ldr	r3, [r3, #8]
 800b216:	6839      	ldr	r1, [r7, #0]
 800b218:	6878      	ldr	r0, [r7, #4]
 800b21a:	4798      	blx	r3
 800b21c:	4603      	mov	r3, r0
 800b21e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b220:	683b      	ldr	r3, [r7, #0]
 800b222:	88db      	ldrh	r3, [r3, #6]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d110      	bne.n	800b24a <USBD_StdItfReq+0x7a>
 800b228:	7bfb      	ldrb	r3, [r7, #15]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d10d      	bne.n	800b24a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b22e:	6878      	ldr	r0, [r7, #4]
 800b230:	f000 fd9d 	bl	800bd6e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b234:	e009      	b.n	800b24a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800b236:	6839      	ldr	r1, [r7, #0]
 800b238:	6878      	ldr	r0, [r7, #4]
 800b23a:	f000 fccd 	bl	800bbd8 <USBD_CtlError>
          break;
 800b23e:	e004      	b.n	800b24a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800b240:	6839      	ldr	r1, [r7, #0]
 800b242:	6878      	ldr	r0, [r7, #4]
 800b244:	f000 fcc8 	bl	800bbd8 <USBD_CtlError>
          break;
 800b248:	e000      	b.n	800b24c <USBD_StdItfReq+0x7c>
          break;
 800b24a:	bf00      	nop
      }
      break;
 800b24c:	e004      	b.n	800b258 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800b24e:	6839      	ldr	r1, [r7, #0]
 800b250:	6878      	ldr	r0, [r7, #4]
 800b252:	f000 fcc1 	bl	800bbd8 <USBD_CtlError>
      break;
 800b256:	bf00      	nop
  }

  return ret;
 800b258:	7bfb      	ldrb	r3, [r7, #15]
}
 800b25a:	4618      	mov	r0, r3
 800b25c:	3710      	adds	r7, #16
 800b25e:	46bd      	mov	sp, r7
 800b260:	bd80      	pop	{r7, pc}

0800b262 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b262:	b580      	push	{r7, lr}
 800b264:	b084      	sub	sp, #16
 800b266:	af00      	add	r7, sp, #0
 800b268:	6078      	str	r0, [r7, #4]
 800b26a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b26c:	2300      	movs	r3, #0
 800b26e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800b270:	683b      	ldr	r3, [r7, #0]
 800b272:	889b      	ldrh	r3, [r3, #4]
 800b274:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b276:	683b      	ldr	r3, [r7, #0]
 800b278:	781b      	ldrb	r3, [r3, #0]
 800b27a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b27e:	2b40      	cmp	r3, #64	@ 0x40
 800b280:	d007      	beq.n	800b292 <USBD_StdEPReq+0x30>
 800b282:	2b40      	cmp	r3, #64	@ 0x40
 800b284:	f200 8145 	bhi.w	800b512 <USBD_StdEPReq+0x2b0>
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d00c      	beq.n	800b2a6 <USBD_StdEPReq+0x44>
 800b28c:	2b20      	cmp	r3, #32
 800b28e:	f040 8140 	bne.w	800b512 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b298:	689b      	ldr	r3, [r3, #8]
 800b29a:	6839      	ldr	r1, [r7, #0]
 800b29c:	6878      	ldr	r0, [r7, #4]
 800b29e:	4798      	blx	r3
 800b2a0:	4603      	mov	r3, r0
 800b2a2:	73fb      	strb	r3, [r7, #15]
      break;
 800b2a4:	e13a      	b.n	800b51c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b2a6:	683b      	ldr	r3, [r7, #0]
 800b2a8:	785b      	ldrb	r3, [r3, #1]
 800b2aa:	2b03      	cmp	r3, #3
 800b2ac:	d007      	beq.n	800b2be <USBD_StdEPReq+0x5c>
 800b2ae:	2b03      	cmp	r3, #3
 800b2b0:	f300 8129 	bgt.w	800b506 <USBD_StdEPReq+0x2a4>
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d07f      	beq.n	800b3b8 <USBD_StdEPReq+0x156>
 800b2b8:	2b01      	cmp	r3, #1
 800b2ba:	d03c      	beq.n	800b336 <USBD_StdEPReq+0xd4>
 800b2bc:	e123      	b.n	800b506 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b2c4:	b2db      	uxtb	r3, r3
 800b2c6:	2b02      	cmp	r3, #2
 800b2c8:	d002      	beq.n	800b2d0 <USBD_StdEPReq+0x6e>
 800b2ca:	2b03      	cmp	r3, #3
 800b2cc:	d016      	beq.n	800b2fc <USBD_StdEPReq+0x9a>
 800b2ce:	e02c      	b.n	800b32a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b2d0:	7bbb      	ldrb	r3, [r7, #14]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d00d      	beq.n	800b2f2 <USBD_StdEPReq+0x90>
 800b2d6:	7bbb      	ldrb	r3, [r7, #14]
 800b2d8:	2b80      	cmp	r3, #128	@ 0x80
 800b2da:	d00a      	beq.n	800b2f2 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b2dc:	7bbb      	ldrb	r3, [r7, #14]
 800b2de:	4619      	mov	r1, r3
 800b2e0:	6878      	ldr	r0, [r7, #4]
 800b2e2:	f004 fdcd 	bl	800fe80 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b2e6:	2180      	movs	r1, #128	@ 0x80
 800b2e8:	6878      	ldr	r0, [r7, #4]
 800b2ea:	f004 fdc9 	bl	800fe80 <USBD_LL_StallEP>
 800b2ee:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b2f0:	e020      	b.n	800b334 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800b2f2:	6839      	ldr	r1, [r7, #0]
 800b2f4:	6878      	ldr	r0, [r7, #4]
 800b2f6:	f000 fc6f 	bl	800bbd8 <USBD_CtlError>
              break;
 800b2fa:	e01b      	b.n	800b334 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b2fc:	683b      	ldr	r3, [r7, #0]
 800b2fe:	885b      	ldrh	r3, [r3, #2]
 800b300:	2b00      	cmp	r3, #0
 800b302:	d10e      	bne.n	800b322 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b304:	7bbb      	ldrb	r3, [r7, #14]
 800b306:	2b00      	cmp	r3, #0
 800b308:	d00b      	beq.n	800b322 <USBD_StdEPReq+0xc0>
 800b30a:	7bbb      	ldrb	r3, [r7, #14]
 800b30c:	2b80      	cmp	r3, #128	@ 0x80
 800b30e:	d008      	beq.n	800b322 <USBD_StdEPReq+0xc0>
 800b310:	683b      	ldr	r3, [r7, #0]
 800b312:	88db      	ldrh	r3, [r3, #6]
 800b314:	2b00      	cmp	r3, #0
 800b316:	d104      	bne.n	800b322 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b318:	7bbb      	ldrb	r3, [r7, #14]
 800b31a:	4619      	mov	r1, r3
 800b31c:	6878      	ldr	r0, [r7, #4]
 800b31e:	f004 fdaf 	bl	800fe80 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b322:	6878      	ldr	r0, [r7, #4]
 800b324:	f000 fd23 	bl	800bd6e <USBD_CtlSendStatus>

              break;
 800b328:	e004      	b.n	800b334 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800b32a:	6839      	ldr	r1, [r7, #0]
 800b32c:	6878      	ldr	r0, [r7, #4]
 800b32e:	f000 fc53 	bl	800bbd8 <USBD_CtlError>
              break;
 800b332:	bf00      	nop
          }
          break;
 800b334:	e0ec      	b.n	800b510 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b33c:	b2db      	uxtb	r3, r3
 800b33e:	2b02      	cmp	r3, #2
 800b340:	d002      	beq.n	800b348 <USBD_StdEPReq+0xe6>
 800b342:	2b03      	cmp	r3, #3
 800b344:	d016      	beq.n	800b374 <USBD_StdEPReq+0x112>
 800b346:	e030      	b.n	800b3aa <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b348:	7bbb      	ldrb	r3, [r7, #14]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d00d      	beq.n	800b36a <USBD_StdEPReq+0x108>
 800b34e:	7bbb      	ldrb	r3, [r7, #14]
 800b350:	2b80      	cmp	r3, #128	@ 0x80
 800b352:	d00a      	beq.n	800b36a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b354:	7bbb      	ldrb	r3, [r7, #14]
 800b356:	4619      	mov	r1, r3
 800b358:	6878      	ldr	r0, [r7, #4]
 800b35a:	f004 fd91 	bl	800fe80 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b35e:	2180      	movs	r1, #128	@ 0x80
 800b360:	6878      	ldr	r0, [r7, #4]
 800b362:	f004 fd8d 	bl	800fe80 <USBD_LL_StallEP>
 800b366:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b368:	e025      	b.n	800b3b6 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800b36a:	6839      	ldr	r1, [r7, #0]
 800b36c:	6878      	ldr	r0, [r7, #4]
 800b36e:	f000 fc33 	bl	800bbd8 <USBD_CtlError>
              break;
 800b372:	e020      	b.n	800b3b6 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b374:	683b      	ldr	r3, [r7, #0]
 800b376:	885b      	ldrh	r3, [r3, #2]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d11b      	bne.n	800b3b4 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b37c:	7bbb      	ldrb	r3, [r7, #14]
 800b37e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b382:	2b00      	cmp	r3, #0
 800b384:	d004      	beq.n	800b390 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b386:	7bbb      	ldrb	r3, [r7, #14]
 800b388:	4619      	mov	r1, r3
 800b38a:	6878      	ldr	r0, [r7, #4]
 800b38c:	f004 fd97 	bl	800febe <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b390:	6878      	ldr	r0, [r7, #4]
 800b392:	f000 fcec 	bl	800bd6e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b39c:	689b      	ldr	r3, [r3, #8]
 800b39e:	6839      	ldr	r1, [r7, #0]
 800b3a0:	6878      	ldr	r0, [r7, #4]
 800b3a2:	4798      	blx	r3
 800b3a4:	4603      	mov	r3, r0
 800b3a6:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800b3a8:	e004      	b.n	800b3b4 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800b3aa:	6839      	ldr	r1, [r7, #0]
 800b3ac:	6878      	ldr	r0, [r7, #4]
 800b3ae:	f000 fc13 	bl	800bbd8 <USBD_CtlError>
              break;
 800b3b2:	e000      	b.n	800b3b6 <USBD_StdEPReq+0x154>
              break;
 800b3b4:	bf00      	nop
          }
          break;
 800b3b6:	e0ab      	b.n	800b510 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b3be:	b2db      	uxtb	r3, r3
 800b3c0:	2b02      	cmp	r3, #2
 800b3c2:	d002      	beq.n	800b3ca <USBD_StdEPReq+0x168>
 800b3c4:	2b03      	cmp	r3, #3
 800b3c6:	d032      	beq.n	800b42e <USBD_StdEPReq+0x1cc>
 800b3c8:	e097      	b.n	800b4fa <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b3ca:	7bbb      	ldrb	r3, [r7, #14]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d007      	beq.n	800b3e0 <USBD_StdEPReq+0x17e>
 800b3d0:	7bbb      	ldrb	r3, [r7, #14]
 800b3d2:	2b80      	cmp	r3, #128	@ 0x80
 800b3d4:	d004      	beq.n	800b3e0 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800b3d6:	6839      	ldr	r1, [r7, #0]
 800b3d8:	6878      	ldr	r0, [r7, #4]
 800b3da:	f000 fbfd 	bl	800bbd8 <USBD_CtlError>
                break;
 800b3de:	e091      	b.n	800b504 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b3e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	da0b      	bge.n	800b400 <USBD_StdEPReq+0x19e>
 800b3e8:	7bbb      	ldrb	r3, [r7, #14]
 800b3ea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b3ee:	4613      	mov	r3, r2
 800b3f0:	009b      	lsls	r3, r3, #2
 800b3f2:	4413      	add	r3, r2
 800b3f4:	009b      	lsls	r3, r3, #2
 800b3f6:	3310      	adds	r3, #16
 800b3f8:	687a      	ldr	r2, [r7, #4]
 800b3fa:	4413      	add	r3, r2
 800b3fc:	3304      	adds	r3, #4
 800b3fe:	e00b      	b.n	800b418 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b400:	7bbb      	ldrb	r3, [r7, #14]
 800b402:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b406:	4613      	mov	r3, r2
 800b408:	009b      	lsls	r3, r3, #2
 800b40a:	4413      	add	r3, r2
 800b40c:	009b      	lsls	r3, r3, #2
 800b40e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b412:	687a      	ldr	r2, [r7, #4]
 800b414:	4413      	add	r3, r2
 800b416:	3304      	adds	r3, #4
 800b418:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b41a:	68bb      	ldr	r3, [r7, #8]
 800b41c:	2200      	movs	r2, #0
 800b41e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b420:	68bb      	ldr	r3, [r7, #8]
 800b422:	2202      	movs	r2, #2
 800b424:	4619      	mov	r1, r3
 800b426:	6878      	ldr	r0, [r7, #4]
 800b428:	f000 fc47 	bl	800bcba <USBD_CtlSendData>
              break;
 800b42c:	e06a      	b.n	800b504 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b42e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b432:	2b00      	cmp	r3, #0
 800b434:	da11      	bge.n	800b45a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b436:	7bbb      	ldrb	r3, [r7, #14]
 800b438:	f003 020f 	and.w	r2, r3, #15
 800b43c:	6879      	ldr	r1, [r7, #4]
 800b43e:	4613      	mov	r3, r2
 800b440:	009b      	lsls	r3, r3, #2
 800b442:	4413      	add	r3, r2
 800b444:	009b      	lsls	r3, r3, #2
 800b446:	440b      	add	r3, r1
 800b448:	3324      	adds	r3, #36	@ 0x24
 800b44a:	881b      	ldrh	r3, [r3, #0]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d117      	bne.n	800b480 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800b450:	6839      	ldr	r1, [r7, #0]
 800b452:	6878      	ldr	r0, [r7, #4]
 800b454:	f000 fbc0 	bl	800bbd8 <USBD_CtlError>
                  break;
 800b458:	e054      	b.n	800b504 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b45a:	7bbb      	ldrb	r3, [r7, #14]
 800b45c:	f003 020f 	and.w	r2, r3, #15
 800b460:	6879      	ldr	r1, [r7, #4]
 800b462:	4613      	mov	r3, r2
 800b464:	009b      	lsls	r3, r3, #2
 800b466:	4413      	add	r3, r2
 800b468:	009b      	lsls	r3, r3, #2
 800b46a:	440b      	add	r3, r1
 800b46c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b470:	881b      	ldrh	r3, [r3, #0]
 800b472:	2b00      	cmp	r3, #0
 800b474:	d104      	bne.n	800b480 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800b476:	6839      	ldr	r1, [r7, #0]
 800b478:	6878      	ldr	r0, [r7, #4]
 800b47a:	f000 fbad 	bl	800bbd8 <USBD_CtlError>
                  break;
 800b47e:	e041      	b.n	800b504 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b480:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b484:	2b00      	cmp	r3, #0
 800b486:	da0b      	bge.n	800b4a0 <USBD_StdEPReq+0x23e>
 800b488:	7bbb      	ldrb	r3, [r7, #14]
 800b48a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b48e:	4613      	mov	r3, r2
 800b490:	009b      	lsls	r3, r3, #2
 800b492:	4413      	add	r3, r2
 800b494:	009b      	lsls	r3, r3, #2
 800b496:	3310      	adds	r3, #16
 800b498:	687a      	ldr	r2, [r7, #4]
 800b49a:	4413      	add	r3, r2
 800b49c:	3304      	adds	r3, #4
 800b49e:	e00b      	b.n	800b4b8 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b4a0:	7bbb      	ldrb	r3, [r7, #14]
 800b4a2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b4a6:	4613      	mov	r3, r2
 800b4a8:	009b      	lsls	r3, r3, #2
 800b4aa:	4413      	add	r3, r2
 800b4ac:	009b      	lsls	r3, r3, #2
 800b4ae:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b4b2:	687a      	ldr	r2, [r7, #4]
 800b4b4:	4413      	add	r3, r2
 800b4b6:	3304      	adds	r3, #4
 800b4b8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b4ba:	7bbb      	ldrb	r3, [r7, #14]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d002      	beq.n	800b4c6 <USBD_StdEPReq+0x264>
 800b4c0:	7bbb      	ldrb	r3, [r7, #14]
 800b4c2:	2b80      	cmp	r3, #128	@ 0x80
 800b4c4:	d103      	bne.n	800b4ce <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800b4c6:	68bb      	ldr	r3, [r7, #8]
 800b4c8:	2200      	movs	r2, #0
 800b4ca:	601a      	str	r2, [r3, #0]
 800b4cc:	e00e      	b.n	800b4ec <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b4ce:	7bbb      	ldrb	r3, [r7, #14]
 800b4d0:	4619      	mov	r1, r3
 800b4d2:	6878      	ldr	r0, [r7, #4]
 800b4d4:	f004 fd12 	bl	800fefc <USBD_LL_IsStallEP>
 800b4d8:	4603      	mov	r3, r0
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d003      	beq.n	800b4e6 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800b4de:	68bb      	ldr	r3, [r7, #8]
 800b4e0:	2201      	movs	r2, #1
 800b4e2:	601a      	str	r2, [r3, #0]
 800b4e4:	e002      	b.n	800b4ec <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800b4e6:	68bb      	ldr	r3, [r7, #8]
 800b4e8:	2200      	movs	r2, #0
 800b4ea:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b4ec:	68bb      	ldr	r3, [r7, #8]
 800b4ee:	2202      	movs	r2, #2
 800b4f0:	4619      	mov	r1, r3
 800b4f2:	6878      	ldr	r0, [r7, #4]
 800b4f4:	f000 fbe1 	bl	800bcba <USBD_CtlSendData>
              break;
 800b4f8:	e004      	b.n	800b504 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800b4fa:	6839      	ldr	r1, [r7, #0]
 800b4fc:	6878      	ldr	r0, [r7, #4]
 800b4fe:	f000 fb6b 	bl	800bbd8 <USBD_CtlError>
              break;
 800b502:	bf00      	nop
          }
          break;
 800b504:	e004      	b.n	800b510 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800b506:	6839      	ldr	r1, [r7, #0]
 800b508:	6878      	ldr	r0, [r7, #4]
 800b50a:	f000 fb65 	bl	800bbd8 <USBD_CtlError>
          break;
 800b50e:	bf00      	nop
      }
      break;
 800b510:	e004      	b.n	800b51c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800b512:	6839      	ldr	r1, [r7, #0]
 800b514:	6878      	ldr	r0, [r7, #4]
 800b516:	f000 fb5f 	bl	800bbd8 <USBD_CtlError>
      break;
 800b51a:	bf00      	nop
  }

  return ret;
 800b51c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b51e:	4618      	mov	r0, r3
 800b520:	3710      	adds	r7, #16
 800b522:	46bd      	mov	sp, r7
 800b524:	bd80      	pop	{r7, pc}
	...

0800b528 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b528:	b580      	push	{r7, lr}
 800b52a:	b084      	sub	sp, #16
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	6078      	str	r0, [r7, #4]
 800b530:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b532:	2300      	movs	r3, #0
 800b534:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b536:	2300      	movs	r3, #0
 800b538:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b53a:	2300      	movs	r3, #0
 800b53c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b53e:	683b      	ldr	r3, [r7, #0]
 800b540:	885b      	ldrh	r3, [r3, #2]
 800b542:	0a1b      	lsrs	r3, r3, #8
 800b544:	b29b      	uxth	r3, r3
 800b546:	3b01      	subs	r3, #1
 800b548:	2b0e      	cmp	r3, #14
 800b54a:	f200 8152 	bhi.w	800b7f2 <USBD_GetDescriptor+0x2ca>
 800b54e:	a201      	add	r2, pc, #4	@ (adr r2, 800b554 <USBD_GetDescriptor+0x2c>)
 800b550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b554:	0800b5c5 	.word	0x0800b5c5
 800b558:	0800b5dd 	.word	0x0800b5dd
 800b55c:	0800b61d 	.word	0x0800b61d
 800b560:	0800b7f3 	.word	0x0800b7f3
 800b564:	0800b7f3 	.word	0x0800b7f3
 800b568:	0800b793 	.word	0x0800b793
 800b56c:	0800b7bf 	.word	0x0800b7bf
 800b570:	0800b7f3 	.word	0x0800b7f3
 800b574:	0800b7f3 	.word	0x0800b7f3
 800b578:	0800b7f3 	.word	0x0800b7f3
 800b57c:	0800b7f3 	.word	0x0800b7f3
 800b580:	0800b7f3 	.word	0x0800b7f3
 800b584:	0800b7f3 	.word	0x0800b7f3
 800b588:	0800b7f3 	.word	0x0800b7f3
 800b58c:	0800b591 	.word	0x0800b591
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b596:	69db      	ldr	r3, [r3, #28]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d00b      	beq.n	800b5b4 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b5a2:	69db      	ldr	r3, [r3, #28]
 800b5a4:	687a      	ldr	r2, [r7, #4]
 800b5a6:	7c12      	ldrb	r2, [r2, #16]
 800b5a8:	f107 0108 	add.w	r1, r7, #8
 800b5ac:	4610      	mov	r0, r2
 800b5ae:	4798      	blx	r3
 800b5b0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b5b2:	e126      	b.n	800b802 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b5b4:	6839      	ldr	r1, [r7, #0]
 800b5b6:	6878      	ldr	r0, [r7, #4]
 800b5b8:	f000 fb0e 	bl	800bbd8 <USBD_CtlError>
        err++;
 800b5bc:	7afb      	ldrb	r3, [r7, #11]
 800b5be:	3301      	adds	r3, #1
 800b5c0:	72fb      	strb	r3, [r7, #11]
      break;
 800b5c2:	e11e      	b.n	800b802 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	687a      	ldr	r2, [r7, #4]
 800b5ce:	7c12      	ldrb	r2, [r2, #16]
 800b5d0:	f107 0108 	add.w	r1, r7, #8
 800b5d4:	4610      	mov	r0, r2
 800b5d6:	4798      	blx	r3
 800b5d8:	60f8      	str	r0, [r7, #12]
      break;
 800b5da:	e112      	b.n	800b802 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	7c1b      	ldrb	r3, [r3, #16]
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d10d      	bne.n	800b600 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b5ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5ec:	f107 0208 	add.w	r2, r7, #8
 800b5f0:	4610      	mov	r0, r2
 800b5f2:	4798      	blx	r3
 800b5f4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	3301      	adds	r3, #1
 800b5fa:	2202      	movs	r2, #2
 800b5fc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b5fe:	e100      	b.n	800b802 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b608:	f107 0208 	add.w	r2, r7, #8
 800b60c:	4610      	mov	r0, r2
 800b60e:	4798      	blx	r3
 800b610:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	3301      	adds	r3, #1
 800b616:	2202      	movs	r2, #2
 800b618:	701a      	strb	r2, [r3, #0]
      break;
 800b61a:	e0f2      	b.n	800b802 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b61c:	683b      	ldr	r3, [r7, #0]
 800b61e:	885b      	ldrh	r3, [r3, #2]
 800b620:	b2db      	uxtb	r3, r3
 800b622:	2b05      	cmp	r3, #5
 800b624:	f200 80ac 	bhi.w	800b780 <USBD_GetDescriptor+0x258>
 800b628:	a201      	add	r2, pc, #4	@ (adr r2, 800b630 <USBD_GetDescriptor+0x108>)
 800b62a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b62e:	bf00      	nop
 800b630:	0800b649 	.word	0x0800b649
 800b634:	0800b67d 	.word	0x0800b67d
 800b638:	0800b6b1 	.word	0x0800b6b1
 800b63c:	0800b6e5 	.word	0x0800b6e5
 800b640:	0800b719 	.word	0x0800b719
 800b644:	0800b74d 	.word	0x0800b74d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b64e:	685b      	ldr	r3, [r3, #4]
 800b650:	2b00      	cmp	r3, #0
 800b652:	d00b      	beq.n	800b66c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b65a:	685b      	ldr	r3, [r3, #4]
 800b65c:	687a      	ldr	r2, [r7, #4]
 800b65e:	7c12      	ldrb	r2, [r2, #16]
 800b660:	f107 0108 	add.w	r1, r7, #8
 800b664:	4610      	mov	r0, r2
 800b666:	4798      	blx	r3
 800b668:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b66a:	e091      	b.n	800b790 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b66c:	6839      	ldr	r1, [r7, #0]
 800b66e:	6878      	ldr	r0, [r7, #4]
 800b670:	f000 fab2 	bl	800bbd8 <USBD_CtlError>
            err++;
 800b674:	7afb      	ldrb	r3, [r7, #11]
 800b676:	3301      	adds	r3, #1
 800b678:	72fb      	strb	r3, [r7, #11]
          break;
 800b67a:	e089      	b.n	800b790 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b682:	689b      	ldr	r3, [r3, #8]
 800b684:	2b00      	cmp	r3, #0
 800b686:	d00b      	beq.n	800b6a0 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b68e:	689b      	ldr	r3, [r3, #8]
 800b690:	687a      	ldr	r2, [r7, #4]
 800b692:	7c12      	ldrb	r2, [r2, #16]
 800b694:	f107 0108 	add.w	r1, r7, #8
 800b698:	4610      	mov	r0, r2
 800b69a:	4798      	blx	r3
 800b69c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b69e:	e077      	b.n	800b790 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b6a0:	6839      	ldr	r1, [r7, #0]
 800b6a2:	6878      	ldr	r0, [r7, #4]
 800b6a4:	f000 fa98 	bl	800bbd8 <USBD_CtlError>
            err++;
 800b6a8:	7afb      	ldrb	r3, [r7, #11]
 800b6aa:	3301      	adds	r3, #1
 800b6ac:	72fb      	strb	r3, [r7, #11]
          break;
 800b6ae:	e06f      	b.n	800b790 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b6b6:	68db      	ldr	r3, [r3, #12]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d00b      	beq.n	800b6d4 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b6c2:	68db      	ldr	r3, [r3, #12]
 800b6c4:	687a      	ldr	r2, [r7, #4]
 800b6c6:	7c12      	ldrb	r2, [r2, #16]
 800b6c8:	f107 0108 	add.w	r1, r7, #8
 800b6cc:	4610      	mov	r0, r2
 800b6ce:	4798      	blx	r3
 800b6d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b6d2:	e05d      	b.n	800b790 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b6d4:	6839      	ldr	r1, [r7, #0]
 800b6d6:	6878      	ldr	r0, [r7, #4]
 800b6d8:	f000 fa7e 	bl	800bbd8 <USBD_CtlError>
            err++;
 800b6dc:	7afb      	ldrb	r3, [r7, #11]
 800b6de:	3301      	adds	r3, #1
 800b6e0:	72fb      	strb	r3, [r7, #11]
          break;
 800b6e2:	e055      	b.n	800b790 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b6ea:	691b      	ldr	r3, [r3, #16]
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d00b      	beq.n	800b708 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b6f6:	691b      	ldr	r3, [r3, #16]
 800b6f8:	687a      	ldr	r2, [r7, #4]
 800b6fa:	7c12      	ldrb	r2, [r2, #16]
 800b6fc:	f107 0108 	add.w	r1, r7, #8
 800b700:	4610      	mov	r0, r2
 800b702:	4798      	blx	r3
 800b704:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b706:	e043      	b.n	800b790 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b708:	6839      	ldr	r1, [r7, #0]
 800b70a:	6878      	ldr	r0, [r7, #4]
 800b70c:	f000 fa64 	bl	800bbd8 <USBD_CtlError>
            err++;
 800b710:	7afb      	ldrb	r3, [r7, #11]
 800b712:	3301      	adds	r3, #1
 800b714:	72fb      	strb	r3, [r7, #11]
          break;
 800b716:	e03b      	b.n	800b790 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b71e:	695b      	ldr	r3, [r3, #20]
 800b720:	2b00      	cmp	r3, #0
 800b722:	d00b      	beq.n	800b73c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b72a:	695b      	ldr	r3, [r3, #20]
 800b72c:	687a      	ldr	r2, [r7, #4]
 800b72e:	7c12      	ldrb	r2, [r2, #16]
 800b730:	f107 0108 	add.w	r1, r7, #8
 800b734:	4610      	mov	r0, r2
 800b736:	4798      	blx	r3
 800b738:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b73a:	e029      	b.n	800b790 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b73c:	6839      	ldr	r1, [r7, #0]
 800b73e:	6878      	ldr	r0, [r7, #4]
 800b740:	f000 fa4a 	bl	800bbd8 <USBD_CtlError>
            err++;
 800b744:	7afb      	ldrb	r3, [r7, #11]
 800b746:	3301      	adds	r3, #1
 800b748:	72fb      	strb	r3, [r7, #11]
          break;
 800b74a:	e021      	b.n	800b790 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b752:	699b      	ldr	r3, [r3, #24]
 800b754:	2b00      	cmp	r3, #0
 800b756:	d00b      	beq.n	800b770 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b75e:	699b      	ldr	r3, [r3, #24]
 800b760:	687a      	ldr	r2, [r7, #4]
 800b762:	7c12      	ldrb	r2, [r2, #16]
 800b764:	f107 0108 	add.w	r1, r7, #8
 800b768:	4610      	mov	r0, r2
 800b76a:	4798      	blx	r3
 800b76c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b76e:	e00f      	b.n	800b790 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b770:	6839      	ldr	r1, [r7, #0]
 800b772:	6878      	ldr	r0, [r7, #4]
 800b774:	f000 fa30 	bl	800bbd8 <USBD_CtlError>
            err++;
 800b778:	7afb      	ldrb	r3, [r7, #11]
 800b77a:	3301      	adds	r3, #1
 800b77c:	72fb      	strb	r3, [r7, #11]
          break;
 800b77e:	e007      	b.n	800b790 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b780:	6839      	ldr	r1, [r7, #0]
 800b782:	6878      	ldr	r0, [r7, #4]
 800b784:	f000 fa28 	bl	800bbd8 <USBD_CtlError>
          err++;
 800b788:	7afb      	ldrb	r3, [r7, #11]
 800b78a:	3301      	adds	r3, #1
 800b78c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800b78e:	bf00      	nop
      }
      break;
 800b790:	e037      	b.n	800b802 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	7c1b      	ldrb	r3, [r3, #16]
 800b796:	2b00      	cmp	r3, #0
 800b798:	d109      	bne.n	800b7ae <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b7a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b7a2:	f107 0208 	add.w	r2, r7, #8
 800b7a6:	4610      	mov	r0, r2
 800b7a8:	4798      	blx	r3
 800b7aa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b7ac:	e029      	b.n	800b802 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b7ae:	6839      	ldr	r1, [r7, #0]
 800b7b0:	6878      	ldr	r0, [r7, #4]
 800b7b2:	f000 fa11 	bl	800bbd8 <USBD_CtlError>
        err++;
 800b7b6:	7afb      	ldrb	r3, [r7, #11]
 800b7b8:	3301      	adds	r3, #1
 800b7ba:	72fb      	strb	r3, [r7, #11]
      break;
 800b7bc:	e021      	b.n	800b802 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	7c1b      	ldrb	r3, [r3, #16]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d10d      	bne.n	800b7e2 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b7cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b7ce:	f107 0208 	add.w	r2, r7, #8
 800b7d2:	4610      	mov	r0, r2
 800b7d4:	4798      	blx	r3
 800b7d6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	3301      	adds	r3, #1
 800b7dc:	2207      	movs	r2, #7
 800b7de:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b7e0:	e00f      	b.n	800b802 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b7e2:	6839      	ldr	r1, [r7, #0]
 800b7e4:	6878      	ldr	r0, [r7, #4]
 800b7e6:	f000 f9f7 	bl	800bbd8 <USBD_CtlError>
        err++;
 800b7ea:	7afb      	ldrb	r3, [r7, #11]
 800b7ec:	3301      	adds	r3, #1
 800b7ee:	72fb      	strb	r3, [r7, #11]
      break;
 800b7f0:	e007      	b.n	800b802 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800b7f2:	6839      	ldr	r1, [r7, #0]
 800b7f4:	6878      	ldr	r0, [r7, #4]
 800b7f6:	f000 f9ef 	bl	800bbd8 <USBD_CtlError>
      err++;
 800b7fa:	7afb      	ldrb	r3, [r7, #11]
 800b7fc:	3301      	adds	r3, #1
 800b7fe:	72fb      	strb	r3, [r7, #11]
      break;
 800b800:	bf00      	nop
  }

  if (err != 0U)
 800b802:	7afb      	ldrb	r3, [r7, #11]
 800b804:	2b00      	cmp	r3, #0
 800b806:	d11e      	bne.n	800b846 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800b808:	683b      	ldr	r3, [r7, #0]
 800b80a:	88db      	ldrh	r3, [r3, #6]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d016      	beq.n	800b83e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800b810:	893b      	ldrh	r3, [r7, #8]
 800b812:	2b00      	cmp	r3, #0
 800b814:	d00e      	beq.n	800b834 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800b816:	683b      	ldr	r3, [r7, #0]
 800b818:	88da      	ldrh	r2, [r3, #6]
 800b81a:	893b      	ldrh	r3, [r7, #8]
 800b81c:	4293      	cmp	r3, r2
 800b81e:	bf28      	it	cs
 800b820:	4613      	movcs	r3, r2
 800b822:	b29b      	uxth	r3, r3
 800b824:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b826:	893b      	ldrh	r3, [r7, #8]
 800b828:	461a      	mov	r2, r3
 800b82a:	68f9      	ldr	r1, [r7, #12]
 800b82c:	6878      	ldr	r0, [r7, #4]
 800b82e:	f000 fa44 	bl	800bcba <USBD_CtlSendData>
 800b832:	e009      	b.n	800b848 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b834:	6839      	ldr	r1, [r7, #0]
 800b836:	6878      	ldr	r0, [r7, #4]
 800b838:	f000 f9ce 	bl	800bbd8 <USBD_CtlError>
 800b83c:	e004      	b.n	800b848 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b83e:	6878      	ldr	r0, [r7, #4]
 800b840:	f000 fa95 	bl	800bd6e <USBD_CtlSendStatus>
 800b844:	e000      	b.n	800b848 <USBD_GetDescriptor+0x320>
    return;
 800b846:	bf00      	nop
  }
}
 800b848:	3710      	adds	r7, #16
 800b84a:	46bd      	mov	sp, r7
 800b84c:	bd80      	pop	{r7, pc}
 800b84e:	bf00      	nop

0800b850 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b850:	b580      	push	{r7, lr}
 800b852:	b084      	sub	sp, #16
 800b854:	af00      	add	r7, sp, #0
 800b856:	6078      	str	r0, [r7, #4]
 800b858:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b85a:	683b      	ldr	r3, [r7, #0]
 800b85c:	889b      	ldrh	r3, [r3, #4]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d131      	bne.n	800b8c6 <USBD_SetAddress+0x76>
 800b862:	683b      	ldr	r3, [r7, #0]
 800b864:	88db      	ldrh	r3, [r3, #6]
 800b866:	2b00      	cmp	r3, #0
 800b868:	d12d      	bne.n	800b8c6 <USBD_SetAddress+0x76>
 800b86a:	683b      	ldr	r3, [r7, #0]
 800b86c:	885b      	ldrh	r3, [r3, #2]
 800b86e:	2b7f      	cmp	r3, #127	@ 0x7f
 800b870:	d829      	bhi.n	800b8c6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b872:	683b      	ldr	r3, [r7, #0]
 800b874:	885b      	ldrh	r3, [r3, #2]
 800b876:	b2db      	uxtb	r3, r3
 800b878:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b87c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b884:	b2db      	uxtb	r3, r3
 800b886:	2b03      	cmp	r3, #3
 800b888:	d104      	bne.n	800b894 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b88a:	6839      	ldr	r1, [r7, #0]
 800b88c:	6878      	ldr	r0, [r7, #4]
 800b88e:	f000 f9a3 	bl	800bbd8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b892:	e01d      	b.n	800b8d0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	7bfa      	ldrb	r2, [r7, #15]
 800b898:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b89c:	7bfb      	ldrb	r3, [r7, #15]
 800b89e:	4619      	mov	r1, r3
 800b8a0:	6878      	ldr	r0, [r7, #4]
 800b8a2:	f004 fb57 	bl	800ff54 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b8a6:	6878      	ldr	r0, [r7, #4]
 800b8a8:	f000 fa61 	bl	800bd6e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b8ac:	7bfb      	ldrb	r3, [r7, #15]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d004      	beq.n	800b8bc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	2202      	movs	r2, #2
 800b8b6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b8ba:	e009      	b.n	800b8d0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	2201      	movs	r2, #1
 800b8c0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b8c4:	e004      	b.n	800b8d0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b8c6:	6839      	ldr	r1, [r7, #0]
 800b8c8:	6878      	ldr	r0, [r7, #4]
 800b8ca:	f000 f985 	bl	800bbd8 <USBD_CtlError>
  }
}
 800b8ce:	bf00      	nop
 800b8d0:	bf00      	nop
 800b8d2:	3710      	adds	r7, #16
 800b8d4:	46bd      	mov	sp, r7
 800b8d6:	bd80      	pop	{r7, pc}

0800b8d8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b8d8:	b580      	push	{r7, lr}
 800b8da:	b084      	sub	sp, #16
 800b8dc:	af00      	add	r7, sp, #0
 800b8de:	6078      	str	r0, [r7, #4]
 800b8e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b8e2:	2300      	movs	r3, #0
 800b8e4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b8e6:	683b      	ldr	r3, [r7, #0]
 800b8e8:	885b      	ldrh	r3, [r3, #2]
 800b8ea:	b2da      	uxtb	r2, r3
 800b8ec:	4b4c      	ldr	r3, [pc, #304]	@ (800ba20 <USBD_SetConfig+0x148>)
 800b8ee:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b8f0:	4b4b      	ldr	r3, [pc, #300]	@ (800ba20 <USBD_SetConfig+0x148>)
 800b8f2:	781b      	ldrb	r3, [r3, #0]
 800b8f4:	2b01      	cmp	r3, #1
 800b8f6:	d905      	bls.n	800b904 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b8f8:	6839      	ldr	r1, [r7, #0]
 800b8fa:	6878      	ldr	r0, [r7, #4]
 800b8fc:	f000 f96c 	bl	800bbd8 <USBD_CtlError>
    return USBD_FAIL;
 800b900:	2303      	movs	r3, #3
 800b902:	e088      	b.n	800ba16 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b90a:	b2db      	uxtb	r3, r3
 800b90c:	2b02      	cmp	r3, #2
 800b90e:	d002      	beq.n	800b916 <USBD_SetConfig+0x3e>
 800b910:	2b03      	cmp	r3, #3
 800b912:	d025      	beq.n	800b960 <USBD_SetConfig+0x88>
 800b914:	e071      	b.n	800b9fa <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b916:	4b42      	ldr	r3, [pc, #264]	@ (800ba20 <USBD_SetConfig+0x148>)
 800b918:	781b      	ldrb	r3, [r3, #0]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d01c      	beq.n	800b958 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800b91e:	4b40      	ldr	r3, [pc, #256]	@ (800ba20 <USBD_SetConfig+0x148>)
 800b920:	781b      	ldrb	r3, [r3, #0]
 800b922:	461a      	mov	r2, r3
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b928:	4b3d      	ldr	r3, [pc, #244]	@ (800ba20 <USBD_SetConfig+0x148>)
 800b92a:	781b      	ldrb	r3, [r3, #0]
 800b92c:	4619      	mov	r1, r3
 800b92e:	6878      	ldr	r0, [r7, #4]
 800b930:	f7ff f992 	bl	800ac58 <USBD_SetClassConfig>
 800b934:	4603      	mov	r3, r0
 800b936:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b938:	7bfb      	ldrb	r3, [r7, #15]
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d004      	beq.n	800b948 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800b93e:	6839      	ldr	r1, [r7, #0]
 800b940:	6878      	ldr	r0, [r7, #4]
 800b942:	f000 f949 	bl	800bbd8 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b946:	e065      	b.n	800ba14 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b948:	6878      	ldr	r0, [r7, #4]
 800b94a:	f000 fa10 	bl	800bd6e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	2203      	movs	r2, #3
 800b952:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b956:	e05d      	b.n	800ba14 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b958:	6878      	ldr	r0, [r7, #4]
 800b95a:	f000 fa08 	bl	800bd6e <USBD_CtlSendStatus>
      break;
 800b95e:	e059      	b.n	800ba14 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b960:	4b2f      	ldr	r3, [pc, #188]	@ (800ba20 <USBD_SetConfig+0x148>)
 800b962:	781b      	ldrb	r3, [r3, #0]
 800b964:	2b00      	cmp	r3, #0
 800b966:	d112      	bne.n	800b98e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	2202      	movs	r2, #2
 800b96c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800b970:	4b2b      	ldr	r3, [pc, #172]	@ (800ba20 <USBD_SetConfig+0x148>)
 800b972:	781b      	ldrb	r3, [r3, #0]
 800b974:	461a      	mov	r2, r3
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b97a:	4b29      	ldr	r3, [pc, #164]	@ (800ba20 <USBD_SetConfig+0x148>)
 800b97c:	781b      	ldrb	r3, [r3, #0]
 800b97e:	4619      	mov	r1, r3
 800b980:	6878      	ldr	r0, [r7, #4]
 800b982:	f7ff f985 	bl	800ac90 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b986:	6878      	ldr	r0, [r7, #4]
 800b988:	f000 f9f1 	bl	800bd6e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b98c:	e042      	b.n	800ba14 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800b98e:	4b24      	ldr	r3, [pc, #144]	@ (800ba20 <USBD_SetConfig+0x148>)
 800b990:	781b      	ldrb	r3, [r3, #0]
 800b992:	461a      	mov	r2, r3
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	685b      	ldr	r3, [r3, #4]
 800b998:	429a      	cmp	r2, r3
 800b99a:	d02a      	beq.n	800b9f2 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	685b      	ldr	r3, [r3, #4]
 800b9a0:	b2db      	uxtb	r3, r3
 800b9a2:	4619      	mov	r1, r3
 800b9a4:	6878      	ldr	r0, [r7, #4]
 800b9a6:	f7ff f973 	bl	800ac90 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b9aa:	4b1d      	ldr	r3, [pc, #116]	@ (800ba20 <USBD_SetConfig+0x148>)
 800b9ac:	781b      	ldrb	r3, [r3, #0]
 800b9ae:	461a      	mov	r2, r3
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b9b4:	4b1a      	ldr	r3, [pc, #104]	@ (800ba20 <USBD_SetConfig+0x148>)
 800b9b6:	781b      	ldrb	r3, [r3, #0]
 800b9b8:	4619      	mov	r1, r3
 800b9ba:	6878      	ldr	r0, [r7, #4]
 800b9bc:	f7ff f94c 	bl	800ac58 <USBD_SetClassConfig>
 800b9c0:	4603      	mov	r3, r0
 800b9c2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b9c4:	7bfb      	ldrb	r3, [r7, #15]
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d00f      	beq.n	800b9ea <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800b9ca:	6839      	ldr	r1, [r7, #0]
 800b9cc:	6878      	ldr	r0, [r7, #4]
 800b9ce:	f000 f903 	bl	800bbd8 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	685b      	ldr	r3, [r3, #4]
 800b9d6:	b2db      	uxtb	r3, r3
 800b9d8:	4619      	mov	r1, r3
 800b9da:	6878      	ldr	r0, [r7, #4]
 800b9dc:	f7ff f958 	bl	800ac90 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	2202      	movs	r2, #2
 800b9e4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b9e8:	e014      	b.n	800ba14 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b9ea:	6878      	ldr	r0, [r7, #4]
 800b9ec:	f000 f9bf 	bl	800bd6e <USBD_CtlSendStatus>
      break;
 800b9f0:	e010      	b.n	800ba14 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b9f2:	6878      	ldr	r0, [r7, #4]
 800b9f4:	f000 f9bb 	bl	800bd6e <USBD_CtlSendStatus>
      break;
 800b9f8:	e00c      	b.n	800ba14 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800b9fa:	6839      	ldr	r1, [r7, #0]
 800b9fc:	6878      	ldr	r0, [r7, #4]
 800b9fe:	f000 f8eb 	bl	800bbd8 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ba02:	4b07      	ldr	r3, [pc, #28]	@ (800ba20 <USBD_SetConfig+0x148>)
 800ba04:	781b      	ldrb	r3, [r3, #0]
 800ba06:	4619      	mov	r1, r3
 800ba08:	6878      	ldr	r0, [r7, #4]
 800ba0a:	f7ff f941 	bl	800ac90 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800ba0e:	2303      	movs	r3, #3
 800ba10:	73fb      	strb	r3, [r7, #15]
      break;
 800ba12:	bf00      	nop
  }

  return ret;
 800ba14:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba16:	4618      	mov	r0, r3
 800ba18:	3710      	adds	r7, #16
 800ba1a:	46bd      	mov	sp, r7
 800ba1c:	bd80      	pop	{r7, pc}
 800ba1e:	bf00      	nop
 800ba20:	2000068c 	.word	0x2000068c

0800ba24 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba24:	b580      	push	{r7, lr}
 800ba26:	b082      	sub	sp, #8
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	6078      	str	r0, [r7, #4]
 800ba2c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ba2e:	683b      	ldr	r3, [r7, #0]
 800ba30:	88db      	ldrh	r3, [r3, #6]
 800ba32:	2b01      	cmp	r3, #1
 800ba34:	d004      	beq.n	800ba40 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ba36:	6839      	ldr	r1, [r7, #0]
 800ba38:	6878      	ldr	r0, [r7, #4]
 800ba3a:	f000 f8cd 	bl	800bbd8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ba3e:	e023      	b.n	800ba88 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ba46:	b2db      	uxtb	r3, r3
 800ba48:	2b02      	cmp	r3, #2
 800ba4a:	dc02      	bgt.n	800ba52 <USBD_GetConfig+0x2e>
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	dc03      	bgt.n	800ba58 <USBD_GetConfig+0x34>
 800ba50:	e015      	b.n	800ba7e <USBD_GetConfig+0x5a>
 800ba52:	2b03      	cmp	r3, #3
 800ba54:	d00b      	beq.n	800ba6e <USBD_GetConfig+0x4a>
 800ba56:	e012      	b.n	800ba7e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	3308      	adds	r3, #8
 800ba62:	2201      	movs	r2, #1
 800ba64:	4619      	mov	r1, r3
 800ba66:	6878      	ldr	r0, [r7, #4]
 800ba68:	f000 f927 	bl	800bcba <USBD_CtlSendData>
        break;
 800ba6c:	e00c      	b.n	800ba88 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	3304      	adds	r3, #4
 800ba72:	2201      	movs	r2, #1
 800ba74:	4619      	mov	r1, r3
 800ba76:	6878      	ldr	r0, [r7, #4]
 800ba78:	f000 f91f 	bl	800bcba <USBD_CtlSendData>
        break;
 800ba7c:	e004      	b.n	800ba88 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800ba7e:	6839      	ldr	r1, [r7, #0]
 800ba80:	6878      	ldr	r0, [r7, #4]
 800ba82:	f000 f8a9 	bl	800bbd8 <USBD_CtlError>
        break;
 800ba86:	bf00      	nop
}
 800ba88:	bf00      	nop
 800ba8a:	3708      	adds	r7, #8
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	bd80      	pop	{r7, pc}

0800ba90 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba90:	b580      	push	{r7, lr}
 800ba92:	b082      	sub	sp, #8
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	6078      	str	r0, [r7, #4]
 800ba98:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800baa0:	b2db      	uxtb	r3, r3
 800baa2:	3b01      	subs	r3, #1
 800baa4:	2b02      	cmp	r3, #2
 800baa6:	d81e      	bhi.n	800bae6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800baa8:	683b      	ldr	r3, [r7, #0]
 800baaa:	88db      	ldrh	r3, [r3, #6]
 800baac:	2b02      	cmp	r3, #2
 800baae:	d004      	beq.n	800baba <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800bab0:	6839      	ldr	r1, [r7, #0]
 800bab2:	6878      	ldr	r0, [r7, #4]
 800bab4:	f000 f890 	bl	800bbd8 <USBD_CtlError>
        break;
 800bab8:	e01a      	b.n	800baf0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	2201      	movs	r2, #1
 800babe:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d005      	beq.n	800bad6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	68db      	ldr	r3, [r3, #12]
 800bace:	f043 0202 	orr.w	r2, r3, #2
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	330c      	adds	r3, #12
 800bada:	2202      	movs	r2, #2
 800badc:	4619      	mov	r1, r3
 800bade:	6878      	ldr	r0, [r7, #4]
 800bae0:	f000 f8eb 	bl	800bcba <USBD_CtlSendData>
      break;
 800bae4:	e004      	b.n	800baf0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800bae6:	6839      	ldr	r1, [r7, #0]
 800bae8:	6878      	ldr	r0, [r7, #4]
 800baea:	f000 f875 	bl	800bbd8 <USBD_CtlError>
      break;
 800baee:	bf00      	nop
  }
}
 800baf0:	bf00      	nop
 800baf2:	3708      	adds	r7, #8
 800baf4:	46bd      	mov	sp, r7
 800baf6:	bd80      	pop	{r7, pc}

0800baf8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800baf8:	b580      	push	{r7, lr}
 800bafa:	b082      	sub	sp, #8
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	6078      	str	r0, [r7, #4]
 800bb00:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bb02:	683b      	ldr	r3, [r7, #0]
 800bb04:	885b      	ldrh	r3, [r3, #2]
 800bb06:	2b01      	cmp	r3, #1
 800bb08:	d106      	bne.n	800bb18 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	2201      	movs	r2, #1
 800bb0e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800bb12:	6878      	ldr	r0, [r7, #4]
 800bb14:	f000 f92b 	bl	800bd6e <USBD_CtlSendStatus>
  }
}
 800bb18:	bf00      	nop
 800bb1a:	3708      	adds	r7, #8
 800bb1c:	46bd      	mov	sp, r7
 800bb1e:	bd80      	pop	{r7, pc}

0800bb20 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb20:	b580      	push	{r7, lr}
 800bb22:	b082      	sub	sp, #8
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	6078      	str	r0, [r7, #4]
 800bb28:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb30:	b2db      	uxtb	r3, r3
 800bb32:	3b01      	subs	r3, #1
 800bb34:	2b02      	cmp	r3, #2
 800bb36:	d80b      	bhi.n	800bb50 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bb38:	683b      	ldr	r3, [r7, #0]
 800bb3a:	885b      	ldrh	r3, [r3, #2]
 800bb3c:	2b01      	cmp	r3, #1
 800bb3e:	d10c      	bne.n	800bb5a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	2200      	movs	r2, #0
 800bb44:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800bb48:	6878      	ldr	r0, [r7, #4]
 800bb4a:	f000 f910 	bl	800bd6e <USBD_CtlSendStatus>
      }
      break;
 800bb4e:	e004      	b.n	800bb5a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800bb50:	6839      	ldr	r1, [r7, #0]
 800bb52:	6878      	ldr	r0, [r7, #4]
 800bb54:	f000 f840 	bl	800bbd8 <USBD_CtlError>
      break;
 800bb58:	e000      	b.n	800bb5c <USBD_ClrFeature+0x3c>
      break;
 800bb5a:	bf00      	nop
  }
}
 800bb5c:	bf00      	nop
 800bb5e:	3708      	adds	r7, #8
 800bb60:	46bd      	mov	sp, r7
 800bb62:	bd80      	pop	{r7, pc}

0800bb64 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800bb64:	b580      	push	{r7, lr}
 800bb66:	b084      	sub	sp, #16
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	6078      	str	r0, [r7, #4]
 800bb6c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800bb6e:	683b      	ldr	r3, [r7, #0]
 800bb70:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	781a      	ldrb	r2, [r3, #0]
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	3301      	adds	r3, #1
 800bb7e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	781a      	ldrb	r2, [r3, #0]
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	3301      	adds	r3, #1
 800bb8c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800bb8e:	68f8      	ldr	r0, [r7, #12]
 800bb90:	f7ff fa92 	bl	800b0b8 <SWAPBYTE>
 800bb94:	4603      	mov	r3, r0
 800bb96:	461a      	mov	r2, r3
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	3301      	adds	r3, #1
 800bba0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	3301      	adds	r3, #1
 800bba6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800bba8:	68f8      	ldr	r0, [r7, #12]
 800bbaa:	f7ff fa85 	bl	800b0b8 <SWAPBYTE>
 800bbae:	4603      	mov	r3, r0
 800bbb0:	461a      	mov	r2, r3
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	3301      	adds	r3, #1
 800bbba:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	3301      	adds	r3, #1
 800bbc0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800bbc2:	68f8      	ldr	r0, [r7, #12]
 800bbc4:	f7ff fa78 	bl	800b0b8 <SWAPBYTE>
 800bbc8:	4603      	mov	r3, r0
 800bbca:	461a      	mov	r2, r3
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	80da      	strh	r2, [r3, #6]
}
 800bbd0:	bf00      	nop
 800bbd2:	3710      	adds	r7, #16
 800bbd4:	46bd      	mov	sp, r7
 800bbd6:	bd80      	pop	{r7, pc}

0800bbd8 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bbd8:	b580      	push	{r7, lr}
 800bbda:	b082      	sub	sp, #8
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	6078      	str	r0, [r7, #4]
 800bbe0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800bbe2:	2180      	movs	r1, #128	@ 0x80
 800bbe4:	6878      	ldr	r0, [r7, #4]
 800bbe6:	f004 f94b 	bl	800fe80 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800bbea:	2100      	movs	r1, #0
 800bbec:	6878      	ldr	r0, [r7, #4]
 800bbee:	f004 f947 	bl	800fe80 <USBD_LL_StallEP>
}
 800bbf2:	bf00      	nop
 800bbf4:	3708      	adds	r7, #8
 800bbf6:	46bd      	mov	sp, r7
 800bbf8:	bd80      	pop	{r7, pc}

0800bbfa <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800bbfa:	b580      	push	{r7, lr}
 800bbfc:	b086      	sub	sp, #24
 800bbfe:	af00      	add	r7, sp, #0
 800bc00:	60f8      	str	r0, [r7, #12]
 800bc02:	60b9      	str	r1, [r7, #8]
 800bc04:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800bc06:	2300      	movs	r3, #0
 800bc08:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d036      	beq.n	800bc7e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800bc14:	6938      	ldr	r0, [r7, #16]
 800bc16:	f000 f836 	bl	800bc86 <USBD_GetLen>
 800bc1a:	4603      	mov	r3, r0
 800bc1c:	3301      	adds	r3, #1
 800bc1e:	b29b      	uxth	r3, r3
 800bc20:	005b      	lsls	r3, r3, #1
 800bc22:	b29a      	uxth	r2, r3
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800bc28:	7dfb      	ldrb	r3, [r7, #23]
 800bc2a:	68ba      	ldr	r2, [r7, #8]
 800bc2c:	4413      	add	r3, r2
 800bc2e:	687a      	ldr	r2, [r7, #4]
 800bc30:	7812      	ldrb	r2, [r2, #0]
 800bc32:	701a      	strb	r2, [r3, #0]
  idx++;
 800bc34:	7dfb      	ldrb	r3, [r7, #23]
 800bc36:	3301      	adds	r3, #1
 800bc38:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800bc3a:	7dfb      	ldrb	r3, [r7, #23]
 800bc3c:	68ba      	ldr	r2, [r7, #8]
 800bc3e:	4413      	add	r3, r2
 800bc40:	2203      	movs	r2, #3
 800bc42:	701a      	strb	r2, [r3, #0]
  idx++;
 800bc44:	7dfb      	ldrb	r3, [r7, #23]
 800bc46:	3301      	adds	r3, #1
 800bc48:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800bc4a:	e013      	b.n	800bc74 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800bc4c:	7dfb      	ldrb	r3, [r7, #23]
 800bc4e:	68ba      	ldr	r2, [r7, #8]
 800bc50:	4413      	add	r3, r2
 800bc52:	693a      	ldr	r2, [r7, #16]
 800bc54:	7812      	ldrb	r2, [r2, #0]
 800bc56:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800bc58:	693b      	ldr	r3, [r7, #16]
 800bc5a:	3301      	adds	r3, #1
 800bc5c:	613b      	str	r3, [r7, #16]
    idx++;
 800bc5e:	7dfb      	ldrb	r3, [r7, #23]
 800bc60:	3301      	adds	r3, #1
 800bc62:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800bc64:	7dfb      	ldrb	r3, [r7, #23]
 800bc66:	68ba      	ldr	r2, [r7, #8]
 800bc68:	4413      	add	r3, r2
 800bc6a:	2200      	movs	r2, #0
 800bc6c:	701a      	strb	r2, [r3, #0]
    idx++;
 800bc6e:	7dfb      	ldrb	r3, [r7, #23]
 800bc70:	3301      	adds	r3, #1
 800bc72:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800bc74:	693b      	ldr	r3, [r7, #16]
 800bc76:	781b      	ldrb	r3, [r3, #0]
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d1e7      	bne.n	800bc4c <USBD_GetString+0x52>
 800bc7c:	e000      	b.n	800bc80 <USBD_GetString+0x86>
    return;
 800bc7e:	bf00      	nop
  }
}
 800bc80:	3718      	adds	r7, #24
 800bc82:	46bd      	mov	sp, r7
 800bc84:	bd80      	pop	{r7, pc}

0800bc86 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800bc86:	b480      	push	{r7}
 800bc88:	b085      	sub	sp, #20
 800bc8a:	af00      	add	r7, sp, #0
 800bc8c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800bc8e:	2300      	movs	r3, #0
 800bc90:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800bc96:	e005      	b.n	800bca4 <USBD_GetLen+0x1e>
  {
    len++;
 800bc98:	7bfb      	ldrb	r3, [r7, #15]
 800bc9a:	3301      	adds	r3, #1
 800bc9c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800bc9e:	68bb      	ldr	r3, [r7, #8]
 800bca0:	3301      	adds	r3, #1
 800bca2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800bca4:	68bb      	ldr	r3, [r7, #8]
 800bca6:	781b      	ldrb	r3, [r3, #0]
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d1f5      	bne.n	800bc98 <USBD_GetLen+0x12>
  }

  return len;
 800bcac:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcae:	4618      	mov	r0, r3
 800bcb0:	3714      	adds	r7, #20
 800bcb2:	46bd      	mov	sp, r7
 800bcb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb8:	4770      	bx	lr

0800bcba <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800bcba:	b580      	push	{r7, lr}
 800bcbc:	b084      	sub	sp, #16
 800bcbe:	af00      	add	r7, sp, #0
 800bcc0:	60f8      	str	r0, [r7, #12]
 800bcc2:	60b9      	str	r1, [r7, #8]
 800bcc4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	2202      	movs	r2, #2
 800bcca:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	687a      	ldr	r2, [r7, #4]
 800bcd2:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	687a      	ldr	r2, [r7, #4]
 800bcd8:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	68ba      	ldr	r2, [r7, #8]
 800bcde:	2100      	movs	r1, #0
 800bce0:	68f8      	ldr	r0, [r7, #12]
 800bce2:	f004 f956 	bl	800ff92 <USBD_LL_Transmit>

  return USBD_OK;
 800bce6:	2300      	movs	r3, #0
}
 800bce8:	4618      	mov	r0, r3
 800bcea:	3710      	adds	r7, #16
 800bcec:	46bd      	mov	sp, r7
 800bcee:	bd80      	pop	{r7, pc}

0800bcf0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800bcf0:	b580      	push	{r7, lr}
 800bcf2:	b084      	sub	sp, #16
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	60f8      	str	r0, [r7, #12]
 800bcf8:	60b9      	str	r1, [r7, #8]
 800bcfa:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	68ba      	ldr	r2, [r7, #8]
 800bd00:	2100      	movs	r1, #0
 800bd02:	68f8      	ldr	r0, [r7, #12]
 800bd04:	f004 f945 	bl	800ff92 <USBD_LL_Transmit>

  return USBD_OK;
 800bd08:	2300      	movs	r3, #0
}
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	3710      	adds	r7, #16
 800bd0e:	46bd      	mov	sp, r7
 800bd10:	bd80      	pop	{r7, pc}

0800bd12 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800bd12:	b580      	push	{r7, lr}
 800bd14:	b084      	sub	sp, #16
 800bd16:	af00      	add	r7, sp, #0
 800bd18:	60f8      	str	r0, [r7, #12]
 800bd1a:	60b9      	str	r1, [r7, #8]
 800bd1c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	2203      	movs	r2, #3
 800bd22:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	687a      	ldr	r2, [r7, #4]
 800bd2a:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	687a      	ldr	r2, [r7, #4]
 800bd32:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	68ba      	ldr	r2, [r7, #8]
 800bd3a:	2100      	movs	r1, #0
 800bd3c:	68f8      	ldr	r0, [r7, #12]
 800bd3e:	f004 f949 	bl	800ffd4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bd42:	2300      	movs	r3, #0
}
 800bd44:	4618      	mov	r0, r3
 800bd46:	3710      	adds	r7, #16
 800bd48:	46bd      	mov	sp, r7
 800bd4a:	bd80      	pop	{r7, pc}

0800bd4c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800bd4c:	b580      	push	{r7, lr}
 800bd4e:	b084      	sub	sp, #16
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	60f8      	str	r0, [r7, #12]
 800bd54:	60b9      	str	r1, [r7, #8]
 800bd56:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	68ba      	ldr	r2, [r7, #8]
 800bd5c:	2100      	movs	r1, #0
 800bd5e:	68f8      	ldr	r0, [r7, #12]
 800bd60:	f004 f938 	bl	800ffd4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bd64:	2300      	movs	r3, #0
}
 800bd66:	4618      	mov	r0, r3
 800bd68:	3710      	adds	r7, #16
 800bd6a:	46bd      	mov	sp, r7
 800bd6c:	bd80      	pop	{r7, pc}

0800bd6e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800bd6e:	b580      	push	{r7, lr}
 800bd70:	b082      	sub	sp, #8
 800bd72:	af00      	add	r7, sp, #0
 800bd74:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	2204      	movs	r2, #4
 800bd7a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800bd7e:	2300      	movs	r3, #0
 800bd80:	2200      	movs	r2, #0
 800bd82:	2100      	movs	r1, #0
 800bd84:	6878      	ldr	r0, [r7, #4]
 800bd86:	f004 f904 	bl	800ff92 <USBD_LL_Transmit>

  return USBD_OK;
 800bd8a:	2300      	movs	r3, #0
}
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	3708      	adds	r7, #8
 800bd90:	46bd      	mov	sp, r7
 800bd92:	bd80      	pop	{r7, pc}

0800bd94 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800bd94:	b580      	push	{r7, lr}
 800bd96:	b082      	sub	sp, #8
 800bd98:	af00      	add	r7, sp, #0
 800bd9a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	2205      	movs	r2, #5
 800bda0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bda4:	2300      	movs	r3, #0
 800bda6:	2200      	movs	r2, #0
 800bda8:	2100      	movs	r1, #0
 800bdaa:	6878      	ldr	r0, [r7, #4]
 800bdac:	f004 f912 	bl	800ffd4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bdb0:	2300      	movs	r3, #0
}
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	3708      	adds	r7, #8
 800bdb6:	46bd      	mov	sp, r7
 800bdb8:	bd80      	pop	{r7, pc}
	...

0800bdbc <__NVIC_SetPriority>:
{
 800bdbc:	b480      	push	{r7}
 800bdbe:	b083      	sub	sp, #12
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	4603      	mov	r3, r0
 800bdc4:	6039      	str	r1, [r7, #0]
 800bdc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bdc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	db0a      	blt.n	800bde6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bdd0:	683b      	ldr	r3, [r7, #0]
 800bdd2:	b2da      	uxtb	r2, r3
 800bdd4:	490c      	ldr	r1, [pc, #48]	@ (800be08 <__NVIC_SetPriority+0x4c>)
 800bdd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bdda:	0112      	lsls	r2, r2, #4
 800bddc:	b2d2      	uxtb	r2, r2
 800bdde:	440b      	add	r3, r1
 800bde0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800bde4:	e00a      	b.n	800bdfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bde6:	683b      	ldr	r3, [r7, #0]
 800bde8:	b2da      	uxtb	r2, r3
 800bdea:	4908      	ldr	r1, [pc, #32]	@ (800be0c <__NVIC_SetPriority+0x50>)
 800bdec:	79fb      	ldrb	r3, [r7, #7]
 800bdee:	f003 030f 	and.w	r3, r3, #15
 800bdf2:	3b04      	subs	r3, #4
 800bdf4:	0112      	lsls	r2, r2, #4
 800bdf6:	b2d2      	uxtb	r2, r2
 800bdf8:	440b      	add	r3, r1
 800bdfa:	761a      	strb	r2, [r3, #24]
}
 800bdfc:	bf00      	nop
 800bdfe:	370c      	adds	r7, #12
 800be00:	46bd      	mov	sp, r7
 800be02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be06:	4770      	bx	lr
 800be08:	e000e100 	.word	0xe000e100
 800be0c:	e000ed00 	.word	0xe000ed00

0800be10 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800be10:	b580      	push	{r7, lr}
 800be12:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800be14:	4b05      	ldr	r3, [pc, #20]	@ (800be2c <SysTick_Handler+0x1c>)
 800be16:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800be18:	f002 fb06 	bl	800e428 <xTaskGetSchedulerState>
 800be1c:	4603      	mov	r3, r0
 800be1e:	2b01      	cmp	r3, #1
 800be20:	d001      	beq.n	800be26 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800be22:	f003 fa01 	bl	800f228 <xPortSysTickHandler>
  }
}
 800be26:	bf00      	nop
 800be28:	bd80      	pop	{r7, pc}
 800be2a:	bf00      	nop
 800be2c:	e000e010 	.word	0xe000e010

0800be30 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800be30:	b580      	push	{r7, lr}
 800be32:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800be34:	2100      	movs	r1, #0
 800be36:	f06f 0004 	mvn.w	r0, #4
 800be3a:	f7ff ffbf 	bl	800bdbc <__NVIC_SetPriority>
#endif
}
 800be3e:	bf00      	nop
 800be40:	bd80      	pop	{r7, pc}
	...

0800be44 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800be44:	b480      	push	{r7}
 800be46:	b083      	sub	sp, #12
 800be48:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800be4a:	f3ef 8305 	mrs	r3, IPSR
 800be4e:	603b      	str	r3, [r7, #0]
  return(result);
 800be50:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800be52:	2b00      	cmp	r3, #0
 800be54:	d003      	beq.n	800be5e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800be56:	f06f 0305 	mvn.w	r3, #5
 800be5a:	607b      	str	r3, [r7, #4]
 800be5c:	e00c      	b.n	800be78 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800be5e:	4b0a      	ldr	r3, [pc, #40]	@ (800be88 <osKernelInitialize+0x44>)
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	2b00      	cmp	r3, #0
 800be64:	d105      	bne.n	800be72 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800be66:	4b08      	ldr	r3, [pc, #32]	@ (800be88 <osKernelInitialize+0x44>)
 800be68:	2201      	movs	r2, #1
 800be6a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800be6c:	2300      	movs	r3, #0
 800be6e:	607b      	str	r3, [r7, #4]
 800be70:	e002      	b.n	800be78 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800be72:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800be76:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800be78:	687b      	ldr	r3, [r7, #4]
}
 800be7a:	4618      	mov	r0, r3
 800be7c:	370c      	adds	r7, #12
 800be7e:	46bd      	mov	sp, r7
 800be80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be84:	4770      	bx	lr
 800be86:	bf00      	nop
 800be88:	20000690 	.word	0x20000690

0800be8c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800be8c:	b580      	push	{r7, lr}
 800be8e:	b082      	sub	sp, #8
 800be90:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800be92:	f3ef 8305 	mrs	r3, IPSR
 800be96:	603b      	str	r3, [r7, #0]
  return(result);
 800be98:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d003      	beq.n	800bea6 <osKernelStart+0x1a>
    stat = osErrorISR;
 800be9e:	f06f 0305 	mvn.w	r3, #5
 800bea2:	607b      	str	r3, [r7, #4]
 800bea4:	e010      	b.n	800bec8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800bea6:	4b0b      	ldr	r3, [pc, #44]	@ (800bed4 <osKernelStart+0x48>)
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	2b01      	cmp	r3, #1
 800beac:	d109      	bne.n	800bec2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800beae:	f7ff ffbf 	bl	800be30 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800beb2:	4b08      	ldr	r3, [pc, #32]	@ (800bed4 <osKernelStart+0x48>)
 800beb4:	2202      	movs	r2, #2
 800beb6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800beb8:	f001 fe30 	bl	800db1c <vTaskStartScheduler>
      stat = osOK;
 800bebc:	2300      	movs	r3, #0
 800bebe:	607b      	str	r3, [r7, #4]
 800bec0:	e002      	b.n	800bec8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800bec2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bec6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800bec8:	687b      	ldr	r3, [r7, #4]
}
 800beca:	4618      	mov	r0, r3
 800becc:	3708      	adds	r7, #8
 800bece:	46bd      	mov	sp, r7
 800bed0:	bd80      	pop	{r7, pc}
 800bed2:	bf00      	nop
 800bed4:	20000690 	.word	0x20000690

0800bed8 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800bed8:	b580      	push	{r7, lr}
 800beda:	b082      	sub	sp, #8
 800bedc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bede:	f3ef 8305 	mrs	r3, IPSR
 800bee2:	603b      	str	r3, [r7, #0]
  return(result);
 800bee4:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d003      	beq.n	800bef2 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800beea:	f001 ff43 	bl	800dd74 <xTaskGetTickCountFromISR>
 800beee:	6078      	str	r0, [r7, #4]
 800bef0:	e002      	b.n	800bef8 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800bef2:	f001 ff2f 	bl	800dd54 <xTaskGetTickCount>
 800bef6:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800bef8:	687b      	ldr	r3, [r7, #4]
}
 800befa:	4618      	mov	r0, r3
 800befc:	3708      	adds	r7, #8
 800befe:	46bd      	mov	sp, r7
 800bf00:	bd80      	pop	{r7, pc}

0800bf02 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800bf02:	b580      	push	{r7, lr}
 800bf04:	b08e      	sub	sp, #56	@ 0x38
 800bf06:	af04      	add	r7, sp, #16
 800bf08:	60f8      	str	r0, [r7, #12]
 800bf0a:	60b9      	str	r1, [r7, #8]
 800bf0c:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800bf0e:	2300      	movs	r3, #0
 800bf10:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bf12:	f3ef 8305 	mrs	r3, IPSR
 800bf16:	617b      	str	r3, [r7, #20]
  return(result);
 800bf18:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d17e      	bne.n	800c01c <osThreadNew+0x11a>
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d07b      	beq.n	800c01c <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800bf24:	2380      	movs	r3, #128	@ 0x80
 800bf26:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800bf28:	2318      	movs	r3, #24
 800bf2a:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800bf2c:	2300      	movs	r3, #0
 800bf2e:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800bf30:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bf34:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d045      	beq.n	800bfc8 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d002      	beq.n	800bf4a <osThreadNew+0x48>
        name = attr->name;
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	699b      	ldr	r3, [r3, #24]
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d002      	beq.n	800bf58 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	699b      	ldr	r3, [r3, #24]
 800bf56:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800bf58:	69fb      	ldr	r3, [r7, #28]
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d008      	beq.n	800bf70 <osThreadNew+0x6e>
 800bf5e:	69fb      	ldr	r3, [r7, #28]
 800bf60:	2b38      	cmp	r3, #56	@ 0x38
 800bf62:	d805      	bhi.n	800bf70 <osThreadNew+0x6e>
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	685b      	ldr	r3, [r3, #4]
 800bf68:	f003 0301 	and.w	r3, r3, #1
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d001      	beq.n	800bf74 <osThreadNew+0x72>
        return (NULL);
 800bf70:	2300      	movs	r3, #0
 800bf72:	e054      	b.n	800c01e <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	695b      	ldr	r3, [r3, #20]
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d003      	beq.n	800bf84 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	695b      	ldr	r3, [r3, #20]
 800bf80:	089b      	lsrs	r3, r3, #2
 800bf82:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	689b      	ldr	r3, [r3, #8]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d00e      	beq.n	800bfaa <osThreadNew+0xa8>
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	68db      	ldr	r3, [r3, #12]
 800bf90:	2ba7      	cmp	r3, #167	@ 0xa7
 800bf92:	d90a      	bls.n	800bfaa <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d006      	beq.n	800bfaa <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	695b      	ldr	r3, [r3, #20]
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d002      	beq.n	800bfaa <osThreadNew+0xa8>
        mem = 1;
 800bfa4:	2301      	movs	r3, #1
 800bfa6:	61bb      	str	r3, [r7, #24]
 800bfa8:	e010      	b.n	800bfcc <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	689b      	ldr	r3, [r3, #8]
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d10c      	bne.n	800bfcc <osThreadNew+0xca>
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	68db      	ldr	r3, [r3, #12]
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d108      	bne.n	800bfcc <osThreadNew+0xca>
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	691b      	ldr	r3, [r3, #16]
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d104      	bne.n	800bfcc <osThreadNew+0xca>
          mem = 0;
 800bfc2:	2300      	movs	r3, #0
 800bfc4:	61bb      	str	r3, [r7, #24]
 800bfc6:	e001      	b.n	800bfcc <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800bfc8:	2300      	movs	r3, #0
 800bfca:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800bfcc:	69bb      	ldr	r3, [r7, #24]
 800bfce:	2b01      	cmp	r3, #1
 800bfd0:	d110      	bne.n	800bff4 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800bfd6:	687a      	ldr	r2, [r7, #4]
 800bfd8:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800bfda:	9202      	str	r2, [sp, #8]
 800bfdc:	9301      	str	r3, [sp, #4]
 800bfde:	69fb      	ldr	r3, [r7, #28]
 800bfe0:	9300      	str	r3, [sp, #0]
 800bfe2:	68bb      	ldr	r3, [r7, #8]
 800bfe4:	6a3a      	ldr	r2, [r7, #32]
 800bfe6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bfe8:	68f8      	ldr	r0, [r7, #12]
 800bfea:	f001 fb23 	bl	800d634 <xTaskCreateStatic>
 800bfee:	4603      	mov	r3, r0
 800bff0:	613b      	str	r3, [r7, #16]
 800bff2:	e013      	b.n	800c01c <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800bff4:	69bb      	ldr	r3, [r7, #24]
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d110      	bne.n	800c01c <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800bffa:	6a3b      	ldr	r3, [r7, #32]
 800bffc:	b29a      	uxth	r2, r3
 800bffe:	f107 0310 	add.w	r3, r7, #16
 800c002:	9301      	str	r3, [sp, #4]
 800c004:	69fb      	ldr	r3, [r7, #28]
 800c006:	9300      	str	r3, [sp, #0]
 800c008:	68bb      	ldr	r3, [r7, #8]
 800c00a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c00c:	68f8      	ldr	r0, [r7, #12]
 800c00e:	f001 fb71 	bl	800d6f4 <xTaskCreate>
 800c012:	4603      	mov	r3, r0
 800c014:	2b01      	cmp	r3, #1
 800c016:	d001      	beq.n	800c01c <osThreadNew+0x11a>
            hTask = NULL;
 800c018:	2300      	movs	r3, #0
 800c01a:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c01c:	693b      	ldr	r3, [r7, #16]
}
 800c01e:	4618      	mov	r0, r3
 800c020:	3728      	adds	r7, #40	@ 0x28
 800c022:	46bd      	mov	sp, r7
 800c024:	bd80      	pop	{r7, pc}

0800c026 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800c026:	b580      	push	{r7, lr}
 800c028:	b084      	sub	sp, #16
 800c02a:	af00      	add	r7, sp, #0
 800c02c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c02e:	f3ef 8305 	mrs	r3, IPSR
 800c032:	60bb      	str	r3, [r7, #8]
  return(result);
 800c034:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c036:	2b00      	cmp	r3, #0
 800c038:	d003      	beq.n	800c042 <osDelay+0x1c>
    stat = osErrorISR;
 800c03a:	f06f 0305 	mvn.w	r3, #5
 800c03e:	60fb      	str	r3, [r7, #12]
 800c040:	e007      	b.n	800c052 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800c042:	2300      	movs	r3, #0
 800c044:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d002      	beq.n	800c052 <osDelay+0x2c>
      vTaskDelay(ticks);
 800c04c:	6878      	ldr	r0, [r7, #4]
 800c04e:	f001 fd2f 	bl	800dab0 <vTaskDelay>
    }
  }

  return (stat);
 800c052:	68fb      	ldr	r3, [r7, #12]
}
 800c054:	4618      	mov	r0, r3
 800c056:	3710      	adds	r7, #16
 800c058:	46bd      	mov	sp, r7
 800c05a:	bd80      	pop	{r7, pc}

0800c05c <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 800c05c:	b580      	push	{r7, lr}
 800c05e:	b086      	sub	sp, #24
 800c060:	af00      	add	r7, sp, #0
 800c062:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c064:	f3ef 8305 	mrs	r3, IPSR
 800c068:	60fb      	str	r3, [r7, #12]
  return(result);
 800c06a:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d003      	beq.n	800c078 <osDelayUntil+0x1c>
    stat = osErrorISR;
 800c070:	f06f 0305 	mvn.w	r3, #5
 800c074:	617b      	str	r3, [r7, #20]
 800c076:	e019      	b.n	800c0ac <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 800c078:	2300      	movs	r3, #0
 800c07a:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 800c07c:	f001 fe6a 	bl	800dd54 <xTaskGetTickCount>
 800c080:	4603      	mov	r3, r0
 800c082:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 800c084:	68bb      	ldr	r3, [r7, #8]
 800c086:	687a      	ldr	r2, [r7, #4]
 800c088:	1ad3      	subs	r3, r2, r3
 800c08a:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 800c08c:	693b      	ldr	r3, [r7, #16]
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d009      	beq.n	800c0a6 <osDelayUntil+0x4a>
 800c092:	693b      	ldr	r3, [r7, #16]
 800c094:	2b00      	cmp	r3, #0
 800c096:	db06      	blt.n	800c0a6 <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 800c098:	f107 0308 	add.w	r3, r7, #8
 800c09c:	6939      	ldr	r1, [r7, #16]
 800c09e:	4618      	mov	r0, r3
 800c0a0:	f001 fc86 	bl	800d9b0 <vTaskDelayUntil>
 800c0a4:	e002      	b.n	800c0ac <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 800c0a6:	f06f 0303 	mvn.w	r3, #3
 800c0aa:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800c0ac:	697b      	ldr	r3, [r7, #20]
}
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	3718      	adds	r7, #24
 800c0b2:	46bd      	mov	sp, r7
 800c0b4:	bd80      	pop	{r7, pc}

0800c0b6 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800c0b6:	b580      	push	{r7, lr}
 800c0b8:	b088      	sub	sp, #32
 800c0ba:	af00      	add	r7, sp, #0
 800c0bc:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800c0be:	2300      	movs	r3, #0
 800c0c0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c0c2:	f3ef 8305 	mrs	r3, IPSR
 800c0c6:	60bb      	str	r3, [r7, #8]
  return(result);
 800c0c8:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d174      	bne.n	800c1b8 <osMutexNew+0x102>
    if (attr != NULL) {
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d003      	beq.n	800c0dc <osMutexNew+0x26>
      type = attr->attr_bits;
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	685b      	ldr	r3, [r3, #4]
 800c0d8:	61bb      	str	r3, [r7, #24]
 800c0da:	e001      	b.n	800c0e0 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800c0dc:	2300      	movs	r3, #0
 800c0de:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800c0e0:	69bb      	ldr	r3, [r7, #24]
 800c0e2:	f003 0301 	and.w	r3, r3, #1
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d002      	beq.n	800c0f0 <osMutexNew+0x3a>
      rmtx = 1U;
 800c0ea:	2301      	movs	r3, #1
 800c0ec:	617b      	str	r3, [r7, #20]
 800c0ee:	e001      	b.n	800c0f4 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800c0f4:	69bb      	ldr	r3, [r7, #24]
 800c0f6:	f003 0308 	and.w	r3, r3, #8
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d15c      	bne.n	800c1b8 <osMutexNew+0x102>
      mem = -1;
 800c0fe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c102:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	2b00      	cmp	r3, #0
 800c108:	d015      	beq.n	800c136 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	689b      	ldr	r3, [r3, #8]
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d006      	beq.n	800c120 <osMutexNew+0x6a>
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	68db      	ldr	r3, [r3, #12]
 800c116:	2b4f      	cmp	r3, #79	@ 0x4f
 800c118:	d902      	bls.n	800c120 <osMutexNew+0x6a>
          mem = 1;
 800c11a:	2301      	movs	r3, #1
 800c11c:	613b      	str	r3, [r7, #16]
 800c11e:	e00c      	b.n	800c13a <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	689b      	ldr	r3, [r3, #8]
 800c124:	2b00      	cmp	r3, #0
 800c126:	d108      	bne.n	800c13a <osMutexNew+0x84>
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	68db      	ldr	r3, [r3, #12]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d104      	bne.n	800c13a <osMutexNew+0x84>
            mem = 0;
 800c130:	2300      	movs	r3, #0
 800c132:	613b      	str	r3, [r7, #16]
 800c134:	e001      	b.n	800c13a <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800c136:	2300      	movs	r3, #0
 800c138:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800c13a:	693b      	ldr	r3, [r7, #16]
 800c13c:	2b01      	cmp	r3, #1
 800c13e:	d112      	bne.n	800c166 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800c140:	697b      	ldr	r3, [r7, #20]
 800c142:	2b00      	cmp	r3, #0
 800c144:	d007      	beq.n	800c156 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	689b      	ldr	r3, [r3, #8]
 800c14a:	4619      	mov	r1, r3
 800c14c:	2004      	movs	r0, #4
 800c14e:	f000 fc50 	bl	800c9f2 <xQueueCreateMutexStatic>
 800c152:	61f8      	str	r0, [r7, #28]
 800c154:	e016      	b.n	800c184 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	689b      	ldr	r3, [r3, #8]
 800c15a:	4619      	mov	r1, r3
 800c15c:	2001      	movs	r0, #1
 800c15e:	f000 fc48 	bl	800c9f2 <xQueueCreateMutexStatic>
 800c162:	61f8      	str	r0, [r7, #28]
 800c164:	e00e      	b.n	800c184 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800c166:	693b      	ldr	r3, [r7, #16]
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d10b      	bne.n	800c184 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800c16c:	697b      	ldr	r3, [r7, #20]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d004      	beq.n	800c17c <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800c172:	2004      	movs	r0, #4
 800c174:	f000 fc25 	bl	800c9c2 <xQueueCreateMutex>
 800c178:	61f8      	str	r0, [r7, #28]
 800c17a:	e003      	b.n	800c184 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800c17c:	2001      	movs	r0, #1
 800c17e:	f000 fc20 	bl	800c9c2 <xQueueCreateMutex>
 800c182:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800c184:	69fb      	ldr	r3, [r7, #28]
 800c186:	2b00      	cmp	r3, #0
 800c188:	d00c      	beq.n	800c1a4 <osMutexNew+0xee>
        if (attr != NULL) {
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d003      	beq.n	800c198 <osMutexNew+0xe2>
          name = attr->name;
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	60fb      	str	r3, [r7, #12]
 800c196:	e001      	b.n	800c19c <osMutexNew+0xe6>
        } else {
          name = NULL;
 800c198:	2300      	movs	r3, #0
 800c19a:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800c19c:	68f9      	ldr	r1, [r7, #12]
 800c19e:	69f8      	ldr	r0, [r7, #28]
 800c1a0:	f001 f9ea 	bl	800d578 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800c1a4:	69fb      	ldr	r3, [r7, #28]
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d006      	beq.n	800c1b8 <osMutexNew+0x102>
 800c1aa:	697b      	ldr	r3, [r7, #20]
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d003      	beq.n	800c1b8 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800c1b0:	69fb      	ldr	r3, [r7, #28]
 800c1b2:	f043 0301 	orr.w	r3, r3, #1
 800c1b6:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800c1b8:	69fb      	ldr	r3, [r7, #28]
}
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	3720      	adds	r7, #32
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	bd80      	pop	{r7, pc}

0800c1c2 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800c1c2:	b580      	push	{r7, lr}
 800c1c4:	b086      	sub	sp, #24
 800c1c6:	af00      	add	r7, sp, #0
 800c1c8:	6078      	str	r0, [r7, #4]
 800c1ca:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	f023 0301 	bic.w	r3, r3, #1
 800c1d2:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	f003 0301 	and.w	r3, r3, #1
 800c1da:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800c1dc:	2300      	movs	r3, #0
 800c1de:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c1e0:	f3ef 8305 	mrs	r3, IPSR
 800c1e4:	60bb      	str	r3, [r7, #8]
  return(result);
 800c1e6:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d003      	beq.n	800c1f4 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800c1ec:	f06f 0305 	mvn.w	r3, #5
 800c1f0:	617b      	str	r3, [r7, #20]
 800c1f2:	e02c      	b.n	800c24e <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800c1f4:	693b      	ldr	r3, [r7, #16]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d103      	bne.n	800c202 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800c1fa:	f06f 0303 	mvn.w	r3, #3
 800c1fe:	617b      	str	r3, [r7, #20]
 800c200:	e025      	b.n	800c24e <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	2b00      	cmp	r3, #0
 800c206:	d011      	beq.n	800c22c <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800c208:	6839      	ldr	r1, [r7, #0]
 800c20a:	6938      	ldr	r0, [r7, #16]
 800c20c:	f000 fc41 	bl	800ca92 <xQueueTakeMutexRecursive>
 800c210:	4603      	mov	r3, r0
 800c212:	2b01      	cmp	r3, #1
 800c214:	d01b      	beq.n	800c24e <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800c216:	683b      	ldr	r3, [r7, #0]
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d003      	beq.n	800c224 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800c21c:	f06f 0301 	mvn.w	r3, #1
 800c220:	617b      	str	r3, [r7, #20]
 800c222:	e014      	b.n	800c24e <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800c224:	f06f 0302 	mvn.w	r3, #2
 800c228:	617b      	str	r3, [r7, #20]
 800c22a:	e010      	b.n	800c24e <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800c22c:	6839      	ldr	r1, [r7, #0]
 800c22e:	6938      	ldr	r0, [r7, #16]
 800c230:	f000 fee8 	bl	800d004 <xQueueSemaphoreTake>
 800c234:	4603      	mov	r3, r0
 800c236:	2b01      	cmp	r3, #1
 800c238:	d009      	beq.n	800c24e <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800c23a:	683b      	ldr	r3, [r7, #0]
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d003      	beq.n	800c248 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800c240:	f06f 0301 	mvn.w	r3, #1
 800c244:	617b      	str	r3, [r7, #20]
 800c246:	e002      	b.n	800c24e <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800c248:	f06f 0302 	mvn.w	r3, #2
 800c24c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800c24e:	697b      	ldr	r3, [r7, #20]
}
 800c250:	4618      	mov	r0, r3
 800c252:	3718      	adds	r7, #24
 800c254:	46bd      	mov	sp, r7
 800c256:	bd80      	pop	{r7, pc}

0800c258 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800c258:	b580      	push	{r7, lr}
 800c25a:	b086      	sub	sp, #24
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	f023 0301 	bic.w	r3, r3, #1
 800c266:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	f003 0301 	and.w	r3, r3, #1
 800c26e:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800c270:	2300      	movs	r3, #0
 800c272:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c274:	f3ef 8305 	mrs	r3, IPSR
 800c278:	60bb      	str	r3, [r7, #8]
  return(result);
 800c27a:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d003      	beq.n	800c288 <osMutexRelease+0x30>
    stat = osErrorISR;
 800c280:	f06f 0305 	mvn.w	r3, #5
 800c284:	617b      	str	r3, [r7, #20]
 800c286:	e01f      	b.n	800c2c8 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800c288:	693b      	ldr	r3, [r7, #16]
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d103      	bne.n	800c296 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800c28e:	f06f 0303 	mvn.w	r3, #3
 800c292:	617b      	str	r3, [r7, #20]
 800c294:	e018      	b.n	800c2c8 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d009      	beq.n	800c2b0 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800c29c:	6938      	ldr	r0, [r7, #16]
 800c29e:	f000 fbc3 	bl	800ca28 <xQueueGiveMutexRecursive>
 800c2a2:	4603      	mov	r3, r0
 800c2a4:	2b01      	cmp	r3, #1
 800c2a6:	d00f      	beq.n	800c2c8 <osMutexRelease+0x70>
        stat = osErrorResource;
 800c2a8:	f06f 0302 	mvn.w	r3, #2
 800c2ac:	617b      	str	r3, [r7, #20]
 800c2ae:	e00b      	b.n	800c2c8 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800c2b0:	2300      	movs	r3, #0
 800c2b2:	2200      	movs	r2, #0
 800c2b4:	2100      	movs	r1, #0
 800c2b6:	6938      	ldr	r0, [r7, #16]
 800c2b8:	f000 fc22 	bl	800cb00 <xQueueGenericSend>
 800c2bc:	4603      	mov	r3, r0
 800c2be:	2b01      	cmp	r3, #1
 800c2c0:	d002      	beq.n	800c2c8 <osMutexRelease+0x70>
        stat = osErrorResource;
 800c2c2:	f06f 0302 	mvn.w	r3, #2
 800c2c6:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800c2c8:	697b      	ldr	r3, [r7, #20]
}
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	3718      	adds	r7, #24
 800c2ce:	46bd      	mov	sp, r7
 800c2d0:	bd80      	pop	{r7, pc}

0800c2d2 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800c2d2:	b580      	push	{r7, lr}
 800c2d4:	b08a      	sub	sp, #40	@ 0x28
 800c2d6:	af02      	add	r7, sp, #8
 800c2d8:	60f8      	str	r0, [r7, #12]
 800c2da:	60b9      	str	r1, [r7, #8]
 800c2dc:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800c2de:	2300      	movs	r3, #0
 800c2e0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c2e2:	f3ef 8305 	mrs	r3, IPSR
 800c2e6:	613b      	str	r3, [r7, #16]
  return(result);
 800c2e8:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d15f      	bne.n	800c3ae <osMessageQueueNew+0xdc>
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d05c      	beq.n	800c3ae <osMessageQueueNew+0xdc>
 800c2f4:	68bb      	ldr	r3, [r7, #8]
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d059      	beq.n	800c3ae <osMessageQueueNew+0xdc>
    mem = -1;
 800c2fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c2fe:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	2b00      	cmp	r3, #0
 800c304:	d029      	beq.n	800c35a <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	689b      	ldr	r3, [r3, #8]
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d012      	beq.n	800c334 <osMessageQueueNew+0x62>
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	68db      	ldr	r3, [r3, #12]
 800c312:	2b4f      	cmp	r3, #79	@ 0x4f
 800c314:	d90e      	bls.n	800c334 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d00a      	beq.n	800c334 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	695a      	ldr	r2, [r3, #20]
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	68b9      	ldr	r1, [r7, #8]
 800c326:	fb01 f303 	mul.w	r3, r1, r3
 800c32a:	429a      	cmp	r2, r3
 800c32c:	d302      	bcc.n	800c334 <osMessageQueueNew+0x62>
        mem = 1;
 800c32e:	2301      	movs	r3, #1
 800c330:	61bb      	str	r3, [r7, #24]
 800c332:	e014      	b.n	800c35e <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	689b      	ldr	r3, [r3, #8]
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d110      	bne.n	800c35e <osMessageQueueNew+0x8c>
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	68db      	ldr	r3, [r3, #12]
 800c340:	2b00      	cmp	r3, #0
 800c342:	d10c      	bne.n	800c35e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d108      	bne.n	800c35e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	695b      	ldr	r3, [r3, #20]
 800c350:	2b00      	cmp	r3, #0
 800c352:	d104      	bne.n	800c35e <osMessageQueueNew+0x8c>
          mem = 0;
 800c354:	2300      	movs	r3, #0
 800c356:	61bb      	str	r3, [r7, #24]
 800c358:	e001      	b.n	800c35e <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800c35a:	2300      	movs	r3, #0
 800c35c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c35e:	69bb      	ldr	r3, [r7, #24]
 800c360:	2b01      	cmp	r3, #1
 800c362:	d10b      	bne.n	800c37c <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	691a      	ldr	r2, [r3, #16]
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	689b      	ldr	r3, [r3, #8]
 800c36c:	2100      	movs	r1, #0
 800c36e:	9100      	str	r1, [sp, #0]
 800c370:	68b9      	ldr	r1, [r7, #8]
 800c372:	68f8      	ldr	r0, [r7, #12]
 800c374:	f000 fa30 	bl	800c7d8 <xQueueGenericCreateStatic>
 800c378:	61f8      	str	r0, [r7, #28]
 800c37a:	e008      	b.n	800c38e <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800c37c:	69bb      	ldr	r3, [r7, #24]
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d105      	bne.n	800c38e <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800c382:	2200      	movs	r2, #0
 800c384:	68b9      	ldr	r1, [r7, #8]
 800c386:	68f8      	ldr	r0, [r7, #12]
 800c388:	f000 faa3 	bl	800c8d2 <xQueueGenericCreate>
 800c38c:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800c38e:	69fb      	ldr	r3, [r7, #28]
 800c390:	2b00      	cmp	r3, #0
 800c392:	d00c      	beq.n	800c3ae <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	2b00      	cmp	r3, #0
 800c398:	d003      	beq.n	800c3a2 <osMessageQueueNew+0xd0>
        name = attr->name;
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	617b      	str	r3, [r7, #20]
 800c3a0:	e001      	b.n	800c3a6 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800c3a2:	2300      	movs	r3, #0
 800c3a4:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800c3a6:	6979      	ldr	r1, [r7, #20]
 800c3a8:	69f8      	ldr	r0, [r7, #28]
 800c3aa:	f001 f8e5 	bl	800d578 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800c3ae:	69fb      	ldr	r3, [r7, #28]
}
 800c3b0:	4618      	mov	r0, r3
 800c3b2:	3720      	adds	r7, #32
 800c3b4:	46bd      	mov	sp, r7
 800c3b6:	bd80      	pop	{r7, pc}

0800c3b8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800c3b8:	b580      	push	{r7, lr}
 800c3ba:	b088      	sub	sp, #32
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	60f8      	str	r0, [r7, #12]
 800c3c0:	60b9      	str	r1, [r7, #8]
 800c3c2:	603b      	str	r3, [r7, #0]
 800c3c4:	4613      	mov	r3, r2
 800c3c6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800c3cc:	2300      	movs	r3, #0
 800c3ce:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c3d0:	f3ef 8305 	mrs	r3, IPSR
 800c3d4:	617b      	str	r3, [r7, #20]
  return(result);
 800c3d6:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d028      	beq.n	800c42e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c3dc:	69bb      	ldr	r3, [r7, #24]
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d005      	beq.n	800c3ee <osMessageQueuePut+0x36>
 800c3e2:	68bb      	ldr	r3, [r7, #8]
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d002      	beq.n	800c3ee <osMessageQueuePut+0x36>
 800c3e8:	683b      	ldr	r3, [r7, #0]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d003      	beq.n	800c3f6 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800c3ee:	f06f 0303 	mvn.w	r3, #3
 800c3f2:	61fb      	str	r3, [r7, #28]
 800c3f4:	e038      	b.n	800c468 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800c3f6:	2300      	movs	r3, #0
 800c3f8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800c3fa:	f107 0210 	add.w	r2, r7, #16
 800c3fe:	2300      	movs	r3, #0
 800c400:	68b9      	ldr	r1, [r7, #8]
 800c402:	69b8      	ldr	r0, [r7, #24]
 800c404:	f000 fc7e 	bl	800cd04 <xQueueGenericSendFromISR>
 800c408:	4603      	mov	r3, r0
 800c40a:	2b01      	cmp	r3, #1
 800c40c:	d003      	beq.n	800c416 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800c40e:	f06f 0302 	mvn.w	r3, #2
 800c412:	61fb      	str	r3, [r7, #28]
 800c414:	e028      	b.n	800c468 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800c416:	693b      	ldr	r3, [r7, #16]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d025      	beq.n	800c468 <osMessageQueuePut+0xb0>
 800c41c:	4b15      	ldr	r3, [pc, #84]	@ (800c474 <osMessageQueuePut+0xbc>)
 800c41e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c422:	601a      	str	r2, [r3, #0]
 800c424:	f3bf 8f4f 	dsb	sy
 800c428:	f3bf 8f6f 	isb	sy
 800c42c:	e01c      	b.n	800c468 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800c42e:	69bb      	ldr	r3, [r7, #24]
 800c430:	2b00      	cmp	r3, #0
 800c432:	d002      	beq.n	800c43a <osMessageQueuePut+0x82>
 800c434:	68bb      	ldr	r3, [r7, #8]
 800c436:	2b00      	cmp	r3, #0
 800c438:	d103      	bne.n	800c442 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800c43a:	f06f 0303 	mvn.w	r3, #3
 800c43e:	61fb      	str	r3, [r7, #28]
 800c440:	e012      	b.n	800c468 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800c442:	2300      	movs	r3, #0
 800c444:	683a      	ldr	r2, [r7, #0]
 800c446:	68b9      	ldr	r1, [r7, #8]
 800c448:	69b8      	ldr	r0, [r7, #24]
 800c44a:	f000 fb59 	bl	800cb00 <xQueueGenericSend>
 800c44e:	4603      	mov	r3, r0
 800c450:	2b01      	cmp	r3, #1
 800c452:	d009      	beq.n	800c468 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800c454:	683b      	ldr	r3, [r7, #0]
 800c456:	2b00      	cmp	r3, #0
 800c458:	d003      	beq.n	800c462 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800c45a:	f06f 0301 	mvn.w	r3, #1
 800c45e:	61fb      	str	r3, [r7, #28]
 800c460:	e002      	b.n	800c468 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800c462:	f06f 0302 	mvn.w	r3, #2
 800c466:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800c468:	69fb      	ldr	r3, [r7, #28]
}
 800c46a:	4618      	mov	r0, r3
 800c46c:	3720      	adds	r7, #32
 800c46e:	46bd      	mov	sp, r7
 800c470:	bd80      	pop	{r7, pc}
 800c472:	bf00      	nop
 800c474:	e000ed04 	.word	0xe000ed04

0800c478 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800c478:	b580      	push	{r7, lr}
 800c47a:	b088      	sub	sp, #32
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	60f8      	str	r0, [r7, #12]
 800c480:	60b9      	str	r1, [r7, #8]
 800c482:	607a      	str	r2, [r7, #4]
 800c484:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800c48a:	2300      	movs	r3, #0
 800c48c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c48e:	f3ef 8305 	mrs	r3, IPSR
 800c492:	617b      	str	r3, [r7, #20]
  return(result);
 800c494:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800c496:	2b00      	cmp	r3, #0
 800c498:	d028      	beq.n	800c4ec <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c49a:	69bb      	ldr	r3, [r7, #24]
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d005      	beq.n	800c4ac <osMessageQueueGet+0x34>
 800c4a0:	68bb      	ldr	r3, [r7, #8]
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d002      	beq.n	800c4ac <osMessageQueueGet+0x34>
 800c4a6:	683b      	ldr	r3, [r7, #0]
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d003      	beq.n	800c4b4 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800c4ac:	f06f 0303 	mvn.w	r3, #3
 800c4b0:	61fb      	str	r3, [r7, #28]
 800c4b2:	e037      	b.n	800c524 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800c4b4:	2300      	movs	r3, #0
 800c4b6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800c4b8:	f107 0310 	add.w	r3, r7, #16
 800c4bc:	461a      	mov	r2, r3
 800c4be:	68b9      	ldr	r1, [r7, #8]
 800c4c0:	69b8      	ldr	r0, [r7, #24]
 800c4c2:	f000 feaf 	bl	800d224 <xQueueReceiveFromISR>
 800c4c6:	4603      	mov	r3, r0
 800c4c8:	2b01      	cmp	r3, #1
 800c4ca:	d003      	beq.n	800c4d4 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800c4cc:	f06f 0302 	mvn.w	r3, #2
 800c4d0:	61fb      	str	r3, [r7, #28]
 800c4d2:	e027      	b.n	800c524 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800c4d4:	693b      	ldr	r3, [r7, #16]
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d024      	beq.n	800c524 <osMessageQueueGet+0xac>
 800c4da:	4b15      	ldr	r3, [pc, #84]	@ (800c530 <osMessageQueueGet+0xb8>)
 800c4dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c4e0:	601a      	str	r2, [r3, #0]
 800c4e2:	f3bf 8f4f 	dsb	sy
 800c4e6:	f3bf 8f6f 	isb	sy
 800c4ea:	e01b      	b.n	800c524 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800c4ec:	69bb      	ldr	r3, [r7, #24]
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d002      	beq.n	800c4f8 <osMessageQueueGet+0x80>
 800c4f2:	68bb      	ldr	r3, [r7, #8]
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d103      	bne.n	800c500 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800c4f8:	f06f 0303 	mvn.w	r3, #3
 800c4fc:	61fb      	str	r3, [r7, #28]
 800c4fe:	e011      	b.n	800c524 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800c500:	683a      	ldr	r2, [r7, #0]
 800c502:	68b9      	ldr	r1, [r7, #8]
 800c504:	69b8      	ldr	r0, [r7, #24]
 800c506:	f000 fc9b 	bl	800ce40 <xQueueReceive>
 800c50a:	4603      	mov	r3, r0
 800c50c:	2b01      	cmp	r3, #1
 800c50e:	d009      	beq.n	800c524 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800c510:	683b      	ldr	r3, [r7, #0]
 800c512:	2b00      	cmp	r3, #0
 800c514:	d003      	beq.n	800c51e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800c516:	f06f 0301 	mvn.w	r3, #1
 800c51a:	61fb      	str	r3, [r7, #28]
 800c51c:	e002      	b.n	800c524 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800c51e:	f06f 0302 	mvn.w	r3, #2
 800c522:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800c524:	69fb      	ldr	r3, [r7, #28]
}
 800c526:	4618      	mov	r0, r3
 800c528:	3720      	adds	r7, #32
 800c52a:	46bd      	mov	sp, r7
 800c52c:	bd80      	pop	{r7, pc}
 800c52e:	bf00      	nop
 800c530:	e000ed04 	.word	0xe000ed04

0800c534 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c534:	b480      	push	{r7}
 800c536:	b085      	sub	sp, #20
 800c538:	af00      	add	r7, sp, #0
 800c53a:	60f8      	str	r0, [r7, #12]
 800c53c:	60b9      	str	r1, [r7, #8]
 800c53e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	4a07      	ldr	r2, [pc, #28]	@ (800c560 <vApplicationGetIdleTaskMemory+0x2c>)
 800c544:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c546:	68bb      	ldr	r3, [r7, #8]
 800c548:	4a06      	ldr	r2, [pc, #24]	@ (800c564 <vApplicationGetIdleTaskMemory+0x30>)
 800c54a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	2280      	movs	r2, #128	@ 0x80
 800c550:	601a      	str	r2, [r3, #0]
}
 800c552:	bf00      	nop
 800c554:	3714      	adds	r7, #20
 800c556:	46bd      	mov	sp, r7
 800c558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c55c:	4770      	bx	lr
 800c55e:	bf00      	nop
 800c560:	20000694 	.word	0x20000694
 800c564:	2000073c 	.word	0x2000073c

0800c568 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c568:	b480      	push	{r7}
 800c56a:	b085      	sub	sp, #20
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	60f8      	str	r0, [r7, #12]
 800c570:	60b9      	str	r1, [r7, #8]
 800c572:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	4a07      	ldr	r2, [pc, #28]	@ (800c594 <vApplicationGetTimerTaskMemory+0x2c>)
 800c578:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c57a:	68bb      	ldr	r3, [r7, #8]
 800c57c:	4a06      	ldr	r2, [pc, #24]	@ (800c598 <vApplicationGetTimerTaskMemory+0x30>)
 800c57e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c586:	601a      	str	r2, [r3, #0]
}
 800c588:	bf00      	nop
 800c58a:	3714      	adds	r7, #20
 800c58c:	46bd      	mov	sp, r7
 800c58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c592:	4770      	bx	lr
 800c594:	2000093c 	.word	0x2000093c
 800c598:	200009e4 	.word	0x200009e4

0800c59c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c59c:	b480      	push	{r7}
 800c59e:	b083      	sub	sp, #12
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	f103 0208 	add.w	r2, r3, #8
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c5b4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	f103 0208 	add.w	r2, r3, #8
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	f103 0208 	add.w	r2, r3, #8
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	2200      	movs	r2, #0
 800c5ce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c5d0:	bf00      	nop
 800c5d2:	370c      	adds	r7, #12
 800c5d4:	46bd      	mov	sp, r7
 800c5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5da:	4770      	bx	lr

0800c5dc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c5dc:	b480      	push	{r7}
 800c5de:	b083      	sub	sp, #12
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	2200      	movs	r2, #0
 800c5e8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c5ea:	bf00      	nop
 800c5ec:	370c      	adds	r7, #12
 800c5ee:	46bd      	mov	sp, r7
 800c5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f4:	4770      	bx	lr

0800c5f6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c5f6:	b480      	push	{r7}
 800c5f8:	b085      	sub	sp, #20
 800c5fa:	af00      	add	r7, sp, #0
 800c5fc:	6078      	str	r0, [r7, #4]
 800c5fe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	685b      	ldr	r3, [r3, #4]
 800c604:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c606:	683b      	ldr	r3, [r7, #0]
 800c608:	68fa      	ldr	r2, [r7, #12]
 800c60a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	689a      	ldr	r2, [r3, #8]
 800c610:	683b      	ldr	r3, [r7, #0]
 800c612:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	689b      	ldr	r3, [r3, #8]
 800c618:	683a      	ldr	r2, [r7, #0]
 800c61a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	683a      	ldr	r2, [r7, #0]
 800c620:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c622:	683b      	ldr	r3, [r7, #0]
 800c624:	687a      	ldr	r2, [r7, #4]
 800c626:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	1c5a      	adds	r2, r3, #1
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	601a      	str	r2, [r3, #0]
}
 800c632:	bf00      	nop
 800c634:	3714      	adds	r7, #20
 800c636:	46bd      	mov	sp, r7
 800c638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c63c:	4770      	bx	lr

0800c63e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c63e:	b480      	push	{r7}
 800c640:	b085      	sub	sp, #20
 800c642:	af00      	add	r7, sp, #0
 800c644:	6078      	str	r0, [r7, #4]
 800c646:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c648:	683b      	ldr	r3, [r7, #0]
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c64e:	68bb      	ldr	r3, [r7, #8]
 800c650:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c654:	d103      	bne.n	800c65e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	691b      	ldr	r3, [r3, #16]
 800c65a:	60fb      	str	r3, [r7, #12]
 800c65c:	e00c      	b.n	800c678 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	3308      	adds	r3, #8
 800c662:	60fb      	str	r3, [r7, #12]
 800c664:	e002      	b.n	800c66c <vListInsert+0x2e>
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	685b      	ldr	r3, [r3, #4]
 800c66a:	60fb      	str	r3, [r7, #12]
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	685b      	ldr	r3, [r3, #4]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	68ba      	ldr	r2, [r7, #8]
 800c674:	429a      	cmp	r2, r3
 800c676:	d2f6      	bcs.n	800c666 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	685a      	ldr	r2, [r3, #4]
 800c67c:	683b      	ldr	r3, [r7, #0]
 800c67e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c680:	683b      	ldr	r3, [r7, #0]
 800c682:	685b      	ldr	r3, [r3, #4]
 800c684:	683a      	ldr	r2, [r7, #0]
 800c686:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c688:	683b      	ldr	r3, [r7, #0]
 800c68a:	68fa      	ldr	r2, [r7, #12]
 800c68c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	683a      	ldr	r2, [r7, #0]
 800c692:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c694:	683b      	ldr	r3, [r7, #0]
 800c696:	687a      	ldr	r2, [r7, #4]
 800c698:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	1c5a      	adds	r2, r3, #1
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	601a      	str	r2, [r3, #0]
}
 800c6a4:	bf00      	nop
 800c6a6:	3714      	adds	r7, #20
 800c6a8:	46bd      	mov	sp, r7
 800c6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ae:	4770      	bx	lr

0800c6b0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c6b0:	b480      	push	{r7}
 800c6b2:	b085      	sub	sp, #20
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	691b      	ldr	r3, [r3, #16]
 800c6bc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	685b      	ldr	r3, [r3, #4]
 800c6c2:	687a      	ldr	r2, [r7, #4]
 800c6c4:	6892      	ldr	r2, [r2, #8]
 800c6c6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	689b      	ldr	r3, [r3, #8]
 800c6cc:	687a      	ldr	r2, [r7, #4]
 800c6ce:	6852      	ldr	r2, [r2, #4]
 800c6d0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	685b      	ldr	r3, [r3, #4]
 800c6d6:	687a      	ldr	r2, [r7, #4]
 800c6d8:	429a      	cmp	r2, r3
 800c6da:	d103      	bne.n	800c6e4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	689a      	ldr	r2, [r3, #8]
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	2200      	movs	r2, #0
 800c6e8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	1e5a      	subs	r2, r3, #1
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	681b      	ldr	r3, [r3, #0]
}
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	3714      	adds	r7, #20
 800c6fc:	46bd      	mov	sp, r7
 800c6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c702:	4770      	bx	lr

0800c704 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c704:	b580      	push	{r7, lr}
 800c706:	b084      	sub	sp, #16
 800c708:	af00      	add	r7, sp, #0
 800c70a:	6078      	str	r0, [r7, #4]
 800c70c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	2b00      	cmp	r3, #0
 800c716:	d10b      	bne.n	800c730 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c718:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c71c:	f383 8811 	msr	BASEPRI, r3
 800c720:	f3bf 8f6f 	isb	sy
 800c724:	f3bf 8f4f 	dsb	sy
 800c728:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c72a:	bf00      	nop
 800c72c:	bf00      	nop
 800c72e:	e7fd      	b.n	800c72c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c730:	f002 fcea 	bl	800f108 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	681a      	ldr	r2, [r3, #0]
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c73c:	68f9      	ldr	r1, [r7, #12]
 800c73e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c740:	fb01 f303 	mul.w	r3, r1, r3
 800c744:	441a      	add	r2, r3
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	2200      	movs	r2, #0
 800c74e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	681a      	ldr	r2, [r3, #0]
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	681a      	ldr	r2, [r3, #0]
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c760:	3b01      	subs	r3, #1
 800c762:	68f9      	ldr	r1, [r7, #12]
 800c764:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c766:	fb01 f303 	mul.w	r3, r1, r3
 800c76a:	441a      	add	r2, r3
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	22ff      	movs	r2, #255	@ 0xff
 800c774:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	22ff      	movs	r2, #255	@ 0xff
 800c77c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800c780:	683b      	ldr	r3, [r7, #0]
 800c782:	2b00      	cmp	r3, #0
 800c784:	d114      	bne.n	800c7b0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	691b      	ldr	r3, [r3, #16]
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d01a      	beq.n	800c7c4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	3310      	adds	r3, #16
 800c792:	4618      	mov	r0, r3
 800c794:	f001 fc72 	bl	800e07c <xTaskRemoveFromEventList>
 800c798:	4603      	mov	r3, r0
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d012      	beq.n	800c7c4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c79e:	4b0d      	ldr	r3, [pc, #52]	@ (800c7d4 <xQueueGenericReset+0xd0>)
 800c7a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c7a4:	601a      	str	r2, [r3, #0]
 800c7a6:	f3bf 8f4f 	dsb	sy
 800c7aa:	f3bf 8f6f 	isb	sy
 800c7ae:	e009      	b.n	800c7c4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	3310      	adds	r3, #16
 800c7b4:	4618      	mov	r0, r3
 800c7b6:	f7ff fef1 	bl	800c59c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	3324      	adds	r3, #36	@ 0x24
 800c7be:	4618      	mov	r0, r3
 800c7c0:	f7ff feec 	bl	800c59c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c7c4:	f002 fcd2 	bl	800f16c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c7c8:	2301      	movs	r3, #1
}
 800c7ca:	4618      	mov	r0, r3
 800c7cc:	3710      	adds	r7, #16
 800c7ce:	46bd      	mov	sp, r7
 800c7d0:	bd80      	pop	{r7, pc}
 800c7d2:	bf00      	nop
 800c7d4:	e000ed04 	.word	0xe000ed04

0800c7d8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c7d8:	b580      	push	{r7, lr}
 800c7da:	b08e      	sub	sp, #56	@ 0x38
 800c7dc:	af02      	add	r7, sp, #8
 800c7de:	60f8      	str	r0, [r7, #12]
 800c7e0:	60b9      	str	r1, [r7, #8]
 800c7e2:	607a      	str	r2, [r7, #4]
 800c7e4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d10b      	bne.n	800c804 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800c7ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7f0:	f383 8811 	msr	BASEPRI, r3
 800c7f4:	f3bf 8f6f 	isb	sy
 800c7f8:	f3bf 8f4f 	dsb	sy
 800c7fc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c7fe:	bf00      	nop
 800c800:	bf00      	nop
 800c802:	e7fd      	b.n	800c800 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c804:	683b      	ldr	r3, [r7, #0]
 800c806:	2b00      	cmp	r3, #0
 800c808:	d10b      	bne.n	800c822 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800c80a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c80e:	f383 8811 	msr	BASEPRI, r3
 800c812:	f3bf 8f6f 	isb	sy
 800c816:	f3bf 8f4f 	dsb	sy
 800c81a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c81c:	bf00      	nop
 800c81e:	bf00      	nop
 800c820:	e7fd      	b.n	800c81e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	2b00      	cmp	r3, #0
 800c826:	d002      	beq.n	800c82e <xQueueGenericCreateStatic+0x56>
 800c828:	68bb      	ldr	r3, [r7, #8]
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d001      	beq.n	800c832 <xQueueGenericCreateStatic+0x5a>
 800c82e:	2301      	movs	r3, #1
 800c830:	e000      	b.n	800c834 <xQueueGenericCreateStatic+0x5c>
 800c832:	2300      	movs	r3, #0
 800c834:	2b00      	cmp	r3, #0
 800c836:	d10b      	bne.n	800c850 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800c838:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c83c:	f383 8811 	msr	BASEPRI, r3
 800c840:	f3bf 8f6f 	isb	sy
 800c844:	f3bf 8f4f 	dsb	sy
 800c848:	623b      	str	r3, [r7, #32]
}
 800c84a:	bf00      	nop
 800c84c:	bf00      	nop
 800c84e:	e7fd      	b.n	800c84c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	2b00      	cmp	r3, #0
 800c854:	d102      	bne.n	800c85c <xQueueGenericCreateStatic+0x84>
 800c856:	68bb      	ldr	r3, [r7, #8]
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d101      	bne.n	800c860 <xQueueGenericCreateStatic+0x88>
 800c85c:	2301      	movs	r3, #1
 800c85e:	e000      	b.n	800c862 <xQueueGenericCreateStatic+0x8a>
 800c860:	2300      	movs	r3, #0
 800c862:	2b00      	cmp	r3, #0
 800c864:	d10b      	bne.n	800c87e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800c866:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c86a:	f383 8811 	msr	BASEPRI, r3
 800c86e:	f3bf 8f6f 	isb	sy
 800c872:	f3bf 8f4f 	dsb	sy
 800c876:	61fb      	str	r3, [r7, #28]
}
 800c878:	bf00      	nop
 800c87a:	bf00      	nop
 800c87c:	e7fd      	b.n	800c87a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c87e:	2350      	movs	r3, #80	@ 0x50
 800c880:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c882:	697b      	ldr	r3, [r7, #20]
 800c884:	2b50      	cmp	r3, #80	@ 0x50
 800c886:	d00b      	beq.n	800c8a0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800c888:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c88c:	f383 8811 	msr	BASEPRI, r3
 800c890:	f3bf 8f6f 	isb	sy
 800c894:	f3bf 8f4f 	dsb	sy
 800c898:	61bb      	str	r3, [r7, #24]
}
 800c89a:	bf00      	nop
 800c89c:	bf00      	nop
 800c89e:	e7fd      	b.n	800c89c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c8a0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c8a2:	683b      	ldr	r3, [r7, #0]
 800c8a4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800c8a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d00d      	beq.n	800c8c8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c8ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8ae:	2201      	movs	r2, #1
 800c8b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c8b4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800c8b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8ba:	9300      	str	r3, [sp, #0]
 800c8bc:	4613      	mov	r3, r2
 800c8be:	687a      	ldr	r2, [r7, #4]
 800c8c0:	68b9      	ldr	r1, [r7, #8]
 800c8c2:	68f8      	ldr	r0, [r7, #12]
 800c8c4:	f000 f840 	bl	800c948 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c8c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800c8ca:	4618      	mov	r0, r3
 800c8cc:	3730      	adds	r7, #48	@ 0x30
 800c8ce:	46bd      	mov	sp, r7
 800c8d0:	bd80      	pop	{r7, pc}

0800c8d2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c8d2:	b580      	push	{r7, lr}
 800c8d4:	b08a      	sub	sp, #40	@ 0x28
 800c8d6:	af02      	add	r7, sp, #8
 800c8d8:	60f8      	str	r0, [r7, #12]
 800c8da:	60b9      	str	r1, [r7, #8]
 800c8dc:	4613      	mov	r3, r2
 800c8de:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d10b      	bne.n	800c8fe <xQueueGenericCreate+0x2c>
	__asm volatile
 800c8e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8ea:	f383 8811 	msr	BASEPRI, r3
 800c8ee:	f3bf 8f6f 	isb	sy
 800c8f2:	f3bf 8f4f 	dsb	sy
 800c8f6:	613b      	str	r3, [r7, #16]
}
 800c8f8:	bf00      	nop
 800c8fa:	bf00      	nop
 800c8fc:	e7fd      	b.n	800c8fa <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	68ba      	ldr	r2, [r7, #8]
 800c902:	fb02 f303 	mul.w	r3, r2, r3
 800c906:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c908:	69fb      	ldr	r3, [r7, #28]
 800c90a:	3350      	adds	r3, #80	@ 0x50
 800c90c:	4618      	mov	r0, r3
 800c90e:	f002 fd1d 	bl	800f34c <pvPortMalloc>
 800c912:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c914:	69bb      	ldr	r3, [r7, #24]
 800c916:	2b00      	cmp	r3, #0
 800c918:	d011      	beq.n	800c93e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c91a:	69bb      	ldr	r3, [r7, #24]
 800c91c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c91e:	697b      	ldr	r3, [r7, #20]
 800c920:	3350      	adds	r3, #80	@ 0x50
 800c922:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c924:	69bb      	ldr	r3, [r7, #24]
 800c926:	2200      	movs	r2, #0
 800c928:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c92c:	79fa      	ldrb	r2, [r7, #7]
 800c92e:	69bb      	ldr	r3, [r7, #24]
 800c930:	9300      	str	r3, [sp, #0]
 800c932:	4613      	mov	r3, r2
 800c934:	697a      	ldr	r2, [r7, #20]
 800c936:	68b9      	ldr	r1, [r7, #8]
 800c938:	68f8      	ldr	r0, [r7, #12]
 800c93a:	f000 f805 	bl	800c948 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c93e:	69bb      	ldr	r3, [r7, #24]
	}
 800c940:	4618      	mov	r0, r3
 800c942:	3720      	adds	r7, #32
 800c944:	46bd      	mov	sp, r7
 800c946:	bd80      	pop	{r7, pc}

0800c948 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c948:	b580      	push	{r7, lr}
 800c94a:	b084      	sub	sp, #16
 800c94c:	af00      	add	r7, sp, #0
 800c94e:	60f8      	str	r0, [r7, #12]
 800c950:	60b9      	str	r1, [r7, #8]
 800c952:	607a      	str	r2, [r7, #4]
 800c954:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c956:	68bb      	ldr	r3, [r7, #8]
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d103      	bne.n	800c964 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c95c:	69bb      	ldr	r3, [r7, #24]
 800c95e:	69ba      	ldr	r2, [r7, #24]
 800c960:	601a      	str	r2, [r3, #0]
 800c962:	e002      	b.n	800c96a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c964:	69bb      	ldr	r3, [r7, #24]
 800c966:	687a      	ldr	r2, [r7, #4]
 800c968:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c96a:	69bb      	ldr	r3, [r7, #24]
 800c96c:	68fa      	ldr	r2, [r7, #12]
 800c96e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c970:	69bb      	ldr	r3, [r7, #24]
 800c972:	68ba      	ldr	r2, [r7, #8]
 800c974:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c976:	2101      	movs	r1, #1
 800c978:	69b8      	ldr	r0, [r7, #24]
 800c97a:	f7ff fec3 	bl	800c704 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800c97e:	69bb      	ldr	r3, [r7, #24]
 800c980:	78fa      	ldrb	r2, [r7, #3]
 800c982:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c986:	bf00      	nop
 800c988:	3710      	adds	r7, #16
 800c98a:	46bd      	mov	sp, r7
 800c98c:	bd80      	pop	{r7, pc}

0800c98e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800c98e:	b580      	push	{r7, lr}
 800c990:	b082      	sub	sp, #8
 800c992:	af00      	add	r7, sp, #0
 800c994:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d00e      	beq.n	800c9ba <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	2200      	movs	r2, #0
 800c9a0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	2200      	movs	r2, #0
 800c9a6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	2200      	movs	r2, #0
 800c9ac:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800c9ae:	2300      	movs	r3, #0
 800c9b0:	2200      	movs	r2, #0
 800c9b2:	2100      	movs	r1, #0
 800c9b4:	6878      	ldr	r0, [r7, #4]
 800c9b6:	f000 f8a3 	bl	800cb00 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800c9ba:	bf00      	nop
 800c9bc:	3708      	adds	r7, #8
 800c9be:	46bd      	mov	sp, r7
 800c9c0:	bd80      	pop	{r7, pc}

0800c9c2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800c9c2:	b580      	push	{r7, lr}
 800c9c4:	b086      	sub	sp, #24
 800c9c6:	af00      	add	r7, sp, #0
 800c9c8:	4603      	mov	r3, r0
 800c9ca:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800c9cc:	2301      	movs	r3, #1
 800c9ce:	617b      	str	r3, [r7, #20]
 800c9d0:	2300      	movs	r3, #0
 800c9d2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800c9d4:	79fb      	ldrb	r3, [r7, #7]
 800c9d6:	461a      	mov	r2, r3
 800c9d8:	6939      	ldr	r1, [r7, #16]
 800c9da:	6978      	ldr	r0, [r7, #20]
 800c9dc:	f7ff ff79 	bl	800c8d2 <xQueueGenericCreate>
 800c9e0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800c9e2:	68f8      	ldr	r0, [r7, #12]
 800c9e4:	f7ff ffd3 	bl	800c98e <prvInitialiseMutex>

		return xNewQueue;
 800c9e8:	68fb      	ldr	r3, [r7, #12]
	}
 800c9ea:	4618      	mov	r0, r3
 800c9ec:	3718      	adds	r7, #24
 800c9ee:	46bd      	mov	sp, r7
 800c9f0:	bd80      	pop	{r7, pc}

0800c9f2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800c9f2:	b580      	push	{r7, lr}
 800c9f4:	b088      	sub	sp, #32
 800c9f6:	af02      	add	r7, sp, #8
 800c9f8:	4603      	mov	r3, r0
 800c9fa:	6039      	str	r1, [r7, #0]
 800c9fc:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800c9fe:	2301      	movs	r3, #1
 800ca00:	617b      	str	r3, [r7, #20]
 800ca02:	2300      	movs	r3, #0
 800ca04:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800ca06:	79fb      	ldrb	r3, [r7, #7]
 800ca08:	9300      	str	r3, [sp, #0]
 800ca0a:	683b      	ldr	r3, [r7, #0]
 800ca0c:	2200      	movs	r2, #0
 800ca0e:	6939      	ldr	r1, [r7, #16]
 800ca10:	6978      	ldr	r0, [r7, #20]
 800ca12:	f7ff fee1 	bl	800c7d8 <xQueueGenericCreateStatic>
 800ca16:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800ca18:	68f8      	ldr	r0, [r7, #12]
 800ca1a:	f7ff ffb8 	bl	800c98e <prvInitialiseMutex>

		return xNewQueue;
 800ca1e:	68fb      	ldr	r3, [r7, #12]
	}
 800ca20:	4618      	mov	r0, r3
 800ca22:	3718      	adds	r7, #24
 800ca24:	46bd      	mov	sp, r7
 800ca26:	bd80      	pop	{r7, pc}

0800ca28 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800ca28:	b590      	push	{r4, r7, lr}
 800ca2a:	b087      	sub	sp, #28
 800ca2c:	af00      	add	r7, sp, #0
 800ca2e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800ca34:	693b      	ldr	r3, [r7, #16]
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d10b      	bne.n	800ca52 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 800ca3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca3e:	f383 8811 	msr	BASEPRI, r3
 800ca42:	f3bf 8f6f 	isb	sy
 800ca46:	f3bf 8f4f 	dsb	sy
 800ca4a:	60fb      	str	r3, [r7, #12]
}
 800ca4c:	bf00      	nop
 800ca4e:	bf00      	nop
 800ca50:	e7fd      	b.n	800ca4e <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800ca52:	693b      	ldr	r3, [r7, #16]
 800ca54:	689c      	ldr	r4, [r3, #8]
 800ca56:	f001 fcd7 	bl	800e408 <xTaskGetCurrentTaskHandle>
 800ca5a:	4603      	mov	r3, r0
 800ca5c:	429c      	cmp	r4, r3
 800ca5e:	d111      	bne.n	800ca84 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800ca60:	693b      	ldr	r3, [r7, #16]
 800ca62:	68db      	ldr	r3, [r3, #12]
 800ca64:	1e5a      	subs	r2, r3, #1
 800ca66:	693b      	ldr	r3, [r7, #16]
 800ca68:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800ca6a:	693b      	ldr	r3, [r7, #16]
 800ca6c:	68db      	ldr	r3, [r3, #12]
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d105      	bne.n	800ca7e <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800ca72:	2300      	movs	r3, #0
 800ca74:	2200      	movs	r2, #0
 800ca76:	2100      	movs	r1, #0
 800ca78:	6938      	ldr	r0, [r7, #16]
 800ca7a:	f000 f841 	bl	800cb00 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800ca7e:	2301      	movs	r3, #1
 800ca80:	617b      	str	r3, [r7, #20]
 800ca82:	e001      	b.n	800ca88 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800ca84:	2300      	movs	r3, #0
 800ca86:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800ca88:	697b      	ldr	r3, [r7, #20]
	}
 800ca8a:	4618      	mov	r0, r3
 800ca8c:	371c      	adds	r7, #28
 800ca8e:	46bd      	mov	sp, r7
 800ca90:	bd90      	pop	{r4, r7, pc}

0800ca92 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800ca92:	b590      	push	{r4, r7, lr}
 800ca94:	b087      	sub	sp, #28
 800ca96:	af00      	add	r7, sp, #0
 800ca98:	6078      	str	r0, [r7, #4]
 800ca9a:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800caa0:	693b      	ldr	r3, [r7, #16]
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d10b      	bne.n	800cabe <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 800caa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800caaa:	f383 8811 	msr	BASEPRI, r3
 800caae:	f3bf 8f6f 	isb	sy
 800cab2:	f3bf 8f4f 	dsb	sy
 800cab6:	60fb      	str	r3, [r7, #12]
}
 800cab8:	bf00      	nop
 800caba:	bf00      	nop
 800cabc:	e7fd      	b.n	800caba <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800cabe:	693b      	ldr	r3, [r7, #16]
 800cac0:	689c      	ldr	r4, [r3, #8]
 800cac2:	f001 fca1 	bl	800e408 <xTaskGetCurrentTaskHandle>
 800cac6:	4603      	mov	r3, r0
 800cac8:	429c      	cmp	r4, r3
 800caca:	d107      	bne.n	800cadc <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800cacc:	693b      	ldr	r3, [r7, #16]
 800cace:	68db      	ldr	r3, [r3, #12]
 800cad0:	1c5a      	adds	r2, r3, #1
 800cad2:	693b      	ldr	r3, [r7, #16]
 800cad4:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800cad6:	2301      	movs	r3, #1
 800cad8:	617b      	str	r3, [r7, #20]
 800cada:	e00c      	b.n	800caf6 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800cadc:	6839      	ldr	r1, [r7, #0]
 800cade:	6938      	ldr	r0, [r7, #16]
 800cae0:	f000 fa90 	bl	800d004 <xQueueSemaphoreTake>
 800cae4:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800cae6:	697b      	ldr	r3, [r7, #20]
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d004      	beq.n	800caf6 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800caec:	693b      	ldr	r3, [r7, #16]
 800caee:	68db      	ldr	r3, [r3, #12]
 800caf0:	1c5a      	adds	r2, r3, #1
 800caf2:	693b      	ldr	r3, [r7, #16]
 800caf4:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800caf6:	697b      	ldr	r3, [r7, #20]
	}
 800caf8:	4618      	mov	r0, r3
 800cafa:	371c      	adds	r7, #28
 800cafc:	46bd      	mov	sp, r7
 800cafe:	bd90      	pop	{r4, r7, pc}

0800cb00 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800cb00:	b580      	push	{r7, lr}
 800cb02:	b08e      	sub	sp, #56	@ 0x38
 800cb04:	af00      	add	r7, sp, #0
 800cb06:	60f8      	str	r0, [r7, #12]
 800cb08:	60b9      	str	r1, [r7, #8]
 800cb0a:	607a      	str	r2, [r7, #4]
 800cb0c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800cb0e:	2300      	movs	r3, #0
 800cb10:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800cb16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d10b      	bne.n	800cb34 <xQueueGenericSend+0x34>
	__asm volatile
 800cb1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb20:	f383 8811 	msr	BASEPRI, r3
 800cb24:	f3bf 8f6f 	isb	sy
 800cb28:	f3bf 8f4f 	dsb	sy
 800cb2c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800cb2e:	bf00      	nop
 800cb30:	bf00      	nop
 800cb32:	e7fd      	b.n	800cb30 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cb34:	68bb      	ldr	r3, [r7, #8]
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d103      	bne.n	800cb42 <xQueueGenericSend+0x42>
 800cb3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d101      	bne.n	800cb46 <xQueueGenericSend+0x46>
 800cb42:	2301      	movs	r3, #1
 800cb44:	e000      	b.n	800cb48 <xQueueGenericSend+0x48>
 800cb46:	2300      	movs	r3, #0
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d10b      	bne.n	800cb64 <xQueueGenericSend+0x64>
	__asm volatile
 800cb4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb50:	f383 8811 	msr	BASEPRI, r3
 800cb54:	f3bf 8f6f 	isb	sy
 800cb58:	f3bf 8f4f 	dsb	sy
 800cb5c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800cb5e:	bf00      	nop
 800cb60:	bf00      	nop
 800cb62:	e7fd      	b.n	800cb60 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cb64:	683b      	ldr	r3, [r7, #0]
 800cb66:	2b02      	cmp	r3, #2
 800cb68:	d103      	bne.n	800cb72 <xQueueGenericSend+0x72>
 800cb6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cb6e:	2b01      	cmp	r3, #1
 800cb70:	d101      	bne.n	800cb76 <xQueueGenericSend+0x76>
 800cb72:	2301      	movs	r3, #1
 800cb74:	e000      	b.n	800cb78 <xQueueGenericSend+0x78>
 800cb76:	2300      	movs	r3, #0
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d10b      	bne.n	800cb94 <xQueueGenericSend+0x94>
	__asm volatile
 800cb7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb80:	f383 8811 	msr	BASEPRI, r3
 800cb84:	f3bf 8f6f 	isb	sy
 800cb88:	f3bf 8f4f 	dsb	sy
 800cb8c:	623b      	str	r3, [r7, #32]
}
 800cb8e:	bf00      	nop
 800cb90:	bf00      	nop
 800cb92:	e7fd      	b.n	800cb90 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cb94:	f001 fc48 	bl	800e428 <xTaskGetSchedulerState>
 800cb98:	4603      	mov	r3, r0
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d102      	bne.n	800cba4 <xQueueGenericSend+0xa4>
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d101      	bne.n	800cba8 <xQueueGenericSend+0xa8>
 800cba4:	2301      	movs	r3, #1
 800cba6:	e000      	b.n	800cbaa <xQueueGenericSend+0xaa>
 800cba8:	2300      	movs	r3, #0
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d10b      	bne.n	800cbc6 <xQueueGenericSend+0xc6>
	__asm volatile
 800cbae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbb2:	f383 8811 	msr	BASEPRI, r3
 800cbb6:	f3bf 8f6f 	isb	sy
 800cbba:	f3bf 8f4f 	dsb	sy
 800cbbe:	61fb      	str	r3, [r7, #28]
}
 800cbc0:	bf00      	nop
 800cbc2:	bf00      	nop
 800cbc4:	e7fd      	b.n	800cbc2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cbc6:	f002 fa9f 	bl	800f108 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cbca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbcc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cbce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cbd2:	429a      	cmp	r2, r3
 800cbd4:	d302      	bcc.n	800cbdc <xQueueGenericSend+0xdc>
 800cbd6:	683b      	ldr	r3, [r7, #0]
 800cbd8:	2b02      	cmp	r3, #2
 800cbda:	d129      	bne.n	800cc30 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cbdc:	683a      	ldr	r2, [r7, #0]
 800cbde:	68b9      	ldr	r1, [r7, #8]
 800cbe0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cbe2:	f000 fbb9 	bl	800d358 <prvCopyDataToQueue>
 800cbe6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cbe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d010      	beq.n	800cc12 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cbf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbf2:	3324      	adds	r3, #36	@ 0x24
 800cbf4:	4618      	mov	r0, r3
 800cbf6:	f001 fa41 	bl	800e07c <xTaskRemoveFromEventList>
 800cbfa:	4603      	mov	r3, r0
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d013      	beq.n	800cc28 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800cc00:	4b3f      	ldr	r3, [pc, #252]	@ (800cd00 <xQueueGenericSend+0x200>)
 800cc02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cc06:	601a      	str	r2, [r3, #0]
 800cc08:	f3bf 8f4f 	dsb	sy
 800cc0c:	f3bf 8f6f 	isb	sy
 800cc10:	e00a      	b.n	800cc28 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800cc12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d007      	beq.n	800cc28 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800cc18:	4b39      	ldr	r3, [pc, #228]	@ (800cd00 <xQueueGenericSend+0x200>)
 800cc1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cc1e:	601a      	str	r2, [r3, #0]
 800cc20:	f3bf 8f4f 	dsb	sy
 800cc24:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800cc28:	f002 faa0 	bl	800f16c <vPortExitCritical>
				return pdPASS;
 800cc2c:	2301      	movs	r3, #1
 800cc2e:	e063      	b.n	800ccf8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d103      	bne.n	800cc3e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cc36:	f002 fa99 	bl	800f16c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800cc3a:	2300      	movs	r3, #0
 800cc3c:	e05c      	b.n	800ccf8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cc3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d106      	bne.n	800cc52 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cc44:	f107 0314 	add.w	r3, r7, #20
 800cc48:	4618      	mov	r0, r3
 800cc4a:	f001 fa7b 	bl	800e144 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cc4e:	2301      	movs	r3, #1
 800cc50:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cc52:	f002 fa8b 	bl	800f16c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cc56:	f000 ffd1 	bl	800dbfc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cc5a:	f002 fa55 	bl	800f108 <vPortEnterCritical>
 800cc5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc60:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cc64:	b25b      	sxtb	r3, r3
 800cc66:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cc6a:	d103      	bne.n	800cc74 <xQueueGenericSend+0x174>
 800cc6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc6e:	2200      	movs	r2, #0
 800cc70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cc74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc76:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cc7a:	b25b      	sxtb	r3, r3
 800cc7c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cc80:	d103      	bne.n	800cc8a <xQueueGenericSend+0x18a>
 800cc82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc84:	2200      	movs	r2, #0
 800cc86:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800cc8a:	f002 fa6f 	bl	800f16c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cc8e:	1d3a      	adds	r2, r7, #4
 800cc90:	f107 0314 	add.w	r3, r7, #20
 800cc94:	4611      	mov	r1, r2
 800cc96:	4618      	mov	r0, r3
 800cc98:	f001 fa6a 	bl	800e170 <xTaskCheckForTimeOut>
 800cc9c:	4603      	mov	r3, r0
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d124      	bne.n	800ccec <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800cca2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cca4:	f000 fc50 	bl	800d548 <prvIsQueueFull>
 800cca8:	4603      	mov	r3, r0
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d018      	beq.n	800cce0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ccae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccb0:	3310      	adds	r3, #16
 800ccb2:	687a      	ldr	r2, [r7, #4]
 800ccb4:	4611      	mov	r1, r2
 800ccb6:	4618      	mov	r0, r3
 800ccb8:	f001 f98e 	bl	800dfd8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ccbc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ccbe:	f000 fbdb 	bl	800d478 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ccc2:	f000 ffa9 	bl	800dc18 <xTaskResumeAll>
 800ccc6:	4603      	mov	r3, r0
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	f47f af7c 	bne.w	800cbc6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800ccce:	4b0c      	ldr	r3, [pc, #48]	@ (800cd00 <xQueueGenericSend+0x200>)
 800ccd0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ccd4:	601a      	str	r2, [r3, #0]
 800ccd6:	f3bf 8f4f 	dsb	sy
 800ccda:	f3bf 8f6f 	isb	sy
 800ccde:	e772      	b.n	800cbc6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800cce0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cce2:	f000 fbc9 	bl	800d478 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cce6:	f000 ff97 	bl	800dc18 <xTaskResumeAll>
 800ccea:	e76c      	b.n	800cbc6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ccec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ccee:	f000 fbc3 	bl	800d478 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ccf2:	f000 ff91 	bl	800dc18 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ccf6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ccf8:	4618      	mov	r0, r3
 800ccfa:	3738      	adds	r7, #56	@ 0x38
 800ccfc:	46bd      	mov	sp, r7
 800ccfe:	bd80      	pop	{r7, pc}
 800cd00:	e000ed04 	.word	0xe000ed04

0800cd04 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800cd04:	b580      	push	{r7, lr}
 800cd06:	b090      	sub	sp, #64	@ 0x40
 800cd08:	af00      	add	r7, sp, #0
 800cd0a:	60f8      	str	r0, [r7, #12]
 800cd0c:	60b9      	str	r1, [r7, #8]
 800cd0e:	607a      	str	r2, [r7, #4]
 800cd10:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800cd16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d10b      	bne.n	800cd34 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800cd1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd20:	f383 8811 	msr	BASEPRI, r3
 800cd24:	f3bf 8f6f 	isb	sy
 800cd28:	f3bf 8f4f 	dsb	sy
 800cd2c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800cd2e:	bf00      	nop
 800cd30:	bf00      	nop
 800cd32:	e7fd      	b.n	800cd30 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cd34:	68bb      	ldr	r3, [r7, #8]
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d103      	bne.n	800cd42 <xQueueGenericSendFromISR+0x3e>
 800cd3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d101      	bne.n	800cd46 <xQueueGenericSendFromISR+0x42>
 800cd42:	2301      	movs	r3, #1
 800cd44:	e000      	b.n	800cd48 <xQueueGenericSendFromISR+0x44>
 800cd46:	2300      	movs	r3, #0
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d10b      	bne.n	800cd64 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800cd4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd50:	f383 8811 	msr	BASEPRI, r3
 800cd54:	f3bf 8f6f 	isb	sy
 800cd58:	f3bf 8f4f 	dsb	sy
 800cd5c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800cd5e:	bf00      	nop
 800cd60:	bf00      	nop
 800cd62:	e7fd      	b.n	800cd60 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cd64:	683b      	ldr	r3, [r7, #0]
 800cd66:	2b02      	cmp	r3, #2
 800cd68:	d103      	bne.n	800cd72 <xQueueGenericSendFromISR+0x6e>
 800cd6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cd6e:	2b01      	cmp	r3, #1
 800cd70:	d101      	bne.n	800cd76 <xQueueGenericSendFromISR+0x72>
 800cd72:	2301      	movs	r3, #1
 800cd74:	e000      	b.n	800cd78 <xQueueGenericSendFromISR+0x74>
 800cd76:	2300      	movs	r3, #0
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d10b      	bne.n	800cd94 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800cd7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd80:	f383 8811 	msr	BASEPRI, r3
 800cd84:	f3bf 8f6f 	isb	sy
 800cd88:	f3bf 8f4f 	dsb	sy
 800cd8c:	623b      	str	r3, [r7, #32]
}
 800cd8e:	bf00      	nop
 800cd90:	bf00      	nop
 800cd92:	e7fd      	b.n	800cd90 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cd94:	f002 fa98 	bl	800f2c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800cd98:	f3ef 8211 	mrs	r2, BASEPRI
 800cd9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cda0:	f383 8811 	msr	BASEPRI, r3
 800cda4:	f3bf 8f6f 	isb	sy
 800cda8:	f3bf 8f4f 	dsb	sy
 800cdac:	61fa      	str	r2, [r7, #28]
 800cdae:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800cdb0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cdb2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cdb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdb6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cdb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cdbc:	429a      	cmp	r2, r3
 800cdbe:	d302      	bcc.n	800cdc6 <xQueueGenericSendFromISR+0xc2>
 800cdc0:	683b      	ldr	r3, [r7, #0]
 800cdc2:	2b02      	cmp	r3, #2
 800cdc4:	d12f      	bne.n	800ce26 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800cdc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdc8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cdcc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cdd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cdd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cdd6:	683a      	ldr	r2, [r7, #0]
 800cdd8:	68b9      	ldr	r1, [r7, #8]
 800cdda:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800cddc:	f000 fabc 	bl	800d358 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800cde0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800cde4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cde8:	d112      	bne.n	800ce10 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cdea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d016      	beq.n	800ce20 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cdf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdf4:	3324      	adds	r3, #36	@ 0x24
 800cdf6:	4618      	mov	r0, r3
 800cdf8:	f001 f940 	bl	800e07c <xTaskRemoveFromEventList>
 800cdfc:	4603      	mov	r3, r0
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d00e      	beq.n	800ce20 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d00b      	beq.n	800ce20 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	2201      	movs	r2, #1
 800ce0c:	601a      	str	r2, [r3, #0]
 800ce0e:	e007      	b.n	800ce20 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ce10:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800ce14:	3301      	adds	r3, #1
 800ce16:	b2db      	uxtb	r3, r3
 800ce18:	b25a      	sxtb	r2, r3
 800ce1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce1c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800ce20:	2301      	movs	r3, #1
 800ce22:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800ce24:	e001      	b.n	800ce2a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ce26:	2300      	movs	r3, #0
 800ce28:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ce2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ce2c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ce2e:	697b      	ldr	r3, [r7, #20]
 800ce30:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ce34:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ce36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800ce38:	4618      	mov	r0, r3
 800ce3a:	3740      	adds	r7, #64	@ 0x40
 800ce3c:	46bd      	mov	sp, r7
 800ce3e:	bd80      	pop	{r7, pc}

0800ce40 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ce40:	b580      	push	{r7, lr}
 800ce42:	b08c      	sub	sp, #48	@ 0x30
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	60f8      	str	r0, [r7, #12]
 800ce48:	60b9      	str	r1, [r7, #8]
 800ce4a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ce4c:	2300      	movs	r3, #0
 800ce4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ce54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d10b      	bne.n	800ce72 <xQueueReceive+0x32>
	__asm volatile
 800ce5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce5e:	f383 8811 	msr	BASEPRI, r3
 800ce62:	f3bf 8f6f 	isb	sy
 800ce66:	f3bf 8f4f 	dsb	sy
 800ce6a:	623b      	str	r3, [r7, #32]
}
 800ce6c:	bf00      	nop
 800ce6e:	bf00      	nop
 800ce70:	e7fd      	b.n	800ce6e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ce72:	68bb      	ldr	r3, [r7, #8]
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d103      	bne.n	800ce80 <xQueueReceive+0x40>
 800ce78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d101      	bne.n	800ce84 <xQueueReceive+0x44>
 800ce80:	2301      	movs	r3, #1
 800ce82:	e000      	b.n	800ce86 <xQueueReceive+0x46>
 800ce84:	2300      	movs	r3, #0
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d10b      	bne.n	800cea2 <xQueueReceive+0x62>
	__asm volatile
 800ce8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce8e:	f383 8811 	msr	BASEPRI, r3
 800ce92:	f3bf 8f6f 	isb	sy
 800ce96:	f3bf 8f4f 	dsb	sy
 800ce9a:	61fb      	str	r3, [r7, #28]
}
 800ce9c:	bf00      	nop
 800ce9e:	bf00      	nop
 800cea0:	e7fd      	b.n	800ce9e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cea2:	f001 fac1 	bl	800e428 <xTaskGetSchedulerState>
 800cea6:	4603      	mov	r3, r0
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d102      	bne.n	800ceb2 <xQueueReceive+0x72>
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d101      	bne.n	800ceb6 <xQueueReceive+0x76>
 800ceb2:	2301      	movs	r3, #1
 800ceb4:	e000      	b.n	800ceb8 <xQueueReceive+0x78>
 800ceb6:	2300      	movs	r3, #0
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d10b      	bne.n	800ced4 <xQueueReceive+0x94>
	__asm volatile
 800cebc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cec0:	f383 8811 	msr	BASEPRI, r3
 800cec4:	f3bf 8f6f 	isb	sy
 800cec8:	f3bf 8f4f 	dsb	sy
 800cecc:	61bb      	str	r3, [r7, #24]
}
 800cece:	bf00      	nop
 800ced0:	bf00      	nop
 800ced2:	e7fd      	b.n	800ced0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ced4:	f002 f918 	bl	800f108 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ced8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ceda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cedc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d01f      	beq.n	800cf24 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cee4:	68b9      	ldr	r1, [r7, #8]
 800cee6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cee8:	f000 faa0 	bl	800d42c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ceec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ceee:	1e5a      	subs	r2, r3, #1
 800cef0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cef2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cef4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cef6:	691b      	ldr	r3, [r3, #16]
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d00f      	beq.n	800cf1c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cefc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cefe:	3310      	adds	r3, #16
 800cf00:	4618      	mov	r0, r3
 800cf02:	f001 f8bb 	bl	800e07c <xTaskRemoveFromEventList>
 800cf06:	4603      	mov	r3, r0
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d007      	beq.n	800cf1c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800cf0c:	4b3c      	ldr	r3, [pc, #240]	@ (800d000 <xQueueReceive+0x1c0>)
 800cf0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cf12:	601a      	str	r2, [r3, #0]
 800cf14:	f3bf 8f4f 	dsb	sy
 800cf18:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800cf1c:	f002 f926 	bl	800f16c <vPortExitCritical>
				return pdPASS;
 800cf20:	2301      	movs	r3, #1
 800cf22:	e069      	b.n	800cff8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d103      	bne.n	800cf32 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cf2a:	f002 f91f 	bl	800f16c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800cf2e:	2300      	movs	r3, #0
 800cf30:	e062      	b.n	800cff8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cf32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d106      	bne.n	800cf46 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cf38:	f107 0310 	add.w	r3, r7, #16
 800cf3c:	4618      	mov	r0, r3
 800cf3e:	f001 f901 	bl	800e144 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cf42:	2301      	movs	r3, #1
 800cf44:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cf46:	f002 f911 	bl	800f16c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cf4a:	f000 fe57 	bl	800dbfc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cf4e:	f002 f8db 	bl	800f108 <vPortEnterCritical>
 800cf52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf54:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cf58:	b25b      	sxtb	r3, r3
 800cf5a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cf5e:	d103      	bne.n	800cf68 <xQueueReceive+0x128>
 800cf60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf62:	2200      	movs	r2, #0
 800cf64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cf68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf6a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cf6e:	b25b      	sxtb	r3, r3
 800cf70:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cf74:	d103      	bne.n	800cf7e <xQueueReceive+0x13e>
 800cf76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf78:	2200      	movs	r2, #0
 800cf7a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800cf7e:	f002 f8f5 	bl	800f16c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cf82:	1d3a      	adds	r2, r7, #4
 800cf84:	f107 0310 	add.w	r3, r7, #16
 800cf88:	4611      	mov	r1, r2
 800cf8a:	4618      	mov	r0, r3
 800cf8c:	f001 f8f0 	bl	800e170 <xTaskCheckForTimeOut>
 800cf90:	4603      	mov	r3, r0
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d123      	bne.n	800cfde <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cf96:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cf98:	f000 fac0 	bl	800d51c <prvIsQueueEmpty>
 800cf9c:	4603      	mov	r3, r0
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d017      	beq.n	800cfd2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cfa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfa4:	3324      	adds	r3, #36	@ 0x24
 800cfa6:	687a      	ldr	r2, [r7, #4]
 800cfa8:	4611      	mov	r1, r2
 800cfaa:	4618      	mov	r0, r3
 800cfac:	f001 f814 	bl	800dfd8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cfb0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cfb2:	f000 fa61 	bl	800d478 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800cfb6:	f000 fe2f 	bl	800dc18 <xTaskResumeAll>
 800cfba:	4603      	mov	r3, r0
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d189      	bne.n	800ced4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800cfc0:	4b0f      	ldr	r3, [pc, #60]	@ (800d000 <xQueueReceive+0x1c0>)
 800cfc2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cfc6:	601a      	str	r2, [r3, #0]
 800cfc8:	f3bf 8f4f 	dsb	sy
 800cfcc:	f3bf 8f6f 	isb	sy
 800cfd0:	e780      	b.n	800ced4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800cfd2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cfd4:	f000 fa50 	bl	800d478 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cfd8:	f000 fe1e 	bl	800dc18 <xTaskResumeAll>
 800cfdc:	e77a      	b.n	800ced4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800cfde:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cfe0:	f000 fa4a 	bl	800d478 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cfe4:	f000 fe18 	bl	800dc18 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cfe8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cfea:	f000 fa97 	bl	800d51c <prvIsQueueEmpty>
 800cfee:	4603      	mov	r3, r0
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	f43f af6f 	beq.w	800ced4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800cff6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800cff8:	4618      	mov	r0, r3
 800cffa:	3730      	adds	r7, #48	@ 0x30
 800cffc:	46bd      	mov	sp, r7
 800cffe:	bd80      	pop	{r7, pc}
 800d000:	e000ed04 	.word	0xe000ed04

0800d004 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800d004:	b580      	push	{r7, lr}
 800d006:	b08e      	sub	sp, #56	@ 0x38
 800d008:	af00      	add	r7, sp, #0
 800d00a:	6078      	str	r0, [r7, #4]
 800d00c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d00e:	2300      	movs	r3, #0
 800d010:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800d016:	2300      	movs	r3, #0
 800d018:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d01a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d10b      	bne.n	800d038 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800d020:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d024:	f383 8811 	msr	BASEPRI, r3
 800d028:	f3bf 8f6f 	isb	sy
 800d02c:	f3bf 8f4f 	dsb	sy
 800d030:	623b      	str	r3, [r7, #32]
}
 800d032:	bf00      	nop
 800d034:	bf00      	nop
 800d036:	e7fd      	b.n	800d034 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d038:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d03a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d00b      	beq.n	800d058 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800d040:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d044:	f383 8811 	msr	BASEPRI, r3
 800d048:	f3bf 8f6f 	isb	sy
 800d04c:	f3bf 8f4f 	dsb	sy
 800d050:	61fb      	str	r3, [r7, #28]
}
 800d052:	bf00      	nop
 800d054:	bf00      	nop
 800d056:	e7fd      	b.n	800d054 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d058:	f001 f9e6 	bl	800e428 <xTaskGetSchedulerState>
 800d05c:	4603      	mov	r3, r0
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d102      	bne.n	800d068 <xQueueSemaphoreTake+0x64>
 800d062:	683b      	ldr	r3, [r7, #0]
 800d064:	2b00      	cmp	r3, #0
 800d066:	d101      	bne.n	800d06c <xQueueSemaphoreTake+0x68>
 800d068:	2301      	movs	r3, #1
 800d06a:	e000      	b.n	800d06e <xQueueSemaphoreTake+0x6a>
 800d06c:	2300      	movs	r3, #0
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d10b      	bne.n	800d08a <xQueueSemaphoreTake+0x86>
	__asm volatile
 800d072:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d076:	f383 8811 	msr	BASEPRI, r3
 800d07a:	f3bf 8f6f 	isb	sy
 800d07e:	f3bf 8f4f 	dsb	sy
 800d082:	61bb      	str	r3, [r7, #24]
}
 800d084:	bf00      	nop
 800d086:	bf00      	nop
 800d088:	e7fd      	b.n	800d086 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d08a:	f002 f83d 	bl	800f108 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d08e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d090:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d092:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d094:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d096:	2b00      	cmp	r3, #0
 800d098:	d024      	beq.n	800d0e4 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d09a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d09c:	1e5a      	subs	r2, r3, #1
 800d09e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0a0:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d0a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d104      	bne.n	800d0b4 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d0aa:	f001 fb37 	bl	800e71c <pvTaskIncrementMutexHeldCount>
 800d0ae:	4602      	mov	r2, r0
 800d0b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0b2:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d0b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0b6:	691b      	ldr	r3, [r3, #16]
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d00f      	beq.n	800d0dc <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d0bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0be:	3310      	adds	r3, #16
 800d0c0:	4618      	mov	r0, r3
 800d0c2:	f000 ffdb 	bl	800e07c <xTaskRemoveFromEventList>
 800d0c6:	4603      	mov	r3, r0
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d007      	beq.n	800d0dc <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d0cc:	4b54      	ldr	r3, [pc, #336]	@ (800d220 <xQueueSemaphoreTake+0x21c>)
 800d0ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d0d2:	601a      	str	r2, [r3, #0]
 800d0d4:	f3bf 8f4f 	dsb	sy
 800d0d8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d0dc:	f002 f846 	bl	800f16c <vPortExitCritical>
				return pdPASS;
 800d0e0:	2301      	movs	r3, #1
 800d0e2:	e098      	b.n	800d216 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d0e4:	683b      	ldr	r3, [r7, #0]
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d112      	bne.n	800d110 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d0ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d00b      	beq.n	800d108 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800d0f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0f4:	f383 8811 	msr	BASEPRI, r3
 800d0f8:	f3bf 8f6f 	isb	sy
 800d0fc:	f3bf 8f4f 	dsb	sy
 800d100:	617b      	str	r3, [r7, #20]
}
 800d102:	bf00      	nop
 800d104:	bf00      	nop
 800d106:	e7fd      	b.n	800d104 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800d108:	f002 f830 	bl	800f16c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d10c:	2300      	movs	r3, #0
 800d10e:	e082      	b.n	800d216 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d110:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d112:	2b00      	cmp	r3, #0
 800d114:	d106      	bne.n	800d124 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d116:	f107 030c 	add.w	r3, r7, #12
 800d11a:	4618      	mov	r0, r3
 800d11c:	f001 f812 	bl	800e144 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d120:	2301      	movs	r3, #1
 800d122:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d124:	f002 f822 	bl	800f16c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d128:	f000 fd68 	bl	800dbfc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d12c:	f001 ffec 	bl	800f108 <vPortEnterCritical>
 800d130:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d132:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d136:	b25b      	sxtb	r3, r3
 800d138:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d13c:	d103      	bne.n	800d146 <xQueueSemaphoreTake+0x142>
 800d13e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d140:	2200      	movs	r2, #0
 800d142:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d146:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d148:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d14c:	b25b      	sxtb	r3, r3
 800d14e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d152:	d103      	bne.n	800d15c <xQueueSemaphoreTake+0x158>
 800d154:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d156:	2200      	movs	r2, #0
 800d158:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d15c:	f002 f806 	bl	800f16c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d160:	463a      	mov	r2, r7
 800d162:	f107 030c 	add.w	r3, r7, #12
 800d166:	4611      	mov	r1, r2
 800d168:	4618      	mov	r0, r3
 800d16a:	f001 f801 	bl	800e170 <xTaskCheckForTimeOut>
 800d16e:	4603      	mov	r3, r0
 800d170:	2b00      	cmp	r3, #0
 800d172:	d132      	bne.n	800d1da <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d174:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d176:	f000 f9d1 	bl	800d51c <prvIsQueueEmpty>
 800d17a:	4603      	mov	r3, r0
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d026      	beq.n	800d1ce <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d180:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	2b00      	cmp	r3, #0
 800d186:	d109      	bne.n	800d19c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800d188:	f001 ffbe 	bl	800f108 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d18c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d18e:	689b      	ldr	r3, [r3, #8]
 800d190:	4618      	mov	r0, r3
 800d192:	f001 f967 	bl	800e464 <xTaskPriorityInherit>
 800d196:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800d198:	f001 ffe8 	bl	800f16c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d19c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d19e:	3324      	adds	r3, #36	@ 0x24
 800d1a0:	683a      	ldr	r2, [r7, #0]
 800d1a2:	4611      	mov	r1, r2
 800d1a4:	4618      	mov	r0, r3
 800d1a6:	f000 ff17 	bl	800dfd8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d1aa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d1ac:	f000 f964 	bl	800d478 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d1b0:	f000 fd32 	bl	800dc18 <xTaskResumeAll>
 800d1b4:	4603      	mov	r3, r0
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	f47f af67 	bne.w	800d08a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800d1bc:	4b18      	ldr	r3, [pc, #96]	@ (800d220 <xQueueSemaphoreTake+0x21c>)
 800d1be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d1c2:	601a      	str	r2, [r3, #0]
 800d1c4:	f3bf 8f4f 	dsb	sy
 800d1c8:	f3bf 8f6f 	isb	sy
 800d1cc:	e75d      	b.n	800d08a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800d1ce:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d1d0:	f000 f952 	bl	800d478 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d1d4:	f000 fd20 	bl	800dc18 <xTaskResumeAll>
 800d1d8:	e757      	b.n	800d08a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800d1da:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d1dc:	f000 f94c 	bl	800d478 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d1e0:	f000 fd1a 	bl	800dc18 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d1e4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d1e6:	f000 f999 	bl	800d51c <prvIsQueueEmpty>
 800d1ea:	4603      	mov	r3, r0
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	f43f af4c 	beq.w	800d08a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800d1f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d00d      	beq.n	800d214 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800d1f8:	f001 ff86 	bl	800f108 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d1fc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d1fe:	f000 f893 	bl	800d328 <prvGetDisinheritPriorityAfterTimeout>
 800d202:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d204:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d206:	689b      	ldr	r3, [r3, #8]
 800d208:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d20a:	4618      	mov	r0, r3
 800d20c:	f001 fa02 	bl	800e614 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800d210:	f001 ffac 	bl	800f16c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d214:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d216:	4618      	mov	r0, r3
 800d218:	3738      	adds	r7, #56	@ 0x38
 800d21a:	46bd      	mov	sp, r7
 800d21c:	bd80      	pop	{r7, pc}
 800d21e:	bf00      	nop
 800d220:	e000ed04 	.word	0xe000ed04

0800d224 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d224:	b580      	push	{r7, lr}
 800d226:	b08e      	sub	sp, #56	@ 0x38
 800d228:	af00      	add	r7, sp, #0
 800d22a:	60f8      	str	r0, [r7, #12]
 800d22c:	60b9      	str	r1, [r7, #8]
 800d22e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800d234:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d236:	2b00      	cmp	r3, #0
 800d238:	d10b      	bne.n	800d252 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800d23a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d23e:	f383 8811 	msr	BASEPRI, r3
 800d242:	f3bf 8f6f 	isb	sy
 800d246:	f3bf 8f4f 	dsb	sy
 800d24a:	623b      	str	r3, [r7, #32]
}
 800d24c:	bf00      	nop
 800d24e:	bf00      	nop
 800d250:	e7fd      	b.n	800d24e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d252:	68bb      	ldr	r3, [r7, #8]
 800d254:	2b00      	cmp	r3, #0
 800d256:	d103      	bne.n	800d260 <xQueueReceiveFromISR+0x3c>
 800d258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d25a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d101      	bne.n	800d264 <xQueueReceiveFromISR+0x40>
 800d260:	2301      	movs	r3, #1
 800d262:	e000      	b.n	800d266 <xQueueReceiveFromISR+0x42>
 800d264:	2300      	movs	r3, #0
 800d266:	2b00      	cmp	r3, #0
 800d268:	d10b      	bne.n	800d282 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800d26a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d26e:	f383 8811 	msr	BASEPRI, r3
 800d272:	f3bf 8f6f 	isb	sy
 800d276:	f3bf 8f4f 	dsb	sy
 800d27a:	61fb      	str	r3, [r7, #28]
}
 800d27c:	bf00      	nop
 800d27e:	bf00      	nop
 800d280:	e7fd      	b.n	800d27e <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d282:	f002 f821 	bl	800f2c8 <vPortValidateInterruptPriority>
	__asm volatile
 800d286:	f3ef 8211 	mrs	r2, BASEPRI
 800d28a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d28e:	f383 8811 	msr	BASEPRI, r3
 800d292:	f3bf 8f6f 	isb	sy
 800d296:	f3bf 8f4f 	dsb	sy
 800d29a:	61ba      	str	r2, [r7, #24]
 800d29c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d29e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d2a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d2a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d2a6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d2a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d02f      	beq.n	800d30e <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800d2ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2b0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d2b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d2b8:	68b9      	ldr	r1, [r7, #8]
 800d2ba:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d2bc:	f000 f8b6 	bl	800d42c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d2c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2c2:	1e5a      	subs	r2, r3, #1
 800d2c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2c6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800d2c8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800d2cc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d2d0:	d112      	bne.n	800d2f8 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d2d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2d4:	691b      	ldr	r3, [r3, #16]
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d016      	beq.n	800d308 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d2da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2dc:	3310      	adds	r3, #16
 800d2de:	4618      	mov	r0, r3
 800d2e0:	f000 fecc 	bl	800e07c <xTaskRemoveFromEventList>
 800d2e4:	4603      	mov	r3, r0
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d00e      	beq.n	800d308 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d00b      	beq.n	800d308 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	2201      	movs	r2, #1
 800d2f4:	601a      	str	r2, [r3, #0]
 800d2f6:	e007      	b.n	800d308 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d2f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d2fc:	3301      	adds	r3, #1
 800d2fe:	b2db      	uxtb	r3, r3
 800d300:	b25a      	sxtb	r2, r3
 800d302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d304:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800d308:	2301      	movs	r3, #1
 800d30a:	637b      	str	r3, [r7, #52]	@ 0x34
 800d30c:	e001      	b.n	800d312 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800d30e:	2300      	movs	r3, #0
 800d310:	637b      	str	r3, [r7, #52]	@ 0x34
 800d312:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d314:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d316:	693b      	ldr	r3, [r7, #16]
 800d318:	f383 8811 	msr	BASEPRI, r3
}
 800d31c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d31e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800d320:	4618      	mov	r0, r3
 800d322:	3738      	adds	r7, #56	@ 0x38
 800d324:	46bd      	mov	sp, r7
 800d326:	bd80      	pop	{r7, pc}

0800d328 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800d328:	b480      	push	{r7}
 800d32a:	b085      	sub	sp, #20
 800d32c:	af00      	add	r7, sp, #0
 800d32e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d334:	2b00      	cmp	r3, #0
 800d336:	d006      	beq.n	800d346 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800d342:	60fb      	str	r3, [r7, #12]
 800d344:	e001      	b.n	800d34a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800d346:	2300      	movs	r3, #0
 800d348:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800d34a:	68fb      	ldr	r3, [r7, #12]
	}
 800d34c:	4618      	mov	r0, r3
 800d34e:	3714      	adds	r7, #20
 800d350:	46bd      	mov	sp, r7
 800d352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d356:	4770      	bx	lr

0800d358 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d358:	b580      	push	{r7, lr}
 800d35a:	b086      	sub	sp, #24
 800d35c:	af00      	add	r7, sp, #0
 800d35e:	60f8      	str	r0, [r7, #12]
 800d360:	60b9      	str	r1, [r7, #8]
 800d362:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d364:	2300      	movs	r3, #0
 800d366:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d36c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d372:	2b00      	cmp	r3, #0
 800d374:	d10d      	bne.n	800d392 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d14d      	bne.n	800d41a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	689b      	ldr	r3, [r3, #8]
 800d382:	4618      	mov	r0, r3
 800d384:	f001 f8d6 	bl	800e534 <xTaskPriorityDisinherit>
 800d388:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	2200      	movs	r2, #0
 800d38e:	609a      	str	r2, [r3, #8]
 800d390:	e043      	b.n	800d41a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	2b00      	cmp	r3, #0
 800d396:	d119      	bne.n	800d3cc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	6858      	ldr	r0, [r3, #4]
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d3a0:	461a      	mov	r2, r3
 800d3a2:	68b9      	ldr	r1, [r7, #8]
 800d3a4:	f003 fcad 	bl	8010d02 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	685a      	ldr	r2, [r3, #4]
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d3b0:	441a      	add	r2, r3
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	685a      	ldr	r2, [r3, #4]
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	689b      	ldr	r3, [r3, #8]
 800d3be:	429a      	cmp	r2, r3
 800d3c0:	d32b      	bcc.n	800d41a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	681a      	ldr	r2, [r3, #0]
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	605a      	str	r2, [r3, #4]
 800d3ca:	e026      	b.n	800d41a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	68d8      	ldr	r0, [r3, #12]
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d3d4:	461a      	mov	r2, r3
 800d3d6:	68b9      	ldr	r1, [r7, #8]
 800d3d8:	f003 fc93 	bl	8010d02 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	68da      	ldr	r2, [r3, #12]
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d3e4:	425b      	negs	r3, r3
 800d3e6:	441a      	add	r2, r3
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	68da      	ldr	r2, [r3, #12]
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	429a      	cmp	r2, r3
 800d3f6:	d207      	bcs.n	800d408 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	689a      	ldr	r2, [r3, #8]
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d400:	425b      	negs	r3, r3
 800d402:	441a      	add	r2, r3
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	2b02      	cmp	r3, #2
 800d40c:	d105      	bne.n	800d41a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d40e:	693b      	ldr	r3, [r7, #16]
 800d410:	2b00      	cmp	r3, #0
 800d412:	d002      	beq.n	800d41a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d414:	693b      	ldr	r3, [r7, #16]
 800d416:	3b01      	subs	r3, #1
 800d418:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d41a:	693b      	ldr	r3, [r7, #16]
 800d41c:	1c5a      	adds	r2, r3, #1
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800d422:	697b      	ldr	r3, [r7, #20]
}
 800d424:	4618      	mov	r0, r3
 800d426:	3718      	adds	r7, #24
 800d428:	46bd      	mov	sp, r7
 800d42a:	bd80      	pop	{r7, pc}

0800d42c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d42c:	b580      	push	{r7, lr}
 800d42e:	b082      	sub	sp, #8
 800d430:	af00      	add	r7, sp, #0
 800d432:	6078      	str	r0, [r7, #4]
 800d434:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d018      	beq.n	800d470 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	68da      	ldr	r2, [r3, #12]
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d446:	441a      	add	r2, r3
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	68da      	ldr	r2, [r3, #12]
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	689b      	ldr	r3, [r3, #8]
 800d454:	429a      	cmp	r2, r3
 800d456:	d303      	bcc.n	800d460 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	681a      	ldr	r2, [r3, #0]
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	68d9      	ldr	r1, [r3, #12]
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d468:	461a      	mov	r2, r3
 800d46a:	6838      	ldr	r0, [r7, #0]
 800d46c:	f003 fc49 	bl	8010d02 <memcpy>
	}
}
 800d470:	bf00      	nop
 800d472:	3708      	adds	r7, #8
 800d474:	46bd      	mov	sp, r7
 800d476:	bd80      	pop	{r7, pc}

0800d478 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d478:	b580      	push	{r7, lr}
 800d47a:	b084      	sub	sp, #16
 800d47c:	af00      	add	r7, sp, #0
 800d47e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d480:	f001 fe42 	bl	800f108 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d48a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d48c:	e011      	b.n	800d4b2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d492:	2b00      	cmp	r3, #0
 800d494:	d012      	beq.n	800d4bc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	3324      	adds	r3, #36	@ 0x24
 800d49a:	4618      	mov	r0, r3
 800d49c:	f000 fdee 	bl	800e07c <xTaskRemoveFromEventList>
 800d4a0:	4603      	mov	r3, r0
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d001      	beq.n	800d4aa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d4a6:	f000 fec7 	bl	800e238 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d4aa:	7bfb      	ldrb	r3, [r7, #15]
 800d4ac:	3b01      	subs	r3, #1
 800d4ae:	b2db      	uxtb	r3, r3
 800d4b0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d4b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	dce9      	bgt.n	800d48e <prvUnlockQueue+0x16>
 800d4ba:	e000      	b.n	800d4be <prvUnlockQueue+0x46>
					break;
 800d4bc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	22ff      	movs	r2, #255	@ 0xff
 800d4c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800d4c6:	f001 fe51 	bl	800f16c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d4ca:	f001 fe1d 	bl	800f108 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d4d4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d4d6:	e011      	b.n	800d4fc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	691b      	ldr	r3, [r3, #16]
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d012      	beq.n	800d506 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	3310      	adds	r3, #16
 800d4e4:	4618      	mov	r0, r3
 800d4e6:	f000 fdc9 	bl	800e07c <xTaskRemoveFromEventList>
 800d4ea:	4603      	mov	r3, r0
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d001      	beq.n	800d4f4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d4f0:	f000 fea2 	bl	800e238 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d4f4:	7bbb      	ldrb	r3, [r7, #14]
 800d4f6:	3b01      	subs	r3, #1
 800d4f8:	b2db      	uxtb	r3, r3
 800d4fa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d4fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d500:	2b00      	cmp	r3, #0
 800d502:	dce9      	bgt.n	800d4d8 <prvUnlockQueue+0x60>
 800d504:	e000      	b.n	800d508 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d506:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	22ff      	movs	r2, #255	@ 0xff
 800d50c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800d510:	f001 fe2c 	bl	800f16c <vPortExitCritical>
}
 800d514:	bf00      	nop
 800d516:	3710      	adds	r7, #16
 800d518:	46bd      	mov	sp, r7
 800d51a:	bd80      	pop	{r7, pc}

0800d51c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d51c:	b580      	push	{r7, lr}
 800d51e:	b084      	sub	sp, #16
 800d520:	af00      	add	r7, sp, #0
 800d522:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d524:	f001 fdf0 	bl	800f108 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d102      	bne.n	800d536 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d530:	2301      	movs	r3, #1
 800d532:	60fb      	str	r3, [r7, #12]
 800d534:	e001      	b.n	800d53a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d536:	2300      	movs	r3, #0
 800d538:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d53a:	f001 fe17 	bl	800f16c <vPortExitCritical>

	return xReturn;
 800d53e:	68fb      	ldr	r3, [r7, #12]
}
 800d540:	4618      	mov	r0, r3
 800d542:	3710      	adds	r7, #16
 800d544:	46bd      	mov	sp, r7
 800d546:	bd80      	pop	{r7, pc}

0800d548 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d548:	b580      	push	{r7, lr}
 800d54a:	b084      	sub	sp, #16
 800d54c:	af00      	add	r7, sp, #0
 800d54e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d550:	f001 fdda 	bl	800f108 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d55c:	429a      	cmp	r2, r3
 800d55e:	d102      	bne.n	800d566 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d560:	2301      	movs	r3, #1
 800d562:	60fb      	str	r3, [r7, #12]
 800d564:	e001      	b.n	800d56a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d566:	2300      	movs	r3, #0
 800d568:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d56a:	f001 fdff 	bl	800f16c <vPortExitCritical>

	return xReturn;
 800d56e:	68fb      	ldr	r3, [r7, #12]
}
 800d570:	4618      	mov	r0, r3
 800d572:	3710      	adds	r7, #16
 800d574:	46bd      	mov	sp, r7
 800d576:	bd80      	pop	{r7, pc}

0800d578 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d578:	b480      	push	{r7}
 800d57a:	b085      	sub	sp, #20
 800d57c:	af00      	add	r7, sp, #0
 800d57e:	6078      	str	r0, [r7, #4]
 800d580:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d582:	2300      	movs	r3, #0
 800d584:	60fb      	str	r3, [r7, #12]
 800d586:	e014      	b.n	800d5b2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d588:	4a0f      	ldr	r2, [pc, #60]	@ (800d5c8 <vQueueAddToRegistry+0x50>)
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d590:	2b00      	cmp	r3, #0
 800d592:	d10b      	bne.n	800d5ac <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d594:	490c      	ldr	r1, [pc, #48]	@ (800d5c8 <vQueueAddToRegistry+0x50>)
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	683a      	ldr	r2, [r7, #0]
 800d59a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d59e:	4a0a      	ldr	r2, [pc, #40]	@ (800d5c8 <vQueueAddToRegistry+0x50>)
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	00db      	lsls	r3, r3, #3
 800d5a4:	4413      	add	r3, r2
 800d5a6:	687a      	ldr	r2, [r7, #4]
 800d5a8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d5aa:	e006      	b.n	800d5ba <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	3301      	adds	r3, #1
 800d5b0:	60fb      	str	r3, [r7, #12]
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	2b07      	cmp	r3, #7
 800d5b6:	d9e7      	bls.n	800d588 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d5b8:	bf00      	nop
 800d5ba:	bf00      	nop
 800d5bc:	3714      	adds	r7, #20
 800d5be:	46bd      	mov	sp, r7
 800d5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5c4:	4770      	bx	lr
 800d5c6:	bf00      	nop
 800d5c8:	20000de4 	.word	0x20000de4

0800d5cc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d5cc:	b580      	push	{r7, lr}
 800d5ce:	b086      	sub	sp, #24
 800d5d0:	af00      	add	r7, sp, #0
 800d5d2:	60f8      	str	r0, [r7, #12]
 800d5d4:	60b9      	str	r1, [r7, #8]
 800d5d6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d5dc:	f001 fd94 	bl	800f108 <vPortEnterCritical>
 800d5e0:	697b      	ldr	r3, [r7, #20]
 800d5e2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d5e6:	b25b      	sxtb	r3, r3
 800d5e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d5ec:	d103      	bne.n	800d5f6 <vQueueWaitForMessageRestricted+0x2a>
 800d5ee:	697b      	ldr	r3, [r7, #20]
 800d5f0:	2200      	movs	r2, #0
 800d5f2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d5f6:	697b      	ldr	r3, [r7, #20]
 800d5f8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d5fc:	b25b      	sxtb	r3, r3
 800d5fe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d602:	d103      	bne.n	800d60c <vQueueWaitForMessageRestricted+0x40>
 800d604:	697b      	ldr	r3, [r7, #20]
 800d606:	2200      	movs	r2, #0
 800d608:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d60c:	f001 fdae 	bl	800f16c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d610:	697b      	ldr	r3, [r7, #20]
 800d612:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d614:	2b00      	cmp	r3, #0
 800d616:	d106      	bne.n	800d626 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d618:	697b      	ldr	r3, [r7, #20]
 800d61a:	3324      	adds	r3, #36	@ 0x24
 800d61c:	687a      	ldr	r2, [r7, #4]
 800d61e:	68b9      	ldr	r1, [r7, #8]
 800d620:	4618      	mov	r0, r3
 800d622:	f000 fcff 	bl	800e024 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d626:	6978      	ldr	r0, [r7, #20]
 800d628:	f7ff ff26 	bl	800d478 <prvUnlockQueue>
	}
 800d62c:	bf00      	nop
 800d62e:	3718      	adds	r7, #24
 800d630:	46bd      	mov	sp, r7
 800d632:	bd80      	pop	{r7, pc}

0800d634 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d634:	b580      	push	{r7, lr}
 800d636:	b08e      	sub	sp, #56	@ 0x38
 800d638:	af04      	add	r7, sp, #16
 800d63a:	60f8      	str	r0, [r7, #12]
 800d63c:	60b9      	str	r1, [r7, #8]
 800d63e:	607a      	str	r2, [r7, #4]
 800d640:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d642:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d644:	2b00      	cmp	r3, #0
 800d646:	d10b      	bne.n	800d660 <xTaskCreateStatic+0x2c>
	__asm volatile
 800d648:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d64c:	f383 8811 	msr	BASEPRI, r3
 800d650:	f3bf 8f6f 	isb	sy
 800d654:	f3bf 8f4f 	dsb	sy
 800d658:	623b      	str	r3, [r7, #32]
}
 800d65a:	bf00      	nop
 800d65c:	bf00      	nop
 800d65e:	e7fd      	b.n	800d65c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d660:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d662:	2b00      	cmp	r3, #0
 800d664:	d10b      	bne.n	800d67e <xTaskCreateStatic+0x4a>
	__asm volatile
 800d666:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d66a:	f383 8811 	msr	BASEPRI, r3
 800d66e:	f3bf 8f6f 	isb	sy
 800d672:	f3bf 8f4f 	dsb	sy
 800d676:	61fb      	str	r3, [r7, #28]
}
 800d678:	bf00      	nop
 800d67a:	bf00      	nop
 800d67c:	e7fd      	b.n	800d67a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d67e:	23a8      	movs	r3, #168	@ 0xa8
 800d680:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d682:	693b      	ldr	r3, [r7, #16]
 800d684:	2ba8      	cmp	r3, #168	@ 0xa8
 800d686:	d00b      	beq.n	800d6a0 <xTaskCreateStatic+0x6c>
	__asm volatile
 800d688:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d68c:	f383 8811 	msr	BASEPRI, r3
 800d690:	f3bf 8f6f 	isb	sy
 800d694:	f3bf 8f4f 	dsb	sy
 800d698:	61bb      	str	r3, [r7, #24]
}
 800d69a:	bf00      	nop
 800d69c:	bf00      	nop
 800d69e:	e7fd      	b.n	800d69c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d6a0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d6a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d01e      	beq.n	800d6e6 <xTaskCreateStatic+0xb2>
 800d6a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d01b      	beq.n	800d6e6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d6ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6b0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d6b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6b4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d6b6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d6b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6ba:	2202      	movs	r2, #2
 800d6bc:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d6c0:	2300      	movs	r3, #0
 800d6c2:	9303      	str	r3, [sp, #12]
 800d6c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6c6:	9302      	str	r3, [sp, #8]
 800d6c8:	f107 0314 	add.w	r3, r7, #20
 800d6cc:	9301      	str	r3, [sp, #4]
 800d6ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6d0:	9300      	str	r3, [sp, #0]
 800d6d2:	683b      	ldr	r3, [r7, #0]
 800d6d4:	687a      	ldr	r2, [r7, #4]
 800d6d6:	68b9      	ldr	r1, [r7, #8]
 800d6d8:	68f8      	ldr	r0, [r7, #12]
 800d6da:	f000 f851 	bl	800d780 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d6de:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d6e0:	f000 f8f6 	bl	800d8d0 <prvAddNewTaskToReadyList>
 800d6e4:	e001      	b.n	800d6ea <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800d6e6:	2300      	movs	r3, #0
 800d6e8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d6ea:	697b      	ldr	r3, [r7, #20]
	}
 800d6ec:	4618      	mov	r0, r3
 800d6ee:	3728      	adds	r7, #40	@ 0x28
 800d6f0:	46bd      	mov	sp, r7
 800d6f2:	bd80      	pop	{r7, pc}

0800d6f4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d6f4:	b580      	push	{r7, lr}
 800d6f6:	b08c      	sub	sp, #48	@ 0x30
 800d6f8:	af04      	add	r7, sp, #16
 800d6fa:	60f8      	str	r0, [r7, #12]
 800d6fc:	60b9      	str	r1, [r7, #8]
 800d6fe:	603b      	str	r3, [r7, #0]
 800d700:	4613      	mov	r3, r2
 800d702:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d704:	88fb      	ldrh	r3, [r7, #6]
 800d706:	009b      	lsls	r3, r3, #2
 800d708:	4618      	mov	r0, r3
 800d70a:	f001 fe1f 	bl	800f34c <pvPortMalloc>
 800d70e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d710:	697b      	ldr	r3, [r7, #20]
 800d712:	2b00      	cmp	r3, #0
 800d714:	d00e      	beq.n	800d734 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d716:	20a8      	movs	r0, #168	@ 0xa8
 800d718:	f001 fe18 	bl	800f34c <pvPortMalloc>
 800d71c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d71e:	69fb      	ldr	r3, [r7, #28]
 800d720:	2b00      	cmp	r3, #0
 800d722:	d003      	beq.n	800d72c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d724:	69fb      	ldr	r3, [r7, #28]
 800d726:	697a      	ldr	r2, [r7, #20]
 800d728:	631a      	str	r2, [r3, #48]	@ 0x30
 800d72a:	e005      	b.n	800d738 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d72c:	6978      	ldr	r0, [r7, #20]
 800d72e:	f001 fedb 	bl	800f4e8 <vPortFree>
 800d732:	e001      	b.n	800d738 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d734:	2300      	movs	r3, #0
 800d736:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d738:	69fb      	ldr	r3, [r7, #28]
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d017      	beq.n	800d76e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d73e:	69fb      	ldr	r3, [r7, #28]
 800d740:	2200      	movs	r2, #0
 800d742:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d746:	88fa      	ldrh	r2, [r7, #6]
 800d748:	2300      	movs	r3, #0
 800d74a:	9303      	str	r3, [sp, #12]
 800d74c:	69fb      	ldr	r3, [r7, #28]
 800d74e:	9302      	str	r3, [sp, #8]
 800d750:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d752:	9301      	str	r3, [sp, #4]
 800d754:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d756:	9300      	str	r3, [sp, #0]
 800d758:	683b      	ldr	r3, [r7, #0]
 800d75a:	68b9      	ldr	r1, [r7, #8]
 800d75c:	68f8      	ldr	r0, [r7, #12]
 800d75e:	f000 f80f 	bl	800d780 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d762:	69f8      	ldr	r0, [r7, #28]
 800d764:	f000 f8b4 	bl	800d8d0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d768:	2301      	movs	r3, #1
 800d76a:	61bb      	str	r3, [r7, #24]
 800d76c:	e002      	b.n	800d774 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d76e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d772:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d774:	69bb      	ldr	r3, [r7, #24]
	}
 800d776:	4618      	mov	r0, r3
 800d778:	3720      	adds	r7, #32
 800d77a:	46bd      	mov	sp, r7
 800d77c:	bd80      	pop	{r7, pc}
	...

0800d780 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d780:	b580      	push	{r7, lr}
 800d782:	b088      	sub	sp, #32
 800d784:	af00      	add	r7, sp, #0
 800d786:	60f8      	str	r0, [r7, #12]
 800d788:	60b9      	str	r1, [r7, #8]
 800d78a:	607a      	str	r2, [r7, #4]
 800d78c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d78e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d790:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	009b      	lsls	r3, r3, #2
 800d796:	461a      	mov	r2, r3
 800d798:	21a5      	movs	r1, #165	@ 0xa5
 800d79a:	f003 fa23 	bl	8010be4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d79e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d7a8:	3b01      	subs	r3, #1
 800d7aa:	009b      	lsls	r3, r3, #2
 800d7ac:	4413      	add	r3, r2
 800d7ae:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d7b0:	69bb      	ldr	r3, [r7, #24]
 800d7b2:	f023 0307 	bic.w	r3, r3, #7
 800d7b6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d7b8:	69bb      	ldr	r3, [r7, #24]
 800d7ba:	f003 0307 	and.w	r3, r3, #7
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d00b      	beq.n	800d7da <prvInitialiseNewTask+0x5a>
	__asm volatile
 800d7c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7c6:	f383 8811 	msr	BASEPRI, r3
 800d7ca:	f3bf 8f6f 	isb	sy
 800d7ce:	f3bf 8f4f 	dsb	sy
 800d7d2:	617b      	str	r3, [r7, #20]
}
 800d7d4:	bf00      	nop
 800d7d6:	bf00      	nop
 800d7d8:	e7fd      	b.n	800d7d6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d7da:	68bb      	ldr	r3, [r7, #8]
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d01f      	beq.n	800d820 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d7e0:	2300      	movs	r3, #0
 800d7e2:	61fb      	str	r3, [r7, #28]
 800d7e4:	e012      	b.n	800d80c <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d7e6:	68ba      	ldr	r2, [r7, #8]
 800d7e8:	69fb      	ldr	r3, [r7, #28]
 800d7ea:	4413      	add	r3, r2
 800d7ec:	7819      	ldrb	r1, [r3, #0]
 800d7ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d7f0:	69fb      	ldr	r3, [r7, #28]
 800d7f2:	4413      	add	r3, r2
 800d7f4:	3334      	adds	r3, #52	@ 0x34
 800d7f6:	460a      	mov	r2, r1
 800d7f8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d7fa:	68ba      	ldr	r2, [r7, #8]
 800d7fc:	69fb      	ldr	r3, [r7, #28]
 800d7fe:	4413      	add	r3, r2
 800d800:	781b      	ldrb	r3, [r3, #0]
 800d802:	2b00      	cmp	r3, #0
 800d804:	d006      	beq.n	800d814 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d806:	69fb      	ldr	r3, [r7, #28]
 800d808:	3301      	adds	r3, #1
 800d80a:	61fb      	str	r3, [r7, #28]
 800d80c:	69fb      	ldr	r3, [r7, #28]
 800d80e:	2b0f      	cmp	r3, #15
 800d810:	d9e9      	bls.n	800d7e6 <prvInitialiseNewTask+0x66>
 800d812:	e000      	b.n	800d816 <prvInitialiseNewTask+0x96>
			{
				break;
 800d814:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d818:	2200      	movs	r2, #0
 800d81a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800d81e:	e003      	b.n	800d828 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d822:	2200      	movs	r2, #0
 800d824:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d828:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d82a:	2b37      	cmp	r3, #55	@ 0x37
 800d82c:	d901      	bls.n	800d832 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d82e:	2337      	movs	r3, #55	@ 0x37
 800d830:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d834:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d836:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d838:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d83a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d83c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800d83e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d840:	2200      	movs	r2, #0
 800d842:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d846:	3304      	adds	r3, #4
 800d848:	4618      	mov	r0, r3
 800d84a:	f7fe fec7 	bl	800c5dc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d84e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d850:	3318      	adds	r3, #24
 800d852:	4618      	mov	r0, r3
 800d854:	f7fe fec2 	bl	800c5dc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d858:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d85a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d85c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d85e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d860:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800d864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d866:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d868:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d86a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d86c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d86e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d870:	2200      	movs	r2, #0
 800d872:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d878:	2200      	movs	r2, #0
 800d87a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800d87e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d880:	3354      	adds	r3, #84	@ 0x54
 800d882:	224c      	movs	r2, #76	@ 0x4c
 800d884:	2100      	movs	r1, #0
 800d886:	4618      	mov	r0, r3
 800d888:	f003 f9ac 	bl	8010be4 <memset>
 800d88c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d88e:	4a0d      	ldr	r2, [pc, #52]	@ (800d8c4 <prvInitialiseNewTask+0x144>)
 800d890:	659a      	str	r2, [r3, #88]	@ 0x58
 800d892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d894:	4a0c      	ldr	r2, [pc, #48]	@ (800d8c8 <prvInitialiseNewTask+0x148>)
 800d896:	65da      	str	r2, [r3, #92]	@ 0x5c
 800d898:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d89a:	4a0c      	ldr	r2, [pc, #48]	@ (800d8cc <prvInitialiseNewTask+0x14c>)
 800d89c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d89e:	683a      	ldr	r2, [r7, #0]
 800d8a0:	68f9      	ldr	r1, [r7, #12]
 800d8a2:	69b8      	ldr	r0, [r7, #24]
 800d8a4:	f001 fafc 	bl	800eea0 <pxPortInitialiseStack>
 800d8a8:	4602      	mov	r2, r0
 800d8aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8ac:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d8ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d002      	beq.n	800d8ba <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d8b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d8b8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d8ba:	bf00      	nop
 800d8bc:	3720      	adds	r7, #32
 800d8be:	46bd      	mov	sp, r7
 800d8c0:	bd80      	pop	{r7, pc}
 800d8c2:	bf00      	nop
 800d8c4:	20012844 	.word	0x20012844
 800d8c8:	200128ac 	.word	0x200128ac
 800d8cc:	20012914 	.word	0x20012914

0800d8d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d8d0:	b580      	push	{r7, lr}
 800d8d2:	b082      	sub	sp, #8
 800d8d4:	af00      	add	r7, sp, #0
 800d8d6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d8d8:	f001 fc16 	bl	800f108 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d8dc:	4b2d      	ldr	r3, [pc, #180]	@ (800d994 <prvAddNewTaskToReadyList+0xc4>)
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	3301      	adds	r3, #1
 800d8e2:	4a2c      	ldr	r2, [pc, #176]	@ (800d994 <prvAddNewTaskToReadyList+0xc4>)
 800d8e4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d8e6:	4b2c      	ldr	r3, [pc, #176]	@ (800d998 <prvAddNewTaskToReadyList+0xc8>)
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d109      	bne.n	800d902 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d8ee:	4a2a      	ldr	r2, [pc, #168]	@ (800d998 <prvAddNewTaskToReadyList+0xc8>)
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d8f4:	4b27      	ldr	r3, [pc, #156]	@ (800d994 <prvAddNewTaskToReadyList+0xc4>)
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	2b01      	cmp	r3, #1
 800d8fa:	d110      	bne.n	800d91e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d8fc:	f000 fcc0 	bl	800e280 <prvInitialiseTaskLists>
 800d900:	e00d      	b.n	800d91e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d902:	4b26      	ldr	r3, [pc, #152]	@ (800d99c <prvAddNewTaskToReadyList+0xcc>)
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	2b00      	cmp	r3, #0
 800d908:	d109      	bne.n	800d91e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d90a:	4b23      	ldr	r3, [pc, #140]	@ (800d998 <prvAddNewTaskToReadyList+0xc8>)
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d914:	429a      	cmp	r2, r3
 800d916:	d802      	bhi.n	800d91e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d918:	4a1f      	ldr	r2, [pc, #124]	@ (800d998 <prvAddNewTaskToReadyList+0xc8>)
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d91e:	4b20      	ldr	r3, [pc, #128]	@ (800d9a0 <prvAddNewTaskToReadyList+0xd0>)
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	3301      	adds	r3, #1
 800d924:	4a1e      	ldr	r2, [pc, #120]	@ (800d9a0 <prvAddNewTaskToReadyList+0xd0>)
 800d926:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d928:	4b1d      	ldr	r3, [pc, #116]	@ (800d9a0 <prvAddNewTaskToReadyList+0xd0>)
 800d92a:	681a      	ldr	r2, [r3, #0]
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d934:	4b1b      	ldr	r3, [pc, #108]	@ (800d9a4 <prvAddNewTaskToReadyList+0xd4>)
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	429a      	cmp	r2, r3
 800d93a:	d903      	bls.n	800d944 <prvAddNewTaskToReadyList+0x74>
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d940:	4a18      	ldr	r2, [pc, #96]	@ (800d9a4 <prvAddNewTaskToReadyList+0xd4>)
 800d942:	6013      	str	r3, [r2, #0]
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d948:	4613      	mov	r3, r2
 800d94a:	009b      	lsls	r3, r3, #2
 800d94c:	4413      	add	r3, r2
 800d94e:	009b      	lsls	r3, r3, #2
 800d950:	4a15      	ldr	r2, [pc, #84]	@ (800d9a8 <prvAddNewTaskToReadyList+0xd8>)
 800d952:	441a      	add	r2, r3
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	3304      	adds	r3, #4
 800d958:	4619      	mov	r1, r3
 800d95a:	4610      	mov	r0, r2
 800d95c:	f7fe fe4b 	bl	800c5f6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d960:	f001 fc04 	bl	800f16c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d964:	4b0d      	ldr	r3, [pc, #52]	@ (800d99c <prvAddNewTaskToReadyList+0xcc>)
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d00e      	beq.n	800d98a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d96c:	4b0a      	ldr	r3, [pc, #40]	@ (800d998 <prvAddNewTaskToReadyList+0xc8>)
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d976:	429a      	cmp	r2, r3
 800d978:	d207      	bcs.n	800d98a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d97a:	4b0c      	ldr	r3, [pc, #48]	@ (800d9ac <prvAddNewTaskToReadyList+0xdc>)
 800d97c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d980:	601a      	str	r2, [r3, #0]
 800d982:	f3bf 8f4f 	dsb	sy
 800d986:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d98a:	bf00      	nop
 800d98c:	3708      	adds	r7, #8
 800d98e:	46bd      	mov	sp, r7
 800d990:	bd80      	pop	{r7, pc}
 800d992:	bf00      	nop
 800d994:	200012f8 	.word	0x200012f8
 800d998:	20000e24 	.word	0x20000e24
 800d99c:	20001304 	.word	0x20001304
 800d9a0:	20001314 	.word	0x20001314
 800d9a4:	20001300 	.word	0x20001300
 800d9a8:	20000e28 	.word	0x20000e28
 800d9ac:	e000ed04 	.word	0xe000ed04

0800d9b0 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800d9b0:	b580      	push	{r7, lr}
 800d9b2:	b08a      	sub	sp, #40	@ 0x28
 800d9b4:	af00      	add	r7, sp, #0
 800d9b6:	6078      	str	r0, [r7, #4]
 800d9b8:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800d9ba:	2300      	movs	r3, #0
 800d9bc:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d10b      	bne.n	800d9dc <vTaskDelayUntil+0x2c>
	__asm volatile
 800d9c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9c8:	f383 8811 	msr	BASEPRI, r3
 800d9cc:	f3bf 8f6f 	isb	sy
 800d9d0:	f3bf 8f4f 	dsb	sy
 800d9d4:	617b      	str	r3, [r7, #20]
}
 800d9d6:	bf00      	nop
 800d9d8:	bf00      	nop
 800d9da:	e7fd      	b.n	800d9d8 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800d9dc:	683b      	ldr	r3, [r7, #0]
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d10b      	bne.n	800d9fa <vTaskDelayUntil+0x4a>
	__asm volatile
 800d9e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9e6:	f383 8811 	msr	BASEPRI, r3
 800d9ea:	f3bf 8f6f 	isb	sy
 800d9ee:	f3bf 8f4f 	dsb	sy
 800d9f2:	613b      	str	r3, [r7, #16]
}
 800d9f4:	bf00      	nop
 800d9f6:	bf00      	nop
 800d9f8:	e7fd      	b.n	800d9f6 <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 800d9fa:	4b2a      	ldr	r3, [pc, #168]	@ (800daa4 <vTaskDelayUntil+0xf4>)
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d00b      	beq.n	800da1a <vTaskDelayUntil+0x6a>
	__asm volatile
 800da02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da06:	f383 8811 	msr	BASEPRI, r3
 800da0a:	f3bf 8f6f 	isb	sy
 800da0e:	f3bf 8f4f 	dsb	sy
 800da12:	60fb      	str	r3, [r7, #12]
}
 800da14:	bf00      	nop
 800da16:	bf00      	nop
 800da18:	e7fd      	b.n	800da16 <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 800da1a:	f000 f8ef 	bl	800dbfc <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800da1e:	4b22      	ldr	r3, [pc, #136]	@ (800daa8 <vTaskDelayUntil+0xf8>)
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	683a      	ldr	r2, [r7, #0]
 800da2a:	4413      	add	r3, r2
 800da2c:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	6a3a      	ldr	r2, [r7, #32]
 800da34:	429a      	cmp	r2, r3
 800da36:	d20b      	bcs.n	800da50 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	69fa      	ldr	r2, [r7, #28]
 800da3e:	429a      	cmp	r2, r3
 800da40:	d211      	bcs.n	800da66 <vTaskDelayUntil+0xb6>
 800da42:	69fa      	ldr	r2, [r7, #28]
 800da44:	6a3b      	ldr	r3, [r7, #32]
 800da46:	429a      	cmp	r2, r3
 800da48:	d90d      	bls.n	800da66 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800da4a:	2301      	movs	r3, #1
 800da4c:	627b      	str	r3, [r7, #36]	@ 0x24
 800da4e:	e00a      	b.n	800da66 <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	69fa      	ldr	r2, [r7, #28]
 800da56:	429a      	cmp	r2, r3
 800da58:	d303      	bcc.n	800da62 <vTaskDelayUntil+0xb2>
 800da5a:	69fa      	ldr	r2, [r7, #28]
 800da5c:	6a3b      	ldr	r3, [r7, #32]
 800da5e:	429a      	cmp	r2, r3
 800da60:	d901      	bls.n	800da66 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800da62:	2301      	movs	r3, #1
 800da64:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	69fa      	ldr	r2, [r7, #28]
 800da6a:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800da6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d006      	beq.n	800da80 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800da72:	69fa      	ldr	r2, [r7, #28]
 800da74:	6a3b      	ldr	r3, [r7, #32]
 800da76:	1ad3      	subs	r3, r2, r3
 800da78:	2100      	movs	r1, #0
 800da7a:	4618      	mov	r0, r3
 800da7c:	f000 fe62 	bl	800e744 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800da80:	f000 f8ca 	bl	800dc18 <xTaskResumeAll>
 800da84:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800da86:	69bb      	ldr	r3, [r7, #24]
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d107      	bne.n	800da9c <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 800da8c:	4b07      	ldr	r3, [pc, #28]	@ (800daac <vTaskDelayUntil+0xfc>)
 800da8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800da92:	601a      	str	r2, [r3, #0]
 800da94:	f3bf 8f4f 	dsb	sy
 800da98:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800da9c:	bf00      	nop
 800da9e:	3728      	adds	r7, #40	@ 0x28
 800daa0:	46bd      	mov	sp, r7
 800daa2:	bd80      	pop	{r7, pc}
 800daa4:	20001320 	.word	0x20001320
 800daa8:	200012fc 	.word	0x200012fc
 800daac:	e000ed04 	.word	0xe000ed04

0800dab0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800dab0:	b580      	push	{r7, lr}
 800dab2:	b084      	sub	sp, #16
 800dab4:	af00      	add	r7, sp, #0
 800dab6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800dab8:	2300      	movs	r3, #0
 800daba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d018      	beq.n	800daf4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800dac2:	4b14      	ldr	r3, [pc, #80]	@ (800db14 <vTaskDelay+0x64>)
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d00b      	beq.n	800dae2 <vTaskDelay+0x32>
	__asm volatile
 800daca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dace:	f383 8811 	msr	BASEPRI, r3
 800dad2:	f3bf 8f6f 	isb	sy
 800dad6:	f3bf 8f4f 	dsb	sy
 800dada:	60bb      	str	r3, [r7, #8]
}
 800dadc:	bf00      	nop
 800dade:	bf00      	nop
 800dae0:	e7fd      	b.n	800dade <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800dae2:	f000 f88b 	bl	800dbfc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800dae6:	2100      	movs	r1, #0
 800dae8:	6878      	ldr	r0, [r7, #4]
 800daea:	f000 fe2b 	bl	800e744 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800daee:	f000 f893 	bl	800dc18 <xTaskResumeAll>
 800daf2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d107      	bne.n	800db0a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800dafa:	4b07      	ldr	r3, [pc, #28]	@ (800db18 <vTaskDelay+0x68>)
 800dafc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800db00:	601a      	str	r2, [r3, #0]
 800db02:	f3bf 8f4f 	dsb	sy
 800db06:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800db0a:	bf00      	nop
 800db0c:	3710      	adds	r7, #16
 800db0e:	46bd      	mov	sp, r7
 800db10:	bd80      	pop	{r7, pc}
 800db12:	bf00      	nop
 800db14:	20001320 	.word	0x20001320
 800db18:	e000ed04 	.word	0xe000ed04

0800db1c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800db1c:	b580      	push	{r7, lr}
 800db1e:	b08a      	sub	sp, #40	@ 0x28
 800db20:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800db22:	2300      	movs	r3, #0
 800db24:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800db26:	2300      	movs	r3, #0
 800db28:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800db2a:	463a      	mov	r2, r7
 800db2c:	1d39      	adds	r1, r7, #4
 800db2e:	f107 0308 	add.w	r3, r7, #8
 800db32:	4618      	mov	r0, r3
 800db34:	f7fe fcfe 	bl	800c534 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800db38:	6839      	ldr	r1, [r7, #0]
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	68ba      	ldr	r2, [r7, #8]
 800db3e:	9202      	str	r2, [sp, #8]
 800db40:	9301      	str	r3, [sp, #4]
 800db42:	2300      	movs	r3, #0
 800db44:	9300      	str	r3, [sp, #0]
 800db46:	2300      	movs	r3, #0
 800db48:	460a      	mov	r2, r1
 800db4a:	4924      	ldr	r1, [pc, #144]	@ (800dbdc <vTaskStartScheduler+0xc0>)
 800db4c:	4824      	ldr	r0, [pc, #144]	@ (800dbe0 <vTaskStartScheduler+0xc4>)
 800db4e:	f7ff fd71 	bl	800d634 <xTaskCreateStatic>
 800db52:	4603      	mov	r3, r0
 800db54:	4a23      	ldr	r2, [pc, #140]	@ (800dbe4 <vTaskStartScheduler+0xc8>)
 800db56:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800db58:	4b22      	ldr	r3, [pc, #136]	@ (800dbe4 <vTaskStartScheduler+0xc8>)
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d002      	beq.n	800db66 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800db60:	2301      	movs	r3, #1
 800db62:	617b      	str	r3, [r7, #20]
 800db64:	e001      	b.n	800db6a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800db66:	2300      	movs	r3, #0
 800db68:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800db6a:	697b      	ldr	r3, [r7, #20]
 800db6c:	2b01      	cmp	r3, #1
 800db6e:	d102      	bne.n	800db76 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800db70:	f000 fe3c 	bl	800e7ec <xTimerCreateTimerTask>
 800db74:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800db76:	697b      	ldr	r3, [r7, #20]
 800db78:	2b01      	cmp	r3, #1
 800db7a:	d11b      	bne.n	800dbb4 <vTaskStartScheduler+0x98>
	__asm volatile
 800db7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db80:	f383 8811 	msr	BASEPRI, r3
 800db84:	f3bf 8f6f 	isb	sy
 800db88:	f3bf 8f4f 	dsb	sy
 800db8c:	613b      	str	r3, [r7, #16]
}
 800db8e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800db90:	4b15      	ldr	r3, [pc, #84]	@ (800dbe8 <vTaskStartScheduler+0xcc>)
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	3354      	adds	r3, #84	@ 0x54
 800db96:	4a15      	ldr	r2, [pc, #84]	@ (800dbec <vTaskStartScheduler+0xd0>)
 800db98:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800db9a:	4b15      	ldr	r3, [pc, #84]	@ (800dbf0 <vTaskStartScheduler+0xd4>)
 800db9c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800dba0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800dba2:	4b14      	ldr	r3, [pc, #80]	@ (800dbf4 <vTaskStartScheduler+0xd8>)
 800dba4:	2201      	movs	r2, #1
 800dba6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800dba8:	4b13      	ldr	r3, [pc, #76]	@ (800dbf8 <vTaskStartScheduler+0xdc>)
 800dbaa:	2200      	movs	r2, #0
 800dbac:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800dbae:	f001 fa07 	bl	800efc0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800dbb2:	e00f      	b.n	800dbd4 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800dbb4:	697b      	ldr	r3, [r7, #20]
 800dbb6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800dbba:	d10b      	bne.n	800dbd4 <vTaskStartScheduler+0xb8>
	__asm volatile
 800dbbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbc0:	f383 8811 	msr	BASEPRI, r3
 800dbc4:	f3bf 8f6f 	isb	sy
 800dbc8:	f3bf 8f4f 	dsb	sy
 800dbcc:	60fb      	str	r3, [r7, #12]
}
 800dbce:	bf00      	nop
 800dbd0:	bf00      	nop
 800dbd2:	e7fd      	b.n	800dbd0 <vTaskStartScheduler+0xb4>
}
 800dbd4:	bf00      	nop
 800dbd6:	3718      	adds	r7, #24
 800dbd8:	46bd      	mov	sp, r7
 800dbda:	bd80      	pop	{r7, pc}
 800dbdc:	08013e3c 	.word	0x08013e3c
 800dbe0:	0800e251 	.word	0x0800e251
 800dbe4:	2000131c 	.word	0x2000131c
 800dbe8:	20000e24 	.word	0x20000e24
 800dbec:	200001b4 	.word	0x200001b4
 800dbf0:	20001318 	.word	0x20001318
 800dbf4:	20001304 	.word	0x20001304
 800dbf8:	200012fc 	.word	0x200012fc

0800dbfc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800dbfc:	b480      	push	{r7}
 800dbfe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800dc00:	4b04      	ldr	r3, [pc, #16]	@ (800dc14 <vTaskSuspendAll+0x18>)
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	3301      	adds	r3, #1
 800dc06:	4a03      	ldr	r2, [pc, #12]	@ (800dc14 <vTaskSuspendAll+0x18>)
 800dc08:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800dc0a:	bf00      	nop
 800dc0c:	46bd      	mov	sp, r7
 800dc0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc12:	4770      	bx	lr
 800dc14:	20001320 	.word	0x20001320

0800dc18 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800dc18:	b580      	push	{r7, lr}
 800dc1a:	b084      	sub	sp, #16
 800dc1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800dc1e:	2300      	movs	r3, #0
 800dc20:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800dc22:	2300      	movs	r3, #0
 800dc24:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800dc26:	4b42      	ldr	r3, [pc, #264]	@ (800dd30 <xTaskResumeAll+0x118>)
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d10b      	bne.n	800dc46 <xTaskResumeAll+0x2e>
	__asm volatile
 800dc2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc32:	f383 8811 	msr	BASEPRI, r3
 800dc36:	f3bf 8f6f 	isb	sy
 800dc3a:	f3bf 8f4f 	dsb	sy
 800dc3e:	603b      	str	r3, [r7, #0]
}
 800dc40:	bf00      	nop
 800dc42:	bf00      	nop
 800dc44:	e7fd      	b.n	800dc42 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800dc46:	f001 fa5f 	bl	800f108 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800dc4a:	4b39      	ldr	r3, [pc, #228]	@ (800dd30 <xTaskResumeAll+0x118>)
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	3b01      	subs	r3, #1
 800dc50:	4a37      	ldr	r2, [pc, #220]	@ (800dd30 <xTaskResumeAll+0x118>)
 800dc52:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dc54:	4b36      	ldr	r3, [pc, #216]	@ (800dd30 <xTaskResumeAll+0x118>)
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d162      	bne.n	800dd22 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800dc5c:	4b35      	ldr	r3, [pc, #212]	@ (800dd34 <xTaskResumeAll+0x11c>)
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d05e      	beq.n	800dd22 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dc64:	e02f      	b.n	800dcc6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dc66:	4b34      	ldr	r3, [pc, #208]	@ (800dd38 <xTaskResumeAll+0x120>)
 800dc68:	68db      	ldr	r3, [r3, #12]
 800dc6a:	68db      	ldr	r3, [r3, #12]
 800dc6c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	3318      	adds	r3, #24
 800dc72:	4618      	mov	r0, r3
 800dc74:	f7fe fd1c 	bl	800c6b0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	3304      	adds	r3, #4
 800dc7c:	4618      	mov	r0, r3
 800dc7e:	f7fe fd17 	bl	800c6b0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dc86:	4b2d      	ldr	r3, [pc, #180]	@ (800dd3c <xTaskResumeAll+0x124>)
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	429a      	cmp	r2, r3
 800dc8c:	d903      	bls.n	800dc96 <xTaskResumeAll+0x7e>
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc92:	4a2a      	ldr	r2, [pc, #168]	@ (800dd3c <xTaskResumeAll+0x124>)
 800dc94:	6013      	str	r3, [r2, #0]
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dc9a:	4613      	mov	r3, r2
 800dc9c:	009b      	lsls	r3, r3, #2
 800dc9e:	4413      	add	r3, r2
 800dca0:	009b      	lsls	r3, r3, #2
 800dca2:	4a27      	ldr	r2, [pc, #156]	@ (800dd40 <xTaskResumeAll+0x128>)
 800dca4:	441a      	add	r2, r3
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	3304      	adds	r3, #4
 800dcaa:	4619      	mov	r1, r3
 800dcac:	4610      	mov	r0, r2
 800dcae:	f7fe fca2 	bl	800c5f6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dcb6:	4b23      	ldr	r3, [pc, #140]	@ (800dd44 <xTaskResumeAll+0x12c>)
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dcbc:	429a      	cmp	r2, r3
 800dcbe:	d302      	bcc.n	800dcc6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800dcc0:	4b21      	ldr	r3, [pc, #132]	@ (800dd48 <xTaskResumeAll+0x130>)
 800dcc2:	2201      	movs	r2, #1
 800dcc4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dcc6:	4b1c      	ldr	r3, [pc, #112]	@ (800dd38 <xTaskResumeAll+0x120>)
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d1cb      	bne.n	800dc66 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d001      	beq.n	800dcd8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800dcd4:	f000 fb78 	bl	800e3c8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800dcd8:	4b1c      	ldr	r3, [pc, #112]	@ (800dd4c <xTaskResumeAll+0x134>)
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d010      	beq.n	800dd06 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800dce4:	f000 f858 	bl	800dd98 <xTaskIncrementTick>
 800dce8:	4603      	mov	r3, r0
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d002      	beq.n	800dcf4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800dcee:	4b16      	ldr	r3, [pc, #88]	@ (800dd48 <xTaskResumeAll+0x130>)
 800dcf0:	2201      	movs	r2, #1
 800dcf2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	3b01      	subs	r3, #1
 800dcf8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d1f1      	bne.n	800dce4 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800dd00:	4b12      	ldr	r3, [pc, #72]	@ (800dd4c <xTaskResumeAll+0x134>)
 800dd02:	2200      	movs	r2, #0
 800dd04:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800dd06:	4b10      	ldr	r3, [pc, #64]	@ (800dd48 <xTaskResumeAll+0x130>)
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d009      	beq.n	800dd22 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800dd0e:	2301      	movs	r3, #1
 800dd10:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800dd12:	4b0f      	ldr	r3, [pc, #60]	@ (800dd50 <xTaskResumeAll+0x138>)
 800dd14:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dd18:	601a      	str	r2, [r3, #0]
 800dd1a:	f3bf 8f4f 	dsb	sy
 800dd1e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800dd22:	f001 fa23 	bl	800f16c <vPortExitCritical>

	return xAlreadyYielded;
 800dd26:	68bb      	ldr	r3, [r7, #8]
}
 800dd28:	4618      	mov	r0, r3
 800dd2a:	3710      	adds	r7, #16
 800dd2c:	46bd      	mov	sp, r7
 800dd2e:	bd80      	pop	{r7, pc}
 800dd30:	20001320 	.word	0x20001320
 800dd34:	200012f8 	.word	0x200012f8
 800dd38:	200012b8 	.word	0x200012b8
 800dd3c:	20001300 	.word	0x20001300
 800dd40:	20000e28 	.word	0x20000e28
 800dd44:	20000e24 	.word	0x20000e24
 800dd48:	2000130c 	.word	0x2000130c
 800dd4c:	20001308 	.word	0x20001308
 800dd50:	e000ed04 	.word	0xe000ed04

0800dd54 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800dd54:	b480      	push	{r7}
 800dd56:	b083      	sub	sp, #12
 800dd58:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800dd5a:	4b05      	ldr	r3, [pc, #20]	@ (800dd70 <xTaskGetTickCount+0x1c>)
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800dd60:	687b      	ldr	r3, [r7, #4]
}
 800dd62:	4618      	mov	r0, r3
 800dd64:	370c      	adds	r7, #12
 800dd66:	46bd      	mov	sp, r7
 800dd68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd6c:	4770      	bx	lr
 800dd6e:	bf00      	nop
 800dd70:	200012fc 	.word	0x200012fc

0800dd74 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800dd74:	b580      	push	{r7, lr}
 800dd76:	b082      	sub	sp, #8
 800dd78:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800dd7a:	f001 faa5 	bl	800f2c8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800dd7e:	2300      	movs	r3, #0
 800dd80:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800dd82:	4b04      	ldr	r3, [pc, #16]	@ (800dd94 <xTaskGetTickCountFromISR+0x20>)
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800dd88:	683b      	ldr	r3, [r7, #0]
}
 800dd8a:	4618      	mov	r0, r3
 800dd8c:	3708      	adds	r7, #8
 800dd8e:	46bd      	mov	sp, r7
 800dd90:	bd80      	pop	{r7, pc}
 800dd92:	bf00      	nop
 800dd94:	200012fc 	.word	0x200012fc

0800dd98 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800dd98:	b580      	push	{r7, lr}
 800dd9a:	b086      	sub	sp, #24
 800dd9c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800dd9e:	2300      	movs	r3, #0
 800dda0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dda2:	4b4f      	ldr	r3, [pc, #316]	@ (800dee0 <xTaskIncrementTick+0x148>)
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	f040 8090 	bne.w	800decc <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ddac:	4b4d      	ldr	r3, [pc, #308]	@ (800dee4 <xTaskIncrementTick+0x14c>)
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	3301      	adds	r3, #1
 800ddb2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ddb4:	4a4b      	ldr	r2, [pc, #300]	@ (800dee4 <xTaskIncrementTick+0x14c>)
 800ddb6:	693b      	ldr	r3, [r7, #16]
 800ddb8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ddba:	693b      	ldr	r3, [r7, #16]
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d121      	bne.n	800de04 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800ddc0:	4b49      	ldr	r3, [pc, #292]	@ (800dee8 <xTaskIncrementTick+0x150>)
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d00b      	beq.n	800dde2 <xTaskIncrementTick+0x4a>
	__asm volatile
 800ddca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddce:	f383 8811 	msr	BASEPRI, r3
 800ddd2:	f3bf 8f6f 	isb	sy
 800ddd6:	f3bf 8f4f 	dsb	sy
 800ddda:	603b      	str	r3, [r7, #0]
}
 800dddc:	bf00      	nop
 800ddde:	bf00      	nop
 800dde0:	e7fd      	b.n	800ddde <xTaskIncrementTick+0x46>
 800dde2:	4b41      	ldr	r3, [pc, #260]	@ (800dee8 <xTaskIncrementTick+0x150>)
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	60fb      	str	r3, [r7, #12]
 800dde8:	4b40      	ldr	r3, [pc, #256]	@ (800deec <xTaskIncrementTick+0x154>)
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	4a3e      	ldr	r2, [pc, #248]	@ (800dee8 <xTaskIncrementTick+0x150>)
 800ddee:	6013      	str	r3, [r2, #0]
 800ddf0:	4a3e      	ldr	r2, [pc, #248]	@ (800deec <xTaskIncrementTick+0x154>)
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	6013      	str	r3, [r2, #0]
 800ddf6:	4b3e      	ldr	r3, [pc, #248]	@ (800def0 <xTaskIncrementTick+0x158>)
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	3301      	adds	r3, #1
 800ddfc:	4a3c      	ldr	r2, [pc, #240]	@ (800def0 <xTaskIncrementTick+0x158>)
 800ddfe:	6013      	str	r3, [r2, #0]
 800de00:	f000 fae2 	bl	800e3c8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800de04:	4b3b      	ldr	r3, [pc, #236]	@ (800def4 <xTaskIncrementTick+0x15c>)
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	693a      	ldr	r2, [r7, #16]
 800de0a:	429a      	cmp	r2, r3
 800de0c:	d349      	bcc.n	800dea2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800de0e:	4b36      	ldr	r3, [pc, #216]	@ (800dee8 <xTaskIncrementTick+0x150>)
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	2b00      	cmp	r3, #0
 800de16:	d104      	bne.n	800de22 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800de18:	4b36      	ldr	r3, [pc, #216]	@ (800def4 <xTaskIncrementTick+0x15c>)
 800de1a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800de1e:	601a      	str	r2, [r3, #0]
					break;
 800de20:	e03f      	b.n	800dea2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800de22:	4b31      	ldr	r3, [pc, #196]	@ (800dee8 <xTaskIncrementTick+0x150>)
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	68db      	ldr	r3, [r3, #12]
 800de28:	68db      	ldr	r3, [r3, #12]
 800de2a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800de2c:	68bb      	ldr	r3, [r7, #8]
 800de2e:	685b      	ldr	r3, [r3, #4]
 800de30:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800de32:	693a      	ldr	r2, [r7, #16]
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	429a      	cmp	r2, r3
 800de38:	d203      	bcs.n	800de42 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800de3a:	4a2e      	ldr	r2, [pc, #184]	@ (800def4 <xTaskIncrementTick+0x15c>)
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800de40:	e02f      	b.n	800dea2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800de42:	68bb      	ldr	r3, [r7, #8]
 800de44:	3304      	adds	r3, #4
 800de46:	4618      	mov	r0, r3
 800de48:	f7fe fc32 	bl	800c6b0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800de4c:	68bb      	ldr	r3, [r7, #8]
 800de4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800de50:	2b00      	cmp	r3, #0
 800de52:	d004      	beq.n	800de5e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800de54:	68bb      	ldr	r3, [r7, #8]
 800de56:	3318      	adds	r3, #24
 800de58:	4618      	mov	r0, r3
 800de5a:	f7fe fc29 	bl	800c6b0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800de5e:	68bb      	ldr	r3, [r7, #8]
 800de60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800de62:	4b25      	ldr	r3, [pc, #148]	@ (800def8 <xTaskIncrementTick+0x160>)
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	429a      	cmp	r2, r3
 800de68:	d903      	bls.n	800de72 <xTaskIncrementTick+0xda>
 800de6a:	68bb      	ldr	r3, [r7, #8]
 800de6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de6e:	4a22      	ldr	r2, [pc, #136]	@ (800def8 <xTaskIncrementTick+0x160>)
 800de70:	6013      	str	r3, [r2, #0]
 800de72:	68bb      	ldr	r3, [r7, #8]
 800de74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800de76:	4613      	mov	r3, r2
 800de78:	009b      	lsls	r3, r3, #2
 800de7a:	4413      	add	r3, r2
 800de7c:	009b      	lsls	r3, r3, #2
 800de7e:	4a1f      	ldr	r2, [pc, #124]	@ (800defc <xTaskIncrementTick+0x164>)
 800de80:	441a      	add	r2, r3
 800de82:	68bb      	ldr	r3, [r7, #8]
 800de84:	3304      	adds	r3, #4
 800de86:	4619      	mov	r1, r3
 800de88:	4610      	mov	r0, r2
 800de8a:	f7fe fbb4 	bl	800c5f6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800de8e:	68bb      	ldr	r3, [r7, #8]
 800de90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800de92:	4b1b      	ldr	r3, [pc, #108]	@ (800df00 <xTaskIncrementTick+0x168>)
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de98:	429a      	cmp	r2, r3
 800de9a:	d3b8      	bcc.n	800de0e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800de9c:	2301      	movs	r3, #1
 800de9e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dea0:	e7b5      	b.n	800de0e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800dea2:	4b17      	ldr	r3, [pc, #92]	@ (800df00 <xTaskIncrementTick+0x168>)
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dea8:	4914      	ldr	r1, [pc, #80]	@ (800defc <xTaskIncrementTick+0x164>)
 800deaa:	4613      	mov	r3, r2
 800deac:	009b      	lsls	r3, r3, #2
 800deae:	4413      	add	r3, r2
 800deb0:	009b      	lsls	r3, r3, #2
 800deb2:	440b      	add	r3, r1
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	2b01      	cmp	r3, #1
 800deb8:	d901      	bls.n	800debe <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800deba:	2301      	movs	r3, #1
 800debc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800debe:	4b11      	ldr	r3, [pc, #68]	@ (800df04 <xTaskIncrementTick+0x16c>)
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d007      	beq.n	800ded6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800dec6:	2301      	movs	r3, #1
 800dec8:	617b      	str	r3, [r7, #20]
 800deca:	e004      	b.n	800ded6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800decc:	4b0e      	ldr	r3, [pc, #56]	@ (800df08 <xTaskIncrementTick+0x170>)
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	3301      	adds	r3, #1
 800ded2:	4a0d      	ldr	r2, [pc, #52]	@ (800df08 <xTaskIncrementTick+0x170>)
 800ded4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ded6:	697b      	ldr	r3, [r7, #20]
}
 800ded8:	4618      	mov	r0, r3
 800deda:	3718      	adds	r7, #24
 800dedc:	46bd      	mov	sp, r7
 800dede:	bd80      	pop	{r7, pc}
 800dee0:	20001320 	.word	0x20001320
 800dee4:	200012fc 	.word	0x200012fc
 800dee8:	200012b0 	.word	0x200012b0
 800deec:	200012b4 	.word	0x200012b4
 800def0:	20001310 	.word	0x20001310
 800def4:	20001318 	.word	0x20001318
 800def8:	20001300 	.word	0x20001300
 800defc:	20000e28 	.word	0x20000e28
 800df00:	20000e24 	.word	0x20000e24
 800df04:	2000130c 	.word	0x2000130c
 800df08:	20001308 	.word	0x20001308

0800df0c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800df0c:	b480      	push	{r7}
 800df0e:	b085      	sub	sp, #20
 800df10:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800df12:	4b2b      	ldr	r3, [pc, #172]	@ (800dfc0 <vTaskSwitchContext+0xb4>)
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	2b00      	cmp	r3, #0
 800df18:	d003      	beq.n	800df22 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800df1a:	4b2a      	ldr	r3, [pc, #168]	@ (800dfc4 <vTaskSwitchContext+0xb8>)
 800df1c:	2201      	movs	r2, #1
 800df1e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800df20:	e047      	b.n	800dfb2 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800df22:	4b28      	ldr	r3, [pc, #160]	@ (800dfc4 <vTaskSwitchContext+0xb8>)
 800df24:	2200      	movs	r2, #0
 800df26:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800df28:	4b27      	ldr	r3, [pc, #156]	@ (800dfc8 <vTaskSwitchContext+0xbc>)
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	60fb      	str	r3, [r7, #12]
 800df2e:	e011      	b.n	800df54 <vTaskSwitchContext+0x48>
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	2b00      	cmp	r3, #0
 800df34:	d10b      	bne.n	800df4e <vTaskSwitchContext+0x42>
	__asm volatile
 800df36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df3a:	f383 8811 	msr	BASEPRI, r3
 800df3e:	f3bf 8f6f 	isb	sy
 800df42:	f3bf 8f4f 	dsb	sy
 800df46:	607b      	str	r3, [r7, #4]
}
 800df48:	bf00      	nop
 800df4a:	bf00      	nop
 800df4c:	e7fd      	b.n	800df4a <vTaskSwitchContext+0x3e>
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	3b01      	subs	r3, #1
 800df52:	60fb      	str	r3, [r7, #12]
 800df54:	491d      	ldr	r1, [pc, #116]	@ (800dfcc <vTaskSwitchContext+0xc0>)
 800df56:	68fa      	ldr	r2, [r7, #12]
 800df58:	4613      	mov	r3, r2
 800df5a:	009b      	lsls	r3, r3, #2
 800df5c:	4413      	add	r3, r2
 800df5e:	009b      	lsls	r3, r3, #2
 800df60:	440b      	add	r3, r1
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	2b00      	cmp	r3, #0
 800df66:	d0e3      	beq.n	800df30 <vTaskSwitchContext+0x24>
 800df68:	68fa      	ldr	r2, [r7, #12]
 800df6a:	4613      	mov	r3, r2
 800df6c:	009b      	lsls	r3, r3, #2
 800df6e:	4413      	add	r3, r2
 800df70:	009b      	lsls	r3, r3, #2
 800df72:	4a16      	ldr	r2, [pc, #88]	@ (800dfcc <vTaskSwitchContext+0xc0>)
 800df74:	4413      	add	r3, r2
 800df76:	60bb      	str	r3, [r7, #8]
 800df78:	68bb      	ldr	r3, [r7, #8]
 800df7a:	685b      	ldr	r3, [r3, #4]
 800df7c:	685a      	ldr	r2, [r3, #4]
 800df7e:	68bb      	ldr	r3, [r7, #8]
 800df80:	605a      	str	r2, [r3, #4]
 800df82:	68bb      	ldr	r3, [r7, #8]
 800df84:	685a      	ldr	r2, [r3, #4]
 800df86:	68bb      	ldr	r3, [r7, #8]
 800df88:	3308      	adds	r3, #8
 800df8a:	429a      	cmp	r2, r3
 800df8c:	d104      	bne.n	800df98 <vTaskSwitchContext+0x8c>
 800df8e:	68bb      	ldr	r3, [r7, #8]
 800df90:	685b      	ldr	r3, [r3, #4]
 800df92:	685a      	ldr	r2, [r3, #4]
 800df94:	68bb      	ldr	r3, [r7, #8]
 800df96:	605a      	str	r2, [r3, #4]
 800df98:	68bb      	ldr	r3, [r7, #8]
 800df9a:	685b      	ldr	r3, [r3, #4]
 800df9c:	68db      	ldr	r3, [r3, #12]
 800df9e:	4a0c      	ldr	r2, [pc, #48]	@ (800dfd0 <vTaskSwitchContext+0xc4>)
 800dfa0:	6013      	str	r3, [r2, #0]
 800dfa2:	4a09      	ldr	r2, [pc, #36]	@ (800dfc8 <vTaskSwitchContext+0xbc>)
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800dfa8:	4b09      	ldr	r3, [pc, #36]	@ (800dfd0 <vTaskSwitchContext+0xc4>)
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	3354      	adds	r3, #84	@ 0x54
 800dfae:	4a09      	ldr	r2, [pc, #36]	@ (800dfd4 <vTaskSwitchContext+0xc8>)
 800dfb0:	6013      	str	r3, [r2, #0]
}
 800dfb2:	bf00      	nop
 800dfb4:	3714      	adds	r7, #20
 800dfb6:	46bd      	mov	sp, r7
 800dfb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfbc:	4770      	bx	lr
 800dfbe:	bf00      	nop
 800dfc0:	20001320 	.word	0x20001320
 800dfc4:	2000130c 	.word	0x2000130c
 800dfc8:	20001300 	.word	0x20001300
 800dfcc:	20000e28 	.word	0x20000e28
 800dfd0:	20000e24 	.word	0x20000e24
 800dfd4:	200001b4 	.word	0x200001b4

0800dfd8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800dfd8:	b580      	push	{r7, lr}
 800dfda:	b084      	sub	sp, #16
 800dfdc:	af00      	add	r7, sp, #0
 800dfde:	6078      	str	r0, [r7, #4]
 800dfe0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d10b      	bne.n	800e000 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800dfe8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfec:	f383 8811 	msr	BASEPRI, r3
 800dff0:	f3bf 8f6f 	isb	sy
 800dff4:	f3bf 8f4f 	dsb	sy
 800dff8:	60fb      	str	r3, [r7, #12]
}
 800dffa:	bf00      	nop
 800dffc:	bf00      	nop
 800dffe:	e7fd      	b.n	800dffc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e000:	4b07      	ldr	r3, [pc, #28]	@ (800e020 <vTaskPlaceOnEventList+0x48>)
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	3318      	adds	r3, #24
 800e006:	4619      	mov	r1, r3
 800e008:	6878      	ldr	r0, [r7, #4]
 800e00a:	f7fe fb18 	bl	800c63e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e00e:	2101      	movs	r1, #1
 800e010:	6838      	ldr	r0, [r7, #0]
 800e012:	f000 fb97 	bl	800e744 <prvAddCurrentTaskToDelayedList>
}
 800e016:	bf00      	nop
 800e018:	3710      	adds	r7, #16
 800e01a:	46bd      	mov	sp, r7
 800e01c:	bd80      	pop	{r7, pc}
 800e01e:	bf00      	nop
 800e020:	20000e24 	.word	0x20000e24

0800e024 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e024:	b580      	push	{r7, lr}
 800e026:	b086      	sub	sp, #24
 800e028:	af00      	add	r7, sp, #0
 800e02a:	60f8      	str	r0, [r7, #12]
 800e02c:	60b9      	str	r1, [r7, #8]
 800e02e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	2b00      	cmp	r3, #0
 800e034:	d10b      	bne.n	800e04e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800e036:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e03a:	f383 8811 	msr	BASEPRI, r3
 800e03e:	f3bf 8f6f 	isb	sy
 800e042:	f3bf 8f4f 	dsb	sy
 800e046:	617b      	str	r3, [r7, #20]
}
 800e048:	bf00      	nop
 800e04a:	bf00      	nop
 800e04c:	e7fd      	b.n	800e04a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e04e:	4b0a      	ldr	r3, [pc, #40]	@ (800e078 <vTaskPlaceOnEventListRestricted+0x54>)
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	3318      	adds	r3, #24
 800e054:	4619      	mov	r1, r3
 800e056:	68f8      	ldr	r0, [r7, #12]
 800e058:	f7fe facd 	bl	800c5f6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d002      	beq.n	800e068 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800e062:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e066:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e068:	6879      	ldr	r1, [r7, #4]
 800e06a:	68b8      	ldr	r0, [r7, #8]
 800e06c:	f000 fb6a 	bl	800e744 <prvAddCurrentTaskToDelayedList>
	}
 800e070:	bf00      	nop
 800e072:	3718      	adds	r7, #24
 800e074:	46bd      	mov	sp, r7
 800e076:	bd80      	pop	{r7, pc}
 800e078:	20000e24 	.word	0x20000e24

0800e07c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e07c:	b580      	push	{r7, lr}
 800e07e:	b086      	sub	sp, #24
 800e080:	af00      	add	r7, sp, #0
 800e082:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	68db      	ldr	r3, [r3, #12]
 800e088:	68db      	ldr	r3, [r3, #12]
 800e08a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e08c:	693b      	ldr	r3, [r7, #16]
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d10b      	bne.n	800e0aa <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800e092:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e096:	f383 8811 	msr	BASEPRI, r3
 800e09a:	f3bf 8f6f 	isb	sy
 800e09e:	f3bf 8f4f 	dsb	sy
 800e0a2:	60fb      	str	r3, [r7, #12]
}
 800e0a4:	bf00      	nop
 800e0a6:	bf00      	nop
 800e0a8:	e7fd      	b.n	800e0a6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e0aa:	693b      	ldr	r3, [r7, #16]
 800e0ac:	3318      	adds	r3, #24
 800e0ae:	4618      	mov	r0, r3
 800e0b0:	f7fe fafe 	bl	800c6b0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e0b4:	4b1d      	ldr	r3, [pc, #116]	@ (800e12c <xTaskRemoveFromEventList+0xb0>)
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d11d      	bne.n	800e0f8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e0bc:	693b      	ldr	r3, [r7, #16]
 800e0be:	3304      	adds	r3, #4
 800e0c0:	4618      	mov	r0, r3
 800e0c2:	f7fe faf5 	bl	800c6b0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e0c6:	693b      	ldr	r3, [r7, #16]
 800e0c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e0ca:	4b19      	ldr	r3, [pc, #100]	@ (800e130 <xTaskRemoveFromEventList+0xb4>)
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	429a      	cmp	r2, r3
 800e0d0:	d903      	bls.n	800e0da <xTaskRemoveFromEventList+0x5e>
 800e0d2:	693b      	ldr	r3, [r7, #16]
 800e0d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0d6:	4a16      	ldr	r2, [pc, #88]	@ (800e130 <xTaskRemoveFromEventList+0xb4>)
 800e0d8:	6013      	str	r3, [r2, #0]
 800e0da:	693b      	ldr	r3, [r7, #16]
 800e0dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e0de:	4613      	mov	r3, r2
 800e0e0:	009b      	lsls	r3, r3, #2
 800e0e2:	4413      	add	r3, r2
 800e0e4:	009b      	lsls	r3, r3, #2
 800e0e6:	4a13      	ldr	r2, [pc, #76]	@ (800e134 <xTaskRemoveFromEventList+0xb8>)
 800e0e8:	441a      	add	r2, r3
 800e0ea:	693b      	ldr	r3, [r7, #16]
 800e0ec:	3304      	adds	r3, #4
 800e0ee:	4619      	mov	r1, r3
 800e0f0:	4610      	mov	r0, r2
 800e0f2:	f7fe fa80 	bl	800c5f6 <vListInsertEnd>
 800e0f6:	e005      	b.n	800e104 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e0f8:	693b      	ldr	r3, [r7, #16]
 800e0fa:	3318      	adds	r3, #24
 800e0fc:	4619      	mov	r1, r3
 800e0fe:	480e      	ldr	r0, [pc, #56]	@ (800e138 <xTaskRemoveFromEventList+0xbc>)
 800e100:	f7fe fa79 	bl	800c5f6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e104:	693b      	ldr	r3, [r7, #16]
 800e106:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e108:	4b0c      	ldr	r3, [pc, #48]	@ (800e13c <xTaskRemoveFromEventList+0xc0>)
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e10e:	429a      	cmp	r2, r3
 800e110:	d905      	bls.n	800e11e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e112:	2301      	movs	r3, #1
 800e114:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e116:	4b0a      	ldr	r3, [pc, #40]	@ (800e140 <xTaskRemoveFromEventList+0xc4>)
 800e118:	2201      	movs	r2, #1
 800e11a:	601a      	str	r2, [r3, #0]
 800e11c:	e001      	b.n	800e122 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800e11e:	2300      	movs	r3, #0
 800e120:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e122:	697b      	ldr	r3, [r7, #20]
}
 800e124:	4618      	mov	r0, r3
 800e126:	3718      	adds	r7, #24
 800e128:	46bd      	mov	sp, r7
 800e12a:	bd80      	pop	{r7, pc}
 800e12c:	20001320 	.word	0x20001320
 800e130:	20001300 	.word	0x20001300
 800e134:	20000e28 	.word	0x20000e28
 800e138:	200012b8 	.word	0x200012b8
 800e13c:	20000e24 	.word	0x20000e24
 800e140:	2000130c 	.word	0x2000130c

0800e144 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e144:	b480      	push	{r7}
 800e146:	b083      	sub	sp, #12
 800e148:	af00      	add	r7, sp, #0
 800e14a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e14c:	4b06      	ldr	r3, [pc, #24]	@ (800e168 <vTaskInternalSetTimeOutState+0x24>)
 800e14e:	681a      	ldr	r2, [r3, #0]
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e154:	4b05      	ldr	r3, [pc, #20]	@ (800e16c <vTaskInternalSetTimeOutState+0x28>)
 800e156:	681a      	ldr	r2, [r3, #0]
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	605a      	str	r2, [r3, #4]
}
 800e15c:	bf00      	nop
 800e15e:	370c      	adds	r7, #12
 800e160:	46bd      	mov	sp, r7
 800e162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e166:	4770      	bx	lr
 800e168:	20001310 	.word	0x20001310
 800e16c:	200012fc 	.word	0x200012fc

0800e170 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e170:	b580      	push	{r7, lr}
 800e172:	b088      	sub	sp, #32
 800e174:	af00      	add	r7, sp, #0
 800e176:	6078      	str	r0, [r7, #4]
 800e178:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d10b      	bne.n	800e198 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800e180:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e184:	f383 8811 	msr	BASEPRI, r3
 800e188:	f3bf 8f6f 	isb	sy
 800e18c:	f3bf 8f4f 	dsb	sy
 800e190:	613b      	str	r3, [r7, #16]
}
 800e192:	bf00      	nop
 800e194:	bf00      	nop
 800e196:	e7fd      	b.n	800e194 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e198:	683b      	ldr	r3, [r7, #0]
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	d10b      	bne.n	800e1b6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800e19e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1a2:	f383 8811 	msr	BASEPRI, r3
 800e1a6:	f3bf 8f6f 	isb	sy
 800e1aa:	f3bf 8f4f 	dsb	sy
 800e1ae:	60fb      	str	r3, [r7, #12]
}
 800e1b0:	bf00      	nop
 800e1b2:	bf00      	nop
 800e1b4:	e7fd      	b.n	800e1b2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800e1b6:	f000 ffa7 	bl	800f108 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e1ba:	4b1d      	ldr	r3, [pc, #116]	@ (800e230 <xTaskCheckForTimeOut+0xc0>)
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	685b      	ldr	r3, [r3, #4]
 800e1c4:	69ba      	ldr	r2, [r7, #24]
 800e1c6:	1ad3      	subs	r3, r2, r3
 800e1c8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e1ca:	683b      	ldr	r3, [r7, #0]
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e1d2:	d102      	bne.n	800e1da <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e1d4:	2300      	movs	r3, #0
 800e1d6:	61fb      	str	r3, [r7, #28]
 800e1d8:	e023      	b.n	800e222 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	681a      	ldr	r2, [r3, #0]
 800e1de:	4b15      	ldr	r3, [pc, #84]	@ (800e234 <xTaskCheckForTimeOut+0xc4>)
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	429a      	cmp	r2, r3
 800e1e4:	d007      	beq.n	800e1f6 <xTaskCheckForTimeOut+0x86>
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	685b      	ldr	r3, [r3, #4]
 800e1ea:	69ba      	ldr	r2, [r7, #24]
 800e1ec:	429a      	cmp	r2, r3
 800e1ee:	d302      	bcc.n	800e1f6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e1f0:	2301      	movs	r3, #1
 800e1f2:	61fb      	str	r3, [r7, #28]
 800e1f4:	e015      	b.n	800e222 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e1f6:	683b      	ldr	r3, [r7, #0]
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	697a      	ldr	r2, [r7, #20]
 800e1fc:	429a      	cmp	r2, r3
 800e1fe:	d20b      	bcs.n	800e218 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e200:	683b      	ldr	r3, [r7, #0]
 800e202:	681a      	ldr	r2, [r3, #0]
 800e204:	697b      	ldr	r3, [r7, #20]
 800e206:	1ad2      	subs	r2, r2, r3
 800e208:	683b      	ldr	r3, [r7, #0]
 800e20a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e20c:	6878      	ldr	r0, [r7, #4]
 800e20e:	f7ff ff99 	bl	800e144 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e212:	2300      	movs	r3, #0
 800e214:	61fb      	str	r3, [r7, #28]
 800e216:	e004      	b.n	800e222 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800e218:	683b      	ldr	r3, [r7, #0]
 800e21a:	2200      	movs	r2, #0
 800e21c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e21e:	2301      	movs	r3, #1
 800e220:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e222:	f000 ffa3 	bl	800f16c <vPortExitCritical>

	return xReturn;
 800e226:	69fb      	ldr	r3, [r7, #28]
}
 800e228:	4618      	mov	r0, r3
 800e22a:	3720      	adds	r7, #32
 800e22c:	46bd      	mov	sp, r7
 800e22e:	bd80      	pop	{r7, pc}
 800e230:	200012fc 	.word	0x200012fc
 800e234:	20001310 	.word	0x20001310

0800e238 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e238:	b480      	push	{r7}
 800e23a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e23c:	4b03      	ldr	r3, [pc, #12]	@ (800e24c <vTaskMissedYield+0x14>)
 800e23e:	2201      	movs	r2, #1
 800e240:	601a      	str	r2, [r3, #0]
}
 800e242:	bf00      	nop
 800e244:	46bd      	mov	sp, r7
 800e246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e24a:	4770      	bx	lr
 800e24c:	2000130c 	.word	0x2000130c

0800e250 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e250:	b580      	push	{r7, lr}
 800e252:	b082      	sub	sp, #8
 800e254:	af00      	add	r7, sp, #0
 800e256:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e258:	f000 f852 	bl	800e300 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e25c:	4b06      	ldr	r3, [pc, #24]	@ (800e278 <prvIdleTask+0x28>)
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	2b01      	cmp	r3, #1
 800e262:	d9f9      	bls.n	800e258 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e264:	4b05      	ldr	r3, [pc, #20]	@ (800e27c <prvIdleTask+0x2c>)
 800e266:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e26a:	601a      	str	r2, [r3, #0]
 800e26c:	f3bf 8f4f 	dsb	sy
 800e270:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e274:	e7f0      	b.n	800e258 <prvIdleTask+0x8>
 800e276:	bf00      	nop
 800e278:	20000e28 	.word	0x20000e28
 800e27c:	e000ed04 	.word	0xe000ed04

0800e280 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e280:	b580      	push	{r7, lr}
 800e282:	b082      	sub	sp, #8
 800e284:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e286:	2300      	movs	r3, #0
 800e288:	607b      	str	r3, [r7, #4]
 800e28a:	e00c      	b.n	800e2a6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e28c:	687a      	ldr	r2, [r7, #4]
 800e28e:	4613      	mov	r3, r2
 800e290:	009b      	lsls	r3, r3, #2
 800e292:	4413      	add	r3, r2
 800e294:	009b      	lsls	r3, r3, #2
 800e296:	4a12      	ldr	r2, [pc, #72]	@ (800e2e0 <prvInitialiseTaskLists+0x60>)
 800e298:	4413      	add	r3, r2
 800e29a:	4618      	mov	r0, r3
 800e29c:	f7fe f97e 	bl	800c59c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	3301      	adds	r3, #1
 800e2a4:	607b      	str	r3, [r7, #4]
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	2b37      	cmp	r3, #55	@ 0x37
 800e2aa:	d9ef      	bls.n	800e28c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e2ac:	480d      	ldr	r0, [pc, #52]	@ (800e2e4 <prvInitialiseTaskLists+0x64>)
 800e2ae:	f7fe f975 	bl	800c59c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e2b2:	480d      	ldr	r0, [pc, #52]	@ (800e2e8 <prvInitialiseTaskLists+0x68>)
 800e2b4:	f7fe f972 	bl	800c59c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e2b8:	480c      	ldr	r0, [pc, #48]	@ (800e2ec <prvInitialiseTaskLists+0x6c>)
 800e2ba:	f7fe f96f 	bl	800c59c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e2be:	480c      	ldr	r0, [pc, #48]	@ (800e2f0 <prvInitialiseTaskLists+0x70>)
 800e2c0:	f7fe f96c 	bl	800c59c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e2c4:	480b      	ldr	r0, [pc, #44]	@ (800e2f4 <prvInitialiseTaskLists+0x74>)
 800e2c6:	f7fe f969 	bl	800c59c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e2ca:	4b0b      	ldr	r3, [pc, #44]	@ (800e2f8 <prvInitialiseTaskLists+0x78>)
 800e2cc:	4a05      	ldr	r2, [pc, #20]	@ (800e2e4 <prvInitialiseTaskLists+0x64>)
 800e2ce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e2d0:	4b0a      	ldr	r3, [pc, #40]	@ (800e2fc <prvInitialiseTaskLists+0x7c>)
 800e2d2:	4a05      	ldr	r2, [pc, #20]	@ (800e2e8 <prvInitialiseTaskLists+0x68>)
 800e2d4:	601a      	str	r2, [r3, #0]
}
 800e2d6:	bf00      	nop
 800e2d8:	3708      	adds	r7, #8
 800e2da:	46bd      	mov	sp, r7
 800e2dc:	bd80      	pop	{r7, pc}
 800e2de:	bf00      	nop
 800e2e0:	20000e28 	.word	0x20000e28
 800e2e4:	20001288 	.word	0x20001288
 800e2e8:	2000129c 	.word	0x2000129c
 800e2ec:	200012b8 	.word	0x200012b8
 800e2f0:	200012cc 	.word	0x200012cc
 800e2f4:	200012e4 	.word	0x200012e4
 800e2f8:	200012b0 	.word	0x200012b0
 800e2fc:	200012b4 	.word	0x200012b4

0800e300 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e300:	b580      	push	{r7, lr}
 800e302:	b082      	sub	sp, #8
 800e304:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e306:	e019      	b.n	800e33c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e308:	f000 fefe 	bl	800f108 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e30c:	4b10      	ldr	r3, [pc, #64]	@ (800e350 <prvCheckTasksWaitingTermination+0x50>)
 800e30e:	68db      	ldr	r3, [r3, #12]
 800e310:	68db      	ldr	r3, [r3, #12]
 800e312:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	3304      	adds	r3, #4
 800e318:	4618      	mov	r0, r3
 800e31a:	f7fe f9c9 	bl	800c6b0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e31e:	4b0d      	ldr	r3, [pc, #52]	@ (800e354 <prvCheckTasksWaitingTermination+0x54>)
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	3b01      	subs	r3, #1
 800e324:	4a0b      	ldr	r2, [pc, #44]	@ (800e354 <prvCheckTasksWaitingTermination+0x54>)
 800e326:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e328:	4b0b      	ldr	r3, [pc, #44]	@ (800e358 <prvCheckTasksWaitingTermination+0x58>)
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	3b01      	subs	r3, #1
 800e32e:	4a0a      	ldr	r2, [pc, #40]	@ (800e358 <prvCheckTasksWaitingTermination+0x58>)
 800e330:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e332:	f000 ff1b 	bl	800f16c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e336:	6878      	ldr	r0, [r7, #4]
 800e338:	f000 f810 	bl	800e35c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e33c:	4b06      	ldr	r3, [pc, #24]	@ (800e358 <prvCheckTasksWaitingTermination+0x58>)
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	2b00      	cmp	r3, #0
 800e342:	d1e1      	bne.n	800e308 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e344:	bf00      	nop
 800e346:	bf00      	nop
 800e348:	3708      	adds	r7, #8
 800e34a:	46bd      	mov	sp, r7
 800e34c:	bd80      	pop	{r7, pc}
 800e34e:	bf00      	nop
 800e350:	200012cc 	.word	0x200012cc
 800e354:	200012f8 	.word	0x200012f8
 800e358:	200012e0 	.word	0x200012e0

0800e35c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e35c:	b580      	push	{r7, lr}
 800e35e:	b084      	sub	sp, #16
 800e360:	af00      	add	r7, sp, #0
 800e362:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	3354      	adds	r3, #84	@ 0x54
 800e368:	4618      	mov	r0, r3
 800e36a:	f002 fc47 	bl	8010bfc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800e374:	2b00      	cmp	r3, #0
 800e376:	d108      	bne.n	800e38a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e37c:	4618      	mov	r0, r3
 800e37e:	f001 f8b3 	bl	800f4e8 <vPortFree>
				vPortFree( pxTCB );
 800e382:	6878      	ldr	r0, [r7, #4]
 800e384:	f001 f8b0 	bl	800f4e8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e388:	e019      	b.n	800e3be <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800e390:	2b01      	cmp	r3, #1
 800e392:	d103      	bne.n	800e39c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800e394:	6878      	ldr	r0, [r7, #4]
 800e396:	f001 f8a7 	bl	800f4e8 <vPortFree>
	}
 800e39a:	e010      	b.n	800e3be <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800e3a2:	2b02      	cmp	r3, #2
 800e3a4:	d00b      	beq.n	800e3be <prvDeleteTCB+0x62>
	__asm volatile
 800e3a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3aa:	f383 8811 	msr	BASEPRI, r3
 800e3ae:	f3bf 8f6f 	isb	sy
 800e3b2:	f3bf 8f4f 	dsb	sy
 800e3b6:	60fb      	str	r3, [r7, #12]
}
 800e3b8:	bf00      	nop
 800e3ba:	bf00      	nop
 800e3bc:	e7fd      	b.n	800e3ba <prvDeleteTCB+0x5e>
	}
 800e3be:	bf00      	nop
 800e3c0:	3710      	adds	r7, #16
 800e3c2:	46bd      	mov	sp, r7
 800e3c4:	bd80      	pop	{r7, pc}
	...

0800e3c8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e3c8:	b480      	push	{r7}
 800e3ca:	b083      	sub	sp, #12
 800e3cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e3ce:	4b0c      	ldr	r3, [pc, #48]	@ (800e400 <prvResetNextTaskUnblockTime+0x38>)
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d104      	bne.n	800e3e2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e3d8:	4b0a      	ldr	r3, [pc, #40]	@ (800e404 <prvResetNextTaskUnblockTime+0x3c>)
 800e3da:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e3de:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e3e0:	e008      	b.n	800e3f4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e3e2:	4b07      	ldr	r3, [pc, #28]	@ (800e400 <prvResetNextTaskUnblockTime+0x38>)
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	68db      	ldr	r3, [r3, #12]
 800e3e8:	68db      	ldr	r3, [r3, #12]
 800e3ea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	685b      	ldr	r3, [r3, #4]
 800e3f0:	4a04      	ldr	r2, [pc, #16]	@ (800e404 <prvResetNextTaskUnblockTime+0x3c>)
 800e3f2:	6013      	str	r3, [r2, #0]
}
 800e3f4:	bf00      	nop
 800e3f6:	370c      	adds	r7, #12
 800e3f8:	46bd      	mov	sp, r7
 800e3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3fe:	4770      	bx	lr
 800e400:	200012b0 	.word	0x200012b0
 800e404:	20001318 	.word	0x20001318

0800e408 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800e408:	b480      	push	{r7}
 800e40a:	b083      	sub	sp, #12
 800e40c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800e40e:	4b05      	ldr	r3, [pc, #20]	@ (800e424 <xTaskGetCurrentTaskHandle+0x1c>)
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	607b      	str	r3, [r7, #4]

		return xReturn;
 800e414:	687b      	ldr	r3, [r7, #4]
	}
 800e416:	4618      	mov	r0, r3
 800e418:	370c      	adds	r7, #12
 800e41a:	46bd      	mov	sp, r7
 800e41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e420:	4770      	bx	lr
 800e422:	bf00      	nop
 800e424:	20000e24 	.word	0x20000e24

0800e428 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e428:	b480      	push	{r7}
 800e42a:	b083      	sub	sp, #12
 800e42c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e42e:	4b0b      	ldr	r3, [pc, #44]	@ (800e45c <xTaskGetSchedulerState+0x34>)
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	2b00      	cmp	r3, #0
 800e434:	d102      	bne.n	800e43c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e436:	2301      	movs	r3, #1
 800e438:	607b      	str	r3, [r7, #4]
 800e43a:	e008      	b.n	800e44e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e43c:	4b08      	ldr	r3, [pc, #32]	@ (800e460 <xTaskGetSchedulerState+0x38>)
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	2b00      	cmp	r3, #0
 800e442:	d102      	bne.n	800e44a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e444:	2302      	movs	r3, #2
 800e446:	607b      	str	r3, [r7, #4]
 800e448:	e001      	b.n	800e44e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e44a:	2300      	movs	r3, #0
 800e44c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e44e:	687b      	ldr	r3, [r7, #4]
	}
 800e450:	4618      	mov	r0, r3
 800e452:	370c      	adds	r7, #12
 800e454:	46bd      	mov	sp, r7
 800e456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e45a:	4770      	bx	lr
 800e45c:	20001304 	.word	0x20001304
 800e460:	20001320 	.word	0x20001320

0800e464 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800e464:	b580      	push	{r7, lr}
 800e466:	b084      	sub	sp, #16
 800e468:	af00      	add	r7, sp, #0
 800e46a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800e470:	2300      	movs	r3, #0
 800e472:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	2b00      	cmp	r3, #0
 800e478:	d051      	beq.n	800e51e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e47a:	68bb      	ldr	r3, [r7, #8]
 800e47c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e47e:	4b2a      	ldr	r3, [pc, #168]	@ (800e528 <xTaskPriorityInherit+0xc4>)
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e484:	429a      	cmp	r2, r3
 800e486:	d241      	bcs.n	800e50c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e488:	68bb      	ldr	r3, [r7, #8]
 800e48a:	699b      	ldr	r3, [r3, #24]
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	db06      	blt.n	800e49e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e490:	4b25      	ldr	r3, [pc, #148]	@ (800e528 <xTaskPriorityInherit+0xc4>)
 800e492:	681b      	ldr	r3, [r3, #0]
 800e494:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e496:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800e49a:	68bb      	ldr	r3, [r7, #8]
 800e49c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800e49e:	68bb      	ldr	r3, [r7, #8]
 800e4a0:	6959      	ldr	r1, [r3, #20]
 800e4a2:	68bb      	ldr	r3, [r7, #8]
 800e4a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e4a6:	4613      	mov	r3, r2
 800e4a8:	009b      	lsls	r3, r3, #2
 800e4aa:	4413      	add	r3, r2
 800e4ac:	009b      	lsls	r3, r3, #2
 800e4ae:	4a1f      	ldr	r2, [pc, #124]	@ (800e52c <xTaskPriorityInherit+0xc8>)
 800e4b0:	4413      	add	r3, r2
 800e4b2:	4299      	cmp	r1, r3
 800e4b4:	d122      	bne.n	800e4fc <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e4b6:	68bb      	ldr	r3, [r7, #8]
 800e4b8:	3304      	adds	r3, #4
 800e4ba:	4618      	mov	r0, r3
 800e4bc:	f7fe f8f8 	bl	800c6b0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e4c0:	4b19      	ldr	r3, [pc, #100]	@ (800e528 <xTaskPriorityInherit+0xc4>)
 800e4c2:	681b      	ldr	r3, [r3, #0]
 800e4c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e4c6:	68bb      	ldr	r3, [r7, #8]
 800e4c8:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e4ca:	68bb      	ldr	r3, [r7, #8]
 800e4cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e4ce:	4b18      	ldr	r3, [pc, #96]	@ (800e530 <xTaskPriorityInherit+0xcc>)
 800e4d0:	681b      	ldr	r3, [r3, #0]
 800e4d2:	429a      	cmp	r2, r3
 800e4d4:	d903      	bls.n	800e4de <xTaskPriorityInherit+0x7a>
 800e4d6:	68bb      	ldr	r3, [r7, #8]
 800e4d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4da:	4a15      	ldr	r2, [pc, #84]	@ (800e530 <xTaskPriorityInherit+0xcc>)
 800e4dc:	6013      	str	r3, [r2, #0]
 800e4de:	68bb      	ldr	r3, [r7, #8]
 800e4e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e4e2:	4613      	mov	r3, r2
 800e4e4:	009b      	lsls	r3, r3, #2
 800e4e6:	4413      	add	r3, r2
 800e4e8:	009b      	lsls	r3, r3, #2
 800e4ea:	4a10      	ldr	r2, [pc, #64]	@ (800e52c <xTaskPriorityInherit+0xc8>)
 800e4ec:	441a      	add	r2, r3
 800e4ee:	68bb      	ldr	r3, [r7, #8]
 800e4f0:	3304      	adds	r3, #4
 800e4f2:	4619      	mov	r1, r3
 800e4f4:	4610      	mov	r0, r2
 800e4f6:	f7fe f87e 	bl	800c5f6 <vListInsertEnd>
 800e4fa:	e004      	b.n	800e506 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e4fc:	4b0a      	ldr	r3, [pc, #40]	@ (800e528 <xTaskPriorityInherit+0xc4>)
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e502:	68bb      	ldr	r3, [r7, #8]
 800e504:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800e506:	2301      	movs	r3, #1
 800e508:	60fb      	str	r3, [r7, #12]
 800e50a:	e008      	b.n	800e51e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800e50c:	68bb      	ldr	r3, [r7, #8]
 800e50e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e510:	4b05      	ldr	r3, [pc, #20]	@ (800e528 <xTaskPriorityInherit+0xc4>)
 800e512:	681b      	ldr	r3, [r3, #0]
 800e514:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e516:	429a      	cmp	r2, r3
 800e518:	d201      	bcs.n	800e51e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800e51a:	2301      	movs	r3, #1
 800e51c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e51e:	68fb      	ldr	r3, [r7, #12]
	}
 800e520:	4618      	mov	r0, r3
 800e522:	3710      	adds	r7, #16
 800e524:	46bd      	mov	sp, r7
 800e526:	bd80      	pop	{r7, pc}
 800e528:	20000e24 	.word	0x20000e24
 800e52c:	20000e28 	.word	0x20000e28
 800e530:	20001300 	.word	0x20001300

0800e534 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e534:	b580      	push	{r7, lr}
 800e536:	b086      	sub	sp, #24
 800e538:	af00      	add	r7, sp, #0
 800e53a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e540:	2300      	movs	r3, #0
 800e542:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	2b00      	cmp	r3, #0
 800e548:	d058      	beq.n	800e5fc <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e54a:	4b2f      	ldr	r3, [pc, #188]	@ (800e608 <xTaskPriorityDisinherit+0xd4>)
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	693a      	ldr	r2, [r7, #16]
 800e550:	429a      	cmp	r2, r3
 800e552:	d00b      	beq.n	800e56c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800e554:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e558:	f383 8811 	msr	BASEPRI, r3
 800e55c:	f3bf 8f6f 	isb	sy
 800e560:	f3bf 8f4f 	dsb	sy
 800e564:	60fb      	str	r3, [r7, #12]
}
 800e566:	bf00      	nop
 800e568:	bf00      	nop
 800e56a:	e7fd      	b.n	800e568 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e56c:	693b      	ldr	r3, [r7, #16]
 800e56e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e570:	2b00      	cmp	r3, #0
 800e572:	d10b      	bne.n	800e58c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800e574:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e578:	f383 8811 	msr	BASEPRI, r3
 800e57c:	f3bf 8f6f 	isb	sy
 800e580:	f3bf 8f4f 	dsb	sy
 800e584:	60bb      	str	r3, [r7, #8]
}
 800e586:	bf00      	nop
 800e588:	bf00      	nop
 800e58a:	e7fd      	b.n	800e588 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800e58c:	693b      	ldr	r3, [r7, #16]
 800e58e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e590:	1e5a      	subs	r2, r3, #1
 800e592:	693b      	ldr	r3, [r7, #16]
 800e594:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e596:	693b      	ldr	r3, [r7, #16]
 800e598:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e59a:	693b      	ldr	r3, [r7, #16]
 800e59c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e59e:	429a      	cmp	r2, r3
 800e5a0:	d02c      	beq.n	800e5fc <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e5a2:	693b      	ldr	r3, [r7, #16]
 800e5a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d128      	bne.n	800e5fc <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e5aa:	693b      	ldr	r3, [r7, #16]
 800e5ac:	3304      	adds	r3, #4
 800e5ae:	4618      	mov	r0, r3
 800e5b0:	f7fe f87e 	bl	800c6b0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e5b4:	693b      	ldr	r3, [r7, #16]
 800e5b6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e5b8:	693b      	ldr	r3, [r7, #16]
 800e5ba:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e5bc:	693b      	ldr	r3, [r7, #16]
 800e5be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e5c0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800e5c4:	693b      	ldr	r3, [r7, #16]
 800e5c6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e5c8:	693b      	ldr	r3, [r7, #16]
 800e5ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e5cc:	4b0f      	ldr	r3, [pc, #60]	@ (800e60c <xTaskPriorityDisinherit+0xd8>)
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	429a      	cmp	r2, r3
 800e5d2:	d903      	bls.n	800e5dc <xTaskPriorityDisinherit+0xa8>
 800e5d4:	693b      	ldr	r3, [r7, #16]
 800e5d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e5d8:	4a0c      	ldr	r2, [pc, #48]	@ (800e60c <xTaskPriorityDisinherit+0xd8>)
 800e5da:	6013      	str	r3, [r2, #0]
 800e5dc:	693b      	ldr	r3, [r7, #16]
 800e5de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e5e0:	4613      	mov	r3, r2
 800e5e2:	009b      	lsls	r3, r3, #2
 800e5e4:	4413      	add	r3, r2
 800e5e6:	009b      	lsls	r3, r3, #2
 800e5e8:	4a09      	ldr	r2, [pc, #36]	@ (800e610 <xTaskPriorityDisinherit+0xdc>)
 800e5ea:	441a      	add	r2, r3
 800e5ec:	693b      	ldr	r3, [r7, #16]
 800e5ee:	3304      	adds	r3, #4
 800e5f0:	4619      	mov	r1, r3
 800e5f2:	4610      	mov	r0, r2
 800e5f4:	f7fd ffff 	bl	800c5f6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e5f8:	2301      	movs	r3, #1
 800e5fa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e5fc:	697b      	ldr	r3, [r7, #20]
	}
 800e5fe:	4618      	mov	r0, r3
 800e600:	3718      	adds	r7, #24
 800e602:	46bd      	mov	sp, r7
 800e604:	bd80      	pop	{r7, pc}
 800e606:	bf00      	nop
 800e608:	20000e24 	.word	0x20000e24
 800e60c:	20001300 	.word	0x20001300
 800e610:	20000e28 	.word	0x20000e28

0800e614 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800e614:	b580      	push	{r7, lr}
 800e616:	b088      	sub	sp, #32
 800e618:	af00      	add	r7, sp, #0
 800e61a:	6078      	str	r0, [r7, #4]
 800e61c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800e622:	2301      	movs	r3, #1
 800e624:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d06c      	beq.n	800e706 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800e62c:	69bb      	ldr	r3, [r7, #24]
 800e62e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e630:	2b00      	cmp	r3, #0
 800e632:	d10b      	bne.n	800e64c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800e634:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e638:	f383 8811 	msr	BASEPRI, r3
 800e63c:	f3bf 8f6f 	isb	sy
 800e640:	f3bf 8f4f 	dsb	sy
 800e644:	60fb      	str	r3, [r7, #12]
}
 800e646:	bf00      	nop
 800e648:	bf00      	nop
 800e64a:	e7fd      	b.n	800e648 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800e64c:	69bb      	ldr	r3, [r7, #24]
 800e64e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e650:	683a      	ldr	r2, [r7, #0]
 800e652:	429a      	cmp	r2, r3
 800e654:	d902      	bls.n	800e65c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800e656:	683b      	ldr	r3, [r7, #0]
 800e658:	61fb      	str	r3, [r7, #28]
 800e65a:	e002      	b.n	800e662 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800e65c:	69bb      	ldr	r3, [r7, #24]
 800e65e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e660:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800e662:	69bb      	ldr	r3, [r7, #24]
 800e664:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e666:	69fa      	ldr	r2, [r7, #28]
 800e668:	429a      	cmp	r2, r3
 800e66a:	d04c      	beq.n	800e706 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e66c:	69bb      	ldr	r3, [r7, #24]
 800e66e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e670:	697a      	ldr	r2, [r7, #20]
 800e672:	429a      	cmp	r2, r3
 800e674:	d147      	bne.n	800e706 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800e676:	4b26      	ldr	r3, [pc, #152]	@ (800e710 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	69ba      	ldr	r2, [r7, #24]
 800e67c:	429a      	cmp	r2, r3
 800e67e:	d10b      	bne.n	800e698 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800e680:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e684:	f383 8811 	msr	BASEPRI, r3
 800e688:	f3bf 8f6f 	isb	sy
 800e68c:	f3bf 8f4f 	dsb	sy
 800e690:	60bb      	str	r3, [r7, #8]
}
 800e692:	bf00      	nop
 800e694:	bf00      	nop
 800e696:	e7fd      	b.n	800e694 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e698:	69bb      	ldr	r3, [r7, #24]
 800e69a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e69c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800e69e:	69bb      	ldr	r3, [r7, #24]
 800e6a0:	69fa      	ldr	r2, [r7, #28]
 800e6a2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e6a4:	69bb      	ldr	r3, [r7, #24]
 800e6a6:	699b      	ldr	r3, [r3, #24]
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	db04      	blt.n	800e6b6 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e6ac:	69fb      	ldr	r3, [r7, #28]
 800e6ae:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800e6b2:	69bb      	ldr	r3, [r7, #24]
 800e6b4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e6b6:	69bb      	ldr	r3, [r7, #24]
 800e6b8:	6959      	ldr	r1, [r3, #20]
 800e6ba:	693a      	ldr	r2, [r7, #16]
 800e6bc:	4613      	mov	r3, r2
 800e6be:	009b      	lsls	r3, r3, #2
 800e6c0:	4413      	add	r3, r2
 800e6c2:	009b      	lsls	r3, r3, #2
 800e6c4:	4a13      	ldr	r2, [pc, #76]	@ (800e714 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800e6c6:	4413      	add	r3, r2
 800e6c8:	4299      	cmp	r1, r3
 800e6ca:	d11c      	bne.n	800e706 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e6cc:	69bb      	ldr	r3, [r7, #24]
 800e6ce:	3304      	adds	r3, #4
 800e6d0:	4618      	mov	r0, r3
 800e6d2:	f7fd ffed 	bl	800c6b0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800e6d6:	69bb      	ldr	r3, [r7, #24]
 800e6d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e6da:	4b0f      	ldr	r3, [pc, #60]	@ (800e718 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	429a      	cmp	r2, r3
 800e6e0:	d903      	bls.n	800e6ea <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800e6e2:	69bb      	ldr	r3, [r7, #24]
 800e6e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e6e6:	4a0c      	ldr	r2, [pc, #48]	@ (800e718 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800e6e8:	6013      	str	r3, [r2, #0]
 800e6ea:	69bb      	ldr	r3, [r7, #24]
 800e6ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e6ee:	4613      	mov	r3, r2
 800e6f0:	009b      	lsls	r3, r3, #2
 800e6f2:	4413      	add	r3, r2
 800e6f4:	009b      	lsls	r3, r3, #2
 800e6f6:	4a07      	ldr	r2, [pc, #28]	@ (800e714 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800e6f8:	441a      	add	r2, r3
 800e6fa:	69bb      	ldr	r3, [r7, #24]
 800e6fc:	3304      	adds	r3, #4
 800e6fe:	4619      	mov	r1, r3
 800e700:	4610      	mov	r0, r2
 800e702:	f7fd ff78 	bl	800c5f6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e706:	bf00      	nop
 800e708:	3720      	adds	r7, #32
 800e70a:	46bd      	mov	sp, r7
 800e70c:	bd80      	pop	{r7, pc}
 800e70e:	bf00      	nop
 800e710:	20000e24 	.word	0x20000e24
 800e714:	20000e28 	.word	0x20000e28
 800e718:	20001300 	.word	0x20001300

0800e71c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800e71c:	b480      	push	{r7}
 800e71e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800e720:	4b07      	ldr	r3, [pc, #28]	@ (800e740 <pvTaskIncrementMutexHeldCount+0x24>)
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	2b00      	cmp	r3, #0
 800e726:	d004      	beq.n	800e732 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800e728:	4b05      	ldr	r3, [pc, #20]	@ (800e740 <pvTaskIncrementMutexHeldCount+0x24>)
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e72e:	3201      	adds	r2, #1
 800e730:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800e732:	4b03      	ldr	r3, [pc, #12]	@ (800e740 <pvTaskIncrementMutexHeldCount+0x24>)
 800e734:	681b      	ldr	r3, [r3, #0]
	}
 800e736:	4618      	mov	r0, r3
 800e738:	46bd      	mov	sp, r7
 800e73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e73e:	4770      	bx	lr
 800e740:	20000e24 	.word	0x20000e24

0800e744 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e744:	b580      	push	{r7, lr}
 800e746:	b084      	sub	sp, #16
 800e748:	af00      	add	r7, sp, #0
 800e74a:	6078      	str	r0, [r7, #4]
 800e74c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e74e:	4b21      	ldr	r3, [pc, #132]	@ (800e7d4 <prvAddCurrentTaskToDelayedList+0x90>)
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e754:	4b20      	ldr	r3, [pc, #128]	@ (800e7d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	3304      	adds	r3, #4
 800e75a:	4618      	mov	r0, r3
 800e75c:	f7fd ffa8 	bl	800c6b0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e766:	d10a      	bne.n	800e77e <prvAddCurrentTaskToDelayedList+0x3a>
 800e768:	683b      	ldr	r3, [r7, #0]
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d007      	beq.n	800e77e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e76e:	4b1a      	ldr	r3, [pc, #104]	@ (800e7d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800e770:	681b      	ldr	r3, [r3, #0]
 800e772:	3304      	adds	r3, #4
 800e774:	4619      	mov	r1, r3
 800e776:	4819      	ldr	r0, [pc, #100]	@ (800e7dc <prvAddCurrentTaskToDelayedList+0x98>)
 800e778:	f7fd ff3d 	bl	800c5f6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e77c:	e026      	b.n	800e7cc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e77e:	68fa      	ldr	r2, [r7, #12]
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	4413      	add	r3, r2
 800e784:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e786:	4b14      	ldr	r3, [pc, #80]	@ (800e7d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	68ba      	ldr	r2, [r7, #8]
 800e78c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e78e:	68ba      	ldr	r2, [r7, #8]
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	429a      	cmp	r2, r3
 800e794:	d209      	bcs.n	800e7aa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e796:	4b12      	ldr	r3, [pc, #72]	@ (800e7e0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800e798:	681a      	ldr	r2, [r3, #0]
 800e79a:	4b0f      	ldr	r3, [pc, #60]	@ (800e7d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	3304      	adds	r3, #4
 800e7a0:	4619      	mov	r1, r3
 800e7a2:	4610      	mov	r0, r2
 800e7a4:	f7fd ff4b 	bl	800c63e <vListInsert>
}
 800e7a8:	e010      	b.n	800e7cc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e7aa:	4b0e      	ldr	r3, [pc, #56]	@ (800e7e4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800e7ac:	681a      	ldr	r2, [r3, #0]
 800e7ae:	4b0a      	ldr	r3, [pc, #40]	@ (800e7d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	3304      	adds	r3, #4
 800e7b4:	4619      	mov	r1, r3
 800e7b6:	4610      	mov	r0, r2
 800e7b8:	f7fd ff41 	bl	800c63e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e7bc:	4b0a      	ldr	r3, [pc, #40]	@ (800e7e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	68ba      	ldr	r2, [r7, #8]
 800e7c2:	429a      	cmp	r2, r3
 800e7c4:	d202      	bcs.n	800e7cc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800e7c6:	4a08      	ldr	r2, [pc, #32]	@ (800e7e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e7c8:	68bb      	ldr	r3, [r7, #8]
 800e7ca:	6013      	str	r3, [r2, #0]
}
 800e7cc:	bf00      	nop
 800e7ce:	3710      	adds	r7, #16
 800e7d0:	46bd      	mov	sp, r7
 800e7d2:	bd80      	pop	{r7, pc}
 800e7d4:	200012fc 	.word	0x200012fc
 800e7d8:	20000e24 	.word	0x20000e24
 800e7dc:	200012e4 	.word	0x200012e4
 800e7e0:	200012b4 	.word	0x200012b4
 800e7e4:	200012b0 	.word	0x200012b0
 800e7e8:	20001318 	.word	0x20001318

0800e7ec <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e7ec:	b580      	push	{r7, lr}
 800e7ee:	b08a      	sub	sp, #40	@ 0x28
 800e7f0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e7f2:	2300      	movs	r3, #0
 800e7f4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e7f6:	f000 fb13 	bl	800ee20 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e7fa:	4b1d      	ldr	r3, [pc, #116]	@ (800e870 <xTimerCreateTimerTask+0x84>)
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d021      	beq.n	800e846 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e802:	2300      	movs	r3, #0
 800e804:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e806:	2300      	movs	r3, #0
 800e808:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e80a:	1d3a      	adds	r2, r7, #4
 800e80c:	f107 0108 	add.w	r1, r7, #8
 800e810:	f107 030c 	add.w	r3, r7, #12
 800e814:	4618      	mov	r0, r3
 800e816:	f7fd fea7 	bl	800c568 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e81a:	6879      	ldr	r1, [r7, #4]
 800e81c:	68bb      	ldr	r3, [r7, #8]
 800e81e:	68fa      	ldr	r2, [r7, #12]
 800e820:	9202      	str	r2, [sp, #8]
 800e822:	9301      	str	r3, [sp, #4]
 800e824:	2302      	movs	r3, #2
 800e826:	9300      	str	r3, [sp, #0]
 800e828:	2300      	movs	r3, #0
 800e82a:	460a      	mov	r2, r1
 800e82c:	4911      	ldr	r1, [pc, #68]	@ (800e874 <xTimerCreateTimerTask+0x88>)
 800e82e:	4812      	ldr	r0, [pc, #72]	@ (800e878 <xTimerCreateTimerTask+0x8c>)
 800e830:	f7fe ff00 	bl	800d634 <xTaskCreateStatic>
 800e834:	4603      	mov	r3, r0
 800e836:	4a11      	ldr	r2, [pc, #68]	@ (800e87c <xTimerCreateTimerTask+0x90>)
 800e838:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e83a:	4b10      	ldr	r3, [pc, #64]	@ (800e87c <xTimerCreateTimerTask+0x90>)
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d001      	beq.n	800e846 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800e842:	2301      	movs	r3, #1
 800e844:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e846:	697b      	ldr	r3, [r7, #20]
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d10b      	bne.n	800e864 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800e84c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e850:	f383 8811 	msr	BASEPRI, r3
 800e854:	f3bf 8f6f 	isb	sy
 800e858:	f3bf 8f4f 	dsb	sy
 800e85c:	613b      	str	r3, [r7, #16]
}
 800e85e:	bf00      	nop
 800e860:	bf00      	nop
 800e862:	e7fd      	b.n	800e860 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800e864:	697b      	ldr	r3, [r7, #20]
}
 800e866:	4618      	mov	r0, r3
 800e868:	3718      	adds	r7, #24
 800e86a:	46bd      	mov	sp, r7
 800e86c:	bd80      	pop	{r7, pc}
 800e86e:	bf00      	nop
 800e870:	20001354 	.word	0x20001354
 800e874:	08013e44 	.word	0x08013e44
 800e878:	0800e9b9 	.word	0x0800e9b9
 800e87c:	20001358 	.word	0x20001358

0800e880 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e880:	b580      	push	{r7, lr}
 800e882:	b08a      	sub	sp, #40	@ 0x28
 800e884:	af00      	add	r7, sp, #0
 800e886:	60f8      	str	r0, [r7, #12]
 800e888:	60b9      	str	r1, [r7, #8]
 800e88a:	607a      	str	r2, [r7, #4]
 800e88c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e88e:	2300      	movs	r3, #0
 800e890:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e892:	68fb      	ldr	r3, [r7, #12]
 800e894:	2b00      	cmp	r3, #0
 800e896:	d10b      	bne.n	800e8b0 <xTimerGenericCommand+0x30>
	__asm volatile
 800e898:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e89c:	f383 8811 	msr	BASEPRI, r3
 800e8a0:	f3bf 8f6f 	isb	sy
 800e8a4:	f3bf 8f4f 	dsb	sy
 800e8a8:	623b      	str	r3, [r7, #32]
}
 800e8aa:	bf00      	nop
 800e8ac:	bf00      	nop
 800e8ae:	e7fd      	b.n	800e8ac <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e8b0:	4b19      	ldr	r3, [pc, #100]	@ (800e918 <xTimerGenericCommand+0x98>)
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d02a      	beq.n	800e90e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e8b8:	68bb      	ldr	r3, [r7, #8]
 800e8ba:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e8c4:	68bb      	ldr	r3, [r7, #8]
 800e8c6:	2b05      	cmp	r3, #5
 800e8c8:	dc18      	bgt.n	800e8fc <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e8ca:	f7ff fdad 	bl	800e428 <xTaskGetSchedulerState>
 800e8ce:	4603      	mov	r3, r0
 800e8d0:	2b02      	cmp	r3, #2
 800e8d2:	d109      	bne.n	800e8e8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e8d4:	4b10      	ldr	r3, [pc, #64]	@ (800e918 <xTimerGenericCommand+0x98>)
 800e8d6:	6818      	ldr	r0, [r3, #0]
 800e8d8:	f107 0110 	add.w	r1, r7, #16
 800e8dc:	2300      	movs	r3, #0
 800e8de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e8e0:	f7fe f90e 	bl	800cb00 <xQueueGenericSend>
 800e8e4:	6278      	str	r0, [r7, #36]	@ 0x24
 800e8e6:	e012      	b.n	800e90e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e8e8:	4b0b      	ldr	r3, [pc, #44]	@ (800e918 <xTimerGenericCommand+0x98>)
 800e8ea:	6818      	ldr	r0, [r3, #0]
 800e8ec:	f107 0110 	add.w	r1, r7, #16
 800e8f0:	2300      	movs	r3, #0
 800e8f2:	2200      	movs	r2, #0
 800e8f4:	f7fe f904 	bl	800cb00 <xQueueGenericSend>
 800e8f8:	6278      	str	r0, [r7, #36]	@ 0x24
 800e8fa:	e008      	b.n	800e90e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e8fc:	4b06      	ldr	r3, [pc, #24]	@ (800e918 <xTimerGenericCommand+0x98>)
 800e8fe:	6818      	ldr	r0, [r3, #0]
 800e900:	f107 0110 	add.w	r1, r7, #16
 800e904:	2300      	movs	r3, #0
 800e906:	683a      	ldr	r2, [r7, #0]
 800e908:	f7fe f9fc 	bl	800cd04 <xQueueGenericSendFromISR>
 800e90c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800e90e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800e910:	4618      	mov	r0, r3
 800e912:	3728      	adds	r7, #40	@ 0x28
 800e914:	46bd      	mov	sp, r7
 800e916:	bd80      	pop	{r7, pc}
 800e918:	20001354 	.word	0x20001354

0800e91c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800e91c:	b580      	push	{r7, lr}
 800e91e:	b088      	sub	sp, #32
 800e920:	af02      	add	r7, sp, #8
 800e922:	6078      	str	r0, [r7, #4]
 800e924:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e926:	4b23      	ldr	r3, [pc, #140]	@ (800e9b4 <prvProcessExpiredTimer+0x98>)
 800e928:	681b      	ldr	r3, [r3, #0]
 800e92a:	68db      	ldr	r3, [r3, #12]
 800e92c:	68db      	ldr	r3, [r3, #12]
 800e92e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e930:	697b      	ldr	r3, [r7, #20]
 800e932:	3304      	adds	r3, #4
 800e934:	4618      	mov	r0, r3
 800e936:	f7fd febb 	bl	800c6b0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e93a:	697b      	ldr	r3, [r7, #20]
 800e93c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e940:	f003 0304 	and.w	r3, r3, #4
 800e944:	2b00      	cmp	r3, #0
 800e946:	d023      	beq.n	800e990 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e948:	697b      	ldr	r3, [r7, #20]
 800e94a:	699a      	ldr	r2, [r3, #24]
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	18d1      	adds	r1, r2, r3
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	683a      	ldr	r2, [r7, #0]
 800e954:	6978      	ldr	r0, [r7, #20]
 800e956:	f000 f8d5 	bl	800eb04 <prvInsertTimerInActiveList>
 800e95a:	4603      	mov	r3, r0
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d020      	beq.n	800e9a2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e960:	2300      	movs	r3, #0
 800e962:	9300      	str	r3, [sp, #0]
 800e964:	2300      	movs	r3, #0
 800e966:	687a      	ldr	r2, [r7, #4]
 800e968:	2100      	movs	r1, #0
 800e96a:	6978      	ldr	r0, [r7, #20]
 800e96c:	f7ff ff88 	bl	800e880 <xTimerGenericCommand>
 800e970:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800e972:	693b      	ldr	r3, [r7, #16]
 800e974:	2b00      	cmp	r3, #0
 800e976:	d114      	bne.n	800e9a2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800e978:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e97c:	f383 8811 	msr	BASEPRI, r3
 800e980:	f3bf 8f6f 	isb	sy
 800e984:	f3bf 8f4f 	dsb	sy
 800e988:	60fb      	str	r3, [r7, #12]
}
 800e98a:	bf00      	nop
 800e98c:	bf00      	nop
 800e98e:	e7fd      	b.n	800e98c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e990:	697b      	ldr	r3, [r7, #20]
 800e992:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e996:	f023 0301 	bic.w	r3, r3, #1
 800e99a:	b2da      	uxtb	r2, r3
 800e99c:	697b      	ldr	r3, [r7, #20]
 800e99e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e9a2:	697b      	ldr	r3, [r7, #20]
 800e9a4:	6a1b      	ldr	r3, [r3, #32]
 800e9a6:	6978      	ldr	r0, [r7, #20]
 800e9a8:	4798      	blx	r3
}
 800e9aa:	bf00      	nop
 800e9ac:	3718      	adds	r7, #24
 800e9ae:	46bd      	mov	sp, r7
 800e9b0:	bd80      	pop	{r7, pc}
 800e9b2:	bf00      	nop
 800e9b4:	2000134c 	.word	0x2000134c

0800e9b8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800e9b8:	b580      	push	{r7, lr}
 800e9ba:	b084      	sub	sp, #16
 800e9bc:	af00      	add	r7, sp, #0
 800e9be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e9c0:	f107 0308 	add.w	r3, r7, #8
 800e9c4:	4618      	mov	r0, r3
 800e9c6:	f000 f859 	bl	800ea7c <prvGetNextExpireTime>
 800e9ca:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e9cc:	68bb      	ldr	r3, [r7, #8]
 800e9ce:	4619      	mov	r1, r3
 800e9d0:	68f8      	ldr	r0, [r7, #12]
 800e9d2:	f000 f805 	bl	800e9e0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e9d6:	f000 f8d7 	bl	800eb88 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e9da:	bf00      	nop
 800e9dc:	e7f0      	b.n	800e9c0 <prvTimerTask+0x8>
	...

0800e9e0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e9e0:	b580      	push	{r7, lr}
 800e9e2:	b084      	sub	sp, #16
 800e9e4:	af00      	add	r7, sp, #0
 800e9e6:	6078      	str	r0, [r7, #4]
 800e9e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e9ea:	f7ff f907 	bl	800dbfc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e9ee:	f107 0308 	add.w	r3, r7, #8
 800e9f2:	4618      	mov	r0, r3
 800e9f4:	f000 f866 	bl	800eac4 <prvSampleTimeNow>
 800e9f8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e9fa:	68bb      	ldr	r3, [r7, #8]
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d130      	bne.n	800ea62 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ea00:	683b      	ldr	r3, [r7, #0]
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d10a      	bne.n	800ea1c <prvProcessTimerOrBlockTask+0x3c>
 800ea06:	687a      	ldr	r2, [r7, #4]
 800ea08:	68fb      	ldr	r3, [r7, #12]
 800ea0a:	429a      	cmp	r2, r3
 800ea0c:	d806      	bhi.n	800ea1c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ea0e:	f7ff f903 	bl	800dc18 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ea12:	68f9      	ldr	r1, [r7, #12]
 800ea14:	6878      	ldr	r0, [r7, #4]
 800ea16:	f7ff ff81 	bl	800e91c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ea1a:	e024      	b.n	800ea66 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ea1c:	683b      	ldr	r3, [r7, #0]
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d008      	beq.n	800ea34 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ea22:	4b13      	ldr	r3, [pc, #76]	@ (800ea70 <prvProcessTimerOrBlockTask+0x90>)
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d101      	bne.n	800ea30 <prvProcessTimerOrBlockTask+0x50>
 800ea2c:	2301      	movs	r3, #1
 800ea2e:	e000      	b.n	800ea32 <prvProcessTimerOrBlockTask+0x52>
 800ea30:	2300      	movs	r3, #0
 800ea32:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ea34:	4b0f      	ldr	r3, [pc, #60]	@ (800ea74 <prvProcessTimerOrBlockTask+0x94>)
 800ea36:	6818      	ldr	r0, [r3, #0]
 800ea38:	687a      	ldr	r2, [r7, #4]
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	1ad3      	subs	r3, r2, r3
 800ea3e:	683a      	ldr	r2, [r7, #0]
 800ea40:	4619      	mov	r1, r3
 800ea42:	f7fe fdc3 	bl	800d5cc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ea46:	f7ff f8e7 	bl	800dc18 <xTaskResumeAll>
 800ea4a:	4603      	mov	r3, r0
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	d10a      	bne.n	800ea66 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ea50:	4b09      	ldr	r3, [pc, #36]	@ (800ea78 <prvProcessTimerOrBlockTask+0x98>)
 800ea52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ea56:	601a      	str	r2, [r3, #0]
 800ea58:	f3bf 8f4f 	dsb	sy
 800ea5c:	f3bf 8f6f 	isb	sy
}
 800ea60:	e001      	b.n	800ea66 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ea62:	f7ff f8d9 	bl	800dc18 <xTaskResumeAll>
}
 800ea66:	bf00      	nop
 800ea68:	3710      	adds	r7, #16
 800ea6a:	46bd      	mov	sp, r7
 800ea6c:	bd80      	pop	{r7, pc}
 800ea6e:	bf00      	nop
 800ea70:	20001350 	.word	0x20001350
 800ea74:	20001354 	.word	0x20001354
 800ea78:	e000ed04 	.word	0xe000ed04

0800ea7c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ea7c:	b480      	push	{r7}
 800ea7e:	b085      	sub	sp, #20
 800ea80:	af00      	add	r7, sp, #0
 800ea82:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ea84:	4b0e      	ldr	r3, [pc, #56]	@ (800eac0 <prvGetNextExpireTime+0x44>)
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d101      	bne.n	800ea92 <prvGetNextExpireTime+0x16>
 800ea8e:	2201      	movs	r2, #1
 800ea90:	e000      	b.n	800ea94 <prvGetNextExpireTime+0x18>
 800ea92:	2200      	movs	r2, #0
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d105      	bne.n	800eaac <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800eaa0:	4b07      	ldr	r3, [pc, #28]	@ (800eac0 <prvGetNextExpireTime+0x44>)
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	68db      	ldr	r3, [r3, #12]
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	60fb      	str	r3, [r7, #12]
 800eaaa:	e001      	b.n	800eab0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800eaac:	2300      	movs	r3, #0
 800eaae:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800eab0:	68fb      	ldr	r3, [r7, #12]
}
 800eab2:	4618      	mov	r0, r3
 800eab4:	3714      	adds	r7, #20
 800eab6:	46bd      	mov	sp, r7
 800eab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eabc:	4770      	bx	lr
 800eabe:	bf00      	nop
 800eac0:	2000134c 	.word	0x2000134c

0800eac4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800eac4:	b580      	push	{r7, lr}
 800eac6:	b084      	sub	sp, #16
 800eac8:	af00      	add	r7, sp, #0
 800eaca:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800eacc:	f7ff f942 	bl	800dd54 <xTaskGetTickCount>
 800ead0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ead2:	4b0b      	ldr	r3, [pc, #44]	@ (800eb00 <prvSampleTimeNow+0x3c>)
 800ead4:	681b      	ldr	r3, [r3, #0]
 800ead6:	68fa      	ldr	r2, [r7, #12]
 800ead8:	429a      	cmp	r2, r3
 800eada:	d205      	bcs.n	800eae8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800eadc:	f000 f93a 	bl	800ed54 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	2201      	movs	r2, #1
 800eae4:	601a      	str	r2, [r3, #0]
 800eae6:	e002      	b.n	800eaee <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	2200      	movs	r2, #0
 800eaec:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800eaee:	4a04      	ldr	r2, [pc, #16]	@ (800eb00 <prvSampleTimeNow+0x3c>)
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800eaf4:	68fb      	ldr	r3, [r7, #12]
}
 800eaf6:	4618      	mov	r0, r3
 800eaf8:	3710      	adds	r7, #16
 800eafa:	46bd      	mov	sp, r7
 800eafc:	bd80      	pop	{r7, pc}
 800eafe:	bf00      	nop
 800eb00:	2000135c 	.word	0x2000135c

0800eb04 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800eb04:	b580      	push	{r7, lr}
 800eb06:	b086      	sub	sp, #24
 800eb08:	af00      	add	r7, sp, #0
 800eb0a:	60f8      	str	r0, [r7, #12]
 800eb0c:	60b9      	str	r1, [r7, #8]
 800eb0e:	607a      	str	r2, [r7, #4]
 800eb10:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800eb12:	2300      	movs	r3, #0
 800eb14:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	68ba      	ldr	r2, [r7, #8]
 800eb1a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	68fa      	ldr	r2, [r7, #12]
 800eb20:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800eb22:	68ba      	ldr	r2, [r7, #8]
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	429a      	cmp	r2, r3
 800eb28:	d812      	bhi.n	800eb50 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eb2a:	687a      	ldr	r2, [r7, #4]
 800eb2c:	683b      	ldr	r3, [r7, #0]
 800eb2e:	1ad2      	subs	r2, r2, r3
 800eb30:	68fb      	ldr	r3, [r7, #12]
 800eb32:	699b      	ldr	r3, [r3, #24]
 800eb34:	429a      	cmp	r2, r3
 800eb36:	d302      	bcc.n	800eb3e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800eb38:	2301      	movs	r3, #1
 800eb3a:	617b      	str	r3, [r7, #20]
 800eb3c:	e01b      	b.n	800eb76 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800eb3e:	4b10      	ldr	r3, [pc, #64]	@ (800eb80 <prvInsertTimerInActiveList+0x7c>)
 800eb40:	681a      	ldr	r2, [r3, #0]
 800eb42:	68fb      	ldr	r3, [r7, #12]
 800eb44:	3304      	adds	r3, #4
 800eb46:	4619      	mov	r1, r3
 800eb48:	4610      	mov	r0, r2
 800eb4a:	f7fd fd78 	bl	800c63e <vListInsert>
 800eb4e:	e012      	b.n	800eb76 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800eb50:	687a      	ldr	r2, [r7, #4]
 800eb52:	683b      	ldr	r3, [r7, #0]
 800eb54:	429a      	cmp	r2, r3
 800eb56:	d206      	bcs.n	800eb66 <prvInsertTimerInActiveList+0x62>
 800eb58:	68ba      	ldr	r2, [r7, #8]
 800eb5a:	683b      	ldr	r3, [r7, #0]
 800eb5c:	429a      	cmp	r2, r3
 800eb5e:	d302      	bcc.n	800eb66 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800eb60:	2301      	movs	r3, #1
 800eb62:	617b      	str	r3, [r7, #20]
 800eb64:	e007      	b.n	800eb76 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800eb66:	4b07      	ldr	r3, [pc, #28]	@ (800eb84 <prvInsertTimerInActiveList+0x80>)
 800eb68:	681a      	ldr	r2, [r3, #0]
 800eb6a:	68fb      	ldr	r3, [r7, #12]
 800eb6c:	3304      	adds	r3, #4
 800eb6e:	4619      	mov	r1, r3
 800eb70:	4610      	mov	r0, r2
 800eb72:	f7fd fd64 	bl	800c63e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800eb76:	697b      	ldr	r3, [r7, #20]
}
 800eb78:	4618      	mov	r0, r3
 800eb7a:	3718      	adds	r7, #24
 800eb7c:	46bd      	mov	sp, r7
 800eb7e:	bd80      	pop	{r7, pc}
 800eb80:	20001350 	.word	0x20001350
 800eb84:	2000134c 	.word	0x2000134c

0800eb88 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800eb88:	b580      	push	{r7, lr}
 800eb8a:	b08e      	sub	sp, #56	@ 0x38
 800eb8c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800eb8e:	e0ce      	b.n	800ed2e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	da19      	bge.n	800ebca <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800eb96:	1d3b      	adds	r3, r7, #4
 800eb98:	3304      	adds	r3, #4
 800eb9a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800eb9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d10b      	bne.n	800ebba <prvProcessReceivedCommands+0x32>
	__asm volatile
 800eba2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eba6:	f383 8811 	msr	BASEPRI, r3
 800ebaa:	f3bf 8f6f 	isb	sy
 800ebae:	f3bf 8f4f 	dsb	sy
 800ebb2:	61fb      	str	r3, [r7, #28]
}
 800ebb4:	bf00      	nop
 800ebb6:	bf00      	nop
 800ebb8:	e7fd      	b.n	800ebb6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ebba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ebbc:	681b      	ldr	r3, [r3, #0]
 800ebbe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ebc0:	6850      	ldr	r0, [r2, #4]
 800ebc2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ebc4:	6892      	ldr	r2, [r2, #8]
 800ebc6:	4611      	mov	r1, r2
 800ebc8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	f2c0 80ae 	blt.w	800ed2e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ebd2:	68fb      	ldr	r3, [r7, #12]
 800ebd4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ebd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ebd8:	695b      	ldr	r3, [r3, #20]
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d004      	beq.n	800ebe8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ebde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ebe0:	3304      	adds	r3, #4
 800ebe2:	4618      	mov	r0, r3
 800ebe4:	f7fd fd64 	bl	800c6b0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ebe8:	463b      	mov	r3, r7
 800ebea:	4618      	mov	r0, r3
 800ebec:	f7ff ff6a 	bl	800eac4 <prvSampleTimeNow>
 800ebf0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	2b09      	cmp	r3, #9
 800ebf6:	f200 8097 	bhi.w	800ed28 <prvProcessReceivedCommands+0x1a0>
 800ebfa:	a201      	add	r2, pc, #4	@ (adr r2, 800ec00 <prvProcessReceivedCommands+0x78>)
 800ebfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec00:	0800ec29 	.word	0x0800ec29
 800ec04:	0800ec29 	.word	0x0800ec29
 800ec08:	0800ec29 	.word	0x0800ec29
 800ec0c:	0800ec9f 	.word	0x0800ec9f
 800ec10:	0800ecb3 	.word	0x0800ecb3
 800ec14:	0800ecff 	.word	0x0800ecff
 800ec18:	0800ec29 	.word	0x0800ec29
 800ec1c:	0800ec29 	.word	0x0800ec29
 800ec20:	0800ec9f 	.word	0x0800ec9f
 800ec24:	0800ecb3 	.word	0x0800ecb3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ec28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec2a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ec2e:	f043 0301 	orr.w	r3, r3, #1
 800ec32:	b2da      	uxtb	r2, r3
 800ec34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec36:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ec3a:	68ba      	ldr	r2, [r7, #8]
 800ec3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec3e:	699b      	ldr	r3, [r3, #24]
 800ec40:	18d1      	adds	r1, r2, r3
 800ec42:	68bb      	ldr	r3, [r7, #8]
 800ec44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ec46:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ec48:	f7ff ff5c 	bl	800eb04 <prvInsertTimerInActiveList>
 800ec4c:	4603      	mov	r3, r0
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d06c      	beq.n	800ed2c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ec52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec54:	6a1b      	ldr	r3, [r3, #32]
 800ec56:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ec58:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ec5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec5c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ec60:	f003 0304 	and.w	r3, r3, #4
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d061      	beq.n	800ed2c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ec68:	68ba      	ldr	r2, [r7, #8]
 800ec6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec6c:	699b      	ldr	r3, [r3, #24]
 800ec6e:	441a      	add	r2, r3
 800ec70:	2300      	movs	r3, #0
 800ec72:	9300      	str	r3, [sp, #0]
 800ec74:	2300      	movs	r3, #0
 800ec76:	2100      	movs	r1, #0
 800ec78:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ec7a:	f7ff fe01 	bl	800e880 <xTimerGenericCommand>
 800ec7e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ec80:	6a3b      	ldr	r3, [r7, #32]
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d152      	bne.n	800ed2c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800ec86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec8a:	f383 8811 	msr	BASEPRI, r3
 800ec8e:	f3bf 8f6f 	isb	sy
 800ec92:	f3bf 8f4f 	dsb	sy
 800ec96:	61bb      	str	r3, [r7, #24]
}
 800ec98:	bf00      	nop
 800ec9a:	bf00      	nop
 800ec9c:	e7fd      	b.n	800ec9a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ec9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eca0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800eca4:	f023 0301 	bic.w	r3, r3, #1
 800eca8:	b2da      	uxtb	r2, r3
 800ecaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ecac:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800ecb0:	e03d      	b.n	800ed2e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ecb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ecb4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ecb8:	f043 0301 	orr.w	r3, r3, #1
 800ecbc:	b2da      	uxtb	r2, r3
 800ecbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ecc0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ecc4:	68ba      	ldr	r2, [r7, #8]
 800ecc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ecc8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ecca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eccc:	699b      	ldr	r3, [r3, #24]
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d10b      	bne.n	800ecea <prvProcessReceivedCommands+0x162>
	__asm volatile
 800ecd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ecd6:	f383 8811 	msr	BASEPRI, r3
 800ecda:	f3bf 8f6f 	isb	sy
 800ecde:	f3bf 8f4f 	dsb	sy
 800ece2:	617b      	str	r3, [r7, #20]
}
 800ece4:	bf00      	nop
 800ece6:	bf00      	nop
 800ece8:	e7fd      	b.n	800ece6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ecea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ecec:	699a      	ldr	r2, [r3, #24]
 800ecee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ecf0:	18d1      	adds	r1, r2, r3
 800ecf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ecf4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ecf6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ecf8:	f7ff ff04 	bl	800eb04 <prvInsertTimerInActiveList>
					break;
 800ecfc:	e017      	b.n	800ed2e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ecfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed00:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ed04:	f003 0302 	and.w	r3, r3, #2
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d103      	bne.n	800ed14 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800ed0c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ed0e:	f000 fbeb 	bl	800f4e8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ed12:	e00c      	b.n	800ed2e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ed14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed16:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ed1a:	f023 0301 	bic.w	r3, r3, #1
 800ed1e:	b2da      	uxtb	r2, r3
 800ed20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed22:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800ed26:	e002      	b.n	800ed2e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800ed28:	bf00      	nop
 800ed2a:	e000      	b.n	800ed2e <prvProcessReceivedCommands+0x1a6>
					break;
 800ed2c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ed2e:	4b08      	ldr	r3, [pc, #32]	@ (800ed50 <prvProcessReceivedCommands+0x1c8>)
 800ed30:	681b      	ldr	r3, [r3, #0]
 800ed32:	1d39      	adds	r1, r7, #4
 800ed34:	2200      	movs	r2, #0
 800ed36:	4618      	mov	r0, r3
 800ed38:	f7fe f882 	bl	800ce40 <xQueueReceive>
 800ed3c:	4603      	mov	r3, r0
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	f47f af26 	bne.w	800eb90 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800ed44:	bf00      	nop
 800ed46:	bf00      	nop
 800ed48:	3730      	adds	r7, #48	@ 0x30
 800ed4a:	46bd      	mov	sp, r7
 800ed4c:	bd80      	pop	{r7, pc}
 800ed4e:	bf00      	nop
 800ed50:	20001354 	.word	0x20001354

0800ed54 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ed54:	b580      	push	{r7, lr}
 800ed56:	b088      	sub	sp, #32
 800ed58:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ed5a:	e049      	b.n	800edf0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ed5c:	4b2e      	ldr	r3, [pc, #184]	@ (800ee18 <prvSwitchTimerLists+0xc4>)
 800ed5e:	681b      	ldr	r3, [r3, #0]
 800ed60:	68db      	ldr	r3, [r3, #12]
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ed66:	4b2c      	ldr	r3, [pc, #176]	@ (800ee18 <prvSwitchTimerLists+0xc4>)
 800ed68:	681b      	ldr	r3, [r3, #0]
 800ed6a:	68db      	ldr	r3, [r3, #12]
 800ed6c:	68db      	ldr	r3, [r3, #12]
 800ed6e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	3304      	adds	r3, #4
 800ed74:	4618      	mov	r0, r3
 800ed76:	f7fd fc9b 	bl	800c6b0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ed7a:	68fb      	ldr	r3, [r7, #12]
 800ed7c:	6a1b      	ldr	r3, [r3, #32]
 800ed7e:	68f8      	ldr	r0, [r7, #12]
 800ed80:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ed88:	f003 0304 	and.w	r3, r3, #4
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d02f      	beq.n	800edf0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	699b      	ldr	r3, [r3, #24]
 800ed94:	693a      	ldr	r2, [r7, #16]
 800ed96:	4413      	add	r3, r2
 800ed98:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ed9a:	68ba      	ldr	r2, [r7, #8]
 800ed9c:	693b      	ldr	r3, [r7, #16]
 800ed9e:	429a      	cmp	r2, r3
 800eda0:	d90e      	bls.n	800edc0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	68ba      	ldr	r2, [r7, #8]
 800eda6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800eda8:	68fb      	ldr	r3, [r7, #12]
 800edaa:	68fa      	ldr	r2, [r7, #12]
 800edac:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800edae:	4b1a      	ldr	r3, [pc, #104]	@ (800ee18 <prvSwitchTimerLists+0xc4>)
 800edb0:	681a      	ldr	r2, [r3, #0]
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	3304      	adds	r3, #4
 800edb6:	4619      	mov	r1, r3
 800edb8:	4610      	mov	r0, r2
 800edba:	f7fd fc40 	bl	800c63e <vListInsert>
 800edbe:	e017      	b.n	800edf0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800edc0:	2300      	movs	r3, #0
 800edc2:	9300      	str	r3, [sp, #0]
 800edc4:	2300      	movs	r3, #0
 800edc6:	693a      	ldr	r2, [r7, #16]
 800edc8:	2100      	movs	r1, #0
 800edca:	68f8      	ldr	r0, [r7, #12]
 800edcc:	f7ff fd58 	bl	800e880 <xTimerGenericCommand>
 800edd0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d10b      	bne.n	800edf0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800edd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eddc:	f383 8811 	msr	BASEPRI, r3
 800ede0:	f3bf 8f6f 	isb	sy
 800ede4:	f3bf 8f4f 	dsb	sy
 800ede8:	603b      	str	r3, [r7, #0]
}
 800edea:	bf00      	nop
 800edec:	bf00      	nop
 800edee:	e7fd      	b.n	800edec <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800edf0:	4b09      	ldr	r3, [pc, #36]	@ (800ee18 <prvSwitchTimerLists+0xc4>)
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d1b0      	bne.n	800ed5c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800edfa:	4b07      	ldr	r3, [pc, #28]	@ (800ee18 <prvSwitchTimerLists+0xc4>)
 800edfc:	681b      	ldr	r3, [r3, #0]
 800edfe:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ee00:	4b06      	ldr	r3, [pc, #24]	@ (800ee1c <prvSwitchTimerLists+0xc8>)
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	4a04      	ldr	r2, [pc, #16]	@ (800ee18 <prvSwitchTimerLists+0xc4>)
 800ee06:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ee08:	4a04      	ldr	r2, [pc, #16]	@ (800ee1c <prvSwitchTimerLists+0xc8>)
 800ee0a:	697b      	ldr	r3, [r7, #20]
 800ee0c:	6013      	str	r3, [r2, #0]
}
 800ee0e:	bf00      	nop
 800ee10:	3718      	adds	r7, #24
 800ee12:	46bd      	mov	sp, r7
 800ee14:	bd80      	pop	{r7, pc}
 800ee16:	bf00      	nop
 800ee18:	2000134c 	.word	0x2000134c
 800ee1c:	20001350 	.word	0x20001350

0800ee20 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ee20:	b580      	push	{r7, lr}
 800ee22:	b082      	sub	sp, #8
 800ee24:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ee26:	f000 f96f 	bl	800f108 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ee2a:	4b15      	ldr	r3, [pc, #84]	@ (800ee80 <prvCheckForValidListAndQueue+0x60>)
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	d120      	bne.n	800ee74 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ee32:	4814      	ldr	r0, [pc, #80]	@ (800ee84 <prvCheckForValidListAndQueue+0x64>)
 800ee34:	f7fd fbb2 	bl	800c59c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ee38:	4813      	ldr	r0, [pc, #76]	@ (800ee88 <prvCheckForValidListAndQueue+0x68>)
 800ee3a:	f7fd fbaf 	bl	800c59c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ee3e:	4b13      	ldr	r3, [pc, #76]	@ (800ee8c <prvCheckForValidListAndQueue+0x6c>)
 800ee40:	4a10      	ldr	r2, [pc, #64]	@ (800ee84 <prvCheckForValidListAndQueue+0x64>)
 800ee42:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ee44:	4b12      	ldr	r3, [pc, #72]	@ (800ee90 <prvCheckForValidListAndQueue+0x70>)
 800ee46:	4a10      	ldr	r2, [pc, #64]	@ (800ee88 <prvCheckForValidListAndQueue+0x68>)
 800ee48:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ee4a:	2300      	movs	r3, #0
 800ee4c:	9300      	str	r3, [sp, #0]
 800ee4e:	4b11      	ldr	r3, [pc, #68]	@ (800ee94 <prvCheckForValidListAndQueue+0x74>)
 800ee50:	4a11      	ldr	r2, [pc, #68]	@ (800ee98 <prvCheckForValidListAndQueue+0x78>)
 800ee52:	2110      	movs	r1, #16
 800ee54:	200a      	movs	r0, #10
 800ee56:	f7fd fcbf 	bl	800c7d8 <xQueueGenericCreateStatic>
 800ee5a:	4603      	mov	r3, r0
 800ee5c:	4a08      	ldr	r2, [pc, #32]	@ (800ee80 <prvCheckForValidListAndQueue+0x60>)
 800ee5e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ee60:	4b07      	ldr	r3, [pc, #28]	@ (800ee80 <prvCheckForValidListAndQueue+0x60>)
 800ee62:	681b      	ldr	r3, [r3, #0]
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d005      	beq.n	800ee74 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ee68:	4b05      	ldr	r3, [pc, #20]	@ (800ee80 <prvCheckForValidListAndQueue+0x60>)
 800ee6a:	681b      	ldr	r3, [r3, #0]
 800ee6c:	490b      	ldr	r1, [pc, #44]	@ (800ee9c <prvCheckForValidListAndQueue+0x7c>)
 800ee6e:	4618      	mov	r0, r3
 800ee70:	f7fe fb82 	bl	800d578 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ee74:	f000 f97a 	bl	800f16c <vPortExitCritical>
}
 800ee78:	bf00      	nop
 800ee7a:	46bd      	mov	sp, r7
 800ee7c:	bd80      	pop	{r7, pc}
 800ee7e:	bf00      	nop
 800ee80:	20001354 	.word	0x20001354
 800ee84:	20001324 	.word	0x20001324
 800ee88:	20001338 	.word	0x20001338
 800ee8c:	2000134c 	.word	0x2000134c
 800ee90:	20001350 	.word	0x20001350
 800ee94:	20001400 	.word	0x20001400
 800ee98:	20001360 	.word	0x20001360
 800ee9c:	08013e4c 	.word	0x08013e4c

0800eea0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800eea0:	b480      	push	{r7}
 800eea2:	b085      	sub	sp, #20
 800eea4:	af00      	add	r7, sp, #0
 800eea6:	60f8      	str	r0, [r7, #12]
 800eea8:	60b9      	str	r1, [r7, #8]
 800eeaa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800eeac:	68fb      	ldr	r3, [r7, #12]
 800eeae:	3b04      	subs	r3, #4
 800eeb0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800eeb2:	68fb      	ldr	r3, [r7, #12]
 800eeb4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800eeb8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800eeba:	68fb      	ldr	r3, [r7, #12]
 800eebc:	3b04      	subs	r3, #4
 800eebe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800eec0:	68bb      	ldr	r3, [r7, #8]
 800eec2:	f023 0201 	bic.w	r2, r3, #1
 800eec6:	68fb      	ldr	r3, [r7, #12]
 800eec8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800eeca:	68fb      	ldr	r3, [r7, #12]
 800eecc:	3b04      	subs	r3, #4
 800eece:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800eed0:	4a0c      	ldr	r2, [pc, #48]	@ (800ef04 <pxPortInitialiseStack+0x64>)
 800eed2:	68fb      	ldr	r3, [r7, #12]
 800eed4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800eed6:	68fb      	ldr	r3, [r7, #12]
 800eed8:	3b14      	subs	r3, #20
 800eeda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800eedc:	687a      	ldr	r2, [r7, #4]
 800eede:	68fb      	ldr	r3, [r7, #12]
 800eee0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	3b04      	subs	r3, #4
 800eee6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800eee8:	68fb      	ldr	r3, [r7, #12]
 800eeea:	f06f 0202 	mvn.w	r2, #2
 800eeee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800eef0:	68fb      	ldr	r3, [r7, #12]
 800eef2:	3b20      	subs	r3, #32
 800eef4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800eef6:	68fb      	ldr	r3, [r7, #12]
}
 800eef8:	4618      	mov	r0, r3
 800eefa:	3714      	adds	r7, #20
 800eefc:	46bd      	mov	sp, r7
 800eefe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef02:	4770      	bx	lr
 800ef04:	0800ef09 	.word	0x0800ef09

0800ef08 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ef08:	b480      	push	{r7}
 800ef0a:	b085      	sub	sp, #20
 800ef0c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ef0e:	2300      	movs	r3, #0
 800ef10:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ef12:	4b13      	ldr	r3, [pc, #76]	@ (800ef60 <prvTaskExitError+0x58>)
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ef1a:	d00b      	beq.n	800ef34 <prvTaskExitError+0x2c>
	__asm volatile
 800ef1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef20:	f383 8811 	msr	BASEPRI, r3
 800ef24:	f3bf 8f6f 	isb	sy
 800ef28:	f3bf 8f4f 	dsb	sy
 800ef2c:	60fb      	str	r3, [r7, #12]
}
 800ef2e:	bf00      	nop
 800ef30:	bf00      	nop
 800ef32:	e7fd      	b.n	800ef30 <prvTaskExitError+0x28>
	__asm volatile
 800ef34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef38:	f383 8811 	msr	BASEPRI, r3
 800ef3c:	f3bf 8f6f 	isb	sy
 800ef40:	f3bf 8f4f 	dsb	sy
 800ef44:	60bb      	str	r3, [r7, #8]
}
 800ef46:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ef48:	bf00      	nop
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d0fc      	beq.n	800ef4a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ef50:	bf00      	nop
 800ef52:	bf00      	nop
 800ef54:	3714      	adds	r7, #20
 800ef56:	46bd      	mov	sp, r7
 800ef58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef5c:	4770      	bx	lr
 800ef5e:	bf00      	nop
 800ef60:	2000013c 	.word	0x2000013c
	...

0800ef70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ef70:	4b07      	ldr	r3, [pc, #28]	@ (800ef90 <pxCurrentTCBConst2>)
 800ef72:	6819      	ldr	r1, [r3, #0]
 800ef74:	6808      	ldr	r0, [r1, #0]
 800ef76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef7a:	f380 8809 	msr	PSP, r0
 800ef7e:	f3bf 8f6f 	isb	sy
 800ef82:	f04f 0000 	mov.w	r0, #0
 800ef86:	f380 8811 	msr	BASEPRI, r0
 800ef8a:	4770      	bx	lr
 800ef8c:	f3af 8000 	nop.w

0800ef90 <pxCurrentTCBConst2>:
 800ef90:	20000e24 	.word	0x20000e24
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ef94:	bf00      	nop
 800ef96:	bf00      	nop

0800ef98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ef98:	4808      	ldr	r0, [pc, #32]	@ (800efbc <prvPortStartFirstTask+0x24>)
 800ef9a:	6800      	ldr	r0, [r0, #0]
 800ef9c:	6800      	ldr	r0, [r0, #0]
 800ef9e:	f380 8808 	msr	MSP, r0
 800efa2:	f04f 0000 	mov.w	r0, #0
 800efa6:	f380 8814 	msr	CONTROL, r0
 800efaa:	b662      	cpsie	i
 800efac:	b661      	cpsie	f
 800efae:	f3bf 8f4f 	dsb	sy
 800efb2:	f3bf 8f6f 	isb	sy
 800efb6:	df00      	svc	0
 800efb8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800efba:	bf00      	nop
 800efbc:	e000ed08 	.word	0xe000ed08

0800efc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800efc0:	b580      	push	{r7, lr}
 800efc2:	b086      	sub	sp, #24
 800efc4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800efc6:	4b47      	ldr	r3, [pc, #284]	@ (800f0e4 <xPortStartScheduler+0x124>)
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	4a47      	ldr	r2, [pc, #284]	@ (800f0e8 <xPortStartScheduler+0x128>)
 800efcc:	4293      	cmp	r3, r2
 800efce:	d10b      	bne.n	800efe8 <xPortStartScheduler+0x28>
	__asm volatile
 800efd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800efd4:	f383 8811 	msr	BASEPRI, r3
 800efd8:	f3bf 8f6f 	isb	sy
 800efdc:	f3bf 8f4f 	dsb	sy
 800efe0:	613b      	str	r3, [r7, #16]
}
 800efe2:	bf00      	nop
 800efe4:	bf00      	nop
 800efe6:	e7fd      	b.n	800efe4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800efe8:	4b3e      	ldr	r3, [pc, #248]	@ (800f0e4 <xPortStartScheduler+0x124>)
 800efea:	681b      	ldr	r3, [r3, #0]
 800efec:	4a3f      	ldr	r2, [pc, #252]	@ (800f0ec <xPortStartScheduler+0x12c>)
 800efee:	4293      	cmp	r3, r2
 800eff0:	d10b      	bne.n	800f00a <xPortStartScheduler+0x4a>
	__asm volatile
 800eff2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eff6:	f383 8811 	msr	BASEPRI, r3
 800effa:	f3bf 8f6f 	isb	sy
 800effe:	f3bf 8f4f 	dsb	sy
 800f002:	60fb      	str	r3, [r7, #12]
}
 800f004:	bf00      	nop
 800f006:	bf00      	nop
 800f008:	e7fd      	b.n	800f006 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f00a:	4b39      	ldr	r3, [pc, #228]	@ (800f0f0 <xPortStartScheduler+0x130>)
 800f00c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f00e:	697b      	ldr	r3, [r7, #20]
 800f010:	781b      	ldrb	r3, [r3, #0]
 800f012:	b2db      	uxtb	r3, r3
 800f014:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f016:	697b      	ldr	r3, [r7, #20]
 800f018:	22ff      	movs	r2, #255	@ 0xff
 800f01a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f01c:	697b      	ldr	r3, [r7, #20]
 800f01e:	781b      	ldrb	r3, [r3, #0]
 800f020:	b2db      	uxtb	r3, r3
 800f022:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f024:	78fb      	ldrb	r3, [r7, #3]
 800f026:	b2db      	uxtb	r3, r3
 800f028:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800f02c:	b2da      	uxtb	r2, r3
 800f02e:	4b31      	ldr	r3, [pc, #196]	@ (800f0f4 <xPortStartScheduler+0x134>)
 800f030:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f032:	4b31      	ldr	r3, [pc, #196]	@ (800f0f8 <xPortStartScheduler+0x138>)
 800f034:	2207      	movs	r2, #7
 800f036:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f038:	e009      	b.n	800f04e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800f03a:	4b2f      	ldr	r3, [pc, #188]	@ (800f0f8 <xPortStartScheduler+0x138>)
 800f03c:	681b      	ldr	r3, [r3, #0]
 800f03e:	3b01      	subs	r3, #1
 800f040:	4a2d      	ldr	r2, [pc, #180]	@ (800f0f8 <xPortStartScheduler+0x138>)
 800f042:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f044:	78fb      	ldrb	r3, [r7, #3]
 800f046:	b2db      	uxtb	r3, r3
 800f048:	005b      	lsls	r3, r3, #1
 800f04a:	b2db      	uxtb	r3, r3
 800f04c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f04e:	78fb      	ldrb	r3, [r7, #3]
 800f050:	b2db      	uxtb	r3, r3
 800f052:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f056:	2b80      	cmp	r3, #128	@ 0x80
 800f058:	d0ef      	beq.n	800f03a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f05a:	4b27      	ldr	r3, [pc, #156]	@ (800f0f8 <xPortStartScheduler+0x138>)
 800f05c:	681b      	ldr	r3, [r3, #0]
 800f05e:	f1c3 0307 	rsb	r3, r3, #7
 800f062:	2b04      	cmp	r3, #4
 800f064:	d00b      	beq.n	800f07e <xPortStartScheduler+0xbe>
	__asm volatile
 800f066:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f06a:	f383 8811 	msr	BASEPRI, r3
 800f06e:	f3bf 8f6f 	isb	sy
 800f072:	f3bf 8f4f 	dsb	sy
 800f076:	60bb      	str	r3, [r7, #8]
}
 800f078:	bf00      	nop
 800f07a:	bf00      	nop
 800f07c:	e7fd      	b.n	800f07a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f07e:	4b1e      	ldr	r3, [pc, #120]	@ (800f0f8 <xPortStartScheduler+0x138>)
 800f080:	681b      	ldr	r3, [r3, #0]
 800f082:	021b      	lsls	r3, r3, #8
 800f084:	4a1c      	ldr	r2, [pc, #112]	@ (800f0f8 <xPortStartScheduler+0x138>)
 800f086:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f088:	4b1b      	ldr	r3, [pc, #108]	@ (800f0f8 <xPortStartScheduler+0x138>)
 800f08a:	681b      	ldr	r3, [r3, #0]
 800f08c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800f090:	4a19      	ldr	r2, [pc, #100]	@ (800f0f8 <xPortStartScheduler+0x138>)
 800f092:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	b2da      	uxtb	r2, r3
 800f098:	697b      	ldr	r3, [r7, #20]
 800f09a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f09c:	4b17      	ldr	r3, [pc, #92]	@ (800f0fc <xPortStartScheduler+0x13c>)
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	4a16      	ldr	r2, [pc, #88]	@ (800f0fc <xPortStartScheduler+0x13c>)
 800f0a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800f0a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f0a8:	4b14      	ldr	r3, [pc, #80]	@ (800f0fc <xPortStartScheduler+0x13c>)
 800f0aa:	681b      	ldr	r3, [r3, #0]
 800f0ac:	4a13      	ldr	r2, [pc, #76]	@ (800f0fc <xPortStartScheduler+0x13c>)
 800f0ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800f0b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f0b4:	f000 f8da 	bl	800f26c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f0b8:	4b11      	ldr	r3, [pc, #68]	@ (800f100 <xPortStartScheduler+0x140>)
 800f0ba:	2200      	movs	r2, #0
 800f0bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f0be:	f000 f8f9 	bl	800f2b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f0c2:	4b10      	ldr	r3, [pc, #64]	@ (800f104 <xPortStartScheduler+0x144>)
 800f0c4:	681b      	ldr	r3, [r3, #0]
 800f0c6:	4a0f      	ldr	r2, [pc, #60]	@ (800f104 <xPortStartScheduler+0x144>)
 800f0c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800f0cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f0ce:	f7ff ff63 	bl	800ef98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f0d2:	f7fe ff1b 	bl	800df0c <vTaskSwitchContext>
	prvTaskExitError();
 800f0d6:	f7ff ff17 	bl	800ef08 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f0da:	2300      	movs	r3, #0
}
 800f0dc:	4618      	mov	r0, r3
 800f0de:	3718      	adds	r7, #24
 800f0e0:	46bd      	mov	sp, r7
 800f0e2:	bd80      	pop	{r7, pc}
 800f0e4:	e000ed00 	.word	0xe000ed00
 800f0e8:	410fc271 	.word	0x410fc271
 800f0ec:	410fc270 	.word	0x410fc270
 800f0f0:	e000e400 	.word	0xe000e400
 800f0f4:	20001450 	.word	0x20001450
 800f0f8:	20001454 	.word	0x20001454
 800f0fc:	e000ed20 	.word	0xe000ed20
 800f100:	2000013c 	.word	0x2000013c
 800f104:	e000ef34 	.word	0xe000ef34

0800f108 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f108:	b480      	push	{r7}
 800f10a:	b083      	sub	sp, #12
 800f10c:	af00      	add	r7, sp, #0
	__asm volatile
 800f10e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f112:	f383 8811 	msr	BASEPRI, r3
 800f116:	f3bf 8f6f 	isb	sy
 800f11a:	f3bf 8f4f 	dsb	sy
 800f11e:	607b      	str	r3, [r7, #4]
}
 800f120:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f122:	4b10      	ldr	r3, [pc, #64]	@ (800f164 <vPortEnterCritical+0x5c>)
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	3301      	adds	r3, #1
 800f128:	4a0e      	ldr	r2, [pc, #56]	@ (800f164 <vPortEnterCritical+0x5c>)
 800f12a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f12c:	4b0d      	ldr	r3, [pc, #52]	@ (800f164 <vPortEnterCritical+0x5c>)
 800f12e:	681b      	ldr	r3, [r3, #0]
 800f130:	2b01      	cmp	r3, #1
 800f132:	d110      	bne.n	800f156 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f134:	4b0c      	ldr	r3, [pc, #48]	@ (800f168 <vPortEnterCritical+0x60>)
 800f136:	681b      	ldr	r3, [r3, #0]
 800f138:	b2db      	uxtb	r3, r3
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d00b      	beq.n	800f156 <vPortEnterCritical+0x4e>
	__asm volatile
 800f13e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f142:	f383 8811 	msr	BASEPRI, r3
 800f146:	f3bf 8f6f 	isb	sy
 800f14a:	f3bf 8f4f 	dsb	sy
 800f14e:	603b      	str	r3, [r7, #0]
}
 800f150:	bf00      	nop
 800f152:	bf00      	nop
 800f154:	e7fd      	b.n	800f152 <vPortEnterCritical+0x4a>
	}
}
 800f156:	bf00      	nop
 800f158:	370c      	adds	r7, #12
 800f15a:	46bd      	mov	sp, r7
 800f15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f160:	4770      	bx	lr
 800f162:	bf00      	nop
 800f164:	2000013c 	.word	0x2000013c
 800f168:	e000ed04 	.word	0xe000ed04

0800f16c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f16c:	b480      	push	{r7}
 800f16e:	b083      	sub	sp, #12
 800f170:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f172:	4b12      	ldr	r3, [pc, #72]	@ (800f1bc <vPortExitCritical+0x50>)
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	2b00      	cmp	r3, #0
 800f178:	d10b      	bne.n	800f192 <vPortExitCritical+0x26>
	__asm volatile
 800f17a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f17e:	f383 8811 	msr	BASEPRI, r3
 800f182:	f3bf 8f6f 	isb	sy
 800f186:	f3bf 8f4f 	dsb	sy
 800f18a:	607b      	str	r3, [r7, #4]
}
 800f18c:	bf00      	nop
 800f18e:	bf00      	nop
 800f190:	e7fd      	b.n	800f18e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800f192:	4b0a      	ldr	r3, [pc, #40]	@ (800f1bc <vPortExitCritical+0x50>)
 800f194:	681b      	ldr	r3, [r3, #0]
 800f196:	3b01      	subs	r3, #1
 800f198:	4a08      	ldr	r2, [pc, #32]	@ (800f1bc <vPortExitCritical+0x50>)
 800f19a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f19c:	4b07      	ldr	r3, [pc, #28]	@ (800f1bc <vPortExitCritical+0x50>)
 800f19e:	681b      	ldr	r3, [r3, #0]
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d105      	bne.n	800f1b0 <vPortExitCritical+0x44>
 800f1a4:	2300      	movs	r3, #0
 800f1a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f1a8:	683b      	ldr	r3, [r7, #0]
 800f1aa:	f383 8811 	msr	BASEPRI, r3
}
 800f1ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f1b0:	bf00      	nop
 800f1b2:	370c      	adds	r7, #12
 800f1b4:	46bd      	mov	sp, r7
 800f1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ba:	4770      	bx	lr
 800f1bc:	2000013c 	.word	0x2000013c

0800f1c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f1c0:	f3ef 8009 	mrs	r0, PSP
 800f1c4:	f3bf 8f6f 	isb	sy
 800f1c8:	4b15      	ldr	r3, [pc, #84]	@ (800f220 <pxCurrentTCBConst>)
 800f1ca:	681a      	ldr	r2, [r3, #0]
 800f1cc:	f01e 0f10 	tst.w	lr, #16
 800f1d0:	bf08      	it	eq
 800f1d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f1d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1da:	6010      	str	r0, [r2, #0]
 800f1dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f1e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800f1e4:	f380 8811 	msr	BASEPRI, r0
 800f1e8:	f3bf 8f4f 	dsb	sy
 800f1ec:	f3bf 8f6f 	isb	sy
 800f1f0:	f7fe fe8c 	bl	800df0c <vTaskSwitchContext>
 800f1f4:	f04f 0000 	mov.w	r0, #0
 800f1f8:	f380 8811 	msr	BASEPRI, r0
 800f1fc:	bc09      	pop	{r0, r3}
 800f1fe:	6819      	ldr	r1, [r3, #0]
 800f200:	6808      	ldr	r0, [r1, #0]
 800f202:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f206:	f01e 0f10 	tst.w	lr, #16
 800f20a:	bf08      	it	eq
 800f20c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f210:	f380 8809 	msr	PSP, r0
 800f214:	f3bf 8f6f 	isb	sy
 800f218:	4770      	bx	lr
 800f21a:	bf00      	nop
 800f21c:	f3af 8000 	nop.w

0800f220 <pxCurrentTCBConst>:
 800f220:	20000e24 	.word	0x20000e24
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f224:	bf00      	nop
 800f226:	bf00      	nop

0800f228 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f228:	b580      	push	{r7, lr}
 800f22a:	b082      	sub	sp, #8
 800f22c:	af00      	add	r7, sp, #0
	__asm volatile
 800f22e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f232:	f383 8811 	msr	BASEPRI, r3
 800f236:	f3bf 8f6f 	isb	sy
 800f23a:	f3bf 8f4f 	dsb	sy
 800f23e:	607b      	str	r3, [r7, #4]
}
 800f240:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f242:	f7fe fda9 	bl	800dd98 <xTaskIncrementTick>
 800f246:	4603      	mov	r3, r0
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d003      	beq.n	800f254 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f24c:	4b06      	ldr	r3, [pc, #24]	@ (800f268 <xPortSysTickHandler+0x40>)
 800f24e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f252:	601a      	str	r2, [r3, #0]
 800f254:	2300      	movs	r3, #0
 800f256:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f258:	683b      	ldr	r3, [r7, #0]
 800f25a:	f383 8811 	msr	BASEPRI, r3
}
 800f25e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f260:	bf00      	nop
 800f262:	3708      	adds	r7, #8
 800f264:	46bd      	mov	sp, r7
 800f266:	bd80      	pop	{r7, pc}
 800f268:	e000ed04 	.word	0xe000ed04

0800f26c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f26c:	b480      	push	{r7}
 800f26e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f270:	4b0b      	ldr	r3, [pc, #44]	@ (800f2a0 <vPortSetupTimerInterrupt+0x34>)
 800f272:	2200      	movs	r2, #0
 800f274:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f276:	4b0b      	ldr	r3, [pc, #44]	@ (800f2a4 <vPortSetupTimerInterrupt+0x38>)
 800f278:	2200      	movs	r2, #0
 800f27a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f27c:	4b0a      	ldr	r3, [pc, #40]	@ (800f2a8 <vPortSetupTimerInterrupt+0x3c>)
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	4a0a      	ldr	r2, [pc, #40]	@ (800f2ac <vPortSetupTimerInterrupt+0x40>)
 800f282:	fba2 2303 	umull	r2, r3, r2, r3
 800f286:	099b      	lsrs	r3, r3, #6
 800f288:	4a09      	ldr	r2, [pc, #36]	@ (800f2b0 <vPortSetupTimerInterrupt+0x44>)
 800f28a:	3b01      	subs	r3, #1
 800f28c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f28e:	4b04      	ldr	r3, [pc, #16]	@ (800f2a0 <vPortSetupTimerInterrupt+0x34>)
 800f290:	2207      	movs	r2, #7
 800f292:	601a      	str	r2, [r3, #0]
}
 800f294:	bf00      	nop
 800f296:	46bd      	mov	sp, r7
 800f298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f29c:	4770      	bx	lr
 800f29e:	bf00      	nop
 800f2a0:	e000e010 	.word	0xe000e010
 800f2a4:	e000e018 	.word	0xe000e018
 800f2a8:	20000020 	.word	0x20000020
 800f2ac:	10624dd3 	.word	0x10624dd3
 800f2b0:	e000e014 	.word	0xe000e014

0800f2b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f2b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800f2c4 <vPortEnableVFP+0x10>
 800f2b8:	6801      	ldr	r1, [r0, #0]
 800f2ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800f2be:	6001      	str	r1, [r0, #0]
 800f2c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f2c2:	bf00      	nop
 800f2c4:	e000ed88 	.word	0xe000ed88

0800f2c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f2c8:	b480      	push	{r7}
 800f2ca:	b085      	sub	sp, #20
 800f2cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f2ce:	f3ef 8305 	mrs	r3, IPSR
 800f2d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f2d4:	68fb      	ldr	r3, [r7, #12]
 800f2d6:	2b0f      	cmp	r3, #15
 800f2d8:	d915      	bls.n	800f306 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f2da:	4a18      	ldr	r2, [pc, #96]	@ (800f33c <vPortValidateInterruptPriority+0x74>)
 800f2dc:	68fb      	ldr	r3, [r7, #12]
 800f2de:	4413      	add	r3, r2
 800f2e0:	781b      	ldrb	r3, [r3, #0]
 800f2e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f2e4:	4b16      	ldr	r3, [pc, #88]	@ (800f340 <vPortValidateInterruptPriority+0x78>)
 800f2e6:	781b      	ldrb	r3, [r3, #0]
 800f2e8:	7afa      	ldrb	r2, [r7, #11]
 800f2ea:	429a      	cmp	r2, r3
 800f2ec:	d20b      	bcs.n	800f306 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800f2ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f2f2:	f383 8811 	msr	BASEPRI, r3
 800f2f6:	f3bf 8f6f 	isb	sy
 800f2fa:	f3bf 8f4f 	dsb	sy
 800f2fe:	607b      	str	r3, [r7, #4]
}
 800f300:	bf00      	nop
 800f302:	bf00      	nop
 800f304:	e7fd      	b.n	800f302 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f306:	4b0f      	ldr	r3, [pc, #60]	@ (800f344 <vPortValidateInterruptPriority+0x7c>)
 800f308:	681b      	ldr	r3, [r3, #0]
 800f30a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800f30e:	4b0e      	ldr	r3, [pc, #56]	@ (800f348 <vPortValidateInterruptPriority+0x80>)
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	429a      	cmp	r2, r3
 800f314:	d90b      	bls.n	800f32e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800f316:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f31a:	f383 8811 	msr	BASEPRI, r3
 800f31e:	f3bf 8f6f 	isb	sy
 800f322:	f3bf 8f4f 	dsb	sy
 800f326:	603b      	str	r3, [r7, #0]
}
 800f328:	bf00      	nop
 800f32a:	bf00      	nop
 800f32c:	e7fd      	b.n	800f32a <vPortValidateInterruptPriority+0x62>
	}
 800f32e:	bf00      	nop
 800f330:	3714      	adds	r7, #20
 800f332:	46bd      	mov	sp, r7
 800f334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f338:	4770      	bx	lr
 800f33a:	bf00      	nop
 800f33c:	e000e3f0 	.word	0xe000e3f0
 800f340:	20001450 	.word	0x20001450
 800f344:	e000ed0c 	.word	0xe000ed0c
 800f348:	20001454 	.word	0x20001454

0800f34c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f34c:	b580      	push	{r7, lr}
 800f34e:	b08a      	sub	sp, #40	@ 0x28
 800f350:	af00      	add	r7, sp, #0
 800f352:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f354:	2300      	movs	r3, #0
 800f356:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f358:	f7fe fc50 	bl	800dbfc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f35c:	4b5c      	ldr	r3, [pc, #368]	@ (800f4d0 <pvPortMalloc+0x184>)
 800f35e:	681b      	ldr	r3, [r3, #0]
 800f360:	2b00      	cmp	r3, #0
 800f362:	d101      	bne.n	800f368 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f364:	f000 f924 	bl	800f5b0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f368:	4b5a      	ldr	r3, [pc, #360]	@ (800f4d4 <pvPortMalloc+0x188>)
 800f36a:	681a      	ldr	r2, [r3, #0]
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	4013      	ands	r3, r2
 800f370:	2b00      	cmp	r3, #0
 800f372:	f040 8095 	bne.w	800f4a0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d01e      	beq.n	800f3ba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800f37c:	2208      	movs	r2, #8
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	4413      	add	r3, r2
 800f382:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	f003 0307 	and.w	r3, r3, #7
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	d015      	beq.n	800f3ba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	f023 0307 	bic.w	r3, r3, #7
 800f394:	3308      	adds	r3, #8
 800f396:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	f003 0307 	and.w	r3, r3, #7
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	d00b      	beq.n	800f3ba <pvPortMalloc+0x6e>
	__asm volatile
 800f3a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f3a6:	f383 8811 	msr	BASEPRI, r3
 800f3aa:	f3bf 8f6f 	isb	sy
 800f3ae:	f3bf 8f4f 	dsb	sy
 800f3b2:	617b      	str	r3, [r7, #20]
}
 800f3b4:	bf00      	nop
 800f3b6:	bf00      	nop
 800f3b8:	e7fd      	b.n	800f3b6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	d06f      	beq.n	800f4a0 <pvPortMalloc+0x154>
 800f3c0:	4b45      	ldr	r3, [pc, #276]	@ (800f4d8 <pvPortMalloc+0x18c>)
 800f3c2:	681b      	ldr	r3, [r3, #0]
 800f3c4:	687a      	ldr	r2, [r7, #4]
 800f3c6:	429a      	cmp	r2, r3
 800f3c8:	d86a      	bhi.n	800f4a0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f3ca:	4b44      	ldr	r3, [pc, #272]	@ (800f4dc <pvPortMalloc+0x190>)
 800f3cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f3ce:	4b43      	ldr	r3, [pc, #268]	@ (800f4dc <pvPortMalloc+0x190>)
 800f3d0:	681b      	ldr	r3, [r3, #0]
 800f3d2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f3d4:	e004      	b.n	800f3e0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800f3d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f3da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f3e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3e2:	685b      	ldr	r3, [r3, #4]
 800f3e4:	687a      	ldr	r2, [r7, #4]
 800f3e6:	429a      	cmp	r2, r3
 800f3e8:	d903      	bls.n	800f3f2 <pvPortMalloc+0xa6>
 800f3ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3ec:	681b      	ldr	r3, [r3, #0]
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	d1f1      	bne.n	800f3d6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f3f2:	4b37      	ldr	r3, [pc, #220]	@ (800f4d0 <pvPortMalloc+0x184>)
 800f3f4:	681b      	ldr	r3, [r3, #0]
 800f3f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f3f8:	429a      	cmp	r2, r3
 800f3fa:	d051      	beq.n	800f4a0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f3fc:	6a3b      	ldr	r3, [r7, #32]
 800f3fe:	681b      	ldr	r3, [r3, #0]
 800f400:	2208      	movs	r2, #8
 800f402:	4413      	add	r3, r2
 800f404:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f408:	681a      	ldr	r2, [r3, #0]
 800f40a:	6a3b      	ldr	r3, [r7, #32]
 800f40c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f40e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f410:	685a      	ldr	r2, [r3, #4]
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	1ad2      	subs	r2, r2, r3
 800f416:	2308      	movs	r3, #8
 800f418:	005b      	lsls	r3, r3, #1
 800f41a:	429a      	cmp	r2, r3
 800f41c:	d920      	bls.n	800f460 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f41e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	4413      	add	r3, r2
 800f424:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f426:	69bb      	ldr	r3, [r7, #24]
 800f428:	f003 0307 	and.w	r3, r3, #7
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	d00b      	beq.n	800f448 <pvPortMalloc+0xfc>
	__asm volatile
 800f430:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f434:	f383 8811 	msr	BASEPRI, r3
 800f438:	f3bf 8f6f 	isb	sy
 800f43c:	f3bf 8f4f 	dsb	sy
 800f440:	613b      	str	r3, [r7, #16]
}
 800f442:	bf00      	nop
 800f444:	bf00      	nop
 800f446:	e7fd      	b.n	800f444 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f44a:	685a      	ldr	r2, [r3, #4]
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	1ad2      	subs	r2, r2, r3
 800f450:	69bb      	ldr	r3, [r7, #24]
 800f452:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f456:	687a      	ldr	r2, [r7, #4]
 800f458:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f45a:	69b8      	ldr	r0, [r7, #24]
 800f45c:	f000 f90a 	bl	800f674 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f460:	4b1d      	ldr	r3, [pc, #116]	@ (800f4d8 <pvPortMalloc+0x18c>)
 800f462:	681a      	ldr	r2, [r3, #0]
 800f464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f466:	685b      	ldr	r3, [r3, #4]
 800f468:	1ad3      	subs	r3, r2, r3
 800f46a:	4a1b      	ldr	r2, [pc, #108]	@ (800f4d8 <pvPortMalloc+0x18c>)
 800f46c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f46e:	4b1a      	ldr	r3, [pc, #104]	@ (800f4d8 <pvPortMalloc+0x18c>)
 800f470:	681a      	ldr	r2, [r3, #0]
 800f472:	4b1b      	ldr	r3, [pc, #108]	@ (800f4e0 <pvPortMalloc+0x194>)
 800f474:	681b      	ldr	r3, [r3, #0]
 800f476:	429a      	cmp	r2, r3
 800f478:	d203      	bcs.n	800f482 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f47a:	4b17      	ldr	r3, [pc, #92]	@ (800f4d8 <pvPortMalloc+0x18c>)
 800f47c:	681b      	ldr	r3, [r3, #0]
 800f47e:	4a18      	ldr	r2, [pc, #96]	@ (800f4e0 <pvPortMalloc+0x194>)
 800f480:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f484:	685a      	ldr	r2, [r3, #4]
 800f486:	4b13      	ldr	r3, [pc, #76]	@ (800f4d4 <pvPortMalloc+0x188>)
 800f488:	681b      	ldr	r3, [r3, #0]
 800f48a:	431a      	orrs	r2, r3
 800f48c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f48e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f492:	2200      	movs	r2, #0
 800f494:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800f496:	4b13      	ldr	r3, [pc, #76]	@ (800f4e4 <pvPortMalloc+0x198>)
 800f498:	681b      	ldr	r3, [r3, #0]
 800f49a:	3301      	adds	r3, #1
 800f49c:	4a11      	ldr	r2, [pc, #68]	@ (800f4e4 <pvPortMalloc+0x198>)
 800f49e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f4a0:	f7fe fbba 	bl	800dc18 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f4a4:	69fb      	ldr	r3, [r7, #28]
 800f4a6:	f003 0307 	and.w	r3, r3, #7
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	d00b      	beq.n	800f4c6 <pvPortMalloc+0x17a>
	__asm volatile
 800f4ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f4b2:	f383 8811 	msr	BASEPRI, r3
 800f4b6:	f3bf 8f6f 	isb	sy
 800f4ba:	f3bf 8f4f 	dsb	sy
 800f4be:	60fb      	str	r3, [r7, #12]
}
 800f4c0:	bf00      	nop
 800f4c2:	bf00      	nop
 800f4c4:	e7fd      	b.n	800f4c2 <pvPortMalloc+0x176>
	return pvReturn;
 800f4c6:	69fb      	ldr	r3, [r7, #28]
}
 800f4c8:	4618      	mov	r0, r3
 800f4ca:	3728      	adds	r7, #40	@ 0x28
 800f4cc:	46bd      	mov	sp, r7
 800f4ce:	bd80      	pop	{r7, pc}
 800f4d0:	20010e60 	.word	0x20010e60
 800f4d4:	20010e74 	.word	0x20010e74
 800f4d8:	20010e64 	.word	0x20010e64
 800f4dc:	20010e58 	.word	0x20010e58
 800f4e0:	20010e68 	.word	0x20010e68
 800f4e4:	20010e6c 	.word	0x20010e6c

0800f4e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f4e8:	b580      	push	{r7, lr}
 800f4ea:	b086      	sub	sp, #24
 800f4ec:	af00      	add	r7, sp, #0
 800f4ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	d04f      	beq.n	800f59a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f4fa:	2308      	movs	r3, #8
 800f4fc:	425b      	negs	r3, r3
 800f4fe:	697a      	ldr	r2, [r7, #20]
 800f500:	4413      	add	r3, r2
 800f502:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f504:	697b      	ldr	r3, [r7, #20]
 800f506:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f508:	693b      	ldr	r3, [r7, #16]
 800f50a:	685a      	ldr	r2, [r3, #4]
 800f50c:	4b25      	ldr	r3, [pc, #148]	@ (800f5a4 <vPortFree+0xbc>)
 800f50e:	681b      	ldr	r3, [r3, #0]
 800f510:	4013      	ands	r3, r2
 800f512:	2b00      	cmp	r3, #0
 800f514:	d10b      	bne.n	800f52e <vPortFree+0x46>
	__asm volatile
 800f516:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f51a:	f383 8811 	msr	BASEPRI, r3
 800f51e:	f3bf 8f6f 	isb	sy
 800f522:	f3bf 8f4f 	dsb	sy
 800f526:	60fb      	str	r3, [r7, #12]
}
 800f528:	bf00      	nop
 800f52a:	bf00      	nop
 800f52c:	e7fd      	b.n	800f52a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f52e:	693b      	ldr	r3, [r7, #16]
 800f530:	681b      	ldr	r3, [r3, #0]
 800f532:	2b00      	cmp	r3, #0
 800f534:	d00b      	beq.n	800f54e <vPortFree+0x66>
	__asm volatile
 800f536:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f53a:	f383 8811 	msr	BASEPRI, r3
 800f53e:	f3bf 8f6f 	isb	sy
 800f542:	f3bf 8f4f 	dsb	sy
 800f546:	60bb      	str	r3, [r7, #8]
}
 800f548:	bf00      	nop
 800f54a:	bf00      	nop
 800f54c:	e7fd      	b.n	800f54a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f54e:	693b      	ldr	r3, [r7, #16]
 800f550:	685a      	ldr	r2, [r3, #4]
 800f552:	4b14      	ldr	r3, [pc, #80]	@ (800f5a4 <vPortFree+0xbc>)
 800f554:	681b      	ldr	r3, [r3, #0]
 800f556:	4013      	ands	r3, r2
 800f558:	2b00      	cmp	r3, #0
 800f55a:	d01e      	beq.n	800f59a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f55c:	693b      	ldr	r3, [r7, #16]
 800f55e:	681b      	ldr	r3, [r3, #0]
 800f560:	2b00      	cmp	r3, #0
 800f562:	d11a      	bne.n	800f59a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f564:	693b      	ldr	r3, [r7, #16]
 800f566:	685a      	ldr	r2, [r3, #4]
 800f568:	4b0e      	ldr	r3, [pc, #56]	@ (800f5a4 <vPortFree+0xbc>)
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	43db      	mvns	r3, r3
 800f56e:	401a      	ands	r2, r3
 800f570:	693b      	ldr	r3, [r7, #16]
 800f572:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f574:	f7fe fb42 	bl	800dbfc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f578:	693b      	ldr	r3, [r7, #16]
 800f57a:	685a      	ldr	r2, [r3, #4]
 800f57c:	4b0a      	ldr	r3, [pc, #40]	@ (800f5a8 <vPortFree+0xc0>)
 800f57e:	681b      	ldr	r3, [r3, #0]
 800f580:	4413      	add	r3, r2
 800f582:	4a09      	ldr	r2, [pc, #36]	@ (800f5a8 <vPortFree+0xc0>)
 800f584:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f586:	6938      	ldr	r0, [r7, #16]
 800f588:	f000 f874 	bl	800f674 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800f58c:	4b07      	ldr	r3, [pc, #28]	@ (800f5ac <vPortFree+0xc4>)
 800f58e:	681b      	ldr	r3, [r3, #0]
 800f590:	3301      	adds	r3, #1
 800f592:	4a06      	ldr	r2, [pc, #24]	@ (800f5ac <vPortFree+0xc4>)
 800f594:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800f596:	f7fe fb3f 	bl	800dc18 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f59a:	bf00      	nop
 800f59c:	3718      	adds	r7, #24
 800f59e:	46bd      	mov	sp, r7
 800f5a0:	bd80      	pop	{r7, pc}
 800f5a2:	bf00      	nop
 800f5a4:	20010e74 	.word	0x20010e74
 800f5a8:	20010e64 	.word	0x20010e64
 800f5ac:	20010e70 	.word	0x20010e70

0800f5b0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f5b0:	b480      	push	{r7}
 800f5b2:	b085      	sub	sp, #20
 800f5b4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f5b6:	f44f 437a 	mov.w	r3, #64000	@ 0xfa00
 800f5ba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f5bc:	4b27      	ldr	r3, [pc, #156]	@ (800f65c <prvHeapInit+0xac>)
 800f5be:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f5c0:	68fb      	ldr	r3, [r7, #12]
 800f5c2:	f003 0307 	and.w	r3, r3, #7
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d00c      	beq.n	800f5e4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f5ca:	68fb      	ldr	r3, [r7, #12]
 800f5cc:	3307      	adds	r3, #7
 800f5ce:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f5d0:	68fb      	ldr	r3, [r7, #12]
 800f5d2:	f023 0307 	bic.w	r3, r3, #7
 800f5d6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f5d8:	68ba      	ldr	r2, [r7, #8]
 800f5da:	68fb      	ldr	r3, [r7, #12]
 800f5dc:	1ad3      	subs	r3, r2, r3
 800f5de:	4a1f      	ldr	r2, [pc, #124]	@ (800f65c <prvHeapInit+0xac>)
 800f5e0:	4413      	add	r3, r2
 800f5e2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f5e4:	68fb      	ldr	r3, [r7, #12]
 800f5e6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f5e8:	4a1d      	ldr	r2, [pc, #116]	@ (800f660 <prvHeapInit+0xb0>)
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f5ee:	4b1c      	ldr	r3, [pc, #112]	@ (800f660 <prvHeapInit+0xb0>)
 800f5f0:	2200      	movs	r2, #0
 800f5f2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	68ba      	ldr	r2, [r7, #8]
 800f5f8:	4413      	add	r3, r2
 800f5fa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f5fc:	2208      	movs	r2, #8
 800f5fe:	68fb      	ldr	r3, [r7, #12]
 800f600:	1a9b      	subs	r3, r3, r2
 800f602:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f604:	68fb      	ldr	r3, [r7, #12]
 800f606:	f023 0307 	bic.w	r3, r3, #7
 800f60a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f60c:	68fb      	ldr	r3, [r7, #12]
 800f60e:	4a15      	ldr	r2, [pc, #84]	@ (800f664 <prvHeapInit+0xb4>)
 800f610:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f612:	4b14      	ldr	r3, [pc, #80]	@ (800f664 <prvHeapInit+0xb4>)
 800f614:	681b      	ldr	r3, [r3, #0]
 800f616:	2200      	movs	r2, #0
 800f618:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f61a:	4b12      	ldr	r3, [pc, #72]	@ (800f664 <prvHeapInit+0xb4>)
 800f61c:	681b      	ldr	r3, [r3, #0]
 800f61e:	2200      	movs	r2, #0
 800f620:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f626:	683b      	ldr	r3, [r7, #0]
 800f628:	68fa      	ldr	r2, [r7, #12]
 800f62a:	1ad2      	subs	r2, r2, r3
 800f62c:	683b      	ldr	r3, [r7, #0]
 800f62e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f630:	4b0c      	ldr	r3, [pc, #48]	@ (800f664 <prvHeapInit+0xb4>)
 800f632:	681a      	ldr	r2, [r3, #0]
 800f634:	683b      	ldr	r3, [r7, #0]
 800f636:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f638:	683b      	ldr	r3, [r7, #0]
 800f63a:	685b      	ldr	r3, [r3, #4]
 800f63c:	4a0a      	ldr	r2, [pc, #40]	@ (800f668 <prvHeapInit+0xb8>)
 800f63e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f640:	683b      	ldr	r3, [r7, #0]
 800f642:	685b      	ldr	r3, [r3, #4]
 800f644:	4a09      	ldr	r2, [pc, #36]	@ (800f66c <prvHeapInit+0xbc>)
 800f646:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f648:	4b09      	ldr	r3, [pc, #36]	@ (800f670 <prvHeapInit+0xc0>)
 800f64a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800f64e:	601a      	str	r2, [r3, #0]
}
 800f650:	bf00      	nop
 800f652:	3714      	adds	r7, #20
 800f654:	46bd      	mov	sp, r7
 800f656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f65a:	4770      	bx	lr
 800f65c:	20001458 	.word	0x20001458
 800f660:	20010e58 	.word	0x20010e58
 800f664:	20010e60 	.word	0x20010e60
 800f668:	20010e68 	.word	0x20010e68
 800f66c:	20010e64 	.word	0x20010e64
 800f670:	20010e74 	.word	0x20010e74

0800f674 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f674:	b480      	push	{r7}
 800f676:	b085      	sub	sp, #20
 800f678:	af00      	add	r7, sp, #0
 800f67a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f67c:	4b28      	ldr	r3, [pc, #160]	@ (800f720 <prvInsertBlockIntoFreeList+0xac>)
 800f67e:	60fb      	str	r3, [r7, #12]
 800f680:	e002      	b.n	800f688 <prvInsertBlockIntoFreeList+0x14>
 800f682:	68fb      	ldr	r3, [r7, #12]
 800f684:	681b      	ldr	r3, [r3, #0]
 800f686:	60fb      	str	r3, [r7, #12]
 800f688:	68fb      	ldr	r3, [r7, #12]
 800f68a:	681b      	ldr	r3, [r3, #0]
 800f68c:	687a      	ldr	r2, [r7, #4]
 800f68e:	429a      	cmp	r2, r3
 800f690:	d8f7      	bhi.n	800f682 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f692:	68fb      	ldr	r3, [r7, #12]
 800f694:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f696:	68fb      	ldr	r3, [r7, #12]
 800f698:	685b      	ldr	r3, [r3, #4]
 800f69a:	68ba      	ldr	r2, [r7, #8]
 800f69c:	4413      	add	r3, r2
 800f69e:	687a      	ldr	r2, [r7, #4]
 800f6a0:	429a      	cmp	r2, r3
 800f6a2:	d108      	bne.n	800f6b6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f6a4:	68fb      	ldr	r3, [r7, #12]
 800f6a6:	685a      	ldr	r2, [r3, #4]
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	685b      	ldr	r3, [r3, #4]
 800f6ac:	441a      	add	r2, r3
 800f6ae:	68fb      	ldr	r3, [r7, #12]
 800f6b0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f6b2:	68fb      	ldr	r3, [r7, #12]
 800f6b4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	685b      	ldr	r3, [r3, #4]
 800f6be:	68ba      	ldr	r2, [r7, #8]
 800f6c0:	441a      	add	r2, r3
 800f6c2:	68fb      	ldr	r3, [r7, #12]
 800f6c4:	681b      	ldr	r3, [r3, #0]
 800f6c6:	429a      	cmp	r2, r3
 800f6c8:	d118      	bne.n	800f6fc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f6ca:	68fb      	ldr	r3, [r7, #12]
 800f6cc:	681a      	ldr	r2, [r3, #0]
 800f6ce:	4b15      	ldr	r3, [pc, #84]	@ (800f724 <prvInsertBlockIntoFreeList+0xb0>)
 800f6d0:	681b      	ldr	r3, [r3, #0]
 800f6d2:	429a      	cmp	r2, r3
 800f6d4:	d00d      	beq.n	800f6f2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	685a      	ldr	r2, [r3, #4]
 800f6da:	68fb      	ldr	r3, [r7, #12]
 800f6dc:	681b      	ldr	r3, [r3, #0]
 800f6de:	685b      	ldr	r3, [r3, #4]
 800f6e0:	441a      	add	r2, r3
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f6e6:	68fb      	ldr	r3, [r7, #12]
 800f6e8:	681b      	ldr	r3, [r3, #0]
 800f6ea:	681a      	ldr	r2, [r3, #0]
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	601a      	str	r2, [r3, #0]
 800f6f0:	e008      	b.n	800f704 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f6f2:	4b0c      	ldr	r3, [pc, #48]	@ (800f724 <prvInsertBlockIntoFreeList+0xb0>)
 800f6f4:	681a      	ldr	r2, [r3, #0]
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	601a      	str	r2, [r3, #0]
 800f6fa:	e003      	b.n	800f704 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f6fc:	68fb      	ldr	r3, [r7, #12]
 800f6fe:	681a      	ldr	r2, [r3, #0]
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f704:	68fa      	ldr	r2, [r7, #12]
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	429a      	cmp	r2, r3
 800f70a:	d002      	beq.n	800f712 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f70c:	68fb      	ldr	r3, [r7, #12]
 800f70e:	687a      	ldr	r2, [r7, #4]
 800f710:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f712:	bf00      	nop
 800f714:	3714      	adds	r7, #20
 800f716:	46bd      	mov	sp, r7
 800f718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f71c:	4770      	bx	lr
 800f71e:	bf00      	nop
 800f720:	20010e58 	.word	0x20010e58
 800f724:	20010e60 	.word	0x20010e60

0800f728 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800f728:	b580      	push	{r7, lr}
 800f72a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800f72c:	2200      	movs	r2, #0
 800f72e:	4912      	ldr	r1, [pc, #72]	@ (800f778 <MX_USB_Device_Init+0x50>)
 800f730:	4812      	ldr	r0, [pc, #72]	@ (800f77c <MX_USB_Device_Init+0x54>)
 800f732:	f7fb fa23 	bl	800ab7c <USBD_Init>
 800f736:	4603      	mov	r3, r0
 800f738:	2b00      	cmp	r3, #0
 800f73a:	d001      	beq.n	800f740 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800f73c:	f7f3 fe7c 	bl	8003438 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800f740:	490f      	ldr	r1, [pc, #60]	@ (800f780 <MX_USB_Device_Init+0x58>)
 800f742:	480e      	ldr	r0, [pc, #56]	@ (800f77c <MX_USB_Device_Init+0x54>)
 800f744:	f7fb fa4a 	bl	800abdc <USBD_RegisterClass>
 800f748:	4603      	mov	r3, r0
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	d001      	beq.n	800f752 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800f74e:	f7f3 fe73 	bl	8003438 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800f752:	490c      	ldr	r1, [pc, #48]	@ (800f784 <MX_USB_Device_Init+0x5c>)
 800f754:	4809      	ldr	r0, [pc, #36]	@ (800f77c <MX_USB_Device_Init+0x54>)
 800f756:	f7fb f96b 	bl	800aa30 <USBD_CDC_RegisterInterface>
 800f75a:	4603      	mov	r3, r0
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	d001      	beq.n	800f764 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800f760:	f7f3 fe6a 	bl	8003438 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800f764:	4805      	ldr	r0, [pc, #20]	@ (800f77c <MX_USB_Device_Init+0x54>)
 800f766:	f7fb fa60 	bl	800ac2a <USBD_Start>
 800f76a:	4603      	mov	r3, r0
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	d001      	beq.n	800f774 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800f770:	f7f3 fe62 	bl	8003438 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800f774:	bf00      	nop
 800f776:	bd80      	pop	{r7, pc}
 800f778:	20000154 	.word	0x20000154
 800f77c:	20010e78 	.word	0x20010e78
 800f780:	20000038 	.word	0x20000038
 800f784:	20000140 	.word	0x20000140

0800f788 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800f788:	b580      	push	{r7, lr}
 800f78a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800f78c:	2200      	movs	r2, #0
 800f78e:	4905      	ldr	r1, [pc, #20]	@ (800f7a4 <CDC_Init_FS+0x1c>)
 800f790:	4805      	ldr	r0, [pc, #20]	@ (800f7a8 <CDC_Init_FS+0x20>)
 800f792:	f7fb f962 	bl	800aa5a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800f796:	4905      	ldr	r1, [pc, #20]	@ (800f7ac <CDC_Init_FS+0x24>)
 800f798:	4803      	ldr	r0, [pc, #12]	@ (800f7a8 <CDC_Init_FS+0x20>)
 800f79a:	f7fb f97c 	bl	800aa96 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800f79e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800f7a0:	4618      	mov	r0, r3
 800f7a2:	bd80      	pop	{r7, pc}
 800f7a4:	20011948 	.word	0x20011948
 800f7a8:	20010e78 	.word	0x20010e78
 800f7ac:	20011148 	.word	0x20011148

0800f7b0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800f7b0:	b480      	push	{r7}
 800f7b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800f7b4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800f7b6:	4618      	mov	r0, r3
 800f7b8:	46bd      	mov	sp, r7
 800f7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7be:	4770      	bx	lr

0800f7c0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800f7c0:	b480      	push	{r7}
 800f7c2:	b083      	sub	sp, #12
 800f7c4:	af00      	add	r7, sp, #0
 800f7c6:	4603      	mov	r3, r0
 800f7c8:	6039      	str	r1, [r7, #0]
 800f7ca:	71fb      	strb	r3, [r7, #7]
 800f7cc:	4613      	mov	r3, r2
 800f7ce:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800f7d0:	79fb      	ldrb	r3, [r7, #7]
 800f7d2:	2b23      	cmp	r3, #35	@ 0x23
 800f7d4:	d84a      	bhi.n	800f86c <CDC_Control_FS+0xac>
 800f7d6:	a201      	add	r2, pc, #4	@ (adr r2, 800f7dc <CDC_Control_FS+0x1c>)
 800f7d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7dc:	0800f86d 	.word	0x0800f86d
 800f7e0:	0800f86d 	.word	0x0800f86d
 800f7e4:	0800f86d 	.word	0x0800f86d
 800f7e8:	0800f86d 	.word	0x0800f86d
 800f7ec:	0800f86d 	.word	0x0800f86d
 800f7f0:	0800f86d 	.word	0x0800f86d
 800f7f4:	0800f86d 	.word	0x0800f86d
 800f7f8:	0800f86d 	.word	0x0800f86d
 800f7fc:	0800f86d 	.word	0x0800f86d
 800f800:	0800f86d 	.word	0x0800f86d
 800f804:	0800f86d 	.word	0x0800f86d
 800f808:	0800f86d 	.word	0x0800f86d
 800f80c:	0800f86d 	.word	0x0800f86d
 800f810:	0800f86d 	.word	0x0800f86d
 800f814:	0800f86d 	.word	0x0800f86d
 800f818:	0800f86d 	.word	0x0800f86d
 800f81c:	0800f86d 	.word	0x0800f86d
 800f820:	0800f86d 	.word	0x0800f86d
 800f824:	0800f86d 	.word	0x0800f86d
 800f828:	0800f86d 	.word	0x0800f86d
 800f82c:	0800f86d 	.word	0x0800f86d
 800f830:	0800f86d 	.word	0x0800f86d
 800f834:	0800f86d 	.word	0x0800f86d
 800f838:	0800f86d 	.word	0x0800f86d
 800f83c:	0800f86d 	.word	0x0800f86d
 800f840:	0800f86d 	.word	0x0800f86d
 800f844:	0800f86d 	.word	0x0800f86d
 800f848:	0800f86d 	.word	0x0800f86d
 800f84c:	0800f86d 	.word	0x0800f86d
 800f850:	0800f86d 	.word	0x0800f86d
 800f854:	0800f86d 	.word	0x0800f86d
 800f858:	0800f86d 	.word	0x0800f86d
 800f85c:	0800f86d 	.word	0x0800f86d
 800f860:	0800f86d 	.word	0x0800f86d
 800f864:	0800f86d 	.word	0x0800f86d
 800f868:	0800f86d 	.word	0x0800f86d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800f86c:	bf00      	nop
  }

  return (USBD_OK);
 800f86e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800f870:	4618      	mov	r0, r3
 800f872:	370c      	adds	r7, #12
 800f874:	46bd      	mov	sp, r7
 800f876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f87a:	4770      	bx	lr

0800f87c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800f87c:	b580      	push	{r7, lr}
 800f87e:	b082      	sub	sp, #8
 800f880:	af00      	add	r7, sp, #0
 800f882:	6078      	str	r0, [r7, #4]
 800f884:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800f886:	6879      	ldr	r1, [r7, #4]
 800f888:	4805      	ldr	r0, [pc, #20]	@ (800f8a0 <CDC_Receive_FS+0x24>)
 800f88a:	f7fb f904 	bl	800aa96 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800f88e:	4804      	ldr	r0, [pc, #16]	@ (800f8a0 <CDC_Receive_FS+0x24>)
 800f890:	f7fb f94a 	bl	800ab28 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800f894:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800f896:	4618      	mov	r0, r3
 800f898:	3708      	adds	r7, #8
 800f89a:	46bd      	mov	sp, r7
 800f89c:	bd80      	pop	{r7, pc}
 800f89e:	bf00      	nop
 800f8a0:	20010e78 	.word	0x20010e78

0800f8a4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800f8a4:	b580      	push	{r7, lr}
 800f8a6:	b084      	sub	sp, #16
 800f8a8:	af00      	add	r7, sp, #0
 800f8aa:	6078      	str	r0, [r7, #4]
 800f8ac:	460b      	mov	r3, r1
 800f8ae:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800f8b0:	2300      	movs	r3, #0
 800f8b2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800f8b4:	4b0d      	ldr	r3, [pc, #52]	@ (800f8ec <CDC_Transmit_FS+0x48>)
 800f8b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f8ba:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800f8bc:	68bb      	ldr	r3, [r7, #8]
 800f8be:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	d001      	beq.n	800f8ca <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800f8c6:	2301      	movs	r3, #1
 800f8c8:	e00b      	b.n	800f8e2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800f8ca:	887b      	ldrh	r3, [r7, #2]
 800f8cc:	461a      	mov	r2, r3
 800f8ce:	6879      	ldr	r1, [r7, #4]
 800f8d0:	4806      	ldr	r0, [pc, #24]	@ (800f8ec <CDC_Transmit_FS+0x48>)
 800f8d2:	f7fb f8c2 	bl	800aa5a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800f8d6:	4805      	ldr	r0, [pc, #20]	@ (800f8ec <CDC_Transmit_FS+0x48>)
 800f8d8:	f7fb f8f6 	bl	800aac8 <USBD_CDC_TransmitPacket>
 800f8dc:	4603      	mov	r3, r0
 800f8de:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800f8e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f8e2:	4618      	mov	r0, r3
 800f8e4:	3710      	adds	r7, #16
 800f8e6:	46bd      	mov	sp, r7
 800f8e8:	bd80      	pop	{r7, pc}
 800f8ea:	bf00      	nop
 800f8ec:	20010e78 	.word	0x20010e78

0800f8f0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800f8f0:	b480      	push	{r7}
 800f8f2:	b087      	sub	sp, #28
 800f8f4:	af00      	add	r7, sp, #0
 800f8f6:	60f8      	str	r0, [r7, #12]
 800f8f8:	60b9      	str	r1, [r7, #8]
 800f8fa:	4613      	mov	r3, r2
 800f8fc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800f8fe:	2300      	movs	r3, #0
 800f900:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800f902:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f906:	4618      	mov	r0, r3
 800f908:	371c      	adds	r7, #28
 800f90a:	46bd      	mov	sp, r7
 800f90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f910:	4770      	bx	lr
	...

0800f914 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f914:	b480      	push	{r7}
 800f916:	b083      	sub	sp, #12
 800f918:	af00      	add	r7, sp, #0
 800f91a:	4603      	mov	r3, r0
 800f91c:	6039      	str	r1, [r7, #0]
 800f91e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800f920:	683b      	ldr	r3, [r7, #0]
 800f922:	2212      	movs	r2, #18
 800f924:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800f926:	4b03      	ldr	r3, [pc, #12]	@ (800f934 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800f928:	4618      	mov	r0, r3
 800f92a:	370c      	adds	r7, #12
 800f92c:	46bd      	mov	sp, r7
 800f92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f932:	4770      	bx	lr
 800f934:	20000174 	.word	0x20000174

0800f938 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f938:	b480      	push	{r7}
 800f93a:	b083      	sub	sp, #12
 800f93c:	af00      	add	r7, sp, #0
 800f93e:	4603      	mov	r3, r0
 800f940:	6039      	str	r1, [r7, #0]
 800f942:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800f944:	683b      	ldr	r3, [r7, #0]
 800f946:	2204      	movs	r2, #4
 800f948:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800f94a:	4b03      	ldr	r3, [pc, #12]	@ (800f958 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800f94c:	4618      	mov	r0, r3
 800f94e:	370c      	adds	r7, #12
 800f950:	46bd      	mov	sp, r7
 800f952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f956:	4770      	bx	lr
 800f958:	20000188 	.word	0x20000188

0800f95c <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f95c:	b580      	push	{r7, lr}
 800f95e:	b082      	sub	sp, #8
 800f960:	af00      	add	r7, sp, #0
 800f962:	4603      	mov	r3, r0
 800f964:	6039      	str	r1, [r7, #0]
 800f966:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f968:	79fb      	ldrb	r3, [r7, #7]
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d105      	bne.n	800f97a <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800f96e:	683a      	ldr	r2, [r7, #0]
 800f970:	4907      	ldr	r1, [pc, #28]	@ (800f990 <USBD_CDC_ProductStrDescriptor+0x34>)
 800f972:	4808      	ldr	r0, [pc, #32]	@ (800f994 <USBD_CDC_ProductStrDescriptor+0x38>)
 800f974:	f7fc f941 	bl	800bbfa <USBD_GetString>
 800f978:	e004      	b.n	800f984 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800f97a:	683a      	ldr	r2, [r7, #0]
 800f97c:	4904      	ldr	r1, [pc, #16]	@ (800f990 <USBD_CDC_ProductStrDescriptor+0x34>)
 800f97e:	4805      	ldr	r0, [pc, #20]	@ (800f994 <USBD_CDC_ProductStrDescriptor+0x38>)
 800f980:	f7fc f93b 	bl	800bbfa <USBD_GetString>
  }
  return USBD_StrDesc;
 800f984:	4b02      	ldr	r3, [pc, #8]	@ (800f990 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800f986:	4618      	mov	r0, r3
 800f988:	3708      	adds	r7, #8
 800f98a:	46bd      	mov	sp, r7
 800f98c:	bd80      	pop	{r7, pc}
 800f98e:	bf00      	nop
 800f990:	20012148 	.word	0x20012148
 800f994:	08013e54 	.word	0x08013e54

0800f998 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f998:	b580      	push	{r7, lr}
 800f99a:	b082      	sub	sp, #8
 800f99c:	af00      	add	r7, sp, #0
 800f99e:	4603      	mov	r3, r0
 800f9a0:	6039      	str	r1, [r7, #0]
 800f9a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f9a4:	683a      	ldr	r2, [r7, #0]
 800f9a6:	4904      	ldr	r1, [pc, #16]	@ (800f9b8 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800f9a8:	4804      	ldr	r0, [pc, #16]	@ (800f9bc <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800f9aa:	f7fc f926 	bl	800bbfa <USBD_GetString>
  return USBD_StrDesc;
 800f9ae:	4b02      	ldr	r3, [pc, #8]	@ (800f9b8 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800f9b0:	4618      	mov	r0, r3
 800f9b2:	3708      	adds	r7, #8
 800f9b4:	46bd      	mov	sp, r7
 800f9b6:	bd80      	pop	{r7, pc}
 800f9b8:	20012148 	.word	0x20012148
 800f9bc:	08013e6c 	.word	0x08013e6c

0800f9c0 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f9c0:	b580      	push	{r7, lr}
 800f9c2:	b082      	sub	sp, #8
 800f9c4:	af00      	add	r7, sp, #0
 800f9c6:	4603      	mov	r3, r0
 800f9c8:	6039      	str	r1, [r7, #0]
 800f9ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800f9cc:	683b      	ldr	r3, [r7, #0]
 800f9ce:	221a      	movs	r2, #26
 800f9d0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800f9d2:	f000 f843 	bl	800fa5c <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800f9d6:	4b02      	ldr	r3, [pc, #8]	@ (800f9e0 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800f9d8:	4618      	mov	r0, r3
 800f9da:	3708      	adds	r7, #8
 800f9dc:	46bd      	mov	sp, r7
 800f9de:	bd80      	pop	{r7, pc}
 800f9e0:	2000018c 	.word	0x2000018c

0800f9e4 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f9e4:	b580      	push	{r7, lr}
 800f9e6:	b082      	sub	sp, #8
 800f9e8:	af00      	add	r7, sp, #0
 800f9ea:	4603      	mov	r3, r0
 800f9ec:	6039      	str	r1, [r7, #0]
 800f9ee:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800f9f0:	79fb      	ldrb	r3, [r7, #7]
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d105      	bne.n	800fa02 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800f9f6:	683a      	ldr	r2, [r7, #0]
 800f9f8:	4907      	ldr	r1, [pc, #28]	@ (800fa18 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800f9fa:	4808      	ldr	r0, [pc, #32]	@ (800fa1c <USBD_CDC_ConfigStrDescriptor+0x38>)
 800f9fc:	f7fc f8fd 	bl	800bbfa <USBD_GetString>
 800fa00:	e004      	b.n	800fa0c <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800fa02:	683a      	ldr	r2, [r7, #0]
 800fa04:	4904      	ldr	r1, [pc, #16]	@ (800fa18 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800fa06:	4805      	ldr	r0, [pc, #20]	@ (800fa1c <USBD_CDC_ConfigStrDescriptor+0x38>)
 800fa08:	f7fc f8f7 	bl	800bbfa <USBD_GetString>
  }
  return USBD_StrDesc;
 800fa0c:	4b02      	ldr	r3, [pc, #8]	@ (800fa18 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800fa0e:	4618      	mov	r0, r3
 800fa10:	3708      	adds	r7, #8
 800fa12:	46bd      	mov	sp, r7
 800fa14:	bd80      	pop	{r7, pc}
 800fa16:	bf00      	nop
 800fa18:	20012148 	.word	0x20012148
 800fa1c:	08013e80 	.word	0x08013e80

0800fa20 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fa20:	b580      	push	{r7, lr}
 800fa22:	b082      	sub	sp, #8
 800fa24:	af00      	add	r7, sp, #0
 800fa26:	4603      	mov	r3, r0
 800fa28:	6039      	str	r1, [r7, #0]
 800fa2a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800fa2c:	79fb      	ldrb	r3, [r7, #7]
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	d105      	bne.n	800fa3e <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800fa32:	683a      	ldr	r2, [r7, #0]
 800fa34:	4907      	ldr	r1, [pc, #28]	@ (800fa54 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800fa36:	4808      	ldr	r0, [pc, #32]	@ (800fa58 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800fa38:	f7fc f8df 	bl	800bbfa <USBD_GetString>
 800fa3c:	e004      	b.n	800fa48 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800fa3e:	683a      	ldr	r2, [r7, #0]
 800fa40:	4904      	ldr	r1, [pc, #16]	@ (800fa54 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800fa42:	4805      	ldr	r0, [pc, #20]	@ (800fa58 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800fa44:	f7fc f8d9 	bl	800bbfa <USBD_GetString>
  }
  return USBD_StrDesc;
 800fa48:	4b02      	ldr	r3, [pc, #8]	@ (800fa54 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800fa4a:	4618      	mov	r0, r3
 800fa4c:	3708      	adds	r7, #8
 800fa4e:	46bd      	mov	sp, r7
 800fa50:	bd80      	pop	{r7, pc}
 800fa52:	bf00      	nop
 800fa54:	20012148 	.word	0x20012148
 800fa58:	08013e8c 	.word	0x08013e8c

0800fa5c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800fa5c:	b580      	push	{r7, lr}
 800fa5e:	b084      	sub	sp, #16
 800fa60:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800fa62:	4b0f      	ldr	r3, [pc, #60]	@ (800faa0 <Get_SerialNum+0x44>)
 800fa64:	681b      	ldr	r3, [r3, #0]
 800fa66:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800fa68:	4b0e      	ldr	r3, [pc, #56]	@ (800faa4 <Get_SerialNum+0x48>)
 800fa6a:	681b      	ldr	r3, [r3, #0]
 800fa6c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800fa6e:	4b0e      	ldr	r3, [pc, #56]	@ (800faa8 <Get_SerialNum+0x4c>)
 800fa70:	681b      	ldr	r3, [r3, #0]
 800fa72:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800fa74:	68fa      	ldr	r2, [r7, #12]
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	4413      	add	r3, r2
 800fa7a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800fa7c:	68fb      	ldr	r3, [r7, #12]
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d009      	beq.n	800fa96 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800fa82:	2208      	movs	r2, #8
 800fa84:	4909      	ldr	r1, [pc, #36]	@ (800faac <Get_SerialNum+0x50>)
 800fa86:	68f8      	ldr	r0, [r7, #12]
 800fa88:	f000 f814 	bl	800fab4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800fa8c:	2204      	movs	r2, #4
 800fa8e:	4908      	ldr	r1, [pc, #32]	@ (800fab0 <Get_SerialNum+0x54>)
 800fa90:	68b8      	ldr	r0, [r7, #8]
 800fa92:	f000 f80f 	bl	800fab4 <IntToUnicode>
  }
}
 800fa96:	bf00      	nop
 800fa98:	3710      	adds	r7, #16
 800fa9a:	46bd      	mov	sp, r7
 800fa9c:	bd80      	pop	{r7, pc}
 800fa9e:	bf00      	nop
 800faa0:	1fff7590 	.word	0x1fff7590
 800faa4:	1fff7594 	.word	0x1fff7594
 800faa8:	1fff7598 	.word	0x1fff7598
 800faac:	2000018e 	.word	0x2000018e
 800fab0:	2000019e 	.word	0x2000019e

0800fab4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800fab4:	b480      	push	{r7}
 800fab6:	b087      	sub	sp, #28
 800fab8:	af00      	add	r7, sp, #0
 800faba:	60f8      	str	r0, [r7, #12]
 800fabc:	60b9      	str	r1, [r7, #8]
 800fabe:	4613      	mov	r3, r2
 800fac0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800fac2:	2300      	movs	r3, #0
 800fac4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800fac6:	2300      	movs	r3, #0
 800fac8:	75fb      	strb	r3, [r7, #23]
 800faca:	e027      	b.n	800fb1c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800facc:	68fb      	ldr	r3, [r7, #12]
 800face:	0f1b      	lsrs	r3, r3, #28
 800fad0:	2b09      	cmp	r3, #9
 800fad2:	d80b      	bhi.n	800faec <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800fad4:	68fb      	ldr	r3, [r7, #12]
 800fad6:	0f1b      	lsrs	r3, r3, #28
 800fad8:	b2da      	uxtb	r2, r3
 800fada:	7dfb      	ldrb	r3, [r7, #23]
 800fadc:	005b      	lsls	r3, r3, #1
 800fade:	4619      	mov	r1, r3
 800fae0:	68bb      	ldr	r3, [r7, #8]
 800fae2:	440b      	add	r3, r1
 800fae4:	3230      	adds	r2, #48	@ 0x30
 800fae6:	b2d2      	uxtb	r2, r2
 800fae8:	701a      	strb	r2, [r3, #0]
 800faea:	e00a      	b.n	800fb02 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800faec:	68fb      	ldr	r3, [r7, #12]
 800faee:	0f1b      	lsrs	r3, r3, #28
 800faf0:	b2da      	uxtb	r2, r3
 800faf2:	7dfb      	ldrb	r3, [r7, #23]
 800faf4:	005b      	lsls	r3, r3, #1
 800faf6:	4619      	mov	r1, r3
 800faf8:	68bb      	ldr	r3, [r7, #8]
 800fafa:	440b      	add	r3, r1
 800fafc:	3237      	adds	r2, #55	@ 0x37
 800fafe:	b2d2      	uxtb	r2, r2
 800fb00:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800fb02:	68fb      	ldr	r3, [r7, #12]
 800fb04:	011b      	lsls	r3, r3, #4
 800fb06:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800fb08:	7dfb      	ldrb	r3, [r7, #23]
 800fb0a:	005b      	lsls	r3, r3, #1
 800fb0c:	3301      	adds	r3, #1
 800fb0e:	68ba      	ldr	r2, [r7, #8]
 800fb10:	4413      	add	r3, r2
 800fb12:	2200      	movs	r2, #0
 800fb14:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800fb16:	7dfb      	ldrb	r3, [r7, #23]
 800fb18:	3301      	adds	r3, #1
 800fb1a:	75fb      	strb	r3, [r7, #23]
 800fb1c:	7dfa      	ldrb	r2, [r7, #23]
 800fb1e:	79fb      	ldrb	r3, [r7, #7]
 800fb20:	429a      	cmp	r2, r3
 800fb22:	d3d3      	bcc.n	800facc <IntToUnicode+0x18>
  }
}
 800fb24:	bf00      	nop
 800fb26:	bf00      	nop
 800fb28:	371c      	adds	r7, #28
 800fb2a:	46bd      	mov	sp, r7
 800fb2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb30:	4770      	bx	lr
	...

0800fb34 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fb34:	b580      	push	{r7, lr}
 800fb36:	b098      	sub	sp, #96	@ 0x60
 800fb38:	af00      	add	r7, sp, #0
 800fb3a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800fb3c:	f107 0310 	add.w	r3, r7, #16
 800fb40:	2250      	movs	r2, #80	@ 0x50
 800fb42:	2100      	movs	r1, #0
 800fb44:	4618      	mov	r0, r3
 800fb46:	f001 f84d 	bl	8010be4 <memset>
  if(pcdHandle->Instance==USB)
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	681b      	ldr	r3, [r3, #0]
 800fb4e:	4a15      	ldr	r2, [pc, #84]	@ (800fba4 <HAL_PCD_MspInit+0x70>)
 800fb50:	4293      	cmp	r3, r2
 800fb52:	d122      	bne.n	800fb9a <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800fb54:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800fb58:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800fb5a:	2300      	movs	r3, #0
 800fb5c:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800fb5e:	f107 0310 	add.w	r3, r7, #16
 800fb62:	4618      	mov	r0, r3
 800fb64:	f7f7 f9a6 	bl	8006eb4 <HAL_RCCEx_PeriphCLKConfig>
 800fb68:	4603      	mov	r3, r0
 800fb6a:	2b00      	cmp	r3, #0
 800fb6c:	d001      	beq.n	800fb72 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800fb6e:	f7f3 fc63 	bl	8003438 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800fb72:	4b0d      	ldr	r3, [pc, #52]	@ (800fba8 <HAL_PCD_MspInit+0x74>)
 800fb74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fb76:	4a0c      	ldr	r2, [pc, #48]	@ (800fba8 <HAL_PCD_MspInit+0x74>)
 800fb78:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800fb7c:	6593      	str	r3, [r2, #88]	@ 0x58
 800fb7e:	4b0a      	ldr	r3, [pc, #40]	@ (800fba8 <HAL_PCD_MspInit+0x74>)
 800fb80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fb82:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800fb86:	60fb      	str	r3, [r7, #12]
 800fb88:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 800fb8a:	2200      	movs	r2, #0
 800fb8c:	2105      	movs	r1, #5
 800fb8e:	2014      	movs	r0, #20
 800fb90:	f7f4 fa38 	bl	8004004 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800fb94:	2014      	movs	r0, #20
 800fb96:	f7f4 fa4f 	bl	8004038 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800fb9a:	bf00      	nop
 800fb9c:	3760      	adds	r7, #96	@ 0x60
 800fb9e:	46bd      	mov	sp, r7
 800fba0:	bd80      	pop	{r7, pc}
 800fba2:	bf00      	nop
 800fba4:	40005c00 	.word	0x40005c00
 800fba8:	40021000 	.word	0x40021000

0800fbac <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fbac:	b580      	push	{r7, lr}
 800fbae:	b082      	sub	sp, #8
 800fbb0:	af00      	add	r7, sp, #0
 800fbb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800fbc0:	4619      	mov	r1, r3
 800fbc2:	4610      	mov	r0, r2
 800fbc4:	f7fb f87c 	bl	800acc0 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800fbc8:	bf00      	nop
 800fbca:	3708      	adds	r7, #8
 800fbcc:	46bd      	mov	sp, r7
 800fbce:	bd80      	pop	{r7, pc}

0800fbd0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fbd0:	b580      	push	{r7, lr}
 800fbd2:	b082      	sub	sp, #8
 800fbd4:	af00      	add	r7, sp, #0
 800fbd6:	6078      	str	r0, [r7, #4]
 800fbd8:	460b      	mov	r3, r1
 800fbda:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800fbe2:	78fa      	ldrb	r2, [r7, #3]
 800fbe4:	6879      	ldr	r1, [r7, #4]
 800fbe6:	4613      	mov	r3, r2
 800fbe8:	009b      	lsls	r3, r3, #2
 800fbea:	4413      	add	r3, r2
 800fbec:	00db      	lsls	r3, r3, #3
 800fbee:	440b      	add	r3, r1
 800fbf0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800fbf4:	681a      	ldr	r2, [r3, #0]
 800fbf6:	78fb      	ldrb	r3, [r7, #3]
 800fbf8:	4619      	mov	r1, r3
 800fbfa:	f7fb f8b6 	bl	800ad6a <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800fbfe:	bf00      	nop
 800fc00:	3708      	adds	r7, #8
 800fc02:	46bd      	mov	sp, r7
 800fc04:	bd80      	pop	{r7, pc}

0800fc06 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fc06:	b580      	push	{r7, lr}
 800fc08:	b082      	sub	sp, #8
 800fc0a:	af00      	add	r7, sp, #0
 800fc0c:	6078      	str	r0, [r7, #4]
 800fc0e:	460b      	mov	r3, r1
 800fc10:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800fc18:	78fa      	ldrb	r2, [r7, #3]
 800fc1a:	6879      	ldr	r1, [r7, #4]
 800fc1c:	4613      	mov	r3, r2
 800fc1e:	009b      	lsls	r3, r3, #2
 800fc20:	4413      	add	r3, r2
 800fc22:	00db      	lsls	r3, r3, #3
 800fc24:	440b      	add	r3, r1
 800fc26:	3324      	adds	r3, #36	@ 0x24
 800fc28:	681a      	ldr	r2, [r3, #0]
 800fc2a:	78fb      	ldrb	r3, [r7, #3]
 800fc2c:	4619      	mov	r1, r3
 800fc2e:	f7fb f8ff 	bl	800ae30 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800fc32:	bf00      	nop
 800fc34:	3708      	adds	r7, #8
 800fc36:	46bd      	mov	sp, r7
 800fc38:	bd80      	pop	{r7, pc}

0800fc3a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fc3a:	b580      	push	{r7, lr}
 800fc3c:	b082      	sub	sp, #8
 800fc3e:	af00      	add	r7, sp, #0
 800fc40:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800fc48:	4618      	mov	r0, r3
 800fc4a:	f7fb fa13 	bl	800b074 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800fc4e:	bf00      	nop
 800fc50:	3708      	adds	r7, #8
 800fc52:	46bd      	mov	sp, r7
 800fc54:	bd80      	pop	{r7, pc}

0800fc56 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fc56:	b580      	push	{r7, lr}
 800fc58:	b084      	sub	sp, #16
 800fc5a:	af00      	add	r7, sp, #0
 800fc5c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800fc5e:	2301      	movs	r3, #1
 800fc60:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	795b      	ldrb	r3, [r3, #5]
 800fc66:	2b02      	cmp	r3, #2
 800fc68:	d001      	beq.n	800fc6e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800fc6a:	f7f3 fbe5 	bl	8003438 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800fc74:	7bfa      	ldrb	r2, [r7, #15]
 800fc76:	4611      	mov	r1, r2
 800fc78:	4618      	mov	r0, r3
 800fc7a:	f7fb f9bd 	bl	800aff8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800fc84:	4618      	mov	r0, r3
 800fc86:	f7fb f969 	bl	800af5c <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800fc8a:	bf00      	nop
 800fc8c:	3710      	adds	r7, #16
 800fc8e:	46bd      	mov	sp, r7
 800fc90:	bd80      	pop	{r7, pc}
	...

0800fc94 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fc94:	b580      	push	{r7, lr}
 800fc96:	b082      	sub	sp, #8
 800fc98:	af00      	add	r7, sp, #0
 800fc9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800fca2:	4618      	mov	r0, r3
 800fca4:	f7fb f9b8 	bl	800b018 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	7a5b      	ldrb	r3, [r3, #9]
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d005      	beq.n	800fcbc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800fcb0:	4b04      	ldr	r3, [pc, #16]	@ (800fcc4 <HAL_PCD_SuspendCallback+0x30>)
 800fcb2:	691b      	ldr	r3, [r3, #16]
 800fcb4:	4a03      	ldr	r2, [pc, #12]	@ (800fcc4 <HAL_PCD_SuspendCallback+0x30>)
 800fcb6:	f043 0306 	orr.w	r3, r3, #6
 800fcba:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800fcbc:	bf00      	nop
 800fcbe:	3708      	adds	r7, #8
 800fcc0:	46bd      	mov	sp, r7
 800fcc2:	bd80      	pop	{r7, pc}
 800fcc4:	e000ed00 	.word	0xe000ed00

0800fcc8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fcc8:	b580      	push	{r7, lr}
 800fcca:	b082      	sub	sp, #8
 800fccc:	af00      	add	r7, sp, #0
 800fcce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	7a5b      	ldrb	r3, [r3, #9]
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	d007      	beq.n	800fce8 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800fcd8:	4b08      	ldr	r3, [pc, #32]	@ (800fcfc <HAL_PCD_ResumeCallback+0x34>)
 800fcda:	691b      	ldr	r3, [r3, #16]
 800fcdc:	4a07      	ldr	r2, [pc, #28]	@ (800fcfc <HAL_PCD_ResumeCallback+0x34>)
 800fcde:	f023 0306 	bic.w	r3, r3, #6
 800fce2:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800fce4:	f000 f9f8 	bl	80100d8 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800fcee:	4618      	mov	r0, r3
 800fcf0:	f7fb f9a8 	bl	800b044 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800fcf4:	bf00      	nop
 800fcf6:	3708      	adds	r7, #8
 800fcf8:	46bd      	mov	sp, r7
 800fcfa:	bd80      	pop	{r7, pc}
 800fcfc:	e000ed00 	.word	0xe000ed00

0800fd00 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800fd00:	b580      	push	{r7, lr}
 800fd02:	b082      	sub	sp, #8
 800fd04:	af00      	add	r7, sp, #0
 800fd06:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800fd08:	4a2b      	ldr	r2, [pc, #172]	@ (800fdb8 <USBD_LL_Init+0xb8>)
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	4a29      	ldr	r2, [pc, #164]	@ (800fdb8 <USBD_LL_Init+0xb8>)
 800fd14:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 800fd18:	4b27      	ldr	r3, [pc, #156]	@ (800fdb8 <USBD_LL_Init+0xb8>)
 800fd1a:	4a28      	ldr	r2, [pc, #160]	@ (800fdbc <USBD_LL_Init+0xbc>)
 800fd1c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800fd1e:	4b26      	ldr	r3, [pc, #152]	@ (800fdb8 <USBD_LL_Init+0xb8>)
 800fd20:	2208      	movs	r2, #8
 800fd22:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800fd24:	4b24      	ldr	r3, [pc, #144]	@ (800fdb8 <USBD_LL_Init+0xb8>)
 800fd26:	2202      	movs	r2, #2
 800fd28:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800fd2a:	4b23      	ldr	r3, [pc, #140]	@ (800fdb8 <USBD_LL_Init+0xb8>)
 800fd2c:	2202      	movs	r2, #2
 800fd2e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800fd30:	4b21      	ldr	r3, [pc, #132]	@ (800fdb8 <USBD_LL_Init+0xb8>)
 800fd32:	2200      	movs	r2, #0
 800fd34:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800fd36:	4b20      	ldr	r3, [pc, #128]	@ (800fdb8 <USBD_LL_Init+0xb8>)
 800fd38:	2200      	movs	r2, #0
 800fd3a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800fd3c:	4b1e      	ldr	r3, [pc, #120]	@ (800fdb8 <USBD_LL_Init+0xb8>)
 800fd3e:	2200      	movs	r2, #0
 800fd40:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800fd42:	4b1d      	ldr	r3, [pc, #116]	@ (800fdb8 <USBD_LL_Init+0xb8>)
 800fd44:	2200      	movs	r2, #0
 800fd46:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800fd48:	481b      	ldr	r0, [pc, #108]	@ (800fdb8 <USBD_LL_Init+0xb8>)
 800fd4a:	f7f4 fdb3 	bl	80048b4 <HAL_PCD_Init>
 800fd4e:	4603      	mov	r3, r0
 800fd50:	2b00      	cmp	r3, #0
 800fd52:	d001      	beq.n	800fd58 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800fd54:	f7f3 fb70 	bl	8003438 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800fd5e:	2318      	movs	r3, #24
 800fd60:	2200      	movs	r2, #0
 800fd62:	2100      	movs	r1, #0
 800fd64:	f7f6 fa3a 	bl	80061dc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800fd6e:	2358      	movs	r3, #88	@ 0x58
 800fd70:	2200      	movs	r2, #0
 800fd72:	2180      	movs	r1, #128	@ 0x80
 800fd74:	f7f6 fa32 	bl	80061dc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800fd7e:	23c0      	movs	r3, #192	@ 0xc0
 800fd80:	2200      	movs	r2, #0
 800fd82:	2181      	movs	r1, #129	@ 0x81
 800fd84:	f7f6 fa2a 	bl	80061dc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800fd8e:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800fd92:	2200      	movs	r2, #0
 800fd94:	2101      	movs	r1, #1
 800fd96:	f7f6 fa21 	bl	80061dc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800fda0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800fda4:	2200      	movs	r2, #0
 800fda6:	2182      	movs	r1, #130	@ 0x82
 800fda8:	f7f6 fa18 	bl	80061dc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800fdac:	2300      	movs	r3, #0
}
 800fdae:	4618      	mov	r0, r3
 800fdb0:	3708      	adds	r7, #8
 800fdb2:	46bd      	mov	sp, r7
 800fdb4:	bd80      	pop	{r7, pc}
 800fdb6:	bf00      	nop
 800fdb8:	20012348 	.word	0x20012348
 800fdbc:	40005c00 	.word	0x40005c00

0800fdc0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800fdc0:	b580      	push	{r7, lr}
 800fdc2:	b084      	sub	sp, #16
 800fdc4:	af00      	add	r7, sp, #0
 800fdc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fdc8:	2300      	movs	r3, #0
 800fdca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fdcc:	2300      	movs	r3, #0
 800fdce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800fdd6:	4618      	mov	r0, r3
 800fdd8:	f7f4 fe3a 	bl	8004a50 <HAL_PCD_Start>
 800fddc:	4603      	mov	r3, r0
 800fdde:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fde0:	7bfb      	ldrb	r3, [r7, #15]
 800fde2:	4618      	mov	r0, r3
 800fde4:	f000 f97e 	bl	80100e4 <USBD_Get_USB_Status>
 800fde8:	4603      	mov	r3, r0
 800fdea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fdec:	7bbb      	ldrb	r3, [r7, #14]
}
 800fdee:	4618      	mov	r0, r3
 800fdf0:	3710      	adds	r7, #16
 800fdf2:	46bd      	mov	sp, r7
 800fdf4:	bd80      	pop	{r7, pc}

0800fdf6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800fdf6:	b580      	push	{r7, lr}
 800fdf8:	b084      	sub	sp, #16
 800fdfa:	af00      	add	r7, sp, #0
 800fdfc:	6078      	str	r0, [r7, #4]
 800fdfe:	4608      	mov	r0, r1
 800fe00:	4611      	mov	r1, r2
 800fe02:	461a      	mov	r2, r3
 800fe04:	4603      	mov	r3, r0
 800fe06:	70fb      	strb	r3, [r7, #3]
 800fe08:	460b      	mov	r3, r1
 800fe0a:	70bb      	strb	r3, [r7, #2]
 800fe0c:	4613      	mov	r3, r2
 800fe0e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fe10:	2300      	movs	r3, #0
 800fe12:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fe14:	2300      	movs	r3, #0
 800fe16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800fe1e:	78bb      	ldrb	r3, [r7, #2]
 800fe20:	883a      	ldrh	r2, [r7, #0]
 800fe22:	78f9      	ldrb	r1, [r7, #3]
 800fe24:	f7f4 ff81 	bl	8004d2a <HAL_PCD_EP_Open>
 800fe28:	4603      	mov	r3, r0
 800fe2a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fe2c:	7bfb      	ldrb	r3, [r7, #15]
 800fe2e:	4618      	mov	r0, r3
 800fe30:	f000 f958 	bl	80100e4 <USBD_Get_USB_Status>
 800fe34:	4603      	mov	r3, r0
 800fe36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fe38:	7bbb      	ldrb	r3, [r7, #14]
}
 800fe3a:	4618      	mov	r0, r3
 800fe3c:	3710      	adds	r7, #16
 800fe3e:	46bd      	mov	sp, r7
 800fe40:	bd80      	pop	{r7, pc}

0800fe42 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fe42:	b580      	push	{r7, lr}
 800fe44:	b084      	sub	sp, #16
 800fe46:	af00      	add	r7, sp, #0
 800fe48:	6078      	str	r0, [r7, #4]
 800fe4a:	460b      	mov	r3, r1
 800fe4c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fe4e:	2300      	movs	r3, #0
 800fe50:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fe52:	2300      	movs	r3, #0
 800fe54:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800fe5c:	78fa      	ldrb	r2, [r7, #3]
 800fe5e:	4611      	mov	r1, r2
 800fe60:	4618      	mov	r0, r3
 800fe62:	f7f4 ffc1 	bl	8004de8 <HAL_PCD_EP_Close>
 800fe66:	4603      	mov	r3, r0
 800fe68:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fe6a:	7bfb      	ldrb	r3, [r7, #15]
 800fe6c:	4618      	mov	r0, r3
 800fe6e:	f000 f939 	bl	80100e4 <USBD_Get_USB_Status>
 800fe72:	4603      	mov	r3, r0
 800fe74:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fe76:	7bbb      	ldrb	r3, [r7, #14]
}
 800fe78:	4618      	mov	r0, r3
 800fe7a:	3710      	adds	r7, #16
 800fe7c:	46bd      	mov	sp, r7
 800fe7e:	bd80      	pop	{r7, pc}

0800fe80 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fe80:	b580      	push	{r7, lr}
 800fe82:	b084      	sub	sp, #16
 800fe84:	af00      	add	r7, sp, #0
 800fe86:	6078      	str	r0, [r7, #4]
 800fe88:	460b      	mov	r3, r1
 800fe8a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fe8c:	2300      	movs	r3, #0
 800fe8e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fe90:	2300      	movs	r3, #0
 800fe92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800fe9a:	78fa      	ldrb	r2, [r7, #3]
 800fe9c:	4611      	mov	r1, r2
 800fe9e:	4618      	mov	r0, r3
 800fea0:	f7f5 f86a 	bl	8004f78 <HAL_PCD_EP_SetStall>
 800fea4:	4603      	mov	r3, r0
 800fea6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fea8:	7bfb      	ldrb	r3, [r7, #15]
 800feaa:	4618      	mov	r0, r3
 800feac:	f000 f91a 	bl	80100e4 <USBD_Get_USB_Status>
 800feb0:	4603      	mov	r3, r0
 800feb2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800feb4:	7bbb      	ldrb	r3, [r7, #14]
}
 800feb6:	4618      	mov	r0, r3
 800feb8:	3710      	adds	r7, #16
 800feba:	46bd      	mov	sp, r7
 800febc:	bd80      	pop	{r7, pc}

0800febe <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800febe:	b580      	push	{r7, lr}
 800fec0:	b084      	sub	sp, #16
 800fec2:	af00      	add	r7, sp, #0
 800fec4:	6078      	str	r0, [r7, #4]
 800fec6:	460b      	mov	r3, r1
 800fec8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800feca:	2300      	movs	r3, #0
 800fecc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fece:	2300      	movs	r3, #0
 800fed0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800fed8:	78fa      	ldrb	r2, [r7, #3]
 800feda:	4611      	mov	r1, r2
 800fedc:	4618      	mov	r0, r3
 800fede:	f7f5 f89d 	bl	800501c <HAL_PCD_EP_ClrStall>
 800fee2:	4603      	mov	r3, r0
 800fee4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fee6:	7bfb      	ldrb	r3, [r7, #15]
 800fee8:	4618      	mov	r0, r3
 800feea:	f000 f8fb 	bl	80100e4 <USBD_Get_USB_Status>
 800feee:	4603      	mov	r3, r0
 800fef0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fef2:	7bbb      	ldrb	r3, [r7, #14]
}
 800fef4:	4618      	mov	r0, r3
 800fef6:	3710      	adds	r7, #16
 800fef8:	46bd      	mov	sp, r7
 800fefa:	bd80      	pop	{r7, pc}

0800fefc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fefc:	b480      	push	{r7}
 800fefe:	b085      	sub	sp, #20
 800ff00:	af00      	add	r7, sp, #0
 800ff02:	6078      	str	r0, [r7, #4]
 800ff04:	460b      	mov	r3, r1
 800ff06:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800ff0e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ff10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	da0b      	bge.n	800ff30 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ff18:	78fb      	ldrb	r3, [r7, #3]
 800ff1a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ff1e:	68f9      	ldr	r1, [r7, #12]
 800ff20:	4613      	mov	r3, r2
 800ff22:	009b      	lsls	r3, r3, #2
 800ff24:	4413      	add	r3, r2
 800ff26:	00db      	lsls	r3, r3, #3
 800ff28:	440b      	add	r3, r1
 800ff2a:	3312      	adds	r3, #18
 800ff2c:	781b      	ldrb	r3, [r3, #0]
 800ff2e:	e00b      	b.n	800ff48 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ff30:	78fb      	ldrb	r3, [r7, #3]
 800ff32:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ff36:	68f9      	ldr	r1, [r7, #12]
 800ff38:	4613      	mov	r3, r2
 800ff3a:	009b      	lsls	r3, r3, #2
 800ff3c:	4413      	add	r3, r2
 800ff3e:	00db      	lsls	r3, r3, #3
 800ff40:	440b      	add	r3, r1
 800ff42:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800ff46:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ff48:	4618      	mov	r0, r3
 800ff4a:	3714      	adds	r7, #20
 800ff4c:	46bd      	mov	sp, r7
 800ff4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff52:	4770      	bx	lr

0800ff54 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ff54:	b580      	push	{r7, lr}
 800ff56:	b084      	sub	sp, #16
 800ff58:	af00      	add	r7, sp, #0
 800ff5a:	6078      	str	r0, [r7, #4]
 800ff5c:	460b      	mov	r3, r1
 800ff5e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ff60:	2300      	movs	r3, #0
 800ff62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ff64:	2300      	movs	r3, #0
 800ff66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800ff6e:	78fa      	ldrb	r2, [r7, #3]
 800ff70:	4611      	mov	r1, r2
 800ff72:	4618      	mov	r0, r3
 800ff74:	f7f4 feb5 	bl	8004ce2 <HAL_PCD_SetAddress>
 800ff78:	4603      	mov	r3, r0
 800ff7a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ff7c:	7bfb      	ldrb	r3, [r7, #15]
 800ff7e:	4618      	mov	r0, r3
 800ff80:	f000 f8b0 	bl	80100e4 <USBD_Get_USB_Status>
 800ff84:	4603      	mov	r3, r0
 800ff86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ff88:	7bbb      	ldrb	r3, [r7, #14]
}
 800ff8a:	4618      	mov	r0, r3
 800ff8c:	3710      	adds	r7, #16
 800ff8e:	46bd      	mov	sp, r7
 800ff90:	bd80      	pop	{r7, pc}

0800ff92 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ff92:	b580      	push	{r7, lr}
 800ff94:	b086      	sub	sp, #24
 800ff96:	af00      	add	r7, sp, #0
 800ff98:	60f8      	str	r0, [r7, #12]
 800ff9a:	607a      	str	r2, [r7, #4]
 800ff9c:	603b      	str	r3, [r7, #0]
 800ff9e:	460b      	mov	r3, r1
 800ffa0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ffa2:	2300      	movs	r3, #0
 800ffa4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ffa6:	2300      	movs	r3, #0
 800ffa8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ffaa:	68fb      	ldr	r3, [r7, #12]
 800ffac:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800ffb0:	7af9      	ldrb	r1, [r7, #11]
 800ffb2:	683b      	ldr	r3, [r7, #0]
 800ffb4:	687a      	ldr	r2, [r7, #4]
 800ffb6:	f7f4 ffa8 	bl	8004f0a <HAL_PCD_EP_Transmit>
 800ffba:	4603      	mov	r3, r0
 800ffbc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ffbe:	7dfb      	ldrb	r3, [r7, #23]
 800ffc0:	4618      	mov	r0, r3
 800ffc2:	f000 f88f 	bl	80100e4 <USBD_Get_USB_Status>
 800ffc6:	4603      	mov	r3, r0
 800ffc8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ffca:	7dbb      	ldrb	r3, [r7, #22]
}
 800ffcc:	4618      	mov	r0, r3
 800ffce:	3718      	adds	r7, #24
 800ffd0:	46bd      	mov	sp, r7
 800ffd2:	bd80      	pop	{r7, pc}

0800ffd4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ffd4:	b580      	push	{r7, lr}
 800ffd6:	b086      	sub	sp, #24
 800ffd8:	af00      	add	r7, sp, #0
 800ffda:	60f8      	str	r0, [r7, #12]
 800ffdc:	607a      	str	r2, [r7, #4]
 800ffde:	603b      	str	r3, [r7, #0]
 800ffe0:	460b      	mov	r3, r1
 800ffe2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ffe4:	2300      	movs	r3, #0
 800ffe6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ffe8:	2300      	movs	r3, #0
 800ffea:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ffec:	68fb      	ldr	r3, [r7, #12]
 800ffee:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800fff2:	7af9      	ldrb	r1, [r7, #11]
 800fff4:	683b      	ldr	r3, [r7, #0]
 800fff6:	687a      	ldr	r2, [r7, #4]
 800fff8:	f7f4 ff3e 	bl	8004e78 <HAL_PCD_EP_Receive>
 800fffc:	4603      	mov	r3, r0
 800fffe:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010000:	7dfb      	ldrb	r3, [r7, #23]
 8010002:	4618      	mov	r0, r3
 8010004:	f000 f86e 	bl	80100e4 <USBD_Get_USB_Status>
 8010008:	4603      	mov	r3, r0
 801000a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801000c:	7dbb      	ldrb	r3, [r7, #22]
}
 801000e:	4618      	mov	r0, r3
 8010010:	3718      	adds	r7, #24
 8010012:	46bd      	mov	sp, r7
 8010014:	bd80      	pop	{r7, pc}

08010016 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010016:	b580      	push	{r7, lr}
 8010018:	b082      	sub	sp, #8
 801001a:	af00      	add	r7, sp, #0
 801001c:	6078      	str	r0, [r7, #4]
 801001e:	460b      	mov	r3, r1
 8010020:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8010028:	78fa      	ldrb	r2, [r7, #3]
 801002a:	4611      	mov	r1, r2
 801002c:	4618      	mov	r0, r3
 801002e:	f7f4 ff54 	bl	8004eda <HAL_PCD_EP_GetRxCount>
 8010032:	4603      	mov	r3, r0
}
 8010034:	4618      	mov	r0, r3
 8010036:	3708      	adds	r7, #8
 8010038:	46bd      	mov	sp, r7
 801003a:	bd80      	pop	{r7, pc}

0801003c <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801003c:	b580      	push	{r7, lr}
 801003e:	b082      	sub	sp, #8
 8010040:	af00      	add	r7, sp, #0
 8010042:	6078      	str	r0, [r7, #4]
 8010044:	460b      	mov	r3, r1
 8010046:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8010048:	78fb      	ldrb	r3, [r7, #3]
 801004a:	2b00      	cmp	r3, #0
 801004c:	d002      	beq.n	8010054 <HAL_PCDEx_LPM_Callback+0x18>
 801004e:	2b01      	cmp	r3, #1
 8010050:	d013      	beq.n	801007a <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8010052:	e023      	b.n	801009c <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	7a5b      	ldrb	r3, [r3, #9]
 8010058:	2b00      	cmp	r3, #0
 801005a:	d007      	beq.n	801006c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 801005c:	f000 f83c 	bl	80100d8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010060:	4b10      	ldr	r3, [pc, #64]	@ (80100a4 <HAL_PCDEx_LPM_Callback+0x68>)
 8010062:	691b      	ldr	r3, [r3, #16]
 8010064:	4a0f      	ldr	r2, [pc, #60]	@ (80100a4 <HAL_PCDEx_LPM_Callback+0x68>)
 8010066:	f023 0306 	bic.w	r3, r3, #6
 801006a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010072:	4618      	mov	r0, r3
 8010074:	f7fa ffe6 	bl	800b044 <USBD_LL_Resume>
    break;
 8010078:	e010      	b.n	801009c <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010080:	4618      	mov	r0, r3
 8010082:	f7fa ffc9 	bl	800b018 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	7a5b      	ldrb	r3, [r3, #9]
 801008a:	2b00      	cmp	r3, #0
 801008c:	d005      	beq.n	801009a <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801008e:	4b05      	ldr	r3, [pc, #20]	@ (80100a4 <HAL_PCDEx_LPM_Callback+0x68>)
 8010090:	691b      	ldr	r3, [r3, #16]
 8010092:	4a04      	ldr	r2, [pc, #16]	@ (80100a4 <HAL_PCDEx_LPM_Callback+0x68>)
 8010094:	f043 0306 	orr.w	r3, r3, #6
 8010098:	6113      	str	r3, [r2, #16]
    break;
 801009a:	bf00      	nop
}
 801009c:	bf00      	nop
 801009e:	3708      	adds	r7, #8
 80100a0:	46bd      	mov	sp, r7
 80100a2:	bd80      	pop	{r7, pc}
 80100a4:	e000ed00 	.word	0xe000ed00

080100a8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80100a8:	b480      	push	{r7}
 80100aa:	b083      	sub	sp, #12
 80100ac:	af00      	add	r7, sp, #0
 80100ae:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80100b0:	4b03      	ldr	r3, [pc, #12]	@ (80100c0 <USBD_static_malloc+0x18>)
}
 80100b2:	4618      	mov	r0, r3
 80100b4:	370c      	adds	r7, #12
 80100b6:	46bd      	mov	sp, r7
 80100b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100bc:	4770      	bx	lr
 80100be:	bf00      	nop
 80100c0:	20012624 	.word	0x20012624

080100c4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80100c4:	b480      	push	{r7}
 80100c6:	b083      	sub	sp, #12
 80100c8:	af00      	add	r7, sp, #0
 80100ca:	6078      	str	r0, [r7, #4]

}
 80100cc:	bf00      	nop
 80100ce:	370c      	adds	r7, #12
 80100d0:	46bd      	mov	sp, r7
 80100d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100d6:	4770      	bx	lr

080100d8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80100d8:	b580      	push	{r7, lr}
 80100da:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80100dc:	f7f2 fca4 	bl	8002a28 <SystemClock_Config>
}
 80100e0:	bf00      	nop
 80100e2:	bd80      	pop	{r7, pc}

080100e4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80100e4:	b480      	push	{r7}
 80100e6:	b085      	sub	sp, #20
 80100e8:	af00      	add	r7, sp, #0
 80100ea:	4603      	mov	r3, r0
 80100ec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80100ee:	2300      	movs	r3, #0
 80100f0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80100f2:	79fb      	ldrb	r3, [r7, #7]
 80100f4:	2b03      	cmp	r3, #3
 80100f6:	d817      	bhi.n	8010128 <USBD_Get_USB_Status+0x44>
 80100f8:	a201      	add	r2, pc, #4	@ (adr r2, 8010100 <USBD_Get_USB_Status+0x1c>)
 80100fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80100fe:	bf00      	nop
 8010100:	08010111 	.word	0x08010111
 8010104:	08010117 	.word	0x08010117
 8010108:	0801011d 	.word	0x0801011d
 801010c:	08010123 	.word	0x08010123
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8010110:	2300      	movs	r3, #0
 8010112:	73fb      	strb	r3, [r7, #15]
    break;
 8010114:	e00b      	b.n	801012e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010116:	2303      	movs	r3, #3
 8010118:	73fb      	strb	r3, [r7, #15]
    break;
 801011a:	e008      	b.n	801012e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801011c:	2301      	movs	r3, #1
 801011e:	73fb      	strb	r3, [r7, #15]
    break;
 8010120:	e005      	b.n	801012e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010122:	2303      	movs	r3, #3
 8010124:	73fb      	strb	r3, [r7, #15]
    break;
 8010126:	e002      	b.n	801012e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8010128:	2303      	movs	r3, #3
 801012a:	73fb      	strb	r3, [r7, #15]
    break;
 801012c:	bf00      	nop
  }
  return usb_status;
 801012e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010130:	4618      	mov	r0, r3
 8010132:	3714      	adds	r7, #20
 8010134:	46bd      	mov	sp, r7
 8010136:	f85d 7b04 	ldr.w	r7, [sp], #4
 801013a:	4770      	bx	lr

0801013c <__cvt>:
 801013c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010140:	ec57 6b10 	vmov	r6, r7, d0
 8010144:	2f00      	cmp	r7, #0
 8010146:	460c      	mov	r4, r1
 8010148:	4619      	mov	r1, r3
 801014a:	463b      	mov	r3, r7
 801014c:	bfbb      	ittet	lt
 801014e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8010152:	461f      	movlt	r7, r3
 8010154:	2300      	movge	r3, #0
 8010156:	232d      	movlt	r3, #45	@ 0x2d
 8010158:	700b      	strb	r3, [r1, #0]
 801015a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801015c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8010160:	4691      	mov	r9, r2
 8010162:	f023 0820 	bic.w	r8, r3, #32
 8010166:	bfbc      	itt	lt
 8010168:	4632      	movlt	r2, r6
 801016a:	4616      	movlt	r6, r2
 801016c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8010170:	d005      	beq.n	801017e <__cvt+0x42>
 8010172:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8010176:	d100      	bne.n	801017a <__cvt+0x3e>
 8010178:	3401      	adds	r4, #1
 801017a:	2102      	movs	r1, #2
 801017c:	e000      	b.n	8010180 <__cvt+0x44>
 801017e:	2103      	movs	r1, #3
 8010180:	ab03      	add	r3, sp, #12
 8010182:	9301      	str	r3, [sp, #4]
 8010184:	ab02      	add	r3, sp, #8
 8010186:	9300      	str	r3, [sp, #0]
 8010188:	ec47 6b10 	vmov	d0, r6, r7
 801018c:	4653      	mov	r3, sl
 801018e:	4622      	mov	r2, r4
 8010190:	f000 fe4e 	bl	8010e30 <_dtoa_r>
 8010194:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8010198:	4605      	mov	r5, r0
 801019a:	d119      	bne.n	80101d0 <__cvt+0x94>
 801019c:	f019 0f01 	tst.w	r9, #1
 80101a0:	d00e      	beq.n	80101c0 <__cvt+0x84>
 80101a2:	eb00 0904 	add.w	r9, r0, r4
 80101a6:	2200      	movs	r2, #0
 80101a8:	2300      	movs	r3, #0
 80101aa:	4630      	mov	r0, r6
 80101ac:	4639      	mov	r1, r7
 80101ae:	f7f0 fcb3 	bl	8000b18 <__aeabi_dcmpeq>
 80101b2:	b108      	cbz	r0, 80101b8 <__cvt+0x7c>
 80101b4:	f8cd 900c 	str.w	r9, [sp, #12]
 80101b8:	2230      	movs	r2, #48	@ 0x30
 80101ba:	9b03      	ldr	r3, [sp, #12]
 80101bc:	454b      	cmp	r3, r9
 80101be:	d31e      	bcc.n	80101fe <__cvt+0xc2>
 80101c0:	9b03      	ldr	r3, [sp, #12]
 80101c2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80101c4:	1b5b      	subs	r3, r3, r5
 80101c6:	4628      	mov	r0, r5
 80101c8:	6013      	str	r3, [r2, #0]
 80101ca:	b004      	add	sp, #16
 80101cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80101d0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80101d4:	eb00 0904 	add.w	r9, r0, r4
 80101d8:	d1e5      	bne.n	80101a6 <__cvt+0x6a>
 80101da:	7803      	ldrb	r3, [r0, #0]
 80101dc:	2b30      	cmp	r3, #48	@ 0x30
 80101de:	d10a      	bne.n	80101f6 <__cvt+0xba>
 80101e0:	2200      	movs	r2, #0
 80101e2:	2300      	movs	r3, #0
 80101e4:	4630      	mov	r0, r6
 80101e6:	4639      	mov	r1, r7
 80101e8:	f7f0 fc96 	bl	8000b18 <__aeabi_dcmpeq>
 80101ec:	b918      	cbnz	r0, 80101f6 <__cvt+0xba>
 80101ee:	f1c4 0401 	rsb	r4, r4, #1
 80101f2:	f8ca 4000 	str.w	r4, [sl]
 80101f6:	f8da 3000 	ldr.w	r3, [sl]
 80101fa:	4499      	add	r9, r3
 80101fc:	e7d3      	b.n	80101a6 <__cvt+0x6a>
 80101fe:	1c59      	adds	r1, r3, #1
 8010200:	9103      	str	r1, [sp, #12]
 8010202:	701a      	strb	r2, [r3, #0]
 8010204:	e7d9      	b.n	80101ba <__cvt+0x7e>

08010206 <__exponent>:
 8010206:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010208:	2900      	cmp	r1, #0
 801020a:	bfba      	itte	lt
 801020c:	4249      	neglt	r1, r1
 801020e:	232d      	movlt	r3, #45	@ 0x2d
 8010210:	232b      	movge	r3, #43	@ 0x2b
 8010212:	2909      	cmp	r1, #9
 8010214:	7002      	strb	r2, [r0, #0]
 8010216:	7043      	strb	r3, [r0, #1]
 8010218:	dd29      	ble.n	801026e <__exponent+0x68>
 801021a:	f10d 0307 	add.w	r3, sp, #7
 801021e:	461d      	mov	r5, r3
 8010220:	270a      	movs	r7, #10
 8010222:	461a      	mov	r2, r3
 8010224:	fbb1 f6f7 	udiv	r6, r1, r7
 8010228:	fb07 1416 	mls	r4, r7, r6, r1
 801022c:	3430      	adds	r4, #48	@ 0x30
 801022e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8010232:	460c      	mov	r4, r1
 8010234:	2c63      	cmp	r4, #99	@ 0x63
 8010236:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 801023a:	4631      	mov	r1, r6
 801023c:	dcf1      	bgt.n	8010222 <__exponent+0x1c>
 801023e:	3130      	adds	r1, #48	@ 0x30
 8010240:	1e94      	subs	r4, r2, #2
 8010242:	f803 1c01 	strb.w	r1, [r3, #-1]
 8010246:	1c41      	adds	r1, r0, #1
 8010248:	4623      	mov	r3, r4
 801024a:	42ab      	cmp	r3, r5
 801024c:	d30a      	bcc.n	8010264 <__exponent+0x5e>
 801024e:	f10d 0309 	add.w	r3, sp, #9
 8010252:	1a9b      	subs	r3, r3, r2
 8010254:	42ac      	cmp	r4, r5
 8010256:	bf88      	it	hi
 8010258:	2300      	movhi	r3, #0
 801025a:	3302      	adds	r3, #2
 801025c:	4403      	add	r3, r0
 801025e:	1a18      	subs	r0, r3, r0
 8010260:	b003      	add	sp, #12
 8010262:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010264:	f813 6b01 	ldrb.w	r6, [r3], #1
 8010268:	f801 6f01 	strb.w	r6, [r1, #1]!
 801026c:	e7ed      	b.n	801024a <__exponent+0x44>
 801026e:	2330      	movs	r3, #48	@ 0x30
 8010270:	3130      	adds	r1, #48	@ 0x30
 8010272:	7083      	strb	r3, [r0, #2]
 8010274:	70c1      	strb	r1, [r0, #3]
 8010276:	1d03      	adds	r3, r0, #4
 8010278:	e7f1      	b.n	801025e <__exponent+0x58>
	...

0801027c <_printf_float>:
 801027c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010280:	b08d      	sub	sp, #52	@ 0x34
 8010282:	460c      	mov	r4, r1
 8010284:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8010288:	4616      	mov	r6, r2
 801028a:	461f      	mov	r7, r3
 801028c:	4605      	mov	r5, r0
 801028e:	f000 fcb1 	bl	8010bf4 <_localeconv_r>
 8010292:	6803      	ldr	r3, [r0, #0]
 8010294:	9304      	str	r3, [sp, #16]
 8010296:	4618      	mov	r0, r3
 8010298:	f7f0 f812 	bl	80002c0 <strlen>
 801029c:	2300      	movs	r3, #0
 801029e:	930a      	str	r3, [sp, #40]	@ 0x28
 80102a0:	f8d8 3000 	ldr.w	r3, [r8]
 80102a4:	9005      	str	r0, [sp, #20]
 80102a6:	3307      	adds	r3, #7
 80102a8:	f023 0307 	bic.w	r3, r3, #7
 80102ac:	f103 0208 	add.w	r2, r3, #8
 80102b0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80102b4:	f8d4 b000 	ldr.w	fp, [r4]
 80102b8:	f8c8 2000 	str.w	r2, [r8]
 80102bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80102c0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80102c4:	9307      	str	r3, [sp, #28]
 80102c6:	f8cd 8018 	str.w	r8, [sp, #24]
 80102ca:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80102ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80102d2:	4b9c      	ldr	r3, [pc, #624]	@ (8010544 <_printf_float+0x2c8>)
 80102d4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80102d8:	f7f0 fc50 	bl	8000b7c <__aeabi_dcmpun>
 80102dc:	bb70      	cbnz	r0, 801033c <_printf_float+0xc0>
 80102de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80102e2:	4b98      	ldr	r3, [pc, #608]	@ (8010544 <_printf_float+0x2c8>)
 80102e4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80102e8:	f7f0 fc2a 	bl	8000b40 <__aeabi_dcmple>
 80102ec:	bb30      	cbnz	r0, 801033c <_printf_float+0xc0>
 80102ee:	2200      	movs	r2, #0
 80102f0:	2300      	movs	r3, #0
 80102f2:	4640      	mov	r0, r8
 80102f4:	4649      	mov	r1, r9
 80102f6:	f7f0 fc19 	bl	8000b2c <__aeabi_dcmplt>
 80102fa:	b110      	cbz	r0, 8010302 <_printf_float+0x86>
 80102fc:	232d      	movs	r3, #45	@ 0x2d
 80102fe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010302:	4a91      	ldr	r2, [pc, #580]	@ (8010548 <_printf_float+0x2cc>)
 8010304:	4b91      	ldr	r3, [pc, #580]	@ (801054c <_printf_float+0x2d0>)
 8010306:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801030a:	bf94      	ite	ls
 801030c:	4690      	movls	r8, r2
 801030e:	4698      	movhi	r8, r3
 8010310:	2303      	movs	r3, #3
 8010312:	6123      	str	r3, [r4, #16]
 8010314:	f02b 0304 	bic.w	r3, fp, #4
 8010318:	6023      	str	r3, [r4, #0]
 801031a:	f04f 0900 	mov.w	r9, #0
 801031e:	9700      	str	r7, [sp, #0]
 8010320:	4633      	mov	r3, r6
 8010322:	aa0b      	add	r2, sp, #44	@ 0x2c
 8010324:	4621      	mov	r1, r4
 8010326:	4628      	mov	r0, r5
 8010328:	f000 f9d2 	bl	80106d0 <_printf_common>
 801032c:	3001      	adds	r0, #1
 801032e:	f040 808d 	bne.w	801044c <_printf_float+0x1d0>
 8010332:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010336:	b00d      	add	sp, #52	@ 0x34
 8010338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801033c:	4642      	mov	r2, r8
 801033e:	464b      	mov	r3, r9
 8010340:	4640      	mov	r0, r8
 8010342:	4649      	mov	r1, r9
 8010344:	f7f0 fc1a 	bl	8000b7c <__aeabi_dcmpun>
 8010348:	b140      	cbz	r0, 801035c <_printf_float+0xe0>
 801034a:	464b      	mov	r3, r9
 801034c:	2b00      	cmp	r3, #0
 801034e:	bfbc      	itt	lt
 8010350:	232d      	movlt	r3, #45	@ 0x2d
 8010352:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8010356:	4a7e      	ldr	r2, [pc, #504]	@ (8010550 <_printf_float+0x2d4>)
 8010358:	4b7e      	ldr	r3, [pc, #504]	@ (8010554 <_printf_float+0x2d8>)
 801035a:	e7d4      	b.n	8010306 <_printf_float+0x8a>
 801035c:	6863      	ldr	r3, [r4, #4]
 801035e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8010362:	9206      	str	r2, [sp, #24]
 8010364:	1c5a      	adds	r2, r3, #1
 8010366:	d13b      	bne.n	80103e0 <_printf_float+0x164>
 8010368:	2306      	movs	r3, #6
 801036a:	6063      	str	r3, [r4, #4]
 801036c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8010370:	2300      	movs	r3, #0
 8010372:	6022      	str	r2, [r4, #0]
 8010374:	9303      	str	r3, [sp, #12]
 8010376:	ab0a      	add	r3, sp, #40	@ 0x28
 8010378:	e9cd a301 	strd	sl, r3, [sp, #4]
 801037c:	ab09      	add	r3, sp, #36	@ 0x24
 801037e:	9300      	str	r3, [sp, #0]
 8010380:	6861      	ldr	r1, [r4, #4]
 8010382:	ec49 8b10 	vmov	d0, r8, r9
 8010386:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 801038a:	4628      	mov	r0, r5
 801038c:	f7ff fed6 	bl	801013c <__cvt>
 8010390:	9b06      	ldr	r3, [sp, #24]
 8010392:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010394:	2b47      	cmp	r3, #71	@ 0x47
 8010396:	4680      	mov	r8, r0
 8010398:	d129      	bne.n	80103ee <_printf_float+0x172>
 801039a:	1cc8      	adds	r0, r1, #3
 801039c:	db02      	blt.n	80103a4 <_printf_float+0x128>
 801039e:	6863      	ldr	r3, [r4, #4]
 80103a0:	4299      	cmp	r1, r3
 80103a2:	dd41      	ble.n	8010428 <_printf_float+0x1ac>
 80103a4:	f1aa 0a02 	sub.w	sl, sl, #2
 80103a8:	fa5f fa8a 	uxtb.w	sl, sl
 80103ac:	3901      	subs	r1, #1
 80103ae:	4652      	mov	r2, sl
 80103b0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80103b4:	9109      	str	r1, [sp, #36]	@ 0x24
 80103b6:	f7ff ff26 	bl	8010206 <__exponent>
 80103ba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80103bc:	1813      	adds	r3, r2, r0
 80103be:	2a01      	cmp	r2, #1
 80103c0:	4681      	mov	r9, r0
 80103c2:	6123      	str	r3, [r4, #16]
 80103c4:	dc02      	bgt.n	80103cc <_printf_float+0x150>
 80103c6:	6822      	ldr	r2, [r4, #0]
 80103c8:	07d2      	lsls	r2, r2, #31
 80103ca:	d501      	bpl.n	80103d0 <_printf_float+0x154>
 80103cc:	3301      	adds	r3, #1
 80103ce:	6123      	str	r3, [r4, #16]
 80103d0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	d0a2      	beq.n	801031e <_printf_float+0xa2>
 80103d8:	232d      	movs	r3, #45	@ 0x2d
 80103da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80103de:	e79e      	b.n	801031e <_printf_float+0xa2>
 80103e0:	9a06      	ldr	r2, [sp, #24]
 80103e2:	2a47      	cmp	r2, #71	@ 0x47
 80103e4:	d1c2      	bne.n	801036c <_printf_float+0xf0>
 80103e6:	2b00      	cmp	r3, #0
 80103e8:	d1c0      	bne.n	801036c <_printf_float+0xf0>
 80103ea:	2301      	movs	r3, #1
 80103ec:	e7bd      	b.n	801036a <_printf_float+0xee>
 80103ee:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80103f2:	d9db      	bls.n	80103ac <_printf_float+0x130>
 80103f4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80103f8:	d118      	bne.n	801042c <_printf_float+0x1b0>
 80103fa:	2900      	cmp	r1, #0
 80103fc:	6863      	ldr	r3, [r4, #4]
 80103fe:	dd0b      	ble.n	8010418 <_printf_float+0x19c>
 8010400:	6121      	str	r1, [r4, #16]
 8010402:	b913      	cbnz	r3, 801040a <_printf_float+0x18e>
 8010404:	6822      	ldr	r2, [r4, #0]
 8010406:	07d0      	lsls	r0, r2, #31
 8010408:	d502      	bpl.n	8010410 <_printf_float+0x194>
 801040a:	3301      	adds	r3, #1
 801040c:	440b      	add	r3, r1
 801040e:	6123      	str	r3, [r4, #16]
 8010410:	65a1      	str	r1, [r4, #88]	@ 0x58
 8010412:	f04f 0900 	mov.w	r9, #0
 8010416:	e7db      	b.n	80103d0 <_printf_float+0x154>
 8010418:	b913      	cbnz	r3, 8010420 <_printf_float+0x1a4>
 801041a:	6822      	ldr	r2, [r4, #0]
 801041c:	07d2      	lsls	r2, r2, #31
 801041e:	d501      	bpl.n	8010424 <_printf_float+0x1a8>
 8010420:	3302      	adds	r3, #2
 8010422:	e7f4      	b.n	801040e <_printf_float+0x192>
 8010424:	2301      	movs	r3, #1
 8010426:	e7f2      	b.n	801040e <_printf_float+0x192>
 8010428:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 801042c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801042e:	4299      	cmp	r1, r3
 8010430:	db05      	blt.n	801043e <_printf_float+0x1c2>
 8010432:	6823      	ldr	r3, [r4, #0]
 8010434:	6121      	str	r1, [r4, #16]
 8010436:	07d8      	lsls	r0, r3, #31
 8010438:	d5ea      	bpl.n	8010410 <_printf_float+0x194>
 801043a:	1c4b      	adds	r3, r1, #1
 801043c:	e7e7      	b.n	801040e <_printf_float+0x192>
 801043e:	2900      	cmp	r1, #0
 8010440:	bfd4      	ite	le
 8010442:	f1c1 0202 	rsble	r2, r1, #2
 8010446:	2201      	movgt	r2, #1
 8010448:	4413      	add	r3, r2
 801044a:	e7e0      	b.n	801040e <_printf_float+0x192>
 801044c:	6823      	ldr	r3, [r4, #0]
 801044e:	055a      	lsls	r2, r3, #21
 8010450:	d407      	bmi.n	8010462 <_printf_float+0x1e6>
 8010452:	6923      	ldr	r3, [r4, #16]
 8010454:	4642      	mov	r2, r8
 8010456:	4631      	mov	r1, r6
 8010458:	4628      	mov	r0, r5
 801045a:	47b8      	blx	r7
 801045c:	3001      	adds	r0, #1
 801045e:	d12b      	bne.n	80104b8 <_printf_float+0x23c>
 8010460:	e767      	b.n	8010332 <_printf_float+0xb6>
 8010462:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8010466:	f240 80dd 	bls.w	8010624 <_printf_float+0x3a8>
 801046a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801046e:	2200      	movs	r2, #0
 8010470:	2300      	movs	r3, #0
 8010472:	f7f0 fb51 	bl	8000b18 <__aeabi_dcmpeq>
 8010476:	2800      	cmp	r0, #0
 8010478:	d033      	beq.n	80104e2 <_printf_float+0x266>
 801047a:	4a37      	ldr	r2, [pc, #220]	@ (8010558 <_printf_float+0x2dc>)
 801047c:	2301      	movs	r3, #1
 801047e:	4631      	mov	r1, r6
 8010480:	4628      	mov	r0, r5
 8010482:	47b8      	blx	r7
 8010484:	3001      	adds	r0, #1
 8010486:	f43f af54 	beq.w	8010332 <_printf_float+0xb6>
 801048a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801048e:	4543      	cmp	r3, r8
 8010490:	db02      	blt.n	8010498 <_printf_float+0x21c>
 8010492:	6823      	ldr	r3, [r4, #0]
 8010494:	07d8      	lsls	r0, r3, #31
 8010496:	d50f      	bpl.n	80104b8 <_printf_float+0x23c>
 8010498:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801049c:	4631      	mov	r1, r6
 801049e:	4628      	mov	r0, r5
 80104a0:	47b8      	blx	r7
 80104a2:	3001      	adds	r0, #1
 80104a4:	f43f af45 	beq.w	8010332 <_printf_float+0xb6>
 80104a8:	f04f 0900 	mov.w	r9, #0
 80104ac:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80104b0:	f104 0a1a 	add.w	sl, r4, #26
 80104b4:	45c8      	cmp	r8, r9
 80104b6:	dc09      	bgt.n	80104cc <_printf_float+0x250>
 80104b8:	6823      	ldr	r3, [r4, #0]
 80104ba:	079b      	lsls	r3, r3, #30
 80104bc:	f100 8103 	bmi.w	80106c6 <_printf_float+0x44a>
 80104c0:	68e0      	ldr	r0, [r4, #12]
 80104c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80104c4:	4298      	cmp	r0, r3
 80104c6:	bfb8      	it	lt
 80104c8:	4618      	movlt	r0, r3
 80104ca:	e734      	b.n	8010336 <_printf_float+0xba>
 80104cc:	2301      	movs	r3, #1
 80104ce:	4652      	mov	r2, sl
 80104d0:	4631      	mov	r1, r6
 80104d2:	4628      	mov	r0, r5
 80104d4:	47b8      	blx	r7
 80104d6:	3001      	adds	r0, #1
 80104d8:	f43f af2b 	beq.w	8010332 <_printf_float+0xb6>
 80104dc:	f109 0901 	add.w	r9, r9, #1
 80104e0:	e7e8      	b.n	80104b4 <_printf_float+0x238>
 80104e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	dc39      	bgt.n	801055c <_printf_float+0x2e0>
 80104e8:	4a1b      	ldr	r2, [pc, #108]	@ (8010558 <_printf_float+0x2dc>)
 80104ea:	2301      	movs	r3, #1
 80104ec:	4631      	mov	r1, r6
 80104ee:	4628      	mov	r0, r5
 80104f0:	47b8      	blx	r7
 80104f2:	3001      	adds	r0, #1
 80104f4:	f43f af1d 	beq.w	8010332 <_printf_float+0xb6>
 80104f8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80104fc:	ea59 0303 	orrs.w	r3, r9, r3
 8010500:	d102      	bne.n	8010508 <_printf_float+0x28c>
 8010502:	6823      	ldr	r3, [r4, #0]
 8010504:	07d9      	lsls	r1, r3, #31
 8010506:	d5d7      	bpl.n	80104b8 <_printf_float+0x23c>
 8010508:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801050c:	4631      	mov	r1, r6
 801050e:	4628      	mov	r0, r5
 8010510:	47b8      	blx	r7
 8010512:	3001      	adds	r0, #1
 8010514:	f43f af0d 	beq.w	8010332 <_printf_float+0xb6>
 8010518:	f04f 0a00 	mov.w	sl, #0
 801051c:	f104 0b1a 	add.w	fp, r4, #26
 8010520:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010522:	425b      	negs	r3, r3
 8010524:	4553      	cmp	r3, sl
 8010526:	dc01      	bgt.n	801052c <_printf_float+0x2b0>
 8010528:	464b      	mov	r3, r9
 801052a:	e793      	b.n	8010454 <_printf_float+0x1d8>
 801052c:	2301      	movs	r3, #1
 801052e:	465a      	mov	r2, fp
 8010530:	4631      	mov	r1, r6
 8010532:	4628      	mov	r0, r5
 8010534:	47b8      	blx	r7
 8010536:	3001      	adds	r0, #1
 8010538:	f43f aefb 	beq.w	8010332 <_printf_float+0xb6>
 801053c:	f10a 0a01 	add.w	sl, sl, #1
 8010540:	e7ee      	b.n	8010520 <_printf_float+0x2a4>
 8010542:	bf00      	nop
 8010544:	7fefffff 	.word	0x7fefffff
 8010548:	08013f7c 	.word	0x08013f7c
 801054c:	08013f80 	.word	0x08013f80
 8010550:	08013f84 	.word	0x08013f84
 8010554:	08013f88 	.word	0x08013f88
 8010558:	08013f8c 	.word	0x08013f8c
 801055c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801055e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8010562:	4553      	cmp	r3, sl
 8010564:	bfa8      	it	ge
 8010566:	4653      	movge	r3, sl
 8010568:	2b00      	cmp	r3, #0
 801056a:	4699      	mov	r9, r3
 801056c:	dc36      	bgt.n	80105dc <_printf_float+0x360>
 801056e:	f04f 0b00 	mov.w	fp, #0
 8010572:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010576:	f104 021a 	add.w	r2, r4, #26
 801057a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801057c:	9306      	str	r3, [sp, #24]
 801057e:	eba3 0309 	sub.w	r3, r3, r9
 8010582:	455b      	cmp	r3, fp
 8010584:	dc31      	bgt.n	80105ea <_printf_float+0x36e>
 8010586:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010588:	459a      	cmp	sl, r3
 801058a:	dc3a      	bgt.n	8010602 <_printf_float+0x386>
 801058c:	6823      	ldr	r3, [r4, #0]
 801058e:	07da      	lsls	r2, r3, #31
 8010590:	d437      	bmi.n	8010602 <_printf_float+0x386>
 8010592:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010594:	ebaa 0903 	sub.w	r9, sl, r3
 8010598:	9b06      	ldr	r3, [sp, #24]
 801059a:	ebaa 0303 	sub.w	r3, sl, r3
 801059e:	4599      	cmp	r9, r3
 80105a0:	bfa8      	it	ge
 80105a2:	4699      	movge	r9, r3
 80105a4:	f1b9 0f00 	cmp.w	r9, #0
 80105a8:	dc33      	bgt.n	8010612 <_printf_float+0x396>
 80105aa:	f04f 0800 	mov.w	r8, #0
 80105ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80105b2:	f104 0b1a 	add.w	fp, r4, #26
 80105b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80105b8:	ebaa 0303 	sub.w	r3, sl, r3
 80105bc:	eba3 0309 	sub.w	r3, r3, r9
 80105c0:	4543      	cmp	r3, r8
 80105c2:	f77f af79 	ble.w	80104b8 <_printf_float+0x23c>
 80105c6:	2301      	movs	r3, #1
 80105c8:	465a      	mov	r2, fp
 80105ca:	4631      	mov	r1, r6
 80105cc:	4628      	mov	r0, r5
 80105ce:	47b8      	blx	r7
 80105d0:	3001      	adds	r0, #1
 80105d2:	f43f aeae 	beq.w	8010332 <_printf_float+0xb6>
 80105d6:	f108 0801 	add.w	r8, r8, #1
 80105da:	e7ec      	b.n	80105b6 <_printf_float+0x33a>
 80105dc:	4642      	mov	r2, r8
 80105de:	4631      	mov	r1, r6
 80105e0:	4628      	mov	r0, r5
 80105e2:	47b8      	blx	r7
 80105e4:	3001      	adds	r0, #1
 80105e6:	d1c2      	bne.n	801056e <_printf_float+0x2f2>
 80105e8:	e6a3      	b.n	8010332 <_printf_float+0xb6>
 80105ea:	2301      	movs	r3, #1
 80105ec:	4631      	mov	r1, r6
 80105ee:	4628      	mov	r0, r5
 80105f0:	9206      	str	r2, [sp, #24]
 80105f2:	47b8      	blx	r7
 80105f4:	3001      	adds	r0, #1
 80105f6:	f43f ae9c 	beq.w	8010332 <_printf_float+0xb6>
 80105fa:	9a06      	ldr	r2, [sp, #24]
 80105fc:	f10b 0b01 	add.w	fp, fp, #1
 8010600:	e7bb      	b.n	801057a <_printf_float+0x2fe>
 8010602:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010606:	4631      	mov	r1, r6
 8010608:	4628      	mov	r0, r5
 801060a:	47b8      	blx	r7
 801060c:	3001      	adds	r0, #1
 801060e:	d1c0      	bne.n	8010592 <_printf_float+0x316>
 8010610:	e68f      	b.n	8010332 <_printf_float+0xb6>
 8010612:	9a06      	ldr	r2, [sp, #24]
 8010614:	464b      	mov	r3, r9
 8010616:	4442      	add	r2, r8
 8010618:	4631      	mov	r1, r6
 801061a:	4628      	mov	r0, r5
 801061c:	47b8      	blx	r7
 801061e:	3001      	adds	r0, #1
 8010620:	d1c3      	bne.n	80105aa <_printf_float+0x32e>
 8010622:	e686      	b.n	8010332 <_printf_float+0xb6>
 8010624:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8010628:	f1ba 0f01 	cmp.w	sl, #1
 801062c:	dc01      	bgt.n	8010632 <_printf_float+0x3b6>
 801062e:	07db      	lsls	r3, r3, #31
 8010630:	d536      	bpl.n	80106a0 <_printf_float+0x424>
 8010632:	2301      	movs	r3, #1
 8010634:	4642      	mov	r2, r8
 8010636:	4631      	mov	r1, r6
 8010638:	4628      	mov	r0, r5
 801063a:	47b8      	blx	r7
 801063c:	3001      	adds	r0, #1
 801063e:	f43f ae78 	beq.w	8010332 <_printf_float+0xb6>
 8010642:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010646:	4631      	mov	r1, r6
 8010648:	4628      	mov	r0, r5
 801064a:	47b8      	blx	r7
 801064c:	3001      	adds	r0, #1
 801064e:	f43f ae70 	beq.w	8010332 <_printf_float+0xb6>
 8010652:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8010656:	2200      	movs	r2, #0
 8010658:	2300      	movs	r3, #0
 801065a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 801065e:	f7f0 fa5b 	bl	8000b18 <__aeabi_dcmpeq>
 8010662:	b9c0      	cbnz	r0, 8010696 <_printf_float+0x41a>
 8010664:	4653      	mov	r3, sl
 8010666:	f108 0201 	add.w	r2, r8, #1
 801066a:	4631      	mov	r1, r6
 801066c:	4628      	mov	r0, r5
 801066e:	47b8      	blx	r7
 8010670:	3001      	adds	r0, #1
 8010672:	d10c      	bne.n	801068e <_printf_float+0x412>
 8010674:	e65d      	b.n	8010332 <_printf_float+0xb6>
 8010676:	2301      	movs	r3, #1
 8010678:	465a      	mov	r2, fp
 801067a:	4631      	mov	r1, r6
 801067c:	4628      	mov	r0, r5
 801067e:	47b8      	blx	r7
 8010680:	3001      	adds	r0, #1
 8010682:	f43f ae56 	beq.w	8010332 <_printf_float+0xb6>
 8010686:	f108 0801 	add.w	r8, r8, #1
 801068a:	45d0      	cmp	r8, sl
 801068c:	dbf3      	blt.n	8010676 <_printf_float+0x3fa>
 801068e:	464b      	mov	r3, r9
 8010690:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8010694:	e6df      	b.n	8010456 <_printf_float+0x1da>
 8010696:	f04f 0800 	mov.w	r8, #0
 801069a:	f104 0b1a 	add.w	fp, r4, #26
 801069e:	e7f4      	b.n	801068a <_printf_float+0x40e>
 80106a0:	2301      	movs	r3, #1
 80106a2:	4642      	mov	r2, r8
 80106a4:	e7e1      	b.n	801066a <_printf_float+0x3ee>
 80106a6:	2301      	movs	r3, #1
 80106a8:	464a      	mov	r2, r9
 80106aa:	4631      	mov	r1, r6
 80106ac:	4628      	mov	r0, r5
 80106ae:	47b8      	blx	r7
 80106b0:	3001      	adds	r0, #1
 80106b2:	f43f ae3e 	beq.w	8010332 <_printf_float+0xb6>
 80106b6:	f108 0801 	add.w	r8, r8, #1
 80106ba:	68e3      	ldr	r3, [r4, #12]
 80106bc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80106be:	1a5b      	subs	r3, r3, r1
 80106c0:	4543      	cmp	r3, r8
 80106c2:	dcf0      	bgt.n	80106a6 <_printf_float+0x42a>
 80106c4:	e6fc      	b.n	80104c0 <_printf_float+0x244>
 80106c6:	f04f 0800 	mov.w	r8, #0
 80106ca:	f104 0919 	add.w	r9, r4, #25
 80106ce:	e7f4      	b.n	80106ba <_printf_float+0x43e>

080106d0 <_printf_common>:
 80106d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80106d4:	4616      	mov	r6, r2
 80106d6:	4698      	mov	r8, r3
 80106d8:	688a      	ldr	r2, [r1, #8]
 80106da:	690b      	ldr	r3, [r1, #16]
 80106dc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80106e0:	4293      	cmp	r3, r2
 80106e2:	bfb8      	it	lt
 80106e4:	4613      	movlt	r3, r2
 80106e6:	6033      	str	r3, [r6, #0]
 80106e8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80106ec:	4607      	mov	r7, r0
 80106ee:	460c      	mov	r4, r1
 80106f0:	b10a      	cbz	r2, 80106f6 <_printf_common+0x26>
 80106f2:	3301      	adds	r3, #1
 80106f4:	6033      	str	r3, [r6, #0]
 80106f6:	6823      	ldr	r3, [r4, #0]
 80106f8:	0699      	lsls	r1, r3, #26
 80106fa:	bf42      	ittt	mi
 80106fc:	6833      	ldrmi	r3, [r6, #0]
 80106fe:	3302      	addmi	r3, #2
 8010700:	6033      	strmi	r3, [r6, #0]
 8010702:	6825      	ldr	r5, [r4, #0]
 8010704:	f015 0506 	ands.w	r5, r5, #6
 8010708:	d106      	bne.n	8010718 <_printf_common+0x48>
 801070a:	f104 0a19 	add.w	sl, r4, #25
 801070e:	68e3      	ldr	r3, [r4, #12]
 8010710:	6832      	ldr	r2, [r6, #0]
 8010712:	1a9b      	subs	r3, r3, r2
 8010714:	42ab      	cmp	r3, r5
 8010716:	dc26      	bgt.n	8010766 <_printf_common+0x96>
 8010718:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801071c:	6822      	ldr	r2, [r4, #0]
 801071e:	3b00      	subs	r3, #0
 8010720:	bf18      	it	ne
 8010722:	2301      	movne	r3, #1
 8010724:	0692      	lsls	r2, r2, #26
 8010726:	d42b      	bmi.n	8010780 <_printf_common+0xb0>
 8010728:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801072c:	4641      	mov	r1, r8
 801072e:	4638      	mov	r0, r7
 8010730:	47c8      	blx	r9
 8010732:	3001      	adds	r0, #1
 8010734:	d01e      	beq.n	8010774 <_printf_common+0xa4>
 8010736:	6823      	ldr	r3, [r4, #0]
 8010738:	6922      	ldr	r2, [r4, #16]
 801073a:	f003 0306 	and.w	r3, r3, #6
 801073e:	2b04      	cmp	r3, #4
 8010740:	bf02      	ittt	eq
 8010742:	68e5      	ldreq	r5, [r4, #12]
 8010744:	6833      	ldreq	r3, [r6, #0]
 8010746:	1aed      	subeq	r5, r5, r3
 8010748:	68a3      	ldr	r3, [r4, #8]
 801074a:	bf0c      	ite	eq
 801074c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010750:	2500      	movne	r5, #0
 8010752:	4293      	cmp	r3, r2
 8010754:	bfc4      	itt	gt
 8010756:	1a9b      	subgt	r3, r3, r2
 8010758:	18ed      	addgt	r5, r5, r3
 801075a:	2600      	movs	r6, #0
 801075c:	341a      	adds	r4, #26
 801075e:	42b5      	cmp	r5, r6
 8010760:	d11a      	bne.n	8010798 <_printf_common+0xc8>
 8010762:	2000      	movs	r0, #0
 8010764:	e008      	b.n	8010778 <_printf_common+0xa8>
 8010766:	2301      	movs	r3, #1
 8010768:	4652      	mov	r2, sl
 801076a:	4641      	mov	r1, r8
 801076c:	4638      	mov	r0, r7
 801076e:	47c8      	blx	r9
 8010770:	3001      	adds	r0, #1
 8010772:	d103      	bne.n	801077c <_printf_common+0xac>
 8010774:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010778:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801077c:	3501      	adds	r5, #1
 801077e:	e7c6      	b.n	801070e <_printf_common+0x3e>
 8010780:	18e1      	adds	r1, r4, r3
 8010782:	1c5a      	adds	r2, r3, #1
 8010784:	2030      	movs	r0, #48	@ 0x30
 8010786:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801078a:	4422      	add	r2, r4
 801078c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8010790:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010794:	3302      	adds	r3, #2
 8010796:	e7c7      	b.n	8010728 <_printf_common+0x58>
 8010798:	2301      	movs	r3, #1
 801079a:	4622      	mov	r2, r4
 801079c:	4641      	mov	r1, r8
 801079e:	4638      	mov	r0, r7
 80107a0:	47c8      	blx	r9
 80107a2:	3001      	adds	r0, #1
 80107a4:	d0e6      	beq.n	8010774 <_printf_common+0xa4>
 80107a6:	3601      	adds	r6, #1
 80107a8:	e7d9      	b.n	801075e <_printf_common+0x8e>
	...

080107ac <_printf_i>:
 80107ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80107b0:	7e0f      	ldrb	r7, [r1, #24]
 80107b2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80107b4:	2f78      	cmp	r7, #120	@ 0x78
 80107b6:	4691      	mov	r9, r2
 80107b8:	4680      	mov	r8, r0
 80107ba:	460c      	mov	r4, r1
 80107bc:	469a      	mov	sl, r3
 80107be:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80107c2:	d807      	bhi.n	80107d4 <_printf_i+0x28>
 80107c4:	2f62      	cmp	r7, #98	@ 0x62
 80107c6:	d80a      	bhi.n	80107de <_printf_i+0x32>
 80107c8:	2f00      	cmp	r7, #0
 80107ca:	f000 80d2 	beq.w	8010972 <_printf_i+0x1c6>
 80107ce:	2f58      	cmp	r7, #88	@ 0x58
 80107d0:	f000 80b9 	beq.w	8010946 <_printf_i+0x19a>
 80107d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80107d8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80107dc:	e03a      	b.n	8010854 <_printf_i+0xa8>
 80107de:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80107e2:	2b15      	cmp	r3, #21
 80107e4:	d8f6      	bhi.n	80107d4 <_printf_i+0x28>
 80107e6:	a101      	add	r1, pc, #4	@ (adr r1, 80107ec <_printf_i+0x40>)
 80107e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80107ec:	08010845 	.word	0x08010845
 80107f0:	08010859 	.word	0x08010859
 80107f4:	080107d5 	.word	0x080107d5
 80107f8:	080107d5 	.word	0x080107d5
 80107fc:	080107d5 	.word	0x080107d5
 8010800:	080107d5 	.word	0x080107d5
 8010804:	08010859 	.word	0x08010859
 8010808:	080107d5 	.word	0x080107d5
 801080c:	080107d5 	.word	0x080107d5
 8010810:	080107d5 	.word	0x080107d5
 8010814:	080107d5 	.word	0x080107d5
 8010818:	08010959 	.word	0x08010959
 801081c:	08010883 	.word	0x08010883
 8010820:	08010913 	.word	0x08010913
 8010824:	080107d5 	.word	0x080107d5
 8010828:	080107d5 	.word	0x080107d5
 801082c:	0801097b 	.word	0x0801097b
 8010830:	080107d5 	.word	0x080107d5
 8010834:	08010883 	.word	0x08010883
 8010838:	080107d5 	.word	0x080107d5
 801083c:	080107d5 	.word	0x080107d5
 8010840:	0801091b 	.word	0x0801091b
 8010844:	6833      	ldr	r3, [r6, #0]
 8010846:	1d1a      	adds	r2, r3, #4
 8010848:	681b      	ldr	r3, [r3, #0]
 801084a:	6032      	str	r2, [r6, #0]
 801084c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010850:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8010854:	2301      	movs	r3, #1
 8010856:	e09d      	b.n	8010994 <_printf_i+0x1e8>
 8010858:	6833      	ldr	r3, [r6, #0]
 801085a:	6820      	ldr	r0, [r4, #0]
 801085c:	1d19      	adds	r1, r3, #4
 801085e:	6031      	str	r1, [r6, #0]
 8010860:	0606      	lsls	r6, r0, #24
 8010862:	d501      	bpl.n	8010868 <_printf_i+0xbc>
 8010864:	681d      	ldr	r5, [r3, #0]
 8010866:	e003      	b.n	8010870 <_printf_i+0xc4>
 8010868:	0645      	lsls	r5, r0, #25
 801086a:	d5fb      	bpl.n	8010864 <_printf_i+0xb8>
 801086c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8010870:	2d00      	cmp	r5, #0
 8010872:	da03      	bge.n	801087c <_printf_i+0xd0>
 8010874:	232d      	movs	r3, #45	@ 0x2d
 8010876:	426d      	negs	r5, r5
 8010878:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801087c:	4859      	ldr	r0, [pc, #356]	@ (80109e4 <_printf_i+0x238>)
 801087e:	230a      	movs	r3, #10
 8010880:	e011      	b.n	80108a6 <_printf_i+0xfa>
 8010882:	6821      	ldr	r1, [r4, #0]
 8010884:	6833      	ldr	r3, [r6, #0]
 8010886:	0608      	lsls	r0, r1, #24
 8010888:	f853 5b04 	ldr.w	r5, [r3], #4
 801088c:	d402      	bmi.n	8010894 <_printf_i+0xe8>
 801088e:	0649      	lsls	r1, r1, #25
 8010890:	bf48      	it	mi
 8010892:	b2ad      	uxthmi	r5, r5
 8010894:	2f6f      	cmp	r7, #111	@ 0x6f
 8010896:	4853      	ldr	r0, [pc, #332]	@ (80109e4 <_printf_i+0x238>)
 8010898:	6033      	str	r3, [r6, #0]
 801089a:	bf14      	ite	ne
 801089c:	230a      	movne	r3, #10
 801089e:	2308      	moveq	r3, #8
 80108a0:	2100      	movs	r1, #0
 80108a2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80108a6:	6866      	ldr	r6, [r4, #4]
 80108a8:	60a6      	str	r6, [r4, #8]
 80108aa:	2e00      	cmp	r6, #0
 80108ac:	bfa2      	ittt	ge
 80108ae:	6821      	ldrge	r1, [r4, #0]
 80108b0:	f021 0104 	bicge.w	r1, r1, #4
 80108b4:	6021      	strge	r1, [r4, #0]
 80108b6:	b90d      	cbnz	r5, 80108bc <_printf_i+0x110>
 80108b8:	2e00      	cmp	r6, #0
 80108ba:	d04b      	beq.n	8010954 <_printf_i+0x1a8>
 80108bc:	4616      	mov	r6, r2
 80108be:	fbb5 f1f3 	udiv	r1, r5, r3
 80108c2:	fb03 5711 	mls	r7, r3, r1, r5
 80108c6:	5dc7      	ldrb	r7, [r0, r7]
 80108c8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80108cc:	462f      	mov	r7, r5
 80108ce:	42bb      	cmp	r3, r7
 80108d0:	460d      	mov	r5, r1
 80108d2:	d9f4      	bls.n	80108be <_printf_i+0x112>
 80108d4:	2b08      	cmp	r3, #8
 80108d6:	d10b      	bne.n	80108f0 <_printf_i+0x144>
 80108d8:	6823      	ldr	r3, [r4, #0]
 80108da:	07df      	lsls	r7, r3, #31
 80108dc:	d508      	bpl.n	80108f0 <_printf_i+0x144>
 80108de:	6923      	ldr	r3, [r4, #16]
 80108e0:	6861      	ldr	r1, [r4, #4]
 80108e2:	4299      	cmp	r1, r3
 80108e4:	bfde      	ittt	le
 80108e6:	2330      	movle	r3, #48	@ 0x30
 80108e8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80108ec:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80108f0:	1b92      	subs	r2, r2, r6
 80108f2:	6122      	str	r2, [r4, #16]
 80108f4:	f8cd a000 	str.w	sl, [sp]
 80108f8:	464b      	mov	r3, r9
 80108fa:	aa03      	add	r2, sp, #12
 80108fc:	4621      	mov	r1, r4
 80108fe:	4640      	mov	r0, r8
 8010900:	f7ff fee6 	bl	80106d0 <_printf_common>
 8010904:	3001      	adds	r0, #1
 8010906:	d14a      	bne.n	801099e <_printf_i+0x1f2>
 8010908:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801090c:	b004      	add	sp, #16
 801090e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010912:	6823      	ldr	r3, [r4, #0]
 8010914:	f043 0320 	orr.w	r3, r3, #32
 8010918:	6023      	str	r3, [r4, #0]
 801091a:	4833      	ldr	r0, [pc, #204]	@ (80109e8 <_printf_i+0x23c>)
 801091c:	2778      	movs	r7, #120	@ 0x78
 801091e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8010922:	6823      	ldr	r3, [r4, #0]
 8010924:	6831      	ldr	r1, [r6, #0]
 8010926:	061f      	lsls	r7, r3, #24
 8010928:	f851 5b04 	ldr.w	r5, [r1], #4
 801092c:	d402      	bmi.n	8010934 <_printf_i+0x188>
 801092e:	065f      	lsls	r7, r3, #25
 8010930:	bf48      	it	mi
 8010932:	b2ad      	uxthmi	r5, r5
 8010934:	6031      	str	r1, [r6, #0]
 8010936:	07d9      	lsls	r1, r3, #31
 8010938:	bf44      	itt	mi
 801093a:	f043 0320 	orrmi.w	r3, r3, #32
 801093e:	6023      	strmi	r3, [r4, #0]
 8010940:	b11d      	cbz	r5, 801094a <_printf_i+0x19e>
 8010942:	2310      	movs	r3, #16
 8010944:	e7ac      	b.n	80108a0 <_printf_i+0xf4>
 8010946:	4827      	ldr	r0, [pc, #156]	@ (80109e4 <_printf_i+0x238>)
 8010948:	e7e9      	b.n	801091e <_printf_i+0x172>
 801094a:	6823      	ldr	r3, [r4, #0]
 801094c:	f023 0320 	bic.w	r3, r3, #32
 8010950:	6023      	str	r3, [r4, #0]
 8010952:	e7f6      	b.n	8010942 <_printf_i+0x196>
 8010954:	4616      	mov	r6, r2
 8010956:	e7bd      	b.n	80108d4 <_printf_i+0x128>
 8010958:	6833      	ldr	r3, [r6, #0]
 801095a:	6825      	ldr	r5, [r4, #0]
 801095c:	6961      	ldr	r1, [r4, #20]
 801095e:	1d18      	adds	r0, r3, #4
 8010960:	6030      	str	r0, [r6, #0]
 8010962:	062e      	lsls	r6, r5, #24
 8010964:	681b      	ldr	r3, [r3, #0]
 8010966:	d501      	bpl.n	801096c <_printf_i+0x1c0>
 8010968:	6019      	str	r1, [r3, #0]
 801096a:	e002      	b.n	8010972 <_printf_i+0x1c6>
 801096c:	0668      	lsls	r0, r5, #25
 801096e:	d5fb      	bpl.n	8010968 <_printf_i+0x1bc>
 8010970:	8019      	strh	r1, [r3, #0]
 8010972:	2300      	movs	r3, #0
 8010974:	6123      	str	r3, [r4, #16]
 8010976:	4616      	mov	r6, r2
 8010978:	e7bc      	b.n	80108f4 <_printf_i+0x148>
 801097a:	6833      	ldr	r3, [r6, #0]
 801097c:	1d1a      	adds	r2, r3, #4
 801097e:	6032      	str	r2, [r6, #0]
 8010980:	681e      	ldr	r6, [r3, #0]
 8010982:	6862      	ldr	r2, [r4, #4]
 8010984:	2100      	movs	r1, #0
 8010986:	4630      	mov	r0, r6
 8010988:	f7ef fc4a 	bl	8000220 <memchr>
 801098c:	b108      	cbz	r0, 8010992 <_printf_i+0x1e6>
 801098e:	1b80      	subs	r0, r0, r6
 8010990:	6060      	str	r0, [r4, #4]
 8010992:	6863      	ldr	r3, [r4, #4]
 8010994:	6123      	str	r3, [r4, #16]
 8010996:	2300      	movs	r3, #0
 8010998:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801099c:	e7aa      	b.n	80108f4 <_printf_i+0x148>
 801099e:	6923      	ldr	r3, [r4, #16]
 80109a0:	4632      	mov	r2, r6
 80109a2:	4649      	mov	r1, r9
 80109a4:	4640      	mov	r0, r8
 80109a6:	47d0      	blx	sl
 80109a8:	3001      	adds	r0, #1
 80109aa:	d0ad      	beq.n	8010908 <_printf_i+0x15c>
 80109ac:	6823      	ldr	r3, [r4, #0]
 80109ae:	079b      	lsls	r3, r3, #30
 80109b0:	d413      	bmi.n	80109da <_printf_i+0x22e>
 80109b2:	68e0      	ldr	r0, [r4, #12]
 80109b4:	9b03      	ldr	r3, [sp, #12]
 80109b6:	4298      	cmp	r0, r3
 80109b8:	bfb8      	it	lt
 80109ba:	4618      	movlt	r0, r3
 80109bc:	e7a6      	b.n	801090c <_printf_i+0x160>
 80109be:	2301      	movs	r3, #1
 80109c0:	4632      	mov	r2, r6
 80109c2:	4649      	mov	r1, r9
 80109c4:	4640      	mov	r0, r8
 80109c6:	47d0      	blx	sl
 80109c8:	3001      	adds	r0, #1
 80109ca:	d09d      	beq.n	8010908 <_printf_i+0x15c>
 80109cc:	3501      	adds	r5, #1
 80109ce:	68e3      	ldr	r3, [r4, #12]
 80109d0:	9903      	ldr	r1, [sp, #12]
 80109d2:	1a5b      	subs	r3, r3, r1
 80109d4:	42ab      	cmp	r3, r5
 80109d6:	dcf2      	bgt.n	80109be <_printf_i+0x212>
 80109d8:	e7eb      	b.n	80109b2 <_printf_i+0x206>
 80109da:	2500      	movs	r5, #0
 80109dc:	f104 0619 	add.w	r6, r4, #25
 80109e0:	e7f5      	b.n	80109ce <_printf_i+0x222>
 80109e2:	bf00      	nop
 80109e4:	08013f8e 	.word	0x08013f8e
 80109e8:	08013f9f 	.word	0x08013f9f

080109ec <std>:
 80109ec:	2300      	movs	r3, #0
 80109ee:	b510      	push	{r4, lr}
 80109f0:	4604      	mov	r4, r0
 80109f2:	e9c0 3300 	strd	r3, r3, [r0]
 80109f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80109fa:	6083      	str	r3, [r0, #8]
 80109fc:	8181      	strh	r1, [r0, #12]
 80109fe:	6643      	str	r3, [r0, #100]	@ 0x64
 8010a00:	81c2      	strh	r2, [r0, #14]
 8010a02:	6183      	str	r3, [r0, #24]
 8010a04:	4619      	mov	r1, r3
 8010a06:	2208      	movs	r2, #8
 8010a08:	305c      	adds	r0, #92	@ 0x5c
 8010a0a:	f000 f8eb 	bl	8010be4 <memset>
 8010a0e:	4b0d      	ldr	r3, [pc, #52]	@ (8010a44 <std+0x58>)
 8010a10:	6263      	str	r3, [r4, #36]	@ 0x24
 8010a12:	4b0d      	ldr	r3, [pc, #52]	@ (8010a48 <std+0x5c>)
 8010a14:	62a3      	str	r3, [r4, #40]	@ 0x28
 8010a16:	4b0d      	ldr	r3, [pc, #52]	@ (8010a4c <std+0x60>)
 8010a18:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8010a1a:	4b0d      	ldr	r3, [pc, #52]	@ (8010a50 <std+0x64>)
 8010a1c:	6323      	str	r3, [r4, #48]	@ 0x30
 8010a1e:	4b0d      	ldr	r3, [pc, #52]	@ (8010a54 <std+0x68>)
 8010a20:	6224      	str	r4, [r4, #32]
 8010a22:	429c      	cmp	r4, r3
 8010a24:	d006      	beq.n	8010a34 <std+0x48>
 8010a26:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8010a2a:	4294      	cmp	r4, r2
 8010a2c:	d002      	beq.n	8010a34 <std+0x48>
 8010a2e:	33d0      	adds	r3, #208	@ 0xd0
 8010a30:	429c      	cmp	r4, r3
 8010a32:	d105      	bne.n	8010a40 <std+0x54>
 8010a34:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8010a38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010a3c:	f000 b95e 	b.w	8010cfc <__retarget_lock_init_recursive>
 8010a40:	bd10      	pop	{r4, pc}
 8010a42:	bf00      	nop
 8010a44:	080126c5 	.word	0x080126c5
 8010a48:	080126e7 	.word	0x080126e7
 8010a4c:	0801271f 	.word	0x0801271f
 8010a50:	08012743 	.word	0x08012743
 8010a54:	20012844 	.word	0x20012844

08010a58 <stdio_exit_handler>:
 8010a58:	4a02      	ldr	r2, [pc, #8]	@ (8010a64 <stdio_exit_handler+0xc>)
 8010a5a:	4903      	ldr	r1, [pc, #12]	@ (8010a68 <stdio_exit_handler+0x10>)
 8010a5c:	4803      	ldr	r0, [pc, #12]	@ (8010a6c <stdio_exit_handler+0x14>)
 8010a5e:	f000 b869 	b.w	8010b34 <_fwalk_sglue>
 8010a62:	bf00      	nop
 8010a64:	200001a8 	.word	0x200001a8
 8010a68:	08011f59 	.word	0x08011f59
 8010a6c:	200001b8 	.word	0x200001b8

08010a70 <cleanup_stdio>:
 8010a70:	6841      	ldr	r1, [r0, #4]
 8010a72:	4b0c      	ldr	r3, [pc, #48]	@ (8010aa4 <cleanup_stdio+0x34>)
 8010a74:	4299      	cmp	r1, r3
 8010a76:	b510      	push	{r4, lr}
 8010a78:	4604      	mov	r4, r0
 8010a7a:	d001      	beq.n	8010a80 <cleanup_stdio+0x10>
 8010a7c:	f001 fa6c 	bl	8011f58 <_fflush_r>
 8010a80:	68a1      	ldr	r1, [r4, #8]
 8010a82:	4b09      	ldr	r3, [pc, #36]	@ (8010aa8 <cleanup_stdio+0x38>)
 8010a84:	4299      	cmp	r1, r3
 8010a86:	d002      	beq.n	8010a8e <cleanup_stdio+0x1e>
 8010a88:	4620      	mov	r0, r4
 8010a8a:	f001 fa65 	bl	8011f58 <_fflush_r>
 8010a8e:	68e1      	ldr	r1, [r4, #12]
 8010a90:	4b06      	ldr	r3, [pc, #24]	@ (8010aac <cleanup_stdio+0x3c>)
 8010a92:	4299      	cmp	r1, r3
 8010a94:	d004      	beq.n	8010aa0 <cleanup_stdio+0x30>
 8010a96:	4620      	mov	r0, r4
 8010a98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010a9c:	f001 ba5c 	b.w	8011f58 <_fflush_r>
 8010aa0:	bd10      	pop	{r4, pc}
 8010aa2:	bf00      	nop
 8010aa4:	20012844 	.word	0x20012844
 8010aa8:	200128ac 	.word	0x200128ac
 8010aac:	20012914 	.word	0x20012914

08010ab0 <global_stdio_init.part.0>:
 8010ab0:	b510      	push	{r4, lr}
 8010ab2:	4b0b      	ldr	r3, [pc, #44]	@ (8010ae0 <global_stdio_init.part.0+0x30>)
 8010ab4:	4c0b      	ldr	r4, [pc, #44]	@ (8010ae4 <global_stdio_init.part.0+0x34>)
 8010ab6:	4a0c      	ldr	r2, [pc, #48]	@ (8010ae8 <global_stdio_init.part.0+0x38>)
 8010ab8:	601a      	str	r2, [r3, #0]
 8010aba:	4620      	mov	r0, r4
 8010abc:	2200      	movs	r2, #0
 8010abe:	2104      	movs	r1, #4
 8010ac0:	f7ff ff94 	bl	80109ec <std>
 8010ac4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8010ac8:	2201      	movs	r2, #1
 8010aca:	2109      	movs	r1, #9
 8010acc:	f7ff ff8e 	bl	80109ec <std>
 8010ad0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8010ad4:	2202      	movs	r2, #2
 8010ad6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010ada:	2112      	movs	r1, #18
 8010adc:	f7ff bf86 	b.w	80109ec <std>
 8010ae0:	2001297c 	.word	0x2001297c
 8010ae4:	20012844 	.word	0x20012844
 8010ae8:	08010a59 	.word	0x08010a59

08010aec <__sfp_lock_acquire>:
 8010aec:	4801      	ldr	r0, [pc, #4]	@ (8010af4 <__sfp_lock_acquire+0x8>)
 8010aee:	f000 b906 	b.w	8010cfe <__retarget_lock_acquire_recursive>
 8010af2:	bf00      	nop
 8010af4:	20012985 	.word	0x20012985

08010af8 <__sfp_lock_release>:
 8010af8:	4801      	ldr	r0, [pc, #4]	@ (8010b00 <__sfp_lock_release+0x8>)
 8010afa:	f000 b901 	b.w	8010d00 <__retarget_lock_release_recursive>
 8010afe:	bf00      	nop
 8010b00:	20012985 	.word	0x20012985

08010b04 <__sinit>:
 8010b04:	b510      	push	{r4, lr}
 8010b06:	4604      	mov	r4, r0
 8010b08:	f7ff fff0 	bl	8010aec <__sfp_lock_acquire>
 8010b0c:	6a23      	ldr	r3, [r4, #32]
 8010b0e:	b11b      	cbz	r3, 8010b18 <__sinit+0x14>
 8010b10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010b14:	f7ff bff0 	b.w	8010af8 <__sfp_lock_release>
 8010b18:	4b04      	ldr	r3, [pc, #16]	@ (8010b2c <__sinit+0x28>)
 8010b1a:	6223      	str	r3, [r4, #32]
 8010b1c:	4b04      	ldr	r3, [pc, #16]	@ (8010b30 <__sinit+0x2c>)
 8010b1e:	681b      	ldr	r3, [r3, #0]
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	d1f5      	bne.n	8010b10 <__sinit+0xc>
 8010b24:	f7ff ffc4 	bl	8010ab0 <global_stdio_init.part.0>
 8010b28:	e7f2      	b.n	8010b10 <__sinit+0xc>
 8010b2a:	bf00      	nop
 8010b2c:	08010a71 	.word	0x08010a71
 8010b30:	2001297c 	.word	0x2001297c

08010b34 <_fwalk_sglue>:
 8010b34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010b38:	4607      	mov	r7, r0
 8010b3a:	4688      	mov	r8, r1
 8010b3c:	4614      	mov	r4, r2
 8010b3e:	2600      	movs	r6, #0
 8010b40:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010b44:	f1b9 0901 	subs.w	r9, r9, #1
 8010b48:	d505      	bpl.n	8010b56 <_fwalk_sglue+0x22>
 8010b4a:	6824      	ldr	r4, [r4, #0]
 8010b4c:	2c00      	cmp	r4, #0
 8010b4e:	d1f7      	bne.n	8010b40 <_fwalk_sglue+0xc>
 8010b50:	4630      	mov	r0, r6
 8010b52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010b56:	89ab      	ldrh	r3, [r5, #12]
 8010b58:	2b01      	cmp	r3, #1
 8010b5a:	d907      	bls.n	8010b6c <_fwalk_sglue+0x38>
 8010b5c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010b60:	3301      	adds	r3, #1
 8010b62:	d003      	beq.n	8010b6c <_fwalk_sglue+0x38>
 8010b64:	4629      	mov	r1, r5
 8010b66:	4638      	mov	r0, r7
 8010b68:	47c0      	blx	r8
 8010b6a:	4306      	orrs	r6, r0
 8010b6c:	3568      	adds	r5, #104	@ 0x68
 8010b6e:	e7e9      	b.n	8010b44 <_fwalk_sglue+0x10>

08010b70 <_vsniprintf_r>:
 8010b70:	b530      	push	{r4, r5, lr}
 8010b72:	4614      	mov	r4, r2
 8010b74:	2c00      	cmp	r4, #0
 8010b76:	b09b      	sub	sp, #108	@ 0x6c
 8010b78:	4605      	mov	r5, r0
 8010b7a:	461a      	mov	r2, r3
 8010b7c:	da05      	bge.n	8010b8a <_vsniprintf_r+0x1a>
 8010b7e:	238b      	movs	r3, #139	@ 0x8b
 8010b80:	6003      	str	r3, [r0, #0]
 8010b82:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010b86:	b01b      	add	sp, #108	@ 0x6c
 8010b88:	bd30      	pop	{r4, r5, pc}
 8010b8a:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8010b8e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8010b92:	bf14      	ite	ne
 8010b94:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8010b98:	4623      	moveq	r3, r4
 8010b9a:	9302      	str	r3, [sp, #8]
 8010b9c:	9305      	str	r3, [sp, #20]
 8010b9e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8010ba2:	9100      	str	r1, [sp, #0]
 8010ba4:	9104      	str	r1, [sp, #16]
 8010ba6:	f8ad 300e 	strh.w	r3, [sp, #14]
 8010baa:	4669      	mov	r1, sp
 8010bac:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8010bae:	f000 ffa9 	bl	8011b04 <_svfiprintf_r>
 8010bb2:	1c43      	adds	r3, r0, #1
 8010bb4:	bfbc      	itt	lt
 8010bb6:	238b      	movlt	r3, #139	@ 0x8b
 8010bb8:	602b      	strlt	r3, [r5, #0]
 8010bba:	2c00      	cmp	r4, #0
 8010bbc:	d0e3      	beq.n	8010b86 <_vsniprintf_r+0x16>
 8010bbe:	9b00      	ldr	r3, [sp, #0]
 8010bc0:	2200      	movs	r2, #0
 8010bc2:	701a      	strb	r2, [r3, #0]
 8010bc4:	e7df      	b.n	8010b86 <_vsniprintf_r+0x16>
	...

08010bc8 <vsniprintf>:
 8010bc8:	b507      	push	{r0, r1, r2, lr}
 8010bca:	9300      	str	r3, [sp, #0]
 8010bcc:	4613      	mov	r3, r2
 8010bce:	460a      	mov	r2, r1
 8010bd0:	4601      	mov	r1, r0
 8010bd2:	4803      	ldr	r0, [pc, #12]	@ (8010be0 <vsniprintf+0x18>)
 8010bd4:	6800      	ldr	r0, [r0, #0]
 8010bd6:	f7ff ffcb 	bl	8010b70 <_vsniprintf_r>
 8010bda:	b003      	add	sp, #12
 8010bdc:	f85d fb04 	ldr.w	pc, [sp], #4
 8010be0:	200001b4 	.word	0x200001b4

08010be4 <memset>:
 8010be4:	4402      	add	r2, r0
 8010be6:	4603      	mov	r3, r0
 8010be8:	4293      	cmp	r3, r2
 8010bea:	d100      	bne.n	8010bee <memset+0xa>
 8010bec:	4770      	bx	lr
 8010bee:	f803 1b01 	strb.w	r1, [r3], #1
 8010bf2:	e7f9      	b.n	8010be8 <memset+0x4>

08010bf4 <_localeconv_r>:
 8010bf4:	4800      	ldr	r0, [pc, #0]	@ (8010bf8 <_localeconv_r+0x4>)
 8010bf6:	4770      	bx	lr
 8010bf8:	200002f4 	.word	0x200002f4

08010bfc <_reclaim_reent>:
 8010bfc:	4b29      	ldr	r3, [pc, #164]	@ (8010ca4 <_reclaim_reent+0xa8>)
 8010bfe:	681b      	ldr	r3, [r3, #0]
 8010c00:	4283      	cmp	r3, r0
 8010c02:	b570      	push	{r4, r5, r6, lr}
 8010c04:	4604      	mov	r4, r0
 8010c06:	d04b      	beq.n	8010ca0 <_reclaim_reent+0xa4>
 8010c08:	69c3      	ldr	r3, [r0, #28]
 8010c0a:	b1ab      	cbz	r3, 8010c38 <_reclaim_reent+0x3c>
 8010c0c:	68db      	ldr	r3, [r3, #12]
 8010c0e:	b16b      	cbz	r3, 8010c2c <_reclaim_reent+0x30>
 8010c10:	2500      	movs	r5, #0
 8010c12:	69e3      	ldr	r3, [r4, #28]
 8010c14:	68db      	ldr	r3, [r3, #12]
 8010c16:	5959      	ldr	r1, [r3, r5]
 8010c18:	2900      	cmp	r1, #0
 8010c1a:	d13b      	bne.n	8010c94 <_reclaim_reent+0x98>
 8010c1c:	3504      	adds	r5, #4
 8010c1e:	2d80      	cmp	r5, #128	@ 0x80
 8010c20:	d1f7      	bne.n	8010c12 <_reclaim_reent+0x16>
 8010c22:	69e3      	ldr	r3, [r4, #28]
 8010c24:	4620      	mov	r0, r4
 8010c26:	68d9      	ldr	r1, [r3, #12]
 8010c28:	f000 fec6 	bl	80119b8 <_free_r>
 8010c2c:	69e3      	ldr	r3, [r4, #28]
 8010c2e:	6819      	ldr	r1, [r3, #0]
 8010c30:	b111      	cbz	r1, 8010c38 <_reclaim_reent+0x3c>
 8010c32:	4620      	mov	r0, r4
 8010c34:	f000 fec0 	bl	80119b8 <_free_r>
 8010c38:	6961      	ldr	r1, [r4, #20]
 8010c3a:	b111      	cbz	r1, 8010c42 <_reclaim_reent+0x46>
 8010c3c:	4620      	mov	r0, r4
 8010c3e:	f000 febb 	bl	80119b8 <_free_r>
 8010c42:	69e1      	ldr	r1, [r4, #28]
 8010c44:	b111      	cbz	r1, 8010c4c <_reclaim_reent+0x50>
 8010c46:	4620      	mov	r0, r4
 8010c48:	f000 feb6 	bl	80119b8 <_free_r>
 8010c4c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8010c4e:	b111      	cbz	r1, 8010c56 <_reclaim_reent+0x5a>
 8010c50:	4620      	mov	r0, r4
 8010c52:	f000 feb1 	bl	80119b8 <_free_r>
 8010c56:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010c58:	b111      	cbz	r1, 8010c60 <_reclaim_reent+0x64>
 8010c5a:	4620      	mov	r0, r4
 8010c5c:	f000 feac 	bl	80119b8 <_free_r>
 8010c60:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8010c62:	b111      	cbz	r1, 8010c6a <_reclaim_reent+0x6e>
 8010c64:	4620      	mov	r0, r4
 8010c66:	f000 fea7 	bl	80119b8 <_free_r>
 8010c6a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8010c6c:	b111      	cbz	r1, 8010c74 <_reclaim_reent+0x78>
 8010c6e:	4620      	mov	r0, r4
 8010c70:	f000 fea2 	bl	80119b8 <_free_r>
 8010c74:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8010c76:	b111      	cbz	r1, 8010c7e <_reclaim_reent+0x82>
 8010c78:	4620      	mov	r0, r4
 8010c7a:	f000 fe9d 	bl	80119b8 <_free_r>
 8010c7e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8010c80:	b111      	cbz	r1, 8010c88 <_reclaim_reent+0x8c>
 8010c82:	4620      	mov	r0, r4
 8010c84:	f000 fe98 	bl	80119b8 <_free_r>
 8010c88:	6a23      	ldr	r3, [r4, #32]
 8010c8a:	b14b      	cbz	r3, 8010ca0 <_reclaim_reent+0xa4>
 8010c8c:	4620      	mov	r0, r4
 8010c8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010c92:	4718      	bx	r3
 8010c94:	680e      	ldr	r6, [r1, #0]
 8010c96:	4620      	mov	r0, r4
 8010c98:	f000 fe8e 	bl	80119b8 <_free_r>
 8010c9c:	4631      	mov	r1, r6
 8010c9e:	e7bb      	b.n	8010c18 <_reclaim_reent+0x1c>
 8010ca0:	bd70      	pop	{r4, r5, r6, pc}
 8010ca2:	bf00      	nop
 8010ca4:	200001b4 	.word	0x200001b4

08010ca8 <__errno>:
 8010ca8:	4b01      	ldr	r3, [pc, #4]	@ (8010cb0 <__errno+0x8>)
 8010caa:	6818      	ldr	r0, [r3, #0]
 8010cac:	4770      	bx	lr
 8010cae:	bf00      	nop
 8010cb0:	200001b4 	.word	0x200001b4

08010cb4 <__libc_init_array>:
 8010cb4:	b570      	push	{r4, r5, r6, lr}
 8010cb6:	4d0d      	ldr	r5, [pc, #52]	@ (8010cec <__libc_init_array+0x38>)
 8010cb8:	4c0d      	ldr	r4, [pc, #52]	@ (8010cf0 <__libc_init_array+0x3c>)
 8010cba:	1b64      	subs	r4, r4, r5
 8010cbc:	10a4      	asrs	r4, r4, #2
 8010cbe:	2600      	movs	r6, #0
 8010cc0:	42a6      	cmp	r6, r4
 8010cc2:	d109      	bne.n	8010cd8 <__libc_init_array+0x24>
 8010cc4:	4d0b      	ldr	r5, [pc, #44]	@ (8010cf4 <__libc_init_array+0x40>)
 8010cc6:	4c0c      	ldr	r4, [pc, #48]	@ (8010cf8 <__libc_init_array+0x44>)
 8010cc8:	f002 fcd6 	bl	8013678 <_init>
 8010ccc:	1b64      	subs	r4, r4, r5
 8010cce:	10a4      	asrs	r4, r4, #2
 8010cd0:	2600      	movs	r6, #0
 8010cd2:	42a6      	cmp	r6, r4
 8010cd4:	d105      	bne.n	8010ce2 <__libc_init_array+0x2e>
 8010cd6:	bd70      	pop	{r4, r5, r6, pc}
 8010cd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8010cdc:	4798      	blx	r3
 8010cde:	3601      	adds	r6, #1
 8010ce0:	e7ee      	b.n	8010cc0 <__libc_init_array+0xc>
 8010ce2:	f855 3b04 	ldr.w	r3, [r5], #4
 8010ce6:	4798      	blx	r3
 8010ce8:	3601      	adds	r6, #1
 8010cea:	e7f2      	b.n	8010cd2 <__libc_init_array+0x1e>
 8010cec:	08014310 	.word	0x08014310
 8010cf0:	08014310 	.word	0x08014310
 8010cf4:	08014310 	.word	0x08014310
 8010cf8:	08014314 	.word	0x08014314

08010cfc <__retarget_lock_init_recursive>:
 8010cfc:	4770      	bx	lr

08010cfe <__retarget_lock_acquire_recursive>:
 8010cfe:	4770      	bx	lr

08010d00 <__retarget_lock_release_recursive>:
 8010d00:	4770      	bx	lr

08010d02 <memcpy>:
 8010d02:	440a      	add	r2, r1
 8010d04:	4291      	cmp	r1, r2
 8010d06:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8010d0a:	d100      	bne.n	8010d0e <memcpy+0xc>
 8010d0c:	4770      	bx	lr
 8010d0e:	b510      	push	{r4, lr}
 8010d10:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010d14:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010d18:	4291      	cmp	r1, r2
 8010d1a:	d1f9      	bne.n	8010d10 <memcpy+0xe>
 8010d1c:	bd10      	pop	{r4, pc}

08010d1e <quorem>:
 8010d1e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d22:	6903      	ldr	r3, [r0, #16]
 8010d24:	690c      	ldr	r4, [r1, #16]
 8010d26:	42a3      	cmp	r3, r4
 8010d28:	4607      	mov	r7, r0
 8010d2a:	db7e      	blt.n	8010e2a <quorem+0x10c>
 8010d2c:	3c01      	subs	r4, #1
 8010d2e:	f101 0814 	add.w	r8, r1, #20
 8010d32:	00a3      	lsls	r3, r4, #2
 8010d34:	f100 0514 	add.w	r5, r0, #20
 8010d38:	9300      	str	r3, [sp, #0]
 8010d3a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010d3e:	9301      	str	r3, [sp, #4]
 8010d40:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010d44:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010d48:	3301      	adds	r3, #1
 8010d4a:	429a      	cmp	r2, r3
 8010d4c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010d50:	fbb2 f6f3 	udiv	r6, r2, r3
 8010d54:	d32e      	bcc.n	8010db4 <quorem+0x96>
 8010d56:	f04f 0a00 	mov.w	sl, #0
 8010d5a:	46c4      	mov	ip, r8
 8010d5c:	46ae      	mov	lr, r5
 8010d5e:	46d3      	mov	fp, sl
 8010d60:	f85c 3b04 	ldr.w	r3, [ip], #4
 8010d64:	b298      	uxth	r0, r3
 8010d66:	fb06 a000 	mla	r0, r6, r0, sl
 8010d6a:	0c02      	lsrs	r2, r0, #16
 8010d6c:	0c1b      	lsrs	r3, r3, #16
 8010d6e:	fb06 2303 	mla	r3, r6, r3, r2
 8010d72:	f8de 2000 	ldr.w	r2, [lr]
 8010d76:	b280      	uxth	r0, r0
 8010d78:	b292      	uxth	r2, r2
 8010d7a:	1a12      	subs	r2, r2, r0
 8010d7c:	445a      	add	r2, fp
 8010d7e:	f8de 0000 	ldr.w	r0, [lr]
 8010d82:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010d86:	b29b      	uxth	r3, r3
 8010d88:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8010d8c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8010d90:	b292      	uxth	r2, r2
 8010d92:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8010d96:	45e1      	cmp	r9, ip
 8010d98:	f84e 2b04 	str.w	r2, [lr], #4
 8010d9c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8010da0:	d2de      	bcs.n	8010d60 <quorem+0x42>
 8010da2:	9b00      	ldr	r3, [sp, #0]
 8010da4:	58eb      	ldr	r3, [r5, r3]
 8010da6:	b92b      	cbnz	r3, 8010db4 <quorem+0x96>
 8010da8:	9b01      	ldr	r3, [sp, #4]
 8010daa:	3b04      	subs	r3, #4
 8010dac:	429d      	cmp	r5, r3
 8010dae:	461a      	mov	r2, r3
 8010db0:	d32f      	bcc.n	8010e12 <quorem+0xf4>
 8010db2:	613c      	str	r4, [r7, #16]
 8010db4:	4638      	mov	r0, r7
 8010db6:	f001 fb7d 	bl	80124b4 <__mcmp>
 8010dba:	2800      	cmp	r0, #0
 8010dbc:	db25      	blt.n	8010e0a <quorem+0xec>
 8010dbe:	4629      	mov	r1, r5
 8010dc0:	2000      	movs	r0, #0
 8010dc2:	f858 2b04 	ldr.w	r2, [r8], #4
 8010dc6:	f8d1 c000 	ldr.w	ip, [r1]
 8010dca:	fa1f fe82 	uxth.w	lr, r2
 8010dce:	fa1f f38c 	uxth.w	r3, ip
 8010dd2:	eba3 030e 	sub.w	r3, r3, lr
 8010dd6:	4403      	add	r3, r0
 8010dd8:	0c12      	lsrs	r2, r2, #16
 8010dda:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8010dde:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8010de2:	b29b      	uxth	r3, r3
 8010de4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010de8:	45c1      	cmp	r9, r8
 8010dea:	f841 3b04 	str.w	r3, [r1], #4
 8010dee:	ea4f 4022 	mov.w	r0, r2, asr #16
 8010df2:	d2e6      	bcs.n	8010dc2 <quorem+0xa4>
 8010df4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010df8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010dfc:	b922      	cbnz	r2, 8010e08 <quorem+0xea>
 8010dfe:	3b04      	subs	r3, #4
 8010e00:	429d      	cmp	r5, r3
 8010e02:	461a      	mov	r2, r3
 8010e04:	d30b      	bcc.n	8010e1e <quorem+0x100>
 8010e06:	613c      	str	r4, [r7, #16]
 8010e08:	3601      	adds	r6, #1
 8010e0a:	4630      	mov	r0, r6
 8010e0c:	b003      	add	sp, #12
 8010e0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e12:	6812      	ldr	r2, [r2, #0]
 8010e14:	3b04      	subs	r3, #4
 8010e16:	2a00      	cmp	r2, #0
 8010e18:	d1cb      	bne.n	8010db2 <quorem+0x94>
 8010e1a:	3c01      	subs	r4, #1
 8010e1c:	e7c6      	b.n	8010dac <quorem+0x8e>
 8010e1e:	6812      	ldr	r2, [r2, #0]
 8010e20:	3b04      	subs	r3, #4
 8010e22:	2a00      	cmp	r2, #0
 8010e24:	d1ef      	bne.n	8010e06 <quorem+0xe8>
 8010e26:	3c01      	subs	r4, #1
 8010e28:	e7ea      	b.n	8010e00 <quorem+0xe2>
 8010e2a:	2000      	movs	r0, #0
 8010e2c:	e7ee      	b.n	8010e0c <quorem+0xee>
	...

08010e30 <_dtoa_r>:
 8010e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e34:	69c7      	ldr	r7, [r0, #28]
 8010e36:	b099      	sub	sp, #100	@ 0x64
 8010e38:	ed8d 0b02 	vstr	d0, [sp, #8]
 8010e3c:	ec55 4b10 	vmov	r4, r5, d0
 8010e40:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8010e42:	9109      	str	r1, [sp, #36]	@ 0x24
 8010e44:	4683      	mov	fp, r0
 8010e46:	920e      	str	r2, [sp, #56]	@ 0x38
 8010e48:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010e4a:	b97f      	cbnz	r7, 8010e6c <_dtoa_r+0x3c>
 8010e4c:	2010      	movs	r0, #16
 8010e4e:	f000 ff55 	bl	8011cfc <malloc>
 8010e52:	4602      	mov	r2, r0
 8010e54:	f8cb 001c 	str.w	r0, [fp, #28]
 8010e58:	b920      	cbnz	r0, 8010e64 <_dtoa_r+0x34>
 8010e5a:	4ba7      	ldr	r3, [pc, #668]	@ (80110f8 <_dtoa_r+0x2c8>)
 8010e5c:	21ef      	movs	r1, #239	@ 0xef
 8010e5e:	48a7      	ldr	r0, [pc, #668]	@ (80110fc <_dtoa_r+0x2cc>)
 8010e60:	f001 fd12 	bl	8012888 <__assert_func>
 8010e64:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8010e68:	6007      	str	r7, [r0, #0]
 8010e6a:	60c7      	str	r7, [r0, #12]
 8010e6c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8010e70:	6819      	ldr	r1, [r3, #0]
 8010e72:	b159      	cbz	r1, 8010e8c <_dtoa_r+0x5c>
 8010e74:	685a      	ldr	r2, [r3, #4]
 8010e76:	604a      	str	r2, [r1, #4]
 8010e78:	2301      	movs	r3, #1
 8010e7a:	4093      	lsls	r3, r2
 8010e7c:	608b      	str	r3, [r1, #8]
 8010e7e:	4658      	mov	r0, fp
 8010e80:	f001 f8de 	bl	8012040 <_Bfree>
 8010e84:	f8db 301c 	ldr.w	r3, [fp, #28]
 8010e88:	2200      	movs	r2, #0
 8010e8a:	601a      	str	r2, [r3, #0]
 8010e8c:	1e2b      	subs	r3, r5, #0
 8010e8e:	bfb9      	ittee	lt
 8010e90:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8010e94:	9303      	strlt	r3, [sp, #12]
 8010e96:	2300      	movge	r3, #0
 8010e98:	6033      	strge	r3, [r6, #0]
 8010e9a:	9f03      	ldr	r7, [sp, #12]
 8010e9c:	4b98      	ldr	r3, [pc, #608]	@ (8011100 <_dtoa_r+0x2d0>)
 8010e9e:	bfbc      	itt	lt
 8010ea0:	2201      	movlt	r2, #1
 8010ea2:	6032      	strlt	r2, [r6, #0]
 8010ea4:	43bb      	bics	r3, r7
 8010ea6:	d112      	bne.n	8010ece <_dtoa_r+0x9e>
 8010ea8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8010eaa:	f242 730f 	movw	r3, #9999	@ 0x270f
 8010eae:	6013      	str	r3, [r2, #0]
 8010eb0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010eb4:	4323      	orrs	r3, r4
 8010eb6:	f000 854d 	beq.w	8011954 <_dtoa_r+0xb24>
 8010eba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010ebc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8011114 <_dtoa_r+0x2e4>
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	f000 854f 	beq.w	8011964 <_dtoa_r+0xb34>
 8010ec6:	f10a 0303 	add.w	r3, sl, #3
 8010eca:	f000 bd49 	b.w	8011960 <_dtoa_r+0xb30>
 8010ece:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010ed2:	2200      	movs	r2, #0
 8010ed4:	ec51 0b17 	vmov	r0, r1, d7
 8010ed8:	2300      	movs	r3, #0
 8010eda:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8010ede:	f7ef fe1b 	bl	8000b18 <__aeabi_dcmpeq>
 8010ee2:	4680      	mov	r8, r0
 8010ee4:	b158      	cbz	r0, 8010efe <_dtoa_r+0xce>
 8010ee6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8010ee8:	2301      	movs	r3, #1
 8010eea:	6013      	str	r3, [r2, #0]
 8010eec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010eee:	b113      	cbz	r3, 8010ef6 <_dtoa_r+0xc6>
 8010ef0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8010ef2:	4b84      	ldr	r3, [pc, #528]	@ (8011104 <_dtoa_r+0x2d4>)
 8010ef4:	6013      	str	r3, [r2, #0]
 8010ef6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8011118 <_dtoa_r+0x2e8>
 8010efa:	f000 bd33 	b.w	8011964 <_dtoa_r+0xb34>
 8010efe:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8010f02:	aa16      	add	r2, sp, #88	@ 0x58
 8010f04:	a917      	add	r1, sp, #92	@ 0x5c
 8010f06:	4658      	mov	r0, fp
 8010f08:	f001 fb84 	bl	8012614 <__d2b>
 8010f0c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8010f10:	4681      	mov	r9, r0
 8010f12:	2e00      	cmp	r6, #0
 8010f14:	d077      	beq.n	8011006 <_dtoa_r+0x1d6>
 8010f16:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010f18:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8010f1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010f20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010f24:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8010f28:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8010f2c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8010f30:	4619      	mov	r1, r3
 8010f32:	2200      	movs	r2, #0
 8010f34:	4b74      	ldr	r3, [pc, #464]	@ (8011108 <_dtoa_r+0x2d8>)
 8010f36:	f7ef f9cf 	bl	80002d8 <__aeabi_dsub>
 8010f3a:	a369      	add	r3, pc, #420	@ (adr r3, 80110e0 <_dtoa_r+0x2b0>)
 8010f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f40:	f7ef fb82 	bl	8000648 <__aeabi_dmul>
 8010f44:	a368      	add	r3, pc, #416	@ (adr r3, 80110e8 <_dtoa_r+0x2b8>)
 8010f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f4a:	f7ef f9c7 	bl	80002dc <__adddf3>
 8010f4e:	4604      	mov	r4, r0
 8010f50:	4630      	mov	r0, r6
 8010f52:	460d      	mov	r5, r1
 8010f54:	f7ef fb0e 	bl	8000574 <__aeabi_i2d>
 8010f58:	a365      	add	r3, pc, #404	@ (adr r3, 80110f0 <_dtoa_r+0x2c0>)
 8010f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f5e:	f7ef fb73 	bl	8000648 <__aeabi_dmul>
 8010f62:	4602      	mov	r2, r0
 8010f64:	460b      	mov	r3, r1
 8010f66:	4620      	mov	r0, r4
 8010f68:	4629      	mov	r1, r5
 8010f6a:	f7ef f9b7 	bl	80002dc <__adddf3>
 8010f6e:	4604      	mov	r4, r0
 8010f70:	460d      	mov	r5, r1
 8010f72:	f7ef fe19 	bl	8000ba8 <__aeabi_d2iz>
 8010f76:	2200      	movs	r2, #0
 8010f78:	4607      	mov	r7, r0
 8010f7a:	2300      	movs	r3, #0
 8010f7c:	4620      	mov	r0, r4
 8010f7e:	4629      	mov	r1, r5
 8010f80:	f7ef fdd4 	bl	8000b2c <__aeabi_dcmplt>
 8010f84:	b140      	cbz	r0, 8010f98 <_dtoa_r+0x168>
 8010f86:	4638      	mov	r0, r7
 8010f88:	f7ef faf4 	bl	8000574 <__aeabi_i2d>
 8010f8c:	4622      	mov	r2, r4
 8010f8e:	462b      	mov	r3, r5
 8010f90:	f7ef fdc2 	bl	8000b18 <__aeabi_dcmpeq>
 8010f94:	b900      	cbnz	r0, 8010f98 <_dtoa_r+0x168>
 8010f96:	3f01      	subs	r7, #1
 8010f98:	2f16      	cmp	r7, #22
 8010f9a:	d851      	bhi.n	8011040 <_dtoa_r+0x210>
 8010f9c:	4b5b      	ldr	r3, [pc, #364]	@ (801110c <_dtoa_r+0x2dc>)
 8010f9e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8010fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fa6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010faa:	f7ef fdbf 	bl	8000b2c <__aeabi_dcmplt>
 8010fae:	2800      	cmp	r0, #0
 8010fb0:	d048      	beq.n	8011044 <_dtoa_r+0x214>
 8010fb2:	3f01      	subs	r7, #1
 8010fb4:	2300      	movs	r3, #0
 8010fb6:	9312      	str	r3, [sp, #72]	@ 0x48
 8010fb8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8010fba:	1b9b      	subs	r3, r3, r6
 8010fbc:	1e5a      	subs	r2, r3, #1
 8010fbe:	bf44      	itt	mi
 8010fc0:	f1c3 0801 	rsbmi	r8, r3, #1
 8010fc4:	2300      	movmi	r3, #0
 8010fc6:	9208      	str	r2, [sp, #32]
 8010fc8:	bf54      	ite	pl
 8010fca:	f04f 0800 	movpl.w	r8, #0
 8010fce:	9308      	strmi	r3, [sp, #32]
 8010fd0:	2f00      	cmp	r7, #0
 8010fd2:	db39      	blt.n	8011048 <_dtoa_r+0x218>
 8010fd4:	9b08      	ldr	r3, [sp, #32]
 8010fd6:	970f      	str	r7, [sp, #60]	@ 0x3c
 8010fd8:	443b      	add	r3, r7
 8010fda:	9308      	str	r3, [sp, #32]
 8010fdc:	2300      	movs	r3, #0
 8010fde:	930a      	str	r3, [sp, #40]	@ 0x28
 8010fe0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010fe2:	2b09      	cmp	r3, #9
 8010fe4:	d864      	bhi.n	80110b0 <_dtoa_r+0x280>
 8010fe6:	2b05      	cmp	r3, #5
 8010fe8:	bfc4      	itt	gt
 8010fea:	3b04      	subgt	r3, #4
 8010fec:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8010fee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010ff0:	f1a3 0302 	sub.w	r3, r3, #2
 8010ff4:	bfcc      	ite	gt
 8010ff6:	2400      	movgt	r4, #0
 8010ff8:	2401      	movle	r4, #1
 8010ffa:	2b03      	cmp	r3, #3
 8010ffc:	d863      	bhi.n	80110c6 <_dtoa_r+0x296>
 8010ffe:	e8df f003 	tbb	[pc, r3]
 8011002:	372a      	.short	0x372a
 8011004:	5535      	.short	0x5535
 8011006:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 801100a:	441e      	add	r6, r3
 801100c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8011010:	2b20      	cmp	r3, #32
 8011012:	bfc1      	itttt	gt
 8011014:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8011018:	409f      	lslgt	r7, r3
 801101a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801101e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8011022:	bfd6      	itet	le
 8011024:	f1c3 0320 	rsble	r3, r3, #32
 8011028:	ea47 0003 	orrgt.w	r0, r7, r3
 801102c:	fa04 f003 	lslle.w	r0, r4, r3
 8011030:	f7ef fa90 	bl	8000554 <__aeabi_ui2d>
 8011034:	2201      	movs	r2, #1
 8011036:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801103a:	3e01      	subs	r6, #1
 801103c:	9214      	str	r2, [sp, #80]	@ 0x50
 801103e:	e777      	b.n	8010f30 <_dtoa_r+0x100>
 8011040:	2301      	movs	r3, #1
 8011042:	e7b8      	b.n	8010fb6 <_dtoa_r+0x186>
 8011044:	9012      	str	r0, [sp, #72]	@ 0x48
 8011046:	e7b7      	b.n	8010fb8 <_dtoa_r+0x188>
 8011048:	427b      	negs	r3, r7
 801104a:	930a      	str	r3, [sp, #40]	@ 0x28
 801104c:	2300      	movs	r3, #0
 801104e:	eba8 0807 	sub.w	r8, r8, r7
 8011052:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011054:	e7c4      	b.n	8010fe0 <_dtoa_r+0x1b0>
 8011056:	2300      	movs	r3, #0
 8011058:	930b      	str	r3, [sp, #44]	@ 0x2c
 801105a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801105c:	2b00      	cmp	r3, #0
 801105e:	dc35      	bgt.n	80110cc <_dtoa_r+0x29c>
 8011060:	2301      	movs	r3, #1
 8011062:	9300      	str	r3, [sp, #0]
 8011064:	9307      	str	r3, [sp, #28]
 8011066:	461a      	mov	r2, r3
 8011068:	920e      	str	r2, [sp, #56]	@ 0x38
 801106a:	e00b      	b.n	8011084 <_dtoa_r+0x254>
 801106c:	2301      	movs	r3, #1
 801106e:	e7f3      	b.n	8011058 <_dtoa_r+0x228>
 8011070:	2300      	movs	r3, #0
 8011072:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011074:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011076:	18fb      	adds	r3, r7, r3
 8011078:	9300      	str	r3, [sp, #0]
 801107a:	3301      	adds	r3, #1
 801107c:	2b01      	cmp	r3, #1
 801107e:	9307      	str	r3, [sp, #28]
 8011080:	bfb8      	it	lt
 8011082:	2301      	movlt	r3, #1
 8011084:	f8db 001c 	ldr.w	r0, [fp, #28]
 8011088:	2100      	movs	r1, #0
 801108a:	2204      	movs	r2, #4
 801108c:	f102 0514 	add.w	r5, r2, #20
 8011090:	429d      	cmp	r5, r3
 8011092:	d91f      	bls.n	80110d4 <_dtoa_r+0x2a4>
 8011094:	6041      	str	r1, [r0, #4]
 8011096:	4658      	mov	r0, fp
 8011098:	f000 ff92 	bl	8011fc0 <_Balloc>
 801109c:	4682      	mov	sl, r0
 801109e:	2800      	cmp	r0, #0
 80110a0:	d13c      	bne.n	801111c <_dtoa_r+0x2ec>
 80110a2:	4b1b      	ldr	r3, [pc, #108]	@ (8011110 <_dtoa_r+0x2e0>)
 80110a4:	4602      	mov	r2, r0
 80110a6:	f240 11af 	movw	r1, #431	@ 0x1af
 80110aa:	e6d8      	b.n	8010e5e <_dtoa_r+0x2e>
 80110ac:	2301      	movs	r3, #1
 80110ae:	e7e0      	b.n	8011072 <_dtoa_r+0x242>
 80110b0:	2401      	movs	r4, #1
 80110b2:	2300      	movs	r3, #0
 80110b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80110b6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80110b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80110bc:	9300      	str	r3, [sp, #0]
 80110be:	9307      	str	r3, [sp, #28]
 80110c0:	2200      	movs	r2, #0
 80110c2:	2312      	movs	r3, #18
 80110c4:	e7d0      	b.n	8011068 <_dtoa_r+0x238>
 80110c6:	2301      	movs	r3, #1
 80110c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80110ca:	e7f5      	b.n	80110b8 <_dtoa_r+0x288>
 80110cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80110ce:	9300      	str	r3, [sp, #0]
 80110d0:	9307      	str	r3, [sp, #28]
 80110d2:	e7d7      	b.n	8011084 <_dtoa_r+0x254>
 80110d4:	3101      	adds	r1, #1
 80110d6:	0052      	lsls	r2, r2, #1
 80110d8:	e7d8      	b.n	801108c <_dtoa_r+0x25c>
 80110da:	bf00      	nop
 80110dc:	f3af 8000 	nop.w
 80110e0:	636f4361 	.word	0x636f4361
 80110e4:	3fd287a7 	.word	0x3fd287a7
 80110e8:	8b60c8b3 	.word	0x8b60c8b3
 80110ec:	3fc68a28 	.word	0x3fc68a28
 80110f0:	509f79fb 	.word	0x509f79fb
 80110f4:	3fd34413 	.word	0x3fd34413
 80110f8:	08013fbd 	.word	0x08013fbd
 80110fc:	08013fd4 	.word	0x08013fd4
 8011100:	7ff00000 	.word	0x7ff00000
 8011104:	08013f8d 	.word	0x08013f8d
 8011108:	3ff80000 	.word	0x3ff80000
 801110c:	080140e0 	.word	0x080140e0
 8011110:	0801402c 	.word	0x0801402c
 8011114:	08013fb9 	.word	0x08013fb9
 8011118:	08013f8c 	.word	0x08013f8c
 801111c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8011120:	6018      	str	r0, [r3, #0]
 8011122:	9b07      	ldr	r3, [sp, #28]
 8011124:	2b0e      	cmp	r3, #14
 8011126:	f200 80a4 	bhi.w	8011272 <_dtoa_r+0x442>
 801112a:	2c00      	cmp	r4, #0
 801112c:	f000 80a1 	beq.w	8011272 <_dtoa_r+0x442>
 8011130:	2f00      	cmp	r7, #0
 8011132:	dd33      	ble.n	801119c <_dtoa_r+0x36c>
 8011134:	4bad      	ldr	r3, [pc, #692]	@ (80113ec <_dtoa_r+0x5bc>)
 8011136:	f007 020f 	and.w	r2, r7, #15
 801113a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801113e:	ed93 7b00 	vldr	d7, [r3]
 8011142:	05f8      	lsls	r0, r7, #23
 8011144:	ed8d 7b04 	vstr	d7, [sp, #16]
 8011148:	ea4f 1427 	mov.w	r4, r7, asr #4
 801114c:	d516      	bpl.n	801117c <_dtoa_r+0x34c>
 801114e:	4ba8      	ldr	r3, [pc, #672]	@ (80113f0 <_dtoa_r+0x5c0>)
 8011150:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011154:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8011158:	f7ef fba0 	bl	800089c <__aeabi_ddiv>
 801115c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011160:	f004 040f 	and.w	r4, r4, #15
 8011164:	2603      	movs	r6, #3
 8011166:	4da2      	ldr	r5, [pc, #648]	@ (80113f0 <_dtoa_r+0x5c0>)
 8011168:	b954      	cbnz	r4, 8011180 <_dtoa_r+0x350>
 801116a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801116e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011172:	f7ef fb93 	bl	800089c <__aeabi_ddiv>
 8011176:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801117a:	e028      	b.n	80111ce <_dtoa_r+0x39e>
 801117c:	2602      	movs	r6, #2
 801117e:	e7f2      	b.n	8011166 <_dtoa_r+0x336>
 8011180:	07e1      	lsls	r1, r4, #31
 8011182:	d508      	bpl.n	8011196 <_dtoa_r+0x366>
 8011184:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011188:	e9d5 2300 	ldrd	r2, r3, [r5]
 801118c:	f7ef fa5c 	bl	8000648 <__aeabi_dmul>
 8011190:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011194:	3601      	adds	r6, #1
 8011196:	1064      	asrs	r4, r4, #1
 8011198:	3508      	adds	r5, #8
 801119a:	e7e5      	b.n	8011168 <_dtoa_r+0x338>
 801119c:	f000 80d2 	beq.w	8011344 <_dtoa_r+0x514>
 80111a0:	427c      	negs	r4, r7
 80111a2:	4b92      	ldr	r3, [pc, #584]	@ (80113ec <_dtoa_r+0x5bc>)
 80111a4:	4d92      	ldr	r5, [pc, #584]	@ (80113f0 <_dtoa_r+0x5c0>)
 80111a6:	f004 020f 	and.w	r2, r4, #15
 80111aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80111ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111b2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80111b6:	f7ef fa47 	bl	8000648 <__aeabi_dmul>
 80111ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80111be:	1124      	asrs	r4, r4, #4
 80111c0:	2300      	movs	r3, #0
 80111c2:	2602      	movs	r6, #2
 80111c4:	2c00      	cmp	r4, #0
 80111c6:	f040 80b2 	bne.w	801132e <_dtoa_r+0x4fe>
 80111ca:	2b00      	cmp	r3, #0
 80111cc:	d1d3      	bne.n	8011176 <_dtoa_r+0x346>
 80111ce:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80111d0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80111d4:	2b00      	cmp	r3, #0
 80111d6:	f000 80b7 	beq.w	8011348 <_dtoa_r+0x518>
 80111da:	4b86      	ldr	r3, [pc, #536]	@ (80113f4 <_dtoa_r+0x5c4>)
 80111dc:	2200      	movs	r2, #0
 80111de:	4620      	mov	r0, r4
 80111e0:	4629      	mov	r1, r5
 80111e2:	f7ef fca3 	bl	8000b2c <__aeabi_dcmplt>
 80111e6:	2800      	cmp	r0, #0
 80111e8:	f000 80ae 	beq.w	8011348 <_dtoa_r+0x518>
 80111ec:	9b07      	ldr	r3, [sp, #28]
 80111ee:	2b00      	cmp	r3, #0
 80111f0:	f000 80aa 	beq.w	8011348 <_dtoa_r+0x518>
 80111f4:	9b00      	ldr	r3, [sp, #0]
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	dd37      	ble.n	801126a <_dtoa_r+0x43a>
 80111fa:	1e7b      	subs	r3, r7, #1
 80111fc:	9304      	str	r3, [sp, #16]
 80111fe:	4620      	mov	r0, r4
 8011200:	4b7d      	ldr	r3, [pc, #500]	@ (80113f8 <_dtoa_r+0x5c8>)
 8011202:	2200      	movs	r2, #0
 8011204:	4629      	mov	r1, r5
 8011206:	f7ef fa1f 	bl	8000648 <__aeabi_dmul>
 801120a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801120e:	9c00      	ldr	r4, [sp, #0]
 8011210:	3601      	adds	r6, #1
 8011212:	4630      	mov	r0, r6
 8011214:	f7ef f9ae 	bl	8000574 <__aeabi_i2d>
 8011218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801121c:	f7ef fa14 	bl	8000648 <__aeabi_dmul>
 8011220:	4b76      	ldr	r3, [pc, #472]	@ (80113fc <_dtoa_r+0x5cc>)
 8011222:	2200      	movs	r2, #0
 8011224:	f7ef f85a 	bl	80002dc <__adddf3>
 8011228:	4605      	mov	r5, r0
 801122a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801122e:	2c00      	cmp	r4, #0
 8011230:	f040 808d 	bne.w	801134e <_dtoa_r+0x51e>
 8011234:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011238:	4b71      	ldr	r3, [pc, #452]	@ (8011400 <_dtoa_r+0x5d0>)
 801123a:	2200      	movs	r2, #0
 801123c:	f7ef f84c 	bl	80002d8 <__aeabi_dsub>
 8011240:	4602      	mov	r2, r0
 8011242:	460b      	mov	r3, r1
 8011244:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011248:	462a      	mov	r2, r5
 801124a:	4633      	mov	r3, r6
 801124c:	f7ef fc8c 	bl	8000b68 <__aeabi_dcmpgt>
 8011250:	2800      	cmp	r0, #0
 8011252:	f040 828b 	bne.w	801176c <_dtoa_r+0x93c>
 8011256:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801125a:	462a      	mov	r2, r5
 801125c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8011260:	f7ef fc64 	bl	8000b2c <__aeabi_dcmplt>
 8011264:	2800      	cmp	r0, #0
 8011266:	f040 8128 	bne.w	80114ba <_dtoa_r+0x68a>
 801126a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 801126e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8011272:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8011274:	2b00      	cmp	r3, #0
 8011276:	f2c0 815a 	blt.w	801152e <_dtoa_r+0x6fe>
 801127a:	2f0e      	cmp	r7, #14
 801127c:	f300 8157 	bgt.w	801152e <_dtoa_r+0x6fe>
 8011280:	4b5a      	ldr	r3, [pc, #360]	@ (80113ec <_dtoa_r+0x5bc>)
 8011282:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8011286:	ed93 7b00 	vldr	d7, [r3]
 801128a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801128c:	2b00      	cmp	r3, #0
 801128e:	ed8d 7b00 	vstr	d7, [sp]
 8011292:	da03      	bge.n	801129c <_dtoa_r+0x46c>
 8011294:	9b07      	ldr	r3, [sp, #28]
 8011296:	2b00      	cmp	r3, #0
 8011298:	f340 8101 	ble.w	801149e <_dtoa_r+0x66e>
 801129c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80112a0:	4656      	mov	r6, sl
 80112a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80112a6:	4620      	mov	r0, r4
 80112a8:	4629      	mov	r1, r5
 80112aa:	f7ef faf7 	bl	800089c <__aeabi_ddiv>
 80112ae:	f7ef fc7b 	bl	8000ba8 <__aeabi_d2iz>
 80112b2:	4680      	mov	r8, r0
 80112b4:	f7ef f95e 	bl	8000574 <__aeabi_i2d>
 80112b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80112bc:	f7ef f9c4 	bl	8000648 <__aeabi_dmul>
 80112c0:	4602      	mov	r2, r0
 80112c2:	460b      	mov	r3, r1
 80112c4:	4620      	mov	r0, r4
 80112c6:	4629      	mov	r1, r5
 80112c8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80112cc:	f7ef f804 	bl	80002d8 <__aeabi_dsub>
 80112d0:	f806 4b01 	strb.w	r4, [r6], #1
 80112d4:	9d07      	ldr	r5, [sp, #28]
 80112d6:	eba6 040a 	sub.w	r4, r6, sl
 80112da:	42a5      	cmp	r5, r4
 80112dc:	4602      	mov	r2, r0
 80112de:	460b      	mov	r3, r1
 80112e0:	f040 8117 	bne.w	8011512 <_dtoa_r+0x6e2>
 80112e4:	f7ee fffa 	bl	80002dc <__adddf3>
 80112e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80112ec:	4604      	mov	r4, r0
 80112ee:	460d      	mov	r5, r1
 80112f0:	f7ef fc3a 	bl	8000b68 <__aeabi_dcmpgt>
 80112f4:	2800      	cmp	r0, #0
 80112f6:	f040 80f9 	bne.w	80114ec <_dtoa_r+0x6bc>
 80112fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80112fe:	4620      	mov	r0, r4
 8011300:	4629      	mov	r1, r5
 8011302:	f7ef fc09 	bl	8000b18 <__aeabi_dcmpeq>
 8011306:	b118      	cbz	r0, 8011310 <_dtoa_r+0x4e0>
 8011308:	f018 0f01 	tst.w	r8, #1
 801130c:	f040 80ee 	bne.w	80114ec <_dtoa_r+0x6bc>
 8011310:	4649      	mov	r1, r9
 8011312:	4658      	mov	r0, fp
 8011314:	f000 fe94 	bl	8012040 <_Bfree>
 8011318:	2300      	movs	r3, #0
 801131a:	7033      	strb	r3, [r6, #0]
 801131c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801131e:	3701      	adds	r7, #1
 8011320:	601f      	str	r7, [r3, #0]
 8011322:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8011324:	2b00      	cmp	r3, #0
 8011326:	f000 831d 	beq.w	8011964 <_dtoa_r+0xb34>
 801132a:	601e      	str	r6, [r3, #0]
 801132c:	e31a      	b.n	8011964 <_dtoa_r+0xb34>
 801132e:	07e2      	lsls	r2, r4, #31
 8011330:	d505      	bpl.n	801133e <_dtoa_r+0x50e>
 8011332:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011336:	f7ef f987 	bl	8000648 <__aeabi_dmul>
 801133a:	3601      	adds	r6, #1
 801133c:	2301      	movs	r3, #1
 801133e:	1064      	asrs	r4, r4, #1
 8011340:	3508      	adds	r5, #8
 8011342:	e73f      	b.n	80111c4 <_dtoa_r+0x394>
 8011344:	2602      	movs	r6, #2
 8011346:	e742      	b.n	80111ce <_dtoa_r+0x39e>
 8011348:	9c07      	ldr	r4, [sp, #28]
 801134a:	9704      	str	r7, [sp, #16]
 801134c:	e761      	b.n	8011212 <_dtoa_r+0x3e2>
 801134e:	4b27      	ldr	r3, [pc, #156]	@ (80113ec <_dtoa_r+0x5bc>)
 8011350:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8011352:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011356:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801135a:	4454      	add	r4, sl
 801135c:	2900      	cmp	r1, #0
 801135e:	d053      	beq.n	8011408 <_dtoa_r+0x5d8>
 8011360:	4928      	ldr	r1, [pc, #160]	@ (8011404 <_dtoa_r+0x5d4>)
 8011362:	2000      	movs	r0, #0
 8011364:	f7ef fa9a 	bl	800089c <__aeabi_ddiv>
 8011368:	4633      	mov	r3, r6
 801136a:	462a      	mov	r2, r5
 801136c:	f7ee ffb4 	bl	80002d8 <__aeabi_dsub>
 8011370:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8011374:	4656      	mov	r6, sl
 8011376:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801137a:	f7ef fc15 	bl	8000ba8 <__aeabi_d2iz>
 801137e:	4605      	mov	r5, r0
 8011380:	f7ef f8f8 	bl	8000574 <__aeabi_i2d>
 8011384:	4602      	mov	r2, r0
 8011386:	460b      	mov	r3, r1
 8011388:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801138c:	f7ee ffa4 	bl	80002d8 <__aeabi_dsub>
 8011390:	3530      	adds	r5, #48	@ 0x30
 8011392:	4602      	mov	r2, r0
 8011394:	460b      	mov	r3, r1
 8011396:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801139a:	f806 5b01 	strb.w	r5, [r6], #1
 801139e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80113a2:	f7ef fbc3 	bl	8000b2c <__aeabi_dcmplt>
 80113a6:	2800      	cmp	r0, #0
 80113a8:	d171      	bne.n	801148e <_dtoa_r+0x65e>
 80113aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80113ae:	4911      	ldr	r1, [pc, #68]	@ (80113f4 <_dtoa_r+0x5c4>)
 80113b0:	2000      	movs	r0, #0
 80113b2:	f7ee ff91 	bl	80002d8 <__aeabi_dsub>
 80113b6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80113ba:	f7ef fbb7 	bl	8000b2c <__aeabi_dcmplt>
 80113be:	2800      	cmp	r0, #0
 80113c0:	f040 8095 	bne.w	80114ee <_dtoa_r+0x6be>
 80113c4:	42a6      	cmp	r6, r4
 80113c6:	f43f af50 	beq.w	801126a <_dtoa_r+0x43a>
 80113ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80113ce:	4b0a      	ldr	r3, [pc, #40]	@ (80113f8 <_dtoa_r+0x5c8>)
 80113d0:	2200      	movs	r2, #0
 80113d2:	f7ef f939 	bl	8000648 <__aeabi_dmul>
 80113d6:	4b08      	ldr	r3, [pc, #32]	@ (80113f8 <_dtoa_r+0x5c8>)
 80113d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80113dc:	2200      	movs	r2, #0
 80113de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80113e2:	f7ef f931 	bl	8000648 <__aeabi_dmul>
 80113e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80113ea:	e7c4      	b.n	8011376 <_dtoa_r+0x546>
 80113ec:	080140e0 	.word	0x080140e0
 80113f0:	080140b8 	.word	0x080140b8
 80113f4:	3ff00000 	.word	0x3ff00000
 80113f8:	40240000 	.word	0x40240000
 80113fc:	401c0000 	.word	0x401c0000
 8011400:	40140000 	.word	0x40140000
 8011404:	3fe00000 	.word	0x3fe00000
 8011408:	4631      	mov	r1, r6
 801140a:	4628      	mov	r0, r5
 801140c:	f7ef f91c 	bl	8000648 <__aeabi_dmul>
 8011410:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8011414:	9415      	str	r4, [sp, #84]	@ 0x54
 8011416:	4656      	mov	r6, sl
 8011418:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801141c:	f7ef fbc4 	bl	8000ba8 <__aeabi_d2iz>
 8011420:	4605      	mov	r5, r0
 8011422:	f7ef f8a7 	bl	8000574 <__aeabi_i2d>
 8011426:	4602      	mov	r2, r0
 8011428:	460b      	mov	r3, r1
 801142a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801142e:	f7ee ff53 	bl	80002d8 <__aeabi_dsub>
 8011432:	3530      	adds	r5, #48	@ 0x30
 8011434:	f806 5b01 	strb.w	r5, [r6], #1
 8011438:	4602      	mov	r2, r0
 801143a:	460b      	mov	r3, r1
 801143c:	42a6      	cmp	r6, r4
 801143e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011442:	f04f 0200 	mov.w	r2, #0
 8011446:	d124      	bne.n	8011492 <_dtoa_r+0x662>
 8011448:	4bac      	ldr	r3, [pc, #688]	@ (80116fc <_dtoa_r+0x8cc>)
 801144a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801144e:	f7ee ff45 	bl	80002dc <__adddf3>
 8011452:	4602      	mov	r2, r0
 8011454:	460b      	mov	r3, r1
 8011456:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801145a:	f7ef fb85 	bl	8000b68 <__aeabi_dcmpgt>
 801145e:	2800      	cmp	r0, #0
 8011460:	d145      	bne.n	80114ee <_dtoa_r+0x6be>
 8011462:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8011466:	49a5      	ldr	r1, [pc, #660]	@ (80116fc <_dtoa_r+0x8cc>)
 8011468:	2000      	movs	r0, #0
 801146a:	f7ee ff35 	bl	80002d8 <__aeabi_dsub>
 801146e:	4602      	mov	r2, r0
 8011470:	460b      	mov	r3, r1
 8011472:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011476:	f7ef fb59 	bl	8000b2c <__aeabi_dcmplt>
 801147a:	2800      	cmp	r0, #0
 801147c:	f43f aef5 	beq.w	801126a <_dtoa_r+0x43a>
 8011480:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8011482:	1e73      	subs	r3, r6, #1
 8011484:	9315      	str	r3, [sp, #84]	@ 0x54
 8011486:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801148a:	2b30      	cmp	r3, #48	@ 0x30
 801148c:	d0f8      	beq.n	8011480 <_dtoa_r+0x650>
 801148e:	9f04      	ldr	r7, [sp, #16]
 8011490:	e73e      	b.n	8011310 <_dtoa_r+0x4e0>
 8011492:	4b9b      	ldr	r3, [pc, #620]	@ (8011700 <_dtoa_r+0x8d0>)
 8011494:	f7ef f8d8 	bl	8000648 <__aeabi_dmul>
 8011498:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801149c:	e7bc      	b.n	8011418 <_dtoa_r+0x5e8>
 801149e:	d10c      	bne.n	80114ba <_dtoa_r+0x68a>
 80114a0:	4b98      	ldr	r3, [pc, #608]	@ (8011704 <_dtoa_r+0x8d4>)
 80114a2:	2200      	movs	r2, #0
 80114a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80114a8:	f7ef f8ce 	bl	8000648 <__aeabi_dmul>
 80114ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80114b0:	f7ef fb50 	bl	8000b54 <__aeabi_dcmpge>
 80114b4:	2800      	cmp	r0, #0
 80114b6:	f000 8157 	beq.w	8011768 <_dtoa_r+0x938>
 80114ba:	2400      	movs	r4, #0
 80114bc:	4625      	mov	r5, r4
 80114be:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80114c0:	43db      	mvns	r3, r3
 80114c2:	9304      	str	r3, [sp, #16]
 80114c4:	4656      	mov	r6, sl
 80114c6:	2700      	movs	r7, #0
 80114c8:	4621      	mov	r1, r4
 80114ca:	4658      	mov	r0, fp
 80114cc:	f000 fdb8 	bl	8012040 <_Bfree>
 80114d0:	2d00      	cmp	r5, #0
 80114d2:	d0dc      	beq.n	801148e <_dtoa_r+0x65e>
 80114d4:	b12f      	cbz	r7, 80114e2 <_dtoa_r+0x6b2>
 80114d6:	42af      	cmp	r7, r5
 80114d8:	d003      	beq.n	80114e2 <_dtoa_r+0x6b2>
 80114da:	4639      	mov	r1, r7
 80114dc:	4658      	mov	r0, fp
 80114de:	f000 fdaf 	bl	8012040 <_Bfree>
 80114e2:	4629      	mov	r1, r5
 80114e4:	4658      	mov	r0, fp
 80114e6:	f000 fdab 	bl	8012040 <_Bfree>
 80114ea:	e7d0      	b.n	801148e <_dtoa_r+0x65e>
 80114ec:	9704      	str	r7, [sp, #16]
 80114ee:	4633      	mov	r3, r6
 80114f0:	461e      	mov	r6, r3
 80114f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80114f6:	2a39      	cmp	r2, #57	@ 0x39
 80114f8:	d107      	bne.n	801150a <_dtoa_r+0x6da>
 80114fa:	459a      	cmp	sl, r3
 80114fc:	d1f8      	bne.n	80114f0 <_dtoa_r+0x6c0>
 80114fe:	9a04      	ldr	r2, [sp, #16]
 8011500:	3201      	adds	r2, #1
 8011502:	9204      	str	r2, [sp, #16]
 8011504:	2230      	movs	r2, #48	@ 0x30
 8011506:	f88a 2000 	strb.w	r2, [sl]
 801150a:	781a      	ldrb	r2, [r3, #0]
 801150c:	3201      	adds	r2, #1
 801150e:	701a      	strb	r2, [r3, #0]
 8011510:	e7bd      	b.n	801148e <_dtoa_r+0x65e>
 8011512:	4b7b      	ldr	r3, [pc, #492]	@ (8011700 <_dtoa_r+0x8d0>)
 8011514:	2200      	movs	r2, #0
 8011516:	f7ef f897 	bl	8000648 <__aeabi_dmul>
 801151a:	2200      	movs	r2, #0
 801151c:	2300      	movs	r3, #0
 801151e:	4604      	mov	r4, r0
 8011520:	460d      	mov	r5, r1
 8011522:	f7ef faf9 	bl	8000b18 <__aeabi_dcmpeq>
 8011526:	2800      	cmp	r0, #0
 8011528:	f43f aebb 	beq.w	80112a2 <_dtoa_r+0x472>
 801152c:	e6f0      	b.n	8011310 <_dtoa_r+0x4e0>
 801152e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8011530:	2a00      	cmp	r2, #0
 8011532:	f000 80db 	beq.w	80116ec <_dtoa_r+0x8bc>
 8011536:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011538:	2a01      	cmp	r2, #1
 801153a:	f300 80bf 	bgt.w	80116bc <_dtoa_r+0x88c>
 801153e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8011540:	2a00      	cmp	r2, #0
 8011542:	f000 80b7 	beq.w	80116b4 <_dtoa_r+0x884>
 8011546:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801154a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801154c:	4646      	mov	r6, r8
 801154e:	9a08      	ldr	r2, [sp, #32]
 8011550:	2101      	movs	r1, #1
 8011552:	441a      	add	r2, r3
 8011554:	4658      	mov	r0, fp
 8011556:	4498      	add	r8, r3
 8011558:	9208      	str	r2, [sp, #32]
 801155a:	f000 fe25 	bl	80121a8 <__i2b>
 801155e:	4605      	mov	r5, r0
 8011560:	b15e      	cbz	r6, 801157a <_dtoa_r+0x74a>
 8011562:	9b08      	ldr	r3, [sp, #32]
 8011564:	2b00      	cmp	r3, #0
 8011566:	dd08      	ble.n	801157a <_dtoa_r+0x74a>
 8011568:	42b3      	cmp	r3, r6
 801156a:	9a08      	ldr	r2, [sp, #32]
 801156c:	bfa8      	it	ge
 801156e:	4633      	movge	r3, r6
 8011570:	eba8 0803 	sub.w	r8, r8, r3
 8011574:	1af6      	subs	r6, r6, r3
 8011576:	1ad3      	subs	r3, r2, r3
 8011578:	9308      	str	r3, [sp, #32]
 801157a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801157c:	b1f3      	cbz	r3, 80115bc <_dtoa_r+0x78c>
 801157e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011580:	2b00      	cmp	r3, #0
 8011582:	f000 80b7 	beq.w	80116f4 <_dtoa_r+0x8c4>
 8011586:	b18c      	cbz	r4, 80115ac <_dtoa_r+0x77c>
 8011588:	4629      	mov	r1, r5
 801158a:	4622      	mov	r2, r4
 801158c:	4658      	mov	r0, fp
 801158e:	f000 fecb 	bl	8012328 <__pow5mult>
 8011592:	464a      	mov	r2, r9
 8011594:	4601      	mov	r1, r0
 8011596:	4605      	mov	r5, r0
 8011598:	4658      	mov	r0, fp
 801159a:	f000 fe1b 	bl	80121d4 <__multiply>
 801159e:	4649      	mov	r1, r9
 80115a0:	9004      	str	r0, [sp, #16]
 80115a2:	4658      	mov	r0, fp
 80115a4:	f000 fd4c 	bl	8012040 <_Bfree>
 80115a8:	9b04      	ldr	r3, [sp, #16]
 80115aa:	4699      	mov	r9, r3
 80115ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80115ae:	1b1a      	subs	r2, r3, r4
 80115b0:	d004      	beq.n	80115bc <_dtoa_r+0x78c>
 80115b2:	4649      	mov	r1, r9
 80115b4:	4658      	mov	r0, fp
 80115b6:	f000 feb7 	bl	8012328 <__pow5mult>
 80115ba:	4681      	mov	r9, r0
 80115bc:	2101      	movs	r1, #1
 80115be:	4658      	mov	r0, fp
 80115c0:	f000 fdf2 	bl	80121a8 <__i2b>
 80115c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80115c6:	4604      	mov	r4, r0
 80115c8:	2b00      	cmp	r3, #0
 80115ca:	f000 81cf 	beq.w	801196c <_dtoa_r+0xb3c>
 80115ce:	461a      	mov	r2, r3
 80115d0:	4601      	mov	r1, r0
 80115d2:	4658      	mov	r0, fp
 80115d4:	f000 fea8 	bl	8012328 <__pow5mult>
 80115d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80115da:	2b01      	cmp	r3, #1
 80115dc:	4604      	mov	r4, r0
 80115de:	f300 8095 	bgt.w	801170c <_dtoa_r+0x8dc>
 80115e2:	9b02      	ldr	r3, [sp, #8]
 80115e4:	2b00      	cmp	r3, #0
 80115e6:	f040 8087 	bne.w	80116f8 <_dtoa_r+0x8c8>
 80115ea:	9b03      	ldr	r3, [sp, #12]
 80115ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80115f0:	2b00      	cmp	r3, #0
 80115f2:	f040 8089 	bne.w	8011708 <_dtoa_r+0x8d8>
 80115f6:	9b03      	ldr	r3, [sp, #12]
 80115f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80115fc:	0d1b      	lsrs	r3, r3, #20
 80115fe:	051b      	lsls	r3, r3, #20
 8011600:	b12b      	cbz	r3, 801160e <_dtoa_r+0x7de>
 8011602:	9b08      	ldr	r3, [sp, #32]
 8011604:	3301      	adds	r3, #1
 8011606:	9308      	str	r3, [sp, #32]
 8011608:	f108 0801 	add.w	r8, r8, #1
 801160c:	2301      	movs	r3, #1
 801160e:	930a      	str	r3, [sp, #40]	@ 0x28
 8011610:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011612:	2b00      	cmp	r3, #0
 8011614:	f000 81b0 	beq.w	8011978 <_dtoa_r+0xb48>
 8011618:	6923      	ldr	r3, [r4, #16]
 801161a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801161e:	6918      	ldr	r0, [r3, #16]
 8011620:	f000 fd76 	bl	8012110 <__hi0bits>
 8011624:	f1c0 0020 	rsb	r0, r0, #32
 8011628:	9b08      	ldr	r3, [sp, #32]
 801162a:	4418      	add	r0, r3
 801162c:	f010 001f 	ands.w	r0, r0, #31
 8011630:	d077      	beq.n	8011722 <_dtoa_r+0x8f2>
 8011632:	f1c0 0320 	rsb	r3, r0, #32
 8011636:	2b04      	cmp	r3, #4
 8011638:	dd6b      	ble.n	8011712 <_dtoa_r+0x8e2>
 801163a:	9b08      	ldr	r3, [sp, #32]
 801163c:	f1c0 001c 	rsb	r0, r0, #28
 8011640:	4403      	add	r3, r0
 8011642:	4480      	add	r8, r0
 8011644:	4406      	add	r6, r0
 8011646:	9308      	str	r3, [sp, #32]
 8011648:	f1b8 0f00 	cmp.w	r8, #0
 801164c:	dd05      	ble.n	801165a <_dtoa_r+0x82a>
 801164e:	4649      	mov	r1, r9
 8011650:	4642      	mov	r2, r8
 8011652:	4658      	mov	r0, fp
 8011654:	f000 fec2 	bl	80123dc <__lshift>
 8011658:	4681      	mov	r9, r0
 801165a:	9b08      	ldr	r3, [sp, #32]
 801165c:	2b00      	cmp	r3, #0
 801165e:	dd05      	ble.n	801166c <_dtoa_r+0x83c>
 8011660:	4621      	mov	r1, r4
 8011662:	461a      	mov	r2, r3
 8011664:	4658      	mov	r0, fp
 8011666:	f000 feb9 	bl	80123dc <__lshift>
 801166a:	4604      	mov	r4, r0
 801166c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801166e:	2b00      	cmp	r3, #0
 8011670:	d059      	beq.n	8011726 <_dtoa_r+0x8f6>
 8011672:	4621      	mov	r1, r4
 8011674:	4648      	mov	r0, r9
 8011676:	f000 ff1d 	bl	80124b4 <__mcmp>
 801167a:	2800      	cmp	r0, #0
 801167c:	da53      	bge.n	8011726 <_dtoa_r+0x8f6>
 801167e:	1e7b      	subs	r3, r7, #1
 8011680:	9304      	str	r3, [sp, #16]
 8011682:	4649      	mov	r1, r9
 8011684:	2300      	movs	r3, #0
 8011686:	220a      	movs	r2, #10
 8011688:	4658      	mov	r0, fp
 801168a:	f000 fcfb 	bl	8012084 <__multadd>
 801168e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011690:	4681      	mov	r9, r0
 8011692:	2b00      	cmp	r3, #0
 8011694:	f000 8172 	beq.w	801197c <_dtoa_r+0xb4c>
 8011698:	2300      	movs	r3, #0
 801169a:	4629      	mov	r1, r5
 801169c:	220a      	movs	r2, #10
 801169e:	4658      	mov	r0, fp
 80116a0:	f000 fcf0 	bl	8012084 <__multadd>
 80116a4:	9b00      	ldr	r3, [sp, #0]
 80116a6:	2b00      	cmp	r3, #0
 80116a8:	4605      	mov	r5, r0
 80116aa:	dc67      	bgt.n	801177c <_dtoa_r+0x94c>
 80116ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80116ae:	2b02      	cmp	r3, #2
 80116b0:	dc41      	bgt.n	8011736 <_dtoa_r+0x906>
 80116b2:	e063      	b.n	801177c <_dtoa_r+0x94c>
 80116b4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80116b6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80116ba:	e746      	b.n	801154a <_dtoa_r+0x71a>
 80116bc:	9b07      	ldr	r3, [sp, #28]
 80116be:	1e5c      	subs	r4, r3, #1
 80116c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80116c2:	42a3      	cmp	r3, r4
 80116c4:	bfbf      	itttt	lt
 80116c6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80116c8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80116ca:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80116cc:	1ae3      	sublt	r3, r4, r3
 80116ce:	bfb4      	ite	lt
 80116d0:	18d2      	addlt	r2, r2, r3
 80116d2:	1b1c      	subge	r4, r3, r4
 80116d4:	9b07      	ldr	r3, [sp, #28]
 80116d6:	bfbc      	itt	lt
 80116d8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80116da:	2400      	movlt	r4, #0
 80116dc:	2b00      	cmp	r3, #0
 80116de:	bfb5      	itete	lt
 80116e0:	eba8 0603 	sublt.w	r6, r8, r3
 80116e4:	9b07      	ldrge	r3, [sp, #28]
 80116e6:	2300      	movlt	r3, #0
 80116e8:	4646      	movge	r6, r8
 80116ea:	e730      	b.n	801154e <_dtoa_r+0x71e>
 80116ec:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80116ee:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80116f0:	4646      	mov	r6, r8
 80116f2:	e735      	b.n	8011560 <_dtoa_r+0x730>
 80116f4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80116f6:	e75c      	b.n	80115b2 <_dtoa_r+0x782>
 80116f8:	2300      	movs	r3, #0
 80116fa:	e788      	b.n	801160e <_dtoa_r+0x7de>
 80116fc:	3fe00000 	.word	0x3fe00000
 8011700:	40240000 	.word	0x40240000
 8011704:	40140000 	.word	0x40140000
 8011708:	9b02      	ldr	r3, [sp, #8]
 801170a:	e780      	b.n	801160e <_dtoa_r+0x7de>
 801170c:	2300      	movs	r3, #0
 801170e:	930a      	str	r3, [sp, #40]	@ 0x28
 8011710:	e782      	b.n	8011618 <_dtoa_r+0x7e8>
 8011712:	d099      	beq.n	8011648 <_dtoa_r+0x818>
 8011714:	9a08      	ldr	r2, [sp, #32]
 8011716:	331c      	adds	r3, #28
 8011718:	441a      	add	r2, r3
 801171a:	4498      	add	r8, r3
 801171c:	441e      	add	r6, r3
 801171e:	9208      	str	r2, [sp, #32]
 8011720:	e792      	b.n	8011648 <_dtoa_r+0x818>
 8011722:	4603      	mov	r3, r0
 8011724:	e7f6      	b.n	8011714 <_dtoa_r+0x8e4>
 8011726:	9b07      	ldr	r3, [sp, #28]
 8011728:	9704      	str	r7, [sp, #16]
 801172a:	2b00      	cmp	r3, #0
 801172c:	dc20      	bgt.n	8011770 <_dtoa_r+0x940>
 801172e:	9300      	str	r3, [sp, #0]
 8011730:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011732:	2b02      	cmp	r3, #2
 8011734:	dd1e      	ble.n	8011774 <_dtoa_r+0x944>
 8011736:	9b00      	ldr	r3, [sp, #0]
 8011738:	2b00      	cmp	r3, #0
 801173a:	f47f aec0 	bne.w	80114be <_dtoa_r+0x68e>
 801173e:	4621      	mov	r1, r4
 8011740:	2205      	movs	r2, #5
 8011742:	4658      	mov	r0, fp
 8011744:	f000 fc9e 	bl	8012084 <__multadd>
 8011748:	4601      	mov	r1, r0
 801174a:	4604      	mov	r4, r0
 801174c:	4648      	mov	r0, r9
 801174e:	f000 feb1 	bl	80124b4 <__mcmp>
 8011752:	2800      	cmp	r0, #0
 8011754:	f77f aeb3 	ble.w	80114be <_dtoa_r+0x68e>
 8011758:	4656      	mov	r6, sl
 801175a:	2331      	movs	r3, #49	@ 0x31
 801175c:	f806 3b01 	strb.w	r3, [r6], #1
 8011760:	9b04      	ldr	r3, [sp, #16]
 8011762:	3301      	adds	r3, #1
 8011764:	9304      	str	r3, [sp, #16]
 8011766:	e6ae      	b.n	80114c6 <_dtoa_r+0x696>
 8011768:	9c07      	ldr	r4, [sp, #28]
 801176a:	9704      	str	r7, [sp, #16]
 801176c:	4625      	mov	r5, r4
 801176e:	e7f3      	b.n	8011758 <_dtoa_r+0x928>
 8011770:	9b07      	ldr	r3, [sp, #28]
 8011772:	9300      	str	r3, [sp, #0]
 8011774:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011776:	2b00      	cmp	r3, #0
 8011778:	f000 8104 	beq.w	8011984 <_dtoa_r+0xb54>
 801177c:	2e00      	cmp	r6, #0
 801177e:	dd05      	ble.n	801178c <_dtoa_r+0x95c>
 8011780:	4629      	mov	r1, r5
 8011782:	4632      	mov	r2, r6
 8011784:	4658      	mov	r0, fp
 8011786:	f000 fe29 	bl	80123dc <__lshift>
 801178a:	4605      	mov	r5, r0
 801178c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801178e:	2b00      	cmp	r3, #0
 8011790:	d05a      	beq.n	8011848 <_dtoa_r+0xa18>
 8011792:	6869      	ldr	r1, [r5, #4]
 8011794:	4658      	mov	r0, fp
 8011796:	f000 fc13 	bl	8011fc0 <_Balloc>
 801179a:	4606      	mov	r6, r0
 801179c:	b928      	cbnz	r0, 80117aa <_dtoa_r+0x97a>
 801179e:	4b84      	ldr	r3, [pc, #528]	@ (80119b0 <_dtoa_r+0xb80>)
 80117a0:	4602      	mov	r2, r0
 80117a2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80117a6:	f7ff bb5a 	b.w	8010e5e <_dtoa_r+0x2e>
 80117aa:	692a      	ldr	r2, [r5, #16]
 80117ac:	3202      	adds	r2, #2
 80117ae:	0092      	lsls	r2, r2, #2
 80117b0:	f105 010c 	add.w	r1, r5, #12
 80117b4:	300c      	adds	r0, #12
 80117b6:	f7ff faa4 	bl	8010d02 <memcpy>
 80117ba:	2201      	movs	r2, #1
 80117bc:	4631      	mov	r1, r6
 80117be:	4658      	mov	r0, fp
 80117c0:	f000 fe0c 	bl	80123dc <__lshift>
 80117c4:	f10a 0301 	add.w	r3, sl, #1
 80117c8:	9307      	str	r3, [sp, #28]
 80117ca:	9b00      	ldr	r3, [sp, #0]
 80117cc:	4453      	add	r3, sl
 80117ce:	930b      	str	r3, [sp, #44]	@ 0x2c
 80117d0:	9b02      	ldr	r3, [sp, #8]
 80117d2:	f003 0301 	and.w	r3, r3, #1
 80117d6:	462f      	mov	r7, r5
 80117d8:	930a      	str	r3, [sp, #40]	@ 0x28
 80117da:	4605      	mov	r5, r0
 80117dc:	9b07      	ldr	r3, [sp, #28]
 80117de:	4621      	mov	r1, r4
 80117e0:	3b01      	subs	r3, #1
 80117e2:	4648      	mov	r0, r9
 80117e4:	9300      	str	r3, [sp, #0]
 80117e6:	f7ff fa9a 	bl	8010d1e <quorem>
 80117ea:	4639      	mov	r1, r7
 80117ec:	9002      	str	r0, [sp, #8]
 80117ee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80117f2:	4648      	mov	r0, r9
 80117f4:	f000 fe5e 	bl	80124b4 <__mcmp>
 80117f8:	462a      	mov	r2, r5
 80117fa:	9008      	str	r0, [sp, #32]
 80117fc:	4621      	mov	r1, r4
 80117fe:	4658      	mov	r0, fp
 8011800:	f000 fe74 	bl	80124ec <__mdiff>
 8011804:	68c2      	ldr	r2, [r0, #12]
 8011806:	4606      	mov	r6, r0
 8011808:	bb02      	cbnz	r2, 801184c <_dtoa_r+0xa1c>
 801180a:	4601      	mov	r1, r0
 801180c:	4648      	mov	r0, r9
 801180e:	f000 fe51 	bl	80124b4 <__mcmp>
 8011812:	4602      	mov	r2, r0
 8011814:	4631      	mov	r1, r6
 8011816:	4658      	mov	r0, fp
 8011818:	920e      	str	r2, [sp, #56]	@ 0x38
 801181a:	f000 fc11 	bl	8012040 <_Bfree>
 801181e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011820:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011822:	9e07      	ldr	r6, [sp, #28]
 8011824:	ea43 0102 	orr.w	r1, r3, r2
 8011828:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801182a:	4319      	orrs	r1, r3
 801182c:	d110      	bne.n	8011850 <_dtoa_r+0xa20>
 801182e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8011832:	d029      	beq.n	8011888 <_dtoa_r+0xa58>
 8011834:	9b08      	ldr	r3, [sp, #32]
 8011836:	2b00      	cmp	r3, #0
 8011838:	dd02      	ble.n	8011840 <_dtoa_r+0xa10>
 801183a:	9b02      	ldr	r3, [sp, #8]
 801183c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8011840:	9b00      	ldr	r3, [sp, #0]
 8011842:	f883 8000 	strb.w	r8, [r3]
 8011846:	e63f      	b.n	80114c8 <_dtoa_r+0x698>
 8011848:	4628      	mov	r0, r5
 801184a:	e7bb      	b.n	80117c4 <_dtoa_r+0x994>
 801184c:	2201      	movs	r2, #1
 801184e:	e7e1      	b.n	8011814 <_dtoa_r+0x9e4>
 8011850:	9b08      	ldr	r3, [sp, #32]
 8011852:	2b00      	cmp	r3, #0
 8011854:	db04      	blt.n	8011860 <_dtoa_r+0xa30>
 8011856:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011858:	430b      	orrs	r3, r1
 801185a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801185c:	430b      	orrs	r3, r1
 801185e:	d120      	bne.n	80118a2 <_dtoa_r+0xa72>
 8011860:	2a00      	cmp	r2, #0
 8011862:	dded      	ble.n	8011840 <_dtoa_r+0xa10>
 8011864:	4649      	mov	r1, r9
 8011866:	2201      	movs	r2, #1
 8011868:	4658      	mov	r0, fp
 801186a:	f000 fdb7 	bl	80123dc <__lshift>
 801186e:	4621      	mov	r1, r4
 8011870:	4681      	mov	r9, r0
 8011872:	f000 fe1f 	bl	80124b4 <__mcmp>
 8011876:	2800      	cmp	r0, #0
 8011878:	dc03      	bgt.n	8011882 <_dtoa_r+0xa52>
 801187a:	d1e1      	bne.n	8011840 <_dtoa_r+0xa10>
 801187c:	f018 0f01 	tst.w	r8, #1
 8011880:	d0de      	beq.n	8011840 <_dtoa_r+0xa10>
 8011882:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8011886:	d1d8      	bne.n	801183a <_dtoa_r+0xa0a>
 8011888:	9a00      	ldr	r2, [sp, #0]
 801188a:	2339      	movs	r3, #57	@ 0x39
 801188c:	7013      	strb	r3, [r2, #0]
 801188e:	4633      	mov	r3, r6
 8011890:	461e      	mov	r6, r3
 8011892:	3b01      	subs	r3, #1
 8011894:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8011898:	2a39      	cmp	r2, #57	@ 0x39
 801189a:	d052      	beq.n	8011942 <_dtoa_r+0xb12>
 801189c:	3201      	adds	r2, #1
 801189e:	701a      	strb	r2, [r3, #0]
 80118a0:	e612      	b.n	80114c8 <_dtoa_r+0x698>
 80118a2:	2a00      	cmp	r2, #0
 80118a4:	dd07      	ble.n	80118b6 <_dtoa_r+0xa86>
 80118a6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80118aa:	d0ed      	beq.n	8011888 <_dtoa_r+0xa58>
 80118ac:	9a00      	ldr	r2, [sp, #0]
 80118ae:	f108 0301 	add.w	r3, r8, #1
 80118b2:	7013      	strb	r3, [r2, #0]
 80118b4:	e608      	b.n	80114c8 <_dtoa_r+0x698>
 80118b6:	9b07      	ldr	r3, [sp, #28]
 80118b8:	9a07      	ldr	r2, [sp, #28]
 80118ba:	f803 8c01 	strb.w	r8, [r3, #-1]
 80118be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80118c0:	4293      	cmp	r3, r2
 80118c2:	d028      	beq.n	8011916 <_dtoa_r+0xae6>
 80118c4:	4649      	mov	r1, r9
 80118c6:	2300      	movs	r3, #0
 80118c8:	220a      	movs	r2, #10
 80118ca:	4658      	mov	r0, fp
 80118cc:	f000 fbda 	bl	8012084 <__multadd>
 80118d0:	42af      	cmp	r7, r5
 80118d2:	4681      	mov	r9, r0
 80118d4:	f04f 0300 	mov.w	r3, #0
 80118d8:	f04f 020a 	mov.w	r2, #10
 80118dc:	4639      	mov	r1, r7
 80118de:	4658      	mov	r0, fp
 80118e0:	d107      	bne.n	80118f2 <_dtoa_r+0xac2>
 80118e2:	f000 fbcf 	bl	8012084 <__multadd>
 80118e6:	4607      	mov	r7, r0
 80118e8:	4605      	mov	r5, r0
 80118ea:	9b07      	ldr	r3, [sp, #28]
 80118ec:	3301      	adds	r3, #1
 80118ee:	9307      	str	r3, [sp, #28]
 80118f0:	e774      	b.n	80117dc <_dtoa_r+0x9ac>
 80118f2:	f000 fbc7 	bl	8012084 <__multadd>
 80118f6:	4629      	mov	r1, r5
 80118f8:	4607      	mov	r7, r0
 80118fa:	2300      	movs	r3, #0
 80118fc:	220a      	movs	r2, #10
 80118fe:	4658      	mov	r0, fp
 8011900:	f000 fbc0 	bl	8012084 <__multadd>
 8011904:	4605      	mov	r5, r0
 8011906:	e7f0      	b.n	80118ea <_dtoa_r+0xaba>
 8011908:	9b00      	ldr	r3, [sp, #0]
 801190a:	2b00      	cmp	r3, #0
 801190c:	bfcc      	ite	gt
 801190e:	461e      	movgt	r6, r3
 8011910:	2601      	movle	r6, #1
 8011912:	4456      	add	r6, sl
 8011914:	2700      	movs	r7, #0
 8011916:	4649      	mov	r1, r9
 8011918:	2201      	movs	r2, #1
 801191a:	4658      	mov	r0, fp
 801191c:	f000 fd5e 	bl	80123dc <__lshift>
 8011920:	4621      	mov	r1, r4
 8011922:	4681      	mov	r9, r0
 8011924:	f000 fdc6 	bl	80124b4 <__mcmp>
 8011928:	2800      	cmp	r0, #0
 801192a:	dcb0      	bgt.n	801188e <_dtoa_r+0xa5e>
 801192c:	d102      	bne.n	8011934 <_dtoa_r+0xb04>
 801192e:	f018 0f01 	tst.w	r8, #1
 8011932:	d1ac      	bne.n	801188e <_dtoa_r+0xa5e>
 8011934:	4633      	mov	r3, r6
 8011936:	461e      	mov	r6, r3
 8011938:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801193c:	2a30      	cmp	r2, #48	@ 0x30
 801193e:	d0fa      	beq.n	8011936 <_dtoa_r+0xb06>
 8011940:	e5c2      	b.n	80114c8 <_dtoa_r+0x698>
 8011942:	459a      	cmp	sl, r3
 8011944:	d1a4      	bne.n	8011890 <_dtoa_r+0xa60>
 8011946:	9b04      	ldr	r3, [sp, #16]
 8011948:	3301      	adds	r3, #1
 801194a:	9304      	str	r3, [sp, #16]
 801194c:	2331      	movs	r3, #49	@ 0x31
 801194e:	f88a 3000 	strb.w	r3, [sl]
 8011952:	e5b9      	b.n	80114c8 <_dtoa_r+0x698>
 8011954:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8011956:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80119b4 <_dtoa_r+0xb84>
 801195a:	b11b      	cbz	r3, 8011964 <_dtoa_r+0xb34>
 801195c:	f10a 0308 	add.w	r3, sl, #8
 8011960:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8011962:	6013      	str	r3, [r2, #0]
 8011964:	4650      	mov	r0, sl
 8011966:	b019      	add	sp, #100	@ 0x64
 8011968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801196c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801196e:	2b01      	cmp	r3, #1
 8011970:	f77f ae37 	ble.w	80115e2 <_dtoa_r+0x7b2>
 8011974:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011976:	930a      	str	r3, [sp, #40]	@ 0x28
 8011978:	2001      	movs	r0, #1
 801197a:	e655      	b.n	8011628 <_dtoa_r+0x7f8>
 801197c:	9b00      	ldr	r3, [sp, #0]
 801197e:	2b00      	cmp	r3, #0
 8011980:	f77f aed6 	ble.w	8011730 <_dtoa_r+0x900>
 8011984:	4656      	mov	r6, sl
 8011986:	4621      	mov	r1, r4
 8011988:	4648      	mov	r0, r9
 801198a:	f7ff f9c8 	bl	8010d1e <quorem>
 801198e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8011992:	f806 8b01 	strb.w	r8, [r6], #1
 8011996:	9b00      	ldr	r3, [sp, #0]
 8011998:	eba6 020a 	sub.w	r2, r6, sl
 801199c:	4293      	cmp	r3, r2
 801199e:	ddb3      	ble.n	8011908 <_dtoa_r+0xad8>
 80119a0:	4649      	mov	r1, r9
 80119a2:	2300      	movs	r3, #0
 80119a4:	220a      	movs	r2, #10
 80119a6:	4658      	mov	r0, fp
 80119a8:	f000 fb6c 	bl	8012084 <__multadd>
 80119ac:	4681      	mov	r9, r0
 80119ae:	e7ea      	b.n	8011986 <_dtoa_r+0xb56>
 80119b0:	0801402c 	.word	0x0801402c
 80119b4:	08013fb0 	.word	0x08013fb0

080119b8 <_free_r>:
 80119b8:	b538      	push	{r3, r4, r5, lr}
 80119ba:	4605      	mov	r5, r0
 80119bc:	2900      	cmp	r1, #0
 80119be:	d041      	beq.n	8011a44 <_free_r+0x8c>
 80119c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80119c4:	1f0c      	subs	r4, r1, #4
 80119c6:	2b00      	cmp	r3, #0
 80119c8:	bfb8      	it	lt
 80119ca:	18e4      	addlt	r4, r4, r3
 80119cc:	f000 faec 	bl	8011fa8 <__malloc_lock>
 80119d0:	4a1d      	ldr	r2, [pc, #116]	@ (8011a48 <_free_r+0x90>)
 80119d2:	6813      	ldr	r3, [r2, #0]
 80119d4:	b933      	cbnz	r3, 80119e4 <_free_r+0x2c>
 80119d6:	6063      	str	r3, [r4, #4]
 80119d8:	6014      	str	r4, [r2, #0]
 80119da:	4628      	mov	r0, r5
 80119dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80119e0:	f000 bae8 	b.w	8011fb4 <__malloc_unlock>
 80119e4:	42a3      	cmp	r3, r4
 80119e6:	d908      	bls.n	80119fa <_free_r+0x42>
 80119e8:	6820      	ldr	r0, [r4, #0]
 80119ea:	1821      	adds	r1, r4, r0
 80119ec:	428b      	cmp	r3, r1
 80119ee:	bf01      	itttt	eq
 80119f0:	6819      	ldreq	r1, [r3, #0]
 80119f2:	685b      	ldreq	r3, [r3, #4]
 80119f4:	1809      	addeq	r1, r1, r0
 80119f6:	6021      	streq	r1, [r4, #0]
 80119f8:	e7ed      	b.n	80119d6 <_free_r+0x1e>
 80119fa:	461a      	mov	r2, r3
 80119fc:	685b      	ldr	r3, [r3, #4]
 80119fe:	b10b      	cbz	r3, 8011a04 <_free_r+0x4c>
 8011a00:	42a3      	cmp	r3, r4
 8011a02:	d9fa      	bls.n	80119fa <_free_r+0x42>
 8011a04:	6811      	ldr	r1, [r2, #0]
 8011a06:	1850      	adds	r0, r2, r1
 8011a08:	42a0      	cmp	r0, r4
 8011a0a:	d10b      	bne.n	8011a24 <_free_r+0x6c>
 8011a0c:	6820      	ldr	r0, [r4, #0]
 8011a0e:	4401      	add	r1, r0
 8011a10:	1850      	adds	r0, r2, r1
 8011a12:	4283      	cmp	r3, r0
 8011a14:	6011      	str	r1, [r2, #0]
 8011a16:	d1e0      	bne.n	80119da <_free_r+0x22>
 8011a18:	6818      	ldr	r0, [r3, #0]
 8011a1a:	685b      	ldr	r3, [r3, #4]
 8011a1c:	6053      	str	r3, [r2, #4]
 8011a1e:	4408      	add	r0, r1
 8011a20:	6010      	str	r0, [r2, #0]
 8011a22:	e7da      	b.n	80119da <_free_r+0x22>
 8011a24:	d902      	bls.n	8011a2c <_free_r+0x74>
 8011a26:	230c      	movs	r3, #12
 8011a28:	602b      	str	r3, [r5, #0]
 8011a2a:	e7d6      	b.n	80119da <_free_r+0x22>
 8011a2c:	6820      	ldr	r0, [r4, #0]
 8011a2e:	1821      	adds	r1, r4, r0
 8011a30:	428b      	cmp	r3, r1
 8011a32:	bf04      	itt	eq
 8011a34:	6819      	ldreq	r1, [r3, #0]
 8011a36:	685b      	ldreq	r3, [r3, #4]
 8011a38:	6063      	str	r3, [r4, #4]
 8011a3a:	bf04      	itt	eq
 8011a3c:	1809      	addeq	r1, r1, r0
 8011a3e:	6021      	streq	r1, [r4, #0]
 8011a40:	6054      	str	r4, [r2, #4]
 8011a42:	e7ca      	b.n	80119da <_free_r+0x22>
 8011a44:	bd38      	pop	{r3, r4, r5, pc}
 8011a46:	bf00      	nop
 8011a48:	2001298c 	.word	0x2001298c

08011a4c <__ssputs_r>:
 8011a4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011a50:	688e      	ldr	r6, [r1, #8]
 8011a52:	461f      	mov	r7, r3
 8011a54:	42be      	cmp	r6, r7
 8011a56:	680b      	ldr	r3, [r1, #0]
 8011a58:	4682      	mov	sl, r0
 8011a5a:	460c      	mov	r4, r1
 8011a5c:	4690      	mov	r8, r2
 8011a5e:	d82d      	bhi.n	8011abc <__ssputs_r+0x70>
 8011a60:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011a64:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8011a68:	d026      	beq.n	8011ab8 <__ssputs_r+0x6c>
 8011a6a:	6965      	ldr	r5, [r4, #20]
 8011a6c:	6909      	ldr	r1, [r1, #16]
 8011a6e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011a72:	eba3 0901 	sub.w	r9, r3, r1
 8011a76:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011a7a:	1c7b      	adds	r3, r7, #1
 8011a7c:	444b      	add	r3, r9
 8011a7e:	106d      	asrs	r5, r5, #1
 8011a80:	429d      	cmp	r5, r3
 8011a82:	bf38      	it	cc
 8011a84:	461d      	movcc	r5, r3
 8011a86:	0553      	lsls	r3, r2, #21
 8011a88:	d527      	bpl.n	8011ada <__ssputs_r+0x8e>
 8011a8a:	4629      	mov	r1, r5
 8011a8c:	f000 f960 	bl	8011d50 <_malloc_r>
 8011a90:	4606      	mov	r6, r0
 8011a92:	b360      	cbz	r0, 8011aee <__ssputs_r+0xa2>
 8011a94:	6921      	ldr	r1, [r4, #16]
 8011a96:	464a      	mov	r2, r9
 8011a98:	f7ff f933 	bl	8010d02 <memcpy>
 8011a9c:	89a3      	ldrh	r3, [r4, #12]
 8011a9e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8011aa2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011aa6:	81a3      	strh	r3, [r4, #12]
 8011aa8:	6126      	str	r6, [r4, #16]
 8011aaa:	6165      	str	r5, [r4, #20]
 8011aac:	444e      	add	r6, r9
 8011aae:	eba5 0509 	sub.w	r5, r5, r9
 8011ab2:	6026      	str	r6, [r4, #0]
 8011ab4:	60a5      	str	r5, [r4, #8]
 8011ab6:	463e      	mov	r6, r7
 8011ab8:	42be      	cmp	r6, r7
 8011aba:	d900      	bls.n	8011abe <__ssputs_r+0x72>
 8011abc:	463e      	mov	r6, r7
 8011abe:	6820      	ldr	r0, [r4, #0]
 8011ac0:	4632      	mov	r2, r6
 8011ac2:	4641      	mov	r1, r8
 8011ac4:	f000 fe6f 	bl	80127a6 <memmove>
 8011ac8:	68a3      	ldr	r3, [r4, #8]
 8011aca:	1b9b      	subs	r3, r3, r6
 8011acc:	60a3      	str	r3, [r4, #8]
 8011ace:	6823      	ldr	r3, [r4, #0]
 8011ad0:	4433      	add	r3, r6
 8011ad2:	6023      	str	r3, [r4, #0]
 8011ad4:	2000      	movs	r0, #0
 8011ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ada:	462a      	mov	r2, r5
 8011adc:	f000 fe35 	bl	801274a <_realloc_r>
 8011ae0:	4606      	mov	r6, r0
 8011ae2:	2800      	cmp	r0, #0
 8011ae4:	d1e0      	bne.n	8011aa8 <__ssputs_r+0x5c>
 8011ae6:	6921      	ldr	r1, [r4, #16]
 8011ae8:	4650      	mov	r0, sl
 8011aea:	f7ff ff65 	bl	80119b8 <_free_r>
 8011aee:	230c      	movs	r3, #12
 8011af0:	f8ca 3000 	str.w	r3, [sl]
 8011af4:	89a3      	ldrh	r3, [r4, #12]
 8011af6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011afa:	81a3      	strh	r3, [r4, #12]
 8011afc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011b00:	e7e9      	b.n	8011ad6 <__ssputs_r+0x8a>
	...

08011b04 <_svfiprintf_r>:
 8011b04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b08:	4698      	mov	r8, r3
 8011b0a:	898b      	ldrh	r3, [r1, #12]
 8011b0c:	061b      	lsls	r3, r3, #24
 8011b0e:	b09d      	sub	sp, #116	@ 0x74
 8011b10:	4607      	mov	r7, r0
 8011b12:	460d      	mov	r5, r1
 8011b14:	4614      	mov	r4, r2
 8011b16:	d510      	bpl.n	8011b3a <_svfiprintf_r+0x36>
 8011b18:	690b      	ldr	r3, [r1, #16]
 8011b1a:	b973      	cbnz	r3, 8011b3a <_svfiprintf_r+0x36>
 8011b1c:	2140      	movs	r1, #64	@ 0x40
 8011b1e:	f000 f917 	bl	8011d50 <_malloc_r>
 8011b22:	6028      	str	r0, [r5, #0]
 8011b24:	6128      	str	r0, [r5, #16]
 8011b26:	b930      	cbnz	r0, 8011b36 <_svfiprintf_r+0x32>
 8011b28:	230c      	movs	r3, #12
 8011b2a:	603b      	str	r3, [r7, #0]
 8011b2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011b30:	b01d      	add	sp, #116	@ 0x74
 8011b32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b36:	2340      	movs	r3, #64	@ 0x40
 8011b38:	616b      	str	r3, [r5, #20]
 8011b3a:	2300      	movs	r3, #0
 8011b3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8011b3e:	2320      	movs	r3, #32
 8011b40:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011b44:	f8cd 800c 	str.w	r8, [sp, #12]
 8011b48:	2330      	movs	r3, #48	@ 0x30
 8011b4a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8011ce8 <_svfiprintf_r+0x1e4>
 8011b4e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011b52:	f04f 0901 	mov.w	r9, #1
 8011b56:	4623      	mov	r3, r4
 8011b58:	469a      	mov	sl, r3
 8011b5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011b5e:	b10a      	cbz	r2, 8011b64 <_svfiprintf_r+0x60>
 8011b60:	2a25      	cmp	r2, #37	@ 0x25
 8011b62:	d1f9      	bne.n	8011b58 <_svfiprintf_r+0x54>
 8011b64:	ebba 0b04 	subs.w	fp, sl, r4
 8011b68:	d00b      	beq.n	8011b82 <_svfiprintf_r+0x7e>
 8011b6a:	465b      	mov	r3, fp
 8011b6c:	4622      	mov	r2, r4
 8011b6e:	4629      	mov	r1, r5
 8011b70:	4638      	mov	r0, r7
 8011b72:	f7ff ff6b 	bl	8011a4c <__ssputs_r>
 8011b76:	3001      	adds	r0, #1
 8011b78:	f000 80a7 	beq.w	8011cca <_svfiprintf_r+0x1c6>
 8011b7c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011b7e:	445a      	add	r2, fp
 8011b80:	9209      	str	r2, [sp, #36]	@ 0x24
 8011b82:	f89a 3000 	ldrb.w	r3, [sl]
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	f000 809f 	beq.w	8011cca <_svfiprintf_r+0x1c6>
 8011b8c:	2300      	movs	r3, #0
 8011b8e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8011b92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011b96:	f10a 0a01 	add.w	sl, sl, #1
 8011b9a:	9304      	str	r3, [sp, #16]
 8011b9c:	9307      	str	r3, [sp, #28]
 8011b9e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011ba2:	931a      	str	r3, [sp, #104]	@ 0x68
 8011ba4:	4654      	mov	r4, sl
 8011ba6:	2205      	movs	r2, #5
 8011ba8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011bac:	484e      	ldr	r0, [pc, #312]	@ (8011ce8 <_svfiprintf_r+0x1e4>)
 8011bae:	f7ee fb37 	bl	8000220 <memchr>
 8011bb2:	9a04      	ldr	r2, [sp, #16]
 8011bb4:	b9d8      	cbnz	r0, 8011bee <_svfiprintf_r+0xea>
 8011bb6:	06d0      	lsls	r0, r2, #27
 8011bb8:	bf44      	itt	mi
 8011bba:	2320      	movmi	r3, #32
 8011bbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011bc0:	0711      	lsls	r1, r2, #28
 8011bc2:	bf44      	itt	mi
 8011bc4:	232b      	movmi	r3, #43	@ 0x2b
 8011bc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011bca:	f89a 3000 	ldrb.w	r3, [sl]
 8011bce:	2b2a      	cmp	r3, #42	@ 0x2a
 8011bd0:	d015      	beq.n	8011bfe <_svfiprintf_r+0xfa>
 8011bd2:	9a07      	ldr	r2, [sp, #28]
 8011bd4:	4654      	mov	r4, sl
 8011bd6:	2000      	movs	r0, #0
 8011bd8:	f04f 0c0a 	mov.w	ip, #10
 8011bdc:	4621      	mov	r1, r4
 8011bde:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011be2:	3b30      	subs	r3, #48	@ 0x30
 8011be4:	2b09      	cmp	r3, #9
 8011be6:	d94b      	bls.n	8011c80 <_svfiprintf_r+0x17c>
 8011be8:	b1b0      	cbz	r0, 8011c18 <_svfiprintf_r+0x114>
 8011bea:	9207      	str	r2, [sp, #28]
 8011bec:	e014      	b.n	8011c18 <_svfiprintf_r+0x114>
 8011bee:	eba0 0308 	sub.w	r3, r0, r8
 8011bf2:	fa09 f303 	lsl.w	r3, r9, r3
 8011bf6:	4313      	orrs	r3, r2
 8011bf8:	9304      	str	r3, [sp, #16]
 8011bfa:	46a2      	mov	sl, r4
 8011bfc:	e7d2      	b.n	8011ba4 <_svfiprintf_r+0xa0>
 8011bfe:	9b03      	ldr	r3, [sp, #12]
 8011c00:	1d19      	adds	r1, r3, #4
 8011c02:	681b      	ldr	r3, [r3, #0]
 8011c04:	9103      	str	r1, [sp, #12]
 8011c06:	2b00      	cmp	r3, #0
 8011c08:	bfbb      	ittet	lt
 8011c0a:	425b      	neglt	r3, r3
 8011c0c:	f042 0202 	orrlt.w	r2, r2, #2
 8011c10:	9307      	strge	r3, [sp, #28]
 8011c12:	9307      	strlt	r3, [sp, #28]
 8011c14:	bfb8      	it	lt
 8011c16:	9204      	strlt	r2, [sp, #16]
 8011c18:	7823      	ldrb	r3, [r4, #0]
 8011c1a:	2b2e      	cmp	r3, #46	@ 0x2e
 8011c1c:	d10a      	bne.n	8011c34 <_svfiprintf_r+0x130>
 8011c1e:	7863      	ldrb	r3, [r4, #1]
 8011c20:	2b2a      	cmp	r3, #42	@ 0x2a
 8011c22:	d132      	bne.n	8011c8a <_svfiprintf_r+0x186>
 8011c24:	9b03      	ldr	r3, [sp, #12]
 8011c26:	1d1a      	adds	r2, r3, #4
 8011c28:	681b      	ldr	r3, [r3, #0]
 8011c2a:	9203      	str	r2, [sp, #12]
 8011c2c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011c30:	3402      	adds	r4, #2
 8011c32:	9305      	str	r3, [sp, #20]
 8011c34:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8011cf8 <_svfiprintf_r+0x1f4>
 8011c38:	7821      	ldrb	r1, [r4, #0]
 8011c3a:	2203      	movs	r2, #3
 8011c3c:	4650      	mov	r0, sl
 8011c3e:	f7ee faef 	bl	8000220 <memchr>
 8011c42:	b138      	cbz	r0, 8011c54 <_svfiprintf_r+0x150>
 8011c44:	9b04      	ldr	r3, [sp, #16]
 8011c46:	eba0 000a 	sub.w	r0, r0, sl
 8011c4a:	2240      	movs	r2, #64	@ 0x40
 8011c4c:	4082      	lsls	r2, r0
 8011c4e:	4313      	orrs	r3, r2
 8011c50:	3401      	adds	r4, #1
 8011c52:	9304      	str	r3, [sp, #16]
 8011c54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011c58:	4824      	ldr	r0, [pc, #144]	@ (8011cec <_svfiprintf_r+0x1e8>)
 8011c5a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011c5e:	2206      	movs	r2, #6
 8011c60:	f7ee fade 	bl	8000220 <memchr>
 8011c64:	2800      	cmp	r0, #0
 8011c66:	d036      	beq.n	8011cd6 <_svfiprintf_r+0x1d2>
 8011c68:	4b21      	ldr	r3, [pc, #132]	@ (8011cf0 <_svfiprintf_r+0x1ec>)
 8011c6a:	bb1b      	cbnz	r3, 8011cb4 <_svfiprintf_r+0x1b0>
 8011c6c:	9b03      	ldr	r3, [sp, #12]
 8011c6e:	3307      	adds	r3, #7
 8011c70:	f023 0307 	bic.w	r3, r3, #7
 8011c74:	3308      	adds	r3, #8
 8011c76:	9303      	str	r3, [sp, #12]
 8011c78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011c7a:	4433      	add	r3, r6
 8011c7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8011c7e:	e76a      	b.n	8011b56 <_svfiprintf_r+0x52>
 8011c80:	fb0c 3202 	mla	r2, ip, r2, r3
 8011c84:	460c      	mov	r4, r1
 8011c86:	2001      	movs	r0, #1
 8011c88:	e7a8      	b.n	8011bdc <_svfiprintf_r+0xd8>
 8011c8a:	2300      	movs	r3, #0
 8011c8c:	3401      	adds	r4, #1
 8011c8e:	9305      	str	r3, [sp, #20]
 8011c90:	4619      	mov	r1, r3
 8011c92:	f04f 0c0a 	mov.w	ip, #10
 8011c96:	4620      	mov	r0, r4
 8011c98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011c9c:	3a30      	subs	r2, #48	@ 0x30
 8011c9e:	2a09      	cmp	r2, #9
 8011ca0:	d903      	bls.n	8011caa <_svfiprintf_r+0x1a6>
 8011ca2:	2b00      	cmp	r3, #0
 8011ca4:	d0c6      	beq.n	8011c34 <_svfiprintf_r+0x130>
 8011ca6:	9105      	str	r1, [sp, #20]
 8011ca8:	e7c4      	b.n	8011c34 <_svfiprintf_r+0x130>
 8011caa:	fb0c 2101 	mla	r1, ip, r1, r2
 8011cae:	4604      	mov	r4, r0
 8011cb0:	2301      	movs	r3, #1
 8011cb2:	e7f0      	b.n	8011c96 <_svfiprintf_r+0x192>
 8011cb4:	ab03      	add	r3, sp, #12
 8011cb6:	9300      	str	r3, [sp, #0]
 8011cb8:	462a      	mov	r2, r5
 8011cba:	4b0e      	ldr	r3, [pc, #56]	@ (8011cf4 <_svfiprintf_r+0x1f0>)
 8011cbc:	a904      	add	r1, sp, #16
 8011cbe:	4638      	mov	r0, r7
 8011cc0:	f7fe fadc 	bl	801027c <_printf_float>
 8011cc4:	1c42      	adds	r2, r0, #1
 8011cc6:	4606      	mov	r6, r0
 8011cc8:	d1d6      	bne.n	8011c78 <_svfiprintf_r+0x174>
 8011cca:	89ab      	ldrh	r3, [r5, #12]
 8011ccc:	065b      	lsls	r3, r3, #25
 8011cce:	f53f af2d 	bmi.w	8011b2c <_svfiprintf_r+0x28>
 8011cd2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011cd4:	e72c      	b.n	8011b30 <_svfiprintf_r+0x2c>
 8011cd6:	ab03      	add	r3, sp, #12
 8011cd8:	9300      	str	r3, [sp, #0]
 8011cda:	462a      	mov	r2, r5
 8011cdc:	4b05      	ldr	r3, [pc, #20]	@ (8011cf4 <_svfiprintf_r+0x1f0>)
 8011cde:	a904      	add	r1, sp, #16
 8011ce0:	4638      	mov	r0, r7
 8011ce2:	f7fe fd63 	bl	80107ac <_printf_i>
 8011ce6:	e7ed      	b.n	8011cc4 <_svfiprintf_r+0x1c0>
 8011ce8:	0801403d 	.word	0x0801403d
 8011cec:	08014047 	.word	0x08014047
 8011cf0:	0801027d 	.word	0x0801027d
 8011cf4:	08011a4d 	.word	0x08011a4d
 8011cf8:	08014043 	.word	0x08014043

08011cfc <malloc>:
 8011cfc:	4b02      	ldr	r3, [pc, #8]	@ (8011d08 <malloc+0xc>)
 8011cfe:	4601      	mov	r1, r0
 8011d00:	6818      	ldr	r0, [r3, #0]
 8011d02:	f000 b825 	b.w	8011d50 <_malloc_r>
 8011d06:	bf00      	nop
 8011d08:	200001b4 	.word	0x200001b4

08011d0c <sbrk_aligned>:
 8011d0c:	b570      	push	{r4, r5, r6, lr}
 8011d0e:	4e0f      	ldr	r6, [pc, #60]	@ (8011d4c <sbrk_aligned+0x40>)
 8011d10:	460c      	mov	r4, r1
 8011d12:	6831      	ldr	r1, [r6, #0]
 8011d14:	4605      	mov	r5, r0
 8011d16:	b911      	cbnz	r1, 8011d1e <sbrk_aligned+0x12>
 8011d18:	f000 fd94 	bl	8012844 <_sbrk_r>
 8011d1c:	6030      	str	r0, [r6, #0]
 8011d1e:	4621      	mov	r1, r4
 8011d20:	4628      	mov	r0, r5
 8011d22:	f000 fd8f 	bl	8012844 <_sbrk_r>
 8011d26:	1c43      	adds	r3, r0, #1
 8011d28:	d103      	bne.n	8011d32 <sbrk_aligned+0x26>
 8011d2a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8011d2e:	4620      	mov	r0, r4
 8011d30:	bd70      	pop	{r4, r5, r6, pc}
 8011d32:	1cc4      	adds	r4, r0, #3
 8011d34:	f024 0403 	bic.w	r4, r4, #3
 8011d38:	42a0      	cmp	r0, r4
 8011d3a:	d0f8      	beq.n	8011d2e <sbrk_aligned+0x22>
 8011d3c:	1a21      	subs	r1, r4, r0
 8011d3e:	4628      	mov	r0, r5
 8011d40:	f000 fd80 	bl	8012844 <_sbrk_r>
 8011d44:	3001      	adds	r0, #1
 8011d46:	d1f2      	bne.n	8011d2e <sbrk_aligned+0x22>
 8011d48:	e7ef      	b.n	8011d2a <sbrk_aligned+0x1e>
 8011d4a:	bf00      	nop
 8011d4c:	20012988 	.word	0x20012988

08011d50 <_malloc_r>:
 8011d50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011d54:	1ccd      	adds	r5, r1, #3
 8011d56:	f025 0503 	bic.w	r5, r5, #3
 8011d5a:	3508      	adds	r5, #8
 8011d5c:	2d0c      	cmp	r5, #12
 8011d5e:	bf38      	it	cc
 8011d60:	250c      	movcc	r5, #12
 8011d62:	2d00      	cmp	r5, #0
 8011d64:	4606      	mov	r6, r0
 8011d66:	db01      	blt.n	8011d6c <_malloc_r+0x1c>
 8011d68:	42a9      	cmp	r1, r5
 8011d6a:	d904      	bls.n	8011d76 <_malloc_r+0x26>
 8011d6c:	230c      	movs	r3, #12
 8011d6e:	6033      	str	r3, [r6, #0]
 8011d70:	2000      	movs	r0, #0
 8011d72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011d76:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8011e4c <_malloc_r+0xfc>
 8011d7a:	f000 f915 	bl	8011fa8 <__malloc_lock>
 8011d7e:	f8d8 3000 	ldr.w	r3, [r8]
 8011d82:	461c      	mov	r4, r3
 8011d84:	bb44      	cbnz	r4, 8011dd8 <_malloc_r+0x88>
 8011d86:	4629      	mov	r1, r5
 8011d88:	4630      	mov	r0, r6
 8011d8a:	f7ff ffbf 	bl	8011d0c <sbrk_aligned>
 8011d8e:	1c43      	adds	r3, r0, #1
 8011d90:	4604      	mov	r4, r0
 8011d92:	d158      	bne.n	8011e46 <_malloc_r+0xf6>
 8011d94:	f8d8 4000 	ldr.w	r4, [r8]
 8011d98:	4627      	mov	r7, r4
 8011d9a:	2f00      	cmp	r7, #0
 8011d9c:	d143      	bne.n	8011e26 <_malloc_r+0xd6>
 8011d9e:	2c00      	cmp	r4, #0
 8011da0:	d04b      	beq.n	8011e3a <_malloc_r+0xea>
 8011da2:	6823      	ldr	r3, [r4, #0]
 8011da4:	4639      	mov	r1, r7
 8011da6:	4630      	mov	r0, r6
 8011da8:	eb04 0903 	add.w	r9, r4, r3
 8011dac:	f000 fd4a 	bl	8012844 <_sbrk_r>
 8011db0:	4581      	cmp	r9, r0
 8011db2:	d142      	bne.n	8011e3a <_malloc_r+0xea>
 8011db4:	6821      	ldr	r1, [r4, #0]
 8011db6:	1a6d      	subs	r5, r5, r1
 8011db8:	4629      	mov	r1, r5
 8011dba:	4630      	mov	r0, r6
 8011dbc:	f7ff ffa6 	bl	8011d0c <sbrk_aligned>
 8011dc0:	3001      	adds	r0, #1
 8011dc2:	d03a      	beq.n	8011e3a <_malloc_r+0xea>
 8011dc4:	6823      	ldr	r3, [r4, #0]
 8011dc6:	442b      	add	r3, r5
 8011dc8:	6023      	str	r3, [r4, #0]
 8011dca:	f8d8 3000 	ldr.w	r3, [r8]
 8011dce:	685a      	ldr	r2, [r3, #4]
 8011dd0:	bb62      	cbnz	r2, 8011e2c <_malloc_r+0xdc>
 8011dd2:	f8c8 7000 	str.w	r7, [r8]
 8011dd6:	e00f      	b.n	8011df8 <_malloc_r+0xa8>
 8011dd8:	6822      	ldr	r2, [r4, #0]
 8011dda:	1b52      	subs	r2, r2, r5
 8011ddc:	d420      	bmi.n	8011e20 <_malloc_r+0xd0>
 8011dde:	2a0b      	cmp	r2, #11
 8011de0:	d917      	bls.n	8011e12 <_malloc_r+0xc2>
 8011de2:	1961      	adds	r1, r4, r5
 8011de4:	42a3      	cmp	r3, r4
 8011de6:	6025      	str	r5, [r4, #0]
 8011de8:	bf18      	it	ne
 8011dea:	6059      	strne	r1, [r3, #4]
 8011dec:	6863      	ldr	r3, [r4, #4]
 8011dee:	bf08      	it	eq
 8011df0:	f8c8 1000 	streq.w	r1, [r8]
 8011df4:	5162      	str	r2, [r4, r5]
 8011df6:	604b      	str	r3, [r1, #4]
 8011df8:	4630      	mov	r0, r6
 8011dfa:	f000 f8db 	bl	8011fb4 <__malloc_unlock>
 8011dfe:	f104 000b 	add.w	r0, r4, #11
 8011e02:	1d23      	adds	r3, r4, #4
 8011e04:	f020 0007 	bic.w	r0, r0, #7
 8011e08:	1ac2      	subs	r2, r0, r3
 8011e0a:	bf1c      	itt	ne
 8011e0c:	1a1b      	subne	r3, r3, r0
 8011e0e:	50a3      	strne	r3, [r4, r2]
 8011e10:	e7af      	b.n	8011d72 <_malloc_r+0x22>
 8011e12:	6862      	ldr	r2, [r4, #4]
 8011e14:	42a3      	cmp	r3, r4
 8011e16:	bf0c      	ite	eq
 8011e18:	f8c8 2000 	streq.w	r2, [r8]
 8011e1c:	605a      	strne	r2, [r3, #4]
 8011e1e:	e7eb      	b.n	8011df8 <_malloc_r+0xa8>
 8011e20:	4623      	mov	r3, r4
 8011e22:	6864      	ldr	r4, [r4, #4]
 8011e24:	e7ae      	b.n	8011d84 <_malloc_r+0x34>
 8011e26:	463c      	mov	r4, r7
 8011e28:	687f      	ldr	r7, [r7, #4]
 8011e2a:	e7b6      	b.n	8011d9a <_malloc_r+0x4a>
 8011e2c:	461a      	mov	r2, r3
 8011e2e:	685b      	ldr	r3, [r3, #4]
 8011e30:	42a3      	cmp	r3, r4
 8011e32:	d1fb      	bne.n	8011e2c <_malloc_r+0xdc>
 8011e34:	2300      	movs	r3, #0
 8011e36:	6053      	str	r3, [r2, #4]
 8011e38:	e7de      	b.n	8011df8 <_malloc_r+0xa8>
 8011e3a:	230c      	movs	r3, #12
 8011e3c:	6033      	str	r3, [r6, #0]
 8011e3e:	4630      	mov	r0, r6
 8011e40:	f000 f8b8 	bl	8011fb4 <__malloc_unlock>
 8011e44:	e794      	b.n	8011d70 <_malloc_r+0x20>
 8011e46:	6005      	str	r5, [r0, #0]
 8011e48:	e7d6      	b.n	8011df8 <_malloc_r+0xa8>
 8011e4a:	bf00      	nop
 8011e4c:	2001298c 	.word	0x2001298c

08011e50 <__sflush_r>:
 8011e50:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011e54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e58:	0716      	lsls	r6, r2, #28
 8011e5a:	4605      	mov	r5, r0
 8011e5c:	460c      	mov	r4, r1
 8011e5e:	d454      	bmi.n	8011f0a <__sflush_r+0xba>
 8011e60:	684b      	ldr	r3, [r1, #4]
 8011e62:	2b00      	cmp	r3, #0
 8011e64:	dc02      	bgt.n	8011e6c <__sflush_r+0x1c>
 8011e66:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8011e68:	2b00      	cmp	r3, #0
 8011e6a:	dd48      	ble.n	8011efe <__sflush_r+0xae>
 8011e6c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011e6e:	2e00      	cmp	r6, #0
 8011e70:	d045      	beq.n	8011efe <__sflush_r+0xae>
 8011e72:	2300      	movs	r3, #0
 8011e74:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8011e78:	682f      	ldr	r7, [r5, #0]
 8011e7a:	6a21      	ldr	r1, [r4, #32]
 8011e7c:	602b      	str	r3, [r5, #0]
 8011e7e:	d030      	beq.n	8011ee2 <__sflush_r+0x92>
 8011e80:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8011e82:	89a3      	ldrh	r3, [r4, #12]
 8011e84:	0759      	lsls	r1, r3, #29
 8011e86:	d505      	bpl.n	8011e94 <__sflush_r+0x44>
 8011e88:	6863      	ldr	r3, [r4, #4]
 8011e8a:	1ad2      	subs	r2, r2, r3
 8011e8c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8011e8e:	b10b      	cbz	r3, 8011e94 <__sflush_r+0x44>
 8011e90:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011e92:	1ad2      	subs	r2, r2, r3
 8011e94:	2300      	movs	r3, #0
 8011e96:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011e98:	6a21      	ldr	r1, [r4, #32]
 8011e9a:	4628      	mov	r0, r5
 8011e9c:	47b0      	blx	r6
 8011e9e:	1c43      	adds	r3, r0, #1
 8011ea0:	89a3      	ldrh	r3, [r4, #12]
 8011ea2:	d106      	bne.n	8011eb2 <__sflush_r+0x62>
 8011ea4:	6829      	ldr	r1, [r5, #0]
 8011ea6:	291d      	cmp	r1, #29
 8011ea8:	d82b      	bhi.n	8011f02 <__sflush_r+0xb2>
 8011eaa:	4a2a      	ldr	r2, [pc, #168]	@ (8011f54 <__sflush_r+0x104>)
 8011eac:	410a      	asrs	r2, r1
 8011eae:	07d6      	lsls	r6, r2, #31
 8011eb0:	d427      	bmi.n	8011f02 <__sflush_r+0xb2>
 8011eb2:	2200      	movs	r2, #0
 8011eb4:	6062      	str	r2, [r4, #4]
 8011eb6:	04d9      	lsls	r1, r3, #19
 8011eb8:	6922      	ldr	r2, [r4, #16]
 8011eba:	6022      	str	r2, [r4, #0]
 8011ebc:	d504      	bpl.n	8011ec8 <__sflush_r+0x78>
 8011ebe:	1c42      	adds	r2, r0, #1
 8011ec0:	d101      	bne.n	8011ec6 <__sflush_r+0x76>
 8011ec2:	682b      	ldr	r3, [r5, #0]
 8011ec4:	b903      	cbnz	r3, 8011ec8 <__sflush_r+0x78>
 8011ec6:	6560      	str	r0, [r4, #84]	@ 0x54
 8011ec8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011eca:	602f      	str	r7, [r5, #0]
 8011ecc:	b1b9      	cbz	r1, 8011efe <__sflush_r+0xae>
 8011ece:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011ed2:	4299      	cmp	r1, r3
 8011ed4:	d002      	beq.n	8011edc <__sflush_r+0x8c>
 8011ed6:	4628      	mov	r0, r5
 8011ed8:	f7ff fd6e 	bl	80119b8 <_free_r>
 8011edc:	2300      	movs	r3, #0
 8011ede:	6363      	str	r3, [r4, #52]	@ 0x34
 8011ee0:	e00d      	b.n	8011efe <__sflush_r+0xae>
 8011ee2:	2301      	movs	r3, #1
 8011ee4:	4628      	mov	r0, r5
 8011ee6:	47b0      	blx	r6
 8011ee8:	4602      	mov	r2, r0
 8011eea:	1c50      	adds	r0, r2, #1
 8011eec:	d1c9      	bne.n	8011e82 <__sflush_r+0x32>
 8011eee:	682b      	ldr	r3, [r5, #0]
 8011ef0:	2b00      	cmp	r3, #0
 8011ef2:	d0c6      	beq.n	8011e82 <__sflush_r+0x32>
 8011ef4:	2b1d      	cmp	r3, #29
 8011ef6:	d001      	beq.n	8011efc <__sflush_r+0xac>
 8011ef8:	2b16      	cmp	r3, #22
 8011efa:	d11e      	bne.n	8011f3a <__sflush_r+0xea>
 8011efc:	602f      	str	r7, [r5, #0]
 8011efe:	2000      	movs	r0, #0
 8011f00:	e022      	b.n	8011f48 <__sflush_r+0xf8>
 8011f02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011f06:	b21b      	sxth	r3, r3
 8011f08:	e01b      	b.n	8011f42 <__sflush_r+0xf2>
 8011f0a:	690f      	ldr	r7, [r1, #16]
 8011f0c:	2f00      	cmp	r7, #0
 8011f0e:	d0f6      	beq.n	8011efe <__sflush_r+0xae>
 8011f10:	0793      	lsls	r3, r2, #30
 8011f12:	680e      	ldr	r6, [r1, #0]
 8011f14:	bf08      	it	eq
 8011f16:	694b      	ldreq	r3, [r1, #20]
 8011f18:	600f      	str	r7, [r1, #0]
 8011f1a:	bf18      	it	ne
 8011f1c:	2300      	movne	r3, #0
 8011f1e:	eba6 0807 	sub.w	r8, r6, r7
 8011f22:	608b      	str	r3, [r1, #8]
 8011f24:	f1b8 0f00 	cmp.w	r8, #0
 8011f28:	dde9      	ble.n	8011efe <__sflush_r+0xae>
 8011f2a:	6a21      	ldr	r1, [r4, #32]
 8011f2c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8011f2e:	4643      	mov	r3, r8
 8011f30:	463a      	mov	r2, r7
 8011f32:	4628      	mov	r0, r5
 8011f34:	47b0      	blx	r6
 8011f36:	2800      	cmp	r0, #0
 8011f38:	dc08      	bgt.n	8011f4c <__sflush_r+0xfc>
 8011f3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011f3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011f42:	81a3      	strh	r3, [r4, #12]
 8011f44:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011f48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f4c:	4407      	add	r7, r0
 8011f4e:	eba8 0800 	sub.w	r8, r8, r0
 8011f52:	e7e7      	b.n	8011f24 <__sflush_r+0xd4>
 8011f54:	dfbffffe 	.word	0xdfbffffe

08011f58 <_fflush_r>:
 8011f58:	b538      	push	{r3, r4, r5, lr}
 8011f5a:	690b      	ldr	r3, [r1, #16]
 8011f5c:	4605      	mov	r5, r0
 8011f5e:	460c      	mov	r4, r1
 8011f60:	b913      	cbnz	r3, 8011f68 <_fflush_r+0x10>
 8011f62:	2500      	movs	r5, #0
 8011f64:	4628      	mov	r0, r5
 8011f66:	bd38      	pop	{r3, r4, r5, pc}
 8011f68:	b118      	cbz	r0, 8011f72 <_fflush_r+0x1a>
 8011f6a:	6a03      	ldr	r3, [r0, #32]
 8011f6c:	b90b      	cbnz	r3, 8011f72 <_fflush_r+0x1a>
 8011f6e:	f7fe fdc9 	bl	8010b04 <__sinit>
 8011f72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011f76:	2b00      	cmp	r3, #0
 8011f78:	d0f3      	beq.n	8011f62 <_fflush_r+0xa>
 8011f7a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8011f7c:	07d0      	lsls	r0, r2, #31
 8011f7e:	d404      	bmi.n	8011f8a <_fflush_r+0x32>
 8011f80:	0599      	lsls	r1, r3, #22
 8011f82:	d402      	bmi.n	8011f8a <_fflush_r+0x32>
 8011f84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011f86:	f7fe feba 	bl	8010cfe <__retarget_lock_acquire_recursive>
 8011f8a:	4628      	mov	r0, r5
 8011f8c:	4621      	mov	r1, r4
 8011f8e:	f7ff ff5f 	bl	8011e50 <__sflush_r>
 8011f92:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011f94:	07da      	lsls	r2, r3, #31
 8011f96:	4605      	mov	r5, r0
 8011f98:	d4e4      	bmi.n	8011f64 <_fflush_r+0xc>
 8011f9a:	89a3      	ldrh	r3, [r4, #12]
 8011f9c:	059b      	lsls	r3, r3, #22
 8011f9e:	d4e1      	bmi.n	8011f64 <_fflush_r+0xc>
 8011fa0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011fa2:	f7fe fead 	bl	8010d00 <__retarget_lock_release_recursive>
 8011fa6:	e7dd      	b.n	8011f64 <_fflush_r+0xc>

08011fa8 <__malloc_lock>:
 8011fa8:	4801      	ldr	r0, [pc, #4]	@ (8011fb0 <__malloc_lock+0x8>)
 8011faa:	f7fe bea8 	b.w	8010cfe <__retarget_lock_acquire_recursive>
 8011fae:	bf00      	nop
 8011fb0:	20012984 	.word	0x20012984

08011fb4 <__malloc_unlock>:
 8011fb4:	4801      	ldr	r0, [pc, #4]	@ (8011fbc <__malloc_unlock+0x8>)
 8011fb6:	f7fe bea3 	b.w	8010d00 <__retarget_lock_release_recursive>
 8011fba:	bf00      	nop
 8011fbc:	20012984 	.word	0x20012984

08011fc0 <_Balloc>:
 8011fc0:	b570      	push	{r4, r5, r6, lr}
 8011fc2:	69c6      	ldr	r6, [r0, #28]
 8011fc4:	4604      	mov	r4, r0
 8011fc6:	460d      	mov	r5, r1
 8011fc8:	b976      	cbnz	r6, 8011fe8 <_Balloc+0x28>
 8011fca:	2010      	movs	r0, #16
 8011fcc:	f7ff fe96 	bl	8011cfc <malloc>
 8011fd0:	4602      	mov	r2, r0
 8011fd2:	61e0      	str	r0, [r4, #28]
 8011fd4:	b920      	cbnz	r0, 8011fe0 <_Balloc+0x20>
 8011fd6:	4b18      	ldr	r3, [pc, #96]	@ (8012038 <_Balloc+0x78>)
 8011fd8:	4818      	ldr	r0, [pc, #96]	@ (801203c <_Balloc+0x7c>)
 8011fda:	216b      	movs	r1, #107	@ 0x6b
 8011fdc:	f000 fc54 	bl	8012888 <__assert_func>
 8011fe0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011fe4:	6006      	str	r6, [r0, #0]
 8011fe6:	60c6      	str	r6, [r0, #12]
 8011fe8:	69e6      	ldr	r6, [r4, #28]
 8011fea:	68f3      	ldr	r3, [r6, #12]
 8011fec:	b183      	cbz	r3, 8012010 <_Balloc+0x50>
 8011fee:	69e3      	ldr	r3, [r4, #28]
 8011ff0:	68db      	ldr	r3, [r3, #12]
 8011ff2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011ff6:	b9b8      	cbnz	r0, 8012028 <_Balloc+0x68>
 8011ff8:	2101      	movs	r1, #1
 8011ffa:	fa01 f605 	lsl.w	r6, r1, r5
 8011ffe:	1d72      	adds	r2, r6, #5
 8012000:	0092      	lsls	r2, r2, #2
 8012002:	4620      	mov	r0, r4
 8012004:	f000 fc5e 	bl	80128c4 <_calloc_r>
 8012008:	b160      	cbz	r0, 8012024 <_Balloc+0x64>
 801200a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801200e:	e00e      	b.n	801202e <_Balloc+0x6e>
 8012010:	2221      	movs	r2, #33	@ 0x21
 8012012:	2104      	movs	r1, #4
 8012014:	4620      	mov	r0, r4
 8012016:	f000 fc55 	bl	80128c4 <_calloc_r>
 801201a:	69e3      	ldr	r3, [r4, #28]
 801201c:	60f0      	str	r0, [r6, #12]
 801201e:	68db      	ldr	r3, [r3, #12]
 8012020:	2b00      	cmp	r3, #0
 8012022:	d1e4      	bne.n	8011fee <_Balloc+0x2e>
 8012024:	2000      	movs	r0, #0
 8012026:	bd70      	pop	{r4, r5, r6, pc}
 8012028:	6802      	ldr	r2, [r0, #0]
 801202a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801202e:	2300      	movs	r3, #0
 8012030:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012034:	e7f7      	b.n	8012026 <_Balloc+0x66>
 8012036:	bf00      	nop
 8012038:	08013fbd 	.word	0x08013fbd
 801203c:	0801404e 	.word	0x0801404e

08012040 <_Bfree>:
 8012040:	b570      	push	{r4, r5, r6, lr}
 8012042:	69c6      	ldr	r6, [r0, #28]
 8012044:	4605      	mov	r5, r0
 8012046:	460c      	mov	r4, r1
 8012048:	b976      	cbnz	r6, 8012068 <_Bfree+0x28>
 801204a:	2010      	movs	r0, #16
 801204c:	f7ff fe56 	bl	8011cfc <malloc>
 8012050:	4602      	mov	r2, r0
 8012052:	61e8      	str	r0, [r5, #28]
 8012054:	b920      	cbnz	r0, 8012060 <_Bfree+0x20>
 8012056:	4b09      	ldr	r3, [pc, #36]	@ (801207c <_Bfree+0x3c>)
 8012058:	4809      	ldr	r0, [pc, #36]	@ (8012080 <_Bfree+0x40>)
 801205a:	218f      	movs	r1, #143	@ 0x8f
 801205c:	f000 fc14 	bl	8012888 <__assert_func>
 8012060:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012064:	6006      	str	r6, [r0, #0]
 8012066:	60c6      	str	r6, [r0, #12]
 8012068:	b13c      	cbz	r4, 801207a <_Bfree+0x3a>
 801206a:	69eb      	ldr	r3, [r5, #28]
 801206c:	6862      	ldr	r2, [r4, #4]
 801206e:	68db      	ldr	r3, [r3, #12]
 8012070:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012074:	6021      	str	r1, [r4, #0]
 8012076:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801207a:	bd70      	pop	{r4, r5, r6, pc}
 801207c:	08013fbd 	.word	0x08013fbd
 8012080:	0801404e 	.word	0x0801404e

08012084 <__multadd>:
 8012084:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012088:	690d      	ldr	r5, [r1, #16]
 801208a:	4607      	mov	r7, r0
 801208c:	460c      	mov	r4, r1
 801208e:	461e      	mov	r6, r3
 8012090:	f101 0c14 	add.w	ip, r1, #20
 8012094:	2000      	movs	r0, #0
 8012096:	f8dc 3000 	ldr.w	r3, [ip]
 801209a:	b299      	uxth	r1, r3
 801209c:	fb02 6101 	mla	r1, r2, r1, r6
 80120a0:	0c1e      	lsrs	r6, r3, #16
 80120a2:	0c0b      	lsrs	r3, r1, #16
 80120a4:	fb02 3306 	mla	r3, r2, r6, r3
 80120a8:	b289      	uxth	r1, r1
 80120aa:	3001      	adds	r0, #1
 80120ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80120b0:	4285      	cmp	r5, r0
 80120b2:	f84c 1b04 	str.w	r1, [ip], #4
 80120b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80120ba:	dcec      	bgt.n	8012096 <__multadd+0x12>
 80120bc:	b30e      	cbz	r6, 8012102 <__multadd+0x7e>
 80120be:	68a3      	ldr	r3, [r4, #8]
 80120c0:	42ab      	cmp	r3, r5
 80120c2:	dc19      	bgt.n	80120f8 <__multadd+0x74>
 80120c4:	6861      	ldr	r1, [r4, #4]
 80120c6:	4638      	mov	r0, r7
 80120c8:	3101      	adds	r1, #1
 80120ca:	f7ff ff79 	bl	8011fc0 <_Balloc>
 80120ce:	4680      	mov	r8, r0
 80120d0:	b928      	cbnz	r0, 80120de <__multadd+0x5a>
 80120d2:	4602      	mov	r2, r0
 80120d4:	4b0c      	ldr	r3, [pc, #48]	@ (8012108 <__multadd+0x84>)
 80120d6:	480d      	ldr	r0, [pc, #52]	@ (801210c <__multadd+0x88>)
 80120d8:	21ba      	movs	r1, #186	@ 0xba
 80120da:	f000 fbd5 	bl	8012888 <__assert_func>
 80120de:	6922      	ldr	r2, [r4, #16]
 80120e0:	3202      	adds	r2, #2
 80120e2:	f104 010c 	add.w	r1, r4, #12
 80120e6:	0092      	lsls	r2, r2, #2
 80120e8:	300c      	adds	r0, #12
 80120ea:	f7fe fe0a 	bl	8010d02 <memcpy>
 80120ee:	4621      	mov	r1, r4
 80120f0:	4638      	mov	r0, r7
 80120f2:	f7ff ffa5 	bl	8012040 <_Bfree>
 80120f6:	4644      	mov	r4, r8
 80120f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80120fc:	3501      	adds	r5, #1
 80120fe:	615e      	str	r6, [r3, #20]
 8012100:	6125      	str	r5, [r4, #16]
 8012102:	4620      	mov	r0, r4
 8012104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012108:	0801402c 	.word	0x0801402c
 801210c:	0801404e 	.word	0x0801404e

08012110 <__hi0bits>:
 8012110:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8012114:	4603      	mov	r3, r0
 8012116:	bf36      	itet	cc
 8012118:	0403      	lslcc	r3, r0, #16
 801211a:	2000      	movcs	r0, #0
 801211c:	2010      	movcc	r0, #16
 801211e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8012122:	bf3c      	itt	cc
 8012124:	021b      	lslcc	r3, r3, #8
 8012126:	3008      	addcc	r0, #8
 8012128:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801212c:	bf3c      	itt	cc
 801212e:	011b      	lslcc	r3, r3, #4
 8012130:	3004      	addcc	r0, #4
 8012132:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012136:	bf3c      	itt	cc
 8012138:	009b      	lslcc	r3, r3, #2
 801213a:	3002      	addcc	r0, #2
 801213c:	2b00      	cmp	r3, #0
 801213e:	db05      	blt.n	801214c <__hi0bits+0x3c>
 8012140:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8012144:	f100 0001 	add.w	r0, r0, #1
 8012148:	bf08      	it	eq
 801214a:	2020      	moveq	r0, #32
 801214c:	4770      	bx	lr

0801214e <__lo0bits>:
 801214e:	6803      	ldr	r3, [r0, #0]
 8012150:	4602      	mov	r2, r0
 8012152:	f013 0007 	ands.w	r0, r3, #7
 8012156:	d00b      	beq.n	8012170 <__lo0bits+0x22>
 8012158:	07d9      	lsls	r1, r3, #31
 801215a:	d421      	bmi.n	80121a0 <__lo0bits+0x52>
 801215c:	0798      	lsls	r0, r3, #30
 801215e:	bf49      	itett	mi
 8012160:	085b      	lsrmi	r3, r3, #1
 8012162:	089b      	lsrpl	r3, r3, #2
 8012164:	2001      	movmi	r0, #1
 8012166:	6013      	strmi	r3, [r2, #0]
 8012168:	bf5c      	itt	pl
 801216a:	6013      	strpl	r3, [r2, #0]
 801216c:	2002      	movpl	r0, #2
 801216e:	4770      	bx	lr
 8012170:	b299      	uxth	r1, r3
 8012172:	b909      	cbnz	r1, 8012178 <__lo0bits+0x2a>
 8012174:	0c1b      	lsrs	r3, r3, #16
 8012176:	2010      	movs	r0, #16
 8012178:	b2d9      	uxtb	r1, r3
 801217a:	b909      	cbnz	r1, 8012180 <__lo0bits+0x32>
 801217c:	3008      	adds	r0, #8
 801217e:	0a1b      	lsrs	r3, r3, #8
 8012180:	0719      	lsls	r1, r3, #28
 8012182:	bf04      	itt	eq
 8012184:	091b      	lsreq	r3, r3, #4
 8012186:	3004      	addeq	r0, #4
 8012188:	0799      	lsls	r1, r3, #30
 801218a:	bf04      	itt	eq
 801218c:	089b      	lsreq	r3, r3, #2
 801218e:	3002      	addeq	r0, #2
 8012190:	07d9      	lsls	r1, r3, #31
 8012192:	d403      	bmi.n	801219c <__lo0bits+0x4e>
 8012194:	085b      	lsrs	r3, r3, #1
 8012196:	f100 0001 	add.w	r0, r0, #1
 801219a:	d003      	beq.n	80121a4 <__lo0bits+0x56>
 801219c:	6013      	str	r3, [r2, #0]
 801219e:	4770      	bx	lr
 80121a0:	2000      	movs	r0, #0
 80121a2:	4770      	bx	lr
 80121a4:	2020      	movs	r0, #32
 80121a6:	4770      	bx	lr

080121a8 <__i2b>:
 80121a8:	b510      	push	{r4, lr}
 80121aa:	460c      	mov	r4, r1
 80121ac:	2101      	movs	r1, #1
 80121ae:	f7ff ff07 	bl	8011fc0 <_Balloc>
 80121b2:	4602      	mov	r2, r0
 80121b4:	b928      	cbnz	r0, 80121c2 <__i2b+0x1a>
 80121b6:	4b05      	ldr	r3, [pc, #20]	@ (80121cc <__i2b+0x24>)
 80121b8:	4805      	ldr	r0, [pc, #20]	@ (80121d0 <__i2b+0x28>)
 80121ba:	f240 1145 	movw	r1, #325	@ 0x145
 80121be:	f000 fb63 	bl	8012888 <__assert_func>
 80121c2:	2301      	movs	r3, #1
 80121c4:	6144      	str	r4, [r0, #20]
 80121c6:	6103      	str	r3, [r0, #16]
 80121c8:	bd10      	pop	{r4, pc}
 80121ca:	bf00      	nop
 80121cc:	0801402c 	.word	0x0801402c
 80121d0:	0801404e 	.word	0x0801404e

080121d4 <__multiply>:
 80121d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80121d8:	4614      	mov	r4, r2
 80121da:	690a      	ldr	r2, [r1, #16]
 80121dc:	6923      	ldr	r3, [r4, #16]
 80121de:	429a      	cmp	r2, r3
 80121e0:	bfa8      	it	ge
 80121e2:	4623      	movge	r3, r4
 80121e4:	460f      	mov	r7, r1
 80121e6:	bfa4      	itt	ge
 80121e8:	460c      	movge	r4, r1
 80121ea:	461f      	movge	r7, r3
 80121ec:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80121f0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80121f4:	68a3      	ldr	r3, [r4, #8]
 80121f6:	6861      	ldr	r1, [r4, #4]
 80121f8:	eb0a 0609 	add.w	r6, sl, r9
 80121fc:	42b3      	cmp	r3, r6
 80121fe:	b085      	sub	sp, #20
 8012200:	bfb8      	it	lt
 8012202:	3101      	addlt	r1, #1
 8012204:	f7ff fedc 	bl	8011fc0 <_Balloc>
 8012208:	b930      	cbnz	r0, 8012218 <__multiply+0x44>
 801220a:	4602      	mov	r2, r0
 801220c:	4b44      	ldr	r3, [pc, #272]	@ (8012320 <__multiply+0x14c>)
 801220e:	4845      	ldr	r0, [pc, #276]	@ (8012324 <__multiply+0x150>)
 8012210:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8012214:	f000 fb38 	bl	8012888 <__assert_func>
 8012218:	f100 0514 	add.w	r5, r0, #20
 801221c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012220:	462b      	mov	r3, r5
 8012222:	2200      	movs	r2, #0
 8012224:	4543      	cmp	r3, r8
 8012226:	d321      	bcc.n	801226c <__multiply+0x98>
 8012228:	f107 0114 	add.w	r1, r7, #20
 801222c:	f104 0214 	add.w	r2, r4, #20
 8012230:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8012234:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8012238:	9302      	str	r3, [sp, #8]
 801223a:	1b13      	subs	r3, r2, r4
 801223c:	3b15      	subs	r3, #21
 801223e:	f023 0303 	bic.w	r3, r3, #3
 8012242:	3304      	adds	r3, #4
 8012244:	f104 0715 	add.w	r7, r4, #21
 8012248:	42ba      	cmp	r2, r7
 801224a:	bf38      	it	cc
 801224c:	2304      	movcc	r3, #4
 801224e:	9301      	str	r3, [sp, #4]
 8012250:	9b02      	ldr	r3, [sp, #8]
 8012252:	9103      	str	r1, [sp, #12]
 8012254:	428b      	cmp	r3, r1
 8012256:	d80c      	bhi.n	8012272 <__multiply+0x9e>
 8012258:	2e00      	cmp	r6, #0
 801225a:	dd03      	ble.n	8012264 <__multiply+0x90>
 801225c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012260:	2b00      	cmp	r3, #0
 8012262:	d05b      	beq.n	801231c <__multiply+0x148>
 8012264:	6106      	str	r6, [r0, #16]
 8012266:	b005      	add	sp, #20
 8012268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801226c:	f843 2b04 	str.w	r2, [r3], #4
 8012270:	e7d8      	b.n	8012224 <__multiply+0x50>
 8012272:	f8b1 a000 	ldrh.w	sl, [r1]
 8012276:	f1ba 0f00 	cmp.w	sl, #0
 801227a:	d024      	beq.n	80122c6 <__multiply+0xf2>
 801227c:	f104 0e14 	add.w	lr, r4, #20
 8012280:	46a9      	mov	r9, r5
 8012282:	f04f 0c00 	mov.w	ip, #0
 8012286:	f85e 7b04 	ldr.w	r7, [lr], #4
 801228a:	f8d9 3000 	ldr.w	r3, [r9]
 801228e:	fa1f fb87 	uxth.w	fp, r7
 8012292:	b29b      	uxth	r3, r3
 8012294:	fb0a 330b 	mla	r3, sl, fp, r3
 8012298:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 801229c:	f8d9 7000 	ldr.w	r7, [r9]
 80122a0:	4463      	add	r3, ip
 80122a2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80122a6:	fb0a c70b 	mla	r7, sl, fp, ip
 80122aa:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80122ae:	b29b      	uxth	r3, r3
 80122b0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80122b4:	4572      	cmp	r2, lr
 80122b6:	f849 3b04 	str.w	r3, [r9], #4
 80122ba:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80122be:	d8e2      	bhi.n	8012286 <__multiply+0xb2>
 80122c0:	9b01      	ldr	r3, [sp, #4]
 80122c2:	f845 c003 	str.w	ip, [r5, r3]
 80122c6:	9b03      	ldr	r3, [sp, #12]
 80122c8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80122cc:	3104      	adds	r1, #4
 80122ce:	f1b9 0f00 	cmp.w	r9, #0
 80122d2:	d021      	beq.n	8012318 <__multiply+0x144>
 80122d4:	682b      	ldr	r3, [r5, #0]
 80122d6:	f104 0c14 	add.w	ip, r4, #20
 80122da:	46ae      	mov	lr, r5
 80122dc:	f04f 0a00 	mov.w	sl, #0
 80122e0:	f8bc b000 	ldrh.w	fp, [ip]
 80122e4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80122e8:	fb09 770b 	mla	r7, r9, fp, r7
 80122ec:	4457      	add	r7, sl
 80122ee:	b29b      	uxth	r3, r3
 80122f0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80122f4:	f84e 3b04 	str.w	r3, [lr], #4
 80122f8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80122fc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012300:	f8be 3000 	ldrh.w	r3, [lr]
 8012304:	fb09 330a 	mla	r3, r9, sl, r3
 8012308:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801230c:	4562      	cmp	r2, ip
 801230e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012312:	d8e5      	bhi.n	80122e0 <__multiply+0x10c>
 8012314:	9f01      	ldr	r7, [sp, #4]
 8012316:	51eb      	str	r3, [r5, r7]
 8012318:	3504      	adds	r5, #4
 801231a:	e799      	b.n	8012250 <__multiply+0x7c>
 801231c:	3e01      	subs	r6, #1
 801231e:	e79b      	b.n	8012258 <__multiply+0x84>
 8012320:	0801402c 	.word	0x0801402c
 8012324:	0801404e 	.word	0x0801404e

08012328 <__pow5mult>:
 8012328:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801232c:	4615      	mov	r5, r2
 801232e:	f012 0203 	ands.w	r2, r2, #3
 8012332:	4607      	mov	r7, r0
 8012334:	460e      	mov	r6, r1
 8012336:	d007      	beq.n	8012348 <__pow5mult+0x20>
 8012338:	4c25      	ldr	r4, [pc, #148]	@ (80123d0 <__pow5mult+0xa8>)
 801233a:	3a01      	subs	r2, #1
 801233c:	2300      	movs	r3, #0
 801233e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012342:	f7ff fe9f 	bl	8012084 <__multadd>
 8012346:	4606      	mov	r6, r0
 8012348:	10ad      	asrs	r5, r5, #2
 801234a:	d03d      	beq.n	80123c8 <__pow5mult+0xa0>
 801234c:	69fc      	ldr	r4, [r7, #28]
 801234e:	b97c      	cbnz	r4, 8012370 <__pow5mult+0x48>
 8012350:	2010      	movs	r0, #16
 8012352:	f7ff fcd3 	bl	8011cfc <malloc>
 8012356:	4602      	mov	r2, r0
 8012358:	61f8      	str	r0, [r7, #28]
 801235a:	b928      	cbnz	r0, 8012368 <__pow5mult+0x40>
 801235c:	4b1d      	ldr	r3, [pc, #116]	@ (80123d4 <__pow5mult+0xac>)
 801235e:	481e      	ldr	r0, [pc, #120]	@ (80123d8 <__pow5mult+0xb0>)
 8012360:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8012364:	f000 fa90 	bl	8012888 <__assert_func>
 8012368:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801236c:	6004      	str	r4, [r0, #0]
 801236e:	60c4      	str	r4, [r0, #12]
 8012370:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8012374:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012378:	b94c      	cbnz	r4, 801238e <__pow5mult+0x66>
 801237a:	f240 2171 	movw	r1, #625	@ 0x271
 801237e:	4638      	mov	r0, r7
 8012380:	f7ff ff12 	bl	80121a8 <__i2b>
 8012384:	2300      	movs	r3, #0
 8012386:	f8c8 0008 	str.w	r0, [r8, #8]
 801238a:	4604      	mov	r4, r0
 801238c:	6003      	str	r3, [r0, #0]
 801238e:	f04f 0900 	mov.w	r9, #0
 8012392:	07eb      	lsls	r3, r5, #31
 8012394:	d50a      	bpl.n	80123ac <__pow5mult+0x84>
 8012396:	4631      	mov	r1, r6
 8012398:	4622      	mov	r2, r4
 801239a:	4638      	mov	r0, r7
 801239c:	f7ff ff1a 	bl	80121d4 <__multiply>
 80123a0:	4631      	mov	r1, r6
 80123a2:	4680      	mov	r8, r0
 80123a4:	4638      	mov	r0, r7
 80123a6:	f7ff fe4b 	bl	8012040 <_Bfree>
 80123aa:	4646      	mov	r6, r8
 80123ac:	106d      	asrs	r5, r5, #1
 80123ae:	d00b      	beq.n	80123c8 <__pow5mult+0xa0>
 80123b0:	6820      	ldr	r0, [r4, #0]
 80123b2:	b938      	cbnz	r0, 80123c4 <__pow5mult+0x9c>
 80123b4:	4622      	mov	r2, r4
 80123b6:	4621      	mov	r1, r4
 80123b8:	4638      	mov	r0, r7
 80123ba:	f7ff ff0b 	bl	80121d4 <__multiply>
 80123be:	6020      	str	r0, [r4, #0]
 80123c0:	f8c0 9000 	str.w	r9, [r0]
 80123c4:	4604      	mov	r4, r0
 80123c6:	e7e4      	b.n	8012392 <__pow5mult+0x6a>
 80123c8:	4630      	mov	r0, r6
 80123ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80123ce:	bf00      	nop
 80123d0:	080140a8 	.word	0x080140a8
 80123d4:	08013fbd 	.word	0x08013fbd
 80123d8:	0801404e 	.word	0x0801404e

080123dc <__lshift>:
 80123dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80123e0:	460c      	mov	r4, r1
 80123e2:	6849      	ldr	r1, [r1, #4]
 80123e4:	6923      	ldr	r3, [r4, #16]
 80123e6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80123ea:	68a3      	ldr	r3, [r4, #8]
 80123ec:	4607      	mov	r7, r0
 80123ee:	4691      	mov	r9, r2
 80123f0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80123f4:	f108 0601 	add.w	r6, r8, #1
 80123f8:	42b3      	cmp	r3, r6
 80123fa:	db0b      	blt.n	8012414 <__lshift+0x38>
 80123fc:	4638      	mov	r0, r7
 80123fe:	f7ff fddf 	bl	8011fc0 <_Balloc>
 8012402:	4605      	mov	r5, r0
 8012404:	b948      	cbnz	r0, 801241a <__lshift+0x3e>
 8012406:	4602      	mov	r2, r0
 8012408:	4b28      	ldr	r3, [pc, #160]	@ (80124ac <__lshift+0xd0>)
 801240a:	4829      	ldr	r0, [pc, #164]	@ (80124b0 <__lshift+0xd4>)
 801240c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8012410:	f000 fa3a 	bl	8012888 <__assert_func>
 8012414:	3101      	adds	r1, #1
 8012416:	005b      	lsls	r3, r3, #1
 8012418:	e7ee      	b.n	80123f8 <__lshift+0x1c>
 801241a:	2300      	movs	r3, #0
 801241c:	f100 0114 	add.w	r1, r0, #20
 8012420:	f100 0210 	add.w	r2, r0, #16
 8012424:	4618      	mov	r0, r3
 8012426:	4553      	cmp	r3, sl
 8012428:	db33      	blt.n	8012492 <__lshift+0xb6>
 801242a:	6920      	ldr	r0, [r4, #16]
 801242c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012430:	f104 0314 	add.w	r3, r4, #20
 8012434:	f019 091f 	ands.w	r9, r9, #31
 8012438:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801243c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8012440:	d02b      	beq.n	801249a <__lshift+0xbe>
 8012442:	f1c9 0e20 	rsb	lr, r9, #32
 8012446:	468a      	mov	sl, r1
 8012448:	2200      	movs	r2, #0
 801244a:	6818      	ldr	r0, [r3, #0]
 801244c:	fa00 f009 	lsl.w	r0, r0, r9
 8012450:	4310      	orrs	r0, r2
 8012452:	f84a 0b04 	str.w	r0, [sl], #4
 8012456:	f853 2b04 	ldr.w	r2, [r3], #4
 801245a:	459c      	cmp	ip, r3
 801245c:	fa22 f20e 	lsr.w	r2, r2, lr
 8012460:	d8f3      	bhi.n	801244a <__lshift+0x6e>
 8012462:	ebac 0304 	sub.w	r3, ip, r4
 8012466:	3b15      	subs	r3, #21
 8012468:	f023 0303 	bic.w	r3, r3, #3
 801246c:	3304      	adds	r3, #4
 801246e:	f104 0015 	add.w	r0, r4, #21
 8012472:	4584      	cmp	ip, r0
 8012474:	bf38      	it	cc
 8012476:	2304      	movcc	r3, #4
 8012478:	50ca      	str	r2, [r1, r3]
 801247a:	b10a      	cbz	r2, 8012480 <__lshift+0xa4>
 801247c:	f108 0602 	add.w	r6, r8, #2
 8012480:	3e01      	subs	r6, #1
 8012482:	4638      	mov	r0, r7
 8012484:	612e      	str	r6, [r5, #16]
 8012486:	4621      	mov	r1, r4
 8012488:	f7ff fdda 	bl	8012040 <_Bfree>
 801248c:	4628      	mov	r0, r5
 801248e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012492:	f842 0f04 	str.w	r0, [r2, #4]!
 8012496:	3301      	adds	r3, #1
 8012498:	e7c5      	b.n	8012426 <__lshift+0x4a>
 801249a:	3904      	subs	r1, #4
 801249c:	f853 2b04 	ldr.w	r2, [r3], #4
 80124a0:	f841 2f04 	str.w	r2, [r1, #4]!
 80124a4:	459c      	cmp	ip, r3
 80124a6:	d8f9      	bhi.n	801249c <__lshift+0xc0>
 80124a8:	e7ea      	b.n	8012480 <__lshift+0xa4>
 80124aa:	bf00      	nop
 80124ac:	0801402c 	.word	0x0801402c
 80124b0:	0801404e 	.word	0x0801404e

080124b4 <__mcmp>:
 80124b4:	690a      	ldr	r2, [r1, #16]
 80124b6:	4603      	mov	r3, r0
 80124b8:	6900      	ldr	r0, [r0, #16]
 80124ba:	1a80      	subs	r0, r0, r2
 80124bc:	b530      	push	{r4, r5, lr}
 80124be:	d10e      	bne.n	80124de <__mcmp+0x2a>
 80124c0:	3314      	adds	r3, #20
 80124c2:	3114      	adds	r1, #20
 80124c4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80124c8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80124cc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80124d0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80124d4:	4295      	cmp	r5, r2
 80124d6:	d003      	beq.n	80124e0 <__mcmp+0x2c>
 80124d8:	d205      	bcs.n	80124e6 <__mcmp+0x32>
 80124da:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80124de:	bd30      	pop	{r4, r5, pc}
 80124e0:	42a3      	cmp	r3, r4
 80124e2:	d3f3      	bcc.n	80124cc <__mcmp+0x18>
 80124e4:	e7fb      	b.n	80124de <__mcmp+0x2a>
 80124e6:	2001      	movs	r0, #1
 80124e8:	e7f9      	b.n	80124de <__mcmp+0x2a>
	...

080124ec <__mdiff>:
 80124ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124f0:	4689      	mov	r9, r1
 80124f2:	4606      	mov	r6, r0
 80124f4:	4611      	mov	r1, r2
 80124f6:	4648      	mov	r0, r9
 80124f8:	4614      	mov	r4, r2
 80124fa:	f7ff ffdb 	bl	80124b4 <__mcmp>
 80124fe:	1e05      	subs	r5, r0, #0
 8012500:	d112      	bne.n	8012528 <__mdiff+0x3c>
 8012502:	4629      	mov	r1, r5
 8012504:	4630      	mov	r0, r6
 8012506:	f7ff fd5b 	bl	8011fc0 <_Balloc>
 801250a:	4602      	mov	r2, r0
 801250c:	b928      	cbnz	r0, 801251a <__mdiff+0x2e>
 801250e:	4b3f      	ldr	r3, [pc, #252]	@ (801260c <__mdiff+0x120>)
 8012510:	f240 2137 	movw	r1, #567	@ 0x237
 8012514:	483e      	ldr	r0, [pc, #248]	@ (8012610 <__mdiff+0x124>)
 8012516:	f000 f9b7 	bl	8012888 <__assert_func>
 801251a:	2301      	movs	r3, #1
 801251c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012520:	4610      	mov	r0, r2
 8012522:	b003      	add	sp, #12
 8012524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012528:	bfbc      	itt	lt
 801252a:	464b      	movlt	r3, r9
 801252c:	46a1      	movlt	r9, r4
 801252e:	4630      	mov	r0, r6
 8012530:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8012534:	bfba      	itte	lt
 8012536:	461c      	movlt	r4, r3
 8012538:	2501      	movlt	r5, #1
 801253a:	2500      	movge	r5, #0
 801253c:	f7ff fd40 	bl	8011fc0 <_Balloc>
 8012540:	4602      	mov	r2, r0
 8012542:	b918      	cbnz	r0, 801254c <__mdiff+0x60>
 8012544:	4b31      	ldr	r3, [pc, #196]	@ (801260c <__mdiff+0x120>)
 8012546:	f240 2145 	movw	r1, #581	@ 0x245
 801254a:	e7e3      	b.n	8012514 <__mdiff+0x28>
 801254c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8012550:	6926      	ldr	r6, [r4, #16]
 8012552:	60c5      	str	r5, [r0, #12]
 8012554:	f109 0310 	add.w	r3, r9, #16
 8012558:	f109 0514 	add.w	r5, r9, #20
 801255c:	f104 0e14 	add.w	lr, r4, #20
 8012560:	f100 0b14 	add.w	fp, r0, #20
 8012564:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8012568:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801256c:	9301      	str	r3, [sp, #4]
 801256e:	46d9      	mov	r9, fp
 8012570:	f04f 0c00 	mov.w	ip, #0
 8012574:	9b01      	ldr	r3, [sp, #4]
 8012576:	f85e 0b04 	ldr.w	r0, [lr], #4
 801257a:	f853 af04 	ldr.w	sl, [r3, #4]!
 801257e:	9301      	str	r3, [sp, #4]
 8012580:	fa1f f38a 	uxth.w	r3, sl
 8012584:	4619      	mov	r1, r3
 8012586:	b283      	uxth	r3, r0
 8012588:	1acb      	subs	r3, r1, r3
 801258a:	0c00      	lsrs	r0, r0, #16
 801258c:	4463      	add	r3, ip
 801258e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8012592:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8012596:	b29b      	uxth	r3, r3
 8012598:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801259c:	4576      	cmp	r6, lr
 801259e:	f849 3b04 	str.w	r3, [r9], #4
 80125a2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80125a6:	d8e5      	bhi.n	8012574 <__mdiff+0x88>
 80125a8:	1b33      	subs	r3, r6, r4
 80125aa:	3b15      	subs	r3, #21
 80125ac:	f023 0303 	bic.w	r3, r3, #3
 80125b0:	3415      	adds	r4, #21
 80125b2:	3304      	adds	r3, #4
 80125b4:	42a6      	cmp	r6, r4
 80125b6:	bf38      	it	cc
 80125b8:	2304      	movcc	r3, #4
 80125ba:	441d      	add	r5, r3
 80125bc:	445b      	add	r3, fp
 80125be:	461e      	mov	r6, r3
 80125c0:	462c      	mov	r4, r5
 80125c2:	4544      	cmp	r4, r8
 80125c4:	d30e      	bcc.n	80125e4 <__mdiff+0xf8>
 80125c6:	f108 0103 	add.w	r1, r8, #3
 80125ca:	1b49      	subs	r1, r1, r5
 80125cc:	f021 0103 	bic.w	r1, r1, #3
 80125d0:	3d03      	subs	r5, #3
 80125d2:	45a8      	cmp	r8, r5
 80125d4:	bf38      	it	cc
 80125d6:	2100      	movcc	r1, #0
 80125d8:	440b      	add	r3, r1
 80125da:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80125de:	b191      	cbz	r1, 8012606 <__mdiff+0x11a>
 80125e0:	6117      	str	r7, [r2, #16]
 80125e2:	e79d      	b.n	8012520 <__mdiff+0x34>
 80125e4:	f854 1b04 	ldr.w	r1, [r4], #4
 80125e8:	46e6      	mov	lr, ip
 80125ea:	0c08      	lsrs	r0, r1, #16
 80125ec:	fa1c fc81 	uxtah	ip, ip, r1
 80125f0:	4471      	add	r1, lr
 80125f2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80125f6:	b289      	uxth	r1, r1
 80125f8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80125fc:	f846 1b04 	str.w	r1, [r6], #4
 8012600:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8012604:	e7dd      	b.n	80125c2 <__mdiff+0xd6>
 8012606:	3f01      	subs	r7, #1
 8012608:	e7e7      	b.n	80125da <__mdiff+0xee>
 801260a:	bf00      	nop
 801260c:	0801402c 	.word	0x0801402c
 8012610:	0801404e 	.word	0x0801404e

08012614 <__d2b>:
 8012614:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012618:	460f      	mov	r7, r1
 801261a:	2101      	movs	r1, #1
 801261c:	ec59 8b10 	vmov	r8, r9, d0
 8012620:	4616      	mov	r6, r2
 8012622:	f7ff fccd 	bl	8011fc0 <_Balloc>
 8012626:	4604      	mov	r4, r0
 8012628:	b930      	cbnz	r0, 8012638 <__d2b+0x24>
 801262a:	4602      	mov	r2, r0
 801262c:	4b23      	ldr	r3, [pc, #140]	@ (80126bc <__d2b+0xa8>)
 801262e:	4824      	ldr	r0, [pc, #144]	@ (80126c0 <__d2b+0xac>)
 8012630:	f240 310f 	movw	r1, #783	@ 0x30f
 8012634:	f000 f928 	bl	8012888 <__assert_func>
 8012638:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801263c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012640:	b10d      	cbz	r5, 8012646 <__d2b+0x32>
 8012642:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8012646:	9301      	str	r3, [sp, #4]
 8012648:	f1b8 0300 	subs.w	r3, r8, #0
 801264c:	d023      	beq.n	8012696 <__d2b+0x82>
 801264e:	4668      	mov	r0, sp
 8012650:	9300      	str	r3, [sp, #0]
 8012652:	f7ff fd7c 	bl	801214e <__lo0bits>
 8012656:	e9dd 1200 	ldrd	r1, r2, [sp]
 801265a:	b1d0      	cbz	r0, 8012692 <__d2b+0x7e>
 801265c:	f1c0 0320 	rsb	r3, r0, #32
 8012660:	fa02 f303 	lsl.w	r3, r2, r3
 8012664:	430b      	orrs	r3, r1
 8012666:	40c2      	lsrs	r2, r0
 8012668:	6163      	str	r3, [r4, #20]
 801266a:	9201      	str	r2, [sp, #4]
 801266c:	9b01      	ldr	r3, [sp, #4]
 801266e:	61a3      	str	r3, [r4, #24]
 8012670:	2b00      	cmp	r3, #0
 8012672:	bf0c      	ite	eq
 8012674:	2201      	moveq	r2, #1
 8012676:	2202      	movne	r2, #2
 8012678:	6122      	str	r2, [r4, #16]
 801267a:	b1a5      	cbz	r5, 80126a6 <__d2b+0x92>
 801267c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8012680:	4405      	add	r5, r0
 8012682:	603d      	str	r5, [r7, #0]
 8012684:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8012688:	6030      	str	r0, [r6, #0]
 801268a:	4620      	mov	r0, r4
 801268c:	b003      	add	sp, #12
 801268e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012692:	6161      	str	r1, [r4, #20]
 8012694:	e7ea      	b.n	801266c <__d2b+0x58>
 8012696:	a801      	add	r0, sp, #4
 8012698:	f7ff fd59 	bl	801214e <__lo0bits>
 801269c:	9b01      	ldr	r3, [sp, #4]
 801269e:	6163      	str	r3, [r4, #20]
 80126a0:	3020      	adds	r0, #32
 80126a2:	2201      	movs	r2, #1
 80126a4:	e7e8      	b.n	8012678 <__d2b+0x64>
 80126a6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80126aa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80126ae:	6038      	str	r0, [r7, #0]
 80126b0:	6918      	ldr	r0, [r3, #16]
 80126b2:	f7ff fd2d 	bl	8012110 <__hi0bits>
 80126b6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80126ba:	e7e5      	b.n	8012688 <__d2b+0x74>
 80126bc:	0801402c 	.word	0x0801402c
 80126c0:	0801404e 	.word	0x0801404e

080126c4 <__sread>:
 80126c4:	b510      	push	{r4, lr}
 80126c6:	460c      	mov	r4, r1
 80126c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80126cc:	f000 f8a8 	bl	8012820 <_read_r>
 80126d0:	2800      	cmp	r0, #0
 80126d2:	bfab      	itete	ge
 80126d4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80126d6:	89a3      	ldrhlt	r3, [r4, #12]
 80126d8:	181b      	addge	r3, r3, r0
 80126da:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80126de:	bfac      	ite	ge
 80126e0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80126e2:	81a3      	strhlt	r3, [r4, #12]
 80126e4:	bd10      	pop	{r4, pc}

080126e6 <__swrite>:
 80126e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80126ea:	461f      	mov	r7, r3
 80126ec:	898b      	ldrh	r3, [r1, #12]
 80126ee:	05db      	lsls	r3, r3, #23
 80126f0:	4605      	mov	r5, r0
 80126f2:	460c      	mov	r4, r1
 80126f4:	4616      	mov	r6, r2
 80126f6:	d505      	bpl.n	8012704 <__swrite+0x1e>
 80126f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80126fc:	2302      	movs	r3, #2
 80126fe:	2200      	movs	r2, #0
 8012700:	f000 f87c 	bl	80127fc <_lseek_r>
 8012704:	89a3      	ldrh	r3, [r4, #12]
 8012706:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801270a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801270e:	81a3      	strh	r3, [r4, #12]
 8012710:	4632      	mov	r2, r6
 8012712:	463b      	mov	r3, r7
 8012714:	4628      	mov	r0, r5
 8012716:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801271a:	f000 b8a3 	b.w	8012864 <_write_r>

0801271e <__sseek>:
 801271e:	b510      	push	{r4, lr}
 8012720:	460c      	mov	r4, r1
 8012722:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012726:	f000 f869 	bl	80127fc <_lseek_r>
 801272a:	1c43      	adds	r3, r0, #1
 801272c:	89a3      	ldrh	r3, [r4, #12]
 801272e:	bf15      	itete	ne
 8012730:	6560      	strne	r0, [r4, #84]	@ 0x54
 8012732:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8012736:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801273a:	81a3      	strheq	r3, [r4, #12]
 801273c:	bf18      	it	ne
 801273e:	81a3      	strhne	r3, [r4, #12]
 8012740:	bd10      	pop	{r4, pc}

08012742 <__sclose>:
 8012742:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012746:	f000 b849 	b.w	80127dc <_close_r>

0801274a <_realloc_r>:
 801274a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801274e:	4680      	mov	r8, r0
 8012750:	4615      	mov	r5, r2
 8012752:	460c      	mov	r4, r1
 8012754:	b921      	cbnz	r1, 8012760 <_realloc_r+0x16>
 8012756:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801275a:	4611      	mov	r1, r2
 801275c:	f7ff baf8 	b.w	8011d50 <_malloc_r>
 8012760:	b92a      	cbnz	r2, 801276e <_realloc_r+0x24>
 8012762:	f7ff f929 	bl	80119b8 <_free_r>
 8012766:	2400      	movs	r4, #0
 8012768:	4620      	mov	r0, r4
 801276a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801276e:	f000 f8cf 	bl	8012910 <_malloc_usable_size_r>
 8012772:	4285      	cmp	r5, r0
 8012774:	4606      	mov	r6, r0
 8012776:	d802      	bhi.n	801277e <_realloc_r+0x34>
 8012778:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801277c:	d8f4      	bhi.n	8012768 <_realloc_r+0x1e>
 801277e:	4629      	mov	r1, r5
 8012780:	4640      	mov	r0, r8
 8012782:	f7ff fae5 	bl	8011d50 <_malloc_r>
 8012786:	4607      	mov	r7, r0
 8012788:	2800      	cmp	r0, #0
 801278a:	d0ec      	beq.n	8012766 <_realloc_r+0x1c>
 801278c:	42b5      	cmp	r5, r6
 801278e:	462a      	mov	r2, r5
 8012790:	4621      	mov	r1, r4
 8012792:	bf28      	it	cs
 8012794:	4632      	movcs	r2, r6
 8012796:	f7fe fab4 	bl	8010d02 <memcpy>
 801279a:	4621      	mov	r1, r4
 801279c:	4640      	mov	r0, r8
 801279e:	f7ff f90b 	bl	80119b8 <_free_r>
 80127a2:	463c      	mov	r4, r7
 80127a4:	e7e0      	b.n	8012768 <_realloc_r+0x1e>

080127a6 <memmove>:
 80127a6:	4288      	cmp	r0, r1
 80127a8:	b510      	push	{r4, lr}
 80127aa:	eb01 0402 	add.w	r4, r1, r2
 80127ae:	d902      	bls.n	80127b6 <memmove+0x10>
 80127b0:	4284      	cmp	r4, r0
 80127b2:	4623      	mov	r3, r4
 80127b4:	d807      	bhi.n	80127c6 <memmove+0x20>
 80127b6:	1e43      	subs	r3, r0, #1
 80127b8:	42a1      	cmp	r1, r4
 80127ba:	d008      	beq.n	80127ce <memmove+0x28>
 80127bc:	f811 2b01 	ldrb.w	r2, [r1], #1
 80127c0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80127c4:	e7f8      	b.n	80127b8 <memmove+0x12>
 80127c6:	4402      	add	r2, r0
 80127c8:	4601      	mov	r1, r0
 80127ca:	428a      	cmp	r2, r1
 80127cc:	d100      	bne.n	80127d0 <memmove+0x2a>
 80127ce:	bd10      	pop	{r4, pc}
 80127d0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80127d4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80127d8:	e7f7      	b.n	80127ca <memmove+0x24>
	...

080127dc <_close_r>:
 80127dc:	b538      	push	{r3, r4, r5, lr}
 80127de:	4d06      	ldr	r5, [pc, #24]	@ (80127f8 <_close_r+0x1c>)
 80127e0:	2300      	movs	r3, #0
 80127e2:	4604      	mov	r4, r0
 80127e4:	4608      	mov	r0, r1
 80127e6:	602b      	str	r3, [r5, #0]
 80127e8:	f7f0 ffea 	bl	80037c0 <_close>
 80127ec:	1c43      	adds	r3, r0, #1
 80127ee:	d102      	bne.n	80127f6 <_close_r+0x1a>
 80127f0:	682b      	ldr	r3, [r5, #0]
 80127f2:	b103      	cbz	r3, 80127f6 <_close_r+0x1a>
 80127f4:	6023      	str	r3, [r4, #0]
 80127f6:	bd38      	pop	{r3, r4, r5, pc}
 80127f8:	20012980 	.word	0x20012980

080127fc <_lseek_r>:
 80127fc:	b538      	push	{r3, r4, r5, lr}
 80127fe:	4d07      	ldr	r5, [pc, #28]	@ (801281c <_lseek_r+0x20>)
 8012800:	4604      	mov	r4, r0
 8012802:	4608      	mov	r0, r1
 8012804:	4611      	mov	r1, r2
 8012806:	2200      	movs	r2, #0
 8012808:	602a      	str	r2, [r5, #0]
 801280a:	461a      	mov	r2, r3
 801280c:	f7f0 ffff 	bl	800380e <_lseek>
 8012810:	1c43      	adds	r3, r0, #1
 8012812:	d102      	bne.n	801281a <_lseek_r+0x1e>
 8012814:	682b      	ldr	r3, [r5, #0]
 8012816:	b103      	cbz	r3, 801281a <_lseek_r+0x1e>
 8012818:	6023      	str	r3, [r4, #0]
 801281a:	bd38      	pop	{r3, r4, r5, pc}
 801281c:	20012980 	.word	0x20012980

08012820 <_read_r>:
 8012820:	b538      	push	{r3, r4, r5, lr}
 8012822:	4d07      	ldr	r5, [pc, #28]	@ (8012840 <_read_r+0x20>)
 8012824:	4604      	mov	r4, r0
 8012826:	4608      	mov	r0, r1
 8012828:	4611      	mov	r1, r2
 801282a:	2200      	movs	r2, #0
 801282c:	602a      	str	r2, [r5, #0]
 801282e:	461a      	mov	r2, r3
 8012830:	f7f0 ff8d 	bl	800374e <_read>
 8012834:	1c43      	adds	r3, r0, #1
 8012836:	d102      	bne.n	801283e <_read_r+0x1e>
 8012838:	682b      	ldr	r3, [r5, #0]
 801283a:	b103      	cbz	r3, 801283e <_read_r+0x1e>
 801283c:	6023      	str	r3, [r4, #0]
 801283e:	bd38      	pop	{r3, r4, r5, pc}
 8012840:	20012980 	.word	0x20012980

08012844 <_sbrk_r>:
 8012844:	b538      	push	{r3, r4, r5, lr}
 8012846:	4d06      	ldr	r5, [pc, #24]	@ (8012860 <_sbrk_r+0x1c>)
 8012848:	2300      	movs	r3, #0
 801284a:	4604      	mov	r4, r0
 801284c:	4608      	mov	r0, r1
 801284e:	602b      	str	r3, [r5, #0]
 8012850:	f7f0 ffea 	bl	8003828 <_sbrk>
 8012854:	1c43      	adds	r3, r0, #1
 8012856:	d102      	bne.n	801285e <_sbrk_r+0x1a>
 8012858:	682b      	ldr	r3, [r5, #0]
 801285a:	b103      	cbz	r3, 801285e <_sbrk_r+0x1a>
 801285c:	6023      	str	r3, [r4, #0]
 801285e:	bd38      	pop	{r3, r4, r5, pc}
 8012860:	20012980 	.word	0x20012980

08012864 <_write_r>:
 8012864:	b538      	push	{r3, r4, r5, lr}
 8012866:	4d07      	ldr	r5, [pc, #28]	@ (8012884 <_write_r+0x20>)
 8012868:	4604      	mov	r4, r0
 801286a:	4608      	mov	r0, r1
 801286c:	4611      	mov	r1, r2
 801286e:	2200      	movs	r2, #0
 8012870:	602a      	str	r2, [r5, #0]
 8012872:	461a      	mov	r2, r3
 8012874:	f7f0 ff88 	bl	8003788 <_write>
 8012878:	1c43      	adds	r3, r0, #1
 801287a:	d102      	bne.n	8012882 <_write_r+0x1e>
 801287c:	682b      	ldr	r3, [r5, #0]
 801287e:	b103      	cbz	r3, 8012882 <_write_r+0x1e>
 8012880:	6023      	str	r3, [r4, #0]
 8012882:	bd38      	pop	{r3, r4, r5, pc}
 8012884:	20012980 	.word	0x20012980

08012888 <__assert_func>:
 8012888:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801288a:	4614      	mov	r4, r2
 801288c:	461a      	mov	r2, r3
 801288e:	4b09      	ldr	r3, [pc, #36]	@ (80128b4 <__assert_func+0x2c>)
 8012890:	681b      	ldr	r3, [r3, #0]
 8012892:	4605      	mov	r5, r0
 8012894:	68d8      	ldr	r0, [r3, #12]
 8012896:	b954      	cbnz	r4, 80128ae <__assert_func+0x26>
 8012898:	4b07      	ldr	r3, [pc, #28]	@ (80128b8 <__assert_func+0x30>)
 801289a:	461c      	mov	r4, r3
 801289c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80128a0:	9100      	str	r1, [sp, #0]
 80128a2:	462b      	mov	r3, r5
 80128a4:	4905      	ldr	r1, [pc, #20]	@ (80128bc <__assert_func+0x34>)
 80128a6:	f000 f83b 	bl	8012920 <fiprintf>
 80128aa:	f000 f858 	bl	801295e <abort>
 80128ae:	4b04      	ldr	r3, [pc, #16]	@ (80128c0 <__assert_func+0x38>)
 80128b0:	e7f4      	b.n	801289c <__assert_func+0x14>
 80128b2:	bf00      	nop
 80128b4:	200001b4 	.word	0x200001b4
 80128b8:	080142ee 	.word	0x080142ee
 80128bc:	080142c0 	.word	0x080142c0
 80128c0:	080142b3 	.word	0x080142b3

080128c4 <_calloc_r>:
 80128c4:	b570      	push	{r4, r5, r6, lr}
 80128c6:	fba1 5402 	umull	r5, r4, r1, r2
 80128ca:	b93c      	cbnz	r4, 80128dc <_calloc_r+0x18>
 80128cc:	4629      	mov	r1, r5
 80128ce:	f7ff fa3f 	bl	8011d50 <_malloc_r>
 80128d2:	4606      	mov	r6, r0
 80128d4:	b928      	cbnz	r0, 80128e2 <_calloc_r+0x1e>
 80128d6:	2600      	movs	r6, #0
 80128d8:	4630      	mov	r0, r6
 80128da:	bd70      	pop	{r4, r5, r6, pc}
 80128dc:	220c      	movs	r2, #12
 80128de:	6002      	str	r2, [r0, #0]
 80128e0:	e7f9      	b.n	80128d6 <_calloc_r+0x12>
 80128e2:	462a      	mov	r2, r5
 80128e4:	4621      	mov	r1, r4
 80128e6:	f7fe f97d 	bl	8010be4 <memset>
 80128ea:	e7f5      	b.n	80128d8 <_calloc_r+0x14>

080128ec <__ascii_mbtowc>:
 80128ec:	b082      	sub	sp, #8
 80128ee:	b901      	cbnz	r1, 80128f2 <__ascii_mbtowc+0x6>
 80128f0:	a901      	add	r1, sp, #4
 80128f2:	b142      	cbz	r2, 8012906 <__ascii_mbtowc+0x1a>
 80128f4:	b14b      	cbz	r3, 801290a <__ascii_mbtowc+0x1e>
 80128f6:	7813      	ldrb	r3, [r2, #0]
 80128f8:	600b      	str	r3, [r1, #0]
 80128fa:	7812      	ldrb	r2, [r2, #0]
 80128fc:	1e10      	subs	r0, r2, #0
 80128fe:	bf18      	it	ne
 8012900:	2001      	movne	r0, #1
 8012902:	b002      	add	sp, #8
 8012904:	4770      	bx	lr
 8012906:	4610      	mov	r0, r2
 8012908:	e7fb      	b.n	8012902 <__ascii_mbtowc+0x16>
 801290a:	f06f 0001 	mvn.w	r0, #1
 801290e:	e7f8      	b.n	8012902 <__ascii_mbtowc+0x16>

08012910 <_malloc_usable_size_r>:
 8012910:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012914:	1f18      	subs	r0, r3, #4
 8012916:	2b00      	cmp	r3, #0
 8012918:	bfbc      	itt	lt
 801291a:	580b      	ldrlt	r3, [r1, r0]
 801291c:	18c0      	addlt	r0, r0, r3
 801291e:	4770      	bx	lr

08012920 <fiprintf>:
 8012920:	b40e      	push	{r1, r2, r3}
 8012922:	b503      	push	{r0, r1, lr}
 8012924:	4601      	mov	r1, r0
 8012926:	ab03      	add	r3, sp, #12
 8012928:	4805      	ldr	r0, [pc, #20]	@ (8012940 <fiprintf+0x20>)
 801292a:	f853 2b04 	ldr.w	r2, [r3], #4
 801292e:	6800      	ldr	r0, [r0, #0]
 8012930:	9301      	str	r3, [sp, #4]
 8012932:	f000 f845 	bl	80129c0 <_vfiprintf_r>
 8012936:	b002      	add	sp, #8
 8012938:	f85d eb04 	ldr.w	lr, [sp], #4
 801293c:	b003      	add	sp, #12
 801293e:	4770      	bx	lr
 8012940:	200001b4 	.word	0x200001b4

08012944 <__ascii_wctomb>:
 8012944:	4603      	mov	r3, r0
 8012946:	4608      	mov	r0, r1
 8012948:	b141      	cbz	r1, 801295c <__ascii_wctomb+0x18>
 801294a:	2aff      	cmp	r2, #255	@ 0xff
 801294c:	d904      	bls.n	8012958 <__ascii_wctomb+0x14>
 801294e:	228a      	movs	r2, #138	@ 0x8a
 8012950:	601a      	str	r2, [r3, #0]
 8012952:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012956:	4770      	bx	lr
 8012958:	700a      	strb	r2, [r1, #0]
 801295a:	2001      	movs	r0, #1
 801295c:	4770      	bx	lr

0801295e <abort>:
 801295e:	b508      	push	{r3, lr}
 8012960:	2006      	movs	r0, #6
 8012962:	f000 fa85 	bl	8012e70 <raise>
 8012966:	2001      	movs	r0, #1
 8012968:	f7f0 fee6 	bl	8003738 <_exit>

0801296c <__sfputc_r>:
 801296c:	6893      	ldr	r3, [r2, #8]
 801296e:	3b01      	subs	r3, #1
 8012970:	2b00      	cmp	r3, #0
 8012972:	b410      	push	{r4}
 8012974:	6093      	str	r3, [r2, #8]
 8012976:	da08      	bge.n	801298a <__sfputc_r+0x1e>
 8012978:	6994      	ldr	r4, [r2, #24]
 801297a:	42a3      	cmp	r3, r4
 801297c:	db01      	blt.n	8012982 <__sfputc_r+0x16>
 801297e:	290a      	cmp	r1, #10
 8012980:	d103      	bne.n	801298a <__sfputc_r+0x1e>
 8012982:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012986:	f000 b933 	b.w	8012bf0 <__swbuf_r>
 801298a:	6813      	ldr	r3, [r2, #0]
 801298c:	1c58      	adds	r0, r3, #1
 801298e:	6010      	str	r0, [r2, #0]
 8012990:	7019      	strb	r1, [r3, #0]
 8012992:	4608      	mov	r0, r1
 8012994:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012998:	4770      	bx	lr

0801299a <__sfputs_r>:
 801299a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801299c:	4606      	mov	r6, r0
 801299e:	460f      	mov	r7, r1
 80129a0:	4614      	mov	r4, r2
 80129a2:	18d5      	adds	r5, r2, r3
 80129a4:	42ac      	cmp	r4, r5
 80129a6:	d101      	bne.n	80129ac <__sfputs_r+0x12>
 80129a8:	2000      	movs	r0, #0
 80129aa:	e007      	b.n	80129bc <__sfputs_r+0x22>
 80129ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80129b0:	463a      	mov	r2, r7
 80129b2:	4630      	mov	r0, r6
 80129b4:	f7ff ffda 	bl	801296c <__sfputc_r>
 80129b8:	1c43      	adds	r3, r0, #1
 80129ba:	d1f3      	bne.n	80129a4 <__sfputs_r+0xa>
 80129bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080129c0 <_vfiprintf_r>:
 80129c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129c4:	460d      	mov	r5, r1
 80129c6:	b09d      	sub	sp, #116	@ 0x74
 80129c8:	4614      	mov	r4, r2
 80129ca:	4698      	mov	r8, r3
 80129cc:	4606      	mov	r6, r0
 80129ce:	b118      	cbz	r0, 80129d8 <_vfiprintf_r+0x18>
 80129d0:	6a03      	ldr	r3, [r0, #32]
 80129d2:	b90b      	cbnz	r3, 80129d8 <_vfiprintf_r+0x18>
 80129d4:	f7fe f896 	bl	8010b04 <__sinit>
 80129d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80129da:	07d9      	lsls	r1, r3, #31
 80129dc:	d405      	bmi.n	80129ea <_vfiprintf_r+0x2a>
 80129de:	89ab      	ldrh	r3, [r5, #12]
 80129e0:	059a      	lsls	r2, r3, #22
 80129e2:	d402      	bmi.n	80129ea <_vfiprintf_r+0x2a>
 80129e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80129e6:	f7fe f98a 	bl	8010cfe <__retarget_lock_acquire_recursive>
 80129ea:	89ab      	ldrh	r3, [r5, #12]
 80129ec:	071b      	lsls	r3, r3, #28
 80129ee:	d501      	bpl.n	80129f4 <_vfiprintf_r+0x34>
 80129f0:	692b      	ldr	r3, [r5, #16]
 80129f2:	b99b      	cbnz	r3, 8012a1c <_vfiprintf_r+0x5c>
 80129f4:	4629      	mov	r1, r5
 80129f6:	4630      	mov	r0, r6
 80129f8:	f000 f938 	bl	8012c6c <__swsetup_r>
 80129fc:	b170      	cbz	r0, 8012a1c <_vfiprintf_r+0x5c>
 80129fe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012a00:	07dc      	lsls	r4, r3, #31
 8012a02:	d504      	bpl.n	8012a0e <_vfiprintf_r+0x4e>
 8012a04:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012a08:	b01d      	add	sp, #116	@ 0x74
 8012a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a0e:	89ab      	ldrh	r3, [r5, #12]
 8012a10:	0598      	lsls	r0, r3, #22
 8012a12:	d4f7      	bmi.n	8012a04 <_vfiprintf_r+0x44>
 8012a14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012a16:	f7fe f973 	bl	8010d00 <__retarget_lock_release_recursive>
 8012a1a:	e7f3      	b.n	8012a04 <_vfiprintf_r+0x44>
 8012a1c:	2300      	movs	r3, #0
 8012a1e:	9309      	str	r3, [sp, #36]	@ 0x24
 8012a20:	2320      	movs	r3, #32
 8012a22:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012a26:	f8cd 800c 	str.w	r8, [sp, #12]
 8012a2a:	2330      	movs	r3, #48	@ 0x30
 8012a2c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8012bdc <_vfiprintf_r+0x21c>
 8012a30:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012a34:	f04f 0901 	mov.w	r9, #1
 8012a38:	4623      	mov	r3, r4
 8012a3a:	469a      	mov	sl, r3
 8012a3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012a40:	b10a      	cbz	r2, 8012a46 <_vfiprintf_r+0x86>
 8012a42:	2a25      	cmp	r2, #37	@ 0x25
 8012a44:	d1f9      	bne.n	8012a3a <_vfiprintf_r+0x7a>
 8012a46:	ebba 0b04 	subs.w	fp, sl, r4
 8012a4a:	d00b      	beq.n	8012a64 <_vfiprintf_r+0xa4>
 8012a4c:	465b      	mov	r3, fp
 8012a4e:	4622      	mov	r2, r4
 8012a50:	4629      	mov	r1, r5
 8012a52:	4630      	mov	r0, r6
 8012a54:	f7ff ffa1 	bl	801299a <__sfputs_r>
 8012a58:	3001      	adds	r0, #1
 8012a5a:	f000 80a7 	beq.w	8012bac <_vfiprintf_r+0x1ec>
 8012a5e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012a60:	445a      	add	r2, fp
 8012a62:	9209      	str	r2, [sp, #36]	@ 0x24
 8012a64:	f89a 3000 	ldrb.w	r3, [sl]
 8012a68:	2b00      	cmp	r3, #0
 8012a6a:	f000 809f 	beq.w	8012bac <_vfiprintf_r+0x1ec>
 8012a6e:	2300      	movs	r3, #0
 8012a70:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8012a74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012a78:	f10a 0a01 	add.w	sl, sl, #1
 8012a7c:	9304      	str	r3, [sp, #16]
 8012a7e:	9307      	str	r3, [sp, #28]
 8012a80:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012a84:	931a      	str	r3, [sp, #104]	@ 0x68
 8012a86:	4654      	mov	r4, sl
 8012a88:	2205      	movs	r2, #5
 8012a8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012a8e:	4853      	ldr	r0, [pc, #332]	@ (8012bdc <_vfiprintf_r+0x21c>)
 8012a90:	f7ed fbc6 	bl	8000220 <memchr>
 8012a94:	9a04      	ldr	r2, [sp, #16]
 8012a96:	b9d8      	cbnz	r0, 8012ad0 <_vfiprintf_r+0x110>
 8012a98:	06d1      	lsls	r1, r2, #27
 8012a9a:	bf44      	itt	mi
 8012a9c:	2320      	movmi	r3, #32
 8012a9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012aa2:	0713      	lsls	r3, r2, #28
 8012aa4:	bf44      	itt	mi
 8012aa6:	232b      	movmi	r3, #43	@ 0x2b
 8012aa8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012aac:	f89a 3000 	ldrb.w	r3, [sl]
 8012ab0:	2b2a      	cmp	r3, #42	@ 0x2a
 8012ab2:	d015      	beq.n	8012ae0 <_vfiprintf_r+0x120>
 8012ab4:	9a07      	ldr	r2, [sp, #28]
 8012ab6:	4654      	mov	r4, sl
 8012ab8:	2000      	movs	r0, #0
 8012aba:	f04f 0c0a 	mov.w	ip, #10
 8012abe:	4621      	mov	r1, r4
 8012ac0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012ac4:	3b30      	subs	r3, #48	@ 0x30
 8012ac6:	2b09      	cmp	r3, #9
 8012ac8:	d94b      	bls.n	8012b62 <_vfiprintf_r+0x1a2>
 8012aca:	b1b0      	cbz	r0, 8012afa <_vfiprintf_r+0x13a>
 8012acc:	9207      	str	r2, [sp, #28]
 8012ace:	e014      	b.n	8012afa <_vfiprintf_r+0x13a>
 8012ad0:	eba0 0308 	sub.w	r3, r0, r8
 8012ad4:	fa09 f303 	lsl.w	r3, r9, r3
 8012ad8:	4313      	orrs	r3, r2
 8012ada:	9304      	str	r3, [sp, #16]
 8012adc:	46a2      	mov	sl, r4
 8012ade:	e7d2      	b.n	8012a86 <_vfiprintf_r+0xc6>
 8012ae0:	9b03      	ldr	r3, [sp, #12]
 8012ae2:	1d19      	adds	r1, r3, #4
 8012ae4:	681b      	ldr	r3, [r3, #0]
 8012ae6:	9103      	str	r1, [sp, #12]
 8012ae8:	2b00      	cmp	r3, #0
 8012aea:	bfbb      	ittet	lt
 8012aec:	425b      	neglt	r3, r3
 8012aee:	f042 0202 	orrlt.w	r2, r2, #2
 8012af2:	9307      	strge	r3, [sp, #28]
 8012af4:	9307      	strlt	r3, [sp, #28]
 8012af6:	bfb8      	it	lt
 8012af8:	9204      	strlt	r2, [sp, #16]
 8012afa:	7823      	ldrb	r3, [r4, #0]
 8012afc:	2b2e      	cmp	r3, #46	@ 0x2e
 8012afe:	d10a      	bne.n	8012b16 <_vfiprintf_r+0x156>
 8012b00:	7863      	ldrb	r3, [r4, #1]
 8012b02:	2b2a      	cmp	r3, #42	@ 0x2a
 8012b04:	d132      	bne.n	8012b6c <_vfiprintf_r+0x1ac>
 8012b06:	9b03      	ldr	r3, [sp, #12]
 8012b08:	1d1a      	adds	r2, r3, #4
 8012b0a:	681b      	ldr	r3, [r3, #0]
 8012b0c:	9203      	str	r2, [sp, #12]
 8012b0e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012b12:	3402      	adds	r4, #2
 8012b14:	9305      	str	r3, [sp, #20]
 8012b16:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8012bec <_vfiprintf_r+0x22c>
 8012b1a:	7821      	ldrb	r1, [r4, #0]
 8012b1c:	2203      	movs	r2, #3
 8012b1e:	4650      	mov	r0, sl
 8012b20:	f7ed fb7e 	bl	8000220 <memchr>
 8012b24:	b138      	cbz	r0, 8012b36 <_vfiprintf_r+0x176>
 8012b26:	9b04      	ldr	r3, [sp, #16]
 8012b28:	eba0 000a 	sub.w	r0, r0, sl
 8012b2c:	2240      	movs	r2, #64	@ 0x40
 8012b2e:	4082      	lsls	r2, r0
 8012b30:	4313      	orrs	r3, r2
 8012b32:	3401      	adds	r4, #1
 8012b34:	9304      	str	r3, [sp, #16]
 8012b36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012b3a:	4829      	ldr	r0, [pc, #164]	@ (8012be0 <_vfiprintf_r+0x220>)
 8012b3c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012b40:	2206      	movs	r2, #6
 8012b42:	f7ed fb6d 	bl	8000220 <memchr>
 8012b46:	2800      	cmp	r0, #0
 8012b48:	d03f      	beq.n	8012bca <_vfiprintf_r+0x20a>
 8012b4a:	4b26      	ldr	r3, [pc, #152]	@ (8012be4 <_vfiprintf_r+0x224>)
 8012b4c:	bb1b      	cbnz	r3, 8012b96 <_vfiprintf_r+0x1d6>
 8012b4e:	9b03      	ldr	r3, [sp, #12]
 8012b50:	3307      	adds	r3, #7
 8012b52:	f023 0307 	bic.w	r3, r3, #7
 8012b56:	3308      	adds	r3, #8
 8012b58:	9303      	str	r3, [sp, #12]
 8012b5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012b5c:	443b      	add	r3, r7
 8012b5e:	9309      	str	r3, [sp, #36]	@ 0x24
 8012b60:	e76a      	b.n	8012a38 <_vfiprintf_r+0x78>
 8012b62:	fb0c 3202 	mla	r2, ip, r2, r3
 8012b66:	460c      	mov	r4, r1
 8012b68:	2001      	movs	r0, #1
 8012b6a:	e7a8      	b.n	8012abe <_vfiprintf_r+0xfe>
 8012b6c:	2300      	movs	r3, #0
 8012b6e:	3401      	adds	r4, #1
 8012b70:	9305      	str	r3, [sp, #20]
 8012b72:	4619      	mov	r1, r3
 8012b74:	f04f 0c0a 	mov.w	ip, #10
 8012b78:	4620      	mov	r0, r4
 8012b7a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012b7e:	3a30      	subs	r2, #48	@ 0x30
 8012b80:	2a09      	cmp	r2, #9
 8012b82:	d903      	bls.n	8012b8c <_vfiprintf_r+0x1cc>
 8012b84:	2b00      	cmp	r3, #0
 8012b86:	d0c6      	beq.n	8012b16 <_vfiprintf_r+0x156>
 8012b88:	9105      	str	r1, [sp, #20]
 8012b8a:	e7c4      	b.n	8012b16 <_vfiprintf_r+0x156>
 8012b8c:	fb0c 2101 	mla	r1, ip, r1, r2
 8012b90:	4604      	mov	r4, r0
 8012b92:	2301      	movs	r3, #1
 8012b94:	e7f0      	b.n	8012b78 <_vfiprintf_r+0x1b8>
 8012b96:	ab03      	add	r3, sp, #12
 8012b98:	9300      	str	r3, [sp, #0]
 8012b9a:	462a      	mov	r2, r5
 8012b9c:	4b12      	ldr	r3, [pc, #72]	@ (8012be8 <_vfiprintf_r+0x228>)
 8012b9e:	a904      	add	r1, sp, #16
 8012ba0:	4630      	mov	r0, r6
 8012ba2:	f7fd fb6b 	bl	801027c <_printf_float>
 8012ba6:	4607      	mov	r7, r0
 8012ba8:	1c78      	adds	r0, r7, #1
 8012baa:	d1d6      	bne.n	8012b5a <_vfiprintf_r+0x19a>
 8012bac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012bae:	07d9      	lsls	r1, r3, #31
 8012bb0:	d405      	bmi.n	8012bbe <_vfiprintf_r+0x1fe>
 8012bb2:	89ab      	ldrh	r3, [r5, #12]
 8012bb4:	059a      	lsls	r2, r3, #22
 8012bb6:	d402      	bmi.n	8012bbe <_vfiprintf_r+0x1fe>
 8012bb8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012bba:	f7fe f8a1 	bl	8010d00 <__retarget_lock_release_recursive>
 8012bbe:	89ab      	ldrh	r3, [r5, #12]
 8012bc0:	065b      	lsls	r3, r3, #25
 8012bc2:	f53f af1f 	bmi.w	8012a04 <_vfiprintf_r+0x44>
 8012bc6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012bc8:	e71e      	b.n	8012a08 <_vfiprintf_r+0x48>
 8012bca:	ab03      	add	r3, sp, #12
 8012bcc:	9300      	str	r3, [sp, #0]
 8012bce:	462a      	mov	r2, r5
 8012bd0:	4b05      	ldr	r3, [pc, #20]	@ (8012be8 <_vfiprintf_r+0x228>)
 8012bd2:	a904      	add	r1, sp, #16
 8012bd4:	4630      	mov	r0, r6
 8012bd6:	f7fd fde9 	bl	80107ac <_printf_i>
 8012bda:	e7e4      	b.n	8012ba6 <_vfiprintf_r+0x1e6>
 8012bdc:	0801403d 	.word	0x0801403d
 8012be0:	08014047 	.word	0x08014047
 8012be4:	0801027d 	.word	0x0801027d
 8012be8:	0801299b 	.word	0x0801299b
 8012bec:	08014043 	.word	0x08014043

08012bf0 <__swbuf_r>:
 8012bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012bf2:	460e      	mov	r6, r1
 8012bf4:	4614      	mov	r4, r2
 8012bf6:	4605      	mov	r5, r0
 8012bf8:	b118      	cbz	r0, 8012c02 <__swbuf_r+0x12>
 8012bfa:	6a03      	ldr	r3, [r0, #32]
 8012bfc:	b90b      	cbnz	r3, 8012c02 <__swbuf_r+0x12>
 8012bfe:	f7fd ff81 	bl	8010b04 <__sinit>
 8012c02:	69a3      	ldr	r3, [r4, #24]
 8012c04:	60a3      	str	r3, [r4, #8]
 8012c06:	89a3      	ldrh	r3, [r4, #12]
 8012c08:	071a      	lsls	r2, r3, #28
 8012c0a:	d501      	bpl.n	8012c10 <__swbuf_r+0x20>
 8012c0c:	6923      	ldr	r3, [r4, #16]
 8012c0e:	b943      	cbnz	r3, 8012c22 <__swbuf_r+0x32>
 8012c10:	4621      	mov	r1, r4
 8012c12:	4628      	mov	r0, r5
 8012c14:	f000 f82a 	bl	8012c6c <__swsetup_r>
 8012c18:	b118      	cbz	r0, 8012c22 <__swbuf_r+0x32>
 8012c1a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8012c1e:	4638      	mov	r0, r7
 8012c20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012c22:	6823      	ldr	r3, [r4, #0]
 8012c24:	6922      	ldr	r2, [r4, #16]
 8012c26:	1a98      	subs	r0, r3, r2
 8012c28:	6963      	ldr	r3, [r4, #20]
 8012c2a:	b2f6      	uxtb	r6, r6
 8012c2c:	4283      	cmp	r3, r0
 8012c2e:	4637      	mov	r7, r6
 8012c30:	dc05      	bgt.n	8012c3e <__swbuf_r+0x4e>
 8012c32:	4621      	mov	r1, r4
 8012c34:	4628      	mov	r0, r5
 8012c36:	f7ff f98f 	bl	8011f58 <_fflush_r>
 8012c3a:	2800      	cmp	r0, #0
 8012c3c:	d1ed      	bne.n	8012c1a <__swbuf_r+0x2a>
 8012c3e:	68a3      	ldr	r3, [r4, #8]
 8012c40:	3b01      	subs	r3, #1
 8012c42:	60a3      	str	r3, [r4, #8]
 8012c44:	6823      	ldr	r3, [r4, #0]
 8012c46:	1c5a      	adds	r2, r3, #1
 8012c48:	6022      	str	r2, [r4, #0]
 8012c4a:	701e      	strb	r6, [r3, #0]
 8012c4c:	6962      	ldr	r2, [r4, #20]
 8012c4e:	1c43      	adds	r3, r0, #1
 8012c50:	429a      	cmp	r2, r3
 8012c52:	d004      	beq.n	8012c5e <__swbuf_r+0x6e>
 8012c54:	89a3      	ldrh	r3, [r4, #12]
 8012c56:	07db      	lsls	r3, r3, #31
 8012c58:	d5e1      	bpl.n	8012c1e <__swbuf_r+0x2e>
 8012c5a:	2e0a      	cmp	r6, #10
 8012c5c:	d1df      	bne.n	8012c1e <__swbuf_r+0x2e>
 8012c5e:	4621      	mov	r1, r4
 8012c60:	4628      	mov	r0, r5
 8012c62:	f7ff f979 	bl	8011f58 <_fflush_r>
 8012c66:	2800      	cmp	r0, #0
 8012c68:	d0d9      	beq.n	8012c1e <__swbuf_r+0x2e>
 8012c6a:	e7d6      	b.n	8012c1a <__swbuf_r+0x2a>

08012c6c <__swsetup_r>:
 8012c6c:	b538      	push	{r3, r4, r5, lr}
 8012c6e:	4b29      	ldr	r3, [pc, #164]	@ (8012d14 <__swsetup_r+0xa8>)
 8012c70:	4605      	mov	r5, r0
 8012c72:	6818      	ldr	r0, [r3, #0]
 8012c74:	460c      	mov	r4, r1
 8012c76:	b118      	cbz	r0, 8012c80 <__swsetup_r+0x14>
 8012c78:	6a03      	ldr	r3, [r0, #32]
 8012c7a:	b90b      	cbnz	r3, 8012c80 <__swsetup_r+0x14>
 8012c7c:	f7fd ff42 	bl	8010b04 <__sinit>
 8012c80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012c84:	0719      	lsls	r1, r3, #28
 8012c86:	d422      	bmi.n	8012cce <__swsetup_r+0x62>
 8012c88:	06da      	lsls	r2, r3, #27
 8012c8a:	d407      	bmi.n	8012c9c <__swsetup_r+0x30>
 8012c8c:	2209      	movs	r2, #9
 8012c8e:	602a      	str	r2, [r5, #0]
 8012c90:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012c94:	81a3      	strh	r3, [r4, #12]
 8012c96:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012c9a:	e033      	b.n	8012d04 <__swsetup_r+0x98>
 8012c9c:	0758      	lsls	r0, r3, #29
 8012c9e:	d512      	bpl.n	8012cc6 <__swsetup_r+0x5a>
 8012ca0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012ca2:	b141      	cbz	r1, 8012cb6 <__swsetup_r+0x4a>
 8012ca4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012ca8:	4299      	cmp	r1, r3
 8012caa:	d002      	beq.n	8012cb2 <__swsetup_r+0x46>
 8012cac:	4628      	mov	r0, r5
 8012cae:	f7fe fe83 	bl	80119b8 <_free_r>
 8012cb2:	2300      	movs	r3, #0
 8012cb4:	6363      	str	r3, [r4, #52]	@ 0x34
 8012cb6:	89a3      	ldrh	r3, [r4, #12]
 8012cb8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8012cbc:	81a3      	strh	r3, [r4, #12]
 8012cbe:	2300      	movs	r3, #0
 8012cc0:	6063      	str	r3, [r4, #4]
 8012cc2:	6923      	ldr	r3, [r4, #16]
 8012cc4:	6023      	str	r3, [r4, #0]
 8012cc6:	89a3      	ldrh	r3, [r4, #12]
 8012cc8:	f043 0308 	orr.w	r3, r3, #8
 8012ccc:	81a3      	strh	r3, [r4, #12]
 8012cce:	6923      	ldr	r3, [r4, #16]
 8012cd0:	b94b      	cbnz	r3, 8012ce6 <__swsetup_r+0x7a>
 8012cd2:	89a3      	ldrh	r3, [r4, #12]
 8012cd4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8012cd8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012cdc:	d003      	beq.n	8012ce6 <__swsetup_r+0x7a>
 8012cde:	4621      	mov	r1, r4
 8012ce0:	4628      	mov	r0, r5
 8012ce2:	f000 f83f 	bl	8012d64 <__smakebuf_r>
 8012ce6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012cea:	f013 0201 	ands.w	r2, r3, #1
 8012cee:	d00a      	beq.n	8012d06 <__swsetup_r+0x9a>
 8012cf0:	2200      	movs	r2, #0
 8012cf2:	60a2      	str	r2, [r4, #8]
 8012cf4:	6962      	ldr	r2, [r4, #20]
 8012cf6:	4252      	negs	r2, r2
 8012cf8:	61a2      	str	r2, [r4, #24]
 8012cfa:	6922      	ldr	r2, [r4, #16]
 8012cfc:	b942      	cbnz	r2, 8012d10 <__swsetup_r+0xa4>
 8012cfe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8012d02:	d1c5      	bne.n	8012c90 <__swsetup_r+0x24>
 8012d04:	bd38      	pop	{r3, r4, r5, pc}
 8012d06:	0799      	lsls	r1, r3, #30
 8012d08:	bf58      	it	pl
 8012d0a:	6962      	ldrpl	r2, [r4, #20]
 8012d0c:	60a2      	str	r2, [r4, #8]
 8012d0e:	e7f4      	b.n	8012cfa <__swsetup_r+0x8e>
 8012d10:	2000      	movs	r0, #0
 8012d12:	e7f7      	b.n	8012d04 <__swsetup_r+0x98>
 8012d14:	200001b4 	.word	0x200001b4

08012d18 <__swhatbuf_r>:
 8012d18:	b570      	push	{r4, r5, r6, lr}
 8012d1a:	460c      	mov	r4, r1
 8012d1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012d20:	2900      	cmp	r1, #0
 8012d22:	b096      	sub	sp, #88	@ 0x58
 8012d24:	4615      	mov	r5, r2
 8012d26:	461e      	mov	r6, r3
 8012d28:	da0d      	bge.n	8012d46 <__swhatbuf_r+0x2e>
 8012d2a:	89a3      	ldrh	r3, [r4, #12]
 8012d2c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8012d30:	f04f 0100 	mov.w	r1, #0
 8012d34:	bf14      	ite	ne
 8012d36:	2340      	movne	r3, #64	@ 0x40
 8012d38:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8012d3c:	2000      	movs	r0, #0
 8012d3e:	6031      	str	r1, [r6, #0]
 8012d40:	602b      	str	r3, [r5, #0]
 8012d42:	b016      	add	sp, #88	@ 0x58
 8012d44:	bd70      	pop	{r4, r5, r6, pc}
 8012d46:	466a      	mov	r2, sp
 8012d48:	f000 f848 	bl	8012ddc <_fstat_r>
 8012d4c:	2800      	cmp	r0, #0
 8012d4e:	dbec      	blt.n	8012d2a <__swhatbuf_r+0x12>
 8012d50:	9901      	ldr	r1, [sp, #4]
 8012d52:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8012d56:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8012d5a:	4259      	negs	r1, r3
 8012d5c:	4159      	adcs	r1, r3
 8012d5e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012d62:	e7eb      	b.n	8012d3c <__swhatbuf_r+0x24>

08012d64 <__smakebuf_r>:
 8012d64:	898b      	ldrh	r3, [r1, #12]
 8012d66:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012d68:	079d      	lsls	r5, r3, #30
 8012d6a:	4606      	mov	r6, r0
 8012d6c:	460c      	mov	r4, r1
 8012d6e:	d507      	bpl.n	8012d80 <__smakebuf_r+0x1c>
 8012d70:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8012d74:	6023      	str	r3, [r4, #0]
 8012d76:	6123      	str	r3, [r4, #16]
 8012d78:	2301      	movs	r3, #1
 8012d7a:	6163      	str	r3, [r4, #20]
 8012d7c:	b003      	add	sp, #12
 8012d7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012d80:	ab01      	add	r3, sp, #4
 8012d82:	466a      	mov	r2, sp
 8012d84:	f7ff ffc8 	bl	8012d18 <__swhatbuf_r>
 8012d88:	9f00      	ldr	r7, [sp, #0]
 8012d8a:	4605      	mov	r5, r0
 8012d8c:	4639      	mov	r1, r7
 8012d8e:	4630      	mov	r0, r6
 8012d90:	f7fe ffde 	bl	8011d50 <_malloc_r>
 8012d94:	b948      	cbnz	r0, 8012daa <__smakebuf_r+0x46>
 8012d96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012d9a:	059a      	lsls	r2, r3, #22
 8012d9c:	d4ee      	bmi.n	8012d7c <__smakebuf_r+0x18>
 8012d9e:	f023 0303 	bic.w	r3, r3, #3
 8012da2:	f043 0302 	orr.w	r3, r3, #2
 8012da6:	81a3      	strh	r3, [r4, #12]
 8012da8:	e7e2      	b.n	8012d70 <__smakebuf_r+0xc>
 8012daa:	89a3      	ldrh	r3, [r4, #12]
 8012dac:	6020      	str	r0, [r4, #0]
 8012dae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012db2:	81a3      	strh	r3, [r4, #12]
 8012db4:	9b01      	ldr	r3, [sp, #4]
 8012db6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8012dba:	b15b      	cbz	r3, 8012dd4 <__smakebuf_r+0x70>
 8012dbc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012dc0:	4630      	mov	r0, r6
 8012dc2:	f000 f81d 	bl	8012e00 <_isatty_r>
 8012dc6:	b128      	cbz	r0, 8012dd4 <__smakebuf_r+0x70>
 8012dc8:	89a3      	ldrh	r3, [r4, #12]
 8012dca:	f023 0303 	bic.w	r3, r3, #3
 8012dce:	f043 0301 	orr.w	r3, r3, #1
 8012dd2:	81a3      	strh	r3, [r4, #12]
 8012dd4:	89a3      	ldrh	r3, [r4, #12]
 8012dd6:	431d      	orrs	r5, r3
 8012dd8:	81a5      	strh	r5, [r4, #12]
 8012dda:	e7cf      	b.n	8012d7c <__smakebuf_r+0x18>

08012ddc <_fstat_r>:
 8012ddc:	b538      	push	{r3, r4, r5, lr}
 8012dde:	4d07      	ldr	r5, [pc, #28]	@ (8012dfc <_fstat_r+0x20>)
 8012de0:	2300      	movs	r3, #0
 8012de2:	4604      	mov	r4, r0
 8012de4:	4608      	mov	r0, r1
 8012de6:	4611      	mov	r1, r2
 8012de8:	602b      	str	r3, [r5, #0]
 8012dea:	f7f0 fcf5 	bl	80037d8 <_fstat>
 8012dee:	1c43      	adds	r3, r0, #1
 8012df0:	d102      	bne.n	8012df8 <_fstat_r+0x1c>
 8012df2:	682b      	ldr	r3, [r5, #0]
 8012df4:	b103      	cbz	r3, 8012df8 <_fstat_r+0x1c>
 8012df6:	6023      	str	r3, [r4, #0]
 8012df8:	bd38      	pop	{r3, r4, r5, pc}
 8012dfa:	bf00      	nop
 8012dfc:	20012980 	.word	0x20012980

08012e00 <_isatty_r>:
 8012e00:	b538      	push	{r3, r4, r5, lr}
 8012e02:	4d06      	ldr	r5, [pc, #24]	@ (8012e1c <_isatty_r+0x1c>)
 8012e04:	2300      	movs	r3, #0
 8012e06:	4604      	mov	r4, r0
 8012e08:	4608      	mov	r0, r1
 8012e0a:	602b      	str	r3, [r5, #0]
 8012e0c:	f7f0 fcf4 	bl	80037f8 <_isatty>
 8012e10:	1c43      	adds	r3, r0, #1
 8012e12:	d102      	bne.n	8012e1a <_isatty_r+0x1a>
 8012e14:	682b      	ldr	r3, [r5, #0]
 8012e16:	b103      	cbz	r3, 8012e1a <_isatty_r+0x1a>
 8012e18:	6023      	str	r3, [r4, #0]
 8012e1a:	bd38      	pop	{r3, r4, r5, pc}
 8012e1c:	20012980 	.word	0x20012980

08012e20 <_raise_r>:
 8012e20:	291f      	cmp	r1, #31
 8012e22:	b538      	push	{r3, r4, r5, lr}
 8012e24:	4605      	mov	r5, r0
 8012e26:	460c      	mov	r4, r1
 8012e28:	d904      	bls.n	8012e34 <_raise_r+0x14>
 8012e2a:	2316      	movs	r3, #22
 8012e2c:	6003      	str	r3, [r0, #0]
 8012e2e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012e32:	bd38      	pop	{r3, r4, r5, pc}
 8012e34:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8012e36:	b112      	cbz	r2, 8012e3e <_raise_r+0x1e>
 8012e38:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012e3c:	b94b      	cbnz	r3, 8012e52 <_raise_r+0x32>
 8012e3e:	4628      	mov	r0, r5
 8012e40:	f000 f830 	bl	8012ea4 <_getpid_r>
 8012e44:	4622      	mov	r2, r4
 8012e46:	4601      	mov	r1, r0
 8012e48:	4628      	mov	r0, r5
 8012e4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012e4e:	f000 b817 	b.w	8012e80 <_kill_r>
 8012e52:	2b01      	cmp	r3, #1
 8012e54:	d00a      	beq.n	8012e6c <_raise_r+0x4c>
 8012e56:	1c59      	adds	r1, r3, #1
 8012e58:	d103      	bne.n	8012e62 <_raise_r+0x42>
 8012e5a:	2316      	movs	r3, #22
 8012e5c:	6003      	str	r3, [r0, #0]
 8012e5e:	2001      	movs	r0, #1
 8012e60:	e7e7      	b.n	8012e32 <_raise_r+0x12>
 8012e62:	2100      	movs	r1, #0
 8012e64:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8012e68:	4620      	mov	r0, r4
 8012e6a:	4798      	blx	r3
 8012e6c:	2000      	movs	r0, #0
 8012e6e:	e7e0      	b.n	8012e32 <_raise_r+0x12>

08012e70 <raise>:
 8012e70:	4b02      	ldr	r3, [pc, #8]	@ (8012e7c <raise+0xc>)
 8012e72:	4601      	mov	r1, r0
 8012e74:	6818      	ldr	r0, [r3, #0]
 8012e76:	f7ff bfd3 	b.w	8012e20 <_raise_r>
 8012e7a:	bf00      	nop
 8012e7c:	200001b4 	.word	0x200001b4

08012e80 <_kill_r>:
 8012e80:	b538      	push	{r3, r4, r5, lr}
 8012e82:	4d07      	ldr	r5, [pc, #28]	@ (8012ea0 <_kill_r+0x20>)
 8012e84:	2300      	movs	r3, #0
 8012e86:	4604      	mov	r4, r0
 8012e88:	4608      	mov	r0, r1
 8012e8a:	4611      	mov	r1, r2
 8012e8c:	602b      	str	r3, [r5, #0]
 8012e8e:	f7f0 fc43 	bl	8003718 <_kill>
 8012e92:	1c43      	adds	r3, r0, #1
 8012e94:	d102      	bne.n	8012e9c <_kill_r+0x1c>
 8012e96:	682b      	ldr	r3, [r5, #0]
 8012e98:	b103      	cbz	r3, 8012e9c <_kill_r+0x1c>
 8012e9a:	6023      	str	r3, [r4, #0]
 8012e9c:	bd38      	pop	{r3, r4, r5, pc}
 8012e9e:	bf00      	nop
 8012ea0:	20012980 	.word	0x20012980

08012ea4 <_getpid_r>:
 8012ea4:	f7f0 bc30 	b.w	8003708 <_getpid>

08012ea8 <powf>:
 8012ea8:	b508      	push	{r3, lr}
 8012eaa:	ed2d 8b04 	vpush	{d8-d9}
 8012eae:	eeb0 8a60 	vmov.f32	s16, s1
 8012eb2:	eeb0 9a40 	vmov.f32	s18, s0
 8012eb6:	f000 f87b 	bl	8012fb0 <__ieee754_powf>
 8012eba:	eeb4 8a48 	vcmp.f32	s16, s16
 8012ebe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ec2:	eef0 8a40 	vmov.f32	s17, s0
 8012ec6:	d63e      	bvs.n	8012f46 <powf+0x9e>
 8012ec8:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8012ecc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ed0:	d112      	bne.n	8012ef8 <powf+0x50>
 8012ed2:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8012ed6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012eda:	d039      	beq.n	8012f50 <powf+0xa8>
 8012edc:	eeb0 0a48 	vmov.f32	s0, s16
 8012ee0:	f000 f858 	bl	8012f94 <finitef>
 8012ee4:	b378      	cbz	r0, 8012f46 <powf+0x9e>
 8012ee6:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8012eea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012eee:	d52a      	bpl.n	8012f46 <powf+0x9e>
 8012ef0:	f7fd feda 	bl	8010ca8 <__errno>
 8012ef4:	2322      	movs	r3, #34	@ 0x22
 8012ef6:	e014      	b.n	8012f22 <powf+0x7a>
 8012ef8:	f000 f84c 	bl	8012f94 <finitef>
 8012efc:	b998      	cbnz	r0, 8012f26 <powf+0x7e>
 8012efe:	eeb0 0a49 	vmov.f32	s0, s18
 8012f02:	f000 f847 	bl	8012f94 <finitef>
 8012f06:	b170      	cbz	r0, 8012f26 <powf+0x7e>
 8012f08:	eeb0 0a48 	vmov.f32	s0, s16
 8012f0c:	f000 f842 	bl	8012f94 <finitef>
 8012f10:	b148      	cbz	r0, 8012f26 <powf+0x7e>
 8012f12:	eef4 8a68 	vcmp.f32	s17, s17
 8012f16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f1a:	d7e9      	bvc.n	8012ef0 <powf+0x48>
 8012f1c:	f7fd fec4 	bl	8010ca8 <__errno>
 8012f20:	2321      	movs	r3, #33	@ 0x21
 8012f22:	6003      	str	r3, [r0, #0]
 8012f24:	e00f      	b.n	8012f46 <powf+0x9e>
 8012f26:	eef5 8a40 	vcmp.f32	s17, #0.0
 8012f2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f2e:	d10a      	bne.n	8012f46 <powf+0x9e>
 8012f30:	eeb0 0a49 	vmov.f32	s0, s18
 8012f34:	f000 f82e 	bl	8012f94 <finitef>
 8012f38:	b128      	cbz	r0, 8012f46 <powf+0x9e>
 8012f3a:	eeb0 0a48 	vmov.f32	s0, s16
 8012f3e:	f000 f829 	bl	8012f94 <finitef>
 8012f42:	2800      	cmp	r0, #0
 8012f44:	d1d4      	bne.n	8012ef0 <powf+0x48>
 8012f46:	eeb0 0a68 	vmov.f32	s0, s17
 8012f4a:	ecbd 8b04 	vpop	{d8-d9}
 8012f4e:	bd08      	pop	{r3, pc}
 8012f50:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8012f54:	e7f7      	b.n	8012f46 <powf+0x9e>
	...

08012f58 <sqrtf>:
 8012f58:	b508      	push	{r3, lr}
 8012f5a:	ed2d 8b02 	vpush	{d8}
 8012f5e:	eeb0 8a40 	vmov.f32	s16, s0
 8012f62:	f000 f821 	bl	8012fa8 <__ieee754_sqrtf>
 8012f66:	eeb4 8a48 	vcmp.f32	s16, s16
 8012f6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f6e:	d60c      	bvs.n	8012f8a <sqrtf+0x32>
 8012f70:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8012f90 <sqrtf+0x38>
 8012f74:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8012f78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f7c:	d505      	bpl.n	8012f8a <sqrtf+0x32>
 8012f7e:	f7fd fe93 	bl	8010ca8 <__errno>
 8012f82:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8012f86:	2321      	movs	r3, #33	@ 0x21
 8012f88:	6003      	str	r3, [r0, #0]
 8012f8a:	ecbd 8b02 	vpop	{d8}
 8012f8e:	bd08      	pop	{r3, pc}
 8012f90:	00000000 	.word	0x00000000

08012f94 <finitef>:
 8012f94:	ee10 3a10 	vmov	r3, s0
 8012f98:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 8012f9c:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8012fa0:	bfac      	ite	ge
 8012fa2:	2000      	movge	r0, #0
 8012fa4:	2001      	movlt	r0, #1
 8012fa6:	4770      	bx	lr

08012fa8 <__ieee754_sqrtf>:
 8012fa8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8012fac:	4770      	bx	lr
	...

08012fb0 <__ieee754_powf>:
 8012fb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012fb4:	ee10 4a90 	vmov	r4, s1
 8012fb8:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 8012fbc:	ed2d 8b02 	vpush	{d8}
 8012fc0:	ee10 6a10 	vmov	r6, s0
 8012fc4:	eeb0 8a40 	vmov.f32	s16, s0
 8012fc8:	eef0 8a60 	vmov.f32	s17, s1
 8012fcc:	d10c      	bne.n	8012fe8 <__ieee754_powf+0x38>
 8012fce:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 8012fd2:	0076      	lsls	r6, r6, #1
 8012fd4:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 8012fd8:	f240 829c 	bls.w	8013514 <__ieee754_powf+0x564>
 8012fdc:	ee38 0a28 	vadd.f32	s0, s16, s17
 8012fe0:	ecbd 8b02 	vpop	{d8}
 8012fe4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012fe8:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 8012fec:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 8012ff0:	d802      	bhi.n	8012ff8 <__ieee754_powf+0x48>
 8012ff2:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8012ff6:	d908      	bls.n	801300a <__ieee754_powf+0x5a>
 8012ff8:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 8012ffc:	d1ee      	bne.n	8012fdc <__ieee754_powf+0x2c>
 8012ffe:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 8013002:	0064      	lsls	r4, r4, #1
 8013004:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 8013008:	e7e6      	b.n	8012fd8 <__ieee754_powf+0x28>
 801300a:	2e00      	cmp	r6, #0
 801300c:	da1e      	bge.n	801304c <__ieee754_powf+0x9c>
 801300e:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 8013012:	d22b      	bcs.n	801306c <__ieee754_powf+0xbc>
 8013014:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8013018:	d332      	bcc.n	8013080 <__ieee754_powf+0xd0>
 801301a:	ea4f 53e9 	mov.w	r3, r9, asr #23
 801301e:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 8013022:	fa49 f503 	asr.w	r5, r9, r3
 8013026:	fa05 f303 	lsl.w	r3, r5, r3
 801302a:	454b      	cmp	r3, r9
 801302c:	d126      	bne.n	801307c <__ieee754_powf+0xcc>
 801302e:	f005 0501 	and.w	r5, r5, #1
 8013032:	f1c5 0502 	rsb	r5, r5, #2
 8013036:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 801303a:	d122      	bne.n	8013082 <__ieee754_powf+0xd2>
 801303c:	2c00      	cmp	r4, #0
 801303e:	f280 826f 	bge.w	8013520 <__ieee754_powf+0x570>
 8013042:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8013046:	ee87 0a88 	vdiv.f32	s0, s15, s16
 801304a:	e7c9      	b.n	8012fe0 <__ieee754_powf+0x30>
 801304c:	2500      	movs	r5, #0
 801304e:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8013052:	d1f0      	bne.n	8013036 <__ieee754_powf+0x86>
 8013054:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 8013058:	f000 825c 	beq.w	8013514 <__ieee754_powf+0x564>
 801305c:	d908      	bls.n	8013070 <__ieee754_powf+0xc0>
 801305e:	ed9f 0ad8 	vldr	s0, [pc, #864]	@ 80133c0 <__ieee754_powf+0x410>
 8013062:	2c00      	cmp	r4, #0
 8013064:	bfa8      	it	ge
 8013066:	eeb0 0a68 	vmovge.f32	s0, s17
 801306a:	e7b9      	b.n	8012fe0 <__ieee754_powf+0x30>
 801306c:	2502      	movs	r5, #2
 801306e:	e7ee      	b.n	801304e <__ieee754_powf+0x9e>
 8013070:	2c00      	cmp	r4, #0
 8013072:	f280 8252 	bge.w	801351a <__ieee754_powf+0x56a>
 8013076:	eeb1 0a68 	vneg.f32	s0, s17
 801307a:	e7b1      	b.n	8012fe0 <__ieee754_powf+0x30>
 801307c:	2500      	movs	r5, #0
 801307e:	e7da      	b.n	8013036 <__ieee754_powf+0x86>
 8013080:	2500      	movs	r5, #0
 8013082:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8013086:	d102      	bne.n	801308e <__ieee754_powf+0xde>
 8013088:	ee28 0a08 	vmul.f32	s0, s16, s16
 801308c:	e7a8      	b.n	8012fe0 <__ieee754_powf+0x30>
 801308e:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 8013092:	d109      	bne.n	80130a8 <__ieee754_powf+0xf8>
 8013094:	2e00      	cmp	r6, #0
 8013096:	db07      	blt.n	80130a8 <__ieee754_powf+0xf8>
 8013098:	eeb0 0a48 	vmov.f32	s0, s16
 801309c:	ecbd 8b02 	vpop	{d8}
 80130a0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80130a4:	f7ff bf80 	b.w	8012fa8 <__ieee754_sqrtf>
 80130a8:	eeb0 0a48 	vmov.f32	s0, s16
 80130ac:	f000 fadc 	bl	8013668 <fabsf>
 80130b0:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 80130b4:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 80130b8:	4647      	mov	r7, r8
 80130ba:	d002      	beq.n	80130c2 <__ieee754_powf+0x112>
 80130bc:	f1b8 0f00 	cmp.w	r8, #0
 80130c0:	d117      	bne.n	80130f2 <__ieee754_powf+0x142>
 80130c2:	2c00      	cmp	r4, #0
 80130c4:	bfbc      	itt	lt
 80130c6:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 80130ca:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 80130ce:	2e00      	cmp	r6, #0
 80130d0:	da86      	bge.n	8012fe0 <__ieee754_powf+0x30>
 80130d2:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 80130d6:	ea58 0805 	orrs.w	r8, r8, r5
 80130da:	d104      	bne.n	80130e6 <__ieee754_powf+0x136>
 80130dc:	ee70 7a40 	vsub.f32	s15, s0, s0
 80130e0:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80130e4:	e77c      	b.n	8012fe0 <__ieee754_powf+0x30>
 80130e6:	2d01      	cmp	r5, #1
 80130e8:	f47f af7a 	bne.w	8012fe0 <__ieee754_powf+0x30>
 80130ec:	eeb1 0a40 	vneg.f32	s0, s0
 80130f0:	e776      	b.n	8012fe0 <__ieee754_powf+0x30>
 80130f2:	0ff0      	lsrs	r0, r6, #31
 80130f4:	3801      	subs	r0, #1
 80130f6:	ea55 0300 	orrs.w	r3, r5, r0
 80130fa:	d104      	bne.n	8013106 <__ieee754_powf+0x156>
 80130fc:	ee38 8a48 	vsub.f32	s16, s16, s16
 8013100:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8013104:	e76c      	b.n	8012fe0 <__ieee754_powf+0x30>
 8013106:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 801310a:	d973      	bls.n	80131f4 <__ieee754_powf+0x244>
 801310c:	4bad      	ldr	r3, [pc, #692]	@ (80133c4 <__ieee754_powf+0x414>)
 801310e:	4598      	cmp	r8, r3
 8013110:	d808      	bhi.n	8013124 <__ieee754_powf+0x174>
 8013112:	2c00      	cmp	r4, #0
 8013114:	da0b      	bge.n	801312e <__ieee754_powf+0x17e>
 8013116:	2000      	movs	r0, #0
 8013118:	ecbd 8b02 	vpop	{d8}
 801311c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013120:	f000 ba36 	b.w	8013590 <__math_oflowf>
 8013124:	4ba8      	ldr	r3, [pc, #672]	@ (80133c8 <__ieee754_powf+0x418>)
 8013126:	4598      	cmp	r8, r3
 8013128:	d908      	bls.n	801313c <__ieee754_powf+0x18c>
 801312a:	2c00      	cmp	r4, #0
 801312c:	dcf3      	bgt.n	8013116 <__ieee754_powf+0x166>
 801312e:	2000      	movs	r0, #0
 8013130:	ecbd 8b02 	vpop	{d8}
 8013134:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013138:	f000 ba24 	b.w	8013584 <__math_uflowf>
 801313c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8013140:	ee30 0a67 	vsub.f32	s0, s0, s15
 8013144:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 80133cc <__ieee754_powf+0x41c>
 8013148:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 801314c:	eee0 6a67 	vfms.f32	s13, s0, s15
 8013150:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8013154:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8013158:	ee20 7a00 	vmul.f32	s14, s0, s0
 801315c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013160:	eddf 7a9b 	vldr	s15, [pc, #620]	@ 80133d0 <__ieee754_powf+0x420>
 8013164:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8013168:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 80133d4 <__ieee754_powf+0x424>
 801316c:	eee0 7a07 	vfma.f32	s15, s0, s14
 8013170:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 80133d8 <__ieee754_powf+0x428>
 8013174:	eef0 6a67 	vmov.f32	s13, s15
 8013178:	eee0 6a07 	vfma.f32	s13, s0, s14
 801317c:	ee16 3a90 	vmov	r3, s13
 8013180:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8013184:	f023 030f 	bic.w	r3, r3, #15
 8013188:	ee06 3a90 	vmov	s13, r3
 801318c:	eee0 6a47 	vfms.f32	s13, s0, s14
 8013190:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8013194:	3d01      	subs	r5, #1
 8013196:	f424 647f 	bic.w	r4, r4, #4080	@ 0xff0
 801319a:	4305      	orrs	r5, r0
 801319c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80131a0:	f024 040f 	bic.w	r4, r4, #15
 80131a4:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 80131a8:	bf18      	it	ne
 80131aa:	eeb0 8a47 	vmovne.f32	s16, s14
 80131ae:	ee07 4a10 	vmov	s14, r4
 80131b2:	ee67 0aa8 	vmul.f32	s1, s15, s17
 80131b6:	ee38 7ac7 	vsub.f32	s14, s17, s14
 80131ba:	ee07 3a90 	vmov	s15, r3
 80131be:	eee7 0a27 	vfma.f32	s1, s14, s15
 80131c2:	ee07 4a10 	vmov	s14, r4
 80131c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80131ca:	ee30 7aa7 	vadd.f32	s14, s1, s15
 80131ce:	ee17 1a10 	vmov	r1, s14
 80131d2:	2900      	cmp	r1, #0
 80131d4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80131d8:	f340 80dd 	ble.w	8013396 <__ieee754_powf+0x3e6>
 80131dc:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 80131e0:	f240 80ca 	bls.w	8013378 <__ieee754_powf+0x3c8>
 80131e4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80131e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131ec:	bf4c      	ite	mi
 80131ee:	2001      	movmi	r0, #1
 80131f0:	2000      	movpl	r0, #0
 80131f2:	e791      	b.n	8013118 <__ieee754_powf+0x168>
 80131f4:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 80131f8:	bf01      	itttt	eq
 80131fa:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 80133dc <__ieee754_powf+0x42c>
 80131fe:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8013202:	f06f 0317 	mvneq.w	r3, #23
 8013206:	ee17 7a90 	vmoveq	r7, s15
 801320a:	ea4f 52e7 	mov.w	r2, r7, asr #23
 801320e:	bf18      	it	ne
 8013210:	2300      	movne	r3, #0
 8013212:	3a7f      	subs	r2, #127	@ 0x7f
 8013214:	441a      	add	r2, r3
 8013216:	4b72      	ldr	r3, [pc, #456]	@ (80133e0 <__ieee754_powf+0x430>)
 8013218:	f3c7 0716 	ubfx	r7, r7, #0, #23
 801321c:	429f      	cmp	r7, r3
 801321e:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 8013222:	dd06      	ble.n	8013232 <__ieee754_powf+0x282>
 8013224:	4b6f      	ldr	r3, [pc, #444]	@ (80133e4 <__ieee754_powf+0x434>)
 8013226:	429f      	cmp	r7, r3
 8013228:	f340 80a4 	ble.w	8013374 <__ieee754_powf+0x3c4>
 801322c:	3201      	adds	r2, #1
 801322e:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 8013232:	2600      	movs	r6, #0
 8013234:	4b6c      	ldr	r3, [pc, #432]	@ (80133e8 <__ieee754_powf+0x438>)
 8013236:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 801323a:	ee07 1a10 	vmov	s14, r1
 801323e:	edd3 5a00 	vldr	s11, [r3]
 8013242:	4b6a      	ldr	r3, [pc, #424]	@ (80133ec <__ieee754_powf+0x43c>)
 8013244:	ee75 7a87 	vadd.f32	s15, s11, s14
 8013248:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801324c:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 8013250:	1049      	asrs	r1, r1, #1
 8013252:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 8013256:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 801325a:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 801325e:	ee37 6a65 	vsub.f32	s12, s14, s11
 8013262:	ee07 1a90 	vmov	s15, r1
 8013266:	ee26 5a24 	vmul.f32	s10, s12, s9
 801326a:	ee77 5ae5 	vsub.f32	s11, s15, s11
 801326e:	ee15 7a10 	vmov	r7, s10
 8013272:	401f      	ands	r7, r3
 8013274:	ee06 7a90 	vmov	s13, r7
 8013278:	eea6 6ae7 	vfms.f32	s12, s13, s15
 801327c:	ee37 7a65 	vsub.f32	s14, s14, s11
 8013280:	ee65 7a05 	vmul.f32	s15, s10, s10
 8013284:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8013288:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80133f0 <__ieee754_powf+0x440>
 801328c:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 80133f4 <__ieee754_powf+0x444>
 8013290:	eee7 5a87 	vfma.f32	s11, s15, s14
 8013294:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 80133f8 <__ieee754_powf+0x448>
 8013298:	eea5 7aa7 	vfma.f32	s14, s11, s15
 801329c:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 80133cc <__ieee754_powf+0x41c>
 80132a0:	eee7 5a27 	vfma.f32	s11, s14, s15
 80132a4:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 80133fc <__ieee754_powf+0x44c>
 80132a8:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80132ac:	eddf 5a54 	vldr	s11, [pc, #336]	@ 8013400 <__ieee754_powf+0x450>
 80132b0:	ee26 6a24 	vmul.f32	s12, s12, s9
 80132b4:	eee7 5a27 	vfma.f32	s11, s14, s15
 80132b8:	ee35 7a26 	vadd.f32	s14, s10, s13
 80132bc:	ee67 4aa7 	vmul.f32	s9, s15, s15
 80132c0:	ee27 7a06 	vmul.f32	s14, s14, s12
 80132c4:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 80132c8:	eea4 7aa5 	vfma.f32	s14, s9, s11
 80132cc:	eef0 5a67 	vmov.f32	s11, s15
 80132d0:	eee6 5aa6 	vfma.f32	s11, s13, s13
 80132d4:	ee75 5a87 	vadd.f32	s11, s11, s14
 80132d8:	ee15 1a90 	vmov	r1, s11
 80132dc:	4019      	ands	r1, r3
 80132de:	ee05 1a90 	vmov	s11, r1
 80132e2:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80132e6:	eee6 7ae6 	vfms.f32	s15, s13, s13
 80132ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80132ee:	ee67 7a85 	vmul.f32	s15, s15, s10
 80132f2:	eee6 7a25 	vfma.f32	s15, s12, s11
 80132f6:	eeb0 6a67 	vmov.f32	s12, s15
 80132fa:	eea6 6aa5 	vfma.f32	s12, s13, s11
 80132fe:	ee16 1a10 	vmov	r1, s12
 8013302:	4019      	ands	r1, r3
 8013304:	ee06 1a10 	vmov	s12, r1
 8013308:	eeb0 7a46 	vmov.f32	s14, s12
 801330c:	eea6 7ae5 	vfms.f32	s14, s13, s11
 8013310:	493c      	ldr	r1, [pc, #240]	@ (8013404 <__ieee754_powf+0x454>)
 8013312:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 8013316:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801331a:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8013408 <__ieee754_powf+0x458>
 801331e:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 801340c <__ieee754_powf+0x45c>
 8013322:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013326:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8013410 <__ieee754_powf+0x460>
 801332a:	eee6 7a07 	vfma.f32	s15, s12, s14
 801332e:	ed91 7a00 	vldr	s14, [r1]
 8013332:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013336:	ee07 2a10 	vmov	s14, r2
 801333a:	eef0 6a67 	vmov.f32	s13, s15
 801333e:	4a35      	ldr	r2, [pc, #212]	@ (8013414 <__ieee754_powf+0x464>)
 8013340:	eee6 6a25 	vfma.f32	s13, s12, s11
 8013344:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 8013348:	ed92 5a00 	vldr	s10, [r2]
 801334c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013350:	ee76 6a85 	vadd.f32	s13, s13, s10
 8013354:	ee76 6a87 	vadd.f32	s13, s13, s14
 8013358:	ee16 2a90 	vmov	r2, s13
 801335c:	4013      	ands	r3, r2
 801335e:	ee06 3a90 	vmov	s13, r3
 8013362:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8013366:	ee37 7a45 	vsub.f32	s14, s14, s10
 801336a:	eea6 7a65 	vfms.f32	s14, s12, s11
 801336e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013372:	e70f      	b.n	8013194 <__ieee754_powf+0x1e4>
 8013374:	2601      	movs	r6, #1
 8013376:	e75d      	b.n	8013234 <__ieee754_powf+0x284>
 8013378:	d152      	bne.n	8013420 <__ieee754_powf+0x470>
 801337a:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8013418 <__ieee754_powf+0x468>
 801337e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8013382:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8013386:	eef4 6ac7 	vcmpe.f32	s13, s14
 801338a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801338e:	f73f af29 	bgt.w	80131e4 <__ieee754_powf+0x234>
 8013392:	2386      	movs	r3, #134	@ 0x86
 8013394:	e048      	b.n	8013428 <__ieee754_powf+0x478>
 8013396:	4a21      	ldr	r2, [pc, #132]	@ (801341c <__ieee754_powf+0x46c>)
 8013398:	4293      	cmp	r3, r2
 801339a:	d907      	bls.n	80133ac <__ieee754_powf+0x3fc>
 801339c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80133a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80133a4:	bf4c      	ite	mi
 80133a6:	2001      	movmi	r0, #1
 80133a8:	2000      	movpl	r0, #0
 80133aa:	e6c1      	b.n	8013130 <__ieee754_powf+0x180>
 80133ac:	d138      	bne.n	8013420 <__ieee754_powf+0x470>
 80133ae:	ee37 7a67 	vsub.f32	s14, s14, s15
 80133b2:	eeb4 7ae0 	vcmpe.f32	s14, s1
 80133b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80133ba:	dbea      	blt.n	8013392 <__ieee754_powf+0x3e2>
 80133bc:	e7ee      	b.n	801339c <__ieee754_powf+0x3ec>
 80133be:	bf00      	nop
 80133c0:	00000000 	.word	0x00000000
 80133c4:	3f7ffff3 	.word	0x3f7ffff3
 80133c8:	3f800007 	.word	0x3f800007
 80133cc:	3eaaaaab 	.word	0x3eaaaaab
 80133d0:	3fb8aa3b 	.word	0x3fb8aa3b
 80133d4:	36eca570 	.word	0x36eca570
 80133d8:	3fb8aa00 	.word	0x3fb8aa00
 80133dc:	4b800000 	.word	0x4b800000
 80133e0:	001cc471 	.word	0x001cc471
 80133e4:	005db3d6 	.word	0x005db3d6
 80133e8:	08014300 	.word	0x08014300
 80133ec:	fffff000 	.word	0xfffff000
 80133f0:	3e6c3255 	.word	0x3e6c3255
 80133f4:	3e53f142 	.word	0x3e53f142
 80133f8:	3e8ba305 	.word	0x3e8ba305
 80133fc:	3edb6db7 	.word	0x3edb6db7
 8013400:	3f19999a 	.word	0x3f19999a
 8013404:	080142f0 	.word	0x080142f0
 8013408:	3f76384f 	.word	0x3f76384f
 801340c:	3f763800 	.word	0x3f763800
 8013410:	369dc3a0 	.word	0x369dc3a0
 8013414:	080142f8 	.word	0x080142f8
 8013418:	3338aa3c 	.word	0x3338aa3c
 801341c:	43160000 	.word	0x43160000
 8013420:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 8013424:	d971      	bls.n	801350a <__ieee754_powf+0x55a>
 8013426:	15db      	asrs	r3, r3, #23
 8013428:	3b7e      	subs	r3, #126	@ 0x7e
 801342a:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 801342e:	4118      	asrs	r0, r3
 8013430:	4408      	add	r0, r1
 8013432:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8013436:	4a3c      	ldr	r2, [pc, #240]	@ (8013528 <__ieee754_powf+0x578>)
 8013438:	3b7f      	subs	r3, #127	@ 0x7f
 801343a:	411a      	asrs	r2, r3
 801343c:	4002      	ands	r2, r0
 801343e:	ee07 2a10 	vmov	s14, r2
 8013442:	f3c0 0016 	ubfx	r0, r0, #0, #23
 8013446:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 801344a:	f1c3 0317 	rsb	r3, r3, #23
 801344e:	4118      	asrs	r0, r3
 8013450:	2900      	cmp	r1, #0
 8013452:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013456:	bfb8      	it	lt
 8013458:	4240      	neglt	r0, r0
 801345a:	ee37 7aa0 	vadd.f32	s14, s15, s1
 801345e:	eddf 6a33 	vldr	s13, [pc, #204]	@ 801352c <__ieee754_powf+0x57c>
 8013462:	ed9f 6a33 	vldr	s12, [pc, #204]	@ 8013530 <__ieee754_powf+0x580>
 8013466:	ee17 3a10 	vmov	r3, s14
 801346a:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 801346e:	f023 030f 	bic.w	r3, r3, #15
 8013472:	ee07 3a10 	vmov	s14, r3
 8013476:	ee77 7a67 	vsub.f32	s15, s14, s15
 801347a:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801347e:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8013482:	eddf 7a2c 	vldr	s15, [pc, #176]	@ 8013534 <__ieee754_powf+0x584>
 8013486:	ee67 7a27 	vmul.f32	s15, s14, s15
 801348a:	eee0 7aa6 	vfma.f32	s15, s1, s13
 801348e:	eef0 6a67 	vmov.f32	s13, s15
 8013492:	eee7 6a06 	vfma.f32	s13, s14, s12
 8013496:	eef0 5a66 	vmov.f32	s11, s13
 801349a:	eee7 5a46 	vfms.f32	s11, s14, s12
 801349e:	ee26 7aa6 	vmul.f32	s14, s13, s13
 80134a2:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80134a6:	ed9f 6a24 	vldr	s12, [pc, #144]	@ 8013538 <__ieee754_powf+0x588>
 80134aa:	eddf 5a24 	vldr	s11, [pc, #144]	@ 801353c <__ieee754_powf+0x58c>
 80134ae:	eea7 6a25 	vfma.f32	s12, s14, s11
 80134b2:	eddf 5a23 	vldr	s11, [pc, #140]	@ 8013540 <__ieee754_powf+0x590>
 80134b6:	eee6 5a07 	vfma.f32	s11, s12, s14
 80134ba:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 8013544 <__ieee754_powf+0x594>
 80134be:	eea5 6a87 	vfma.f32	s12, s11, s14
 80134c2:	eddf 5a21 	vldr	s11, [pc, #132]	@ 8013548 <__ieee754_powf+0x598>
 80134c6:	eee6 5a07 	vfma.f32	s11, s12, s14
 80134ca:	eeb0 6a66 	vmov.f32	s12, s13
 80134ce:	eea5 6ac7 	vfms.f32	s12, s11, s14
 80134d2:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80134d6:	ee66 5a86 	vmul.f32	s11, s13, s12
 80134da:	ee36 6a47 	vsub.f32	s12, s12, s14
 80134de:	eee6 7aa7 	vfma.f32	s15, s13, s15
 80134e2:	ee85 7a86 	vdiv.f32	s14, s11, s12
 80134e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80134ea:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80134ee:	ee30 0a67 	vsub.f32	s0, s0, s15
 80134f2:	ee10 3a10 	vmov	r3, s0
 80134f6:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 80134fa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80134fe:	da06      	bge.n	801350e <__ieee754_powf+0x55e>
 8013500:	f000 f84c 	bl	801359c <scalbnf>
 8013504:	ee20 0a08 	vmul.f32	s0, s0, s16
 8013508:	e56a      	b.n	8012fe0 <__ieee754_powf+0x30>
 801350a:	2000      	movs	r0, #0
 801350c:	e7a5      	b.n	801345a <__ieee754_powf+0x4aa>
 801350e:	ee00 3a10 	vmov	s0, r3
 8013512:	e7f7      	b.n	8013504 <__ieee754_powf+0x554>
 8013514:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8013518:	e562      	b.n	8012fe0 <__ieee754_powf+0x30>
 801351a:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 801354c <__ieee754_powf+0x59c>
 801351e:	e55f      	b.n	8012fe0 <__ieee754_powf+0x30>
 8013520:	eeb0 0a48 	vmov.f32	s0, s16
 8013524:	e55c      	b.n	8012fe0 <__ieee754_powf+0x30>
 8013526:	bf00      	nop
 8013528:	ff800000 	.word	0xff800000
 801352c:	3f317218 	.word	0x3f317218
 8013530:	3f317200 	.word	0x3f317200
 8013534:	35bfbe8c 	.word	0x35bfbe8c
 8013538:	b5ddea0e 	.word	0xb5ddea0e
 801353c:	3331bb4c 	.word	0x3331bb4c
 8013540:	388ab355 	.word	0x388ab355
 8013544:	bb360b61 	.word	0xbb360b61
 8013548:	3e2aaaab 	.word	0x3e2aaaab
 801354c:	00000000 	.word	0x00000000

08013550 <with_errnof>:
 8013550:	b510      	push	{r4, lr}
 8013552:	ed2d 8b02 	vpush	{d8}
 8013556:	eeb0 8a40 	vmov.f32	s16, s0
 801355a:	4604      	mov	r4, r0
 801355c:	f7fd fba4 	bl	8010ca8 <__errno>
 8013560:	eeb0 0a48 	vmov.f32	s0, s16
 8013564:	ecbd 8b02 	vpop	{d8}
 8013568:	6004      	str	r4, [r0, #0]
 801356a:	bd10      	pop	{r4, pc}

0801356c <xflowf>:
 801356c:	b130      	cbz	r0, 801357c <xflowf+0x10>
 801356e:	eef1 7a40 	vneg.f32	s15, s0
 8013572:	ee27 0a80 	vmul.f32	s0, s15, s0
 8013576:	2022      	movs	r0, #34	@ 0x22
 8013578:	f7ff bfea 	b.w	8013550 <with_errnof>
 801357c:	eef0 7a40 	vmov.f32	s15, s0
 8013580:	e7f7      	b.n	8013572 <xflowf+0x6>
	...

08013584 <__math_uflowf>:
 8013584:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801358c <__math_uflowf+0x8>
 8013588:	f7ff bff0 	b.w	801356c <xflowf>
 801358c:	10000000 	.word	0x10000000

08013590 <__math_oflowf>:
 8013590:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8013598 <__math_oflowf+0x8>
 8013594:	f7ff bfea 	b.w	801356c <xflowf>
 8013598:	70000000 	.word	0x70000000

0801359c <scalbnf>:
 801359c:	ee10 3a10 	vmov	r3, s0
 80135a0:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 80135a4:	d02b      	beq.n	80135fe <scalbnf+0x62>
 80135a6:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 80135aa:	d302      	bcc.n	80135b2 <scalbnf+0x16>
 80135ac:	ee30 0a00 	vadd.f32	s0, s0, s0
 80135b0:	4770      	bx	lr
 80135b2:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 80135b6:	d123      	bne.n	8013600 <scalbnf+0x64>
 80135b8:	4b24      	ldr	r3, [pc, #144]	@ (801364c <scalbnf+0xb0>)
 80135ba:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8013650 <scalbnf+0xb4>
 80135be:	4298      	cmp	r0, r3
 80135c0:	ee20 0a27 	vmul.f32	s0, s0, s15
 80135c4:	db17      	blt.n	80135f6 <scalbnf+0x5a>
 80135c6:	ee10 3a10 	vmov	r3, s0
 80135ca:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80135ce:	3a19      	subs	r2, #25
 80135d0:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80135d4:	4288      	cmp	r0, r1
 80135d6:	dd15      	ble.n	8013604 <scalbnf+0x68>
 80135d8:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8013654 <scalbnf+0xb8>
 80135dc:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8013658 <scalbnf+0xbc>
 80135e0:	ee10 3a10 	vmov	r3, s0
 80135e4:	eeb0 7a67 	vmov.f32	s14, s15
 80135e8:	2b00      	cmp	r3, #0
 80135ea:	bfb8      	it	lt
 80135ec:	eef0 7a66 	vmovlt.f32	s15, s13
 80135f0:	ee27 0a87 	vmul.f32	s0, s15, s14
 80135f4:	4770      	bx	lr
 80135f6:	eddf 7a19 	vldr	s15, [pc, #100]	@ 801365c <scalbnf+0xc0>
 80135fa:	ee27 0a80 	vmul.f32	s0, s15, s0
 80135fe:	4770      	bx	lr
 8013600:	0dd2      	lsrs	r2, r2, #23
 8013602:	e7e5      	b.n	80135d0 <scalbnf+0x34>
 8013604:	4410      	add	r0, r2
 8013606:	28fe      	cmp	r0, #254	@ 0xfe
 8013608:	dce6      	bgt.n	80135d8 <scalbnf+0x3c>
 801360a:	2800      	cmp	r0, #0
 801360c:	dd06      	ble.n	801361c <scalbnf+0x80>
 801360e:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8013612:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8013616:	ee00 3a10 	vmov	s0, r3
 801361a:	4770      	bx	lr
 801361c:	f110 0f16 	cmn.w	r0, #22
 8013620:	da09      	bge.n	8013636 <scalbnf+0x9a>
 8013622:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 801365c <scalbnf+0xc0>
 8013626:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8013660 <scalbnf+0xc4>
 801362a:	ee10 3a10 	vmov	r3, s0
 801362e:	eeb0 7a67 	vmov.f32	s14, s15
 8013632:	2b00      	cmp	r3, #0
 8013634:	e7d9      	b.n	80135ea <scalbnf+0x4e>
 8013636:	3019      	adds	r0, #25
 8013638:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801363c:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8013640:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8013664 <scalbnf+0xc8>
 8013644:	ee07 3a90 	vmov	s15, r3
 8013648:	e7d7      	b.n	80135fa <scalbnf+0x5e>
 801364a:	bf00      	nop
 801364c:	ffff3cb0 	.word	0xffff3cb0
 8013650:	4c000000 	.word	0x4c000000
 8013654:	7149f2ca 	.word	0x7149f2ca
 8013658:	f149f2ca 	.word	0xf149f2ca
 801365c:	0da24260 	.word	0x0da24260
 8013660:	8da24260 	.word	0x8da24260
 8013664:	33000000 	.word	0x33000000

08013668 <fabsf>:
 8013668:	ee10 3a10 	vmov	r3, s0
 801366c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8013670:	ee00 3a10 	vmov	s0, r3
 8013674:	4770      	bx	lr
	...

08013678 <_init>:
 8013678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801367a:	bf00      	nop
 801367c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801367e:	bc08      	pop	{r3}
 8013680:	469e      	mov	lr, r3
 8013682:	4770      	bx	lr

08013684 <_fini>:
 8013684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013686:	bf00      	nop
 8013688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801368a:	bc08      	pop	{r3}
 801368c:	469e      	mov	lr, r3
 801368e:	4770      	bx	lr
