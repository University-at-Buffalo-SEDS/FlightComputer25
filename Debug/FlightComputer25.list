
FlightComputer25.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012b00  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bd0  08012ce0  08012ce0  00013ce0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080138b0  080138b0  00015370  2**0
                  CONTENTS
  4 .ARM          00000008  080138b0  080138b0  000148b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080138b8  080138b8  00015370  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080138b8  080138b8  000148b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080138bc  080138bc  000148bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000370  20000000  080138c0  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000125d4  20000370  08013c30  00015370  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20012944  08013c30  00015944  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00015370  2**0
                  CONTENTS, READONLY
 12 .debug_info   000284c7  00000000  00000000  000153a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005c72  00000000  00000000  0003d867  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002178  00000000  00000000  000434e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001981  00000000  00000000  00045658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002552d  00000000  00000000  00046fd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000262b7  00000000  00000000  0006c506  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1724  00000000  00000000  000927bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00173ee1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009f74  00000000  00000000  00173f24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  0017de98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000370 	.word	0x20000370
 80001fc:	00000000 	.word	0x00000000
 8000200:	08012cc8 	.word	0x08012cc8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000374 	.word	0x20000374
 800021c:	08012cc8 	.word	0x08012cc8

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <accel_read_reg>:
#include <Drivers/bmi088.h>

void accel_read_reg(BMI088 *imu, uint8_t regAddr, uint8_t *data) {
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b088      	sub	sp, #32
 8000bfc:	af02      	add	r7, sp, #8
 8000bfe:	60f8      	str	r0, [r7, #12]
 8000c00:	460b      	mov	r3, r1
 8000c02:	607a      	str	r2, [r7, #4]
 8000c04:	72fb      	strb	r3, [r7, #11]
	uint8_t tx[3] = {regAddr | 0x80, 0x00, 0x00};
 8000c06:	7afb      	ldrb	r3, [r7, #11]
 8000c08:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000c0c:	b2db      	uxtb	r3, r3
 8000c0e:	753b      	strb	r3, [r7, #20]
 8000c10:	2300      	movs	r3, #0
 8000c12:	757b      	strb	r3, [r7, #21]
 8000c14:	2300      	movs	r3, #0
 8000c16:	75bb      	strb	r3, [r7, #22]
	uint8_t rx[3];

	HAL_GPIO_WritePin(imu->csAccelPinBank, imu->accelCSPin, GPIO_PIN_RESET);
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	6858      	ldr	r0, [r3, #4]
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	899b      	ldrh	r3, [r3, #12]
 8000c20:	2200      	movs	r2, #0
 8000c22:	4619      	mov	r1, r3
 8000c24:	f003 face 	bl	80041c4 <HAL_GPIO_WritePin>
	HAL_StatusTypeDef status = HAL_SPI_TransmitReceive(imu->hspi, tx, rx, 3, HAL_MAX_DELAY);
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	6818      	ldr	r0, [r3, #0]
 8000c2c:	f107 0210 	add.w	r2, r7, #16
 8000c30:	f107 0114 	add.w	r1, r7, #20
 8000c34:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000c38:	9300      	str	r3, [sp, #0]
 8000c3a:	2303      	movs	r3, #3
 8000c3c:	f006 fa51 	bl	80070e2 <HAL_SPI_TransmitReceive>
 8000c40:	4603      	mov	r3, r0
 8000c42:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(imu->csAccelPinBank, imu->accelCSPin, GPIO_PIN_SET);
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	6858      	ldr	r0, [r3, #4]
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	899b      	ldrh	r3, [r3, #12]
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	4619      	mov	r1, r3
 8000c50:	f003 fab8 	bl	80041c4 <HAL_GPIO_WritePin>
	if (status == HAL_OK) {
 8000c54:	7dfb      	ldrb	r3, [r7, #23]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d103      	bne.n	8000c62 <accel_read_reg+0x6a>
		*data = rx[2];
 8000c5a:	7cba      	ldrb	r2, [r7, #18]
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	701a      	strb	r2, [r3, #0]
	} else {
		debug_print("Error: 0x%02X\r\n", status);
	}
}
 8000c60:	e004      	b.n	8000c6c <accel_read_reg+0x74>
		debug_print("Error: 0x%02X\r\n", status);
 8000c62:	7dfb      	ldrb	r3, [r7, #23]
 8000c64:	4619      	mov	r1, r3
 8000c66:	4803      	ldr	r0, [pc, #12]	@ (8000c74 <accel_read_reg+0x7c>)
 8000c68:	f001 fbf4 	bl	8002454 <debug_print>
}
 8000c6c:	bf00      	nop
 8000c6e:	3718      	adds	r7, #24
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	08012ce0 	.word	0x08012ce0

08000c78 <gyro_read_reg>:

void gyro_read_reg(BMI088 *imu, uint8_t regAddr, uint8_t *data) {
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b088      	sub	sp, #32
 8000c7c:	af02      	add	r7, sp, #8
 8000c7e:	60f8      	str	r0, [r7, #12]
 8000c80:	460b      	mov	r3, r1
 8000c82:	607a      	str	r2, [r7, #4]
 8000c84:	72fb      	strb	r3, [r7, #11]
	uint8_t tx[2] = {regAddr | 0x80, 0x00};
 8000c86:	7afb      	ldrb	r3, [r7, #11]
 8000c88:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	753b      	strb	r3, [r7, #20]
 8000c90:	2300      	movs	r3, #0
 8000c92:	757b      	strb	r3, [r7, #21]
	uint8_t rx[2];

	HAL_GPIO_WritePin(imu->csGyroPinBank, imu->gyroCSPin, GPIO_PIN_RESET);
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	6898      	ldr	r0, [r3, #8]
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	89db      	ldrh	r3, [r3, #14]
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	f003 fa90 	bl	80041c4 <HAL_GPIO_WritePin>
	HAL_StatusTypeDef status = HAL_SPI_TransmitReceive(imu->hspi, tx, rx, 2, HAL_MAX_DELAY);
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	6818      	ldr	r0, [r3, #0]
 8000ca8:	f107 0210 	add.w	r2, r7, #16
 8000cac:	f107 0114 	add.w	r1, r7, #20
 8000cb0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000cb4:	9300      	str	r3, [sp, #0]
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	f006 fa13 	bl	80070e2 <HAL_SPI_TransmitReceive>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(imu->csGyroPinBank, imu->gyroCSPin, GPIO_PIN_SET);
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	6898      	ldr	r0, [r3, #8]
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	89db      	ldrh	r3, [r3, #14]
 8000cc8:	2201      	movs	r2, #1
 8000cca:	4619      	mov	r1, r3
 8000ccc:	f003 fa7a 	bl	80041c4 <HAL_GPIO_WritePin>
	if (status == HAL_OK) {
 8000cd0:	7dfb      	ldrb	r3, [r7, #23]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d103      	bne.n	8000cde <gyro_read_reg+0x66>
		*data = rx[1];
 8000cd6:	7c7a      	ldrb	r2, [r7, #17]
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	701a      	strb	r2, [r3, #0]
	} else {
		debug_print("Error: 0x%02X\r\n", status);
	}
}
 8000cdc:	e004      	b.n	8000ce8 <gyro_read_reg+0x70>
		debug_print("Error: 0x%02X\r\n", status);
 8000cde:	7dfb      	ldrb	r3, [r7, #23]
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	4803      	ldr	r0, [pc, #12]	@ (8000cf0 <gyro_read_reg+0x78>)
 8000ce4:	f001 fbb6 	bl	8002454 <debug_print>
}
 8000ce8:	bf00      	nop
 8000cea:	3718      	adds	r7, #24
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	08012ce0 	.word	0x08012ce0

08000cf4 <accel_write_reg>:

void accel_write_reg(BMI088 *imu, uint8_t regAddr, uint8_t data) {
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
 8000cfc:	460b      	mov	r3, r1
 8000cfe:	70fb      	strb	r3, [r7, #3]
 8000d00:	4613      	mov	r3, r2
 8000d02:	70bb      	strb	r3, [r7, #2]
	uint8_t tx[2] = {regAddr, data};
 8000d04:	78fb      	ldrb	r3, [r7, #3]
 8000d06:	733b      	strb	r3, [r7, #12]
 8000d08:	78bb      	ldrb	r3, [r7, #2]
 8000d0a:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(imu->csAccelPinBank, imu->accelCSPin, GPIO_PIN_RESET);
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	6858      	ldr	r0, [r3, #4]
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	899b      	ldrh	r3, [r3, #12]
 8000d14:	2200      	movs	r2, #0
 8000d16:	4619      	mov	r1, r3
 8000d18:	f003 fa54 	bl	80041c4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(imu->hspi, tx, 2, HAL_MAX_DELAY);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	6818      	ldr	r0, [r3, #0]
 8000d20:	f107 010c 	add.w	r1, r7, #12
 8000d24:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d28:	2202      	movs	r2, #2
 8000d2a:	f006 f864 	bl	8006df6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(imu->csAccelPinBank, imu->accelCSPin, GPIO_PIN_SET);
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	6858      	ldr	r0, [r3, #4]
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	899b      	ldrh	r3, [r3, #12]
 8000d36:	2201      	movs	r2, #1
 8000d38:	4619      	mov	r1, r3
 8000d3a:	f003 fa43 	bl	80041c4 <HAL_GPIO_WritePin>
}
 8000d3e:	bf00      	nop
 8000d40:	3710      	adds	r7, #16
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}

08000d46 <gyro_write_reg>:

void gyro_write_reg(BMI088 *imu, uint8_t regAddr, uint8_t data) {
 8000d46:	b580      	push	{r7, lr}
 8000d48:	b084      	sub	sp, #16
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	6078      	str	r0, [r7, #4]
 8000d4e:	460b      	mov	r3, r1
 8000d50:	70fb      	strb	r3, [r7, #3]
 8000d52:	4613      	mov	r3, r2
 8000d54:	70bb      	strb	r3, [r7, #2]
	uint8_t tx[2] = {regAddr, data};
 8000d56:	78fb      	ldrb	r3, [r7, #3]
 8000d58:	733b      	strb	r3, [r7, #12]
 8000d5a:	78bb      	ldrb	r3, [r7, #2]
 8000d5c:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(imu->csGyroPinBank, imu->gyroCSPin, GPIO_PIN_RESET);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	6898      	ldr	r0, [r3, #8]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	89db      	ldrh	r3, [r3, #14]
 8000d66:	2200      	movs	r2, #0
 8000d68:	4619      	mov	r1, r3
 8000d6a:	f003 fa2b 	bl	80041c4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(imu->hspi, tx, 2, HAL_MAX_DELAY);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	6818      	ldr	r0, [r3, #0]
 8000d72:	f107 010c 	add.w	r1, r7, #12
 8000d76:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d7a:	2202      	movs	r2, #2
 8000d7c:	f006 f83b 	bl	8006df6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(imu->csGyroPinBank, imu->gyroCSPin, GPIO_PIN_SET);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	6898      	ldr	r0, [r3, #8]
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	89db      	ldrh	r3, [r3, #14]
 8000d88:	2201      	movs	r2, #1
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	f003 fa1a 	bl	80041c4 <HAL_GPIO_WritePin>
}
 8000d90:	bf00      	nop
 8000d92:	3710      	adds	r7, #16
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <bmi088_init>:
void bmi088_init(BMI088 *imu,
		SPI_HandleTypeDef *spi,
		GPIO_TypeDef *csAccelPinBank,
		GPIO_TypeDef *csGyroPinBank,
		uint16_t accelCSPin,
		uint16_t gyroCSPin) {
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b088      	sub	sp, #32
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	60f8      	str	r0, [r7, #12]
 8000da0:	60b9      	str	r1, [r7, #8]
 8000da2:	607a      	str	r2, [r7, #4]
 8000da4:	603b      	str	r3, [r7, #0]

	imu->hspi = spi;
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	68ba      	ldr	r2, [r7, #8]
 8000daa:	601a      	str	r2, [r3, #0]
	imu->csAccelPinBank = csAccelPinBank;
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	687a      	ldr	r2, [r7, #4]
 8000db0:	605a      	str	r2, [r3, #4]
	imu->csGyroPinBank = csGyroPinBank;
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	683a      	ldr	r2, [r7, #0]
 8000db6:	609a      	str	r2, [r3, #8]

	imu->accelCSPin = accelCSPin;
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8000dbc:	819a      	strh	r2, [r3, #12]
	imu->gyroCSPin = gyroCSPin;
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8000dc2:	81da      	strh	r2, [r3, #14]

	float accel_multipilier = 1.0f/(1<<15) * (1<<(BMI088_ACC_24G_RANGE + 1)) * 1.5f;
 8000dc4:	f04f 5369 	mov.w	r3, #977272832	@ 0x3a400000
 8000dc8:	61fb      	str	r3, [r7, #28]
	imu->accelConversion = 9.80665f * accel_multipilier; // data sheet page 27
 8000dca:	edd7 7a07 	vldr	s15, [r7, #28]
 8000dce:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 8000f80 <bmi088_init+0x1e8>
 8000dd2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
	imu->gyroConversion = 0.01745329251f * 1000.0f / 16384.0f; // data sheet page 39 (rad/s)
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	4a69      	ldr	r2, [pc, #420]	@ (8000f84 <bmi088_init+0x1ec>)
 8000de0:	62da      	str	r2, [r3, #44]	@ 0x2c

	// accel setup
	HAL_GPIO_WritePin(imu->csAccelPinBank, imu->accelCSPin, GPIO_PIN_RESET);
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	6858      	ldr	r0, [r3, #4]
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	899b      	ldrh	r3, [r3, #12]
 8000dea:	2200      	movs	r2, #0
 8000dec:	4619      	mov	r1, r3
 8000dee:	f003 f9e9 	bl	80041c4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000df2:	2001      	movs	r0, #1
 8000df4:	f002 fcbe 	bl	8003774 <HAL_Delay>
	HAL_GPIO_WritePin(imu->csAccelPinBank, imu->accelCSPin, GPIO_PIN_SET);
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	6858      	ldr	r0, [r3, #4]
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	899b      	ldrh	r3, [r3, #12]
 8000e00:	2201      	movs	r2, #1
 8000e02:	4619      	mov	r1, r3
 8000e04:	f003 f9de 	bl	80041c4 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8000e08:	2032      	movs	r0, #50	@ 0x32
 8000e0a:	f002 fcb3 	bl	8003774 <HAL_Delay>

	//soft reset the accelerometer
	accel_write_reg(imu, BMI088_ACC_REG_SOFTRESET, 0xB6);
 8000e0e:	22b6      	movs	r2, #182	@ 0xb6
 8000e10:	217e      	movs	r1, #126	@ 0x7e
 8000e12:	68f8      	ldr	r0, [r7, #12]
 8000e14:	f7ff ff6e 	bl	8000cf4 <accel_write_reg>
	HAL_Delay(50);
 8000e18:	2032      	movs	r0, #50	@ 0x32
 8000e1a:	f002 fcab 	bl	8003774 <HAL_Delay>

	uint8_t dummy;
	accel_read_reg(imu, BMI088_ACC_REG_CHIP_ID, &dummy);
 8000e1e:	f107 031b 	add.w	r3, r7, #27
 8000e22:	461a      	mov	r2, r3
 8000e24:	2100      	movs	r1, #0
 8000e26:	68f8      	ldr	r0, [r7, #12]
 8000e28:	f7ff fee6 	bl	8000bf8 <accel_read_reg>

	uint8_t chipID;
	accel_read_reg(imu, BMI088_ACC_REG_CHIP_ID, &chipID);
 8000e2c:	f107 031a 	add.w	r3, r7, #26
 8000e30:	461a      	mov	r2, r3
 8000e32:	2100      	movs	r1, #0
 8000e34:	68f8      	ldr	r0, [r7, #12]
 8000e36:	f7ff fedf 	bl	8000bf8 <accel_read_reg>
	if (chipID != 0x1E) {
 8000e3a:	7ebb      	ldrb	r3, [r7, #26]
 8000e3c:	2b1e      	cmp	r3, #30
 8000e3e:	d004      	beq.n	8000e4a <bmi088_init+0xb2>
		debug_print("Chip ID Reg Address: 0x%02X\r\n", chipID);
 8000e40:	7ebb      	ldrb	r3, [r7, #26]
 8000e42:	4619      	mov	r1, r3
 8000e44:	4850      	ldr	r0, [pc, #320]	@ (8000f88 <bmi088_init+0x1f0>)
 8000e46:	f001 fb05 	bl	8002454 <debug_print>
	}
	HAL_Delay(10);
 8000e4a:	200a      	movs	r0, #10
 8000e4c:	f002 fc92 	bl	8003774 <HAL_Delay>

	gyro_read_reg(imu, BMI088_GYR_REG_CHIP_ID, &chipID);
 8000e50:	f107 031a 	add.w	r3, r7, #26
 8000e54:	461a      	mov	r2, r3
 8000e56:	2100      	movs	r1, #0
 8000e58:	68f8      	ldr	r0, [r7, #12]
 8000e5a:	f7ff ff0d 	bl	8000c78 <gyro_read_reg>
	if (chipID != 0x0F) {
 8000e5e:	7ebb      	ldrb	r3, [r7, #26]
 8000e60:	2b0f      	cmp	r3, #15
 8000e62:	d004      	beq.n	8000e6e <bmi088_init+0xd6>
		debug_print("fuck fuck 0x%02X\r\n", chipID);
 8000e64:	7ebb      	ldrb	r3, [r7, #26]
 8000e66:	4619      	mov	r1, r3
 8000e68:	4848      	ldr	r0, [pc, #288]	@ (8000f8c <bmi088_init+0x1f4>)
 8000e6a:	f001 faf3 	bl	8002454 <debug_print>
	}
	HAL_Delay(10);
 8000e6e:	200a      	movs	r0, #10
 8000e70:	f002 fc80 	bl	8003774 <HAL_Delay>

	accel_write_reg(imu, BMI088_ACC_REG_PWR_CONF, 0x00);
 8000e74:	2200      	movs	r2, #0
 8000e76:	217c      	movs	r1, #124	@ 0x7c
 8000e78:	68f8      	ldr	r0, [r7, #12]
 8000e7a:	f7ff ff3b 	bl	8000cf4 <accel_write_reg>
	HAL_Delay(10);
 8000e7e:	200a      	movs	r0, #10
 8000e80:	f002 fc78 	bl	8003774 <HAL_Delay>

	accel_write_reg(imu, BMI088_ACC_REG_RANGE, BMI088_ACC_24G_RANGE);
 8000e84:	2203      	movs	r2, #3
 8000e86:	2141      	movs	r1, #65	@ 0x41
 8000e88:	68f8      	ldr	r0, [r7, #12]
 8000e8a:	f7ff ff33 	bl	8000cf4 <accel_write_reg>
	HAL_Delay(10);
 8000e8e:	200a      	movs	r0, #10
 8000e90:	f002 fc70 	bl	8003774 <HAL_Delay>

	accel_write_reg(imu, BMI088_ACC_REG_CONF, BMI088_ACC_ODR_200Hz | BMI088_ACC_BWP_OSR4);
 8000e94:	2289      	movs	r2, #137	@ 0x89
 8000e96:	2140      	movs	r1, #64	@ 0x40
 8000e98:	68f8      	ldr	r0, [r7, #12]
 8000e9a:	f7ff ff2b 	bl	8000cf4 <accel_write_reg>
	HAL_Delay(10);
 8000e9e:	200a      	movs	r0, #10
 8000ea0:	f002 fc68 	bl	8003774 <HAL_Delay>


	accel_write_reg(imu, BMI088_ACC_REG_PWR_CTRL, 0x04);
 8000ea4:	2204      	movs	r2, #4
 8000ea6:	217d      	movs	r1, #125	@ 0x7d
 8000ea8:	68f8      	ldr	r0, [r7, #12]
 8000eaa:	f7ff ff23 	bl	8000cf4 <accel_write_reg>
	HAL_Delay(10);
 8000eae:	200a      	movs	r0, #10
 8000eb0:	f002 fc60 	bl	8003774 <HAL_Delay>

	uint8_t range;
	accel_read_reg(imu, BMI088_ACC_REG_RANGE, &range);
 8000eb4:	f107 0319 	add.w	r3, r7, #25
 8000eb8:	461a      	mov	r2, r3
 8000eba:	2141      	movs	r1, #65	@ 0x41
 8000ebc:	68f8      	ldr	r0, [r7, #12]
 8000ebe:	f7ff fe9b 	bl	8000bf8 <accel_read_reg>
	if ((range & 0x03) != BMI088_ACC_24G_RANGE) {
 8000ec2:	7e7b      	ldrb	r3, [r7, #25]
 8000ec4:	f003 0303 	and.w	r3, r3, #3
 8000ec8:	2b03      	cmp	r3, #3
 8000eca:	d005      	beq.n	8000ed8 <bmi088_init+0x140>
		debug_print("Wrong accel range set! 0x%02X\r\n", range);
 8000ecc:	7e7b      	ldrb	r3, [r7, #25]
 8000ece:	4619      	mov	r1, r3
 8000ed0:	482f      	ldr	r0, [pc, #188]	@ (8000f90 <bmi088_init+0x1f8>)
 8000ed2:	f001 fabf 	bl	8002454 <debug_print>
 8000ed6:	e004      	b.n	8000ee2 <bmi088_init+0x14a>
	} else {
		debug_print("Correct accel range set! 0x%02X\r\n", range);
 8000ed8:	7e7b      	ldrb	r3, [r7, #25]
 8000eda:	4619      	mov	r1, r3
 8000edc:	482d      	ldr	r0, [pc, #180]	@ (8000f94 <bmi088_init+0x1fc>)
 8000ede:	f001 fab9 	bl	8002454 <debug_print>
	}

	uint8_t sampling;
	accel_read_reg(imu, BMI088_ACC_REG_CONF, &sampling);
 8000ee2:	f107 0318 	add.w	r3, r7, #24
 8000ee6:	461a      	mov	r2, r3
 8000ee8:	2140      	movs	r1, #64	@ 0x40
 8000eea:	68f8      	ldr	r0, [r7, #12]
 8000eec:	f7ff fe84 	bl	8000bf8 <accel_read_reg>
	if (sampling != (BMI088_ACC_ODR_200Hz | BMI088_ACC_BWP_OSR4)) {
 8000ef0:	7e3b      	ldrb	r3, [r7, #24]
 8000ef2:	2b89      	cmp	r3, #137	@ 0x89
 8000ef4:	d005      	beq.n	8000f02 <bmi088_init+0x16a>
		debug_print("Wrong accel sampling set! 0x%02X\r\n", sampling);
 8000ef6:	7e3b      	ldrb	r3, [r7, #24]
 8000ef8:	4619      	mov	r1, r3
 8000efa:	4827      	ldr	r0, [pc, #156]	@ (8000f98 <bmi088_init+0x200>)
 8000efc:	f001 faaa 	bl	8002454 <debug_print>
 8000f00:	e004      	b.n	8000f0c <bmi088_init+0x174>
	} else {
		debug_print("Correct accel sampling set! 0x%02X\r\n", sampling);
 8000f02:	7e3b      	ldrb	r3, [r7, #24]
 8000f04:	4619      	mov	r1, r3
 8000f06:	4825      	ldr	r0, [pc, #148]	@ (8000f9c <bmi088_init+0x204>)
 8000f08:	f001 faa4 	bl	8002454 <debug_print>
	}

	uint8_t isOn;
	accel_read_reg(imu, BMI088_ACC_REG_PWR_CTRL, &isOn);
 8000f0c:	f107 0317 	add.w	r3, r7, #23
 8000f10:	461a      	mov	r2, r3
 8000f12:	217d      	movs	r1, #125	@ 0x7d
 8000f14:	68f8      	ldr	r0, [r7, #12]
 8000f16:	f7ff fe6f 	bl	8000bf8 <accel_read_reg>
	if (isOn != 0x04) {
 8000f1a:	7dfb      	ldrb	r3, [r7, #23]
 8000f1c:	2b04      	cmp	r3, #4
 8000f1e:	d005      	beq.n	8000f2c <bmi088_init+0x194>
		debug_print("Accel not turned on! 0x%02X\r\n", isOn);
 8000f20:	7dfb      	ldrb	r3, [r7, #23]
 8000f22:	4619      	mov	r1, r3
 8000f24:	481e      	ldr	r0, [pc, #120]	@ (8000fa0 <bmi088_init+0x208>)
 8000f26:	f001 fa95 	bl	8002454 <debug_print>
 8000f2a:	e004      	b.n	8000f36 <bmi088_init+0x19e>
	} else {
		debug_print("Accel turned on! 0x%02X\r\n", isOn);
 8000f2c:	7dfb      	ldrb	r3, [r7, #23]
 8000f2e:	4619      	mov	r1, r3
 8000f30:	481c      	ldr	r0, [pc, #112]	@ (8000fa4 <bmi088_init+0x20c>)
 8000f32:	f001 fa8f 	bl	8002454 <debug_print>
	}

	// gyro setup
	HAL_GPIO_WritePin(imu->csGyroPinBank, imu->gyroCSPin, GPIO_PIN_SET);
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	6898      	ldr	r0, [r3, #8]
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	89db      	ldrh	r3, [r3, #14]
 8000f3e:	2201      	movs	r2, #1
 8000f40:	4619      	mov	r1, r3
 8000f42:	f003 f93f 	bl	80041c4 <HAL_GPIO_WritePin>

	gyro_write_reg(imu, BMI088_GYR_REG_SOFTRESET, 0xB6);
 8000f46:	22b6      	movs	r2, #182	@ 0xb6
 8000f48:	2114      	movs	r1, #20
 8000f4a:	68f8      	ldr	r0, [r7, #12]
 8000f4c:	f7ff fefb 	bl	8000d46 <gyro_write_reg>
	HAL_Delay(250);
 8000f50:	20fa      	movs	r0, #250	@ 0xfa
 8000f52:	f002 fc0f 	bl	8003774 <HAL_Delay>

	gyro_write_reg(imu, BMI088_GYR_REG_RANGE, BMI088_GYR_2000DPS_RANGE);
 8000f56:	2200      	movs	r2, #0
 8000f58:	210f      	movs	r1, #15
 8000f5a:	68f8      	ldr	r0, [r7, #12]
 8000f5c:	f7ff fef3 	bl	8000d46 <gyro_write_reg>
	HAL_Delay(10);
 8000f60:	200a      	movs	r0, #10
 8000f62:	f002 fc07 	bl	8003774 <HAL_Delay>

	gyro_write_reg(imu, BMI088_GYR_REG_BANDWIDTH, BMI088_GYR_ODR_100Hz_BW_32Hz);
 8000f66:	2207      	movs	r2, #7
 8000f68:	2110      	movs	r1, #16
 8000f6a:	68f8      	ldr	r0, [r7, #12]
 8000f6c:	f7ff feeb 	bl	8000d46 <gyro_write_reg>
	HAL_Delay(10);
 8000f70:	200a      	movs	r0, #10
 8000f72:	f002 fbff 	bl	8003774 <HAL_Delay>
}
 8000f76:	bf00      	nop
 8000f78:	3720      	adds	r7, #32
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	411ce80a 	.word	0x411ce80a
 8000f84:	3a8ba058 	.word	0x3a8ba058
 8000f88:	08012cf0 	.word	0x08012cf0
 8000f8c:	08012d10 	.word	0x08012d10
 8000f90:	08012d24 	.word	0x08012d24
 8000f94:	08012d44 	.word	0x08012d44
 8000f98:	08012d68 	.word	0x08012d68
 8000f9c:	08012d8c 	.word	0x08012d8c
 8000fa0:	08012db4 	.word	0x08012db4
 8000fa4:	08012dd4 	.word	0x08012dd4

08000fa8 <accel_step>:

void accel_step(BMI088 *imu) {
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b08a      	sub	sp, #40	@ 0x28
 8000fac:	af02      	add	r7, sp, #8
 8000fae:	6078      	str	r0, [r7, #4]
	uint8_t tx[8] = {(BMI088_ACC_REG_DATA | 0x80), 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8000fb0:	4a32      	ldr	r2, [pc, #200]	@ (800107c <accel_step+0xd4>)
 8000fb2:	f107 0310 	add.w	r3, r7, #16
 8000fb6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fba:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t rx[8];

	HAL_GPIO_WritePin(imu->csAccelPinBank, imu->accelCSPin, GPIO_PIN_RESET);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6858      	ldr	r0, [r3, #4]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	899b      	ldrh	r3, [r3, #12]
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	4619      	mov	r1, r3
 8000fca:	f003 f8fb 	bl	80041c4 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(imu->hspi, tx, rx, 8, HAL_MAX_DELAY);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6818      	ldr	r0, [r3, #0]
 8000fd2:	f107 0208 	add.w	r2, r7, #8
 8000fd6:	f107 0110 	add.w	r1, r7, #16
 8000fda:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000fde:	9300      	str	r3, [sp, #0]
 8000fe0:	2308      	movs	r3, #8
 8000fe2:	f006 f87e 	bl	80070e2 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(imu->csAccelPinBank, imu->accelCSPin, GPIO_PIN_SET);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6858      	ldr	r0, [r3, #4]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	899b      	ldrh	r3, [r3, #12]
 8000fee:	2201      	movs	r2, #1
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	f003 f8e7 	bl	80041c4 <HAL_GPIO_WritePin>

	int16_t raw_x = (int16_t) ((rx[3] << 8) | rx[2]);
 8000ff6:	7afb      	ldrb	r3, [r7, #11]
 8000ff8:	021b      	lsls	r3, r3, #8
 8000ffa:	b21a      	sxth	r2, r3
 8000ffc:	7abb      	ldrb	r3, [r7, #10]
 8000ffe:	b21b      	sxth	r3, r3
 8001000:	4313      	orrs	r3, r2
 8001002:	83fb      	strh	r3, [r7, #30]
	int16_t raw_y = (int16_t) ((rx[5] << 8) | rx[4]);
 8001004:	7b7b      	ldrb	r3, [r7, #13]
 8001006:	021b      	lsls	r3, r3, #8
 8001008:	b21a      	sxth	r2, r3
 800100a:	7b3b      	ldrb	r3, [r7, #12]
 800100c:	b21b      	sxth	r3, r3
 800100e:	4313      	orrs	r3, r2
 8001010:	83bb      	strh	r3, [r7, #28]
	int16_t raw_z = (int16_t) ((rx[7] << 8) | rx[6]);
 8001012:	7bfb      	ldrb	r3, [r7, #15]
 8001014:	021b      	lsls	r3, r3, #8
 8001016:	b21a      	sxth	r2, r3
 8001018:	7bbb      	ldrb	r3, [r7, #14]
 800101a:	b21b      	sxth	r3, r3
 800101c:	4313      	orrs	r3, r2
 800101e:	837b      	strh	r3, [r7, #26]

	imu->lastAccel[0] = raw_x * imu->accelConversion;
 8001020:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001024:	ee07 3a90 	vmov	s15, r3
 8001028:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001032:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	edc3 7a04 	vstr	s15, [r3, #16]
	imu->lastAccel[1] = raw_y * imu->accelConversion;
 800103c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001040:	ee07 3a90 	vmov	s15, r3
 8001044:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800104e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	edc3 7a05 	vstr	s15, [r3, #20]
	imu->lastAccel[2] = raw_z * imu->accelConversion;
 8001058:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800105c:	ee07 3a90 	vmov	s15, r3
 8001060:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800106a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	edc3 7a06 	vstr	s15, [r3, #24]
}
 8001074:	bf00      	nop
 8001076:	3720      	adds	r7, #32
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	08012df0 	.word	0x08012df0

08001080 <gyro_step>:

void gyro_step(BMI088 *imu) {
 8001080:	b580      	push	{r7, lr}
 8001082:	b08a      	sub	sp, #40	@ 0x28
 8001084:	af02      	add	r7, sp, #8
 8001086:	6078      	str	r0, [r7, #4]
	uint8_t tx[7] = {(BMI088_GYR_REG_DATA | 0x80), 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8001088:	4a34      	ldr	r2, [pc, #208]	@ (800115c <gyro_step+0xdc>)
 800108a:	f107 0310 	add.w	r3, r7, #16
 800108e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001092:	6018      	str	r0, [r3, #0]
 8001094:	3304      	adds	r3, #4
 8001096:	8019      	strh	r1, [r3, #0]
 8001098:	3302      	adds	r3, #2
 800109a:	0c0a      	lsrs	r2, r1, #16
 800109c:	701a      	strb	r2, [r3, #0]
	uint8_t rx[7];

	HAL_GPIO_WritePin(imu->csGyroPinBank, imu->gyroCSPin, GPIO_PIN_RESET);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6898      	ldr	r0, [r3, #8]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	89db      	ldrh	r3, [r3, #14]
 80010a6:	2200      	movs	r2, #0
 80010a8:	4619      	mov	r1, r3
 80010aa:	f003 f88b 	bl	80041c4 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(imu->hspi, tx, rx, 7, HAL_MAX_DELAY);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6818      	ldr	r0, [r3, #0]
 80010b2:	f107 0208 	add.w	r2, r7, #8
 80010b6:	f107 0110 	add.w	r1, r7, #16
 80010ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80010be:	9300      	str	r3, [sp, #0]
 80010c0:	2307      	movs	r3, #7
 80010c2:	f006 f80e 	bl	80070e2 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(imu->csGyroPinBank, imu->gyroCSPin, GPIO_PIN_SET);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6898      	ldr	r0, [r3, #8]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	89db      	ldrh	r3, [r3, #14]
 80010ce:	2201      	movs	r2, #1
 80010d0:	4619      	mov	r1, r3
 80010d2:	f003 f877 	bl	80041c4 <HAL_GPIO_WritePin>

	int16_t raw_x = (int16_t) ((rx[2] << 8) | rx[1]);
 80010d6:	7abb      	ldrb	r3, [r7, #10]
 80010d8:	021b      	lsls	r3, r3, #8
 80010da:	b21a      	sxth	r2, r3
 80010dc:	7a7b      	ldrb	r3, [r7, #9]
 80010de:	b21b      	sxth	r3, r3
 80010e0:	4313      	orrs	r3, r2
 80010e2:	83fb      	strh	r3, [r7, #30]
	int16_t raw_y = (int16_t) ((rx[4] << 8) | rx[3]);
 80010e4:	7b3b      	ldrb	r3, [r7, #12]
 80010e6:	021b      	lsls	r3, r3, #8
 80010e8:	b21a      	sxth	r2, r3
 80010ea:	7afb      	ldrb	r3, [r7, #11]
 80010ec:	b21b      	sxth	r3, r3
 80010ee:	4313      	orrs	r3, r2
 80010f0:	83bb      	strh	r3, [r7, #28]
	int16_t raw_z = (int16_t) ((rx[6] << 8) | rx[5]);
 80010f2:	7bbb      	ldrb	r3, [r7, #14]
 80010f4:	021b      	lsls	r3, r3, #8
 80010f6:	b21a      	sxth	r2, r3
 80010f8:	7b7b      	ldrb	r3, [r7, #13]
 80010fa:	b21b      	sxth	r3, r3
 80010fc:	4313      	orrs	r3, r2
 80010fe:	837b      	strh	r3, [r7, #26]

	imu->lastGyro[0] = raw_x * imu->gyroConversion;
 8001100:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001104:	ee07 3a90 	vmov	s15, r3
 8001108:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001112:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	edc3 7a07 	vstr	s15, [r3, #28]
	imu->lastGyro[1] = raw_y * imu->gyroConversion;
 800111c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001120:	ee07 3a90 	vmov	s15, r3
 8001124:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800112e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	edc3 7a08 	vstr	s15, [r3, #32]
	imu->lastGyro[2] = raw_z * imu->gyroConversion;
 8001138:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800113c:	ee07 3a90 	vmov	s15, r3
 8001140:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800114a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
}
 8001154:	bf00      	nop
 8001156:	3720      	adds	r7, #32
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	08012df8 	.word	0x08012df8

08001160 <accel_get>:

float *accel_get(BMI088 *imu) {
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
	return imu->lastAccel;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	3310      	adds	r3, #16
}
 800116c:	4618      	mov	r0, r3
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr

08001178 <gyro_get>:

float *gyro_get(BMI088 *imu) {
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
	return imu->lastGyro;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	331c      	adds	r3, #28
}
 8001184:	4618      	mov	r0, r3
 8001186:	370c      	adds	r7, #12
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr

08001190 <bmp_read_reg>:
#define BMP390_STATUS_DRDY_PRES (1 << 5) // Data ready pressure bit
#define BMP390_STATUS_DRDY_TEMP (1 << 6) // Data ready temperature bit
#define BMP390_SPI_TIMEOUT      (100)


static bool bmp_read_reg(BMP390 *baro, uint8_t reg, uint8_t *data) {
 8001190:	b580      	push	{r7, lr}
 8001192:	b088      	sub	sp, #32
 8001194:	af02      	add	r7, sp, #8
 8001196:	60f8      	str	r0, [r7, #12]
 8001198:	460b      	mov	r3, r1
 800119a:	607a      	str	r2, [r7, #4]
 800119c:	72fb      	strb	r3, [r7, #11]
    uint8_t tx[3] = { reg | 0x80, 0x00, 0x00 };
 800119e:	7afb      	ldrb	r3, [r7, #11]
 80011a0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	753b      	strb	r3, [r7, #20]
 80011a8:	2300      	movs	r3, #0
 80011aa:	757b      	strb	r3, [r7, #21]
 80011ac:	2300      	movs	r3, #0
 80011ae:	75bb      	strb	r3, [r7, #22]
    uint8_t rx[3] = {0};
 80011b0:	4b1a      	ldr	r3, [pc, #104]	@ (800121c <bmp_read_reg+0x8c>)
 80011b2:	881b      	ldrh	r3, [r3, #0]
 80011b4:	823b      	strh	r3, [r7, #16]
 80011b6:	2300      	movs	r3, #0
 80011b8:	74bb      	strb	r3, [r7, #18]
    HAL_StatusTypeDef status;

    HAL_GPIO_WritePin(baro->csPort, baro->csPin, GPIO_PIN_RESET);
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	6858      	ldr	r0, [r3, #4]
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	891b      	ldrh	r3, [r3, #8]
 80011c2:	2200      	movs	r2, #0
 80011c4:	4619      	mov	r1, r3
 80011c6:	f002 fffd 	bl	80041c4 <HAL_GPIO_WritePin>
    status = HAL_SPI_TransmitReceive(baro->hspi, tx, rx, 3, BMP390_SPI_TIMEOUT);
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	6818      	ldr	r0, [r3, #0]
 80011ce:	f107 0210 	add.w	r2, r7, #16
 80011d2:	f107 0114 	add.w	r1, r7, #20
 80011d6:	2364      	movs	r3, #100	@ 0x64
 80011d8:	9300      	str	r3, [sp, #0]
 80011da:	2303      	movs	r3, #3
 80011dc:	f005 ff81 	bl	80070e2 <HAL_SPI_TransmitReceive>
 80011e0:	4603      	mov	r3, r0
 80011e2:	75fb      	strb	r3, [r7, #23]
    HAL_GPIO_WritePin(baro->csPort, baro->csPin, GPIO_PIN_SET);
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	6858      	ldr	r0, [r3, #4]
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	891b      	ldrh	r3, [r3, #8]
 80011ec:	2201      	movs	r2, #1
 80011ee:	4619      	mov	r1, r3
 80011f0:	f002 ffe8 	bl	80041c4 <HAL_GPIO_WritePin>

    if (status != HAL_OK) {
 80011f4:	7dfb      	ldrb	r3, [r7, #23]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d007      	beq.n	800120a <bmp_read_reg+0x7a>
        debug_print("BMP390 SPI Error (Read Reg 0x%02X): %d\r\n", reg, status);
 80011fa:	7afb      	ldrb	r3, [r7, #11]
 80011fc:	7dfa      	ldrb	r2, [r7, #23]
 80011fe:	4619      	mov	r1, r3
 8001200:	4807      	ldr	r0, [pc, #28]	@ (8001220 <bmp_read_reg+0x90>)
 8001202:	f001 f927 	bl	8002454 <debug_print>
        return false;
 8001206:	2300      	movs	r3, #0
 8001208:	e003      	b.n	8001212 <bmp_read_reg+0x82>
    }

    *data = rx[2];
 800120a:	7cba      	ldrb	r2, [r7, #18]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	701a      	strb	r2, [r3, #0]
    return true;
 8001210:	2301      	movs	r3, #1
}
 8001212:	4618      	mov	r0, r3
 8001214:	3718      	adds	r7, #24
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	08012e2c 	.word	0x08012e2c
 8001220:	08012e00 	.word	0x08012e00

08001224 <bmp_write_reg>:

static bool bmp_write_reg(BMP390 *baro, uint8_t reg, uint8_t data) {
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	460b      	mov	r3, r1
 800122e:	70fb      	strb	r3, [r7, #3]
 8001230:	4613      	mov	r3, r2
 8001232:	70bb      	strb	r3, [r7, #2]
    uint8_t tx[2] = { reg & ~0x80, data };
 8001234:	78fb      	ldrb	r3, [r7, #3]
 8001236:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800123a:	b2db      	uxtb	r3, r3
 800123c:	733b      	strb	r3, [r7, #12]
 800123e:	78bb      	ldrb	r3, [r7, #2]
 8001240:	737b      	strb	r3, [r7, #13]
    HAL_StatusTypeDef status;

    HAL_GPIO_WritePin(baro->csPort, baro->csPin, GPIO_PIN_RESET);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6858      	ldr	r0, [r3, #4]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	891b      	ldrh	r3, [r3, #8]
 800124a:	2200      	movs	r2, #0
 800124c:	4619      	mov	r1, r3
 800124e:	f002 ffb9 	bl	80041c4 <HAL_GPIO_WritePin>
    status = HAL_SPI_Transmit(baro->hspi, tx, 2, BMP390_SPI_TIMEOUT);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6818      	ldr	r0, [r3, #0]
 8001256:	f107 010c 	add.w	r1, r7, #12
 800125a:	2364      	movs	r3, #100	@ 0x64
 800125c:	2202      	movs	r2, #2
 800125e:	f005 fdca 	bl	8006df6 <HAL_SPI_Transmit>
 8001262:	4603      	mov	r3, r0
 8001264:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(baro->csPort, baro->csPin, GPIO_PIN_SET);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6858      	ldr	r0, [r3, #4]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	891b      	ldrh	r3, [r3, #8]
 800126e:	2201      	movs	r2, #1
 8001270:	4619      	mov	r1, r3
 8001272:	f002 ffa7 	bl	80041c4 <HAL_GPIO_WritePin>

    if (status != HAL_OK) {
 8001276:	7bfb      	ldrb	r3, [r7, #15]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d007      	beq.n	800128c <bmp_write_reg+0x68>
        debug_print("BMP390 SPI Error (Write Reg 0x%02X): %d\r\n", reg, status);
 800127c:	78fb      	ldrb	r3, [r7, #3]
 800127e:	7bfa      	ldrb	r2, [r7, #15]
 8001280:	4619      	mov	r1, r3
 8001282:	4805      	ldr	r0, [pc, #20]	@ (8001298 <bmp_write_reg+0x74>)
 8001284:	f001 f8e6 	bl	8002454 <debug_print>
        return false;
 8001288:	2300      	movs	r3, #0
 800128a:	e000      	b.n	800128e <bmp_write_reg+0x6a>
    }
    return true;
 800128c:	2301      	movs	r3, #1
}
 800128e:	4618      	mov	r0, r3
 8001290:	3710      	adds	r7, #16
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	08012e30 	.word	0x08012e30

0800129c <bmp_read_buf>:

static bool bmp_read_buf(BMP390 *baro, uint8_t reg, uint8_t *data, uint8_t len) {
 800129c:	b590      	push	{r4, r7, lr}
 800129e:	b099      	sub	sp, #100	@ 0x64
 80012a0:	af02      	add	r7, sp, #8
 80012a2:	60f8      	str	r0, [r7, #12]
 80012a4:	607a      	str	r2, [r7, #4]
 80012a6:	461a      	mov	r2, r3
 80012a8:	460b      	mov	r3, r1
 80012aa:	72fb      	strb	r3, [r7, #11]
 80012ac:	4613      	mov	r3, r2
 80012ae:	72bb      	strb	r3, [r7, #10]
    if (len == 0) return true;
 80012b0:	7abb      	ldrb	r3, [r7, #10]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d101      	bne.n	80012ba <bmp_read_buf+0x1e>
 80012b6:	2301      	movs	r3, #1
 80012b8:	e061      	b.n	800137e <bmp_read_buf+0xe2>

    #define MAX_SPI_BUF_LEN 32
    if (len > MAX_SPI_BUF_LEN - 2) {
 80012ba:	7abb      	ldrb	r3, [r7, #10]
 80012bc:	2b1e      	cmp	r3, #30
 80012be:	d906      	bls.n	80012ce <bmp_read_buf+0x32>
         debug_print("BMP390 Read Buf Error: len %d too large\r\n", len);
 80012c0:	7abb      	ldrb	r3, [r7, #10]
 80012c2:	4619      	mov	r1, r3
 80012c4:	4830      	ldr	r0, [pc, #192]	@ (8001388 <bmp_read_buf+0xec>)
 80012c6:	f001 f8c5 	bl	8002454 <debug_print>
         return false;
 80012ca:	2300      	movs	r3, #0
 80012cc:	e057      	b.n	800137e <bmp_read_buf+0xe2>
    }

    uint8_t total = 2 + len;
 80012ce:	7abb      	ldrb	r3, [r7, #10]
 80012d0:	3302      	adds	r3, #2
 80012d2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    uint8_t tx[MAX_SPI_BUF_LEN] = {0};
 80012d6:	2300      	movs	r3, #0
 80012d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80012da:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80012de:	2200      	movs	r2, #0
 80012e0:	601a      	str	r2, [r3, #0]
 80012e2:	605a      	str	r2, [r3, #4]
 80012e4:	609a      	str	r2, [r3, #8]
 80012e6:	60da      	str	r2, [r3, #12]
 80012e8:	611a      	str	r2, [r3, #16]
 80012ea:	615a      	str	r2, [r3, #20]
 80012ec:	619a      	str	r2, [r3, #24]
    uint8_t rx[MAX_SPI_BUF_LEN] = {0};
 80012ee:	2300      	movs	r3, #0
 80012f0:	617b      	str	r3, [r7, #20]
 80012f2:	f107 0318 	add.w	r3, r7, #24
 80012f6:	2200      	movs	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]
 80012fa:	605a      	str	r2, [r3, #4]
 80012fc:	609a      	str	r2, [r3, #8]
 80012fe:	60da      	str	r2, [r3, #12]
 8001300:	611a      	str	r2, [r3, #16]
 8001302:	615a      	str	r2, [r3, #20]
 8001304:	619a      	str	r2, [r3, #24]
    HAL_StatusTypeDef status;

    tx[0] = reg | 0x80;
 8001306:	7afb      	ldrb	r3, [r7, #11]
 8001308:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800130c:	b2db      	uxtb	r3, r3
 800130e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    HAL_GPIO_WritePin(baro->csPort, baro->csPin, GPIO_PIN_RESET);
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	6858      	ldr	r0, [r3, #4]
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	891b      	ldrh	r3, [r3, #8]
 800131a:	2200      	movs	r2, #0
 800131c:	4619      	mov	r1, r3
 800131e:	f002 ff51 	bl	80041c4 <HAL_GPIO_WritePin>
    status = HAL_SPI_TransmitReceive(baro->hspi, tx, rx, total, BMP390_SPI_TIMEOUT);
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	6818      	ldr	r0, [r3, #0]
 8001326:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800132a:	b29b      	uxth	r3, r3
 800132c:	f107 0214 	add.w	r2, r7, #20
 8001330:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8001334:	2464      	movs	r4, #100	@ 0x64
 8001336:	9400      	str	r4, [sp, #0]
 8001338:	f005 fed3 	bl	80070e2 <HAL_SPI_TransmitReceive>
 800133c:	4603      	mov	r3, r0
 800133e:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
    HAL_GPIO_WritePin(baro->csPort, baro->csPin, GPIO_PIN_SET);
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	6858      	ldr	r0, [r3, #4]
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	891b      	ldrh	r3, [r3, #8]
 800134a:	2201      	movs	r2, #1
 800134c:	4619      	mov	r1, r3
 800134e:	f002 ff39 	bl	80041c4 <HAL_GPIO_WritePin>

    if (status != HAL_OK) {
 8001352:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8001356:	2b00      	cmp	r3, #0
 8001358:	d008      	beq.n	800136c <bmp_read_buf+0xd0>
        debug_print("BMP390 SPI Error (Read Buf 0x%02X, len %d): %d\r\n", reg, len, status);
 800135a:	7af9      	ldrb	r1, [r7, #11]
 800135c:	7aba      	ldrb	r2, [r7, #10]
 800135e:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8001362:	480a      	ldr	r0, [pc, #40]	@ (800138c <bmp_read_buf+0xf0>)
 8001364:	f001 f876 	bl	8002454 <debug_print>
        return false;
 8001368:	2300      	movs	r3, #0
 800136a:	e008      	b.n	800137e <bmp_read_buf+0xe2>
    }

    memcpy(data, rx + 2, len);
 800136c:	f107 0314 	add.w	r3, r7, #20
 8001370:	3302      	adds	r3, #2
 8001372:	7aba      	ldrb	r2, [r7, #10]
 8001374:	4619      	mov	r1, r3
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	f00e ffeb 	bl	8010352 <memcpy>
    return true;
 800137c:	2301      	movs	r3, #1
}
 800137e:	4618      	mov	r0, r3
 8001380:	375c      	adds	r7, #92	@ 0x5c
 8001382:	46bd      	mov	sp, r7
 8001384:	bd90      	pop	{r4, r7, pc}
 8001386:	bf00      	nop
 8001388:	08012e5c 	.word	0x08012e5c
 800138c:	08012e88 	.word	0x08012e88

08001390 <bmp_parse_calib>:

static void bmp_parse_calib(BMP390 *baro, uint8_t *raw) {
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	6039      	str	r1, [r7, #0]
    baro->raw_calib.nvm_par_t1 = BMP390_CONCAT2BYTES(raw[1], raw[0]);
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	3301      	adds	r3, #1
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	021b      	lsls	r3, r3, #8
 80013a2:	b21a      	sxth	r2, r3
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	b21b      	sxth	r3, r3
 80013aa:	4313      	orrs	r3, r2
 80013ac:	b21b      	sxth	r3, r3
 80013ae:	b29a      	uxth	r2, r3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	82da      	strh	r2, [r3, #22]
    baro->calib.par_t1 = (float)baro->raw_calib.nvm_par_t1 / powf(2, -8);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	8adb      	ldrh	r3, [r3, #22]
 80013b8:	ee07 3a90 	vmov	s15, r3
 80013bc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80013c0:	eddf 6aa4 	vldr	s13, [pc, #656]	@ 8001654 <bmp_parse_calib+0x2c4>
 80013c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

    baro->raw_calib.nvm_par_t2 = BMP390_CONCAT2BYTES(raw[3], raw[2]);
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	3303      	adds	r3, #3
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	021b      	lsls	r3, r3, #8
 80013d6:	b21a      	sxth	r2, r3
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	3302      	adds	r3, #2
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	b21b      	sxth	r3, r3
 80013e0:	4313      	orrs	r3, r2
 80013e2:	b21b      	sxth	r3, r3
 80013e4:	b29a      	uxth	r2, r3
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	831a      	strh	r2, [r3, #24]
    baro->calib.par_t2 = (float)baro->raw_calib.nvm_par_t2 / powf(2, 30);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	8b1b      	ldrh	r3, [r3, #24]
 80013ee:	ee07 3a90 	vmov	s15, r3
 80013f2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80013f6:	eddf 6a98 	vldr	s13, [pc, #608]	@ 8001658 <bmp_parse_calib+0x2c8>
 80013fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30

    baro->raw_calib.nvm_par_t3 = (int8_t)raw[4];
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	3304      	adds	r3, #4
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	b25a      	sxtb	r2, r3
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	769a      	strb	r2, [r3, #26]
    baro->calib.par_t3 = (float)baro->raw_calib.nvm_par_t3 / powf(2, 48);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	f993 301a 	ldrsb.w	r3, [r3, #26]
 8001416:	ee07 3a90 	vmov	s15, r3
 800141a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800141e:	eddf 6a8f 	vldr	s13, [pc, #572]	@ 800165c <bmp_parse_calib+0x2cc>
 8001422:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34

    baro->raw_calib.nvm_par_p1 = (int16_t)BMP390_CONCAT2BYTES(raw[6], raw[5]);
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	3306      	adds	r3, #6
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	021b      	lsls	r3, r3, #8
 8001434:	b21a      	sxth	r2, r3
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	3305      	adds	r3, #5
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	b21b      	sxth	r3, r3
 800143e:	4313      	orrs	r3, r2
 8001440:	b21a      	sxth	r2, r3
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	839a      	strh	r2, [r3, #28]
    baro->calib.par_p1 = (((float)baro->raw_calib.nvm_par_p1) - powf(2,14)) / powf(2,20);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800144c:	ee07 3a90 	vmov	s15, r3
 8001450:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001454:	ed9f 7a82 	vldr	s14, [pc, #520]	@ 8001660 <bmp_parse_calib+0x2d0>
 8001458:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800145c:	eddf 6a81 	vldr	s13, [pc, #516]	@ 8001664 <bmp_parse_calib+0x2d4>
 8001460:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38

    baro->raw_calib.nvm_par_p2 = (int16_t)BMP390_CONCAT2BYTES(raw[8], raw[7]);
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	3308      	adds	r3, #8
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	021b      	lsls	r3, r3, #8
 8001472:	b21a      	sxth	r2, r3
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	3307      	adds	r3, #7
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	b21b      	sxth	r3, r3
 800147c:	4313      	orrs	r3, r2
 800147e:	b21a      	sxth	r2, r3
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	83da      	strh	r2, [r3, #30]
    baro->calib.par_p2 = (((float)baro->raw_calib.nvm_par_p2) - powf(2,14)) / powf(2,29);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 800148a:	ee07 3a90 	vmov	s15, r3
 800148e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001492:	ed9f 7a73 	vldr	s14, [pc, #460]	@ 8001660 <bmp_parse_calib+0x2d0>
 8001496:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800149a:	eddf 6a73 	vldr	s13, [pc, #460]	@ 8001668 <bmp_parse_calib+0x2d8>
 800149e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c

    baro->raw_calib.nvm_par_p3 = (int8_t)raw[9];
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	3309      	adds	r3, #9
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	b25a      	sxtb	r2, r3
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	f883 2020 	strb.w	r2, [r3, #32]
    baro->calib.par_p3 = (float)baro->raw_calib.nvm_par_p3 / powf(2,32);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	f993 3020 	ldrsb.w	r3, [r3, #32]
 80014bc:	ee07 3a90 	vmov	s15, r3
 80014c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014c4:	eddf 6a69 	vldr	s13, [pc, #420]	@ 800166c <bmp_parse_calib+0x2dc>
 80014c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40

    baro->raw_calib.nvm_par_p4 = (int8_t)raw[10];
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	330a      	adds	r3, #10
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	b25a      	sxtb	r2, r3
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    baro->calib.par_p4 = (float)baro->raw_calib.nvm_par_p4 / powf(2,37);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	f993 3021 	ldrsb.w	r3, [r3, #33]	@ 0x21
 80014e6:	ee07 3a90 	vmov	s15, r3
 80014ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014ee:	eddf 6a60 	vldr	s13, [pc, #384]	@ 8001670 <bmp_parse_calib+0x2e0>
 80014f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44

    baro->raw_calib.nvm_par_p5 = BMP390_CONCAT2BYTES(raw[12], raw[11]);
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	330c      	adds	r3, #12
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	021b      	lsls	r3, r3, #8
 8001504:	b21a      	sxth	r2, r3
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	330b      	adds	r3, #11
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	b21b      	sxth	r3, r3
 800150e:	4313      	orrs	r3, r2
 8001510:	b21b      	sxth	r3, r3
 8001512:	b29a      	uxth	r2, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	845a      	strh	r2, [r3, #34]	@ 0x22
    baro->calib.par_p5 = (float)baro->raw_calib.nvm_par_p5 / powf(2, -3);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 800151c:	ee07 3a90 	vmov	s15, r3
 8001520:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001524:	eef4 6a00 	vmov.f32	s13, #64	@ 0x3e000000  0.125
 8001528:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48

    baro->raw_calib.nvm_par_p6 = BMP390_CONCAT2BYTES(raw[14], raw[13]);
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	330e      	adds	r3, #14
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	021b      	lsls	r3, r3, #8
 800153a:	b21a      	sxth	r2, r3
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	330d      	adds	r3, #13
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	b21b      	sxth	r3, r3
 8001544:	4313      	orrs	r3, r2
 8001546:	b21b      	sxth	r3, r3
 8001548:	b29a      	uxth	r2, r3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	849a      	strh	r2, [r3, #36]	@ 0x24
    baro->calib.par_p6 = (float)baro->raw_calib.nvm_par_p6 / powf(2,6);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001552:	ee07 3a90 	vmov	s15, r3
 8001556:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800155a:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8001674 <bmp_parse_calib+0x2e4>
 800155e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c

    baro->raw_calib.nvm_par_p7 = (int8_t)raw[15];
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	330f      	adds	r3, #15
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	b25a      	sxtb	r2, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
    baro->calib.par_p7 = (float)baro->raw_calib.nvm_par_p7 / powf(2,8);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	f993 3026 	ldrsb.w	r3, [r3, #38]	@ 0x26
 800157c:	ee07 3a90 	vmov	s15, r3
 8001580:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001584:	eddf 6a3c 	vldr	s13, [pc, #240]	@ 8001678 <bmp_parse_calib+0x2e8>
 8001588:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50

    baro->raw_calib.nvm_par_p8 = (int8_t)raw[16];
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	3310      	adds	r3, #16
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	b25a      	sxtb	r2, r3
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
    baro->calib.par_p8 = (float)baro->raw_calib.nvm_par_p8 / powf(2,15);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	f993 3027 	ldrsb.w	r3, [r3, #39]	@ 0x27
 80015a6:	ee07 3a90 	vmov	s15, r3
 80015aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015ae:	eddf 6a33 	vldr	s13, [pc, #204]	@ 800167c <bmp_parse_calib+0x2ec>
 80015b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	edc3 7a15 	vstr	s15, [r3, #84]	@ 0x54

    baro->raw_calib.nvm_par_p9 = (int16_t)BMP390_CONCAT2BYTES(raw[18], raw[17]);
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	3312      	adds	r3, #18
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	021b      	lsls	r3, r3, #8
 80015c4:	b21a      	sxth	r2, r3
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	3311      	adds	r3, #17
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	b21b      	sxth	r3, r3
 80015ce:	4313      	orrs	r3, r2
 80015d0:	b21a      	sxth	r2, r3
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	851a      	strh	r2, [r3, #40]	@ 0x28
    baro->calib.par_p9 = (float)baro->raw_calib.nvm_par_p9 / powf(2,48);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	@ 0x28
 80015dc:	ee07 3a90 	vmov	s15, r3
 80015e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015e4:	eddf 6a1d 	vldr	s13, [pc, #116]	@ 800165c <bmp_parse_calib+0x2cc>
 80015e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	edc3 7a16 	vstr	s15, [r3, #88]	@ 0x58

    baro->raw_calib.nvm_par_p10 = (int8_t)raw[19];
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	3313      	adds	r3, #19
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	b25a      	sxtb	r2, r3
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
    baro->calib.par_p10 = (float)baro->raw_calib.nvm_par_p10 / powf(2,48);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	f993 302a 	ldrsb.w	r3, [r3, #42]	@ 0x2a
 8001606:	ee07 3a90 	vmov	s15, r3
 800160a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800160e:	eddf 6a13 	vldr	s13, [pc, #76]	@ 800165c <bmp_parse_calib+0x2cc>
 8001612:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	edc3 7a17 	vstr	s15, [r3, #92]	@ 0x5c

    baro->raw_calib.nvm_par_p11 = (int8_t)raw[20];
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	3314      	adds	r3, #20
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	b25a      	sxtb	r2, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
    baro->calib.par_p11 = (float)baro->raw_calib.nvm_par_p11 / powf(2,65);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	f993 302b 	ldrsb.w	r3, [r3, #43]	@ 0x2b
 8001630:	ee07 3a90 	vmov	s15, r3
 8001634:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001638:	eddf 6a11 	vldr	s13, [pc, #68]	@ 8001680 <bmp_parse_calib+0x2f0>
 800163c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	edc3 7a18 	vstr	s15, [r3, #96]	@ 0x60
}
 8001646:	bf00      	nop
 8001648:	370c      	adds	r7, #12
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	3b800000 	.word	0x3b800000
 8001658:	4e800000 	.word	0x4e800000
 800165c:	57800000 	.word	0x57800000
 8001660:	46800000 	.word	0x46800000
 8001664:	49800000 	.word	0x49800000
 8001668:	4e000000 	.word	0x4e000000
 800166c:	4f800000 	.word	0x4f800000
 8001670:	52000000 	.word	0x52000000
 8001674:	42800000 	.word	0x42800000
 8001678:	43800000 	.word	0x43800000
 800167c:	47000000 	.word	0x47000000
 8001680:	60000000 	.word	0x60000000

08001684 <bmp_compensate_temperature>:

static float bmp_compensate_temperature(BMP390 *baro, uint32_t uncomp_temp) {
 8001684:	b480      	push	{r7}
 8001686:	b085      	sub	sp, #20
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
 800168c:	6039      	str	r1, [r7, #0]
    float partial1 = (float)uncomp_temp - baro->calib.par_t1;
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	ee07 3a90 	vmov	s15, r3
 8001694:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800169e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016a2:	edc7 7a03 	vstr	s15, [r7, #12]
    float partial2 = partial1 * baro->calib.par_t2;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80016ac:	ed97 7a03 	vldr	s14, [r7, #12]
 80016b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016b4:	edc7 7a02 	vstr	s15, [r7, #8]
    baro->calib.t_lin = partial2 + (partial1 * partial1) * baro->calib.par_t3;
 80016b8:	edd7 7a03 	vldr	s15, [r7, #12]
 80016bc:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80016c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016ca:	edd7 7a02 	vldr	s15, [r7, #8]
 80016ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	edc3 7a19 	vstr	s15, [r3, #100]	@ 0x64
    return baro->calib.t_lin;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80016dc:	ee07 3a90 	vmov	s15, r3
}
 80016e0:	eeb0 0a67 	vmov.f32	s0, s15
 80016e4:	3714      	adds	r7, #20
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr

080016ee <bmp_compensate_pressure>:

static float bmp_compensate_pressure(BMP390 *baro, uint32_t uncomp_press) {
 80016ee:	b480      	push	{r7}
 80016f0:	b091      	sub	sp, #68	@ 0x44
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]
 80016f6:	6039      	str	r1, [r7, #0]
    float partial_data1 = baro->calib.par_p6 * baro->calib.t_lin;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	ed93 7a13 	vldr	s14, [r3, #76]	@ 0x4c
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 8001704:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001708:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    float partial_data2 = baro->calib.par_p7 * (baro->calib.t_lin * baro->calib.t_lin);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	ed93 7a14 	vldr	s14, [r3, #80]	@ 0x50
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	edd3 6a19 	vldr	s13, [r3, #100]	@ 0x64
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 800171e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001722:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001726:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
    float partial_data3 = baro->calib.par_p8 * (baro->calib.t_lin * baro->calib.t_lin * baro->calib.t_lin);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	ed93 7a15 	vldr	s14, [r3, #84]	@ 0x54
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	edd3 6a19 	vldr	s13, [r3, #100]	@ 0x64
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 800173c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 8001746:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800174a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800174e:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    float partial_out1 = baro->calib.par_p5 + partial_data1 + partial_data2 + partial_data3;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 8001758:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800175c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001760:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001764:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001768:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800176c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001770:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

    float flt_uncomp_press = (float)uncomp_press;
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	ee07 3a90 	vmov	s15, r3
 800177a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800177e:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

    float partial_data1_p = baro->calib.par_p2 * baro->calib.t_lin;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 800178e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001792:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    float partial_data2_p = baro->calib.par_p3 * (baro->calib.t_lin * baro->calib.t_lin);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	edd3 6a19 	vldr	s13, [r3, #100]	@ 0x64
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 80017a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017b0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    float partial_data3_p = baro->calib.par_p4 * (baro->calib.t_lin * baro->calib.t_lin * baro->calib.t_lin);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	edd3 6a19 	vldr	s13, [r3, #100]	@ 0x64
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 80017c6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 80017d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017d8:	edc7 7a08 	vstr	s15, [r7, #32]
    float partial_out2 = flt_uncomp_press * (baro->calib.par_p1 + partial_data1_p + partial_data2_p + partial_data3_p);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 80017e2:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80017e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017ea:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80017ee:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017f2:	edd7 7a08 	vldr	s15, [r7, #32]
 80017f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017fa:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80017fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001802:	edc7 7a07 	vstr	s15, [r7, #28]


    float partial_data1_p2 = flt_uncomp_press * flt_uncomp_press;
 8001806:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800180a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800180e:	edc7 7a06 	vstr	s15, [r7, #24]
    float partial_data2_p2 = baro->calib.par_p9 + baro->calib.par_p10 * baro->calib.t_lin;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	ed93 7a16 	vldr	s14, [r3, #88]	@ 0x58
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	edd3 6a17 	vldr	s13, [r3, #92]	@ 0x5c
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 8001824:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001828:	ee77 7a27 	vadd.f32	s15, s14, s15
 800182c:	edc7 7a05 	vstr	s15, [r7, #20]
    float partial_data3_p2 = partial_data1_p2 * partial_data2_p2;
 8001830:	ed97 7a06 	vldr	s14, [r7, #24]
 8001834:	edd7 7a05 	vldr	s15, [r7, #20]
 8001838:	ee67 7a27 	vmul.f32	s15, s14, s15
 800183c:	edc7 7a04 	vstr	s15, [r7, #16]
    float partial_data4_p2 = partial_data3_p2 + (flt_uncomp_press * flt_uncomp_press * flt_uncomp_press) * baro->calib.par_p11;
 8001840:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001844:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001848:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800184c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 8001856:	ee67 7a27 	vmul.f32	s15, s14, s15
 800185a:	ed97 7a04 	vldr	s14, [r7, #16]
 800185e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001862:	edc7 7a03 	vstr	s15, [r7, #12]

    float comp_press = partial_out1 + partial_out2 + partial_data4_p2;
 8001866:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 800186a:	edd7 7a07 	vldr	s15, [r7, #28]
 800186e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001872:	ed97 7a03 	vldr	s14, [r7, #12]
 8001876:	ee77 7a27 	vadd.f32	s15, s14, s15
 800187a:	edc7 7a02 	vstr	s15, [r7, #8]

    return comp_press;
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	ee07 3a90 	vmov	s15, r3
}
 8001884:	eeb0 0a67 	vmov.f32	s0, s15
 8001888:	3744      	adds	r7, #68	@ 0x44
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
	...

08001894 <bmp_init>:

bool bmp_init(BMP390 *baro, SPI_HandleTypeDef *hspi, GPIO_TypeDef *csPort, uint16_t csPin) {
 8001894:	b5b0      	push	{r4, r5, r7, lr}
 8001896:	b090      	sub	sp, #64	@ 0x40
 8001898:	af04      	add	r7, sp, #16
 800189a:	60f8      	str	r0, [r7, #12]
 800189c:	60b9      	str	r1, [r7, #8]
 800189e:	607a      	str	r2, [r7, #4]
 80018a0:	807b      	strh	r3, [r7, #2]
    baro->hspi = hspi;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	68ba      	ldr	r2, [r7, #8]
 80018a6:	601a      	str	r2, [r3, #0]
    baro->csPort = csPort;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	605a      	str	r2, [r3, #4]
    baro->csPin = csPin;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	887a      	ldrh	r2, [r7, #2]
 80018b2:	811a      	strh	r2, [r3, #8]
    baro->last_press = NAN;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	4aa6      	ldr	r2, [pc, #664]	@ (8001b50 <bmp_init+0x2bc>)
 80018b8:	60da      	str	r2, [r3, #12]
    baro->last_alt   = NAN;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	4aa4      	ldr	r2, [pc, #656]	@ (8001b50 <bmp_init+0x2bc>)
 80018be:	611a      	str	r2, [r3, #16]
    baro->last_temp  = INT16_MIN;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80018c6:	829a      	strh	r2, [r3, #20]

    HAL_GPIO_WritePin(baro->csPort, baro->csPin, GPIO_PIN_SET);
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	6858      	ldr	r0, [r3, #4]
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	891b      	ldrh	r3, [r3, #8]
 80018d0:	2201      	movs	r2, #1
 80018d2:	4619      	mov	r1, r3
 80018d4:	f002 fc76 	bl	80041c4 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 80018d8:	200a      	movs	r0, #10
 80018da:	f001 ff4b 	bl	8003774 <HAL_Delay>

    uint8_t chip_id = 0;
 80018de:	2300      	movs	r3, #0
 80018e0:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    debug_print("BMP390 Init: Reading Chip ID...\r\n");
 80018e4:	489b      	ldr	r0, [pc, #620]	@ (8001b54 <bmp_init+0x2c0>)
 80018e6:	f000 fdb5 	bl	8002454 <debug_print>
    if (!bmp_read_reg(baro, BMP390_REG_CHIP_ID, &chip_id)) {
 80018ea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80018ee:	461a      	mov	r2, r3
 80018f0:	2100      	movs	r1, #0
 80018f2:	68f8      	ldr	r0, [r7, #12]
 80018f4:	f7ff fc4c 	bl	8001190 <bmp_read_reg>
 80018f8:	4603      	mov	r3, r0
 80018fa:	f083 0301 	eor.w	r3, r3, #1
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	2b00      	cmp	r3, #0
 8001902:	d004      	beq.n	800190e <bmp_init+0x7a>
        debug_print("BMP390 Init ERROR: Failed SPI read for Chip ID\r\n");
 8001904:	4894      	ldr	r0, [pc, #592]	@ (8001b58 <bmp_init+0x2c4>)
 8001906:	f000 fda5 	bl	8002454 <debug_print>
        return false;
 800190a:	2300      	movs	r3, #0
 800190c:	e11c      	b.n	8001b48 <bmp_init+0x2b4>
    }
    if (chip_id != BMP390_CHIP_ID) {
 800190e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001912:	2b60      	cmp	r3, #96	@ 0x60
 8001914:	d008      	beq.n	8001928 <bmp_init+0x94>
        debug_print("BMP390 Init ERROR: Chip ID Mismatch! Read: 0x%02X Expected: 0x%02X\r\n", chip_id, BMP390_CHIP_ID);
 8001916:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800191a:	2260      	movs	r2, #96	@ 0x60
 800191c:	4619      	mov	r1, r3
 800191e:	488f      	ldr	r0, [pc, #572]	@ (8001b5c <bmp_init+0x2c8>)
 8001920:	f000 fd98 	bl	8002454 <debug_print>
        return false;
 8001924:	2300      	movs	r3, #0
 8001926:	e10f      	b.n	8001b48 <bmp_init+0x2b4>
    }
    debug_print("BMP390 Init: Chip ID OK (0x%02X).\r\n", chip_id);
 8001928:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800192c:	4619      	mov	r1, r3
 800192e:	488c      	ldr	r0, [pc, #560]	@ (8001b60 <bmp_init+0x2cc>)
 8001930:	f000 fd90 	bl	8002454 <debug_print>


    debug_print("BMP390 Init: Sending Soft Reset...\r\n");
 8001934:	488b      	ldr	r0, [pc, #556]	@ (8001b64 <bmp_init+0x2d0>)
 8001936:	f000 fd8d 	bl	8002454 <debug_print>
    if (!bmp_write_reg(baro, BMP390_REG_CMD, SOFT_RESET)) {
 800193a:	22b6      	movs	r2, #182	@ 0xb6
 800193c:	217e      	movs	r1, #126	@ 0x7e
 800193e:	68f8      	ldr	r0, [r7, #12]
 8001940:	f7ff fc70 	bl	8001224 <bmp_write_reg>
 8001944:	4603      	mov	r3, r0
 8001946:	f083 0301 	eor.w	r3, r3, #1
 800194a:	b2db      	uxtb	r3, r3
 800194c:	2b00      	cmp	r3, #0
 800194e:	d004      	beq.n	800195a <bmp_init+0xc6>
         debug_print("BMP390 Init ERROR: Failed SPI write for Soft Reset\r\n");
 8001950:	4885      	ldr	r0, [pc, #532]	@ (8001b68 <bmp_init+0x2d4>)
 8001952:	f000 fd7f 	bl	8002454 <debug_print>
         return false;
 8001956:	2300      	movs	r3, #0
 8001958:	e0f6      	b.n	8001b48 <bmp_init+0x2b4>
    }
    HAL_Delay(50);
 800195a:	2032      	movs	r0, #50	@ 0x32
 800195c:	f001 ff0a 	bl	8003774 <HAL_Delay>

    uint8_t power_conf = ENABLE_PRESSURE | ENABLE_TEMP | ENABLE_SENSOR; // 0x33
 8001960:	2333      	movs	r3, #51	@ 0x33
 8001962:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    debug_print("BMP390 Init: Writing PWR_CTRL = 0x%02X...\r\n", power_conf);
 8001966:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800196a:	4619      	mov	r1, r3
 800196c:	487f      	ldr	r0, [pc, #508]	@ (8001b6c <bmp_init+0x2d8>)
 800196e:	f000 fd71 	bl	8002454 <debug_print>
    if (!bmp_write_reg(baro, BMP390_REG_PWR_CTRL, power_conf)) {
 8001972:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001976:	461a      	mov	r2, r3
 8001978:	211b      	movs	r1, #27
 800197a:	68f8      	ldr	r0, [r7, #12]
 800197c:	f7ff fc52 	bl	8001224 <bmp_write_reg>
 8001980:	4603      	mov	r3, r0
 8001982:	f083 0301 	eor.w	r3, r3, #1
 8001986:	b2db      	uxtb	r3, r3
 8001988:	2b00      	cmp	r3, #0
 800198a:	d004      	beq.n	8001996 <bmp_init+0x102>
         debug_print("BMP390 Init ERROR: Failed SPI write for PWR_CTRL\r\n");
 800198c:	4878      	ldr	r0, [pc, #480]	@ (8001b70 <bmp_init+0x2dc>)
 800198e:	f000 fd61 	bl	8002454 <debug_print>
         return false;
 8001992:	2300      	movs	r3, #0
 8001994:	e0d8      	b.n	8001b48 <bmp_init+0x2b4>
    }
    HAL_Delay(5);
 8001996:	2005      	movs	r0, #5
 8001998:	f001 feec 	bl	8003774 <HAL_Delay>

    uint8_t osr_conf = (OSR_TEMP_X2 << 3) | OSR_PRESSURE_X32; // 0x0D
 800199c:	230d      	movs	r3, #13
 800199e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    debug_print("BMP390 Init: Writing OSR = 0x%02X...\r\n", osr_conf);
 80019a2:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80019a6:	4619      	mov	r1, r3
 80019a8:	4872      	ldr	r0, [pc, #456]	@ (8001b74 <bmp_init+0x2e0>)
 80019aa:	f000 fd53 	bl	8002454 <debug_print>
    if (!bmp_write_reg(baro, BMP390_REG_OSR, osr_conf)) {
 80019ae:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80019b2:	461a      	mov	r2, r3
 80019b4:	211c      	movs	r1, #28
 80019b6:	68f8      	ldr	r0, [r7, #12]
 80019b8:	f7ff fc34 	bl	8001224 <bmp_write_reg>
 80019bc:	4603      	mov	r3, r0
 80019be:	f083 0301 	eor.w	r3, r3, #1
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d004      	beq.n	80019d2 <bmp_init+0x13e>
        debug_print("BMP390 Init ERROR: Failed SPI write for OSR\r\n");
 80019c8:	486b      	ldr	r0, [pc, #428]	@ (8001b78 <bmp_init+0x2e4>)
 80019ca:	f000 fd43 	bl	8002454 <debug_print>
        return false;
 80019ce:	2300      	movs	r3, #0
 80019d0:	e0ba      	b.n	8001b48 <bmp_init+0x2b4>
    }

    debug_print("BMP390 Init: Writing ODR = 0x%02X...\r\n", ODR_12p5_HZ); // 0x04
 80019d2:	2104      	movs	r1, #4
 80019d4:	4869      	ldr	r0, [pc, #420]	@ (8001b7c <bmp_init+0x2e8>)
 80019d6:	f000 fd3d 	bl	8002454 <debug_print>
    if (!bmp_write_reg(baro, BMP390_REG_ODR, ODR_12p5_HZ)) {
 80019da:	2204      	movs	r2, #4
 80019dc:	211d      	movs	r1, #29
 80019de:	68f8      	ldr	r0, [r7, #12]
 80019e0:	f7ff fc20 	bl	8001224 <bmp_write_reg>
 80019e4:	4603      	mov	r3, r0
 80019e6:	f083 0301 	eor.w	r3, r3, #1
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d004      	beq.n	80019fa <bmp_init+0x166>
        debug_print("BMP390 Init ERROR: Failed SPI write for ODR\r\n");
 80019f0:	4863      	ldr	r0, [pc, #396]	@ (8001b80 <bmp_init+0x2ec>)
 80019f2:	f000 fd2f 	bl	8002454 <debug_print>
        return false;
 80019f6:	2300      	movs	r3, #0
 80019f8:	e0a6      	b.n	8001b48 <bmp_init+0x2b4>
    }
    HAL_Delay(5);
 80019fa:	2005      	movs	r0, #5
 80019fc:	f001 feba 	bl	8003774 <HAL_Delay>

    uint8_t read_pwr = 0, read_osr = 0, read_odr = 0;
 8001a00:	2300      	movs	r3, #0
 8001a02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001a06:	2300      	movs	r3, #0
 8001a08:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
    bool readback_ok = true;
 8001a12:	2301      	movs	r3, #1
 8001a14:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    debug_print("BMP390 Init: Reading back configuration...\r\n");
 8001a18:	485a      	ldr	r0, [pc, #360]	@ (8001b84 <bmp_init+0x2f0>)
 8001a1a:	f000 fd1b 	bl	8002454 <debug_print>
    if (!bmp_read_reg(baro, BMP390_REG_PWR_CTRL, &read_pwr)) readback_ok = false;
 8001a1e:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 8001a22:	461a      	mov	r2, r3
 8001a24:	211b      	movs	r1, #27
 8001a26:	68f8      	ldr	r0, [r7, #12]
 8001a28:	f7ff fbb2 	bl	8001190 <bmp_read_reg>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	f083 0301 	eor.w	r3, r3, #1
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d002      	beq.n	8001a3e <bmp_init+0x1aa>
 8001a38:	2300      	movs	r3, #0
 8001a3a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (!bmp_read_reg(baro, BMP390_REG_OSR, &read_osr)) readback_ok = false;
 8001a3e:	f107 032a 	add.w	r3, r7, #42	@ 0x2a
 8001a42:	461a      	mov	r2, r3
 8001a44:	211c      	movs	r1, #28
 8001a46:	68f8      	ldr	r0, [r7, #12]
 8001a48:	f7ff fba2 	bl	8001190 <bmp_read_reg>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	f083 0301 	eor.w	r3, r3, #1
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d002      	beq.n	8001a5e <bmp_init+0x1ca>
 8001a58:	2300      	movs	r3, #0
 8001a5a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (!bmp_read_reg(baro, BMP390_REG_ODR, &read_odr)) readback_ok = false;
 8001a5e:	f107 0329 	add.w	r3, r7, #41	@ 0x29
 8001a62:	461a      	mov	r2, r3
 8001a64:	211d      	movs	r1, #29
 8001a66:	68f8      	ldr	r0, [r7, #12]
 8001a68:	f7ff fb92 	bl	8001190 <bmp_read_reg>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	f083 0301 	eor.w	r3, r3, #1
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d002      	beq.n	8001a7e <bmp_init+0x1ea>
 8001a78:	2300      	movs	r3, #0
 8001a7a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    if (!readback_ok) {
 8001a7e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001a82:	f083 0301 	eor.w	r3, r3, #1
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d004      	beq.n	8001a96 <bmp_init+0x202>
        debug_print("BMP390 Init ERROR: Failed SPI read during configuration readback!\r\n");
 8001a8c:	483e      	ldr	r0, [pc, #248]	@ (8001b88 <bmp_init+0x2f4>)
 8001a8e:	f000 fce1 	bl	8002454 <debug_print>
        return false;
 8001a92:	2300      	movs	r3, #0
 8001a94:	e058      	b.n	8001b48 <bmp_init+0x2b4>
    }

    debug_print("BMP390 Init Readback: PWR_CTRL=0x%02X (W:0x%02X), OSR=0x%02X (W:0x%02X), ODR=0x%02X (W:0x%02X)\r\n",
 8001a96:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001a9a:	461c      	mov	r4, r3
 8001a9c:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8001aa0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8001aa4:	461d      	mov	r5, r3
 8001aa6:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001aaa:	f897 1029 	ldrb.w	r1, [r7, #41]	@ 0x29
 8001aae:	4608      	mov	r0, r1
 8001ab0:	2104      	movs	r1, #4
 8001ab2:	9102      	str	r1, [sp, #8]
 8001ab4:	9001      	str	r0, [sp, #4]
 8001ab6:	9300      	str	r3, [sp, #0]
 8001ab8:	462b      	mov	r3, r5
 8001aba:	4621      	mov	r1, r4
 8001abc:	4833      	ldr	r0, [pc, #204]	@ (8001b8c <bmp_init+0x2f8>)
 8001abe:	f000 fcc9 	bl	8002454 <debug_print>
                read_pwr, power_conf, read_osr, osr_conf, read_odr, ODR_12p5_HZ);

    if (read_pwr != power_conf || read_osr != osr_conf || read_odr != ODR_12p5_HZ) {
 8001ac2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001ac6:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8001aca:	429a      	cmp	r2, r3
 8001acc:	d109      	bne.n	8001ae2 <bmp_init+0x24e>
 8001ace:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8001ad2:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d103      	bne.n	8001ae2 <bmp_init+0x24e>
 8001ada:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8001ade:	2b04      	cmp	r3, #4
 8001ae0:	d003      	beq.n	8001aea <bmp_init+0x256>
        debug_print("BMP390 Init WARNING: Configuration Readback Mismatch! Sensor may not operate as expected.\r\n");
 8001ae2:	482b      	ldr	r0, [pc, #172]	@ (8001b90 <bmp_init+0x2fc>)
 8001ae4:	f000 fcb6 	bl	8002454 <debug_print>
 8001ae8:	e002      	b.n	8001af0 <bmp_init+0x25c>
    } else {
        debug_print("BMP390 Init: Configuration Readback OK.\r\n");
 8001aea:	482a      	ldr	r0, [pc, #168]	@ (8001b94 <bmp_init+0x300>)
 8001aec:	f000 fcb2 	bl	8002454 <debug_print>
    }

    uint8_t calib_raw[21] = {0};
 8001af0:	2300      	movs	r3, #0
 8001af2:	617b      	str	r3, [r7, #20]
 8001af4:	f107 0318 	add.w	r3, r7, #24
 8001af8:	2200      	movs	r2, #0
 8001afa:	601a      	str	r2, [r3, #0]
 8001afc:	605a      	str	r2, [r3, #4]
 8001afe:	609a      	str	r2, [r3, #8]
 8001b00:	60da      	str	r2, [r3, #12]
 8001b02:	741a      	strb	r2, [r3, #16]
    debug_print("BMP390 Init: Reading Calibration Data...\r\n");
 8001b04:	4824      	ldr	r0, [pc, #144]	@ (8001b98 <bmp_init+0x304>)
 8001b06:	f000 fca5 	bl	8002454 <debug_print>
    if (!bmp_read_buf(baro, BMP390_REG_CAL, calib_raw, 21)) {
 8001b0a:	f107 0214 	add.w	r2, r7, #20
 8001b0e:	2315      	movs	r3, #21
 8001b10:	2131      	movs	r1, #49	@ 0x31
 8001b12:	68f8      	ldr	r0, [r7, #12]
 8001b14:	f7ff fbc2 	bl	800129c <bmp_read_buf>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	f083 0301 	eor.w	r3, r3, #1
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d004      	beq.n	8001b2e <bmp_init+0x29a>
        debug_print("BMP390 Init ERROR: Failed SPI read for Calibration Data\r\n");
 8001b24:	481d      	ldr	r0, [pc, #116]	@ (8001b9c <bmp_init+0x308>)
 8001b26:	f000 fc95 	bl	8002454 <debug_print>
        return false;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	e00c      	b.n	8001b48 <bmp_init+0x2b4>
    }
    bmp_parse_calib(baro, calib_raw);
 8001b2e:	f107 0314 	add.w	r3, r7, #20
 8001b32:	4619      	mov	r1, r3
 8001b34:	68f8      	ldr	r0, [r7, #12]
 8001b36:	f7ff fc2b 	bl	8001390 <bmp_parse_calib>

    HAL_Delay(100);
 8001b3a:	2064      	movs	r0, #100	@ 0x64
 8001b3c:	f001 fe1a 	bl	8003774 <HAL_Delay>

    baro_step(baro);
 8001b40:	68f8      	ldr	r0, [r7, #12]
 8001b42:	f000 f82d 	bl	8001ba0 <baro_step>

    return true;
 8001b46:	2301      	movs	r3, #1
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3730      	adds	r7, #48	@ 0x30
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bdb0      	pop	{r4, r5, r7, pc}
 8001b50:	7fc00000 	.word	0x7fc00000
 8001b54:	08012ebc 	.word	0x08012ebc
 8001b58:	08012ee0 	.word	0x08012ee0
 8001b5c:	08012f14 	.word	0x08012f14
 8001b60:	08012f5c 	.word	0x08012f5c
 8001b64:	08012f80 	.word	0x08012f80
 8001b68:	08012fa8 	.word	0x08012fa8
 8001b6c:	08012fe0 	.word	0x08012fe0
 8001b70:	0801300c 	.word	0x0801300c
 8001b74:	08013040 	.word	0x08013040
 8001b78:	08013068 	.word	0x08013068
 8001b7c:	08013098 	.word	0x08013098
 8001b80:	080130c0 	.word	0x080130c0
 8001b84:	080130f0 	.word	0x080130f0
 8001b88:	08013120 	.word	0x08013120
 8001b8c:	08013164 	.word	0x08013164
 8001b90:	080131c8 	.word	0x080131c8
 8001b94:	08013224 	.word	0x08013224
 8001b98:	08013250 	.word	0x08013250
 8001b9c:	0801327c 	.word	0x0801327c

08001ba0 <baro_step>:

void baro_step(BMP390 *baro) {
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b088      	sub	sp, #32
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
    uint8_t status_reg = 0;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	73fb      	strb	r3, [r7, #15]
    uint8_t data[6] = {0};
 8001bac:	2300      	movs	r3, #0
 8001bae:	60bb      	str	r3, [r7, #8]
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	81bb      	strh	r3, [r7, #12]

    if (!bmp_read_reg(baro, BMP390_REG_STATUS, &status_reg)) {
 8001bb4:	f107 030f 	add.w	r3, r7, #15
 8001bb8:	461a      	mov	r2, r3
 8001bba:	2103      	movs	r1, #3
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f7ff fae7 	bl	8001190 <bmp_read_reg>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	f083 0301 	eor.w	r3, r3, #1
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d003      	beq.n	8001bd6 <baro_step+0x36>
        debug_print("baro_step ERROR: Failed to read STATUS register.\r\n");
 8001bce:	483a      	ldr	r0, [pc, #232]	@ (8001cb8 <baro_step+0x118>)
 8001bd0:	f000 fc40 	bl	8002454 <debug_print>
        return;
 8001bd4:	e06c      	b.n	8001cb0 <baro_step+0x110>
    }

    if (!(status_reg & BMP390_STATUS_DRDY_PRES) || !(status_reg & BMP390_STATUS_DRDY_TEMP)) {
 8001bd6:	7bfb      	ldrb	r3, [r7, #15]
 8001bd8:	f003 0320 	and.w	r3, r3, #32
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d066      	beq.n	8001cae <baro_step+0x10e>
 8001be0:	7bfb      	ldrb	r3, [r7, #15]
 8001be2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d061      	beq.n	8001cae <baro_step+0x10e>
        return;
    }

    if (!bmp_read_buf(baro, BMP390_REG_DATA, data, 6)) {
 8001bea:	f107 0208 	add.w	r2, r7, #8
 8001bee:	2306      	movs	r3, #6
 8001bf0:	2104      	movs	r1, #4
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f7ff fb52 	bl	800129c <bmp_read_buf>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	f083 0301 	eor.w	r3, r3, #1
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d003      	beq.n	8001c0c <baro_step+0x6c>
        debug_print("baro_step ERROR: Failed to read DATA registers after DRDY set!\r\n");
 8001c04:	482d      	ldr	r0, [pc, #180]	@ (8001cbc <baro_step+0x11c>)
 8001c06:	f000 fc25 	bl	8002454 <debug_print>
        return;
 8001c0a:	e051      	b.n	8001cb0 <baro_step+0x110>
    }

    uint32_t uncomp_press = BMP390_CONCAT3BYTES(data[2], data[1], data[0]);
 8001c0c:	7abb      	ldrb	r3, [r7, #10]
 8001c0e:	041a      	lsls	r2, r3, #16
 8001c10:	7a7b      	ldrb	r3, [r7, #9]
 8001c12:	021b      	lsls	r3, r3, #8
 8001c14:	4313      	orrs	r3, r2
 8001c16:	7a3a      	ldrb	r2, [r7, #8]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	61fb      	str	r3, [r7, #28]
    uint32_t uncomp_temp  = BMP390_CONCAT3BYTES(data[5], data[4], data[3]);
 8001c1c:	7b7b      	ldrb	r3, [r7, #13]
 8001c1e:	041a      	lsls	r2, r3, #16
 8001c20:	7b3b      	ldrb	r3, [r7, #12]
 8001c22:	021b      	lsls	r3, r3, #8
 8001c24:	4313      	orrs	r3, r2
 8001c26:	7afa      	ldrb	r2, [r7, #11]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	61bb      	str	r3, [r7, #24]

    if (uncomp_press == 8388608 || uncomp_temp == 8388608) {
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001c32:	d003      	beq.n	8001c3c <baro_step+0x9c>
 8001c34:	69bb      	ldr	r3, [r7, #24]
 8001c36:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001c3a:	d102      	bne.n	8001c42 <baro_step+0xa2>
         debug_print("BMP390 WARN: Read reset value (8388608) despite DRDY flags being set!\r\n");
 8001c3c:	4820      	ldr	r0, [pc, #128]	@ (8001cc0 <baro_step+0x120>)
 8001c3e:	f000 fc09 	bl	8002454 <debug_print>
    }

    float t_lin = bmp_compensate_temperature(baro, uncomp_temp);
 8001c42:	69b9      	ldr	r1, [r7, #24]
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f7ff fd1d 	bl	8001684 <bmp_compensate_temperature>
 8001c4a:	ed87 0a05 	vstr	s0, [r7, #20]
    baro->last_temp = (int16_t)(t_lin * 100.0f);
 8001c4e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c52:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8001cc4 <baro_step+0x124>
 8001c56:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c5a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c5e:	ee17 3a90 	vmov	r3, s15
 8001c62:	b21a      	sxth	r2, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	829a      	strh	r2, [r3, #20]

    float comp_press = bmp_compensate_pressure(baro, uncomp_press);
 8001c68:	69f9      	ldr	r1, [r7, #28]
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f7ff fd3f 	bl	80016ee <bmp_compensate_pressure>
 8001c70:	ed87 0a04 	vstr	s0, [r7, #16]
    baro->last_press = comp_press;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	693a      	ldr	r2, [r7, #16]
 8001c78:	60da      	str	r2, [r3, #12]

    baro->last_alt = 44330.0f * (1.0f - powf(comp_press / 101325.0f, 1.0f / 5.255f));
 8001c7a:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c7e:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8001cc8 <baro_step+0x128>
 8001c82:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001c86:	eddf 0a11 	vldr	s1, [pc, #68]	@ 8001ccc <baro_step+0x12c>
 8001c8a:	eeb0 0a47 	vmov.f32	s0, s14
 8001c8e:	f010 fc33 	bl	80124f8 <powf>
 8001c92:	eef0 7a40 	vmov.f32	s15, s0
 8001c96:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001c9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c9e:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8001cd0 <baro_step+0x130>
 8001ca2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	edc3 7a04 	vstr	s15, [r3, #16]
 8001cac:	e000      	b.n	8001cb0 <baro_step+0x110>
        return;
 8001cae:	bf00      	nop
}
 8001cb0:	3720      	adds	r7, #32
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	080132b8 	.word	0x080132b8
 8001cbc:	080132ec 	.word	0x080132ec
 8001cc0:	08013330 	.word	0x08013330
 8001cc4:	42c80000 	.word	0x42c80000
 8001cc8:	47c5e680 	.word	0x47c5e680
 8001ccc:	3e42dcae 	.word	0x3e42dcae
 8001cd0:	472d2a00 	.word	0x472d2a00

08001cd4 <baro_get_altitude>:

float baro_get_altitude(BMP390 *baro) {
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
    return baro->last_alt;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	691b      	ldr	r3, [r3, #16]
 8001ce0:	ee07 3a90 	vmov	s15, r3
}
 8001ce4:	eeb0 0a67 	vmov.f32	s0, s15
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr

08001cf2 <baro_get_temp>:

int16_t baro_get_temp(BMP390 *baro) {
 8001cf2:	b480      	push	{r7}
 8001cf4:	b083      	sub	sp, #12
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
    return baro->last_temp;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	370c      	adds	r7, #12
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr

08001d0c <baro_get_pressure>:

float baro_get_pressure(BMP390 *baro) {
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
    return baro->last_press;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	ee07 3a90 	vmov	s15, r3
}
 8001d1c:	eeb0 0a67 	vmov.f32	s0, s15
 8001d20:	370c      	adds	r7, #12
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
	...

08001d2c <calculate_gain>:
 8001d2c:	b5b0      	push	{r4, r5, r7, lr}
 8001d2e:	b0c0      	sub	sp, #256	@ 0x100
 8001d30:	af02      	add	r7, sp, #8
 8001d32:	60f8      	str	r0, [r7, #12]
 8001d34:	ed87 0a02 	vstr	s0, [r7, #8]
 8001d38:	edc7 0a01 	vstr	s1, [r7, #4]
 8001d3c:	ed87 1a00 	vstr	s2, [r7]
 8001d40:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d44:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001d48:	edc7 7a39 	vstr	s15, [r7, #228]	@ 0xe4
 8001d4c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d50:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001d54:	edc7 7a38 	vstr	s15, [r7, #224]	@ 0xe0
 8001d58:	edd7 7a00 	vldr	s15, [r7]
 8001d5c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001d60:	edc7 7a37 	vstr	s15, [r7, #220]	@ 0xdc
 8001d64:	68f8      	ldr	r0, [r7, #12]
 8001d66:	f107 01ac 	add.w	r1, r7, #172	@ 0xac
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	2203      	movs	r2, #3
 8001d6e:	f001 fc37 	bl	80035e0 <matrix_transpose>
 8001d72:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001d76:	2200      	movs	r2, #0
 8001d78:	601a      	str	r2, [r3, #0]
 8001d7a:	605a      	str	r2, [r3, #4]
 8001d7c:	609a      	str	r2, [r3, #8]
 8001d7e:	60da      	str	r2, [r3, #12]
 8001d80:	611a      	str	r2, [r3, #16]
 8001d82:	615a      	str	r2, [r3, #20]
 8001d84:	2300      	movs	r3, #0
 8001d86:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8001d8a:	e013      	b.n	8001db4 <calculate_gain+0x88>
 8001d8c:	68fa      	ldr	r2, [r7, #12]
 8001d8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d92:	3308      	adds	r3, #8
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	4413      	add	r3, r2
 8001d98:	3304      	adds	r3, #4
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	33f8      	adds	r3, #248	@ 0xf8
 8001da4:	443b      	add	r3, r7
 8001da6:	3b64      	subs	r3, #100	@ 0x64
 8001da8:	601a      	str	r2, [r3, #0]
 8001daa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001dae:	3301      	adds	r3, #1
 8001db0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8001db4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001db8:	2b05      	cmp	r3, #5
 8001dba:	dde7      	ble.n	8001d8c <calculate_gain+0x60>
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8001dc2:	4bdd      	ldr	r3, [pc, #884]	@ (8002138 <calculate_gain+0x40c>)
 8001dc4:	f107 0470 	add.w	r4, r7, #112	@ 0x70
 8001dc8:	461d      	mov	r5, r3
 8001dca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001dcc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001dd0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dd2:	682b      	ldr	r3, [r5, #0]
 8001dd4:	6023      	str	r3, [r4, #0]
 8001dd6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001dda:	2224      	movs	r2, #36	@ 0x24
 8001ddc:	2100      	movs	r1, #0
 8001dde:	4618      	mov	r0, r3
 8001de0:	f00e fa28 	bl	8010234 <memset>
 8001de4:	68f8      	ldr	r0, [r7, #12]
 8001de6:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8001dea:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 8001dee:	2303      	movs	r3, #3
 8001df0:	9301      	str	r3, [sp, #4]
 8001df2:	2303      	movs	r3, #3
 8001df4:	9300      	str	r3, [sp, #0]
 8001df6:	2303      	movs	r3, #3
 8001df8:	f001 fb8a 	bl	8003510 <matrix_multiply>
 8001dfc:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8001e00:	f107 01ac 	add.w	r1, r7, #172	@ 0xac
 8001e04:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8001e08:	2303      	movs	r3, #3
 8001e0a:	9301      	str	r3, [sp, #4]
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	9300      	str	r3, [sp, #0]
 8001e10:	2303      	movs	r3, #3
 8001e12:	f001 fb7d 	bl	8003510 <matrix_multiply>
 8001e16:	ed97 7a1b 	vldr	s14, [r7, #108]	@ 0x6c
 8001e1a:	edd7 7a37 	vldr	s15, [r7, #220]	@ 0xdc
 8001e1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e22:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
 8001e26:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001e2a:	edd7 7a39 	vldr	s15, [r7, #228]	@ 0xe4
 8001e2e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e32:	edd7 6a1b 	vldr	s13, [r7, #108]	@ 0x6c
 8001e36:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8001e3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001e3e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e42:	edd7 6a19 	vldr	s13, [r7, #100]	@ 0x64
 8001e46:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8001e4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e52:	edc7 7a36 	vstr	s15, [r7, #216]	@ 0xd8
 8001e56:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001e5a:	edd7 6a1b 	vldr	s13, [r7, #108]	@ 0x6c
 8001e5e:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8001e62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001e66:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e6a:	edd7 6a15 	vldr	s13, [r7, #84]	@ 0x54
 8001e6e:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8001e72:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e76:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001e7a:	ed97 7a36 	vldr	s14, [r7, #216]	@ 0xd8
 8001e7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
 8001e88:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001e8c:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8001e90:	eef1 7a67 	vneg.f32	s15, s15
 8001e94:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e98:	edd7 6a15 	vldr	s13, [r7, #84]	@ 0x54
 8001e9c:	ed97 6a13 	vldr	s12, [r7, #76]	@ 0x4c
 8001ea0:	edd7 7a39 	vldr	s15, [r7, #228]	@ 0xe4
 8001ea4:	ee76 7a27 	vadd.f32	s15, s12, s15
 8001ea8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001eac:	ee77 6a27 	vadd.f32	s13, s14, s15
 8001eb0:	ed97 7a36 	vldr	s14, [r7, #216]	@ 0xd8
 8001eb4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
 8001ebe:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8001ec2:	edd7 6a1b 	vldr	s13, [r7, #108]	@ 0x6c
 8001ec6:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8001eca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001ece:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ed2:	edd7 6a18 	vldr	s13, [r7, #96]	@ 0x60
 8001ed6:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8001eda:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ede:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001ee2:	ed97 7a36 	vldr	s14, [r7, #216]	@ 0xd8
 8001ee6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
 8001ef0:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8001ef4:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8001ef8:	eef1 7a67 	vneg.f32	s15, s15
 8001efc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f00:	edd7 6a18 	vldr	s13, [r7, #96]	@ 0x60
 8001f04:	ed97 6a13 	vldr	s12, [r7, #76]	@ 0x4c
 8001f08:	edd7 7a39 	vldr	s15, [r7, #228]	@ 0xe4
 8001f0c:	ee76 7a27 	vadd.f32	s15, s12, s15
 8001f10:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f14:	ee77 6a27 	vadd.f32	s13, s14, s15
 8001f18:	ed97 7a36 	vldr	s14, [r7, #216]	@ 0xd8
 8001f1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
 8001f26:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 8001f2a:	edd7 6a1b 	vldr	s13, [r7, #108]	@ 0x6c
 8001f2e:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8001f32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f36:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f3a:	edd7 6a1b 	vldr	s13, [r7, #108]	@ 0x6c
 8001f3e:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8001f42:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f46:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001f4a:	ed97 7a36 	vldr	s14, [r7, #216]	@ 0xd8
 8001f4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
 8001f58:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 8001f5c:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8001f60:	eef1 7a67 	vneg.f32	s15, s15
 8001f64:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f68:	edd7 6a1b 	vldr	s13, [r7, #108]	@ 0x6c
 8001f6c:	ed97 6a13 	vldr	s12, [r7, #76]	@ 0x4c
 8001f70:	edd7 7a39 	vldr	s15, [r7, #228]	@ 0xe4
 8001f74:	ee76 7a27 	vadd.f32	s15, s12, s15
 8001f78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f7c:	ee77 6a27 	vadd.f32	s13, s14, s15
 8001f80:	ed97 7a36 	vldr	s14, [r7, #216]	@ 0xd8
 8001f84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
 8001f8e:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001f98:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001f9c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001fa0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 8001faa:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8001fae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fb2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fb6:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
 8001fba:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001fc4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001fc8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001fcc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 8001fd6:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8001fda:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fde:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fe2:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
 8001fe6:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001ff0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001ff4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001ff8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 8002002:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8002006:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800200a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800200e:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
 8002012:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800201c:	eef1 7a67 	vneg.f32	s15, s15
 8002020:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002024:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8002028:	ee37 7a27 	vadd.f32	s14, s14, s15
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 8002032:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8002036:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800203a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800203e:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
 8002042:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800204c:	eef1 7a67 	vneg.f32	s15, s15
 8002050:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002054:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8002058:	ee37 7a27 	vadd.f32	s14, s14, s15
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 8002062:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8002066:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800206a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800206e:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
 8002072:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800207c:	eef1 7a67 	vneg.f32	s15, s15
 8002080:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002084:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8002088:	ee37 7a27 	vadd.f32	s14, s14, s15
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 8002092:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8002096:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800209a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800209e:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80020a8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80020ac:	ee37 7a67 	vsub.f32	s14, s14, s15
 80020b0:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 80020b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	edd3 6a0d 	vldr	s13, [r3, #52]	@ 0x34
 80020be:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 80020c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020ca:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80020d4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80020d8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80020dc:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 80020e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	edd3 6a0d 	vldr	s13, [r3, #52]	@ 0x34
 80020ea:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 80020ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020f6:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8002100:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002104:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002108:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 800210c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	edd3 6a0d 	vldr	s13, [r3, #52]	@ 0x34
 8002116:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 800211a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800211e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002122:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
 8002126:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800212a:	3301      	adds	r3, #1
 800212c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8002130:	2300      	movs	r3, #0
 8002132:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8002136:	e023      	b.n	8002180 <calculate_gain+0x454>
 8002138:	08013378 	.word	0x08013378
 800213c:	2b8cbccc 	.word	0x2b8cbccc
 8002140:	68fa      	ldr	r2, [r7, #12]
 8002142:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8002146:	3308      	adds	r3, #8
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	4413      	add	r3, r2
 800214c:	3304      	adds	r3, #4
 800214e:	ed93 7a00 	vldr	s14, [r3]
 8002152:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	33f8      	adds	r3, #248	@ 0xf8
 800215a:	443b      	add	r3, r7
 800215c:	3b64      	subs	r3, #100	@ 0x64
 800215e:	edd3 7a00 	vldr	s15, [r3]
 8002162:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002166:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	33f8      	adds	r3, #248	@ 0xf8
 800216e:	443b      	add	r3, r7
 8002170:	3be8      	subs	r3, #232	@ 0xe8
 8002172:	edc3 7a00 	vstr	s15, [r3]
 8002176:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800217a:	3301      	adds	r3, #1
 800217c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8002180:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8002184:	2b05      	cmp	r3, #5
 8002186:	dddb      	ble.n	8002140 <calculate_gain+0x414>
 8002188:	f107 0310 	add.w	r3, r7, #16
 800218c:	2206      	movs	r2, #6
 800218e:	2101      	movs	r1, #1
 8002190:	4618      	mov	r0, r3
 8002192:	f001 fa5b 	bl	800364c <matrix_norm_sq>
 8002196:	ed87 0a35 	vstr	s0, [r7, #212]	@ 0xd4
 800219a:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800219e:	2206      	movs	r2, #6
 80021a0:	2101      	movs	r1, #1
 80021a2:	4618      	mov	r0, r3
 80021a4:	f001 fa52 	bl	800364c <matrix_norm_sq>
 80021a8:	ed87 0a34 	vstr	s0, [r7, #208]	@ 0xd0
 80021ac:	edd7 7a34 	vldr	s15, [r7, #208]	@ 0xd0
 80021b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80021b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021b8:	dd0c      	ble.n	80021d4 <calculate_gain+0x4a8>
 80021ba:	edd7 6a35 	vldr	s13, [r7, #212]	@ 0xd4
 80021be:	ed97 7a34 	vldr	s14, [r7, #208]	@ 0xd0
 80021c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021c6:	ed1f 7a23 	vldr	s14, [pc, #-140]	@ 800213c <calculate_gain+0x410>
 80021ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021d2:	d41c      	bmi.n	800220e <calculate_gain+0x4e2>
 80021d4:	2300      	movs	r3, #0
 80021d6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80021da:	e013      	b.n	8002204 <calculate_gain+0x4d8>
 80021dc:	68fa      	ldr	r2, [r7, #12]
 80021de:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80021e2:	3308      	adds	r3, #8
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	4413      	add	r3, r2
 80021e8:	3304      	adds	r3, #4
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	33f8      	adds	r3, #248	@ 0xf8
 80021f4:	443b      	add	r3, r7
 80021f6:	3b64      	subs	r3, #100	@ 0x64
 80021f8:	601a      	str	r2, [r3, #0]
 80021fa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80021fe:	3301      	adds	r3, #1
 8002200:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002204:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8002208:	2b05      	cmp	r3, #5
 800220a:	dde7      	ble.n	80021dc <calculate_gain+0x4b0>
 800220c:	e5ea      	b.n	8001de4 <calculate_gain+0xb8>
 800220e:	bf00      	nop
 8002210:	37f8      	adds	r7, #248	@ 0xf8
 8002212:	46bd      	mov	sp, r7
 8002214:	bdb0      	pop	{r4, r5, r7, pc}
 8002216:	bf00      	nop

08002218 <KalmanFilter_init>:
 8002218:	b580      	push	{r7, lr}
 800221a:	b088      	sub	sp, #32
 800221c:	af00      	add	r7, sp, #0
 800221e:	6178      	str	r0, [r7, #20]
 8002220:	ed87 0a04 	vstr	s0, [r7, #16]
 8002224:	edc7 0a03 	vstr	s1, [r7, #12]
 8002228:	ed87 1a02 	vstr	s2, [r7, #8]
 800222c:	edc7 1a01 	vstr	s3, [r7, #4]
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002236:	601a      	str	r2, [r3, #0]
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	693a      	ldr	r2, [r7, #16]
 800223c:	605a      	str	r2, [r3, #4]
 800223e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002242:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002246:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800224a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	edc3 7a02 	vstr	s15, [r3, #8]
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	f04f 0200 	mov.w	r2, #0
 800225a:	60da      	str	r2, [r3, #12]
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002262:	611a      	str	r2, [r3, #16]
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	693a      	ldr	r2, [r7, #16]
 8002268:	615a      	str	r2, [r3, #20]
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	f04f 0200 	mov.w	r2, #0
 8002270:	619a      	str	r2, [r3, #24]
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	f04f 0200 	mov.w	r2, #0
 8002278:	61da      	str	r2, [r3, #28]
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002280:	621a      	str	r2, [r3, #32]
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	2201      	movs	r2, #1
 8002286:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 800228a:	2300      	movs	r3, #0
 800228c:	61fb      	str	r3, [r7, #28]
 800228e:	e013      	b.n	80022b8 <KalmanFilter_init+0xa0>
 8002290:	697a      	ldr	r2, [r7, #20]
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	3312      	adds	r3, #18
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	4413      	add	r3, r2
 800229a:	f04f 0200 	mov.w	r2, #0
 800229e:	601a      	str	r2, [r3, #0]
 80022a0:	697a      	ldr	r2, [r7, #20]
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	330e      	adds	r3, #14
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	4413      	add	r3, r2
 80022aa:	3304      	adds	r3, #4
 80022ac:	f04f 0200 	mov.w	r2, #0
 80022b0:	601a      	str	r2, [r3, #0]
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	3301      	adds	r3, #1
 80022b6:	61fb      	str	r3, [r7, #28]
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	dde8      	ble.n	8002290 <KalmanFilter_init+0x78>
 80022be:	2300      	movs	r3, #0
 80022c0:	61bb      	str	r3, [r7, #24]
 80022c2:	e00b      	b.n	80022dc <KalmanFilter_init+0xc4>
 80022c4:	697a      	ldr	r2, [r7, #20]
 80022c6:	69bb      	ldr	r3, [r7, #24]
 80022c8:	3308      	adds	r3, #8
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	4413      	add	r3, r2
 80022ce:	3304      	adds	r3, #4
 80022d0:	f04f 0200 	mov.w	r2, #0
 80022d4:	601a      	str	r2, [r3, #0]
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	3301      	adds	r3, #1
 80022da:	61bb      	str	r3, [r7, #24]
 80022dc:	69bb      	ldr	r3, [r7, #24]
 80022de:	2b05      	cmp	r3, #5
 80022e0:	ddf0      	ble.n	80022c4 <KalmanFilter_init+0xac>
 80022e2:	ed97 1a01 	vldr	s2, [r7, #4]
 80022e6:	edd7 0a02 	vldr	s1, [r7, #8]
 80022ea:	ed97 0a03 	vldr	s0, [r7, #12]
 80022ee:	6978      	ldr	r0, [r7, #20]
 80022f0:	f7ff fd1c 	bl	8001d2c <calculate_gain>
 80022f4:	bf00      	nop
 80022f6:	3720      	adds	r7, #32
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}

080022fc <KalmanFilter_step>:
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b08e      	sub	sp, #56	@ 0x38
 8002300:	af02      	add	r7, sp, #8
 8002302:	60f8      	str	r0, [r7, #12]
 8002304:	ed87 0a02 	vstr	s0, [r7, #8]
 8002308:	edc7 0a01 	vstr	s1, [r7, #4]
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002312:	2b00      	cmp	r3, #0
 8002314:	d006      	beq.n	8002324 <KalmanFilter_step+0x28>
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2200      	movs	r2, #0
 800231a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	649a      	str	r2, [r3, #72]	@ 0x48
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 800232a:	ed97 7a01 	vldr	s14, [r7, #4]
 800232e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002332:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 800233c:	ed97 7a02 	vldr	s14, [r7, #8]
 8002340:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002344:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
 8002348:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800234c:	eef0 7ae7 	vabs.f32	s15, s15
 8002350:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002354:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002358:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800235c:	dd21      	ble.n	80023a2 <KalmanFilter_step+0xa6>
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8002364:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8002448 <KalmanFilter_step+0x14c>
 8002368:	eef4 7ac7 	vcmpe.f32	s15, s14
 800236c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002370:	dd17      	ble.n	80023a2 <KalmanFilter_step+0xa6>
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8002378:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800244c <KalmanFilter_step+0x150>
 800237c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002384:	d50d      	bpl.n	80023a2 <KalmanFilter_step+0xa6>
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 800238c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002394:	d505      	bpl.n	80023a2 <KalmanFilter_step+0xa6>
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	687a      	ldr	r2, [r7, #4]
 800239a:	649a      	str	r2, [r3, #72]	@ 0x48
 800239c:	f04f 0300 	mov.w	r3, #0
 80023a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80023a2:	edd7 7a01 	vldr	s15, [r7, #4]
 80023a6:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8002450 <KalmanFilter_step+0x154>
 80023aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023b2:	dd02      	ble.n	80023ba <KalmanFilter_step+0xbe>
 80023b4:	f04f 0300 	mov.w	r3, #0
 80023b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80023ba:	68f8      	ldr	r0, [r7, #12]
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 80023c8:	2301      	movs	r3, #1
 80023ca:	9301      	str	r3, [sp, #4]
 80023cc:	2303      	movs	r3, #3
 80023ce:	9300      	str	r3, [sp, #0]
 80023d0:	2303      	movs	r3, #3
 80023d2:	f001 f89d 	bl	8003510 <matrix_multiply>
 80023d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023d8:	61fb      	str	r3, [r7, #28]
 80023da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023dc:	623b      	str	r3, [r7, #32]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 80023e4:	f107 0210 	add.w	r2, r7, #16
 80023e8:	f107 011c 	add.w	r1, r7, #28
 80023ec:	2301      	movs	r3, #1
 80023ee:	9301      	str	r3, [sp, #4]
 80023f0:	2302      	movs	r3, #2
 80023f2:	9300      	str	r3, [sp, #0]
 80023f4:	2303      	movs	r3, #3
 80023f6:	f001 f88b 	bl	8003510 <matrix_multiply>
 80023fa:	2300      	movs	r3, #0
 80023fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80023fe:	e01a      	b.n	8002436 <KalmanFilter_step+0x13a>
 8002400:	68fa      	ldr	r2, [r7, #12]
 8002402:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002404:	330e      	adds	r3, #14
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	4413      	add	r3, r2
 800240a:	3304      	adds	r3, #4
 800240c:	ed93 7a00 	vldr	s14, [r3]
 8002410:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	3330      	adds	r3, #48	@ 0x30
 8002416:	443b      	add	r3, r7
 8002418:	3b20      	subs	r3, #32
 800241a:	edd3 7a00 	vldr	s15, [r3]
 800241e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002422:	68fa      	ldr	r2, [r7, #12]
 8002424:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002426:	3312      	adds	r3, #18
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	4413      	add	r3, r2
 800242c:	edc3 7a00 	vstr	s15, [r3]
 8002430:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002432:	3301      	adds	r3, #1
 8002434:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002436:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002438:	2b02      	cmp	r3, #2
 800243a:	dde1      	ble.n	8002400 <KalmanFilter_step+0x104>
 800243c:	bf00      	nop
 800243e:	bf00      	nop
 8002440:	3730      	adds	r7, #48	@ 0x30
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	43960000 	.word	0x43960000
 800244c:	43c80000 	.word	0x43c80000
 8002450:	463b8000 	.word	0x463b8000

08002454 <debug_print>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
extern void debug_print(const char *format, ...) {
 8002454:	b40f      	push	{r0, r1, r2, r3}
 8002456:	b580      	push	{r7, lr}
 8002458:	b0c2      	sub	sp, #264	@ 0x108
 800245a:	af00      	add	r7, sp, #0
    char buf[PRINT_BUFFER_SIZE];
    va_list  args;
    va_start(args, format);
 800245c:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 8002460:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002464:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002468:	601a      	str	r2, [r3, #0]
    int len = vsnprintf(buf, sizeof(buf), format, args);
 800246a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800246e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002472:	1d38      	adds	r0, r7, #4
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 800247a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800247e:	f00d fecb 	bl	8010218 <vsniprintf>
 8002482:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
    va_end(args);
    if (len <= 0) {
 8002486:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800248a:	2b00      	cmp	r3, #0
 800248c:	dd0f      	ble.n	80024ae <debug_print+0x5a>
        return;
    }
    if (len > (PRINT_BUFFER_SIZE - 1)) {
 800248e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002492:	2bff      	cmp	r3, #255	@ 0xff
 8002494:	dd02      	ble.n	800249c <debug_print+0x48>
        len = PRINT_BUFFER_SIZE - 1;
 8002496:	23ff      	movs	r3, #255	@ 0xff
 8002498:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }
    CDC_Transmit_FS((uint8_t*)buf, (uint16_t)len);
 800249c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80024a0:	b29a      	uxth	r2, r3
 80024a2:	1d3b      	adds	r3, r7, #4
 80024a4:	4611      	mov	r1, r2
 80024a6:	4618      	mov	r0, r3
 80024a8:	f00c fd24 	bl	800eef4 <CDC_Transmit_FS>
 80024ac:	e000      	b.n	80024b0 <debug_print+0x5c>
        return;
 80024ae:	bf00      	nop
}
 80024b0:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80024b4:	46bd      	mov	sp, r7
 80024b6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80024ba:	b004      	add	sp, #16
 80024bc:	4770      	bx	lr
	...

080024c0 <channel_fire>:

void channel_fire(uint8_t index) {
 80024c0:	b590      	push	{r4, r7, lr}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	4603      	mov	r3, r0
 80024c8:	71fb      	strb	r3, [r7, #7]
	if (index >= CHANNEL_COUNT) return;
 80024ca:	79fb      	ldrb	r3, [r7, #7]
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d81f      	bhi.n	8002510 <channel_fire+0x50>
	pyros[index].firing = true;
 80024d0:	79fb      	ldrb	r3, [r7, #7]
 80024d2:	4a11      	ldr	r2, [pc, #68]	@ (8002518 <channel_fire+0x58>)
 80024d4:	011b      	lsls	r3, r3, #4
 80024d6:	4413      	add	r3, r2
 80024d8:	330c      	adds	r3, #12
 80024da:	2201      	movs	r2, #1
 80024dc:	701a      	strb	r2, [r3, #0]
	pyros[index].fire_time = HAL_GetTick();
 80024de:	79fc      	ldrb	r4, [r7, #7]
 80024e0:	f001 f93c 	bl	800375c <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	490c      	ldr	r1, [pc, #48]	@ (8002518 <channel_fire+0x58>)
 80024e8:	0123      	lsls	r3, r4, #4
 80024ea:	440b      	add	r3, r1
 80024ec:	3308      	adds	r3, #8
 80024ee:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(pyros[index].port, pyros[index].pin, GPIO_PIN_SET);
 80024f0:	79fb      	ldrb	r3, [r7, #7]
 80024f2:	4a09      	ldr	r2, [pc, #36]	@ (8002518 <channel_fire+0x58>)
 80024f4:	011b      	lsls	r3, r3, #4
 80024f6:	4413      	add	r3, r2
 80024f8:	6818      	ldr	r0, [r3, #0]
 80024fa:	79fb      	ldrb	r3, [r7, #7]
 80024fc:	4a06      	ldr	r2, [pc, #24]	@ (8002518 <channel_fire+0x58>)
 80024fe:	011b      	lsls	r3, r3, #4
 8002500:	4413      	add	r3, r2
 8002502:	3304      	adds	r3, #4
 8002504:	881b      	ldrh	r3, [r3, #0]
 8002506:	2201      	movs	r2, #1
 8002508:	4619      	mov	r1, r3
 800250a:	f001 fe5b 	bl	80041c4 <HAL_GPIO_WritePin>
 800250e:	e000      	b.n	8002512 <channel_fire+0x52>
	if (index >= CHANNEL_COUNT) return;
 8002510:	bf00      	nop
}
 8002512:	370c      	adds	r7, #12
 8002514:	46bd      	mov	sp, r7
 8002516:	bd90      	pop	{r4, r7, pc}
 8002518:	20000000 	.word	0x20000000

0800251c <channel_update>:

void channel_update(void) {
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
	uint32_t now = HAL_GetTick();
 8002522:	f001 f91b 	bl	800375c <HAL_GetTick>
 8002526:	6038      	str	r0, [r7, #0]
	for (uint8_t i = 0; i < CHANNEL_COUNT; i++) {
 8002528:	2300      	movs	r3, #0
 800252a:	71fb      	strb	r3, [r7, #7]
 800252c:	e02b      	b.n	8002586 <channel_update+0x6a>
		if (pyros[i].firing && (now - pyros[i].fire_time >= CHANNEL_FIRE_TIME)) {
 800252e:	79fb      	ldrb	r3, [r7, #7]
 8002530:	4a19      	ldr	r2, [pc, #100]	@ (8002598 <channel_update+0x7c>)
 8002532:	011b      	lsls	r3, r3, #4
 8002534:	4413      	add	r3, r2
 8002536:	330c      	adds	r3, #12
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d020      	beq.n	8002580 <channel_update+0x64>
 800253e:	79fb      	ldrb	r3, [r7, #7]
 8002540:	4a15      	ldr	r2, [pc, #84]	@ (8002598 <channel_update+0x7c>)
 8002542:	011b      	lsls	r3, r3, #4
 8002544:	4413      	add	r3, r2
 8002546:	3308      	adds	r3, #8
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	683a      	ldr	r2, [r7, #0]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002552:	d315      	bcc.n	8002580 <channel_update+0x64>
			pyros[i].firing = false;
 8002554:	79fb      	ldrb	r3, [r7, #7]
 8002556:	4a10      	ldr	r2, [pc, #64]	@ (8002598 <channel_update+0x7c>)
 8002558:	011b      	lsls	r3, r3, #4
 800255a:	4413      	add	r3, r2
 800255c:	330c      	adds	r3, #12
 800255e:	2200      	movs	r2, #0
 8002560:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(pyros[i].port, pyros[i].pin, GPIO_PIN_RESET);
 8002562:	79fb      	ldrb	r3, [r7, #7]
 8002564:	4a0c      	ldr	r2, [pc, #48]	@ (8002598 <channel_update+0x7c>)
 8002566:	011b      	lsls	r3, r3, #4
 8002568:	4413      	add	r3, r2
 800256a:	6818      	ldr	r0, [r3, #0]
 800256c:	79fb      	ldrb	r3, [r7, #7]
 800256e:	4a0a      	ldr	r2, [pc, #40]	@ (8002598 <channel_update+0x7c>)
 8002570:	011b      	lsls	r3, r3, #4
 8002572:	4413      	add	r3, r2
 8002574:	3304      	adds	r3, #4
 8002576:	881b      	ldrh	r3, [r3, #0]
 8002578:	2200      	movs	r2, #0
 800257a:	4619      	mov	r1, r3
 800257c:	f001 fe22 	bl	80041c4 <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i < CHANNEL_COUNT; i++) {
 8002580:	79fb      	ldrb	r3, [r7, #7]
 8002582:	3301      	adds	r3, #1
 8002584:	71fb      	strb	r3, [r7, #7]
 8002586:	79fb      	ldrb	r3, [r7, #7]
 8002588:	2b01      	cmp	r3, #1
 800258a:	d9d0      	bls.n	800252e <channel_update+0x12>

		}
	}
}
 800258c:	bf00      	nop
 800258e:	bf00      	nop
 8002590:	3708      	adds	r7, #8
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	20000000 	.word	0x20000000

0800259c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80025a2:	f001 f8b0 	bl	8003706 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80025a6:	f000 f8a1 	bl	80026ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025aa:	f000 f967 	bl	800287c <MX_GPIO_Init>
  MX_FDCAN2_Init();
 80025ae:	f000 f8df 	bl	8002770 <MX_FDCAN2_Init>
  MX_SPI1_Init();
 80025b2:	f000 f925 	bl	8002800 <MX_SPI1_Init>
  MX_USB_Device_Init();
 80025b6:	f00c fbdf 	bl	800ed78 <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(ACCEL_nCS_GPIO_Port, ACCEL_nCS_Pin, GPIO_PIN_SET);
 80025ba:	2201      	movs	r2, #1
 80025bc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80025c0:	4836      	ldr	r0, [pc, #216]	@ (800269c <main+0x100>)
 80025c2:	f001 fdff 	bl	80041c4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GYRO_nCS_GPIO_Port, GYRO_nCS_Pin, GPIO_PIN_SET);
 80025c6:	2201      	movs	r2, #1
 80025c8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80025cc:	4833      	ldr	r0, [pc, #204]	@ (800269c <main+0x100>)
 80025ce:	f001 fdf9 	bl	80041c4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(FLASH_nCS_GPIO_Port, FLASH_nCS_Pin, GPIO_PIN_SET);
 80025d2:	2201      	movs	r2, #1
 80025d4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80025d8:	4830      	ldr	r0, [pc, #192]	@ (800269c <main+0x100>)
 80025da:	f001 fdf3 	bl	80041c4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BARO_nCS_GPIO_Port, BARO_nCS_Pin, GPIO_PIN_SET);
 80025de:	2201      	movs	r2, #1
 80025e0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80025e4:	482d      	ldr	r0, [pc, #180]	@ (800269c <main+0x100>)
 80025e6:	f001 fded 	bl	80041c4 <HAL_GPIO_WritePin>
  HAL_Delay(4000);
 80025ea:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 80025ee:	f001 f8c1 	bl	8003774 <HAL_Delay>
  HAL_GPIO_WritePin(Backlight_GPIO_Port, Backlight_Pin, GPIO_PIN_SET);
 80025f2:	2201      	movs	r2, #1
 80025f4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80025f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80025fc:	f001 fde2 	bl	80041c4 <HAL_GPIO_WritePin>

  bmi088_init(&imu, &hspi1, ACCEL_nCS_GPIO_Port, GYRO_nCS_GPIO_Port, ACCEL_nCS_Pin, GYRO_nCS_Pin);
 8002600:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002604:	9301      	str	r3, [sp, #4]
 8002606:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800260a:	9300      	str	r3, [sp, #0]
 800260c:	4b23      	ldr	r3, [pc, #140]	@ (800269c <main+0x100>)
 800260e:	4a23      	ldr	r2, [pc, #140]	@ (800269c <main+0x100>)
 8002610:	4923      	ldr	r1, [pc, #140]	@ (80026a0 <main+0x104>)
 8002612:	4824      	ldr	r0, [pc, #144]	@ (80026a4 <main+0x108>)
 8002614:	f7fe fbc0 	bl	8000d98 <bmi088_init>
  bmp_init(&baro, &hspi1, BARO_nCS_GPIO_Port, BARO_nCS_Pin);
 8002618:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800261c:	4a1f      	ldr	r2, [pc, #124]	@ (800269c <main+0x100>)
 800261e:	4920      	ldr	r1, [pc, #128]	@ (80026a0 <main+0x104>)
 8002620:	4821      	ldr	r0, [pc, #132]	@ (80026a8 <main+0x10c>)
 8002622:	f7ff f937 	bl	8001894 <bmp_init>
  KalmanFilter_init(&kf, KALMAN_PERIOD, ALTITUDE_SIGMA, ACCELERATION_SIGMA, MODEL_SIGMA);
 8002626:	eef7 1a00 	vmov.f32	s3, #112	@ 0x3f800000  1.0
 800262a:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 800262e:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8002632:	ed9f 0a1e 	vldr	s0, [pc, #120]	@ 80026ac <main+0x110>
 8002636:	481e      	ldr	r0, [pc, #120]	@ (80026b0 <main+0x114>)
 8002638:	f7ff fdee 	bl	8002218 <KalmanFilter_init>
  HAL_FDCAN_Start(&hfdcan2);
 800263c:	481d      	ldr	r0, [pc, #116]	@ (80026b4 <main+0x118>)
 800263e:	f001 faf5 	bl	8003c2c <HAL_FDCAN_Start>
//  log_setup();
//  log_start();
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002642:	f008 ff29 	bl	800b498 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of sensorData */
  sensorDataHandle = osMutexNew(&sensorData_attributes);
 8002646:	481c      	ldr	r0, [pc, #112]	@ (80026b8 <main+0x11c>)
 8002648:	f009 f85f 	bl	800b70a <osMutexNew>
 800264c:	4603      	mov	r3, r0
 800264e:	4a1b      	ldr	r2, [pc, #108]	@ (80026bc <main+0x120>)
 8002650:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of messageQueue */
  messageQueueHandle = osMessageQueueNew (16, sizeof(LogMessage), &messageQueue_attributes);
 8002652:	4a1b      	ldr	r2, [pc, #108]	@ (80026c0 <main+0x124>)
 8002654:	2138      	movs	r1, #56	@ 0x38
 8002656:	2010      	movs	r0, #16
 8002658:	f009 f965 	bl	800b926 <osMessageQueueNew>
 800265c:	4603      	mov	r3, r0
 800265e:	4a19      	ldr	r2, [pc, #100]	@ (80026c4 <main+0x128>)
 8002660:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of sendMessage */
  sendMessageHandle = osThreadNew(StartSendMessage, NULL, &sendMessage_attributes);
 8002662:	4a19      	ldr	r2, [pc, #100]	@ (80026c8 <main+0x12c>)
 8002664:	2100      	movs	r1, #0
 8002666:	4819      	ldr	r0, [pc, #100]	@ (80026cc <main+0x130>)
 8002668:	f008 ff75 	bl	800b556 <osThreadNew>
 800266c:	4603      	mov	r3, r0
 800266e:	4a18      	ldr	r2, [pc, #96]	@ (80026d0 <main+0x134>)
 8002670:	6013      	str	r3, [r2, #0]

  /* creation of deploymentTask */
  deploymentTaskHandle = osThreadNew(StartDeployment, NULL, &deploymentTask_attributes);
 8002672:	4a18      	ldr	r2, [pc, #96]	@ (80026d4 <main+0x138>)
 8002674:	2100      	movs	r1, #0
 8002676:	4818      	ldr	r0, [pc, #96]	@ (80026d8 <main+0x13c>)
 8002678:	f008 ff6d 	bl	800b556 <osThreadNew>
 800267c:	4603      	mov	r3, r0
 800267e:	4a17      	ldr	r2, [pc, #92]	@ (80026dc <main+0x140>)
 8002680:	6013      	str	r3, [r2, #0]

  /* creation of readSensors */
  readSensorsHandle = osThreadNew(StartReadSensors, NULL, &readSensors_attributes);
 8002682:	4a17      	ldr	r2, [pc, #92]	@ (80026e0 <main+0x144>)
 8002684:	2100      	movs	r1, #0
 8002686:	4817      	ldr	r0, [pc, #92]	@ (80026e4 <main+0x148>)
 8002688:	f008 ff65 	bl	800b556 <osThreadNew>
 800268c:	4603      	mov	r3, r0
 800268e:	4a16      	ldr	r2, [pc, #88]	@ (80026e8 <main+0x14c>)
 8002690:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8002692:	f008 ff25 	bl	800b4e0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002696:	bf00      	nop
 8002698:	e7fd      	b.n	8002696 <main+0xfa>
 800269a:	bf00      	nop
 800269c:	48000400 	.word	0x48000400
 80026a0:	200003f0 	.word	0x200003f0
 80026a4:	20000468 	.word	0x20000468
 80026a8:	200004b0 	.word	0x200004b0
 80026ac:	3dcccccd 	.word	0x3dcccccd
 80026b0:	20000524 	.word	0x20000524
 80026b4:	2000038c 	.word	0x2000038c
 80026b8:	080134f0 	.word	0x080134f0
 80026bc:	20000464 	.word	0x20000464
 80026c0:	080134d8 	.word	0x080134d8
 80026c4:	20000460 	.word	0x20000460
 80026c8:	0801346c 	.word	0x0801346c
 80026cc:	0800295d 	.word	0x0800295d
 80026d0:	20000454 	.word	0x20000454
 80026d4:	08013490 	.word	0x08013490
 80026d8:	080029d5 	.word	0x080029d5
 80026dc:	20000458 	.word	0x20000458
 80026e0:	080134b4 	.word	0x080134b4
 80026e4:	08002fa1 	.word	0x08002fa1
 80026e8:	2000045c 	.word	0x2000045c

080026ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b094      	sub	sp, #80	@ 0x50
 80026f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026f2:	f107 0318 	add.w	r3, r7, #24
 80026f6:	2238      	movs	r2, #56	@ 0x38
 80026f8:	2100      	movs	r1, #0
 80026fa:	4618      	mov	r0, r3
 80026fc:	f00d fd9a 	bl	8010234 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002700:	1d3b      	adds	r3, r7, #4
 8002702:	2200      	movs	r2, #0
 8002704:	601a      	str	r2, [r3, #0]
 8002706:	605a      	str	r2, [r3, #4]
 8002708:	609a      	str	r2, [r3, #8]
 800270a:	60da      	str	r2, [r3, #12]
 800270c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800270e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002712:	f003 fa8b 	bl	8005c2c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8002716:	2322      	movs	r3, #34	@ 0x22
 8002718:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800271a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800271e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002720:	2340      	movs	r3, #64	@ 0x40
 8002722:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002724:	2301      	movs	r3, #1
 8002726:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002728:	2300      	movs	r3, #0
 800272a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800272c:	f107 0318 	add.w	r3, r7, #24
 8002730:	4618      	mov	r0, r3
 8002732:	f003 fb2f 	bl	8005d94 <HAL_RCC_OscConfig>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d001      	beq.n	8002740 <SystemClock_Config+0x54>
  {
    Error_Handler();
 800273c:	f000 fca8 	bl	8003090 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002740:	230f      	movs	r3, #15
 8002742:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002744:	2301      	movs	r3, #1
 8002746:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002748:	2300      	movs	r3, #0
 800274a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800274c:	2300      	movs	r3, #0
 800274e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002750:	2300      	movs	r3, #0
 8002752:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002754:	1d3b      	adds	r3, r7, #4
 8002756:	2100      	movs	r1, #0
 8002758:	4618      	mov	r0, r3
 800275a:	f003 fe2d 	bl	80063b8 <HAL_RCC_ClockConfig>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d001      	beq.n	8002768 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8002764:	f000 fc94 	bl	8003090 <Error_Handler>
  }
}
 8002768:	bf00      	nop
 800276a:	3750      	adds	r7, #80	@ 0x50
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}

08002770 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8002774:	4b20      	ldr	r3, [pc, #128]	@ (80027f8 <MX_FDCAN2_Init+0x88>)
 8002776:	4a21      	ldr	r2, [pc, #132]	@ (80027fc <MX_FDCAN2_Init+0x8c>)
 8002778:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800277a:	4b1f      	ldr	r3, [pc, #124]	@ (80027f8 <MX_FDCAN2_Init+0x88>)
 800277c:	2200      	movs	r2, #0
 800277e:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 8002780:	4b1d      	ldr	r3, [pc, #116]	@ (80027f8 <MX_FDCAN2_Init+0x88>)
 8002782:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8002786:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8002788:	4b1b      	ldr	r3, [pc, #108]	@ (80027f8 <MX_FDCAN2_Init+0x88>)
 800278a:	2200      	movs	r2, #0
 800278c:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 800278e:	4b1a      	ldr	r3, [pc, #104]	@ (80027f8 <MX_FDCAN2_Init+0x88>)
 8002790:	2200      	movs	r2, #0
 8002792:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8002794:	4b18      	ldr	r3, [pc, #96]	@ (80027f8 <MX_FDCAN2_Init+0x88>)
 8002796:	2200      	movs	r2, #0
 8002798:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 800279a:	4b17      	ldr	r3, [pc, #92]	@ (80027f8 <MX_FDCAN2_Init+0x88>)
 800279c:	2200      	movs	r2, #0
 800279e:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 80027a0:	4b15      	ldr	r3, [pc, #84]	@ (80027f8 <MX_FDCAN2_Init+0x88>)
 80027a2:	2201      	movs	r2, #1
 80027a4:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 16;
 80027a6:	4b14      	ldr	r3, [pc, #80]	@ (80027f8 <MX_FDCAN2_Init+0x88>)
 80027a8:	2210      	movs	r2, #16
 80027aa:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 63;
 80027ac:	4b12      	ldr	r3, [pc, #72]	@ (80027f8 <MX_FDCAN2_Init+0x88>)
 80027ae:	223f      	movs	r2, #63	@ 0x3f
 80027b0:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 16;
 80027b2:	4b11      	ldr	r3, [pc, #68]	@ (80027f8 <MX_FDCAN2_Init+0x88>)
 80027b4:	2210      	movs	r2, #16
 80027b6:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 80027b8:	4b0f      	ldr	r3, [pc, #60]	@ (80027f8 <MX_FDCAN2_Init+0x88>)
 80027ba:	2201      	movs	r2, #1
 80027bc:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 4;
 80027be:	4b0e      	ldr	r3, [pc, #56]	@ (80027f8 <MX_FDCAN2_Init+0x88>)
 80027c0:	2204      	movs	r2, #4
 80027c2:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 13;
 80027c4:	4b0c      	ldr	r3, [pc, #48]	@ (80027f8 <MX_FDCAN2_Init+0x88>)
 80027c6:	220d      	movs	r2, #13
 80027c8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 2;
 80027ca:	4b0b      	ldr	r3, [pc, #44]	@ (80027f8 <MX_FDCAN2_Init+0x88>)
 80027cc:	2202      	movs	r2, #2
 80027ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.StdFiltersNbr = 1;
 80027d0:	4b09      	ldr	r3, [pc, #36]	@ (80027f8 <MX_FDCAN2_Init+0x88>)
 80027d2:	2201      	movs	r2, #1
 80027d4:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.ExtFiltersNbr = 1;
 80027d6:	4b08      	ldr	r3, [pc, #32]	@ (80027f8 <MX_FDCAN2_Init+0x88>)
 80027d8:	2201      	movs	r2, #1
 80027da:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80027dc:	4b06      	ldr	r3, [pc, #24]	@ (80027f8 <MX_FDCAN2_Init+0x88>)
 80027de:	2200      	movs	r2, #0
 80027e0:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 80027e2:	4805      	ldr	r0, [pc, #20]	@ (80027f8 <MX_FDCAN2_Init+0x88>)
 80027e4:	f001 f8c8 	bl	8003978 <HAL_FDCAN_Init>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d001      	beq.n	80027f2 <MX_FDCAN2_Init+0x82>
  {
    Error_Handler();
 80027ee:	f000 fc4f 	bl	8003090 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 80027f2:	bf00      	nop
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	2000038c 	.word	0x2000038c
 80027fc:	40006800 	.word	0x40006800

08002800 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002804:	4b1b      	ldr	r3, [pc, #108]	@ (8002874 <MX_SPI1_Init+0x74>)
 8002806:	4a1c      	ldr	r2, [pc, #112]	@ (8002878 <MX_SPI1_Init+0x78>)
 8002808:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800280a:	4b1a      	ldr	r3, [pc, #104]	@ (8002874 <MX_SPI1_Init+0x74>)
 800280c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002810:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002812:	4b18      	ldr	r3, [pc, #96]	@ (8002874 <MX_SPI1_Init+0x74>)
 8002814:	2200      	movs	r2, #0
 8002816:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002818:	4b16      	ldr	r3, [pc, #88]	@ (8002874 <MX_SPI1_Init+0x74>)
 800281a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800281e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002820:	4b14      	ldr	r3, [pc, #80]	@ (8002874 <MX_SPI1_Init+0x74>)
 8002822:	2200      	movs	r2, #0
 8002824:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002826:	4b13      	ldr	r3, [pc, #76]	@ (8002874 <MX_SPI1_Init+0x74>)
 8002828:	2200      	movs	r2, #0
 800282a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800282c:	4b11      	ldr	r3, [pc, #68]	@ (8002874 <MX_SPI1_Init+0x74>)
 800282e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002832:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002834:	4b0f      	ldr	r3, [pc, #60]	@ (8002874 <MX_SPI1_Init+0x74>)
 8002836:	2220      	movs	r2, #32
 8002838:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800283a:	4b0e      	ldr	r3, [pc, #56]	@ (8002874 <MX_SPI1_Init+0x74>)
 800283c:	2200      	movs	r2, #0
 800283e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002840:	4b0c      	ldr	r3, [pc, #48]	@ (8002874 <MX_SPI1_Init+0x74>)
 8002842:	2200      	movs	r2, #0
 8002844:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002846:	4b0b      	ldr	r3, [pc, #44]	@ (8002874 <MX_SPI1_Init+0x74>)
 8002848:	2200      	movs	r2, #0
 800284a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800284c:	4b09      	ldr	r3, [pc, #36]	@ (8002874 <MX_SPI1_Init+0x74>)
 800284e:	2207      	movs	r2, #7
 8002850:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002852:	4b08      	ldr	r3, [pc, #32]	@ (8002874 <MX_SPI1_Init+0x74>)
 8002854:	2200      	movs	r2, #0
 8002856:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002858:	4b06      	ldr	r3, [pc, #24]	@ (8002874 <MX_SPI1_Init+0x74>)
 800285a:	2208      	movs	r2, #8
 800285c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800285e:	4805      	ldr	r0, [pc, #20]	@ (8002874 <MX_SPI1_Init+0x74>)
 8002860:	f004 fa1e 	bl	8006ca0 <HAL_SPI_Init>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d001      	beq.n	800286e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800286a:	f000 fc11 	bl	8003090 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800286e:	bf00      	nop
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	200003f0 	.word	0x200003f0
 8002878:	40013000 	.word	0x40013000

0800287c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b08a      	sub	sp, #40	@ 0x28
 8002880:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002882:	f107 0314 	add.w	r3, r7, #20
 8002886:	2200      	movs	r2, #0
 8002888:	601a      	str	r2, [r3, #0]
 800288a:	605a      	str	r2, [r3, #4]
 800288c:	609a      	str	r2, [r3, #8]
 800288e:	60da      	str	r2, [r3, #12]
 8002890:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002892:	4b30      	ldr	r3, [pc, #192]	@ (8002954 <MX_GPIO_Init+0xd8>)
 8002894:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002896:	4a2f      	ldr	r2, [pc, #188]	@ (8002954 <MX_GPIO_Init+0xd8>)
 8002898:	f043 0304 	orr.w	r3, r3, #4
 800289c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800289e:	4b2d      	ldr	r3, [pc, #180]	@ (8002954 <MX_GPIO_Init+0xd8>)
 80028a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028a2:	f003 0304 	and.w	r3, r3, #4
 80028a6:	613b      	str	r3, [r7, #16]
 80028a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80028aa:	4b2a      	ldr	r3, [pc, #168]	@ (8002954 <MX_GPIO_Init+0xd8>)
 80028ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028ae:	4a29      	ldr	r2, [pc, #164]	@ (8002954 <MX_GPIO_Init+0xd8>)
 80028b0:	f043 0320 	orr.w	r3, r3, #32
 80028b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80028b6:	4b27      	ldr	r3, [pc, #156]	@ (8002954 <MX_GPIO_Init+0xd8>)
 80028b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028ba:	f003 0320 	and.w	r3, r3, #32
 80028be:	60fb      	str	r3, [r7, #12]
 80028c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028c2:	4b24      	ldr	r3, [pc, #144]	@ (8002954 <MX_GPIO_Init+0xd8>)
 80028c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028c6:	4a23      	ldr	r2, [pc, #140]	@ (8002954 <MX_GPIO_Init+0xd8>)
 80028c8:	f043 0301 	orr.w	r3, r3, #1
 80028cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80028ce:	4b21      	ldr	r3, [pc, #132]	@ (8002954 <MX_GPIO_Init+0xd8>)
 80028d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028d2:	f003 0301 	and.w	r3, r3, #1
 80028d6:	60bb      	str	r3, [r7, #8]
 80028d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80028da:	4b1e      	ldr	r3, [pc, #120]	@ (8002954 <MX_GPIO_Init+0xd8>)
 80028dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028de:	4a1d      	ldr	r2, [pc, #116]	@ (8002954 <MX_GPIO_Init+0xd8>)
 80028e0:	f043 0302 	orr.w	r3, r3, #2
 80028e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80028e6:	4b1b      	ldr	r3, [pc, #108]	@ (8002954 <MX_GPIO_Init+0xd8>)
 80028e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028ea:	f003 0302 	and.w	r3, r3, #2
 80028ee:	607b      	str	r3, [r7, #4]
 80028f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ACCEL_nCS_Pin|GYRO_nCS_Pin|BARO_nCS_Pin|FLASH_nCS_Pin
 80028f2:	2200      	movs	r2, #0
 80028f4:	f64f 0180 	movw	r1, #63616	@ 0xf880
 80028f8:	4817      	ldr	r0, [pc, #92]	@ (8002958 <MX_GPIO_Init+0xdc>)
 80028fa:	f001 fc63 	bl	80041c4 <HAL_GPIO_WritePin>
                          |PIRANHA_Pin|RAPTOR_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, STATUS_LED_Pin|Backlight_Pin, GPIO_PIN_RESET);
 80028fe:	2200      	movs	r2, #0
 8002900:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8002904:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002908:	f001 fc5c 	bl	80041c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ACCEL_nCS_Pin GYRO_nCS_Pin BARO_nCS_Pin FLASH_nCS_Pin
                           PIRANHA_Pin RAPTOR_Pin */
  GPIO_InitStruct.Pin = ACCEL_nCS_Pin|GYRO_nCS_Pin|BARO_nCS_Pin|FLASH_nCS_Pin
 800290c:	f64f 0380 	movw	r3, #63616	@ 0xf880
 8002910:	617b      	str	r3, [r7, #20]
                          |PIRANHA_Pin|RAPTOR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002912:	2301      	movs	r3, #1
 8002914:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002916:	2300      	movs	r3, #0
 8002918:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800291a:	2300      	movs	r3, #0
 800291c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800291e:	f107 0314 	add.w	r3, r7, #20
 8002922:	4619      	mov	r1, r3
 8002924:	480c      	ldr	r0, [pc, #48]	@ (8002958 <MX_GPIO_Init+0xdc>)
 8002926:	f001 facb 	bl	8003ec0 <HAL_GPIO_Init>

  /*Configure GPIO pins : STATUS_LED_Pin Backlight_Pin */
  GPIO_InitStruct.Pin = STATUS_LED_Pin|Backlight_Pin;
 800292a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800292e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002930:	2301      	movs	r3, #1
 8002932:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002934:	2300      	movs	r3, #0
 8002936:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002938:	2300      	movs	r3, #0
 800293a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800293c:	f107 0314 	add.w	r3, r7, #20
 8002940:	4619      	mov	r1, r3
 8002942:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002946:	f001 fabb 	bl	8003ec0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800294a:	bf00      	nop
 800294c:	3728      	adds	r7, #40	@ 0x28
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	40021000 	.word	0x40021000
 8002958:	48000400 	.word	0x48000400

0800295c <StartSendMessage>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartSendMessage */
void StartSendMessage(void *argument)
{
 800295c:	b5b0      	push	{r4, r5, r7, lr}
 800295e:	b0aa      	sub	sp, #168	@ 0xa8
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
    // Prepare a CAN-FD Tx header
    FDCAN_TxHeaderTypeDef txHeader = {
 8002964:	4b18      	ldr	r3, [pc, #96]	@ (80029c8 <StartSendMessage+0x6c>)
 8002966:	f107 0484 	add.w	r4, r7, #132	@ 0x84
 800296a:	461d      	mov	r5, r3
 800296c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800296e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002970:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002972:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002974:	682b      	ldr	r3, [r5, #0]
 8002976:	6023      	str	r3, [r4, #0]

    for (;;)
    {
        LogMessage msg;
        // wait forever for one LogMessage to arrive
        if (osMessageQueueGet(messageQueueHandle, &msg, NULL, osWaitForever) == osOK)
 8002978:	4b14      	ldr	r3, [pc, #80]	@ (80029cc <StartSendMessage+0x70>)
 800297a:	6818      	ldr	r0, [r3, #0]
 800297c:	f107 010c 	add.w	r1, r7, #12
 8002980:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002984:	2200      	movs	r2, #0
 8002986:	f009 f8a1 	bl	800bacc <osMessageQueueGet>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d116      	bne.n	80029be <StartSendMessage+0x62>
        {
            // zero the buffer & copy in the packed struct
            memset(txBuf, 0, sizeof(txBuf));
 8002990:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002994:	2240      	movs	r2, #64	@ 0x40
 8002996:	2100      	movs	r1, #0
 8002998:	4618      	mov	r0, r3
 800299a:	f00d fc4b 	bl	8010234 <memset>
            memcpy(txBuf, &msg, sizeof(msg));
 800299e:	f107 010c 	add.w	r1, r7, #12
 80029a2:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80029a6:	2238      	movs	r2, #56	@ 0x38
 80029a8:	4618      	mov	r0, r3
 80029aa:	f00d fcd2 	bl	8010352 <memcpy>

            // attempt to enqueue onto the TX FIFO
            HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &txHeader, txBuf);
 80029ae:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 80029b2:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80029b6:	4619      	mov	r1, r3
 80029b8:	4805      	ldr	r0, [pc, #20]	@ (80029d0 <StartSendMessage+0x74>)
 80029ba:	f001 f95f 	bl	8003c7c <HAL_FDCAN_AddMessageToTxFifoQ>
        }

        osDelay(100);
 80029be:	2064      	movs	r0, #100	@ 0x64
 80029c0:	f008 fe5b 	bl	800b67a <osDelay>
    {
 80029c4:	e7d8      	b.n	8002978 <StartSendMessage+0x1c>
 80029c6:	bf00      	nop
 80029c8:	080133e8 	.word	0x080133e8
 80029cc:	20000460 	.word	0x20000460
 80029d0:	2000038c 	.word	0x2000038c

080029d4 <StartDeployment>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDeployment */
void StartDeployment(void *argument)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b0ae      	sub	sp, #184	@ 0xb8
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDeployment */

	FlightPhase phase = Startup;
 80029dc:	2300      	movs	r3, #0
 80029de:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
	uint32_t land_time = 0;
 80029e2:	2300      	movs	r3, #0
 80029e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
	bool send_now = true;
 80029e8:	2301      	movs	r3, #1
 80029ea:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
	static int    alt_idx    = 0, alt_cnt    = 0;
	static bool   alt_ready  = false;
	static float  alt_zero   = 0.0f;

	// for fixed 100 ms period
	uint32_t next_wake = osKernelGetTickCount() + 100;
 80029ee:	f008 fd9d 	bl	800b52c <osKernelGetTickCount>
 80029f2:	4603      	mov	r3, r0
 80029f4:	3364      	adds	r3, #100	@ 0x64
 80029f6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
	  /* Infinite loop */
	for(;;) {
		uint32_t now = HAL_GetTick();
 80029fa:	f000 feaf 	bl	800375c <HAL_GetTick>
 80029fe:	67f8      	str	r0, [r7, #124]	@ 0x7c
        float raw_altitude;
        float current_pressure;
        int16_t current_temp;

        // grab sensors
        if (osMutexAcquire(sensorDataHandle, osWaitForever) == osOK) {
 8002a00:	4bb7      	ldr	r3, [pc, #732]	@ (8002ce0 <StartDeployment+0x30c>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f008 ff04 	bl	800b816 <osMutexAcquire>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d13e      	bne.n	8002a92 <StartDeployment+0xbe>
            memcpy(currentAccel, accelData, sizeof(accelData));
 8002a14:	4ab3      	ldr	r2, [pc, #716]	@ (8002ce4 <StartDeployment+0x310>)
 8002a16:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002a1a:	ca07      	ldmia	r2, {r0, r1, r2}
 8002a1c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            memcpy(currentGyro, gyroData, sizeof(gyroData));
 8002a20:	4ab1      	ldr	r2, [pc, #708]	@ (8002ce8 <StartDeployment+0x314>)
 8002a22:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002a26:	ca07      	ldmia	r2, {r0, r1, r2}
 8002a28:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            raw_altitude = baro_altitude;
 8002a2c:	4baf      	ldr	r3, [pc, #700]	@ (8002cec <StartDeployment+0x318>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	67bb      	str	r3, [r7, #120]	@ 0x78
            current_pressure = pressure;
 8002a32:	4baf      	ldr	r3, [pc, #700]	@ (8002cf0 <StartDeployment+0x31c>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	677b      	str	r3, [r7, #116]	@ 0x74
            current_temp = temp;
 8002a38:	4bae      	ldr	r3, [pc, #696]	@ (8002cf4 <StartDeployment+0x320>)
 8002a3a:	881b      	ldrh	r3, [r3, #0]
 8002a3c:	f8a7 3072 	strh.w	r3, [r7, #114]	@ 0x72
            osMutexRelease(sensorDataHandle);
 8002a40:	4ba7      	ldr	r3, [pc, #668]	@ (8002ce0 <StartDeployment+0x30c>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4618      	mov	r0, r3
 8002a46:	f008 ff31 	bl	800b8ac <osMutexRelease>
            continue;
        }

        // compute accel magnitude
        float accel_mag = sqrtf(
            currentAccel[0]*currentAccel[0] +
 8002a4a:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8002a4e:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8002a52:	ee27 7a27 	vmul.f32	s14, s14, s15
            currentAccel[1]*currentAccel[1] +
 8002a56:	edd7 6a15 	vldr	s13, [r7, #84]	@ 0x54
 8002a5a:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8002a5e:	ee66 7aa7 	vmul.f32	s15, s13, s15
            currentAccel[0]*currentAccel[0] +
 8002a62:	ee37 7a27 	vadd.f32	s14, s14, s15
            currentAccel[2]*currentAccel[2]
 8002a66:	edd7 6a16 	vldr	s13, [r7, #88]	@ 0x58
 8002a6a:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8002a6e:	ee66 7aa7 	vmul.f32	s15, s13, s15
        float accel_mag = sqrtf(
 8002a72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a76:	eeb0 0a67 	vmov.f32	s0, s15
 8002a7a:	f00f fd95 	bl	80125a8 <sqrtf>
 8002a7e:	ed87 0a1b 	vstr	s0, [r7, #108]	@ 0x6c
        );

        // —— update trimmed-mean baselines ——
        if (!grav_ready) {
 8002a82:	4b9d      	ldr	r3, [pc, #628]	@ (8002cf8 <StartDeployment+0x324>)
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	f083 0301 	eor.w	r3, r3, #1
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d078      	beq.n	8002b82 <StartDeployment+0x1ae>
 8002a90:	e009      	b.n	8002aa6 <StartDeployment+0xd2>
            osDelayUntil(next_wake);
 8002a92:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 8002a96:	f008 fe0b 	bl	800b6b0 <osDelayUntil>
            next_wake += 100;
 8002a9a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002a9e:	3364      	adds	r3, #100	@ 0x64
 8002aa0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
            continue;
 8002aa4:	e270      	b.n	8002f88 <StartDeployment+0x5b4>
            grav_buf[grav_idx++] = accel_mag;
 8002aa6:	4b95      	ldr	r3, [pc, #596]	@ (8002cfc <StartDeployment+0x328>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	1c5a      	adds	r2, r3, #1
 8002aac:	4993      	ldr	r1, [pc, #588]	@ (8002cfc <StartDeployment+0x328>)
 8002aae:	600a      	str	r2, [r1, #0]
 8002ab0:	4a93      	ldr	r2, [pc, #588]	@ (8002d00 <StartDeployment+0x32c>)
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	4413      	add	r3, r2
 8002ab6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002ab8:	601a      	str	r2, [r3, #0]
            if (grav_idx >= BASELINE_SAMPLES) grav_idx = 0;
 8002aba:	4b90      	ldr	r3, [pc, #576]	@ (8002cfc <StartDeployment+0x328>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	2b09      	cmp	r3, #9
 8002ac0:	dd02      	ble.n	8002ac8 <StartDeployment+0xf4>
 8002ac2:	4b8e      	ldr	r3, [pc, #568]	@ (8002cfc <StartDeployment+0x328>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	601a      	str	r2, [r3, #0]
            if (++grav_cnt >= BASELINE_SAMPLES) {
 8002ac8:	4b8e      	ldr	r3, [pc, #568]	@ (8002d04 <StartDeployment+0x330>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	3301      	adds	r3, #1
 8002ace:	4a8d      	ldr	r2, [pc, #564]	@ (8002d04 <StartDeployment+0x330>)
 8002ad0:	6013      	str	r3, [r2, #0]
 8002ad2:	4b8c      	ldr	r3, [pc, #560]	@ (8002d04 <StartDeployment+0x330>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	2b09      	cmp	r3, #9
 8002ad8:	dd53      	ble.n	8002b82 <StartDeployment+0x1ae>
                // compute trimmed mean
                float sum = 0, mn = grav_buf[0], mx = grav_buf[0];
 8002ada:	f04f 0300 	mov.w	r3, #0
 8002ade:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8002ae2:	4b87      	ldr	r3, [pc, #540]	@ (8002d00 <StartDeployment+0x32c>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002aea:	4b85      	ldr	r3, [pc, #532]	@ (8002d00 <StartDeployment+0x32c>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
                for (int i = 0; i < BASELINE_SAMPLES; i++) {
 8002af2:	2300      	movs	r3, #0
 8002af4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002af8:	e02b      	b.n	8002b52 <StartDeployment+0x17e>
                    float v = grav_buf[i];
 8002afa:	4a81      	ldr	r2, [pc, #516]	@ (8002d00 <StartDeployment+0x32c>)
 8002afc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	4413      	add	r3, r2
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	66bb      	str	r3, [r7, #104]	@ 0x68
                    sum += v;
 8002b08:	ed97 7a29 	vldr	s14, [r7, #164]	@ 0xa4
 8002b0c:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8002b10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b14:	edc7 7a29 	vstr	s15, [r7, #164]	@ 0xa4
                    if (v < mn) mn = v;
 8002b18:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 8002b1c:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 8002b20:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b28:	d502      	bpl.n	8002b30 <StartDeployment+0x15c>
 8002b2a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002b2c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
                    if (v > mx) mx = v;
 8002b30:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 8002b34:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8002b38:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b40:	dd02      	ble.n	8002b48 <StartDeployment+0x174>
 8002b42:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002b44:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
                for (int i = 0; i < BASELINE_SAMPLES; i++) {
 8002b48:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002b4c:	3301      	adds	r3, #1
 8002b4e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002b52:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002b56:	2b09      	cmp	r3, #9
 8002b58:	ddcf      	ble.n	8002afa <StartDeployment+0x126>
                }
                grav_zero  = (sum - mn - mx) / (BASELINE_SAMPLES - 2);
 8002b5a:	ed97 7a29 	vldr	s14, [r7, #164]	@ 0xa4
 8002b5e:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 8002b62:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b66:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8002b6a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b6e:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 8002b72:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b76:	4b64      	ldr	r3, [pc, #400]	@ (8002d08 <StartDeployment+0x334>)
 8002b78:	edc3 7a00 	vstr	s15, [r3]
                grav_ready = true;
 8002b7c:	4b5e      	ldr	r3, [pc, #376]	@ (8002cf8 <StartDeployment+0x324>)
 8002b7e:	2201      	movs	r2, #1
 8002b80:	701a      	strb	r2, [r3, #0]
            }
        }
        if (!alt_ready) {
 8002b82:	4b62      	ldr	r3, [pc, #392]	@ (8002d0c <StartDeployment+0x338>)
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	f083 0301 	eor.w	r3, r3, #1
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d06d      	beq.n	8002c6c <StartDeployment+0x298>
            alt_buf[alt_idx++] = raw_altitude;
 8002b90:	4b5f      	ldr	r3, [pc, #380]	@ (8002d10 <StartDeployment+0x33c>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	1c5a      	adds	r2, r3, #1
 8002b96:	495e      	ldr	r1, [pc, #376]	@ (8002d10 <StartDeployment+0x33c>)
 8002b98:	600a      	str	r2, [r1, #0]
 8002b9a:	4a5e      	ldr	r2, [pc, #376]	@ (8002d14 <StartDeployment+0x340>)
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	4413      	add	r3, r2
 8002ba0:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8002ba2:	601a      	str	r2, [r3, #0]
            if (alt_idx >= BASELINE_SAMPLES) alt_idx = 0;
 8002ba4:	4b5a      	ldr	r3, [pc, #360]	@ (8002d10 <StartDeployment+0x33c>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	2b09      	cmp	r3, #9
 8002baa:	dd02      	ble.n	8002bb2 <StartDeployment+0x1de>
 8002bac:	4b58      	ldr	r3, [pc, #352]	@ (8002d10 <StartDeployment+0x33c>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	601a      	str	r2, [r3, #0]
            if (++alt_cnt >= BASELINE_SAMPLES) {
 8002bb2:	4b59      	ldr	r3, [pc, #356]	@ (8002d18 <StartDeployment+0x344>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	4a57      	ldr	r2, [pc, #348]	@ (8002d18 <StartDeployment+0x344>)
 8002bba:	6013      	str	r3, [r2, #0]
 8002bbc:	4b56      	ldr	r3, [pc, #344]	@ (8002d18 <StartDeployment+0x344>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2b09      	cmp	r3, #9
 8002bc2:	dd53      	ble.n	8002c6c <StartDeployment+0x298>
                float sum = 0, mn = alt_buf[0], mx = alt_buf[0];
 8002bc4:	f04f 0300 	mov.w	r3, #0
 8002bc8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002bcc:	4b51      	ldr	r3, [pc, #324]	@ (8002d14 <StartDeployment+0x340>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002bd4:	4b4f      	ldr	r3, [pc, #316]	@ (8002d14 <StartDeployment+0x340>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
                for (int i = 0; i < BASELINE_SAMPLES; i++) {
 8002bdc:	2300      	movs	r3, #0
 8002bde:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002be2:	e02b      	b.n	8002c3c <StartDeployment+0x268>
                    float v = alt_buf[i];
 8002be4:	4a4b      	ldr	r2, [pc, #300]	@ (8002d14 <StartDeployment+0x340>)
 8002be6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	4413      	add	r3, r2
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	667b      	str	r3, [r7, #100]	@ 0x64
                    sum += v;
 8002bf2:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 8002bf6:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8002bfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bfe:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
                    if (v < mn) mn = v;
 8002c02:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 8002c06:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8002c0a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c12:	d502      	bpl.n	8002c1a <StartDeployment+0x246>
 8002c14:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002c16:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
                    if (v > mx) mx = v;
 8002c1a:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 8002c1e:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8002c22:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c2a:	dd02      	ble.n	8002c32 <StartDeployment+0x25e>
 8002c2c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002c2e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
                for (int i = 0; i < BASELINE_SAMPLES; i++) {
 8002c32:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002c36:	3301      	adds	r3, #1
 8002c38:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002c3c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002c40:	2b09      	cmp	r3, #9
 8002c42:	ddcf      	ble.n	8002be4 <StartDeployment+0x210>
                }
                alt_zero  = (sum - mn - mx) / (BASELINE_SAMPLES - 2);
 8002c44:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 8002c48:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8002c4c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002c50:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8002c54:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002c58:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 8002c5c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c60:	4b2e      	ldr	r3, [pc, #184]	@ (8002d1c <StartDeployment+0x348>)
 8002c62:	edc3 7a00 	vstr	s15, [r3]
                alt_ready = true;
 8002c66:	4b29      	ldr	r3, [pc, #164]	@ (8002d0c <StartDeployment+0x338>)
 8002c68:	2201      	movs	r2, #1
 8002c6a:	701a      	strb	r2, [r3, #0]
            }
        }

        // don’t proceed until both baselines are locked in
        if (!grav_ready || !alt_ready) {
 8002c6c:	4b22      	ldr	r3, [pc, #136]	@ (8002cf8 <StartDeployment+0x324>)
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	f083 0301 	eor.w	r3, r3, #1
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d106      	bne.n	8002c88 <StartDeployment+0x2b4>
 8002c7a:	4b24      	ldr	r3, [pc, #144]	@ (8002d0c <StartDeployment+0x338>)
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	f083 0301 	eor.w	r3, r3, #1
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d009      	beq.n	8002c9c <StartDeployment+0x2c8>
            osDelayUntil(next_wake);
 8002c88:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 8002c8c:	f008 fd10 	bl	800b6b0 <osDelayUntil>
            next_wake += 100;
 8002c90:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002c94:	3364      	adds	r3, #100	@ 0x64
 8002c96:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
            continue;
 8002c9a:	e175      	b.n	8002f88 <StartDeployment+0x5b4>
        }

        // once baselines ready, transition to Idle (first time only)
        if (phase == Startup) {
 8002c9c:	f897 30b7 	ldrb.w	r3, [r7, #183]	@ 0xb7
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d102      	bne.n	8002caa <StartDeployment+0x2d6>
            phase = Idle;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
        }

        // subtract baselines to get net accel & relative alt
        float net_accel = accel_mag - grav_zero;
 8002caa:	4b17      	ldr	r3, [pc, #92]	@ (8002d08 <StartDeployment+0x334>)
 8002cac:	edd3 7a00 	vldr	s15, [r3]
 8002cb0:	ed97 7a1b 	vldr	s14, [r7, #108]	@ 0x6c
 8002cb4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cb8:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
        float rel_alt   = raw_altitude - alt_zero;
 8002cbc:	4b17      	ldr	r3, [pc, #92]	@ (8002d1c <StartDeployment+0x348>)
 8002cbe:	edd3 7a00 	vldr	s15, [r3]
 8002cc2:	ed97 7a1e 	vldr	s14, [r7, #120]	@ 0x78
 8002cc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cca:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c

        channel_update();
 8002cce:	f7ff fc25 	bl	800251c <channel_update>

        // check pyro channels
        bool any_channel_firing = false;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
        for (int i = 0; i < CHANNEL_COUNT; i++) {
 8002cd8:	2300      	movs	r3, #0
 8002cda:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002cde:	e031      	b.n	8002d44 <StartDeployment+0x370>
 8002ce0:	20000464 	.word	0x20000464
 8002ce4:	20000498 	.word	0x20000498
 8002ce8:	200004a4 	.word	0x200004a4
 8002cec:	2000051c 	.word	0x2000051c
 8002cf0:	20000518 	.word	0x20000518
 8002cf4:	20000520 	.word	0x20000520
 8002cf8:	2000057c 	.word	0x2000057c
 8002cfc:	20000580 	.word	0x20000580
 8002d00:	20000584 	.word	0x20000584
 8002d04:	200005ac 	.word	0x200005ac
 8002d08:	200005b0 	.word	0x200005b0
 8002d0c:	200005b4 	.word	0x200005b4
 8002d10:	200005b8 	.word	0x200005b8
 8002d14:	200005bc 	.word	0x200005bc
 8002d18:	200005e4 	.word	0x200005e4
 8002d1c:	200005e8 	.word	0x200005e8
            if (pyros[i].firing) { any_channel_firing = true; break; }
 8002d20:	4a9a      	ldr	r2, [pc, #616]	@ (8002f8c <StartDeployment+0x5b8>)
 8002d22:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002d26:	011b      	lsls	r3, r3, #4
 8002d28:	4413      	add	r3, r2
 8002d2a:	330c      	adds	r3, #12
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d003      	beq.n	8002d3a <StartDeployment+0x366>
 8002d32:	2301      	movs	r3, #1
 8002d34:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8002d38:	e008      	b.n	8002d4c <StartDeployment+0x378>
        for (int i = 0; i < CHANNEL_COUNT; i++) {
 8002d3a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002d3e:	3301      	adds	r3, #1
 8002d40:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002d44:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	dde9      	ble.n	8002d20 <StartDeployment+0x34c>
        }

        // feed Kalman
        if (isfinite(net_accel) && isfinite(rel_alt) && !any_channel_firing) {
 8002d4c:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8002d50:	eef0 7ae7 	vabs.f32	s15, s15
 8002d54:	ed9f 7a8e 	vldr	s14, [pc, #568]	@ 8002f90 <StartDeployment+0x5bc>
 8002d58:	eef4 7a47 	vcmp.f32	s15, s14
 8002d5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d60:	bf8c      	ite	hi
 8002d62:	2301      	movhi	r3, #1
 8002d64:	2300      	movls	r3, #0
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	f083 0301 	eor.w	r3, r3, #1
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d020      	beq.n	8002db4 <StartDeployment+0x3e0>
 8002d72:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8002d76:	eef0 7ae7 	vabs.f32	s15, s15
 8002d7a:	ed9f 7a85 	vldr	s14, [pc, #532]	@ 8002f90 <StartDeployment+0x5bc>
 8002d7e:	eef4 7a47 	vcmp.f32	s15, s14
 8002d82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d86:	bf8c      	ite	hi
 8002d88:	2301      	movhi	r3, #1
 8002d8a:	2300      	movls	r3, #0
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	f083 0301 	eor.w	r3, r3, #1
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d00d      	beq.n	8002db4 <StartDeployment+0x3e0>
 8002d98:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8002d9c:	f083 0301 	eor.w	r3, r3, #1
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d006      	beq.n	8002db4 <StartDeployment+0x3e0>
            KalmanFilter_step(&kf, net_accel, rel_alt);
 8002da6:	edd7 0a17 	vldr	s1, [r7, #92]	@ 0x5c
 8002daa:	ed97 0a18 	vldr	s0, [r7, #96]	@ 0x60
 8002dae:	4879      	ldr	r0, [pc, #484]	@ (8002f94 <StartDeployment+0x5c0>)
 8002db0:	f7ff faa4 	bl	80022fc <KalmanFilter_step>
        }

        // flight‐phase state machine
        switch (phase) {
 8002db4:	f897 30b7 	ldrb.w	r3, [r7, #183]	@ 0xb7
 8002db8:	3b01      	subs	r3, #1
 8002dba:	2b03      	cmp	r3, #3
 8002dbc:	f200 809d 	bhi.w	8002efa <StartDeployment+0x526>
 8002dc0:	a201      	add	r2, pc, #4	@ (adr r2, 8002dc8 <StartDeployment+0x3f4>)
 8002dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dc6:	bf00      	nop
 8002dc8:	08002dd9 	.word	0x08002dd9
 8002dcc:	08002e13 	.word	0x08002e13
 8002dd0:	08002e39 	.word	0x08002e39
 8002dd4:	08002e73 	.word	0x08002e73
            case Idle:
                if (kf.est[1] > LAUNCH_VELOCITY && kf.est[2] > LAUNCH_ACCEL) {
 8002dd8:	4b6e      	ldr	r3, [pc, #440]	@ (8002f94 <StartDeployment+0x5c0>)
 8002dda:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8002dde:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 8002de2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002de6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dea:	dc00      	bgt.n	8002dee <StartDeployment+0x41a>
                    phase         = Launched;
//                    log_start();
                    send_now      = true;
                }
                break;
 8002dec:	e088      	b.n	8002f00 <StartDeployment+0x52c>
                if (kf.est[1] > LAUNCH_VELOCITY && kf.est[2] > LAUNCH_ACCEL) {
 8002dee:	4b69      	ldr	r3, [pc, #420]	@ (8002f94 <StartDeployment+0x5c0>)
 8002df0:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 8002df4:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8002df8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002dfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e00:	dc00      	bgt.n	8002e04 <StartDeployment+0x430>
                break;
 8002e02:	e07d      	b.n	8002f00 <StartDeployment+0x52c>
                    phase         = Launched;
 8002e04:	2302      	movs	r3, #2
 8002e06:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
                    send_now      = true;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
                break;
 8002e10:	e076      	b.n	8002f00 <StartDeployment+0x52c>
            case Launched:
                if (kf.est[1] < 0) {
 8002e12:	4b60      	ldr	r3, [pc, #384]	@ (8002f94 <StartDeployment+0x5c0>)
 8002e14:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8002e18:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002e1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e20:	d400      	bmi.n	8002e24 <StartDeployment+0x450>
                    channel_fire(SEPARATION_INDEX);
                    phase        = DescendingAfterSeparation;
                    send_now     = true;
                }
                break;
 8002e22:	e06d      	b.n	8002f00 <StartDeployment+0x52c>
                    channel_fire(SEPARATION_INDEX);
 8002e24:	2000      	movs	r0, #0
 8002e26:	f7ff fb4b 	bl	80024c0 <channel_fire>
                    phase        = DescendingAfterSeparation;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
                    send_now     = true;
 8002e30:	2301      	movs	r3, #1
 8002e32:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
                break;
 8002e36:	e063      	b.n	8002f00 <StartDeployment+0x52c>
            case DescendingAfterSeparation:
                if (kf.est[0] < REEFING_ALTITUDE &&
 8002e38:	4b56      	ldr	r3, [pc, #344]	@ (8002f94 <StartDeployment+0x5c0>)
 8002e3a:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8002e3e:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 8002f98 <StartDeployment+0x5c4>
 8002e42:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e4a:	d400      	bmi.n	8002e4e <StartDeployment+0x47a>
                    (now - pyros[SEPARATION_INDEX].fire_time) > 3000) {
                    channel_fire(REEFING_INDEX);
                    phase    = DescendingAfterReefing;
                    send_now = true;
                }
                break;
 8002e4c:	e057      	b.n	8002efe <StartDeployment+0x52a>
                    (now - pyros[SEPARATION_INDEX].fire_time) > 3000) {
 8002e4e:	4b4f      	ldr	r3, [pc, #316]	@ (8002f8c <StartDeployment+0x5b8>)
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8002e54:	1ad3      	subs	r3, r2, r3
                if (kf.est[0] < REEFING_ALTITUDE &&
 8002e56:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d94f      	bls.n	8002efe <StartDeployment+0x52a>
                    channel_fire(REEFING_INDEX);
 8002e5e:	2001      	movs	r0, #1
 8002e60:	f7ff fb2e 	bl	80024c0 <channel_fire>
                    phase    = DescendingAfterReefing;
 8002e64:	2304      	movs	r3, #4
 8002e66:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
                    send_now = true;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
                break;
 8002e70:	e045      	b.n	8002efe <StartDeployment+0x52a>
            case DescendingAfterReefing:
                if (kf.est[0] < LANDED_ALTITUDE &&
 8002e72:	4b48      	ldr	r3, [pc, #288]	@ (8002f94 <StartDeployment+0x5c0>)
 8002e74:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8002e78:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002e7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e84:	d533      	bpl.n	8002eee <StartDeployment+0x51a>
                    fabsf(kf.est[1]) < LANDED_VELOCITY &&
 8002e86:	4b43      	ldr	r3, [pc, #268]	@ (8002f94 <StartDeployment+0x5c0>)
 8002e88:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8002e8c:	eef0 7ae7 	vabs.f32	s15, s15
                if (kf.est[0] < LANDED_ALTITUDE &&
 8002e90:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8002e94:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e9c:	d527      	bpl.n	8002eee <StartDeployment+0x51a>
                    fabsf(kf.est[2]) < LANDED_ACCEL) {
 8002e9e:	4b3d      	ldr	r3, [pc, #244]	@ (8002f94 <StartDeployment+0x5c0>)
 8002ea0:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 8002ea4:	eef0 7ae7 	vabs.f32	s15, s15
                    fabsf(kf.est[1]) < LANDED_VELOCITY &&
 8002ea8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002eac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002eb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eb4:	d51b      	bpl.n	8002eee <StartDeployment+0x51a>
                    if (land_time == 0) {
 8002eb6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d108      	bne.n	8002ed0 <StartDeployment+0x4fc>
                        land_time = now ? now : 1;
 8002ebe:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d001      	beq.n	8002ec8 <StartDeployment+0x4f4>
 8002ec4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002ec6:	e000      	b.n	8002eca <StartDeployment+0x4f6>
 8002ec8:	2301      	movs	r3, #1
 8002eca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
                    if (land_time == 0) {
 8002ece:	e012      	b.n	8002ef6 <StartDeployment+0x522>
                    }
                    else if ((now - land_time) >= LANDED_TIME) {
 8002ed0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8002ed2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d90a      	bls.n	8002ef6 <StartDeployment+0x522>
                        phase    = Landed;
 8002ee0:	2305      	movs	r3, #5
 8002ee2:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
//                        log_stop();
                        send_now = true;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
                    if (land_time == 0) {
 8002eec:	e003      	b.n	8002ef6 <StartDeployment+0x522>
                    }
                } else {
                    land_time = 0;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
                }
                break;
 8002ef4:	e004      	b.n	8002f00 <StartDeployment+0x52c>
                    if (land_time == 0) {
 8002ef6:	bf00      	nop
                break;
 8002ef8:	e002      	b.n	8002f00 <StartDeployment+0x52c>
            default:
                break;
 8002efa:	bf00      	nop
 8002efc:	e000      	b.n	8002f00 <StartDeployment+0x52c>
                break;
 8002efe:	bf00      	nop
        }

        HAL_GPIO_TogglePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin);
 8002f00:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002f04:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002f08:	f001 f974 	bl	80041f4 <HAL_GPIO_TogglePin>

        LogMessage data;
        data.time_ms = now;
 8002f0c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002f0e:	60fb      	str	r3, [r7, #12]
        data.phase = phase;
 8002f10:	f897 30b7 	ldrb.w	r3, [r7, #183]	@ 0xb7
 8002f14:	743b      	strb	r3, [r7, #16]
        data.accel_x = currentAccel[0];
 8002f16:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002f18:	627b      	str	r3, [r7, #36]	@ 0x24
        data.accel_y = currentAccel[1];
 8002f1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f1c:	62bb      	str	r3, [r7, #40]	@ 0x28
        data.accel_z = currentAccel[2];
 8002f1e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002f20:	62fb      	str	r3, [r7, #44]	@ 0x2c
        data.gyro_x = currentGyro[0];
 8002f22:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f24:	633b      	str	r3, [r7, #48]	@ 0x30
        data.gyro_y = currentGyro[1];
 8002f26:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002f28:	637b      	str	r3, [r7, #52]	@ 0x34
        data.gyro_z = currentGyro[2];
 8002f2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002f2c:	63bb      	str	r3, [r7, #56]	@ 0x38
        data.altitude = raw_altitude;
 8002f2e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002f30:	623b      	str	r3, [r7, #32]
        data.pressure = current_pressure;
 8002f32:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        data.temp = current_temp;
 8002f36:	f8b7 3072 	ldrh.w	r3, [r7, #114]	@ 0x72
 8002f3a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
        data.kf_pos = kf.est[0];
 8002f3e:	4b15      	ldr	r3, [pc, #84]	@ (8002f94 <StartDeployment+0x5c0>)
 8002f40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f42:	617b      	str	r3, [r7, #20]
        data.kf_vel = kf.est[1];
 8002f44:	4b13      	ldr	r3, [pc, #76]	@ (8002f94 <StartDeployment+0x5c0>)
 8002f46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f48:	61bb      	str	r3, [r7, #24]
        data.kf_accel = kf.est[2];
 8002f4a:	4b12      	ldr	r3, [pc, #72]	@ (8002f94 <StartDeployment+0x5c0>)
 8002f4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f4e:	61fb      	str	r3, [r7, #28]

//        log_add(&data);

        // throttle amount of data being sent
        if (send_now) {
 8002f50:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d00b      	beq.n	8002f70 <StartDeployment+0x59c>
            osMessageQueuePut(messageQueueHandle, &data, 0, 0);
 8002f58:	4b10      	ldr	r3, [pc, #64]	@ (8002f9c <StartDeployment+0x5c8>)
 8002f5a:	6818      	ldr	r0, [r3, #0]
 8002f5c:	f107 010c 	add.w	r1, r7, #12
 8002f60:	2300      	movs	r3, #0
 8002f62:	2200      	movs	r2, #0
 8002f64:	f008 fd52 	bl	800ba0c <osMessageQueuePut>
            send_now = false;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
 8002f6e:	e002      	b.n	8002f76 <StartDeployment+0x5a2>
        } else {
            send_now = true;
 8002f70:	2301      	movs	r3, #1
 8002f72:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
        }

        // wait until next 100 ms tick
        osDelayUntil(next_wake);
 8002f76:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 8002f7a:	f008 fb99 	bl	800b6b0 <osDelayUntil>
        next_wake += 100;
 8002f7e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002f82:	3364      	adds	r3, #100	@ 0x64
 8002f84:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
	for(;;) {
 8002f88:	e537      	b.n	80029fa <StartDeployment+0x26>
 8002f8a:	bf00      	nop
 8002f8c:	20000000 	.word	0x20000000
 8002f90:	7f7fffff 	.word	0x7f7fffff
 8002f94:	20000524 	.word	0x20000524
 8002f98:	449c4000 	.word	0x449c4000
 8002f9c:	20000460 	.word	0x20000460

08002fa0 <StartReadSensors>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadSensors */
void StartReadSensors(void *argument)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b088      	sub	sp, #32
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReadSensors */
  /* Infinite loop */
	for(;;) {
         accel_step(&imu);
 8002fa8:	4828      	ldr	r0, [pc, #160]	@ (800304c <StartReadSensors+0xac>)
 8002faa:	f7fd fffd 	bl	8000fa8 <accel_step>
         gyro_step(&imu);
 8002fae:	4827      	ldr	r0, [pc, #156]	@ (800304c <StartReadSensors+0xac>)
 8002fb0:	f7fe f866 	bl	8001080 <gyro_step>
		 baro_step(&baro);
 8002fb4:	4826      	ldr	r0, [pc, #152]	@ (8003050 <StartReadSensors+0xb0>)
 8002fb6:	f7fe fdf3 	bl	8001ba0 <baro_step>

		 float *accel = accel_get(&imu);
 8002fba:	4824      	ldr	r0, [pc, #144]	@ (800304c <StartReadSensors+0xac>)
 8002fbc:	f7fe f8d0 	bl	8001160 <accel_get>
 8002fc0:	61f8      	str	r0, [r7, #28]
		 float *gyro = gyro_get(&imu);
 8002fc2:	4822      	ldr	r0, [pc, #136]	@ (800304c <StartReadSensors+0xac>)
 8002fc4:	f7fe f8d8 	bl	8001178 <gyro_get>
 8002fc8:	61b8      	str	r0, [r7, #24]
		 float local_pressure = baro_get_pressure(&baro);
 8002fca:	4821      	ldr	r0, [pc, #132]	@ (8003050 <StartReadSensors+0xb0>)
 8002fcc:	f7fe fe9e 	bl	8001d0c <baro_get_pressure>
 8002fd0:	ed87 0a05 	vstr	s0, [r7, #20]
		 float local_altitude = baro_get_altitude(&baro);
 8002fd4:	481e      	ldr	r0, [pc, #120]	@ (8003050 <StartReadSensors+0xb0>)
 8002fd6:	f7fe fe7d 	bl	8001cd4 <baro_get_altitude>
 8002fda:	ed87 0a04 	vstr	s0, [r7, #16]
		 int16_t local_temp = baro_get_temp(&baro);
 8002fde:	481c      	ldr	r0, [pc, #112]	@ (8003050 <StartReadSensors+0xb0>)
 8002fe0:	f7fe fe87 	bl	8001cf2 <baro_get_temp>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	81fb      	strh	r3, [r7, #14]

		 osMutexAcquire(sensorDataHandle, osWaitForever);
 8002fe8:	4b1a      	ldr	r3, [pc, #104]	@ (8003054 <StartReadSensors+0xb4>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f008 fc10 	bl	800b816 <osMutexAcquire>

		 accelData[0] = accel[0];
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a17      	ldr	r2, [pc, #92]	@ (8003058 <StartReadSensors+0xb8>)
 8002ffc:	6013      	str	r3, [r2, #0]
		 accelData[1] = accel[1];
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	4a15      	ldr	r2, [pc, #84]	@ (8003058 <StartReadSensors+0xb8>)
 8003004:	6053      	str	r3, [r2, #4]
		 accelData[2] = accel[2];
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	4a13      	ldr	r2, [pc, #76]	@ (8003058 <StartReadSensors+0xb8>)
 800300c:	6093      	str	r3, [r2, #8]

		 gyroData[0] = gyro[0];
 800300e:	69bb      	ldr	r3, [r7, #24]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a12      	ldr	r2, [pc, #72]	@ (800305c <StartReadSensors+0xbc>)
 8003014:	6013      	str	r3, [r2, #0]
		 gyroData[1] = gyro[1];
 8003016:	69bb      	ldr	r3, [r7, #24]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	4a10      	ldr	r2, [pc, #64]	@ (800305c <StartReadSensors+0xbc>)
 800301c:	6053      	str	r3, [r2, #4]
		 gyroData[2] = gyro[2];
 800301e:	69bb      	ldr	r3, [r7, #24]
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	4a0e      	ldr	r2, [pc, #56]	@ (800305c <StartReadSensors+0xbc>)
 8003024:	6093      	str	r3, [r2, #8]

		 pressure = local_pressure;
 8003026:	4a0e      	ldr	r2, [pc, #56]	@ (8003060 <StartReadSensors+0xc0>)
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	6013      	str	r3, [r2, #0]
		 baro_altitude = local_altitude;
 800302c:	4a0d      	ldr	r2, [pc, #52]	@ (8003064 <StartReadSensors+0xc4>)
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	6013      	str	r3, [r2, #0]
		 temp = local_temp;
 8003032:	4a0d      	ldr	r2, [pc, #52]	@ (8003068 <StartReadSensors+0xc8>)
 8003034:	89fb      	ldrh	r3, [r7, #14]
 8003036:	8013      	strh	r3, [r2, #0]

		 osMutexRelease(sensorDataHandle);
 8003038:	4b06      	ldr	r3, [pc, #24]	@ (8003054 <StartReadSensors+0xb4>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4618      	mov	r0, r3
 800303e:	f008 fc35 	bl	800b8ac <osMutexRelease>

		 osDelay(100);
 8003042:	2064      	movs	r0, #100	@ 0x64
 8003044:	f008 fb19 	bl	800b67a <osDelay>
	for(;;) {
 8003048:	bf00      	nop
 800304a:	e7ad      	b.n	8002fa8 <StartReadSensors+0x8>
 800304c:	20000468 	.word	0x20000468
 8003050:	200004b0 	.word	0x200004b0
 8003054:	20000464 	.word	0x20000464
 8003058:	20000498 	.word	0x20000498
 800305c:	200004a4 	.word	0x200004a4
 8003060:	20000518 	.word	0x20000518
 8003064:	2000051c 	.word	0x2000051c
 8003068:	20000520 	.word	0x20000520

0800306c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b082      	sub	sp, #8
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a04      	ldr	r2, [pc, #16]	@ (800308c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d101      	bne.n	8003082 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800307e:	f000 fb5b 	bl	8003738 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003082:	bf00      	nop
 8003084:	3708      	adds	r7, #8
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	40012c00 	.word	0x40012c00

08003090 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003090:	b480      	push	{r7}
 8003092:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003094:	b672      	cpsid	i
}
 8003096:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003098:	bf00      	nop
 800309a:	e7fd      	b.n	8003098 <Error_Handler+0x8>

0800309c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b082      	sub	sp, #8
 80030a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030a2:	4b12      	ldr	r3, [pc, #72]	@ (80030ec <HAL_MspInit+0x50>)
 80030a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030a6:	4a11      	ldr	r2, [pc, #68]	@ (80030ec <HAL_MspInit+0x50>)
 80030a8:	f043 0301 	orr.w	r3, r3, #1
 80030ac:	6613      	str	r3, [r2, #96]	@ 0x60
 80030ae:	4b0f      	ldr	r3, [pc, #60]	@ (80030ec <HAL_MspInit+0x50>)
 80030b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030b2:	f003 0301 	and.w	r3, r3, #1
 80030b6:	607b      	str	r3, [r7, #4]
 80030b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80030ba:	4b0c      	ldr	r3, [pc, #48]	@ (80030ec <HAL_MspInit+0x50>)
 80030bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030be:	4a0b      	ldr	r2, [pc, #44]	@ (80030ec <HAL_MspInit+0x50>)
 80030c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80030c6:	4b09      	ldr	r3, [pc, #36]	@ (80030ec <HAL_MspInit+0x50>)
 80030c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030ce:	603b      	str	r3, [r7, #0]
 80030d0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80030d2:	2200      	movs	r2, #0
 80030d4:	210f      	movs	r1, #15
 80030d6:	f06f 0001 	mvn.w	r0, #1
 80030da:	f000 fc25 	bl	8003928 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80030de:	f002 fe49 	bl	8005d74 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80030e2:	bf00      	nop
 80030e4:	3708      	adds	r7, #8
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	40021000 	.word	0x40021000

080030f0 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b09e      	sub	sp, #120	@ 0x78
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030f8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80030fc:	2200      	movs	r2, #0
 80030fe:	601a      	str	r2, [r3, #0]
 8003100:	605a      	str	r2, [r3, #4]
 8003102:	609a      	str	r2, [r3, #8]
 8003104:	60da      	str	r2, [r3, #12]
 8003106:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003108:	f107 0314 	add.w	r3, r7, #20
 800310c:	2250      	movs	r2, #80	@ 0x50
 800310e:	2100      	movs	r1, #0
 8003110:	4618      	mov	r0, r3
 8003112:	f00d f88f 	bl	8010234 <memset>
  if(hfdcan->Instance==FDCAN2)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a1f      	ldr	r2, [pc, #124]	@ (8003198 <HAL_FDCAN_MspInit+0xa8>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d137      	bne.n	8003190 <HAL_FDCAN_MspInit+0xa0>

  /* USER CODE END FDCAN2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8003120:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003124:	617b      	str	r3, [r7, #20]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8003126:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800312a:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800312c:	f107 0314 	add.w	r3, r7, #20
 8003130:	4618      	mov	r0, r3
 8003132:	f003 fb79 	bl	8006828 <HAL_RCCEx_PeriphCLKConfig>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d001      	beq.n	8003140 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 800313c:	f7ff ffa8 	bl	8003090 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8003140:	4b16      	ldr	r3, [pc, #88]	@ (800319c <HAL_FDCAN_MspInit+0xac>)
 8003142:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003144:	4a15      	ldr	r2, [pc, #84]	@ (800319c <HAL_FDCAN_MspInit+0xac>)
 8003146:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800314a:	6593      	str	r3, [r2, #88]	@ 0x58
 800314c:	4b13      	ldr	r3, [pc, #76]	@ (800319c <HAL_FDCAN_MspInit+0xac>)
 800314e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003150:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003154:	613b      	str	r3, [r7, #16]
 8003156:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003158:	4b10      	ldr	r3, [pc, #64]	@ (800319c <HAL_FDCAN_MspInit+0xac>)
 800315a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800315c:	4a0f      	ldr	r2, [pc, #60]	@ (800319c <HAL_FDCAN_MspInit+0xac>)
 800315e:	f043 0302 	orr.w	r3, r3, #2
 8003162:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003164:	4b0d      	ldr	r3, [pc, #52]	@ (800319c <HAL_FDCAN_MspInit+0xac>)
 8003166:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003168:	f003 0302 	and.w	r3, r3, #2
 800316c:	60fb      	str	r3, [r7, #12]
 800316e:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN2 GPIO Configuration
    PB5     ------> FDCAN2_RX
    PB6     ------> FDCAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8003170:	2360      	movs	r3, #96	@ 0x60
 8003172:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003174:	2302      	movs	r3, #2
 8003176:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003178:	2300      	movs	r3, #0
 800317a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800317c:	2300      	movs	r3, #0
 800317e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8003180:	2309      	movs	r3, #9
 8003182:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003184:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003188:	4619      	mov	r1, r3
 800318a:	4805      	ldr	r0, [pc, #20]	@ (80031a0 <HAL_FDCAN_MspInit+0xb0>)
 800318c:	f000 fe98 	bl	8003ec0 <HAL_GPIO_Init>

  /* USER CODE END FDCAN2_MspInit 1 */

  }

}
 8003190:	bf00      	nop
 8003192:	3778      	adds	r7, #120	@ 0x78
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}
 8003198:	40006800 	.word	0x40006800
 800319c:	40021000 	.word	0x40021000
 80031a0:	48000400 	.word	0x48000400

080031a4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b08a      	sub	sp, #40	@ 0x28
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031ac:	f107 0314 	add.w	r3, r7, #20
 80031b0:	2200      	movs	r2, #0
 80031b2:	601a      	str	r2, [r3, #0]
 80031b4:	605a      	str	r2, [r3, #4]
 80031b6:	609a      	str	r2, [r3, #8]
 80031b8:	60da      	str	r2, [r3, #12]
 80031ba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a17      	ldr	r2, [pc, #92]	@ (8003220 <HAL_SPI_MspInit+0x7c>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d128      	bne.n	8003218 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80031c6:	4b17      	ldr	r3, [pc, #92]	@ (8003224 <HAL_SPI_MspInit+0x80>)
 80031c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031ca:	4a16      	ldr	r2, [pc, #88]	@ (8003224 <HAL_SPI_MspInit+0x80>)
 80031cc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80031d0:	6613      	str	r3, [r2, #96]	@ 0x60
 80031d2:	4b14      	ldr	r3, [pc, #80]	@ (8003224 <HAL_SPI_MspInit+0x80>)
 80031d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031d6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80031da:	613b      	str	r3, [r7, #16]
 80031dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031de:	4b11      	ldr	r3, [pc, #68]	@ (8003224 <HAL_SPI_MspInit+0x80>)
 80031e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031e2:	4a10      	ldr	r2, [pc, #64]	@ (8003224 <HAL_SPI_MspInit+0x80>)
 80031e4:	f043 0301 	orr.w	r3, r3, #1
 80031e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80031ea:	4b0e      	ldr	r3, [pc, #56]	@ (8003224 <HAL_SPI_MspInit+0x80>)
 80031ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031ee:	f003 0301 	and.w	r3, r3, #1
 80031f2:	60fb      	str	r3, [r7, #12]
 80031f4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80031f6:	23e0      	movs	r3, #224	@ 0xe0
 80031f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031fa:	2302      	movs	r3, #2
 80031fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031fe:	2300      	movs	r3, #0
 8003200:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003202:	2300      	movs	r3, #0
 8003204:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003206:	2305      	movs	r3, #5
 8003208:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800320a:	f107 0314 	add.w	r3, r7, #20
 800320e:	4619      	mov	r1, r3
 8003210:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003214:	f000 fe54 	bl	8003ec0 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8003218:	bf00      	nop
 800321a:	3728      	adds	r7, #40	@ 0x28
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}
 8003220:	40013000 	.word	0x40013000
 8003224:	40021000 	.word	0x40021000

08003228 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b08c      	sub	sp, #48	@ 0x30
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003230:	2300      	movs	r3, #0
 8003232:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8003234:	2300      	movs	r3, #0
 8003236:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003238:	4b2c      	ldr	r3, [pc, #176]	@ (80032ec <HAL_InitTick+0xc4>)
 800323a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800323c:	4a2b      	ldr	r2, [pc, #172]	@ (80032ec <HAL_InitTick+0xc4>)
 800323e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003242:	6613      	str	r3, [r2, #96]	@ 0x60
 8003244:	4b29      	ldr	r3, [pc, #164]	@ (80032ec <HAL_InitTick+0xc4>)
 8003246:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003248:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800324c:	60bb      	str	r3, [r7, #8]
 800324e:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003250:	f107 020c 	add.w	r2, r7, #12
 8003254:	f107 0310 	add.w	r3, r7, #16
 8003258:	4611      	mov	r1, r2
 800325a:	4618      	mov	r0, r3
 800325c:	f003 fa6c 	bl	8006738 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8003260:	f003 fa54 	bl	800670c <HAL_RCC_GetPCLK2Freq>
 8003264:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003266:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003268:	4a21      	ldr	r2, [pc, #132]	@ (80032f0 <HAL_InitTick+0xc8>)
 800326a:	fba2 2303 	umull	r2, r3, r2, r3
 800326e:	0c9b      	lsrs	r3, r3, #18
 8003270:	3b01      	subs	r3, #1
 8003272:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8003274:	4b1f      	ldr	r3, [pc, #124]	@ (80032f4 <HAL_InitTick+0xcc>)
 8003276:	4a20      	ldr	r2, [pc, #128]	@ (80032f8 <HAL_InitTick+0xd0>)
 8003278:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800327a:	4b1e      	ldr	r3, [pc, #120]	@ (80032f4 <HAL_InitTick+0xcc>)
 800327c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003280:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8003282:	4a1c      	ldr	r2, [pc, #112]	@ (80032f4 <HAL_InitTick+0xcc>)
 8003284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003286:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8003288:	4b1a      	ldr	r3, [pc, #104]	@ (80032f4 <HAL_InitTick+0xcc>)
 800328a:	2200      	movs	r2, #0
 800328c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800328e:	4b19      	ldr	r3, [pc, #100]	@ (80032f4 <HAL_InitTick+0xcc>)
 8003290:	2200      	movs	r2, #0
 8003292:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 8003294:	4817      	ldr	r0, [pc, #92]	@ (80032f4 <HAL_InitTick+0xcc>)
 8003296:	f004 faa7 	bl	80077e8 <HAL_TIM_Base_Init>
 800329a:	4603      	mov	r3, r0
 800329c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80032a0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d11b      	bne.n	80032e0 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80032a8:	4812      	ldr	r0, [pc, #72]	@ (80032f4 <HAL_InitTick+0xcc>)
 80032aa:	f004 faff 	bl	80078ac <HAL_TIM_Base_Start_IT>
 80032ae:	4603      	mov	r3, r0
 80032b0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80032b4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d111      	bne.n	80032e0 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80032bc:	2019      	movs	r0, #25
 80032be:	f000 fb4d 	bl	800395c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2b0f      	cmp	r3, #15
 80032c6:	d808      	bhi.n	80032da <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 80032c8:	2200      	movs	r2, #0
 80032ca:	6879      	ldr	r1, [r7, #4]
 80032cc:	2019      	movs	r0, #25
 80032ce:	f000 fb2b 	bl	8003928 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80032d2:	4a0a      	ldr	r2, [pc, #40]	@ (80032fc <HAL_InitTick+0xd4>)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6013      	str	r3, [r2, #0]
 80032d8:	e002      	b.n	80032e0 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80032e0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3730      	adds	r7, #48	@ 0x30
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	40021000 	.word	0x40021000
 80032f0:	431bde83 	.word	0x431bde83
 80032f4:	200005ec 	.word	0x200005ec
 80032f8:	40012c00 	.word	0x40012c00
 80032fc:	20000024 	.word	0x20000024

08003300 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003300:	b480      	push	{r7}
 8003302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003304:	bf00      	nop
 8003306:	e7fd      	b.n	8003304 <NMI_Handler+0x4>

08003308 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003308:	b480      	push	{r7}
 800330a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800330c:	bf00      	nop
 800330e:	e7fd      	b.n	800330c <HardFault_Handler+0x4>

08003310 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003310:	b480      	push	{r7}
 8003312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003314:	bf00      	nop
 8003316:	e7fd      	b.n	8003314 <MemManage_Handler+0x4>

08003318 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003318:	b480      	push	{r7}
 800331a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800331c:	bf00      	nop
 800331e:	e7fd      	b.n	800331c <BusFault_Handler+0x4>

08003320 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003320:	b480      	push	{r7}
 8003322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003324:	bf00      	nop
 8003326:	e7fd      	b.n	8003324 <UsageFault_Handler+0x4>

08003328 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003328:	b480      	push	{r7}
 800332a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800332c:	bf00      	nop
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr
	...

08003338 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800333c:	4802      	ldr	r0, [pc, #8]	@ (8003348 <USB_LP_IRQHandler+0x10>)
 800333e:	f001 f863 	bl	8004408 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8003342:	bf00      	nop
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	200122fc 	.word	0x200122fc

0800334c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003350:	4802      	ldr	r0, [pc, #8]	@ (800335c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8003352:	f004 fb1b 	bl	800798c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8003356:	bf00      	nop
 8003358:	bd80      	pop	{r7, pc}
 800335a:	bf00      	nop
 800335c:	200005ec 	.word	0x200005ec

08003360 <_getpid>:
 8003360:	b480      	push	{r7}
 8003362:	af00      	add	r7, sp, #0
 8003364:	2301      	movs	r3, #1
 8003366:	4618      	mov	r0, r3
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr

08003370 <_kill>:
 8003370:	b580      	push	{r7, lr}
 8003372:	b082      	sub	sp, #8
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	6039      	str	r1, [r7, #0]
 800337a:	f00c ffbd 	bl	80102f8 <__errno>
 800337e:	4603      	mov	r3, r0
 8003380:	2216      	movs	r2, #22
 8003382:	601a      	str	r2, [r3, #0]
 8003384:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003388:	4618      	mov	r0, r3
 800338a:	3708      	adds	r7, #8
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}

08003390 <_exit>:
 8003390:	b580      	push	{r7, lr}
 8003392:	b082      	sub	sp, #8
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	f7ff ffe7 	bl	8003370 <_kill>
 80033a2:	bf00      	nop
 80033a4:	e7fd      	b.n	80033a2 <_exit+0x12>

080033a6 <_read>:
 80033a6:	b580      	push	{r7, lr}
 80033a8:	b086      	sub	sp, #24
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	60f8      	str	r0, [r7, #12]
 80033ae:	60b9      	str	r1, [r7, #8]
 80033b0:	607a      	str	r2, [r7, #4]
 80033b2:	2300      	movs	r3, #0
 80033b4:	617b      	str	r3, [r7, #20]
 80033b6:	e00a      	b.n	80033ce <_read+0x28>
 80033b8:	f3af 8000 	nop.w
 80033bc:	4601      	mov	r1, r0
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	1c5a      	adds	r2, r3, #1
 80033c2:	60ba      	str	r2, [r7, #8]
 80033c4:	b2ca      	uxtb	r2, r1
 80033c6:	701a      	strb	r2, [r3, #0]
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	3301      	adds	r3, #1
 80033cc:	617b      	str	r3, [r7, #20]
 80033ce:	697a      	ldr	r2, [r7, #20]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	429a      	cmp	r2, r3
 80033d4:	dbf0      	blt.n	80033b8 <_read+0x12>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4618      	mov	r0, r3
 80033da:	3718      	adds	r7, #24
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}

080033e0 <_write>:
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b086      	sub	sp, #24
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	60f8      	str	r0, [r7, #12]
 80033e8:	60b9      	str	r1, [r7, #8]
 80033ea:	607a      	str	r2, [r7, #4]
 80033ec:	2300      	movs	r3, #0
 80033ee:	617b      	str	r3, [r7, #20]
 80033f0:	e009      	b.n	8003406 <_write+0x26>
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	1c5a      	adds	r2, r3, #1
 80033f6:	60ba      	str	r2, [r7, #8]
 80033f8:	781b      	ldrb	r3, [r3, #0]
 80033fa:	4618      	mov	r0, r3
 80033fc:	f3af 8000 	nop.w
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	3301      	adds	r3, #1
 8003404:	617b      	str	r3, [r7, #20]
 8003406:	697a      	ldr	r2, [r7, #20]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	429a      	cmp	r2, r3
 800340c:	dbf1      	blt.n	80033f2 <_write+0x12>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4618      	mov	r0, r3
 8003412:	3718      	adds	r7, #24
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}

08003418 <_close>:
 8003418:	b480      	push	{r7}
 800341a:	b083      	sub	sp, #12
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003424:	4618      	mov	r0, r3
 8003426:	370c      	adds	r7, #12
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr

08003430 <_fstat>:
 8003430:	b480      	push	{r7}
 8003432:	b083      	sub	sp, #12
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	6039      	str	r1, [r7, #0]
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003440:	605a      	str	r2, [r3, #4]
 8003442:	2300      	movs	r3, #0
 8003444:	4618      	mov	r0, r3
 8003446:	370c      	adds	r7, #12
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr

08003450 <_isatty>:
 8003450:	b480      	push	{r7}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	2301      	movs	r3, #1
 800345a:	4618      	mov	r0, r3
 800345c:	370c      	adds	r7, #12
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr

08003466 <_lseek>:
 8003466:	b480      	push	{r7}
 8003468:	b085      	sub	sp, #20
 800346a:	af00      	add	r7, sp, #0
 800346c:	60f8      	str	r0, [r7, #12]
 800346e:	60b9      	str	r1, [r7, #8]
 8003470:	607a      	str	r2, [r7, #4]
 8003472:	2300      	movs	r3, #0
 8003474:	4618      	mov	r0, r3
 8003476:	3714      	adds	r7, #20
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr

08003480 <_sbrk>:
 8003480:	b580      	push	{r7, lr}
 8003482:	b086      	sub	sp, #24
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
 8003488:	4a14      	ldr	r2, [pc, #80]	@ (80034dc <_sbrk+0x5c>)
 800348a:	4b15      	ldr	r3, [pc, #84]	@ (80034e0 <_sbrk+0x60>)
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	617b      	str	r3, [r7, #20]
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	613b      	str	r3, [r7, #16]
 8003494:	4b13      	ldr	r3, [pc, #76]	@ (80034e4 <_sbrk+0x64>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d102      	bne.n	80034a2 <_sbrk+0x22>
 800349c:	4b11      	ldr	r3, [pc, #68]	@ (80034e4 <_sbrk+0x64>)
 800349e:	4a12      	ldr	r2, [pc, #72]	@ (80034e8 <_sbrk+0x68>)
 80034a0:	601a      	str	r2, [r3, #0]
 80034a2:	4b10      	ldr	r3, [pc, #64]	@ (80034e4 <_sbrk+0x64>)
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4413      	add	r3, r2
 80034aa:	693a      	ldr	r2, [r7, #16]
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d207      	bcs.n	80034c0 <_sbrk+0x40>
 80034b0:	f00c ff22 	bl	80102f8 <__errno>
 80034b4:	4603      	mov	r3, r0
 80034b6:	220c      	movs	r2, #12
 80034b8:	601a      	str	r2, [r3, #0]
 80034ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80034be:	e009      	b.n	80034d4 <_sbrk+0x54>
 80034c0:	4b08      	ldr	r3, [pc, #32]	@ (80034e4 <_sbrk+0x64>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	60fb      	str	r3, [r7, #12]
 80034c6:	4b07      	ldr	r3, [pc, #28]	@ (80034e4 <_sbrk+0x64>)
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4413      	add	r3, r2
 80034ce:	4a05      	ldr	r2, [pc, #20]	@ (80034e4 <_sbrk+0x64>)
 80034d0:	6013      	str	r3, [r2, #0]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	4618      	mov	r0, r3
 80034d6:	3718      	adds	r7, #24
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	2001c000 	.word	0x2001c000
 80034e0:	00000400 	.word	0x00000400
 80034e4:	20000638 	.word	0x20000638
 80034e8:	20012948 	.word	0x20012948

080034ec <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80034ec:	b480      	push	{r7}
 80034ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80034f0:	4b06      	ldr	r3, [pc, #24]	@ (800350c <SystemInit+0x20>)
 80034f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034f6:	4a05      	ldr	r2, [pc, #20]	@ (800350c <SystemInit+0x20>)
 80034f8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80034fc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003500:	bf00      	nop
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr
 800350a:	bf00      	nop
 800350c:	e000ed00 	.word	0xe000ed00

08003510 <matrix_multiply>:
 8003510:	b480      	push	{r7}
 8003512:	b089      	sub	sp, #36	@ 0x24
 8003514:	af00      	add	r7, sp, #0
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	60b9      	str	r1, [r7, #8]
 800351a:	607a      	str	r2, [r7, #4]
 800351c:	603b      	str	r3, [r7, #0]
 800351e:	2300      	movs	r3, #0
 8003520:	61fb      	str	r3, [r7, #28]
 8003522:	e052      	b.n	80035ca <matrix_multiply+0xba>
 8003524:	2300      	movs	r3, #0
 8003526:	61bb      	str	r3, [r7, #24]
 8003528:	e048      	b.n	80035bc <matrix_multiply+0xac>
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800352e:	fb03 f202 	mul.w	r2, r3, r2
 8003532:	69bb      	ldr	r3, [r7, #24]
 8003534:	4413      	add	r3, r2
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	687a      	ldr	r2, [r7, #4]
 800353a:	4413      	add	r3, r2
 800353c:	f04f 0200 	mov.w	r2, #0
 8003540:	601a      	str	r2, [r3, #0]
 8003542:	2300      	movs	r3, #0
 8003544:	617b      	str	r3, [r7, #20]
 8003546:	e032      	b.n	80035ae <matrix_multiply+0x9e>
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800354c:	fb03 f202 	mul.w	r2, r3, r2
 8003550:	69bb      	ldr	r3, [r7, #24]
 8003552:	4413      	add	r3, r2
 8003554:	009b      	lsls	r3, r3, #2
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	4413      	add	r3, r2
 800355a:	ed93 7a00 	vldr	s14, [r3]
 800355e:	69fb      	ldr	r3, [r7, #28]
 8003560:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003562:	fb03 f202 	mul.w	r2, r3, r2
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	4413      	add	r3, r2
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	68fa      	ldr	r2, [r7, #12]
 800356e:	4413      	add	r3, r2
 8003570:	edd3 6a00 	vldr	s13, [r3]
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003578:	fb03 f202 	mul.w	r2, r3, r2
 800357c:	69bb      	ldr	r3, [r7, #24]
 800357e:	4413      	add	r3, r2
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	68ba      	ldr	r2, [r7, #8]
 8003584:	4413      	add	r3, r2
 8003586:	edd3 7a00 	vldr	s15, [r3]
 800358a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003592:	fb03 f202 	mul.w	r2, r3, r2
 8003596:	69bb      	ldr	r3, [r7, #24]
 8003598:	4413      	add	r3, r2
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	687a      	ldr	r2, [r7, #4]
 800359e:	4413      	add	r3, r2
 80035a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035a4:	edc3 7a00 	vstr	s15, [r3]
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	3301      	adds	r3, #1
 80035ac:	617b      	str	r3, [r7, #20]
 80035ae:	697a      	ldr	r2, [r7, #20]
 80035b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d3c8      	bcc.n	8003548 <matrix_multiply+0x38>
 80035b6:	69bb      	ldr	r3, [r7, #24]
 80035b8:	3301      	adds	r3, #1
 80035ba:	61bb      	str	r3, [r7, #24]
 80035bc:	69ba      	ldr	r2, [r7, #24]
 80035be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d3b2      	bcc.n	800352a <matrix_multiply+0x1a>
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	3301      	adds	r3, #1
 80035c8:	61fb      	str	r3, [r7, #28]
 80035ca:	69fa      	ldr	r2, [r7, #28]
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d3a8      	bcc.n	8003524 <matrix_multiply+0x14>
 80035d2:	bf00      	nop
 80035d4:	bf00      	nop
 80035d6:	3724      	adds	r7, #36	@ 0x24
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr

080035e0 <matrix_transpose>:
 80035e0:	b480      	push	{r7}
 80035e2:	b087      	sub	sp, #28
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	60b9      	str	r1, [r7, #8]
 80035ea:	607a      	str	r2, [r7, #4]
 80035ec:	603b      	str	r3, [r7, #0]
 80035ee:	2300      	movs	r3, #0
 80035f0:	617b      	str	r3, [r7, #20]
 80035f2:	e020      	b.n	8003636 <matrix_transpose+0x56>
 80035f4:	2300      	movs	r3, #0
 80035f6:	613b      	str	r3, [r7, #16]
 80035f8:	e016      	b.n	8003628 <matrix_transpose+0x48>
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	683a      	ldr	r2, [r7, #0]
 80035fe:	fb03 f202 	mul.w	r2, r3, r2
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	4413      	add	r3, r2
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	68fa      	ldr	r2, [r7, #12]
 800360a:	441a      	add	r2, r3
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	6879      	ldr	r1, [r7, #4]
 8003610:	fb03 f101 	mul.w	r1, r3, r1
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	440b      	add	r3, r1
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	68b9      	ldr	r1, [r7, #8]
 800361c:	440b      	add	r3, r1
 800361e:	6812      	ldr	r2, [r2, #0]
 8003620:	601a      	str	r2, [r3, #0]
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	3301      	adds	r3, #1
 8003626:	613b      	str	r3, [r7, #16]
 8003628:	693a      	ldr	r2, [r7, #16]
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	429a      	cmp	r2, r3
 800362e:	d3e4      	bcc.n	80035fa <matrix_transpose+0x1a>
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	3301      	adds	r3, #1
 8003634:	617b      	str	r3, [r7, #20]
 8003636:	697a      	ldr	r2, [r7, #20]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	429a      	cmp	r2, r3
 800363c:	d3da      	bcc.n	80035f4 <matrix_transpose+0x14>
 800363e:	bf00      	nop
 8003640:	bf00      	nop
 8003642:	371c      	adds	r7, #28
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr

0800364c <matrix_norm_sq>:
 800364c:	b480      	push	{r7}
 800364e:	b087      	sub	sp, #28
 8003650:	af00      	add	r7, sp, #0
 8003652:	60f8      	str	r0, [r7, #12]
 8003654:	60b9      	str	r1, [r7, #8]
 8003656:	607a      	str	r2, [r7, #4]
 8003658:	f04f 0300 	mov.w	r3, #0
 800365c:	617b      	str	r3, [r7, #20]
 800365e:	2300      	movs	r3, #0
 8003660:	613b      	str	r3, [r7, #16]
 8003662:	e016      	b.n	8003692 <matrix_norm_sq+0x46>
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	68fa      	ldr	r2, [r7, #12]
 800366a:	4413      	add	r3, r2
 800366c:	ed93 7a00 	vldr	s14, [r3]
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	68fa      	ldr	r2, [r7, #12]
 8003676:	4413      	add	r3, r2
 8003678:	edd3 7a00 	vldr	s15, [r3]
 800367c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003680:	ed97 7a05 	vldr	s14, [r7, #20]
 8003684:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003688:	edc7 7a05 	vstr	s15, [r7, #20]
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	3301      	adds	r3, #1
 8003690:	613b      	str	r3, [r7, #16]
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	fb02 f303 	mul.w	r3, r2, r3
 800369a:	693a      	ldr	r2, [r7, #16]
 800369c:	429a      	cmp	r2, r3
 800369e:	d3e1      	bcc.n	8003664 <matrix_norm_sq+0x18>
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	ee07 3a90 	vmov	s15, r3
 80036a6:	eeb0 0a67 	vmov.f32	s0, s15
 80036aa:	371c      	adds	r7, #28
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr

080036b4 <Reset_Handler>:
 80036b4:	480d      	ldr	r0, [pc, #52]	@ (80036ec <LoopForever+0x2>)
 80036b6:	4685      	mov	sp, r0
 80036b8:	f7ff ff18 	bl	80034ec <SystemInit>
 80036bc:	480c      	ldr	r0, [pc, #48]	@ (80036f0 <LoopForever+0x6>)
 80036be:	490d      	ldr	r1, [pc, #52]	@ (80036f4 <LoopForever+0xa>)
 80036c0:	4a0d      	ldr	r2, [pc, #52]	@ (80036f8 <LoopForever+0xe>)
 80036c2:	2300      	movs	r3, #0
 80036c4:	e002      	b.n	80036cc <LoopCopyDataInit>

080036c6 <CopyDataInit>:
 80036c6:	58d4      	ldr	r4, [r2, r3]
 80036c8:	50c4      	str	r4, [r0, r3]
 80036ca:	3304      	adds	r3, #4

080036cc <LoopCopyDataInit>:
 80036cc:	18c4      	adds	r4, r0, r3
 80036ce:	428c      	cmp	r4, r1
 80036d0:	d3f9      	bcc.n	80036c6 <CopyDataInit>
 80036d2:	4a0a      	ldr	r2, [pc, #40]	@ (80036fc <LoopForever+0x12>)
 80036d4:	4c0a      	ldr	r4, [pc, #40]	@ (8003700 <LoopForever+0x16>)
 80036d6:	2300      	movs	r3, #0
 80036d8:	e001      	b.n	80036de <LoopFillZerobss>

080036da <FillZerobss>:
 80036da:	6013      	str	r3, [r2, #0]
 80036dc:	3204      	adds	r2, #4

080036de <LoopFillZerobss>:
 80036de:	42a2      	cmp	r2, r4
 80036e0:	d3fb      	bcc.n	80036da <FillZerobss>
 80036e2:	f00c fe0f 	bl	8010304 <__libc_init_array>
 80036e6:	f7fe ff59 	bl	800259c <main>

080036ea <LoopForever>:
 80036ea:	e7fe      	b.n	80036ea <LoopForever>
 80036ec:	2001c000 	.word	0x2001c000
 80036f0:	20000000 	.word	0x20000000
 80036f4:	20000370 	.word	0x20000370
 80036f8:	080138c0 	.word	0x080138c0
 80036fc:	20000370 	.word	0x20000370
 8003700:	20012944 	.word	0x20012944

08003704 <ADC1_2_IRQHandler>:
 8003704:	e7fe      	b.n	8003704 <ADC1_2_IRQHandler>

08003706 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003706:	b580      	push	{r7, lr}
 8003708:	b082      	sub	sp, #8
 800370a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800370c:	2300      	movs	r3, #0
 800370e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003710:	2003      	movs	r0, #3
 8003712:	f000 f8fe 	bl	8003912 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003716:	200f      	movs	r0, #15
 8003718:	f7ff fd86 	bl	8003228 <HAL_InitTick>
 800371c:	4603      	mov	r3, r0
 800371e:	2b00      	cmp	r3, #0
 8003720:	d002      	beq.n	8003728 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	71fb      	strb	r3, [r7, #7]
 8003726:	e001      	b.n	800372c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003728:	f7ff fcb8 	bl	800309c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800372c:	79fb      	ldrb	r3, [r7, #7]

}
 800372e:	4618      	mov	r0, r3
 8003730:	3708      	adds	r7, #8
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
	...

08003738 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003738:	b480      	push	{r7}
 800373a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800373c:	4b05      	ldr	r3, [pc, #20]	@ (8003754 <HAL_IncTick+0x1c>)
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	4b05      	ldr	r3, [pc, #20]	@ (8003758 <HAL_IncTick+0x20>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4413      	add	r3, r2
 8003746:	4a03      	ldr	r2, [pc, #12]	@ (8003754 <HAL_IncTick+0x1c>)
 8003748:	6013      	str	r3, [r2, #0]
}
 800374a:	bf00      	nop
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr
 8003754:	2000063c 	.word	0x2000063c
 8003758:	20000028 	.word	0x20000028

0800375c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800375c:	b480      	push	{r7}
 800375e:	af00      	add	r7, sp, #0
  return uwTick;
 8003760:	4b03      	ldr	r3, [pc, #12]	@ (8003770 <HAL_GetTick+0x14>)
 8003762:	681b      	ldr	r3, [r3, #0]
}
 8003764:	4618      	mov	r0, r3
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr
 800376e:	bf00      	nop
 8003770:	2000063c 	.word	0x2000063c

08003774 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800377c:	f7ff ffee 	bl	800375c <HAL_GetTick>
 8003780:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800378c:	d004      	beq.n	8003798 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800378e:	4b09      	ldr	r3, [pc, #36]	@ (80037b4 <HAL_Delay+0x40>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	68fa      	ldr	r2, [r7, #12]
 8003794:	4413      	add	r3, r2
 8003796:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003798:	bf00      	nop
 800379a:	f7ff ffdf 	bl	800375c <HAL_GetTick>
 800379e:	4602      	mov	r2, r0
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	1ad3      	subs	r3, r2, r3
 80037a4:	68fa      	ldr	r2, [r7, #12]
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d8f7      	bhi.n	800379a <HAL_Delay+0x26>
  {
  }
}
 80037aa:	bf00      	nop
 80037ac:	bf00      	nop
 80037ae:	3710      	adds	r7, #16
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}
 80037b4:	20000028 	.word	0x20000028

080037b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b085      	sub	sp, #20
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	f003 0307 	and.w	r3, r3, #7
 80037c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037c8:	4b0c      	ldr	r3, [pc, #48]	@ (80037fc <__NVIC_SetPriorityGrouping+0x44>)
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037ce:	68ba      	ldr	r2, [r7, #8]
 80037d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80037d4:	4013      	ands	r3, r2
 80037d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037e0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80037e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037ea:	4a04      	ldr	r2, [pc, #16]	@ (80037fc <__NVIC_SetPriorityGrouping+0x44>)
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	60d3      	str	r3, [r2, #12]
}
 80037f0:	bf00      	nop
 80037f2:	3714      	adds	r7, #20
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr
 80037fc:	e000ed00 	.word	0xe000ed00

08003800 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003800:	b480      	push	{r7}
 8003802:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003804:	4b04      	ldr	r3, [pc, #16]	@ (8003818 <__NVIC_GetPriorityGrouping+0x18>)
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	0a1b      	lsrs	r3, r3, #8
 800380a:	f003 0307 	and.w	r3, r3, #7
}
 800380e:	4618      	mov	r0, r3
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr
 8003818:	e000ed00 	.word	0xe000ed00

0800381c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 8003822:	4603      	mov	r3, r0
 8003824:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800382a:	2b00      	cmp	r3, #0
 800382c:	db0b      	blt.n	8003846 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800382e:	79fb      	ldrb	r3, [r7, #7]
 8003830:	f003 021f 	and.w	r2, r3, #31
 8003834:	4907      	ldr	r1, [pc, #28]	@ (8003854 <__NVIC_EnableIRQ+0x38>)
 8003836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800383a:	095b      	lsrs	r3, r3, #5
 800383c:	2001      	movs	r0, #1
 800383e:	fa00 f202 	lsl.w	r2, r0, r2
 8003842:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003846:	bf00      	nop
 8003848:	370c      	adds	r7, #12
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr
 8003852:	bf00      	nop
 8003854:	e000e100 	.word	0xe000e100

08003858 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003858:	b480      	push	{r7}
 800385a:	b083      	sub	sp, #12
 800385c:	af00      	add	r7, sp, #0
 800385e:	4603      	mov	r3, r0
 8003860:	6039      	str	r1, [r7, #0]
 8003862:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003864:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003868:	2b00      	cmp	r3, #0
 800386a:	db0a      	blt.n	8003882 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	b2da      	uxtb	r2, r3
 8003870:	490c      	ldr	r1, [pc, #48]	@ (80038a4 <__NVIC_SetPriority+0x4c>)
 8003872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003876:	0112      	lsls	r2, r2, #4
 8003878:	b2d2      	uxtb	r2, r2
 800387a:	440b      	add	r3, r1
 800387c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003880:	e00a      	b.n	8003898 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	b2da      	uxtb	r2, r3
 8003886:	4908      	ldr	r1, [pc, #32]	@ (80038a8 <__NVIC_SetPriority+0x50>)
 8003888:	79fb      	ldrb	r3, [r7, #7]
 800388a:	f003 030f 	and.w	r3, r3, #15
 800388e:	3b04      	subs	r3, #4
 8003890:	0112      	lsls	r2, r2, #4
 8003892:	b2d2      	uxtb	r2, r2
 8003894:	440b      	add	r3, r1
 8003896:	761a      	strb	r2, [r3, #24]
}
 8003898:	bf00      	nop
 800389a:	370c      	adds	r7, #12
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr
 80038a4:	e000e100 	.word	0xe000e100
 80038a8:	e000ed00 	.word	0xe000ed00

080038ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b089      	sub	sp, #36	@ 0x24
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	60f8      	str	r0, [r7, #12]
 80038b4:	60b9      	str	r1, [r7, #8]
 80038b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f003 0307 	and.w	r3, r3, #7
 80038be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	f1c3 0307 	rsb	r3, r3, #7
 80038c6:	2b04      	cmp	r3, #4
 80038c8:	bf28      	it	cs
 80038ca:	2304      	movcs	r3, #4
 80038cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	3304      	adds	r3, #4
 80038d2:	2b06      	cmp	r3, #6
 80038d4:	d902      	bls.n	80038dc <NVIC_EncodePriority+0x30>
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	3b03      	subs	r3, #3
 80038da:	e000      	b.n	80038de <NVIC_EncodePriority+0x32>
 80038dc:	2300      	movs	r3, #0
 80038de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038e0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80038e4:	69bb      	ldr	r3, [r7, #24]
 80038e6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ea:	43da      	mvns	r2, r3
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	401a      	ands	r2, r3
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038f4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	fa01 f303 	lsl.w	r3, r1, r3
 80038fe:	43d9      	mvns	r1, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003904:	4313      	orrs	r3, r2
         );
}
 8003906:	4618      	mov	r0, r3
 8003908:	3724      	adds	r7, #36	@ 0x24
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr

08003912 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003912:	b580      	push	{r7, lr}
 8003914:	b082      	sub	sp, #8
 8003916:	af00      	add	r7, sp, #0
 8003918:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f7ff ff4c 	bl	80037b8 <__NVIC_SetPriorityGrouping>
}
 8003920:	bf00      	nop
 8003922:	3708      	adds	r7, #8
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}

08003928 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b086      	sub	sp, #24
 800392c:	af00      	add	r7, sp, #0
 800392e:	4603      	mov	r3, r0
 8003930:	60b9      	str	r1, [r7, #8]
 8003932:	607a      	str	r2, [r7, #4]
 8003934:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003936:	f7ff ff63 	bl	8003800 <__NVIC_GetPriorityGrouping>
 800393a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800393c:	687a      	ldr	r2, [r7, #4]
 800393e:	68b9      	ldr	r1, [r7, #8]
 8003940:	6978      	ldr	r0, [r7, #20]
 8003942:	f7ff ffb3 	bl	80038ac <NVIC_EncodePriority>
 8003946:	4602      	mov	r2, r0
 8003948:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800394c:	4611      	mov	r1, r2
 800394e:	4618      	mov	r0, r3
 8003950:	f7ff ff82 	bl	8003858 <__NVIC_SetPriority>
}
 8003954:	bf00      	nop
 8003956:	3718      	adds	r7, #24
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}

0800395c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b082      	sub	sp, #8
 8003960:	af00      	add	r7, sp, #0
 8003962:	4603      	mov	r3, r0
 8003964:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800396a:	4618      	mov	r0, r3
 800396c:	f7ff ff56 	bl	800381c <__NVIC_EnableIRQ>
}
 8003970:	bf00      	nop
 8003972:	3708      	adds	r7, #8
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}

08003978 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b084      	sub	sp, #16
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d101      	bne.n	800398a <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e147      	b.n	8003c1a <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003990:	b2db      	uxtb	r3, r3
 8003992:	2b00      	cmp	r3, #0
 8003994:	d106      	bne.n	80039a4 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2200      	movs	r2, #0
 800399a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f7ff fba6 	bl	80030f0 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	699a      	ldr	r2, [r3, #24]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f022 0210 	bic.w	r2, r2, #16
 80039b2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80039b4:	f7ff fed2 	bl	800375c <HAL_GetTick>
 80039b8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80039ba:	e012      	b.n	80039e2 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80039bc:	f7ff fece 	bl	800375c <HAL_GetTick>
 80039c0:	4602      	mov	r2, r0
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	1ad3      	subs	r3, r2, r3
 80039c6:	2b0a      	cmp	r3, #10
 80039c8:	d90b      	bls.n	80039e2 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039ce:	f043 0201 	orr.w	r2, r3, #1
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2203      	movs	r2, #3
 80039da:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e11b      	b.n	8003c1a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	699b      	ldr	r3, [r3, #24]
 80039e8:	f003 0308 	and.w	r3, r3, #8
 80039ec:	2b08      	cmp	r3, #8
 80039ee:	d0e5      	beq.n	80039bc <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	699a      	ldr	r2, [r3, #24]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f042 0201 	orr.w	r2, r2, #1
 80039fe:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a00:	f7ff feac 	bl	800375c <HAL_GetTick>
 8003a04:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003a06:	e012      	b.n	8003a2e <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003a08:	f7ff fea8 	bl	800375c <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	2b0a      	cmp	r3, #10
 8003a14:	d90b      	bls.n	8003a2e <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a1a:	f043 0201 	orr.w	r2, r3, #1
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2203      	movs	r2, #3
 8003a26:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e0f5      	b.n	8003c1a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	699b      	ldr	r3, [r3, #24]
 8003a34:	f003 0301 	and.w	r3, r3, #1
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d0e5      	beq.n	8003a08 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	699a      	ldr	r2, [r3, #24]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f042 0202 	orr.w	r2, r2, #2
 8003a4a:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a74      	ldr	r2, [pc, #464]	@ (8003c24 <HAL_FDCAN_Init+0x2ac>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d103      	bne.n	8003a5e <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8003a56:	4a74      	ldr	r2, [pc, #464]	@ (8003c28 <HAL_FDCAN_Init+0x2b0>)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	7c1b      	ldrb	r3, [r3, #16]
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d108      	bne.n	8003a78 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	699a      	ldr	r2, [r3, #24]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003a74:	619a      	str	r2, [r3, #24]
 8003a76:	e007      	b.n	8003a88 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	699a      	ldr	r2, [r3, #24]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003a86:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	7c5b      	ldrb	r3, [r3, #17]
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d108      	bne.n	8003aa2 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	699a      	ldr	r2, [r3, #24]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003a9e:	619a      	str	r2, [r3, #24]
 8003aa0:	e007      	b.n	8003ab2 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	699a      	ldr	r2, [r3, #24]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003ab0:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	7c9b      	ldrb	r3, [r3, #18]
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d108      	bne.n	8003acc <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	699a      	ldr	r2, [r3, #24]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003ac8:	619a      	str	r2, [r3, #24]
 8003aca:	e007      	b.n	8003adc <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	699a      	ldr	r2, [r3, #24]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003ada:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	699b      	ldr	r3, [r3, #24]
 8003ae2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	689a      	ldr	r2, [r3, #8]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	430a      	orrs	r2, r1
 8003af0:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	699a      	ldr	r2, [r3, #24]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8003b00:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	691a      	ldr	r2, [r3, #16]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f022 0210 	bic.w	r2, r2, #16
 8003b10:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d108      	bne.n	8003b2c <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	699a      	ldr	r2, [r3, #24]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f042 0204 	orr.w	r2, r2, #4
 8003b28:	619a      	str	r2, [r3, #24]
 8003b2a:	e02c      	b.n	8003b86 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d028      	beq.n	8003b86 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	d01c      	beq.n	8003b76 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	699a      	ldr	r2, [r3, #24]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003b4a:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	691a      	ldr	r2, [r3, #16]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f042 0210 	orr.w	r2, r2, #16
 8003b5a:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	68db      	ldr	r3, [r3, #12]
 8003b60:	2b03      	cmp	r3, #3
 8003b62:	d110      	bne.n	8003b86 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	699a      	ldr	r2, [r3, #24]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f042 0220 	orr.w	r2, r2, #32
 8003b72:	619a      	str	r2, [r3, #24]
 8003b74:	e007      	b.n	8003b86 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	699a      	ldr	r2, [r3, #24]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f042 0220 	orr.w	r2, r2, #32
 8003b84:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	699b      	ldr	r3, [r3, #24]
 8003b8a:	3b01      	subs	r3, #1
 8003b8c:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	69db      	ldr	r3, [r3, #28]
 8003b92:	3b01      	subs	r3, #1
 8003b94:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003b96:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6a1b      	ldr	r3, [r3, #32]
 8003b9c:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003b9e:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	695b      	ldr	r3, [r3, #20]
 8003ba6:	3b01      	subs	r3, #1
 8003ba8:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003bae:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003bb0:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003bba:	d115      	bne.n	8003be8 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bc0:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bc6:	3b01      	subs	r3, #1
 8003bc8:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003bca:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bd0:	3b01      	subs	r3, #1
 8003bd2:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003bd4:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bdc:	3b01      	subs	r3, #1
 8003bde:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003be4:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003be6:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	430a      	orrs	r2, r1
 8003bfa:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f000 f880 	bl	8003d04 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2200      	movs	r2, #0
 8003c08:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8003c18:	2300      	movs	r3, #0
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3710      	adds	r7, #16
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	bf00      	nop
 8003c24:	40006400 	.word	0x40006400
 8003c28:	40006500 	.word	0x40006500

08003c2c <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b083      	sub	sp, #12
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d110      	bne.n	8003c62 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2202      	movs	r2, #2
 8003c44:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	699a      	ldr	r2, [r3, #24]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f022 0201 	bic.w	r2, r2, #1
 8003c56:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	e006      	b.n	8003c70 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c66:	f043 0204 	orr.w	r2, r3, #4
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
  }
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	370c      	adds	r7, #12
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr

08003c7c <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b086      	sub	sp, #24
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	60f8      	str	r0, [r7, #12]
 8003c84:	60b9      	str	r1, [r7, #8]
 8003c86:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	2b02      	cmp	r3, #2
 8003c92:	d12c      	bne.n	8003cee <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003c9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d007      	beq.n	8003cb4 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ca8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e023      	b.n	8003cfc <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003cbc:	0c1b      	lsrs	r3, r3, #16
 8003cbe:	f003 0303 	and.w	r3, r3, #3
 8003cc2:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	687a      	ldr	r2, [r7, #4]
 8003cc8:	68b9      	ldr	r1, [r7, #8]
 8003cca:	68f8      	ldr	r0, [r7, #12]
 8003ccc:	f000 f87c 	bl	8003dc8 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	2101      	movs	r1, #1
 8003cd6:	697a      	ldr	r2, [r7, #20]
 8003cd8:	fa01 f202 	lsl.w	r2, r1, r2
 8003cdc:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	409a      	lsls	r2, r3
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 8003cea:	2300      	movs	r3, #0
 8003cec:	e006      	b.n	8003cfc <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cf2:	f043 0208 	orr.w	r2, r3, #8
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
  }
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	3718      	adds	r7, #24
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}

08003d04 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b085      	sub	sp, #20
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8003d0c:	4b2c      	ldr	r3, [pc, #176]	@ (8003dc0 <FDCAN_CalcultateRamBlockAddresses+0xbc>)
 8003d0e:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a2b      	ldr	r2, [pc, #172]	@ (8003dc4 <FDCAN_CalcultateRamBlockAddresses+0xc0>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d103      	bne.n	8003d22 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8003d20:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	68ba      	ldr	r2, [r7, #8]
 8003d26:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d30:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d38:	041a      	lsls	r2, r3, #16
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	430a      	orrs	r2, r1
 8003d40:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d56:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d5e:	061a      	lsls	r2, r3, #24
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	430a      	orrs	r2, r1
 8003d66:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	60fb      	str	r3, [r7, #12]
 8003d96:	e005      	b.n	8003da4 <FDCAN_CalcultateRamBlockAddresses+0xa0>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	3304      	adds	r3, #4
 8003da2:	60fb      	str	r3, [r7, #12]
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8003daa:	68fa      	ldr	r2, [r7, #12]
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d3f3      	bcc.n	8003d98 <FDCAN_CalcultateRamBlockAddresses+0x94>
  }
}
 8003db0:	bf00      	nop
 8003db2:	bf00      	nop
 8003db4:	3714      	adds	r7, #20
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr
 8003dbe:	bf00      	nop
 8003dc0:	4000a400 	.word	0x4000a400
 8003dc4:	40006800 	.word	0x40006800

08003dc8 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b089      	sub	sp, #36	@ 0x24
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	60f8      	str	r0, [r7, #12]
 8003dd0:	60b9      	str	r1, [r7, #8]
 8003dd2:	607a      	str	r2, [r7, #4]
 8003dd4:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d10a      	bne.n	8003df4 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8003de6:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003dee:	4313      	orrs	r3, r2
 8003df0:	61fb      	str	r3, [r7, #28]
 8003df2:	e00a      	b.n	8003e0a <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8003dfc:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8003e02:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003e04:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003e08:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	6a1b      	ldr	r3, [r3, #32]
 8003e0e:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8003e14:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8003e1a:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8003e20:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	68db      	ldr	r3, [r3, #12]
 8003e26:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003e30:	683a      	ldr	r2, [r7, #0]
 8003e32:	4613      	mov	r3, r2
 8003e34:	00db      	lsls	r3, r3, #3
 8003e36:	4413      	add	r3, r2
 8003e38:	00db      	lsls	r3, r3, #3
 8003e3a:	440b      	add	r3, r1
 8003e3c:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8003e3e:	69bb      	ldr	r3, [r7, #24]
 8003e40:	69fa      	ldr	r2, [r7, #28]
 8003e42:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8003e44:	69bb      	ldr	r3, [r7, #24]
 8003e46:	3304      	adds	r3, #4
 8003e48:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8003e4a:	69bb      	ldr	r3, [r7, #24]
 8003e4c:	693a      	ldr	r2, [r7, #16]
 8003e4e:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8003e50:	69bb      	ldr	r3, [r7, #24]
 8003e52:	3304      	adds	r3, #4
 8003e54:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8003e56:	2300      	movs	r3, #0
 8003e58:	617b      	str	r3, [r7, #20]
 8003e5a:	e020      	b.n	8003e9e <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	3303      	adds	r3, #3
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	4413      	add	r3, r2
 8003e64:	781b      	ldrb	r3, [r3, #0]
 8003e66:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	3302      	adds	r3, #2
 8003e6c:	6879      	ldr	r1, [r7, #4]
 8003e6e:	440b      	add	r3, r1
 8003e70:	781b      	ldrb	r3, [r3, #0]
 8003e72:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8003e74:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	3301      	adds	r3, #1
 8003e7a:	6879      	ldr	r1, [r7, #4]
 8003e7c:	440b      	add	r3, r1
 8003e7e:	781b      	ldrb	r3, [r3, #0]
 8003e80:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8003e82:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8003e84:	6879      	ldr	r1, [r7, #4]
 8003e86:	697a      	ldr	r2, [r7, #20]
 8003e88:	440a      	add	r2, r1
 8003e8a:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8003e8c:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8003e8e:	69bb      	ldr	r3, [r7, #24]
 8003e90:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8003e92:	69bb      	ldr	r3, [r7, #24]
 8003e94:	3304      	adds	r3, #4
 8003e96:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	3304      	adds	r3, #4
 8003e9c:	617b      	str	r3, [r7, #20]
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	68db      	ldr	r3, [r3, #12]
 8003ea2:	4a06      	ldr	r2, [pc, #24]	@ (8003ebc <FDCAN_CopyMessageToRAM+0xf4>)
 8003ea4:	5cd3      	ldrb	r3, [r2, r3]
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d3d6      	bcc.n	8003e5c <FDCAN_CopyMessageToRAM+0x94>
  }
}
 8003eae:	bf00      	nop
 8003eb0:	bf00      	nop
 8003eb2:	3724      	adds	r7, #36	@ 0x24
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr
 8003ebc:	08013518 	.word	0x08013518

08003ec0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b087      	sub	sp, #28
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
 8003ec8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003ece:	e15a      	b.n	8004186 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	2101      	movs	r1, #1
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	fa01 f303 	lsl.w	r3, r1, r3
 8003edc:	4013      	ands	r3, r2
 8003ede:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	f000 814c 	beq.w	8004180 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	f003 0303 	and.w	r3, r3, #3
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d005      	beq.n	8003f00 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003efc:	2b02      	cmp	r3, #2
 8003efe:	d130      	bne.n	8003f62 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	005b      	lsls	r3, r3, #1
 8003f0a:	2203      	movs	r2, #3
 8003f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f10:	43db      	mvns	r3, r3
 8003f12:	693a      	ldr	r2, [r7, #16]
 8003f14:	4013      	ands	r3, r2
 8003f16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	68da      	ldr	r2, [r3, #12]
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	005b      	lsls	r3, r3, #1
 8003f20:	fa02 f303 	lsl.w	r3, r2, r3
 8003f24:	693a      	ldr	r2, [r7, #16]
 8003f26:	4313      	orrs	r3, r2
 8003f28:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	693a      	ldr	r2, [r7, #16]
 8003f2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003f36:	2201      	movs	r2, #1
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f3e:	43db      	mvns	r3, r3
 8003f40:	693a      	ldr	r2, [r7, #16]
 8003f42:	4013      	ands	r3, r2
 8003f44:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	091b      	lsrs	r3, r3, #4
 8003f4c:	f003 0201 	and.w	r2, r3, #1
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	fa02 f303 	lsl.w	r3, r2, r3
 8003f56:	693a      	ldr	r2, [r7, #16]
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	693a      	ldr	r2, [r7, #16]
 8003f60:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	f003 0303 	and.w	r3, r3, #3
 8003f6a:	2b03      	cmp	r3, #3
 8003f6c:	d017      	beq.n	8003f9e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	68db      	ldr	r3, [r3, #12]
 8003f72:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	005b      	lsls	r3, r3, #1
 8003f78:	2203      	movs	r2, #3
 8003f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7e:	43db      	mvns	r3, r3
 8003f80:	693a      	ldr	r2, [r7, #16]
 8003f82:	4013      	ands	r3, r2
 8003f84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	689a      	ldr	r2, [r3, #8]
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	005b      	lsls	r3, r3, #1
 8003f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f92:	693a      	ldr	r2, [r7, #16]
 8003f94:	4313      	orrs	r3, r2
 8003f96:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	693a      	ldr	r2, [r7, #16]
 8003f9c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	f003 0303 	and.w	r3, r3, #3
 8003fa6:	2b02      	cmp	r3, #2
 8003fa8:	d123      	bne.n	8003ff2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	08da      	lsrs	r2, r3, #3
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	3208      	adds	r2, #8
 8003fb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fb6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	f003 0307 	and.w	r3, r3, #7
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	220f      	movs	r2, #15
 8003fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc6:	43db      	mvns	r3, r3
 8003fc8:	693a      	ldr	r2, [r7, #16]
 8003fca:	4013      	ands	r3, r2
 8003fcc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	691a      	ldr	r2, [r3, #16]
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	f003 0307 	and.w	r3, r3, #7
 8003fd8:	009b      	lsls	r3, r3, #2
 8003fda:	fa02 f303 	lsl.w	r3, r2, r3
 8003fde:	693a      	ldr	r2, [r7, #16]
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	08da      	lsrs	r2, r3, #3
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	3208      	adds	r2, #8
 8003fec:	6939      	ldr	r1, [r7, #16]
 8003fee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	005b      	lsls	r3, r3, #1
 8003ffc:	2203      	movs	r2, #3
 8003ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8004002:	43db      	mvns	r3, r3
 8004004:	693a      	ldr	r2, [r7, #16]
 8004006:	4013      	ands	r3, r2
 8004008:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	f003 0203 	and.w	r2, r3, #3
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	005b      	lsls	r3, r3, #1
 8004016:	fa02 f303 	lsl.w	r3, r2, r3
 800401a:	693a      	ldr	r2, [r7, #16]
 800401c:	4313      	orrs	r3, r2
 800401e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	693a      	ldr	r2, [r7, #16]
 8004024:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800402e:	2b00      	cmp	r3, #0
 8004030:	f000 80a6 	beq.w	8004180 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004034:	4b5b      	ldr	r3, [pc, #364]	@ (80041a4 <HAL_GPIO_Init+0x2e4>)
 8004036:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004038:	4a5a      	ldr	r2, [pc, #360]	@ (80041a4 <HAL_GPIO_Init+0x2e4>)
 800403a:	f043 0301 	orr.w	r3, r3, #1
 800403e:	6613      	str	r3, [r2, #96]	@ 0x60
 8004040:	4b58      	ldr	r3, [pc, #352]	@ (80041a4 <HAL_GPIO_Init+0x2e4>)
 8004042:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004044:	f003 0301 	and.w	r3, r3, #1
 8004048:	60bb      	str	r3, [r7, #8]
 800404a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800404c:	4a56      	ldr	r2, [pc, #344]	@ (80041a8 <HAL_GPIO_Init+0x2e8>)
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	089b      	lsrs	r3, r3, #2
 8004052:	3302      	adds	r3, #2
 8004054:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004058:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	f003 0303 	and.w	r3, r3, #3
 8004060:	009b      	lsls	r3, r3, #2
 8004062:	220f      	movs	r2, #15
 8004064:	fa02 f303 	lsl.w	r3, r2, r3
 8004068:	43db      	mvns	r3, r3
 800406a:	693a      	ldr	r2, [r7, #16]
 800406c:	4013      	ands	r3, r2
 800406e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004076:	d01f      	beq.n	80040b8 <HAL_GPIO_Init+0x1f8>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	4a4c      	ldr	r2, [pc, #304]	@ (80041ac <HAL_GPIO_Init+0x2ec>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d019      	beq.n	80040b4 <HAL_GPIO_Init+0x1f4>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	4a4b      	ldr	r2, [pc, #300]	@ (80041b0 <HAL_GPIO_Init+0x2f0>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d013      	beq.n	80040b0 <HAL_GPIO_Init+0x1f0>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	4a4a      	ldr	r2, [pc, #296]	@ (80041b4 <HAL_GPIO_Init+0x2f4>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d00d      	beq.n	80040ac <HAL_GPIO_Init+0x1ec>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	4a49      	ldr	r2, [pc, #292]	@ (80041b8 <HAL_GPIO_Init+0x2f8>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d007      	beq.n	80040a8 <HAL_GPIO_Init+0x1e8>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	4a48      	ldr	r2, [pc, #288]	@ (80041bc <HAL_GPIO_Init+0x2fc>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d101      	bne.n	80040a4 <HAL_GPIO_Init+0x1e4>
 80040a0:	2305      	movs	r3, #5
 80040a2:	e00a      	b.n	80040ba <HAL_GPIO_Init+0x1fa>
 80040a4:	2306      	movs	r3, #6
 80040a6:	e008      	b.n	80040ba <HAL_GPIO_Init+0x1fa>
 80040a8:	2304      	movs	r3, #4
 80040aa:	e006      	b.n	80040ba <HAL_GPIO_Init+0x1fa>
 80040ac:	2303      	movs	r3, #3
 80040ae:	e004      	b.n	80040ba <HAL_GPIO_Init+0x1fa>
 80040b0:	2302      	movs	r3, #2
 80040b2:	e002      	b.n	80040ba <HAL_GPIO_Init+0x1fa>
 80040b4:	2301      	movs	r3, #1
 80040b6:	e000      	b.n	80040ba <HAL_GPIO_Init+0x1fa>
 80040b8:	2300      	movs	r3, #0
 80040ba:	697a      	ldr	r2, [r7, #20]
 80040bc:	f002 0203 	and.w	r2, r2, #3
 80040c0:	0092      	lsls	r2, r2, #2
 80040c2:	4093      	lsls	r3, r2
 80040c4:	693a      	ldr	r2, [r7, #16]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80040ca:	4937      	ldr	r1, [pc, #220]	@ (80041a8 <HAL_GPIO_Init+0x2e8>)
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	089b      	lsrs	r3, r3, #2
 80040d0:	3302      	adds	r3, #2
 80040d2:	693a      	ldr	r2, [r7, #16]
 80040d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80040d8:	4b39      	ldr	r3, [pc, #228]	@ (80041c0 <HAL_GPIO_Init+0x300>)
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	43db      	mvns	r3, r3
 80040e2:	693a      	ldr	r2, [r7, #16]
 80040e4:	4013      	ands	r3, r2
 80040e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d003      	beq.n	80040fc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80040f4:	693a      	ldr	r2, [r7, #16]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	4313      	orrs	r3, r2
 80040fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80040fc:	4a30      	ldr	r2, [pc, #192]	@ (80041c0 <HAL_GPIO_Init+0x300>)
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004102:	4b2f      	ldr	r3, [pc, #188]	@ (80041c0 <HAL_GPIO_Init+0x300>)
 8004104:	68db      	ldr	r3, [r3, #12]
 8004106:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	43db      	mvns	r3, r3
 800410c:	693a      	ldr	r2, [r7, #16]
 800410e:	4013      	ands	r3, r2
 8004110:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800411a:	2b00      	cmp	r3, #0
 800411c:	d003      	beq.n	8004126 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800411e:	693a      	ldr	r2, [r7, #16]
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	4313      	orrs	r3, r2
 8004124:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004126:	4a26      	ldr	r2, [pc, #152]	@ (80041c0 <HAL_GPIO_Init+0x300>)
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800412c:	4b24      	ldr	r3, [pc, #144]	@ (80041c0 <HAL_GPIO_Init+0x300>)
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	43db      	mvns	r3, r3
 8004136:	693a      	ldr	r2, [r7, #16]
 8004138:	4013      	ands	r3, r2
 800413a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004144:	2b00      	cmp	r3, #0
 8004146:	d003      	beq.n	8004150 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004148:	693a      	ldr	r2, [r7, #16]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	4313      	orrs	r3, r2
 800414e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004150:	4a1b      	ldr	r2, [pc, #108]	@ (80041c0 <HAL_GPIO_Init+0x300>)
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004156:	4b1a      	ldr	r3, [pc, #104]	@ (80041c0 <HAL_GPIO_Init+0x300>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	43db      	mvns	r3, r3
 8004160:	693a      	ldr	r2, [r7, #16]
 8004162:	4013      	ands	r3, r2
 8004164:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800416e:	2b00      	cmp	r3, #0
 8004170:	d003      	beq.n	800417a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004172:	693a      	ldr	r2, [r7, #16]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	4313      	orrs	r3, r2
 8004178:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800417a:	4a11      	ldr	r2, [pc, #68]	@ (80041c0 <HAL_GPIO_Init+0x300>)
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	3301      	adds	r3, #1
 8004184:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	fa22 f303 	lsr.w	r3, r2, r3
 8004190:	2b00      	cmp	r3, #0
 8004192:	f47f ae9d 	bne.w	8003ed0 <HAL_GPIO_Init+0x10>
  }
}
 8004196:	bf00      	nop
 8004198:	bf00      	nop
 800419a:	371c      	adds	r7, #28
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr
 80041a4:	40021000 	.word	0x40021000
 80041a8:	40010000 	.word	0x40010000
 80041ac:	48000400 	.word	0x48000400
 80041b0:	48000800 	.word	0x48000800
 80041b4:	48000c00 	.word	0x48000c00
 80041b8:	48001000 	.word	0x48001000
 80041bc:	48001400 	.word	0x48001400
 80041c0:	40010400 	.word	0x40010400

080041c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b083      	sub	sp, #12
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	460b      	mov	r3, r1
 80041ce:	807b      	strh	r3, [r7, #2]
 80041d0:	4613      	mov	r3, r2
 80041d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80041d4:	787b      	ldrb	r3, [r7, #1]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d003      	beq.n	80041e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80041da:	887a      	ldrh	r2, [r7, #2]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80041e0:	e002      	b.n	80041e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80041e2:	887a      	ldrh	r2, [r7, #2]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80041e8:	bf00      	nop
 80041ea:	370c      	adds	r7, #12
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr

080041f4 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b085      	sub	sp, #20
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
 80041fc:	460b      	mov	r3, r1
 80041fe:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	695b      	ldr	r3, [r3, #20]
 8004204:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004206:	887a      	ldrh	r2, [r7, #2]
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	4013      	ands	r3, r2
 800420c:	041a      	lsls	r2, r3, #16
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	43d9      	mvns	r1, r3
 8004212:	887b      	ldrh	r3, [r7, #2]
 8004214:	400b      	ands	r3, r1
 8004216:	431a      	orrs	r2, r3
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	619a      	str	r2, [r3, #24]
}
 800421c:	bf00      	nop
 800421e:	3714      	adds	r7, #20
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr

08004228 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b084      	sub	sp, #16
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d101      	bne.n	800423a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	e0c0      	b.n	80043bc <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8004240:	b2db      	uxtb	r3, r3
 8004242:	2b00      	cmp	r3, #0
 8004244:	d106      	bne.n	8004254 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2200      	movs	r2, #0
 800424a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f00a ff98 	bl	800f184 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2203      	movs	r2, #3
 8004258:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4618      	mov	r0, r3
 8004262:	f003 fe12 	bl	8007e8a <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004266:	2300      	movs	r3, #0
 8004268:	73fb      	strb	r3, [r7, #15]
 800426a:	e03e      	b.n	80042ea <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800426c:	7bfa      	ldrb	r2, [r7, #15]
 800426e:	6879      	ldr	r1, [r7, #4]
 8004270:	4613      	mov	r3, r2
 8004272:	009b      	lsls	r3, r3, #2
 8004274:	4413      	add	r3, r2
 8004276:	00db      	lsls	r3, r3, #3
 8004278:	440b      	add	r3, r1
 800427a:	3311      	adds	r3, #17
 800427c:	2201      	movs	r2, #1
 800427e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004280:	7bfa      	ldrb	r2, [r7, #15]
 8004282:	6879      	ldr	r1, [r7, #4]
 8004284:	4613      	mov	r3, r2
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	4413      	add	r3, r2
 800428a:	00db      	lsls	r3, r3, #3
 800428c:	440b      	add	r3, r1
 800428e:	3310      	adds	r3, #16
 8004290:	7bfa      	ldrb	r2, [r7, #15]
 8004292:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004294:	7bfa      	ldrb	r2, [r7, #15]
 8004296:	6879      	ldr	r1, [r7, #4]
 8004298:	4613      	mov	r3, r2
 800429a:	009b      	lsls	r3, r3, #2
 800429c:	4413      	add	r3, r2
 800429e:	00db      	lsls	r3, r3, #3
 80042a0:	440b      	add	r3, r1
 80042a2:	3313      	adds	r3, #19
 80042a4:	2200      	movs	r2, #0
 80042a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80042a8:	7bfa      	ldrb	r2, [r7, #15]
 80042aa:	6879      	ldr	r1, [r7, #4]
 80042ac:	4613      	mov	r3, r2
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	4413      	add	r3, r2
 80042b2:	00db      	lsls	r3, r3, #3
 80042b4:	440b      	add	r3, r1
 80042b6:	3320      	adds	r3, #32
 80042b8:	2200      	movs	r2, #0
 80042ba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80042bc:	7bfa      	ldrb	r2, [r7, #15]
 80042be:	6879      	ldr	r1, [r7, #4]
 80042c0:	4613      	mov	r3, r2
 80042c2:	009b      	lsls	r3, r3, #2
 80042c4:	4413      	add	r3, r2
 80042c6:	00db      	lsls	r3, r3, #3
 80042c8:	440b      	add	r3, r1
 80042ca:	3324      	adds	r3, #36	@ 0x24
 80042cc:	2200      	movs	r2, #0
 80042ce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80042d0:	7bfb      	ldrb	r3, [r7, #15]
 80042d2:	6879      	ldr	r1, [r7, #4]
 80042d4:	1c5a      	adds	r2, r3, #1
 80042d6:	4613      	mov	r3, r2
 80042d8:	009b      	lsls	r3, r3, #2
 80042da:	4413      	add	r3, r2
 80042dc:	00db      	lsls	r3, r3, #3
 80042de:	440b      	add	r3, r1
 80042e0:	2200      	movs	r2, #0
 80042e2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042e4:	7bfb      	ldrb	r3, [r7, #15]
 80042e6:	3301      	adds	r3, #1
 80042e8:	73fb      	strb	r3, [r7, #15]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	791b      	ldrb	r3, [r3, #4]
 80042ee:	7bfa      	ldrb	r2, [r7, #15]
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d3bb      	bcc.n	800426c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042f4:	2300      	movs	r3, #0
 80042f6:	73fb      	strb	r3, [r7, #15]
 80042f8:	e044      	b.n	8004384 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80042fa:	7bfa      	ldrb	r2, [r7, #15]
 80042fc:	6879      	ldr	r1, [r7, #4]
 80042fe:	4613      	mov	r3, r2
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	4413      	add	r3, r2
 8004304:	00db      	lsls	r3, r3, #3
 8004306:	440b      	add	r3, r1
 8004308:	f203 1351 	addw	r3, r3, #337	@ 0x151
 800430c:	2200      	movs	r2, #0
 800430e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004310:	7bfa      	ldrb	r2, [r7, #15]
 8004312:	6879      	ldr	r1, [r7, #4]
 8004314:	4613      	mov	r3, r2
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	4413      	add	r3, r2
 800431a:	00db      	lsls	r3, r3, #3
 800431c:	440b      	add	r3, r1
 800431e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004322:	7bfa      	ldrb	r2, [r7, #15]
 8004324:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004326:	7bfa      	ldrb	r2, [r7, #15]
 8004328:	6879      	ldr	r1, [r7, #4]
 800432a:	4613      	mov	r3, r2
 800432c:	009b      	lsls	r3, r3, #2
 800432e:	4413      	add	r3, r2
 8004330:	00db      	lsls	r3, r3, #3
 8004332:	440b      	add	r3, r1
 8004334:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8004338:	2200      	movs	r2, #0
 800433a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800433c:	7bfa      	ldrb	r2, [r7, #15]
 800433e:	6879      	ldr	r1, [r7, #4]
 8004340:	4613      	mov	r3, r2
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	4413      	add	r3, r2
 8004346:	00db      	lsls	r3, r3, #3
 8004348:	440b      	add	r3, r1
 800434a:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800434e:	2200      	movs	r2, #0
 8004350:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004352:	7bfa      	ldrb	r2, [r7, #15]
 8004354:	6879      	ldr	r1, [r7, #4]
 8004356:	4613      	mov	r3, r2
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	4413      	add	r3, r2
 800435c:	00db      	lsls	r3, r3, #3
 800435e:	440b      	add	r3, r1
 8004360:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8004364:	2200      	movs	r2, #0
 8004366:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004368:	7bfa      	ldrb	r2, [r7, #15]
 800436a:	6879      	ldr	r1, [r7, #4]
 800436c:	4613      	mov	r3, r2
 800436e:	009b      	lsls	r3, r3, #2
 8004370:	4413      	add	r3, r2
 8004372:	00db      	lsls	r3, r3, #3
 8004374:	440b      	add	r3, r1
 8004376:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800437a:	2200      	movs	r2, #0
 800437c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800437e:	7bfb      	ldrb	r3, [r7, #15]
 8004380:	3301      	adds	r3, #1
 8004382:	73fb      	strb	r3, [r7, #15]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	791b      	ldrb	r3, [r3, #4]
 8004388:	7bfa      	ldrb	r2, [r7, #15]
 800438a:	429a      	cmp	r2, r3
 800438c:	d3b5      	bcc.n	80042fa <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6818      	ldr	r0, [r3, #0]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	3304      	adds	r3, #4
 8004396:	e893 0006 	ldmia.w	r3, {r1, r2}
 800439a:	f003 fd91 	bl	8007ec0 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2200      	movs	r2, #0
 80043a2:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2201      	movs	r2, #1
 80043a8:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	7a9b      	ldrb	r3, [r3, #10]
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d102      	bne.n	80043ba <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f001 fc0e 	bl	8005bd6 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80043ba:	2300      	movs	r3, #0
}
 80043bc:	4618      	mov	r0, r3
 80043be:	3710      	adds	r7, #16
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}

080043c4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b082      	sub	sp, #8
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d101      	bne.n	80043da <HAL_PCD_Start+0x16>
 80043d6:	2302      	movs	r3, #2
 80043d8:	e012      	b.n	8004400 <HAL_PCD_Start+0x3c>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2201      	movs	r2, #1
 80043de:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4618      	mov	r0, r3
 80043e8:	f003 fd38 	bl	8007e5c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4618      	mov	r0, r3
 80043f2:	f005 fb15 	bl	8009a20 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2200      	movs	r2, #0
 80043fa:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80043fe:	2300      	movs	r3, #0
}
 8004400:	4618      	mov	r0, r3
 8004402:	3708      	adds	r7, #8
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}

08004408 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b084      	sub	sp, #16
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4618      	mov	r0, r3
 8004416:	f005 fb1a 	bl	8009a4e <USB_ReadInterrupts>
 800441a:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004422:	2b00      	cmp	r3, #0
 8004424:	d003      	beq.n	800442e <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f000 fb06 	bl	8004a38 <PCD_EP_ISR_Handler>

    return;
 800442c:	e110      	b.n	8004650 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004434:	2b00      	cmp	r3, #0
 8004436:	d013      	beq.n	8004460 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004440:	b29a      	uxth	r2, r3
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800444a:	b292      	uxth	r2, r2
 800444c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004450:	6878      	ldr	r0, [r7, #4]
 8004452:	f00a ff28 	bl	800f2a6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004456:	2100      	movs	r1, #0
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	f000 f8fc 	bl	8004656 <HAL_PCD_SetAddress>

    return;
 800445e:	e0f7      	b.n	8004650 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004466:	2b00      	cmp	r3, #0
 8004468:	d00c      	beq.n	8004484 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004472:	b29a      	uxth	r2, r3
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800447c:	b292      	uxth	r2, r2
 800447e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004482:	e0e5      	b.n	8004650 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800448a:	2b00      	cmp	r3, #0
 800448c:	d00c      	beq.n	80044a8 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004496:	b29a      	uxth	r2, r3
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80044a0:	b292      	uxth	r2, r2
 80044a2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80044a6:	e0d3      	b.n	8004650 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d034      	beq.n	800451c <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80044ba:	b29a      	uxth	r2, r3
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f022 0204 	bic.w	r2, r2, #4
 80044c4:	b292      	uxth	r2, r2
 80044c6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80044d2:	b29a      	uxth	r2, r3
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f022 0208 	bic.w	r2, r2, #8
 80044dc:	b292      	uxth	r2, r2
 80044de:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d107      	bne.n	80044fc <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2200      	movs	r2, #0
 80044f0:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80044f4:	2100      	movs	r1, #0
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f00b f8c8 	bl	800f68c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	f00a ff0b 	bl	800f318 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800450a:	b29a      	uxth	r2, r3
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004514:	b292      	uxth	r2, r2
 8004516:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800451a:	e099      	b.n	8004650 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004522:	2b00      	cmp	r3, #0
 8004524:	d027      	beq.n	8004576 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800452e:	b29a      	uxth	r2, r3
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f042 0208 	orr.w	r2, r2, #8
 8004538:	b292      	uxth	r2, r2
 800453a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004546:	b29a      	uxth	r2, r3
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004550:	b292      	uxth	r2, r2
 8004552:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800455e:	b29a      	uxth	r2, r3
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f042 0204 	orr.w	r2, r2, #4
 8004568:	b292      	uxth	r2, r2
 800456a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f00a feb8 	bl	800f2e4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004574:	e06c      	b.n	8004650 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800457c:	2b00      	cmp	r3, #0
 800457e:	d040      	beq.n	8004602 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004588:	b29a      	uxth	r2, r3
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004592:	b292      	uxth	r2, r2
 8004594:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d12b      	bne.n	80045fa <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80045aa:	b29a      	uxth	r2, r3
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f042 0204 	orr.w	r2, r2, #4
 80045b4:	b292      	uxth	r2, r2
 80045b6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80045c2:	b29a      	uxth	r2, r3
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f042 0208 	orr.w	r2, r2, #8
 80045cc:	b292      	uxth	r2, r2
 80045ce:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2201      	movs	r2, #1
 80045d6:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	089b      	lsrs	r3, r3, #2
 80045e6:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80045f0:	2101      	movs	r1, #1
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f00b f84a 	bl	800f68c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80045f8:	e02a      	b.n	8004650 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f00a fe72 	bl	800f2e4 <HAL_PCD_SuspendCallback>
    return;
 8004600:	e026      	b.n	8004650 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004608:	2b00      	cmp	r3, #0
 800460a:	d00f      	beq.n	800462c <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004614:	b29a      	uxth	r2, r3
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800461e:	b292      	uxth	r2, r2
 8004620:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	f00a fe30 	bl	800f28a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800462a:	e011      	b.n	8004650 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004632:	2b00      	cmp	r3, #0
 8004634:	d00c      	beq.n	8004650 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800463e:	b29a      	uxth	r2, r3
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004648:	b292      	uxth	r2, r2
 800464a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800464e:	bf00      	nop
  }
}
 8004650:	3710      	adds	r7, #16
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}

08004656 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004656:	b580      	push	{r7, lr}
 8004658:	b082      	sub	sp, #8
 800465a:	af00      	add	r7, sp, #0
 800465c:	6078      	str	r0, [r7, #4]
 800465e:	460b      	mov	r3, r1
 8004660:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004668:	2b01      	cmp	r3, #1
 800466a:	d101      	bne.n	8004670 <HAL_PCD_SetAddress+0x1a>
 800466c:	2302      	movs	r3, #2
 800466e:	e012      	b.n	8004696 <HAL_PCD_SetAddress+0x40>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2201      	movs	r2, #1
 8004674:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	78fa      	ldrb	r2, [r7, #3]
 800467c:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	78fa      	ldrb	r2, [r7, #3]
 8004684:	4611      	mov	r1, r2
 8004686:	4618      	mov	r0, r3
 8004688:	f005 f9b6 	bl	80099f8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2200      	movs	r2, #0
 8004690:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8004694:	2300      	movs	r3, #0
}
 8004696:	4618      	mov	r0, r3
 8004698:	3708      	adds	r7, #8
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}

0800469e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800469e:	b580      	push	{r7, lr}
 80046a0:	b084      	sub	sp, #16
 80046a2:	af00      	add	r7, sp, #0
 80046a4:	6078      	str	r0, [r7, #4]
 80046a6:	4608      	mov	r0, r1
 80046a8:	4611      	mov	r1, r2
 80046aa:	461a      	mov	r2, r3
 80046ac:	4603      	mov	r3, r0
 80046ae:	70fb      	strb	r3, [r7, #3]
 80046b0:	460b      	mov	r3, r1
 80046b2:	803b      	strh	r3, [r7, #0]
 80046b4:	4613      	mov	r3, r2
 80046b6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80046b8:	2300      	movs	r3, #0
 80046ba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80046bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	da0e      	bge.n	80046e2 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80046c4:	78fb      	ldrb	r3, [r7, #3]
 80046c6:	f003 0207 	and.w	r2, r3, #7
 80046ca:	4613      	mov	r3, r2
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	4413      	add	r3, r2
 80046d0:	00db      	lsls	r3, r3, #3
 80046d2:	3310      	adds	r3, #16
 80046d4:	687a      	ldr	r2, [r7, #4]
 80046d6:	4413      	add	r3, r2
 80046d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2201      	movs	r2, #1
 80046de:	705a      	strb	r2, [r3, #1]
 80046e0:	e00e      	b.n	8004700 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80046e2:	78fb      	ldrb	r3, [r7, #3]
 80046e4:	f003 0207 	and.w	r2, r3, #7
 80046e8:	4613      	mov	r3, r2
 80046ea:	009b      	lsls	r3, r3, #2
 80046ec:	4413      	add	r3, r2
 80046ee:	00db      	lsls	r3, r3, #3
 80046f0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80046f4:	687a      	ldr	r2, [r7, #4]
 80046f6:	4413      	add	r3, r2
 80046f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2200      	movs	r2, #0
 80046fe:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004700:	78fb      	ldrb	r3, [r7, #3]
 8004702:	f003 0307 	and.w	r3, r3, #7
 8004706:	b2da      	uxtb	r2, r3
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800470c:	883b      	ldrh	r3, [r7, #0]
 800470e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	78ba      	ldrb	r2, [r7, #2]
 800471a:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800471c:	78bb      	ldrb	r3, [r7, #2]
 800471e:	2b02      	cmp	r3, #2
 8004720:	d102      	bne.n	8004728 <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2200      	movs	r2, #0
 8004726:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800472e:	2b01      	cmp	r3, #1
 8004730:	d101      	bne.n	8004736 <HAL_PCD_EP_Open+0x98>
 8004732:	2302      	movs	r3, #2
 8004734:	e00e      	b.n	8004754 <HAL_PCD_EP_Open+0xb6>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2201      	movs	r2, #1
 800473a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	68f9      	ldr	r1, [r7, #12]
 8004744:	4618      	mov	r0, r3
 8004746:	f003 fbd9 	bl	8007efc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2200      	movs	r2, #0
 800474e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8004752:	7afb      	ldrb	r3, [r7, #11]
}
 8004754:	4618      	mov	r0, r3
 8004756:	3710      	adds	r7, #16
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}

0800475c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b084      	sub	sp, #16
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
 8004764:	460b      	mov	r3, r1
 8004766:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004768:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800476c:	2b00      	cmp	r3, #0
 800476e:	da0e      	bge.n	800478e <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004770:	78fb      	ldrb	r3, [r7, #3]
 8004772:	f003 0207 	and.w	r2, r3, #7
 8004776:	4613      	mov	r3, r2
 8004778:	009b      	lsls	r3, r3, #2
 800477a:	4413      	add	r3, r2
 800477c:	00db      	lsls	r3, r3, #3
 800477e:	3310      	adds	r3, #16
 8004780:	687a      	ldr	r2, [r7, #4]
 8004782:	4413      	add	r3, r2
 8004784:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2201      	movs	r2, #1
 800478a:	705a      	strb	r2, [r3, #1]
 800478c:	e00e      	b.n	80047ac <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800478e:	78fb      	ldrb	r3, [r7, #3]
 8004790:	f003 0207 	and.w	r2, r3, #7
 8004794:	4613      	mov	r3, r2
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	4413      	add	r3, r2
 800479a:	00db      	lsls	r3, r3, #3
 800479c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80047a0:	687a      	ldr	r2, [r7, #4]
 80047a2:	4413      	add	r3, r2
 80047a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2200      	movs	r2, #0
 80047aa:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80047ac:	78fb      	ldrb	r3, [r7, #3]
 80047ae:	f003 0307 	and.w	r3, r3, #7
 80047b2:	b2da      	uxtb	r2, r3
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d101      	bne.n	80047c6 <HAL_PCD_EP_Close+0x6a>
 80047c2:	2302      	movs	r3, #2
 80047c4:	e00e      	b.n	80047e4 <HAL_PCD_EP_Close+0x88>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2201      	movs	r2, #1
 80047ca:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	68f9      	ldr	r1, [r7, #12]
 80047d4:	4618      	mov	r0, r3
 80047d6:	f004 f879 	bl	80088cc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2200      	movs	r2, #0
 80047de:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 80047e2:	2300      	movs	r3, #0
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	3710      	adds	r7, #16
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}

080047ec <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b086      	sub	sp, #24
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	60f8      	str	r0, [r7, #12]
 80047f4:	607a      	str	r2, [r7, #4]
 80047f6:	603b      	str	r3, [r7, #0]
 80047f8:	460b      	mov	r3, r1
 80047fa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80047fc:	7afb      	ldrb	r3, [r7, #11]
 80047fe:	f003 0207 	and.w	r2, r3, #7
 8004802:	4613      	mov	r3, r2
 8004804:	009b      	lsls	r3, r3, #2
 8004806:	4413      	add	r3, r2
 8004808:	00db      	lsls	r3, r3, #3
 800480a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800480e:	68fa      	ldr	r2, [r7, #12]
 8004810:	4413      	add	r3, r2
 8004812:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	687a      	ldr	r2, [r7, #4]
 8004818:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	683a      	ldr	r2, [r7, #0]
 800481e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	2200      	movs	r2, #0
 8004824:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	2200      	movs	r2, #0
 800482a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800482c:	7afb      	ldrb	r3, [r7, #11]
 800482e:	f003 0307 	and.w	r3, r3, #7
 8004832:	b2da      	uxtb	r2, r3
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	6979      	ldr	r1, [r7, #20]
 800483e:	4618      	mov	r0, r3
 8004840:	f004 fa31 	bl	8008ca6 <USB_EPStartXfer>

  return HAL_OK;
 8004844:	2300      	movs	r3, #0
}
 8004846:	4618      	mov	r0, r3
 8004848:	3718      	adds	r7, #24
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}

0800484e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800484e:	b480      	push	{r7}
 8004850:	b083      	sub	sp, #12
 8004852:	af00      	add	r7, sp, #0
 8004854:	6078      	str	r0, [r7, #4]
 8004856:	460b      	mov	r3, r1
 8004858:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800485a:	78fb      	ldrb	r3, [r7, #3]
 800485c:	f003 0207 	and.w	r2, r3, #7
 8004860:	6879      	ldr	r1, [r7, #4]
 8004862:	4613      	mov	r3, r2
 8004864:	009b      	lsls	r3, r3, #2
 8004866:	4413      	add	r3, r2
 8004868:	00db      	lsls	r3, r3, #3
 800486a:	440b      	add	r3, r1
 800486c:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8004870:	681b      	ldr	r3, [r3, #0]
}
 8004872:	4618      	mov	r0, r3
 8004874:	370c      	adds	r7, #12
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr

0800487e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800487e:	b580      	push	{r7, lr}
 8004880:	b086      	sub	sp, #24
 8004882:	af00      	add	r7, sp, #0
 8004884:	60f8      	str	r0, [r7, #12]
 8004886:	607a      	str	r2, [r7, #4]
 8004888:	603b      	str	r3, [r7, #0]
 800488a:	460b      	mov	r3, r1
 800488c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800488e:	7afb      	ldrb	r3, [r7, #11]
 8004890:	f003 0207 	and.w	r2, r3, #7
 8004894:	4613      	mov	r3, r2
 8004896:	009b      	lsls	r3, r3, #2
 8004898:	4413      	add	r3, r2
 800489a:	00db      	lsls	r3, r3, #3
 800489c:	3310      	adds	r3, #16
 800489e:	68fa      	ldr	r2, [r7, #12]
 80048a0:	4413      	add	r3, r2
 80048a2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	687a      	ldr	r2, [r7, #4]
 80048a8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	683a      	ldr	r2, [r7, #0]
 80048ae:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	2201      	movs	r2, #1
 80048b4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	683a      	ldr	r2, [r7, #0]
 80048bc:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	2200      	movs	r2, #0
 80048c2:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	2201      	movs	r2, #1
 80048c8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80048ca:	7afb      	ldrb	r3, [r7, #11]
 80048cc:	f003 0307 	and.w	r3, r3, #7
 80048d0:	b2da      	uxtb	r2, r3
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	6979      	ldr	r1, [r7, #20]
 80048dc:	4618      	mov	r0, r3
 80048de:	f004 f9e2 	bl	8008ca6 <USB_EPStartXfer>

  return HAL_OK;
 80048e2:	2300      	movs	r3, #0
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3718      	adds	r7, #24
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}

080048ec <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b084      	sub	sp, #16
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	460b      	mov	r3, r1
 80048f6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80048f8:	78fb      	ldrb	r3, [r7, #3]
 80048fa:	f003 0307 	and.w	r3, r3, #7
 80048fe:	687a      	ldr	r2, [r7, #4]
 8004900:	7912      	ldrb	r2, [r2, #4]
 8004902:	4293      	cmp	r3, r2
 8004904:	d901      	bls.n	800490a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	e03e      	b.n	8004988 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800490a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800490e:	2b00      	cmp	r3, #0
 8004910:	da0e      	bge.n	8004930 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004912:	78fb      	ldrb	r3, [r7, #3]
 8004914:	f003 0207 	and.w	r2, r3, #7
 8004918:	4613      	mov	r3, r2
 800491a:	009b      	lsls	r3, r3, #2
 800491c:	4413      	add	r3, r2
 800491e:	00db      	lsls	r3, r3, #3
 8004920:	3310      	adds	r3, #16
 8004922:	687a      	ldr	r2, [r7, #4]
 8004924:	4413      	add	r3, r2
 8004926:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2201      	movs	r2, #1
 800492c:	705a      	strb	r2, [r3, #1]
 800492e:	e00c      	b.n	800494a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004930:	78fa      	ldrb	r2, [r7, #3]
 8004932:	4613      	mov	r3, r2
 8004934:	009b      	lsls	r3, r3, #2
 8004936:	4413      	add	r3, r2
 8004938:	00db      	lsls	r3, r3, #3
 800493a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800493e:	687a      	ldr	r2, [r7, #4]
 8004940:	4413      	add	r3, r2
 8004942:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2200      	movs	r2, #0
 8004948:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2201      	movs	r2, #1
 800494e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004950:	78fb      	ldrb	r3, [r7, #3]
 8004952:	f003 0307 	and.w	r3, r3, #7
 8004956:	b2da      	uxtb	r2, r3
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004962:	2b01      	cmp	r3, #1
 8004964:	d101      	bne.n	800496a <HAL_PCD_EP_SetStall+0x7e>
 8004966:	2302      	movs	r3, #2
 8004968:	e00e      	b.n	8004988 <HAL_PCD_EP_SetStall+0x9c>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2201      	movs	r2, #1
 800496e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	68f9      	ldr	r1, [r7, #12]
 8004978:	4618      	mov	r0, r3
 800497a:	f004 ff43 	bl	8009804 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2200      	movs	r2, #0
 8004982:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8004986:	2300      	movs	r3, #0
}
 8004988:	4618      	mov	r0, r3
 800498a:	3710      	adds	r7, #16
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}

08004990 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b084      	sub	sp, #16
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
 8004998:	460b      	mov	r3, r1
 800499a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800499c:	78fb      	ldrb	r3, [r7, #3]
 800499e:	f003 030f 	and.w	r3, r3, #15
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	7912      	ldrb	r2, [r2, #4]
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d901      	bls.n	80049ae <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	e040      	b.n	8004a30 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80049ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	da0e      	bge.n	80049d4 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80049b6:	78fb      	ldrb	r3, [r7, #3]
 80049b8:	f003 0207 	and.w	r2, r3, #7
 80049bc:	4613      	mov	r3, r2
 80049be:	009b      	lsls	r3, r3, #2
 80049c0:	4413      	add	r3, r2
 80049c2:	00db      	lsls	r3, r3, #3
 80049c4:	3310      	adds	r3, #16
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	4413      	add	r3, r2
 80049ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2201      	movs	r2, #1
 80049d0:	705a      	strb	r2, [r3, #1]
 80049d2:	e00e      	b.n	80049f2 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80049d4:	78fb      	ldrb	r3, [r7, #3]
 80049d6:	f003 0207 	and.w	r2, r3, #7
 80049da:	4613      	mov	r3, r2
 80049dc:	009b      	lsls	r3, r3, #2
 80049de:	4413      	add	r3, r2
 80049e0:	00db      	lsls	r3, r3, #3
 80049e2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80049e6:	687a      	ldr	r2, [r7, #4]
 80049e8:	4413      	add	r3, r2
 80049ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2200      	movs	r2, #0
 80049f0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2200      	movs	r2, #0
 80049f6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80049f8:	78fb      	ldrb	r3, [r7, #3]
 80049fa:	f003 0307 	and.w	r3, r3, #7
 80049fe:	b2da      	uxtb	r2, r3
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d101      	bne.n	8004a12 <HAL_PCD_EP_ClrStall+0x82>
 8004a0e:	2302      	movs	r3, #2
 8004a10:	e00e      	b.n	8004a30 <HAL_PCD_EP_ClrStall+0xa0>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2201      	movs	r2, #1
 8004a16:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	68f9      	ldr	r1, [r7, #12]
 8004a20:	4618      	mov	r0, r3
 8004a22:	f004 ff40 	bl	80098a6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8004a2e:	2300      	movs	r3, #0
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	3710      	adds	r7, #16
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}

08004a38 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b092      	sub	sp, #72	@ 0x48
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004a40:	e333      	b.n	80050aa <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004a4a:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004a4c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8004a4e:	b2db      	uxtb	r3, r3
 8004a50:	f003 030f 	and.w	r3, r3, #15
 8004a54:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 8004a58:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	f040 8108 	bne.w	8004c72 <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004a62:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8004a64:	f003 0310 	and.w	r3, r3, #16
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d14c      	bne.n	8004b06 <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	881b      	ldrh	r3, [r3, #0]
 8004a72:	b29b      	uxth	r3, r3
 8004a74:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8004a78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a7c:	813b      	strh	r3, [r7, #8]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681a      	ldr	r2, [r3, #0]
 8004a82:	893b      	ldrh	r3, [r7, #8]
 8004a84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a8c:	b29b      	uxth	r3, r3
 8004a8e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	3310      	adds	r3, #16
 8004a94:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004a9e:	b29b      	uxth	r3, r3
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004aa4:	781b      	ldrb	r3, [r3, #0]
 8004aa6:	00db      	lsls	r3, r3, #3
 8004aa8:	4413      	add	r3, r2
 8004aaa:	687a      	ldr	r2, [r7, #4]
 8004aac:	6812      	ldr	r2, [r2, #0]
 8004aae:	4413      	add	r3, r2
 8004ab0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004ab4:	881b      	ldrh	r3, [r3, #0]
 8004ab6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004aba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004abc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004abe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ac0:	695a      	ldr	r2, [r3, #20]
 8004ac2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ac4:	69db      	ldr	r3, [r3, #28]
 8004ac6:	441a      	add	r2, r3
 8004ac8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004aca:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004acc:	2100      	movs	r1, #0
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f00a fbc1 	bl	800f256 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	7b1b      	ldrb	r3, [r3, #12]
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	f000 82e5 	beq.w	80050aa <PCD_EP_ISR_Handler+0x672>
 8004ae0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ae2:	699b      	ldr	r3, [r3, #24]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	f040 82e0 	bne.w	80050aa <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	7b1b      	ldrb	r3, [r3, #12]
 8004aee:	b2db      	uxtb	r3, r3
 8004af0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004af4:	b2da      	uxtb	r2, r3
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2200      	movs	r2, #0
 8004b02:	731a      	strb	r2, [r3, #12]
 8004b04:	e2d1      	b.n	80050aa <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004b0c:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	881b      	ldrh	r3, [r3, #0]
 8004b14:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004b16:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004b18:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d032      	beq.n	8004b86 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	461a      	mov	r2, r3
 8004b2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b2e:	781b      	ldrb	r3, [r3, #0]
 8004b30:	00db      	lsls	r3, r3, #3
 8004b32:	4413      	add	r3, r2
 8004b34:	687a      	ldr	r2, [r7, #4]
 8004b36:	6812      	ldr	r2, [r2, #0]
 8004b38:	4413      	add	r3, r2
 8004b3a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004b3e:	881b      	ldrh	r3, [r3, #0]
 8004b40:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004b44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b46:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6818      	ldr	r0, [r3, #0]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8004b52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b54:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004b56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b58:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004b5a:	b29b      	uxth	r3, r3
 8004b5c:	f004 ffc9 	bl	8009af2 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	881b      	ldrh	r3, [r3, #0]
 8004b66:	b29a      	uxth	r2, r3
 8004b68:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	817b      	strh	r3, [r7, #10]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	897a      	ldrh	r2, [r7, #10]
 8004b76:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004b7a:	b292      	uxth	r2, r2
 8004b7c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f00a fb3c 	bl	800f1fc <HAL_PCD_SetupStageCallback>
 8004b84:	e291      	b.n	80050aa <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004b86:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	f280 828d 	bge.w	80050aa <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	881b      	ldrh	r3, [r3, #0]
 8004b96:	b29a      	uxth	r2, r3
 8004b98:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8004b9c:	4013      	ands	r3, r2
 8004b9e:	81fb      	strh	r3, [r7, #14]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	89fa      	ldrh	r2, [r7, #14]
 8004ba6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004baa:	b292      	uxth	r2, r2
 8004bac:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004bb6:	b29b      	uxth	r3, r3
 8004bb8:	461a      	mov	r2, r3
 8004bba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004bbc:	781b      	ldrb	r3, [r3, #0]
 8004bbe:	00db      	lsls	r3, r3, #3
 8004bc0:	4413      	add	r3, r2
 8004bc2:	687a      	ldr	r2, [r7, #4]
 8004bc4:	6812      	ldr	r2, [r2, #0]
 8004bc6:	4413      	add	r3, r2
 8004bc8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004bcc:	881b      	ldrh	r3, [r3, #0]
 8004bce:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004bd2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004bd4:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004bd6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004bd8:	69db      	ldr	r3, [r3, #28]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d019      	beq.n	8004c12 <PCD_EP_ISR_Handler+0x1da>
 8004bde:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004be0:	695b      	ldr	r3, [r3, #20]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d015      	beq.n	8004c12 <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6818      	ldr	r0, [r3, #0]
 8004bea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004bec:	6959      	ldr	r1, [r3, #20]
 8004bee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004bf0:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004bf2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004bf4:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004bf6:	b29b      	uxth	r3, r3
 8004bf8:	f004 ff7b 	bl	8009af2 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004bfc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004bfe:	695a      	ldr	r2, [r3, #20]
 8004c00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c02:	69db      	ldr	r3, [r3, #28]
 8004c04:	441a      	add	r2, r3
 8004c06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c08:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004c0a:	2100      	movs	r1, #0
 8004c0c:	6878      	ldr	r0, [r7, #4]
 8004c0e:	f00a fb07 	bl	800f220 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	881b      	ldrh	r3, [r3, #0]
 8004c18:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8004c1a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004c1c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	f040 8242 	bne.w	80050aa <PCD_EP_ISR_Handler+0x672>
 8004c26:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004c28:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004c2c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004c30:	f000 823b 	beq.w	80050aa <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	881b      	ldrh	r3, [r3, #0]
 8004c3a:	b29b      	uxth	r3, r3
 8004c3c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004c40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c44:	81bb      	strh	r3, [r7, #12]
 8004c46:	89bb      	ldrh	r3, [r7, #12]
 8004c48:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004c4c:	81bb      	strh	r3, [r7, #12]
 8004c4e:	89bb      	ldrh	r3, [r7, #12]
 8004c50:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004c54:	81bb      	strh	r3, [r7, #12]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	89bb      	ldrh	r3, [r7, #12]
 8004c5c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c60:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c64:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	8013      	strh	r3, [r2, #0]
 8004c70:	e21b      	b.n	80050aa <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	461a      	mov	r2, r3
 8004c78:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8004c7c:	009b      	lsls	r3, r3, #2
 8004c7e:	4413      	add	r3, r2
 8004c80:	881b      	ldrh	r3, [r3, #0]
 8004c82:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004c84:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	f280 80f1 	bge.w	8004e70 <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	461a      	mov	r2, r3
 8004c94:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8004c98:	009b      	lsls	r3, r3, #2
 8004c9a:	4413      	add	r3, r2
 8004c9c:	881b      	ldrh	r3, [r3, #0]
 8004c9e:	b29a      	uxth	r2, r3
 8004ca0:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8004ca4:	4013      	ands	r3, r2
 8004ca6:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	461a      	mov	r2, r3
 8004cae:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8004cb2:	009b      	lsls	r3, r3, #2
 8004cb4:	4413      	add	r3, r2
 8004cb6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004cb8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004cbc:	b292      	uxth	r2, r2
 8004cbe:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004cc0:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8004cc4:	4613      	mov	r3, r2
 8004cc6:	009b      	lsls	r3, r3, #2
 8004cc8:	4413      	add	r3, r2
 8004cca:	00db      	lsls	r3, r3, #3
 8004ccc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004cd0:	687a      	ldr	r2, [r7, #4]
 8004cd2:	4413      	add	r3, r2
 8004cd4:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004cd6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004cd8:	7b1b      	ldrb	r3, [r3, #12]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d123      	bne.n	8004d26 <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	461a      	mov	r2, r3
 8004cea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004cec:	781b      	ldrb	r3, [r3, #0]
 8004cee:	00db      	lsls	r3, r3, #3
 8004cf0:	4413      	add	r3, r2
 8004cf2:	687a      	ldr	r2, [r7, #4]
 8004cf4:	6812      	ldr	r2, [r2, #0]
 8004cf6:	4413      	add	r3, r2
 8004cf8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004cfc:	881b      	ldrh	r3, [r3, #0]
 8004cfe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d02:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 8004d06:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	f000 808b 	beq.w	8004e26 <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6818      	ldr	r0, [r3, #0]
 8004d14:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d16:	6959      	ldr	r1, [r3, #20]
 8004d18:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d1a:	88da      	ldrh	r2, [r3, #6]
 8004d1c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004d20:	f004 fee7 	bl	8009af2 <USB_ReadPMA>
 8004d24:	e07f      	b.n	8004e26 <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004d26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d28:	78db      	ldrb	r3, [r3, #3]
 8004d2a:	2b02      	cmp	r3, #2
 8004d2c:	d109      	bne.n	8004d42 <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004d2e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004d30:	461a      	mov	r2, r3
 8004d32:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f000 f9c6 	bl	80050c6 <HAL_PCD_EP_DB_Receive>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8004d40:	e071      	b.n	8004e26 <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	461a      	mov	r2, r3
 8004d48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d4a:	781b      	ldrb	r3, [r3, #0]
 8004d4c:	009b      	lsls	r3, r3, #2
 8004d4e:	4413      	add	r3, r2
 8004d50:	881b      	ldrh	r3, [r3, #0]
 8004d52:	b29b      	uxth	r3, r3
 8004d54:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d58:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d5c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	461a      	mov	r2, r3
 8004d64:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d66:	781b      	ldrb	r3, [r3, #0]
 8004d68:	009b      	lsls	r3, r3, #2
 8004d6a:	441a      	add	r2, r3
 8004d6c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8004d6e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d72:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d76:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d7a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	461a      	mov	r2, r3
 8004d88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d8a:	781b      	ldrb	r3, [r3, #0]
 8004d8c:	009b      	lsls	r3, r3, #2
 8004d8e:	4413      	add	r3, r2
 8004d90:	881b      	ldrh	r3, [r3, #0]
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d022      	beq.n	8004de2 <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	461a      	mov	r2, r3
 8004da8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004daa:	781b      	ldrb	r3, [r3, #0]
 8004dac:	00db      	lsls	r3, r3, #3
 8004dae:	4413      	add	r3, r2
 8004db0:	687a      	ldr	r2, [r7, #4]
 8004db2:	6812      	ldr	r2, [r2, #0]
 8004db4:	4413      	add	r3, r2
 8004db6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004dba:	881b      	ldrh	r3, [r3, #0]
 8004dbc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004dc0:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8004dc4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d02c      	beq.n	8004e26 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6818      	ldr	r0, [r3, #0]
 8004dd0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004dd2:	6959      	ldr	r1, [r3, #20]
 8004dd4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004dd6:	891a      	ldrh	r2, [r3, #8]
 8004dd8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004ddc:	f004 fe89 	bl	8009af2 <USB_ReadPMA>
 8004de0:	e021      	b.n	8004e26 <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	461a      	mov	r2, r3
 8004dee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004df0:	781b      	ldrb	r3, [r3, #0]
 8004df2:	00db      	lsls	r3, r3, #3
 8004df4:	4413      	add	r3, r2
 8004df6:	687a      	ldr	r2, [r7, #4]
 8004df8:	6812      	ldr	r2, [r2, #0]
 8004dfa:	4413      	add	r3, r2
 8004dfc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004e00:	881b      	ldrh	r3, [r3, #0]
 8004e02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e06:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8004e0a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d009      	beq.n	8004e26 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6818      	ldr	r0, [r3, #0]
 8004e16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e18:	6959      	ldr	r1, [r3, #20]
 8004e1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e1c:	895a      	ldrh	r2, [r3, #10]
 8004e1e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004e22:	f004 fe66 	bl	8009af2 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004e26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e28:	69da      	ldr	r2, [r3, #28]
 8004e2a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004e2e:	441a      	add	r2, r3
 8004e30:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e32:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004e34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e36:	695a      	ldr	r2, [r3, #20]
 8004e38:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004e3c:	441a      	add	r2, r3
 8004e3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e40:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004e42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e44:	699b      	ldr	r3, [r3, #24]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d005      	beq.n	8004e56 <PCD_EP_ISR_Handler+0x41e>
 8004e4a:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8004e4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e50:	691b      	ldr	r3, [r3, #16]
 8004e52:	429a      	cmp	r2, r3
 8004e54:	d206      	bcs.n	8004e64 <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004e56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e58:	781b      	ldrb	r3, [r3, #0]
 8004e5a:	4619      	mov	r1, r3
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f00a f9df 	bl	800f220 <HAL_PCD_DataOutStageCallback>
 8004e62:	e005      	b.n	8004e70 <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f003 ff1b 	bl	8008ca6 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004e70:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004e72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	f000 8117 	beq.w	80050aa <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 8004e7c:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8004e80:	4613      	mov	r3, r2
 8004e82:	009b      	lsls	r3, r3, #2
 8004e84:	4413      	add	r3, r2
 8004e86:	00db      	lsls	r3, r3, #3
 8004e88:	3310      	adds	r3, #16
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	4413      	add	r3, r2
 8004e8e:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	461a      	mov	r2, r3
 8004e96:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8004e9a:	009b      	lsls	r3, r3, #2
 8004e9c:	4413      	add	r3, r2
 8004e9e:	881b      	ldrh	r3, [r3, #0]
 8004ea0:	b29b      	uxth	r3, r3
 8004ea2:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8004ea6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004eaa:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	461a      	mov	r2, r3
 8004eb2:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8004eb6:	009b      	lsls	r3, r3, #2
 8004eb8:	441a      	add	r2, r3
 8004eba:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8004ebc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ec0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ec4:	b29b      	uxth	r3, r3
 8004ec6:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8004ec8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004eca:	78db      	ldrb	r3, [r3, #3]
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	f040 80a1 	bne.w	8005014 <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 8004ed2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8004ed8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004eda:	7b1b      	ldrb	r3, [r3, #12]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	f000 8092 	beq.w	8005006 <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004ee2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004ee4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d046      	beq.n	8004f7a <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004eec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004eee:	785b      	ldrb	r3, [r3, #1]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d126      	bne.n	8004f42 <PCD_EP_ISR_Handler+0x50a>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	617b      	str	r3, [r7, #20]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004f02:	b29b      	uxth	r3, r3
 8004f04:	461a      	mov	r2, r3
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	4413      	add	r3, r2
 8004f0a:	617b      	str	r3, [r7, #20]
 8004f0c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f0e:	781b      	ldrb	r3, [r3, #0]
 8004f10:	00da      	lsls	r2, r3, #3
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	4413      	add	r3, r2
 8004f16:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004f1a:	613b      	str	r3, [r7, #16]
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	881b      	ldrh	r3, [r3, #0]
 8004f20:	b29b      	uxth	r3, r3
 8004f22:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f26:	b29a      	uxth	r2, r3
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	801a      	strh	r2, [r3, #0]
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	881b      	ldrh	r3, [r3, #0]
 8004f30:	b29b      	uxth	r3, r3
 8004f32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f3a:	b29a      	uxth	r2, r3
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	801a      	strh	r2, [r3, #0]
 8004f40:	e061      	b.n	8005006 <PCD_EP_ISR_Handler+0x5ce>
 8004f42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f44:	785b      	ldrb	r3, [r3, #1]
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	d15d      	bne.n	8005006 <PCD_EP_ISR_Handler+0x5ce>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	61fb      	str	r3, [r7, #28]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004f58:	b29b      	uxth	r3, r3
 8004f5a:	461a      	mov	r2, r3
 8004f5c:	69fb      	ldr	r3, [r7, #28]
 8004f5e:	4413      	add	r3, r2
 8004f60:	61fb      	str	r3, [r7, #28]
 8004f62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f64:	781b      	ldrb	r3, [r3, #0]
 8004f66:	00da      	lsls	r2, r3, #3
 8004f68:	69fb      	ldr	r3, [r7, #28]
 8004f6a:	4413      	add	r3, r2
 8004f6c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004f70:	61bb      	str	r3, [r7, #24]
 8004f72:	69bb      	ldr	r3, [r7, #24]
 8004f74:	2200      	movs	r2, #0
 8004f76:	801a      	strh	r2, [r3, #0]
 8004f78:	e045      	b.n	8005006 <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f82:	785b      	ldrb	r3, [r3, #1]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d126      	bne.n	8004fd6 <PCD_EP_ISR_Handler+0x59e>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004f96:	b29b      	uxth	r3, r3
 8004f98:	461a      	mov	r2, r3
 8004f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f9c:	4413      	add	r3, r2
 8004f9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004fa0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004fa2:	781b      	ldrb	r3, [r3, #0]
 8004fa4:	00da      	lsls	r2, r3, #3
 8004fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fa8:	4413      	add	r3, r2
 8004faa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004fae:	623b      	str	r3, [r7, #32]
 8004fb0:	6a3b      	ldr	r3, [r7, #32]
 8004fb2:	881b      	ldrh	r3, [r3, #0]
 8004fb4:	b29b      	uxth	r3, r3
 8004fb6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004fba:	b29a      	uxth	r2, r3
 8004fbc:	6a3b      	ldr	r3, [r7, #32]
 8004fbe:	801a      	strh	r2, [r3, #0]
 8004fc0:	6a3b      	ldr	r3, [r7, #32]
 8004fc2:	881b      	ldrh	r3, [r3, #0]
 8004fc4:	b29b      	uxth	r3, r3
 8004fc6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fce:	b29a      	uxth	r2, r3
 8004fd0:	6a3b      	ldr	r3, [r7, #32]
 8004fd2:	801a      	strh	r2, [r3, #0]
 8004fd4:	e017      	b.n	8005006 <PCD_EP_ISR_Handler+0x5ce>
 8004fd6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004fd8:	785b      	ldrb	r3, [r3, #1]
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	d113      	bne.n	8005006 <PCD_EP_ISR_Handler+0x5ce>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	461a      	mov	r2, r3
 8004fea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fec:	4413      	add	r3, r2
 8004fee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ff0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ff2:	781b      	ldrb	r3, [r3, #0]
 8004ff4:	00da      	lsls	r2, r3, #3
 8004ff6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ff8:	4413      	add	r3, r2
 8004ffa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004ffe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005000:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005002:	2200      	movs	r2, #0
 8005004:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005006:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005008:	781b      	ldrb	r3, [r3, #0]
 800500a:	4619      	mov	r1, r3
 800500c:	6878      	ldr	r0, [r7, #4]
 800500e:	f00a f922 	bl	800f256 <HAL_PCD_DataInStageCallback>
 8005012:	e04a      	b.n	80050aa <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8005014:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005016:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800501a:	2b00      	cmp	r3, #0
 800501c:	d13f      	bne.n	800509e <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005026:	b29b      	uxth	r3, r3
 8005028:	461a      	mov	r2, r3
 800502a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800502c:	781b      	ldrb	r3, [r3, #0]
 800502e:	00db      	lsls	r3, r3, #3
 8005030:	4413      	add	r3, r2
 8005032:	687a      	ldr	r2, [r7, #4]
 8005034:	6812      	ldr	r2, [r2, #0]
 8005036:	4413      	add	r3, r2
 8005038:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800503c:	881b      	ldrh	r3, [r3, #0]
 800503e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005042:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 8005044:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005046:	699a      	ldr	r2, [r3, #24]
 8005048:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800504a:	429a      	cmp	r2, r3
 800504c:	d906      	bls.n	800505c <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 800504e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005050:	699a      	ldr	r2, [r3, #24]
 8005052:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8005054:	1ad2      	subs	r2, r2, r3
 8005056:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005058:	619a      	str	r2, [r3, #24]
 800505a:	e002      	b.n	8005062 <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 800505c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800505e:	2200      	movs	r2, #0
 8005060:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8005062:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005064:	699b      	ldr	r3, [r3, #24]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d106      	bne.n	8005078 <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800506a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800506c:	781b      	ldrb	r3, [r3, #0]
 800506e:	4619      	mov	r1, r3
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f00a f8f0 	bl	800f256 <HAL_PCD_DataInStageCallback>
 8005076:	e018      	b.n	80050aa <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8005078:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800507a:	695a      	ldr	r2, [r3, #20]
 800507c:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800507e:	441a      	add	r2, r3
 8005080:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005082:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8005084:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005086:	69da      	ldr	r2, [r3, #28]
 8005088:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800508a:	441a      	add	r2, r3
 800508c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800508e:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005096:	4618      	mov	r0, r3
 8005098:	f003 fe05 	bl	8008ca6 <USB_EPStartXfer>
 800509c:	e005      	b.n	80050aa <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800509e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80050a0:	461a      	mov	r2, r3
 80050a2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	f000 f917 	bl	80052d8 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80050b2:	b29b      	uxth	r3, r3
 80050b4:	b21b      	sxth	r3, r3
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	f6ff acc3 	blt.w	8004a42 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80050bc:	2300      	movs	r3, #0
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3748      	adds	r7, #72	@ 0x48
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}

080050c6 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80050c6:	b580      	push	{r7, lr}
 80050c8:	b088      	sub	sp, #32
 80050ca:	af00      	add	r7, sp, #0
 80050cc:	60f8      	str	r0, [r7, #12]
 80050ce:	60b9      	str	r1, [r7, #8]
 80050d0:	4613      	mov	r3, r2
 80050d2:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80050d4:	88fb      	ldrh	r3, [r7, #6]
 80050d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d07c      	beq.n	80051d8 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80050e6:	b29b      	uxth	r3, r3
 80050e8:	461a      	mov	r2, r3
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	781b      	ldrb	r3, [r3, #0]
 80050ee:	00db      	lsls	r3, r3, #3
 80050f0:	4413      	add	r3, r2
 80050f2:	68fa      	ldr	r2, [r7, #12]
 80050f4:	6812      	ldr	r2, [r2, #0]
 80050f6:	4413      	add	r3, r2
 80050f8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80050fc:	881b      	ldrh	r3, [r3, #0]
 80050fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005102:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	699a      	ldr	r2, [r3, #24]
 8005108:	8b7b      	ldrh	r3, [r7, #26]
 800510a:	429a      	cmp	r2, r3
 800510c:	d306      	bcc.n	800511c <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	699a      	ldr	r2, [r3, #24]
 8005112:	8b7b      	ldrh	r3, [r7, #26]
 8005114:	1ad2      	subs	r2, r2, r3
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	619a      	str	r2, [r3, #24]
 800511a:	e002      	b.n	8005122 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	2200      	movs	r2, #0
 8005120:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	699b      	ldr	r3, [r3, #24]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d123      	bne.n	8005172 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	461a      	mov	r2, r3
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	781b      	ldrb	r3, [r3, #0]
 8005134:	009b      	lsls	r3, r3, #2
 8005136:	4413      	add	r3, r2
 8005138:	881b      	ldrh	r3, [r3, #0]
 800513a:	b29b      	uxth	r3, r3
 800513c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005140:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005144:	833b      	strh	r3, [r7, #24]
 8005146:	8b3b      	ldrh	r3, [r7, #24]
 8005148:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800514c:	833b      	strh	r3, [r7, #24]
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	461a      	mov	r2, r3
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	781b      	ldrb	r3, [r3, #0]
 8005158:	009b      	lsls	r3, r3, #2
 800515a:	441a      	add	r2, r3
 800515c:	8b3b      	ldrh	r3, [r7, #24]
 800515e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005162:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005166:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800516a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800516e:	b29b      	uxth	r3, r3
 8005170:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005172:	88fb      	ldrh	r3, [r7, #6]
 8005174:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005178:	2b00      	cmp	r3, #0
 800517a:	d01f      	beq.n	80051bc <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	461a      	mov	r2, r3
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	781b      	ldrb	r3, [r3, #0]
 8005186:	009b      	lsls	r3, r3, #2
 8005188:	4413      	add	r3, r2
 800518a:	881b      	ldrh	r3, [r3, #0]
 800518c:	b29b      	uxth	r3, r3
 800518e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005192:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005196:	82fb      	strh	r3, [r7, #22]
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	461a      	mov	r2, r3
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	781b      	ldrb	r3, [r3, #0]
 80051a2:	009b      	lsls	r3, r3, #2
 80051a4:	441a      	add	r2, r3
 80051a6:	8afb      	ldrh	r3, [r7, #22]
 80051a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80051ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80051b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80051b4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80051b8:	b29b      	uxth	r3, r3
 80051ba:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80051bc:	8b7b      	ldrh	r3, [r7, #26]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	f000 8085 	beq.w	80052ce <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	6818      	ldr	r0, [r3, #0]
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	6959      	ldr	r1, [r3, #20]
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	891a      	ldrh	r2, [r3, #8]
 80051d0:	8b7b      	ldrh	r3, [r7, #26]
 80051d2:	f004 fc8e 	bl	8009af2 <USB_ReadPMA>
 80051d6:	e07a      	b.n	80052ce <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80051e0:	b29b      	uxth	r3, r3
 80051e2:	461a      	mov	r2, r3
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	781b      	ldrb	r3, [r3, #0]
 80051e8:	00db      	lsls	r3, r3, #3
 80051ea:	4413      	add	r3, r2
 80051ec:	68fa      	ldr	r2, [r7, #12]
 80051ee:	6812      	ldr	r2, [r2, #0]
 80051f0:	4413      	add	r3, r2
 80051f2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80051f6:	881b      	ldrh	r3, [r3, #0]
 80051f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80051fc:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	699a      	ldr	r2, [r3, #24]
 8005202:	8b7b      	ldrh	r3, [r7, #26]
 8005204:	429a      	cmp	r2, r3
 8005206:	d306      	bcc.n	8005216 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	699a      	ldr	r2, [r3, #24]
 800520c:	8b7b      	ldrh	r3, [r7, #26]
 800520e:	1ad2      	subs	r2, r2, r3
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	619a      	str	r2, [r3, #24]
 8005214:	e002      	b.n	800521c <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	2200      	movs	r2, #0
 800521a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	699b      	ldr	r3, [r3, #24]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d123      	bne.n	800526c <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	461a      	mov	r2, r3
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	781b      	ldrb	r3, [r3, #0]
 800522e:	009b      	lsls	r3, r3, #2
 8005230:	4413      	add	r3, r2
 8005232:	881b      	ldrh	r3, [r3, #0]
 8005234:	b29b      	uxth	r3, r3
 8005236:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800523a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800523e:	83fb      	strh	r3, [r7, #30]
 8005240:	8bfb      	ldrh	r3, [r7, #30]
 8005242:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005246:	83fb      	strh	r3, [r7, #30]
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	461a      	mov	r2, r3
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	781b      	ldrb	r3, [r3, #0]
 8005252:	009b      	lsls	r3, r3, #2
 8005254:	441a      	add	r2, r3
 8005256:	8bfb      	ldrh	r3, [r7, #30]
 8005258:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800525c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005260:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005264:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005268:	b29b      	uxth	r3, r3
 800526a:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800526c:	88fb      	ldrh	r3, [r7, #6]
 800526e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005272:	2b00      	cmp	r3, #0
 8005274:	d11f      	bne.n	80052b6 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	461a      	mov	r2, r3
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	781b      	ldrb	r3, [r3, #0]
 8005280:	009b      	lsls	r3, r3, #2
 8005282:	4413      	add	r3, r2
 8005284:	881b      	ldrh	r3, [r3, #0]
 8005286:	b29b      	uxth	r3, r3
 8005288:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800528c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005290:	83bb      	strh	r3, [r7, #28]
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	461a      	mov	r2, r3
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	781b      	ldrb	r3, [r3, #0]
 800529c:	009b      	lsls	r3, r3, #2
 800529e:	441a      	add	r2, r3
 80052a0:	8bbb      	ldrh	r3, [r7, #28]
 80052a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80052a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80052aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80052ae:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80052b2:	b29b      	uxth	r3, r3
 80052b4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80052b6:	8b7b      	ldrh	r3, [r7, #26]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d008      	beq.n	80052ce <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	6818      	ldr	r0, [r3, #0]
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	6959      	ldr	r1, [r3, #20]
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	895a      	ldrh	r2, [r3, #10]
 80052c8:	8b7b      	ldrh	r3, [r7, #26]
 80052ca:	f004 fc12 	bl	8009af2 <USB_ReadPMA>
    }
  }

  return count;
 80052ce:	8b7b      	ldrh	r3, [r7, #26]
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	3720      	adds	r7, #32
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}

080052d8 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b0a6      	sub	sp, #152	@ 0x98
 80052dc:	af00      	add	r7, sp, #0
 80052de:	60f8      	str	r0, [r7, #12]
 80052e0:	60b9      	str	r1, [r7, #8]
 80052e2:	4613      	mov	r3, r2
 80052e4:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80052e6:	88fb      	ldrh	r3, [r7, #6]
 80052e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	f000 81f7 	beq.w	80056e0 <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80052fa:	b29b      	uxth	r3, r3
 80052fc:	461a      	mov	r2, r3
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	781b      	ldrb	r3, [r3, #0]
 8005302:	00db      	lsls	r3, r3, #3
 8005304:	4413      	add	r3, r2
 8005306:	68fa      	ldr	r2, [r7, #12]
 8005308:	6812      	ldr	r2, [r2, #0]
 800530a:	4413      	add	r3, r2
 800530c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005310:	881b      	ldrh	r3, [r3, #0]
 8005312:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005316:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	699a      	ldr	r2, [r3, #24]
 800531e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005322:	429a      	cmp	r2, r3
 8005324:	d907      	bls.n	8005336 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	699a      	ldr	r2, [r3, #24]
 800532a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800532e:	1ad2      	subs	r2, r2, r3
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	619a      	str	r2, [r3, #24]
 8005334:	e002      	b.n	800533c <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	2200      	movs	r2, #0
 800533a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	699b      	ldr	r3, [r3, #24]
 8005340:	2b00      	cmp	r3, #0
 8005342:	f040 80e1 	bne.w	8005508 <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	785b      	ldrb	r3, [r3, #1]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d126      	bne.n	800539c <HAL_PCD_EP_DB_Transmit+0xc4>
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	633b      	str	r3, [r7, #48]	@ 0x30
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800535c:	b29b      	uxth	r3, r3
 800535e:	461a      	mov	r2, r3
 8005360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005362:	4413      	add	r3, r2
 8005364:	633b      	str	r3, [r7, #48]	@ 0x30
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	781b      	ldrb	r3, [r3, #0]
 800536a:	00da      	lsls	r2, r3, #3
 800536c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800536e:	4413      	add	r3, r2
 8005370:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005374:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005376:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005378:	881b      	ldrh	r3, [r3, #0]
 800537a:	b29b      	uxth	r3, r3
 800537c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005380:	b29a      	uxth	r2, r3
 8005382:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005384:	801a      	strh	r2, [r3, #0]
 8005386:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005388:	881b      	ldrh	r3, [r3, #0]
 800538a:	b29b      	uxth	r3, r3
 800538c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005390:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005394:	b29a      	uxth	r2, r3
 8005396:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005398:	801a      	strh	r2, [r3, #0]
 800539a:	e01a      	b.n	80053d2 <HAL_PCD_EP_DB_Transmit+0xfa>
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	785b      	ldrb	r3, [r3, #1]
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d116      	bne.n	80053d2 <HAL_PCD_EP_DB_Transmit+0xfa>
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	461a      	mov	r2, r3
 80053b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053b8:	4413      	add	r3, r2
 80053ba:	63bb      	str	r3, [r7, #56]	@ 0x38
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	781b      	ldrb	r3, [r3, #0]
 80053c0:	00da      	lsls	r2, r3, #3
 80053c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053c4:	4413      	add	r3, r2
 80053c6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80053ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80053cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053ce:	2200      	movs	r2, #0
 80053d0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	785b      	ldrb	r3, [r3, #1]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d126      	bne.n	800542e <HAL_PCD_EP_DB_Transmit+0x156>
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	623b      	str	r3, [r7, #32]
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80053ee:	b29b      	uxth	r3, r3
 80053f0:	461a      	mov	r2, r3
 80053f2:	6a3b      	ldr	r3, [r7, #32]
 80053f4:	4413      	add	r3, r2
 80053f6:	623b      	str	r3, [r7, #32]
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	781b      	ldrb	r3, [r3, #0]
 80053fc:	00da      	lsls	r2, r3, #3
 80053fe:	6a3b      	ldr	r3, [r7, #32]
 8005400:	4413      	add	r3, r2
 8005402:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005406:	61fb      	str	r3, [r7, #28]
 8005408:	69fb      	ldr	r3, [r7, #28]
 800540a:	881b      	ldrh	r3, [r3, #0]
 800540c:	b29b      	uxth	r3, r3
 800540e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005412:	b29a      	uxth	r2, r3
 8005414:	69fb      	ldr	r3, [r7, #28]
 8005416:	801a      	strh	r2, [r3, #0]
 8005418:	69fb      	ldr	r3, [r7, #28]
 800541a:	881b      	ldrh	r3, [r3, #0]
 800541c:	b29b      	uxth	r3, r3
 800541e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005422:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005426:	b29a      	uxth	r2, r3
 8005428:	69fb      	ldr	r3, [r7, #28]
 800542a:	801a      	strh	r2, [r3, #0]
 800542c:	e017      	b.n	800545e <HAL_PCD_EP_DB_Transmit+0x186>
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	785b      	ldrb	r3, [r3, #1]
 8005432:	2b01      	cmp	r3, #1
 8005434:	d113      	bne.n	800545e <HAL_PCD_EP_DB_Transmit+0x186>
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800543e:	b29b      	uxth	r3, r3
 8005440:	461a      	mov	r2, r3
 8005442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005444:	4413      	add	r3, r2
 8005446:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	781b      	ldrb	r3, [r3, #0]
 800544c:	00da      	lsls	r2, r3, #3
 800544e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005450:	4413      	add	r3, r2
 8005452:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005456:	627b      	str	r3, [r7, #36]	@ 0x24
 8005458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800545a:	2200      	movs	r2, #0
 800545c:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	78db      	ldrb	r3, [r3, #3]
 8005462:	2b02      	cmp	r3, #2
 8005464:	d123      	bne.n	80054ae <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	461a      	mov	r2, r3
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	781b      	ldrb	r3, [r3, #0]
 8005470:	009b      	lsls	r3, r3, #2
 8005472:	4413      	add	r3, r2
 8005474:	881b      	ldrh	r3, [r3, #0]
 8005476:	b29b      	uxth	r3, r3
 8005478:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800547c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005480:	837b      	strh	r3, [r7, #26]
 8005482:	8b7b      	ldrh	r3, [r7, #26]
 8005484:	f083 0320 	eor.w	r3, r3, #32
 8005488:	837b      	strh	r3, [r7, #26]
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	461a      	mov	r2, r3
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	781b      	ldrb	r3, [r3, #0]
 8005494:	009b      	lsls	r3, r3, #2
 8005496:	441a      	add	r2, r3
 8005498:	8b7b      	ldrh	r3, [r7, #26]
 800549a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800549e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80054a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80054a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80054aa:	b29b      	uxth	r3, r3
 80054ac:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	781b      	ldrb	r3, [r3, #0]
 80054b2:	4619      	mov	r1, r3
 80054b4:	68f8      	ldr	r0, [r7, #12]
 80054b6:	f009 fece 	bl	800f256 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80054ba:	88fb      	ldrh	r3, [r7, #6]
 80054bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d01f      	beq.n	8005504 <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	461a      	mov	r2, r3
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	781b      	ldrb	r3, [r3, #0]
 80054ce:	009b      	lsls	r3, r3, #2
 80054d0:	4413      	add	r3, r2
 80054d2:	881b      	ldrh	r3, [r3, #0]
 80054d4:	b29b      	uxth	r3, r3
 80054d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80054da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054de:	833b      	strh	r3, [r7, #24]
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	461a      	mov	r2, r3
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	781b      	ldrb	r3, [r3, #0]
 80054ea:	009b      	lsls	r3, r3, #2
 80054ec:	441a      	add	r2, r3
 80054ee:	8b3b      	ldrh	r3, [r7, #24]
 80054f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80054f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80054f8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80054fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005500:	b29b      	uxth	r3, r3
 8005502:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8005504:	2300      	movs	r3, #0
 8005506:	e31f      	b.n	8005b48 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005508:	88fb      	ldrh	r3, [r7, #6]
 800550a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800550e:	2b00      	cmp	r3, #0
 8005510:	d021      	beq.n	8005556 <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	461a      	mov	r2, r3
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	781b      	ldrb	r3, [r3, #0]
 800551c:	009b      	lsls	r3, r3, #2
 800551e:	4413      	add	r3, r2
 8005520:	881b      	ldrh	r3, [r3, #0]
 8005522:	b29b      	uxth	r3, r3
 8005524:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005528:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800552c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	461a      	mov	r2, r3
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	781b      	ldrb	r3, [r3, #0]
 800553a:	009b      	lsls	r3, r3, #2
 800553c:	441a      	add	r2, r3
 800553e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8005542:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005546:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800554a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800554e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005552:	b29b      	uxth	r3, r3
 8005554:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800555c:	2b01      	cmp	r3, #1
 800555e:	f040 82ca 	bne.w	8005af6 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	695a      	ldr	r2, [r3, #20]
 8005566:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800556a:	441a      	add	r2, r3
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	69da      	ldr	r2, [r3, #28]
 8005574:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005578:	441a      	add	r2, r3
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	6a1a      	ldr	r2, [r3, #32]
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	691b      	ldr	r3, [r3, #16]
 8005586:	429a      	cmp	r2, r3
 8005588:	d309      	bcc.n	800559e <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	691b      	ldr	r3, [r3, #16]
 800558e:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	6a1a      	ldr	r2, [r3, #32]
 8005594:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005596:	1ad2      	subs	r2, r2, r3
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	621a      	str	r2, [r3, #32]
 800559c:	e015      	b.n	80055ca <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	6a1b      	ldr	r3, [r3, #32]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d107      	bne.n	80055b6 <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 80055a6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80055aa:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	2200      	movs	r2, #0
 80055b0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80055b4:	e009      	b.n	80055ca <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	2200      	movs	r2, #0
 80055ba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	6a1b      	ldr	r3, [r3, #32]
 80055c2:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	2200      	movs	r2, #0
 80055c8:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	785b      	ldrb	r3, [r3, #1]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d15f      	bne.n	8005692 <HAL_PCD_EP_DB_Transmit+0x3ba>
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	643b      	str	r3, [r7, #64]	@ 0x40
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80055e0:	b29b      	uxth	r3, r3
 80055e2:	461a      	mov	r2, r3
 80055e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80055e6:	4413      	add	r3, r2
 80055e8:	643b      	str	r3, [r7, #64]	@ 0x40
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	781b      	ldrb	r3, [r3, #0]
 80055ee:	00da      	lsls	r2, r3, #3
 80055f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80055f2:	4413      	add	r3, r2
 80055f4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80055f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80055fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055fc:	881b      	ldrh	r3, [r3, #0]
 80055fe:	b29b      	uxth	r3, r3
 8005600:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005604:	b29a      	uxth	r2, r3
 8005606:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005608:	801a      	strh	r2, [r3, #0]
 800560a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800560c:	2b00      	cmp	r3, #0
 800560e:	d10a      	bne.n	8005626 <HAL_PCD_EP_DB_Transmit+0x34e>
 8005610:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005612:	881b      	ldrh	r3, [r3, #0]
 8005614:	b29b      	uxth	r3, r3
 8005616:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800561a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800561e:	b29a      	uxth	r2, r3
 8005620:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005622:	801a      	strh	r2, [r3, #0]
 8005624:	e051      	b.n	80056ca <HAL_PCD_EP_DB_Transmit+0x3f2>
 8005626:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005628:	2b3e      	cmp	r3, #62	@ 0x3e
 800562a:	d816      	bhi.n	800565a <HAL_PCD_EP_DB_Transmit+0x382>
 800562c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800562e:	085b      	lsrs	r3, r3, #1
 8005630:	653b      	str	r3, [r7, #80]	@ 0x50
 8005632:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005634:	f003 0301 	and.w	r3, r3, #1
 8005638:	2b00      	cmp	r3, #0
 800563a:	d002      	beq.n	8005642 <HAL_PCD_EP_DB_Transmit+0x36a>
 800563c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800563e:	3301      	adds	r3, #1
 8005640:	653b      	str	r3, [r7, #80]	@ 0x50
 8005642:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005644:	881b      	ldrh	r3, [r3, #0]
 8005646:	b29a      	uxth	r2, r3
 8005648:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800564a:	b29b      	uxth	r3, r3
 800564c:	029b      	lsls	r3, r3, #10
 800564e:	b29b      	uxth	r3, r3
 8005650:	4313      	orrs	r3, r2
 8005652:	b29a      	uxth	r2, r3
 8005654:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005656:	801a      	strh	r2, [r3, #0]
 8005658:	e037      	b.n	80056ca <HAL_PCD_EP_DB_Transmit+0x3f2>
 800565a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800565c:	095b      	lsrs	r3, r3, #5
 800565e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005660:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005662:	f003 031f 	and.w	r3, r3, #31
 8005666:	2b00      	cmp	r3, #0
 8005668:	d102      	bne.n	8005670 <HAL_PCD_EP_DB_Transmit+0x398>
 800566a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800566c:	3b01      	subs	r3, #1
 800566e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005670:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005672:	881b      	ldrh	r3, [r3, #0]
 8005674:	b29a      	uxth	r2, r3
 8005676:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005678:	b29b      	uxth	r3, r3
 800567a:	029b      	lsls	r3, r3, #10
 800567c:	b29b      	uxth	r3, r3
 800567e:	4313      	orrs	r3, r2
 8005680:	b29b      	uxth	r3, r3
 8005682:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005686:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800568a:	b29a      	uxth	r2, r3
 800568c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800568e:	801a      	strh	r2, [r3, #0]
 8005690:	e01b      	b.n	80056ca <HAL_PCD_EP_DB_Transmit+0x3f2>
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	785b      	ldrb	r3, [r3, #1]
 8005696:	2b01      	cmp	r3, #1
 8005698:	d117      	bne.n	80056ca <HAL_PCD_EP_DB_Transmit+0x3f2>
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	64bb      	str	r3, [r7, #72]	@ 0x48
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80056a8:	b29b      	uxth	r3, r3
 80056aa:	461a      	mov	r2, r3
 80056ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80056ae:	4413      	add	r3, r2
 80056b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	781b      	ldrb	r3, [r3, #0]
 80056b6:	00da      	lsls	r2, r3, #3
 80056b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80056ba:	4413      	add	r3, r2
 80056bc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80056c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80056c2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80056c4:	b29a      	uxth	r2, r3
 80056c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80056c8:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	6818      	ldr	r0, [r3, #0]
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	6959      	ldr	r1, [r3, #20]
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	891a      	ldrh	r2, [r3, #8]
 80056d6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80056d8:	b29b      	uxth	r3, r3
 80056da:	f004 f9c8 	bl	8009a6e <USB_WritePMA>
 80056de:	e20a      	b.n	8005af6 <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80056e8:	b29b      	uxth	r3, r3
 80056ea:	461a      	mov	r2, r3
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	781b      	ldrb	r3, [r3, #0]
 80056f0:	00db      	lsls	r3, r3, #3
 80056f2:	4413      	add	r3, r2
 80056f4:	68fa      	ldr	r2, [r7, #12]
 80056f6:	6812      	ldr	r2, [r2, #0]
 80056f8:	4413      	add	r3, r2
 80056fa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80056fe:	881b      	ldrh	r3, [r3, #0]
 8005700:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005704:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	699a      	ldr	r2, [r3, #24]
 800570c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005710:	429a      	cmp	r2, r3
 8005712:	d307      	bcc.n	8005724 <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	699a      	ldr	r2, [r3, #24]
 8005718:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800571c:	1ad2      	subs	r2, r2, r3
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	619a      	str	r2, [r3, #24]
 8005722:	e002      	b.n	800572a <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	2200      	movs	r2, #0
 8005728:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	699b      	ldr	r3, [r3, #24]
 800572e:	2b00      	cmp	r3, #0
 8005730:	f040 80f6 	bne.w	8005920 <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	785b      	ldrb	r3, [r3, #1]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d126      	bne.n	800578a <HAL_PCD_EP_DB_Transmit+0x4b2>
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	677b      	str	r3, [r7, #116]	@ 0x74
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800574a:	b29b      	uxth	r3, r3
 800574c:	461a      	mov	r2, r3
 800574e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005750:	4413      	add	r3, r2
 8005752:	677b      	str	r3, [r7, #116]	@ 0x74
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	781b      	ldrb	r3, [r3, #0]
 8005758:	00da      	lsls	r2, r3, #3
 800575a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800575c:	4413      	add	r3, r2
 800575e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005762:	673b      	str	r3, [r7, #112]	@ 0x70
 8005764:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005766:	881b      	ldrh	r3, [r3, #0]
 8005768:	b29b      	uxth	r3, r3
 800576a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800576e:	b29a      	uxth	r2, r3
 8005770:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005772:	801a      	strh	r2, [r3, #0]
 8005774:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005776:	881b      	ldrh	r3, [r3, #0]
 8005778:	b29b      	uxth	r3, r3
 800577a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800577e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005782:	b29a      	uxth	r2, r3
 8005784:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005786:	801a      	strh	r2, [r3, #0]
 8005788:	e01a      	b.n	80057c0 <HAL_PCD_EP_DB_Transmit+0x4e8>
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	785b      	ldrb	r3, [r3, #1]
 800578e:	2b01      	cmp	r3, #1
 8005790:	d116      	bne.n	80057c0 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80057a0:	b29b      	uxth	r3, r3
 80057a2:	461a      	mov	r2, r3
 80057a4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80057a6:	4413      	add	r3, r2
 80057a8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	781b      	ldrb	r3, [r3, #0]
 80057ae:	00da      	lsls	r2, r3, #3
 80057b0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80057b2:	4413      	add	r3, r2
 80057b4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80057b8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80057ba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80057bc:	2200      	movs	r2, #0
 80057be:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	785b      	ldrb	r3, [r3, #1]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d12f      	bne.n	8005830 <HAL_PCD_EP_DB_Transmit+0x558>
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80057e0:	b29b      	uxth	r3, r3
 80057e2:	461a      	mov	r2, r3
 80057e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80057e8:	4413      	add	r3, r2
 80057ea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	781b      	ldrb	r3, [r3, #0]
 80057f2:	00da      	lsls	r2, r3, #3
 80057f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80057f8:	4413      	add	r3, r2
 80057fa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80057fe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005802:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005806:	881b      	ldrh	r3, [r3, #0]
 8005808:	b29b      	uxth	r3, r3
 800580a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800580e:	b29a      	uxth	r2, r3
 8005810:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005814:	801a      	strh	r2, [r3, #0]
 8005816:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800581a:	881b      	ldrh	r3, [r3, #0]
 800581c:	b29b      	uxth	r3, r3
 800581e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005822:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005826:	b29a      	uxth	r2, r3
 8005828:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800582c:	801a      	strh	r2, [r3, #0]
 800582e:	e01c      	b.n	800586a <HAL_PCD_EP_DB_Transmit+0x592>
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	785b      	ldrb	r3, [r3, #1]
 8005834:	2b01      	cmp	r3, #1
 8005836:	d118      	bne.n	800586a <HAL_PCD_EP_DB_Transmit+0x592>
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005840:	b29b      	uxth	r3, r3
 8005842:	461a      	mov	r2, r3
 8005844:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005848:	4413      	add	r3, r2
 800584a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	781b      	ldrb	r3, [r3, #0]
 8005852:	00da      	lsls	r2, r3, #3
 8005854:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005858:	4413      	add	r3, r2
 800585a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800585e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005862:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005866:	2200      	movs	r2, #0
 8005868:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	78db      	ldrb	r3, [r3, #3]
 800586e:	2b02      	cmp	r3, #2
 8005870:	d127      	bne.n	80058c2 <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	461a      	mov	r2, r3
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	781b      	ldrb	r3, [r3, #0]
 800587c:	009b      	lsls	r3, r3, #2
 800587e:	4413      	add	r3, r2
 8005880:	881b      	ldrh	r3, [r3, #0]
 8005882:	b29b      	uxth	r3, r3
 8005884:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005888:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800588c:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8005890:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8005894:	f083 0320 	eor.w	r3, r3, #32
 8005898:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	461a      	mov	r2, r3
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	781b      	ldrb	r3, [r3, #0]
 80058a6:	009b      	lsls	r3, r3, #2
 80058a8:	441a      	add	r2, r3
 80058aa:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80058ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80058b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80058b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80058ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80058be:	b29b      	uxth	r3, r3
 80058c0:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	781b      	ldrb	r3, [r3, #0]
 80058c6:	4619      	mov	r1, r3
 80058c8:	68f8      	ldr	r0, [r7, #12]
 80058ca:	f009 fcc4 	bl	800f256 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80058ce:	88fb      	ldrh	r3, [r7, #6]
 80058d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d121      	bne.n	800591c <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	461a      	mov	r2, r3
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	781b      	ldrb	r3, [r3, #0]
 80058e2:	009b      	lsls	r3, r3, #2
 80058e4:	4413      	add	r3, r2
 80058e6:	881b      	ldrh	r3, [r3, #0]
 80058e8:	b29b      	uxth	r3, r3
 80058ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80058ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058f2:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	461a      	mov	r2, r3
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	781b      	ldrb	r3, [r3, #0]
 8005900:	009b      	lsls	r3, r3, #2
 8005902:	441a      	add	r2, r3
 8005904:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8005908:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800590c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005910:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005914:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005918:	b29b      	uxth	r3, r3
 800591a:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 800591c:	2300      	movs	r3, #0
 800591e:	e113      	b.n	8005b48 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005920:	88fb      	ldrh	r3, [r7, #6]
 8005922:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005926:	2b00      	cmp	r3, #0
 8005928:	d121      	bne.n	800596e <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	461a      	mov	r2, r3
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	781b      	ldrb	r3, [r3, #0]
 8005934:	009b      	lsls	r3, r3, #2
 8005936:	4413      	add	r3, r2
 8005938:	881b      	ldrh	r3, [r3, #0]
 800593a:	b29b      	uxth	r3, r3
 800593c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005940:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005944:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	461a      	mov	r2, r3
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	781b      	ldrb	r3, [r3, #0]
 8005952:	009b      	lsls	r3, r3, #2
 8005954:	441a      	add	r2, r3
 8005956:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800595a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800595e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005962:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005966:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800596a:	b29b      	uxth	r3, r3
 800596c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005974:	2b01      	cmp	r3, #1
 8005976:	f040 80be 	bne.w	8005af6 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	695a      	ldr	r2, [r3, #20]
 800597e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005982:	441a      	add	r2, r3
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	69da      	ldr	r2, [r3, #28]
 800598c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005990:	441a      	add	r2, r3
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	6a1a      	ldr	r2, [r3, #32]
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	691b      	ldr	r3, [r3, #16]
 800599e:	429a      	cmp	r2, r3
 80059a0:	d309      	bcc.n	80059b6 <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	691b      	ldr	r3, [r3, #16]
 80059a6:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	6a1a      	ldr	r2, [r3, #32]
 80059ac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80059ae:	1ad2      	subs	r2, r2, r3
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	621a      	str	r2, [r3, #32]
 80059b4:	e015      	b.n	80059e2 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	6a1b      	ldr	r3, [r3, #32]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d107      	bne.n	80059ce <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 80059be:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80059c2:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	2200      	movs	r2, #0
 80059c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80059cc:	e009      	b.n	80059e2 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	6a1b      	ldr	r3, [r3, #32]
 80059d2:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	2200      	movs	r2, #0
 80059d8:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	2200      	movs	r2, #0
 80059de:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	785b      	ldrb	r3, [r3, #1]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d15f      	bne.n	8005ab0 <HAL_PCD_EP_DB_Transmit+0x7d8>
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80059fe:	b29b      	uxth	r3, r3
 8005a00:	461a      	mov	r2, r3
 8005a02:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005a04:	4413      	add	r3, r2
 8005a06:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	781b      	ldrb	r3, [r3, #0]
 8005a0c:	00da      	lsls	r2, r3, #3
 8005a0e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005a10:	4413      	add	r3, r2
 8005a12:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005a16:	667b      	str	r3, [r7, #100]	@ 0x64
 8005a18:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005a1a:	881b      	ldrh	r3, [r3, #0]
 8005a1c:	b29b      	uxth	r3, r3
 8005a1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a22:	b29a      	uxth	r2, r3
 8005a24:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005a26:	801a      	strh	r2, [r3, #0]
 8005a28:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d10a      	bne.n	8005a44 <HAL_PCD_EP_DB_Transmit+0x76c>
 8005a2e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005a30:	881b      	ldrh	r3, [r3, #0]
 8005a32:	b29b      	uxth	r3, r3
 8005a34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a3c:	b29a      	uxth	r2, r3
 8005a3e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005a40:	801a      	strh	r2, [r3, #0]
 8005a42:	e04e      	b.n	8005ae2 <HAL_PCD_EP_DB_Transmit+0x80a>
 8005a44:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005a46:	2b3e      	cmp	r3, #62	@ 0x3e
 8005a48:	d816      	bhi.n	8005a78 <HAL_PCD_EP_DB_Transmit+0x7a0>
 8005a4a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005a4c:	085b      	lsrs	r3, r3, #1
 8005a4e:	663b      	str	r3, [r7, #96]	@ 0x60
 8005a50:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005a52:	f003 0301 	and.w	r3, r3, #1
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d002      	beq.n	8005a60 <HAL_PCD_EP_DB_Transmit+0x788>
 8005a5a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005a5c:	3301      	adds	r3, #1
 8005a5e:	663b      	str	r3, [r7, #96]	@ 0x60
 8005a60:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005a62:	881b      	ldrh	r3, [r3, #0]
 8005a64:	b29a      	uxth	r2, r3
 8005a66:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005a68:	b29b      	uxth	r3, r3
 8005a6a:	029b      	lsls	r3, r3, #10
 8005a6c:	b29b      	uxth	r3, r3
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	b29a      	uxth	r2, r3
 8005a72:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005a74:	801a      	strh	r2, [r3, #0]
 8005a76:	e034      	b.n	8005ae2 <HAL_PCD_EP_DB_Transmit+0x80a>
 8005a78:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005a7a:	095b      	lsrs	r3, r3, #5
 8005a7c:	663b      	str	r3, [r7, #96]	@ 0x60
 8005a7e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005a80:	f003 031f 	and.w	r3, r3, #31
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d102      	bne.n	8005a8e <HAL_PCD_EP_DB_Transmit+0x7b6>
 8005a88:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005a8a:	3b01      	subs	r3, #1
 8005a8c:	663b      	str	r3, [r7, #96]	@ 0x60
 8005a8e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005a90:	881b      	ldrh	r3, [r3, #0]
 8005a92:	b29a      	uxth	r2, r3
 8005a94:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005a96:	b29b      	uxth	r3, r3
 8005a98:	029b      	lsls	r3, r3, #10
 8005a9a:	b29b      	uxth	r3, r3
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	b29b      	uxth	r3, r3
 8005aa0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005aa4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005aa8:	b29a      	uxth	r2, r3
 8005aaa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005aac:	801a      	strh	r2, [r3, #0]
 8005aae:	e018      	b.n	8005ae2 <HAL_PCD_EP_DB_Transmit+0x80a>
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	785b      	ldrb	r3, [r3, #1]
 8005ab4:	2b01      	cmp	r3, #1
 8005ab6:	d114      	bne.n	8005ae2 <HAL_PCD_EP_DB_Transmit+0x80a>
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	461a      	mov	r2, r3
 8005ac4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005ac6:	4413      	add	r3, r2
 8005ac8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	781b      	ldrb	r3, [r3, #0]
 8005ace:	00da      	lsls	r2, r3, #3
 8005ad0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005ad2:	4413      	add	r3, r2
 8005ad4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005ad8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005ada:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005adc:	b29a      	uxth	r2, r3
 8005ade:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005ae0:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	6818      	ldr	r0, [r3, #0]
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	6959      	ldr	r1, [r3, #20]
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	895a      	ldrh	r2, [r3, #10]
 8005aee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005af0:	b29b      	uxth	r3, r3
 8005af2:	f003 ffbc 	bl	8009a6e <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	461a      	mov	r2, r3
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	781b      	ldrb	r3, [r3, #0]
 8005b00:	009b      	lsls	r3, r3, #2
 8005b02:	4413      	add	r3, r2
 8005b04:	881b      	ldrh	r3, [r3, #0]
 8005b06:	b29b      	uxth	r3, r3
 8005b08:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b0c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b10:	82fb      	strh	r3, [r7, #22]
 8005b12:	8afb      	ldrh	r3, [r7, #22]
 8005b14:	f083 0310 	eor.w	r3, r3, #16
 8005b18:	82fb      	strh	r3, [r7, #22]
 8005b1a:	8afb      	ldrh	r3, [r7, #22]
 8005b1c:	f083 0320 	eor.w	r3, r3, #32
 8005b20:	82fb      	strh	r3, [r7, #22]
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	461a      	mov	r2, r3
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	781b      	ldrb	r3, [r3, #0]
 8005b2c:	009b      	lsls	r3, r3, #2
 8005b2e:	441a      	add	r2, r3
 8005b30:	8afb      	ldrh	r3, [r7, #22]
 8005b32:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b36:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b42:	b29b      	uxth	r3, r3
 8005b44:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8005b46:	2300      	movs	r3, #0
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	3798      	adds	r7, #152	@ 0x98
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bd80      	pop	{r7, pc}

08005b50 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b087      	sub	sp, #28
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	60f8      	str	r0, [r7, #12]
 8005b58:	607b      	str	r3, [r7, #4]
 8005b5a:	460b      	mov	r3, r1
 8005b5c:	817b      	strh	r3, [r7, #10]
 8005b5e:	4613      	mov	r3, r2
 8005b60:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005b62:	897b      	ldrh	r3, [r7, #10]
 8005b64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b68:	b29b      	uxth	r3, r3
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d00b      	beq.n	8005b86 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005b6e:	897b      	ldrh	r3, [r7, #10]
 8005b70:	f003 0207 	and.w	r2, r3, #7
 8005b74:	4613      	mov	r3, r2
 8005b76:	009b      	lsls	r3, r3, #2
 8005b78:	4413      	add	r3, r2
 8005b7a:	00db      	lsls	r3, r3, #3
 8005b7c:	3310      	adds	r3, #16
 8005b7e:	68fa      	ldr	r2, [r7, #12]
 8005b80:	4413      	add	r3, r2
 8005b82:	617b      	str	r3, [r7, #20]
 8005b84:	e009      	b.n	8005b9a <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005b86:	897a      	ldrh	r2, [r7, #10]
 8005b88:	4613      	mov	r3, r2
 8005b8a:	009b      	lsls	r3, r3, #2
 8005b8c:	4413      	add	r3, r2
 8005b8e:	00db      	lsls	r3, r3, #3
 8005b90:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005b94:	68fa      	ldr	r2, [r7, #12]
 8005b96:	4413      	add	r3, r2
 8005b98:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005b9a:	893b      	ldrh	r3, [r7, #8]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d107      	bne.n	8005bb0 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	b29a      	uxth	r2, r3
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	80da      	strh	r2, [r3, #6]
 8005bae:	e00b      	b.n	8005bc8 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	b29a      	uxth	r2, r3
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	0c1b      	lsrs	r3, r3, #16
 8005bc2:	b29a      	uxth	r2, r3
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005bc8:	2300      	movs	r3, #0
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	371c      	adds	r7, #28
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd4:	4770      	bx	lr

08005bd6 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005bd6:	b480      	push	{r7}
 8005bd8:	b085      	sub	sp, #20
 8005bda:	af00      	add	r7, sp, #0
 8005bdc:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2201      	movs	r2, #1
 8005be8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8005bfa:	b29b      	uxth	r3, r3
 8005bfc:	f043 0301 	orr.w	r3, r3, #1
 8005c00:	b29a      	uxth	r2, r3
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8005c0e:	b29b      	uxth	r3, r3
 8005c10:	f043 0302 	orr.w	r3, r3, #2
 8005c14:	b29a      	uxth	r2, r3
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8005c1c:	2300      	movs	r3, #0
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3714      	adds	r7, #20
 8005c22:	46bd      	mov	sp, r7
 8005c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c28:	4770      	bx	lr
	...

08005c2c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b085      	sub	sp, #20
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d141      	bne.n	8005cbe <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005c3a:	4b4b      	ldr	r3, [pc, #300]	@ (8005d68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005c42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c46:	d131      	bne.n	8005cac <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005c48:	4b47      	ldr	r3, [pc, #284]	@ (8005d68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c4e:	4a46      	ldr	r2, [pc, #280]	@ (8005d68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005c54:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005c58:	4b43      	ldr	r3, [pc, #268]	@ (8005d68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005c60:	4a41      	ldr	r2, [pc, #260]	@ (8005d68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c62:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005c66:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005c68:	4b40      	ldr	r3, [pc, #256]	@ (8005d6c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	2232      	movs	r2, #50	@ 0x32
 8005c6e:	fb02 f303 	mul.w	r3, r2, r3
 8005c72:	4a3f      	ldr	r2, [pc, #252]	@ (8005d70 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005c74:	fba2 2303 	umull	r2, r3, r2, r3
 8005c78:	0c9b      	lsrs	r3, r3, #18
 8005c7a:	3301      	adds	r3, #1
 8005c7c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005c7e:	e002      	b.n	8005c86 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	3b01      	subs	r3, #1
 8005c84:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005c86:	4b38      	ldr	r3, [pc, #224]	@ (8005d68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c88:	695b      	ldr	r3, [r3, #20]
 8005c8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c92:	d102      	bne.n	8005c9a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d1f2      	bne.n	8005c80 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005c9a:	4b33      	ldr	r3, [pc, #204]	@ (8005d68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c9c:	695b      	ldr	r3, [r3, #20]
 8005c9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ca2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ca6:	d158      	bne.n	8005d5a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005ca8:	2303      	movs	r3, #3
 8005caa:	e057      	b.n	8005d5c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005cac:	4b2e      	ldr	r3, [pc, #184]	@ (8005d68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005cb2:	4a2d      	ldr	r2, [pc, #180]	@ (8005d68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cb4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005cb8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005cbc:	e04d      	b.n	8005d5a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005cc4:	d141      	bne.n	8005d4a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005cc6:	4b28      	ldr	r3, [pc, #160]	@ (8005d68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005cce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005cd2:	d131      	bne.n	8005d38 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005cd4:	4b24      	ldr	r3, [pc, #144]	@ (8005d68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005cda:	4a23      	ldr	r2, [pc, #140]	@ (8005d68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cdc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ce0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005ce4:	4b20      	ldr	r3, [pc, #128]	@ (8005d68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005cec:	4a1e      	ldr	r2, [pc, #120]	@ (8005d68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005cf2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005cf4:	4b1d      	ldr	r3, [pc, #116]	@ (8005d6c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	2232      	movs	r2, #50	@ 0x32
 8005cfa:	fb02 f303 	mul.w	r3, r2, r3
 8005cfe:	4a1c      	ldr	r2, [pc, #112]	@ (8005d70 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005d00:	fba2 2303 	umull	r2, r3, r2, r3
 8005d04:	0c9b      	lsrs	r3, r3, #18
 8005d06:	3301      	adds	r3, #1
 8005d08:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005d0a:	e002      	b.n	8005d12 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	3b01      	subs	r3, #1
 8005d10:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005d12:	4b15      	ldr	r3, [pc, #84]	@ (8005d68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d14:	695b      	ldr	r3, [r3, #20]
 8005d16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d1e:	d102      	bne.n	8005d26 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d1f2      	bne.n	8005d0c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005d26:	4b10      	ldr	r3, [pc, #64]	@ (8005d68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d28:	695b      	ldr	r3, [r3, #20]
 8005d2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d32:	d112      	bne.n	8005d5a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005d34:	2303      	movs	r3, #3
 8005d36:	e011      	b.n	8005d5c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005d38:	4b0b      	ldr	r3, [pc, #44]	@ (8005d68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d3e:	4a0a      	ldr	r2, [pc, #40]	@ (8005d68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d44:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005d48:	e007      	b.n	8005d5a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005d4a:	4b07      	ldr	r3, [pc, #28]	@ (8005d68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005d52:	4a05      	ldr	r2, [pc, #20]	@ (8005d68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d54:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005d58:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005d5a:	2300      	movs	r3, #0
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	3714      	adds	r7, #20
 8005d60:	46bd      	mov	sp, r7
 8005d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d66:	4770      	bx	lr
 8005d68:	40007000 	.word	0x40007000
 8005d6c:	20000020 	.word	0x20000020
 8005d70:	431bde83 	.word	0x431bde83

08005d74 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005d74:	b480      	push	{r7}
 8005d76:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005d78:	4b05      	ldr	r3, [pc, #20]	@ (8005d90 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005d7a:	689b      	ldr	r3, [r3, #8]
 8005d7c:	4a04      	ldr	r2, [pc, #16]	@ (8005d90 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005d7e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005d82:	6093      	str	r3, [r2, #8]
}
 8005d84:	bf00      	nop
 8005d86:	46bd      	mov	sp, r7
 8005d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8c:	4770      	bx	lr
 8005d8e:	bf00      	nop
 8005d90:	40007000 	.word	0x40007000

08005d94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b088      	sub	sp, #32
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d101      	bne.n	8005da6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005da2:	2301      	movs	r3, #1
 8005da4:	e2fe      	b.n	80063a4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f003 0301 	and.w	r3, r3, #1
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d075      	beq.n	8005e9e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005db2:	4b97      	ldr	r3, [pc, #604]	@ (8006010 <HAL_RCC_OscConfig+0x27c>)
 8005db4:	689b      	ldr	r3, [r3, #8]
 8005db6:	f003 030c 	and.w	r3, r3, #12
 8005dba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005dbc:	4b94      	ldr	r3, [pc, #592]	@ (8006010 <HAL_RCC_OscConfig+0x27c>)
 8005dbe:	68db      	ldr	r3, [r3, #12]
 8005dc0:	f003 0303 	and.w	r3, r3, #3
 8005dc4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005dc6:	69bb      	ldr	r3, [r7, #24]
 8005dc8:	2b0c      	cmp	r3, #12
 8005dca:	d102      	bne.n	8005dd2 <HAL_RCC_OscConfig+0x3e>
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	2b03      	cmp	r3, #3
 8005dd0:	d002      	beq.n	8005dd8 <HAL_RCC_OscConfig+0x44>
 8005dd2:	69bb      	ldr	r3, [r7, #24]
 8005dd4:	2b08      	cmp	r3, #8
 8005dd6:	d10b      	bne.n	8005df0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005dd8:	4b8d      	ldr	r3, [pc, #564]	@ (8006010 <HAL_RCC_OscConfig+0x27c>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d05b      	beq.n	8005e9c <HAL_RCC_OscConfig+0x108>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d157      	bne.n	8005e9c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005dec:	2301      	movs	r3, #1
 8005dee:	e2d9      	b.n	80063a4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005df8:	d106      	bne.n	8005e08 <HAL_RCC_OscConfig+0x74>
 8005dfa:	4b85      	ldr	r3, [pc, #532]	@ (8006010 <HAL_RCC_OscConfig+0x27c>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a84      	ldr	r2, [pc, #528]	@ (8006010 <HAL_RCC_OscConfig+0x27c>)
 8005e00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e04:	6013      	str	r3, [r2, #0]
 8005e06:	e01d      	b.n	8005e44 <HAL_RCC_OscConfig+0xb0>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005e10:	d10c      	bne.n	8005e2c <HAL_RCC_OscConfig+0x98>
 8005e12:	4b7f      	ldr	r3, [pc, #508]	@ (8006010 <HAL_RCC_OscConfig+0x27c>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a7e      	ldr	r2, [pc, #504]	@ (8006010 <HAL_RCC_OscConfig+0x27c>)
 8005e18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005e1c:	6013      	str	r3, [r2, #0]
 8005e1e:	4b7c      	ldr	r3, [pc, #496]	@ (8006010 <HAL_RCC_OscConfig+0x27c>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a7b      	ldr	r2, [pc, #492]	@ (8006010 <HAL_RCC_OscConfig+0x27c>)
 8005e24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e28:	6013      	str	r3, [r2, #0]
 8005e2a:	e00b      	b.n	8005e44 <HAL_RCC_OscConfig+0xb0>
 8005e2c:	4b78      	ldr	r3, [pc, #480]	@ (8006010 <HAL_RCC_OscConfig+0x27c>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a77      	ldr	r2, [pc, #476]	@ (8006010 <HAL_RCC_OscConfig+0x27c>)
 8005e32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e36:	6013      	str	r3, [r2, #0]
 8005e38:	4b75      	ldr	r3, [pc, #468]	@ (8006010 <HAL_RCC_OscConfig+0x27c>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a74      	ldr	r2, [pc, #464]	@ (8006010 <HAL_RCC_OscConfig+0x27c>)
 8005e3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005e42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d013      	beq.n	8005e74 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e4c:	f7fd fc86 	bl	800375c <HAL_GetTick>
 8005e50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005e52:	e008      	b.n	8005e66 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e54:	f7fd fc82 	bl	800375c <HAL_GetTick>
 8005e58:	4602      	mov	r2, r0
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	1ad3      	subs	r3, r2, r3
 8005e5e:	2b64      	cmp	r3, #100	@ 0x64
 8005e60:	d901      	bls.n	8005e66 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005e62:	2303      	movs	r3, #3
 8005e64:	e29e      	b.n	80063a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005e66:	4b6a      	ldr	r3, [pc, #424]	@ (8006010 <HAL_RCC_OscConfig+0x27c>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d0f0      	beq.n	8005e54 <HAL_RCC_OscConfig+0xc0>
 8005e72:	e014      	b.n	8005e9e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e74:	f7fd fc72 	bl	800375c <HAL_GetTick>
 8005e78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005e7a:	e008      	b.n	8005e8e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e7c:	f7fd fc6e 	bl	800375c <HAL_GetTick>
 8005e80:	4602      	mov	r2, r0
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	1ad3      	subs	r3, r2, r3
 8005e86:	2b64      	cmp	r3, #100	@ 0x64
 8005e88:	d901      	bls.n	8005e8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005e8a:	2303      	movs	r3, #3
 8005e8c:	e28a      	b.n	80063a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005e8e:	4b60      	ldr	r3, [pc, #384]	@ (8006010 <HAL_RCC_OscConfig+0x27c>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d1f0      	bne.n	8005e7c <HAL_RCC_OscConfig+0xe8>
 8005e9a:	e000      	b.n	8005e9e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f003 0302 	and.w	r3, r3, #2
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d075      	beq.n	8005f96 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005eaa:	4b59      	ldr	r3, [pc, #356]	@ (8006010 <HAL_RCC_OscConfig+0x27c>)
 8005eac:	689b      	ldr	r3, [r3, #8]
 8005eae:	f003 030c 	and.w	r3, r3, #12
 8005eb2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005eb4:	4b56      	ldr	r3, [pc, #344]	@ (8006010 <HAL_RCC_OscConfig+0x27c>)
 8005eb6:	68db      	ldr	r3, [r3, #12]
 8005eb8:	f003 0303 	and.w	r3, r3, #3
 8005ebc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005ebe:	69bb      	ldr	r3, [r7, #24]
 8005ec0:	2b0c      	cmp	r3, #12
 8005ec2:	d102      	bne.n	8005eca <HAL_RCC_OscConfig+0x136>
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	2b02      	cmp	r3, #2
 8005ec8:	d002      	beq.n	8005ed0 <HAL_RCC_OscConfig+0x13c>
 8005eca:	69bb      	ldr	r3, [r7, #24]
 8005ecc:	2b04      	cmp	r3, #4
 8005ece:	d11f      	bne.n	8005f10 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ed0:	4b4f      	ldr	r3, [pc, #316]	@ (8006010 <HAL_RCC_OscConfig+0x27c>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d005      	beq.n	8005ee8 <HAL_RCC_OscConfig+0x154>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	68db      	ldr	r3, [r3, #12]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d101      	bne.n	8005ee8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	e25d      	b.n	80063a4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ee8:	4b49      	ldr	r3, [pc, #292]	@ (8006010 <HAL_RCC_OscConfig+0x27c>)
 8005eea:	685b      	ldr	r3, [r3, #4]
 8005eec:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	691b      	ldr	r3, [r3, #16]
 8005ef4:	061b      	lsls	r3, r3, #24
 8005ef6:	4946      	ldr	r1, [pc, #280]	@ (8006010 <HAL_RCC_OscConfig+0x27c>)
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005efc:	4b45      	ldr	r3, [pc, #276]	@ (8006014 <HAL_RCC_OscConfig+0x280>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4618      	mov	r0, r3
 8005f02:	f7fd f991 	bl	8003228 <HAL_InitTick>
 8005f06:	4603      	mov	r3, r0
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d043      	beq.n	8005f94 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	e249      	b.n	80063a4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	68db      	ldr	r3, [r3, #12]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d023      	beq.n	8005f60 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f18:	4b3d      	ldr	r3, [pc, #244]	@ (8006010 <HAL_RCC_OscConfig+0x27c>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a3c      	ldr	r2, [pc, #240]	@ (8006010 <HAL_RCC_OscConfig+0x27c>)
 8005f1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f24:	f7fd fc1a 	bl	800375c <HAL_GetTick>
 8005f28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005f2a:	e008      	b.n	8005f3e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f2c:	f7fd fc16 	bl	800375c <HAL_GetTick>
 8005f30:	4602      	mov	r2, r0
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	1ad3      	subs	r3, r2, r3
 8005f36:	2b02      	cmp	r3, #2
 8005f38:	d901      	bls.n	8005f3e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005f3a:	2303      	movs	r3, #3
 8005f3c:	e232      	b.n	80063a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005f3e:	4b34      	ldr	r3, [pc, #208]	@ (8006010 <HAL_RCC_OscConfig+0x27c>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d0f0      	beq.n	8005f2c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f4a:	4b31      	ldr	r3, [pc, #196]	@ (8006010 <HAL_RCC_OscConfig+0x27c>)
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	691b      	ldr	r3, [r3, #16]
 8005f56:	061b      	lsls	r3, r3, #24
 8005f58:	492d      	ldr	r1, [pc, #180]	@ (8006010 <HAL_RCC_OscConfig+0x27c>)
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	604b      	str	r3, [r1, #4]
 8005f5e:	e01a      	b.n	8005f96 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f60:	4b2b      	ldr	r3, [pc, #172]	@ (8006010 <HAL_RCC_OscConfig+0x27c>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a2a      	ldr	r2, [pc, #168]	@ (8006010 <HAL_RCC_OscConfig+0x27c>)
 8005f66:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005f6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f6c:	f7fd fbf6 	bl	800375c <HAL_GetTick>
 8005f70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005f72:	e008      	b.n	8005f86 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f74:	f7fd fbf2 	bl	800375c <HAL_GetTick>
 8005f78:	4602      	mov	r2, r0
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	1ad3      	subs	r3, r2, r3
 8005f7e:	2b02      	cmp	r3, #2
 8005f80:	d901      	bls.n	8005f86 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005f82:	2303      	movs	r3, #3
 8005f84:	e20e      	b.n	80063a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005f86:	4b22      	ldr	r3, [pc, #136]	@ (8006010 <HAL_RCC_OscConfig+0x27c>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d1f0      	bne.n	8005f74 <HAL_RCC_OscConfig+0x1e0>
 8005f92:	e000      	b.n	8005f96 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f94:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f003 0308 	and.w	r3, r3, #8
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d041      	beq.n	8006026 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	695b      	ldr	r3, [r3, #20]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d01c      	beq.n	8005fe4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005faa:	4b19      	ldr	r3, [pc, #100]	@ (8006010 <HAL_RCC_OscConfig+0x27c>)
 8005fac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005fb0:	4a17      	ldr	r2, [pc, #92]	@ (8006010 <HAL_RCC_OscConfig+0x27c>)
 8005fb2:	f043 0301 	orr.w	r3, r3, #1
 8005fb6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fba:	f7fd fbcf 	bl	800375c <HAL_GetTick>
 8005fbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005fc0:	e008      	b.n	8005fd4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005fc2:	f7fd fbcb 	bl	800375c <HAL_GetTick>
 8005fc6:	4602      	mov	r2, r0
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	1ad3      	subs	r3, r2, r3
 8005fcc:	2b02      	cmp	r3, #2
 8005fce:	d901      	bls.n	8005fd4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005fd0:	2303      	movs	r3, #3
 8005fd2:	e1e7      	b.n	80063a4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005fd4:	4b0e      	ldr	r3, [pc, #56]	@ (8006010 <HAL_RCC_OscConfig+0x27c>)
 8005fd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005fda:	f003 0302 	and.w	r3, r3, #2
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d0ef      	beq.n	8005fc2 <HAL_RCC_OscConfig+0x22e>
 8005fe2:	e020      	b.n	8006026 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005fe4:	4b0a      	ldr	r3, [pc, #40]	@ (8006010 <HAL_RCC_OscConfig+0x27c>)
 8005fe6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005fea:	4a09      	ldr	r2, [pc, #36]	@ (8006010 <HAL_RCC_OscConfig+0x27c>)
 8005fec:	f023 0301 	bic.w	r3, r3, #1
 8005ff0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ff4:	f7fd fbb2 	bl	800375c <HAL_GetTick>
 8005ff8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005ffa:	e00d      	b.n	8006018 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ffc:	f7fd fbae 	bl	800375c <HAL_GetTick>
 8006000:	4602      	mov	r2, r0
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	1ad3      	subs	r3, r2, r3
 8006006:	2b02      	cmp	r3, #2
 8006008:	d906      	bls.n	8006018 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800600a:	2303      	movs	r3, #3
 800600c:	e1ca      	b.n	80063a4 <HAL_RCC_OscConfig+0x610>
 800600e:	bf00      	nop
 8006010:	40021000 	.word	0x40021000
 8006014:	20000024 	.word	0x20000024
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006018:	4b8c      	ldr	r3, [pc, #560]	@ (800624c <HAL_RCC_OscConfig+0x4b8>)
 800601a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800601e:	f003 0302 	and.w	r3, r3, #2
 8006022:	2b00      	cmp	r3, #0
 8006024:	d1ea      	bne.n	8005ffc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f003 0304 	and.w	r3, r3, #4
 800602e:	2b00      	cmp	r3, #0
 8006030:	f000 80a6 	beq.w	8006180 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006034:	2300      	movs	r3, #0
 8006036:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006038:	4b84      	ldr	r3, [pc, #528]	@ (800624c <HAL_RCC_OscConfig+0x4b8>)
 800603a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800603c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006040:	2b00      	cmp	r3, #0
 8006042:	d101      	bne.n	8006048 <HAL_RCC_OscConfig+0x2b4>
 8006044:	2301      	movs	r3, #1
 8006046:	e000      	b.n	800604a <HAL_RCC_OscConfig+0x2b6>
 8006048:	2300      	movs	r3, #0
 800604a:	2b00      	cmp	r3, #0
 800604c:	d00d      	beq.n	800606a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800604e:	4b7f      	ldr	r3, [pc, #508]	@ (800624c <HAL_RCC_OscConfig+0x4b8>)
 8006050:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006052:	4a7e      	ldr	r2, [pc, #504]	@ (800624c <HAL_RCC_OscConfig+0x4b8>)
 8006054:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006058:	6593      	str	r3, [r2, #88]	@ 0x58
 800605a:	4b7c      	ldr	r3, [pc, #496]	@ (800624c <HAL_RCC_OscConfig+0x4b8>)
 800605c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800605e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006062:	60fb      	str	r3, [r7, #12]
 8006064:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006066:	2301      	movs	r3, #1
 8006068:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800606a:	4b79      	ldr	r3, [pc, #484]	@ (8006250 <HAL_RCC_OscConfig+0x4bc>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006072:	2b00      	cmp	r3, #0
 8006074:	d118      	bne.n	80060a8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006076:	4b76      	ldr	r3, [pc, #472]	@ (8006250 <HAL_RCC_OscConfig+0x4bc>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a75      	ldr	r2, [pc, #468]	@ (8006250 <HAL_RCC_OscConfig+0x4bc>)
 800607c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006080:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006082:	f7fd fb6b 	bl	800375c <HAL_GetTick>
 8006086:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006088:	e008      	b.n	800609c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800608a:	f7fd fb67 	bl	800375c <HAL_GetTick>
 800608e:	4602      	mov	r2, r0
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	1ad3      	subs	r3, r2, r3
 8006094:	2b02      	cmp	r3, #2
 8006096:	d901      	bls.n	800609c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006098:	2303      	movs	r3, #3
 800609a:	e183      	b.n	80063a4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800609c:	4b6c      	ldr	r3, [pc, #432]	@ (8006250 <HAL_RCC_OscConfig+0x4bc>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d0f0      	beq.n	800608a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	689b      	ldr	r3, [r3, #8]
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	d108      	bne.n	80060c2 <HAL_RCC_OscConfig+0x32e>
 80060b0:	4b66      	ldr	r3, [pc, #408]	@ (800624c <HAL_RCC_OscConfig+0x4b8>)
 80060b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060b6:	4a65      	ldr	r2, [pc, #404]	@ (800624c <HAL_RCC_OscConfig+0x4b8>)
 80060b8:	f043 0301 	orr.w	r3, r3, #1
 80060bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80060c0:	e024      	b.n	800610c <HAL_RCC_OscConfig+0x378>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	689b      	ldr	r3, [r3, #8]
 80060c6:	2b05      	cmp	r3, #5
 80060c8:	d110      	bne.n	80060ec <HAL_RCC_OscConfig+0x358>
 80060ca:	4b60      	ldr	r3, [pc, #384]	@ (800624c <HAL_RCC_OscConfig+0x4b8>)
 80060cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060d0:	4a5e      	ldr	r2, [pc, #376]	@ (800624c <HAL_RCC_OscConfig+0x4b8>)
 80060d2:	f043 0304 	orr.w	r3, r3, #4
 80060d6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80060da:	4b5c      	ldr	r3, [pc, #368]	@ (800624c <HAL_RCC_OscConfig+0x4b8>)
 80060dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060e0:	4a5a      	ldr	r2, [pc, #360]	@ (800624c <HAL_RCC_OscConfig+0x4b8>)
 80060e2:	f043 0301 	orr.w	r3, r3, #1
 80060e6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80060ea:	e00f      	b.n	800610c <HAL_RCC_OscConfig+0x378>
 80060ec:	4b57      	ldr	r3, [pc, #348]	@ (800624c <HAL_RCC_OscConfig+0x4b8>)
 80060ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060f2:	4a56      	ldr	r2, [pc, #344]	@ (800624c <HAL_RCC_OscConfig+0x4b8>)
 80060f4:	f023 0301 	bic.w	r3, r3, #1
 80060f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80060fc:	4b53      	ldr	r3, [pc, #332]	@ (800624c <HAL_RCC_OscConfig+0x4b8>)
 80060fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006102:	4a52      	ldr	r2, [pc, #328]	@ (800624c <HAL_RCC_OscConfig+0x4b8>)
 8006104:	f023 0304 	bic.w	r3, r3, #4
 8006108:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d016      	beq.n	8006142 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006114:	f7fd fb22 	bl	800375c <HAL_GetTick>
 8006118:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800611a:	e00a      	b.n	8006132 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800611c:	f7fd fb1e 	bl	800375c <HAL_GetTick>
 8006120:	4602      	mov	r2, r0
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	1ad3      	subs	r3, r2, r3
 8006126:	f241 3288 	movw	r2, #5000	@ 0x1388
 800612a:	4293      	cmp	r3, r2
 800612c:	d901      	bls.n	8006132 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800612e:	2303      	movs	r3, #3
 8006130:	e138      	b.n	80063a4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006132:	4b46      	ldr	r3, [pc, #280]	@ (800624c <HAL_RCC_OscConfig+0x4b8>)
 8006134:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006138:	f003 0302 	and.w	r3, r3, #2
 800613c:	2b00      	cmp	r3, #0
 800613e:	d0ed      	beq.n	800611c <HAL_RCC_OscConfig+0x388>
 8006140:	e015      	b.n	800616e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006142:	f7fd fb0b 	bl	800375c <HAL_GetTick>
 8006146:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006148:	e00a      	b.n	8006160 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800614a:	f7fd fb07 	bl	800375c <HAL_GetTick>
 800614e:	4602      	mov	r2, r0
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	1ad3      	subs	r3, r2, r3
 8006154:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006158:	4293      	cmp	r3, r2
 800615a:	d901      	bls.n	8006160 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800615c:	2303      	movs	r3, #3
 800615e:	e121      	b.n	80063a4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006160:	4b3a      	ldr	r3, [pc, #232]	@ (800624c <HAL_RCC_OscConfig+0x4b8>)
 8006162:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006166:	f003 0302 	and.w	r3, r3, #2
 800616a:	2b00      	cmp	r3, #0
 800616c:	d1ed      	bne.n	800614a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800616e:	7ffb      	ldrb	r3, [r7, #31]
 8006170:	2b01      	cmp	r3, #1
 8006172:	d105      	bne.n	8006180 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006174:	4b35      	ldr	r3, [pc, #212]	@ (800624c <HAL_RCC_OscConfig+0x4b8>)
 8006176:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006178:	4a34      	ldr	r2, [pc, #208]	@ (800624c <HAL_RCC_OscConfig+0x4b8>)
 800617a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800617e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f003 0320 	and.w	r3, r3, #32
 8006188:	2b00      	cmp	r3, #0
 800618a:	d03c      	beq.n	8006206 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	699b      	ldr	r3, [r3, #24]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d01c      	beq.n	80061ce <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006194:	4b2d      	ldr	r3, [pc, #180]	@ (800624c <HAL_RCC_OscConfig+0x4b8>)
 8006196:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800619a:	4a2c      	ldr	r2, [pc, #176]	@ (800624c <HAL_RCC_OscConfig+0x4b8>)
 800619c:	f043 0301 	orr.w	r3, r3, #1
 80061a0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061a4:	f7fd fada 	bl	800375c <HAL_GetTick>
 80061a8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80061aa:	e008      	b.n	80061be <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80061ac:	f7fd fad6 	bl	800375c <HAL_GetTick>
 80061b0:	4602      	mov	r2, r0
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	1ad3      	subs	r3, r2, r3
 80061b6:	2b02      	cmp	r3, #2
 80061b8:	d901      	bls.n	80061be <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80061ba:	2303      	movs	r3, #3
 80061bc:	e0f2      	b.n	80063a4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80061be:	4b23      	ldr	r3, [pc, #140]	@ (800624c <HAL_RCC_OscConfig+0x4b8>)
 80061c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80061c4:	f003 0302 	and.w	r3, r3, #2
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d0ef      	beq.n	80061ac <HAL_RCC_OscConfig+0x418>
 80061cc:	e01b      	b.n	8006206 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80061ce:	4b1f      	ldr	r3, [pc, #124]	@ (800624c <HAL_RCC_OscConfig+0x4b8>)
 80061d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80061d4:	4a1d      	ldr	r2, [pc, #116]	@ (800624c <HAL_RCC_OscConfig+0x4b8>)
 80061d6:	f023 0301 	bic.w	r3, r3, #1
 80061da:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061de:	f7fd fabd 	bl	800375c <HAL_GetTick>
 80061e2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80061e4:	e008      	b.n	80061f8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80061e6:	f7fd fab9 	bl	800375c <HAL_GetTick>
 80061ea:	4602      	mov	r2, r0
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	1ad3      	subs	r3, r2, r3
 80061f0:	2b02      	cmp	r3, #2
 80061f2:	d901      	bls.n	80061f8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80061f4:	2303      	movs	r3, #3
 80061f6:	e0d5      	b.n	80063a4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80061f8:	4b14      	ldr	r3, [pc, #80]	@ (800624c <HAL_RCC_OscConfig+0x4b8>)
 80061fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80061fe:	f003 0302 	and.w	r3, r3, #2
 8006202:	2b00      	cmp	r3, #0
 8006204:	d1ef      	bne.n	80061e6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	69db      	ldr	r3, [r3, #28]
 800620a:	2b00      	cmp	r3, #0
 800620c:	f000 80c9 	beq.w	80063a2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006210:	4b0e      	ldr	r3, [pc, #56]	@ (800624c <HAL_RCC_OscConfig+0x4b8>)
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	f003 030c 	and.w	r3, r3, #12
 8006218:	2b0c      	cmp	r3, #12
 800621a:	f000 8083 	beq.w	8006324 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	69db      	ldr	r3, [r3, #28]
 8006222:	2b02      	cmp	r3, #2
 8006224:	d15e      	bne.n	80062e4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006226:	4b09      	ldr	r3, [pc, #36]	@ (800624c <HAL_RCC_OscConfig+0x4b8>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a08      	ldr	r2, [pc, #32]	@ (800624c <HAL_RCC_OscConfig+0x4b8>)
 800622c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006230:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006232:	f7fd fa93 	bl	800375c <HAL_GetTick>
 8006236:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006238:	e00c      	b.n	8006254 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800623a:	f7fd fa8f 	bl	800375c <HAL_GetTick>
 800623e:	4602      	mov	r2, r0
 8006240:	693b      	ldr	r3, [r7, #16]
 8006242:	1ad3      	subs	r3, r2, r3
 8006244:	2b02      	cmp	r3, #2
 8006246:	d905      	bls.n	8006254 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006248:	2303      	movs	r3, #3
 800624a:	e0ab      	b.n	80063a4 <HAL_RCC_OscConfig+0x610>
 800624c:	40021000 	.word	0x40021000
 8006250:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006254:	4b55      	ldr	r3, [pc, #340]	@ (80063ac <HAL_RCC_OscConfig+0x618>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800625c:	2b00      	cmp	r3, #0
 800625e:	d1ec      	bne.n	800623a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006260:	4b52      	ldr	r3, [pc, #328]	@ (80063ac <HAL_RCC_OscConfig+0x618>)
 8006262:	68da      	ldr	r2, [r3, #12]
 8006264:	4b52      	ldr	r3, [pc, #328]	@ (80063b0 <HAL_RCC_OscConfig+0x61c>)
 8006266:	4013      	ands	r3, r2
 8006268:	687a      	ldr	r2, [r7, #4]
 800626a:	6a11      	ldr	r1, [r2, #32]
 800626c:	687a      	ldr	r2, [r7, #4]
 800626e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006270:	3a01      	subs	r2, #1
 8006272:	0112      	lsls	r2, r2, #4
 8006274:	4311      	orrs	r1, r2
 8006276:	687a      	ldr	r2, [r7, #4]
 8006278:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800627a:	0212      	lsls	r2, r2, #8
 800627c:	4311      	orrs	r1, r2
 800627e:	687a      	ldr	r2, [r7, #4]
 8006280:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006282:	0852      	lsrs	r2, r2, #1
 8006284:	3a01      	subs	r2, #1
 8006286:	0552      	lsls	r2, r2, #21
 8006288:	4311      	orrs	r1, r2
 800628a:	687a      	ldr	r2, [r7, #4]
 800628c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800628e:	0852      	lsrs	r2, r2, #1
 8006290:	3a01      	subs	r2, #1
 8006292:	0652      	lsls	r2, r2, #25
 8006294:	4311      	orrs	r1, r2
 8006296:	687a      	ldr	r2, [r7, #4]
 8006298:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800629a:	06d2      	lsls	r2, r2, #27
 800629c:	430a      	orrs	r2, r1
 800629e:	4943      	ldr	r1, [pc, #268]	@ (80063ac <HAL_RCC_OscConfig+0x618>)
 80062a0:	4313      	orrs	r3, r2
 80062a2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80062a4:	4b41      	ldr	r3, [pc, #260]	@ (80063ac <HAL_RCC_OscConfig+0x618>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a40      	ldr	r2, [pc, #256]	@ (80063ac <HAL_RCC_OscConfig+0x618>)
 80062aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80062ae:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80062b0:	4b3e      	ldr	r3, [pc, #248]	@ (80063ac <HAL_RCC_OscConfig+0x618>)
 80062b2:	68db      	ldr	r3, [r3, #12]
 80062b4:	4a3d      	ldr	r2, [pc, #244]	@ (80063ac <HAL_RCC_OscConfig+0x618>)
 80062b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80062ba:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062bc:	f7fd fa4e 	bl	800375c <HAL_GetTick>
 80062c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80062c2:	e008      	b.n	80062d6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062c4:	f7fd fa4a 	bl	800375c <HAL_GetTick>
 80062c8:	4602      	mov	r2, r0
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	1ad3      	subs	r3, r2, r3
 80062ce:	2b02      	cmp	r3, #2
 80062d0:	d901      	bls.n	80062d6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80062d2:	2303      	movs	r3, #3
 80062d4:	e066      	b.n	80063a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80062d6:	4b35      	ldr	r3, [pc, #212]	@ (80063ac <HAL_RCC_OscConfig+0x618>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d0f0      	beq.n	80062c4 <HAL_RCC_OscConfig+0x530>
 80062e2:	e05e      	b.n	80063a2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062e4:	4b31      	ldr	r3, [pc, #196]	@ (80063ac <HAL_RCC_OscConfig+0x618>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a30      	ldr	r2, [pc, #192]	@ (80063ac <HAL_RCC_OscConfig+0x618>)
 80062ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80062ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062f0:	f7fd fa34 	bl	800375c <HAL_GetTick>
 80062f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80062f6:	e008      	b.n	800630a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062f8:	f7fd fa30 	bl	800375c <HAL_GetTick>
 80062fc:	4602      	mov	r2, r0
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	1ad3      	subs	r3, r2, r3
 8006302:	2b02      	cmp	r3, #2
 8006304:	d901      	bls.n	800630a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8006306:	2303      	movs	r3, #3
 8006308:	e04c      	b.n	80063a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800630a:	4b28      	ldr	r3, [pc, #160]	@ (80063ac <HAL_RCC_OscConfig+0x618>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006312:	2b00      	cmp	r3, #0
 8006314:	d1f0      	bne.n	80062f8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006316:	4b25      	ldr	r3, [pc, #148]	@ (80063ac <HAL_RCC_OscConfig+0x618>)
 8006318:	68da      	ldr	r2, [r3, #12]
 800631a:	4924      	ldr	r1, [pc, #144]	@ (80063ac <HAL_RCC_OscConfig+0x618>)
 800631c:	4b25      	ldr	r3, [pc, #148]	@ (80063b4 <HAL_RCC_OscConfig+0x620>)
 800631e:	4013      	ands	r3, r2
 8006320:	60cb      	str	r3, [r1, #12]
 8006322:	e03e      	b.n	80063a2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	69db      	ldr	r3, [r3, #28]
 8006328:	2b01      	cmp	r3, #1
 800632a:	d101      	bne.n	8006330 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800632c:	2301      	movs	r3, #1
 800632e:	e039      	b.n	80063a4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006330:	4b1e      	ldr	r3, [pc, #120]	@ (80063ac <HAL_RCC_OscConfig+0x618>)
 8006332:	68db      	ldr	r3, [r3, #12]
 8006334:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	f003 0203 	and.w	r2, r3, #3
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6a1b      	ldr	r3, [r3, #32]
 8006340:	429a      	cmp	r2, r3
 8006342:	d12c      	bne.n	800639e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800634e:	3b01      	subs	r3, #1
 8006350:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006352:	429a      	cmp	r2, r3
 8006354:	d123      	bne.n	800639e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006360:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006362:	429a      	cmp	r2, r3
 8006364:	d11b      	bne.n	800639e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006370:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006372:	429a      	cmp	r2, r3
 8006374:	d113      	bne.n	800639e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006380:	085b      	lsrs	r3, r3, #1
 8006382:	3b01      	subs	r3, #1
 8006384:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006386:	429a      	cmp	r2, r3
 8006388:	d109      	bne.n	800639e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006394:	085b      	lsrs	r3, r3, #1
 8006396:	3b01      	subs	r3, #1
 8006398:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800639a:	429a      	cmp	r2, r3
 800639c:	d001      	beq.n	80063a2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800639e:	2301      	movs	r3, #1
 80063a0:	e000      	b.n	80063a4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80063a2:	2300      	movs	r3, #0
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	3720      	adds	r7, #32
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}
 80063ac:	40021000 	.word	0x40021000
 80063b0:	019f800c 	.word	0x019f800c
 80063b4:	feeefffc 	.word	0xfeeefffc

080063b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b086      	sub	sp, #24
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
 80063c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80063c2:	2300      	movs	r3, #0
 80063c4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d101      	bne.n	80063d0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80063cc:	2301      	movs	r3, #1
 80063ce:	e11e      	b.n	800660e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80063d0:	4b91      	ldr	r3, [pc, #580]	@ (8006618 <HAL_RCC_ClockConfig+0x260>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f003 030f 	and.w	r3, r3, #15
 80063d8:	683a      	ldr	r2, [r7, #0]
 80063da:	429a      	cmp	r2, r3
 80063dc:	d910      	bls.n	8006400 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063de:	4b8e      	ldr	r3, [pc, #568]	@ (8006618 <HAL_RCC_ClockConfig+0x260>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f023 020f 	bic.w	r2, r3, #15
 80063e6:	498c      	ldr	r1, [pc, #560]	@ (8006618 <HAL_RCC_ClockConfig+0x260>)
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	4313      	orrs	r3, r2
 80063ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80063ee:	4b8a      	ldr	r3, [pc, #552]	@ (8006618 <HAL_RCC_ClockConfig+0x260>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f003 030f 	and.w	r3, r3, #15
 80063f6:	683a      	ldr	r2, [r7, #0]
 80063f8:	429a      	cmp	r2, r3
 80063fa:	d001      	beq.n	8006400 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80063fc:	2301      	movs	r3, #1
 80063fe:	e106      	b.n	800660e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f003 0301 	and.w	r3, r3, #1
 8006408:	2b00      	cmp	r3, #0
 800640a:	d073      	beq.n	80064f4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	2b03      	cmp	r3, #3
 8006412:	d129      	bne.n	8006468 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006414:	4b81      	ldr	r3, [pc, #516]	@ (800661c <HAL_RCC_ClockConfig+0x264>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800641c:	2b00      	cmp	r3, #0
 800641e:	d101      	bne.n	8006424 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006420:	2301      	movs	r3, #1
 8006422:	e0f4      	b.n	800660e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006424:	f000 f9ba 	bl	800679c <RCC_GetSysClockFreqFromPLLSource>
 8006428:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	4a7c      	ldr	r2, [pc, #496]	@ (8006620 <HAL_RCC_ClockConfig+0x268>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d93f      	bls.n	80064b2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006432:	4b7a      	ldr	r3, [pc, #488]	@ (800661c <HAL_RCC_ClockConfig+0x264>)
 8006434:	689b      	ldr	r3, [r3, #8]
 8006436:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800643a:	2b00      	cmp	r3, #0
 800643c:	d009      	beq.n	8006452 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006446:	2b00      	cmp	r3, #0
 8006448:	d033      	beq.n	80064b2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800644e:	2b00      	cmp	r3, #0
 8006450:	d12f      	bne.n	80064b2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006452:	4b72      	ldr	r3, [pc, #456]	@ (800661c <HAL_RCC_ClockConfig+0x264>)
 8006454:	689b      	ldr	r3, [r3, #8]
 8006456:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800645a:	4a70      	ldr	r2, [pc, #448]	@ (800661c <HAL_RCC_ClockConfig+0x264>)
 800645c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006460:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006462:	2380      	movs	r3, #128	@ 0x80
 8006464:	617b      	str	r3, [r7, #20]
 8006466:	e024      	b.n	80064b2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	685b      	ldr	r3, [r3, #4]
 800646c:	2b02      	cmp	r3, #2
 800646e:	d107      	bne.n	8006480 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006470:	4b6a      	ldr	r3, [pc, #424]	@ (800661c <HAL_RCC_ClockConfig+0x264>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006478:	2b00      	cmp	r3, #0
 800647a:	d109      	bne.n	8006490 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800647c:	2301      	movs	r3, #1
 800647e:	e0c6      	b.n	800660e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006480:	4b66      	ldr	r3, [pc, #408]	@ (800661c <HAL_RCC_ClockConfig+0x264>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006488:	2b00      	cmp	r3, #0
 800648a:	d101      	bne.n	8006490 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800648c:	2301      	movs	r3, #1
 800648e:	e0be      	b.n	800660e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006490:	f000 f8ce 	bl	8006630 <HAL_RCC_GetSysClockFreq>
 8006494:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8006496:	693b      	ldr	r3, [r7, #16]
 8006498:	4a61      	ldr	r2, [pc, #388]	@ (8006620 <HAL_RCC_ClockConfig+0x268>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d909      	bls.n	80064b2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800649e:	4b5f      	ldr	r3, [pc, #380]	@ (800661c <HAL_RCC_ClockConfig+0x264>)
 80064a0:	689b      	ldr	r3, [r3, #8]
 80064a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80064a6:	4a5d      	ldr	r2, [pc, #372]	@ (800661c <HAL_RCC_ClockConfig+0x264>)
 80064a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064ac:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80064ae:	2380      	movs	r3, #128	@ 0x80
 80064b0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80064b2:	4b5a      	ldr	r3, [pc, #360]	@ (800661c <HAL_RCC_ClockConfig+0x264>)
 80064b4:	689b      	ldr	r3, [r3, #8]
 80064b6:	f023 0203 	bic.w	r2, r3, #3
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	4957      	ldr	r1, [pc, #348]	@ (800661c <HAL_RCC_ClockConfig+0x264>)
 80064c0:	4313      	orrs	r3, r2
 80064c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064c4:	f7fd f94a 	bl	800375c <HAL_GetTick>
 80064c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064ca:	e00a      	b.n	80064e2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80064cc:	f7fd f946 	bl	800375c <HAL_GetTick>
 80064d0:	4602      	mov	r2, r0
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	1ad3      	subs	r3, r2, r3
 80064d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80064da:	4293      	cmp	r3, r2
 80064dc:	d901      	bls.n	80064e2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80064de:	2303      	movs	r3, #3
 80064e0:	e095      	b.n	800660e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064e2:	4b4e      	ldr	r3, [pc, #312]	@ (800661c <HAL_RCC_ClockConfig+0x264>)
 80064e4:	689b      	ldr	r3, [r3, #8]
 80064e6:	f003 020c 	and.w	r2, r3, #12
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	009b      	lsls	r3, r3, #2
 80064f0:	429a      	cmp	r2, r3
 80064f2:	d1eb      	bne.n	80064cc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f003 0302 	and.w	r3, r3, #2
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d023      	beq.n	8006548 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f003 0304 	and.w	r3, r3, #4
 8006508:	2b00      	cmp	r3, #0
 800650a:	d005      	beq.n	8006518 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800650c:	4b43      	ldr	r3, [pc, #268]	@ (800661c <HAL_RCC_ClockConfig+0x264>)
 800650e:	689b      	ldr	r3, [r3, #8]
 8006510:	4a42      	ldr	r2, [pc, #264]	@ (800661c <HAL_RCC_ClockConfig+0x264>)
 8006512:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006516:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f003 0308 	and.w	r3, r3, #8
 8006520:	2b00      	cmp	r3, #0
 8006522:	d007      	beq.n	8006534 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006524:	4b3d      	ldr	r3, [pc, #244]	@ (800661c <HAL_RCC_ClockConfig+0x264>)
 8006526:	689b      	ldr	r3, [r3, #8]
 8006528:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800652c:	4a3b      	ldr	r2, [pc, #236]	@ (800661c <HAL_RCC_ClockConfig+0x264>)
 800652e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006532:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006534:	4b39      	ldr	r3, [pc, #228]	@ (800661c <HAL_RCC_ClockConfig+0x264>)
 8006536:	689b      	ldr	r3, [r3, #8]
 8006538:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	689b      	ldr	r3, [r3, #8]
 8006540:	4936      	ldr	r1, [pc, #216]	@ (800661c <HAL_RCC_ClockConfig+0x264>)
 8006542:	4313      	orrs	r3, r2
 8006544:	608b      	str	r3, [r1, #8]
 8006546:	e008      	b.n	800655a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	2b80      	cmp	r3, #128	@ 0x80
 800654c:	d105      	bne.n	800655a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800654e:	4b33      	ldr	r3, [pc, #204]	@ (800661c <HAL_RCC_ClockConfig+0x264>)
 8006550:	689b      	ldr	r3, [r3, #8]
 8006552:	4a32      	ldr	r2, [pc, #200]	@ (800661c <HAL_RCC_ClockConfig+0x264>)
 8006554:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006558:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800655a:	4b2f      	ldr	r3, [pc, #188]	@ (8006618 <HAL_RCC_ClockConfig+0x260>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f003 030f 	and.w	r3, r3, #15
 8006562:	683a      	ldr	r2, [r7, #0]
 8006564:	429a      	cmp	r2, r3
 8006566:	d21d      	bcs.n	80065a4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006568:	4b2b      	ldr	r3, [pc, #172]	@ (8006618 <HAL_RCC_ClockConfig+0x260>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f023 020f 	bic.w	r2, r3, #15
 8006570:	4929      	ldr	r1, [pc, #164]	@ (8006618 <HAL_RCC_ClockConfig+0x260>)
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	4313      	orrs	r3, r2
 8006576:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006578:	f7fd f8f0 	bl	800375c <HAL_GetTick>
 800657c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800657e:	e00a      	b.n	8006596 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006580:	f7fd f8ec 	bl	800375c <HAL_GetTick>
 8006584:	4602      	mov	r2, r0
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	1ad3      	subs	r3, r2, r3
 800658a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800658e:	4293      	cmp	r3, r2
 8006590:	d901      	bls.n	8006596 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006592:	2303      	movs	r3, #3
 8006594:	e03b      	b.n	800660e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006596:	4b20      	ldr	r3, [pc, #128]	@ (8006618 <HAL_RCC_ClockConfig+0x260>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f003 030f 	and.w	r3, r3, #15
 800659e:	683a      	ldr	r2, [r7, #0]
 80065a0:	429a      	cmp	r2, r3
 80065a2:	d1ed      	bne.n	8006580 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f003 0304 	and.w	r3, r3, #4
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d008      	beq.n	80065c2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80065b0:	4b1a      	ldr	r3, [pc, #104]	@ (800661c <HAL_RCC_ClockConfig+0x264>)
 80065b2:	689b      	ldr	r3, [r3, #8]
 80065b4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	68db      	ldr	r3, [r3, #12]
 80065bc:	4917      	ldr	r1, [pc, #92]	@ (800661c <HAL_RCC_ClockConfig+0x264>)
 80065be:	4313      	orrs	r3, r2
 80065c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f003 0308 	and.w	r3, r3, #8
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d009      	beq.n	80065e2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80065ce:	4b13      	ldr	r3, [pc, #76]	@ (800661c <HAL_RCC_ClockConfig+0x264>)
 80065d0:	689b      	ldr	r3, [r3, #8]
 80065d2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	691b      	ldr	r3, [r3, #16]
 80065da:	00db      	lsls	r3, r3, #3
 80065dc:	490f      	ldr	r1, [pc, #60]	@ (800661c <HAL_RCC_ClockConfig+0x264>)
 80065de:	4313      	orrs	r3, r2
 80065e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80065e2:	f000 f825 	bl	8006630 <HAL_RCC_GetSysClockFreq>
 80065e6:	4602      	mov	r2, r0
 80065e8:	4b0c      	ldr	r3, [pc, #48]	@ (800661c <HAL_RCC_ClockConfig+0x264>)
 80065ea:	689b      	ldr	r3, [r3, #8]
 80065ec:	091b      	lsrs	r3, r3, #4
 80065ee:	f003 030f 	and.w	r3, r3, #15
 80065f2:	490c      	ldr	r1, [pc, #48]	@ (8006624 <HAL_RCC_ClockConfig+0x26c>)
 80065f4:	5ccb      	ldrb	r3, [r1, r3]
 80065f6:	f003 031f 	and.w	r3, r3, #31
 80065fa:	fa22 f303 	lsr.w	r3, r2, r3
 80065fe:	4a0a      	ldr	r2, [pc, #40]	@ (8006628 <HAL_RCC_ClockConfig+0x270>)
 8006600:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006602:	4b0a      	ldr	r3, [pc, #40]	@ (800662c <HAL_RCC_ClockConfig+0x274>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4618      	mov	r0, r3
 8006608:	f7fc fe0e 	bl	8003228 <HAL_InitTick>
 800660c:	4603      	mov	r3, r0
}
 800660e:	4618      	mov	r0, r3
 8006610:	3718      	adds	r7, #24
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}
 8006616:	bf00      	nop
 8006618:	40022000 	.word	0x40022000
 800661c:	40021000 	.word	0x40021000
 8006620:	04c4b400 	.word	0x04c4b400
 8006624:	08013500 	.word	0x08013500
 8006628:	20000020 	.word	0x20000020
 800662c:	20000024 	.word	0x20000024

08006630 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006630:	b480      	push	{r7}
 8006632:	b087      	sub	sp, #28
 8006634:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006636:	4b2c      	ldr	r3, [pc, #176]	@ (80066e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006638:	689b      	ldr	r3, [r3, #8]
 800663a:	f003 030c 	and.w	r3, r3, #12
 800663e:	2b04      	cmp	r3, #4
 8006640:	d102      	bne.n	8006648 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006642:	4b2a      	ldr	r3, [pc, #168]	@ (80066ec <HAL_RCC_GetSysClockFreq+0xbc>)
 8006644:	613b      	str	r3, [r7, #16]
 8006646:	e047      	b.n	80066d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006648:	4b27      	ldr	r3, [pc, #156]	@ (80066e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800664a:	689b      	ldr	r3, [r3, #8]
 800664c:	f003 030c 	and.w	r3, r3, #12
 8006650:	2b08      	cmp	r3, #8
 8006652:	d102      	bne.n	800665a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006654:	4b26      	ldr	r3, [pc, #152]	@ (80066f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006656:	613b      	str	r3, [r7, #16]
 8006658:	e03e      	b.n	80066d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800665a:	4b23      	ldr	r3, [pc, #140]	@ (80066e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800665c:	689b      	ldr	r3, [r3, #8]
 800665e:	f003 030c 	and.w	r3, r3, #12
 8006662:	2b0c      	cmp	r3, #12
 8006664:	d136      	bne.n	80066d4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006666:	4b20      	ldr	r3, [pc, #128]	@ (80066e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006668:	68db      	ldr	r3, [r3, #12]
 800666a:	f003 0303 	and.w	r3, r3, #3
 800666e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006670:	4b1d      	ldr	r3, [pc, #116]	@ (80066e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006672:	68db      	ldr	r3, [r3, #12]
 8006674:	091b      	lsrs	r3, r3, #4
 8006676:	f003 030f 	and.w	r3, r3, #15
 800667a:	3301      	adds	r3, #1
 800667c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	2b03      	cmp	r3, #3
 8006682:	d10c      	bne.n	800669e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006684:	4a1a      	ldr	r2, [pc, #104]	@ (80066f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	fbb2 f3f3 	udiv	r3, r2, r3
 800668c:	4a16      	ldr	r2, [pc, #88]	@ (80066e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800668e:	68d2      	ldr	r2, [r2, #12]
 8006690:	0a12      	lsrs	r2, r2, #8
 8006692:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006696:	fb02 f303 	mul.w	r3, r2, r3
 800669a:	617b      	str	r3, [r7, #20]
      break;
 800669c:	e00c      	b.n	80066b8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800669e:	4a13      	ldr	r2, [pc, #76]	@ (80066ec <HAL_RCC_GetSysClockFreq+0xbc>)
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80066a6:	4a10      	ldr	r2, [pc, #64]	@ (80066e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80066a8:	68d2      	ldr	r2, [r2, #12]
 80066aa:	0a12      	lsrs	r2, r2, #8
 80066ac:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80066b0:	fb02 f303 	mul.w	r3, r2, r3
 80066b4:	617b      	str	r3, [r7, #20]
      break;
 80066b6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80066b8:	4b0b      	ldr	r3, [pc, #44]	@ (80066e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80066ba:	68db      	ldr	r3, [r3, #12]
 80066bc:	0e5b      	lsrs	r3, r3, #25
 80066be:	f003 0303 	and.w	r3, r3, #3
 80066c2:	3301      	adds	r3, #1
 80066c4:	005b      	lsls	r3, r3, #1
 80066c6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80066c8:	697a      	ldr	r2, [r7, #20]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80066d0:	613b      	str	r3, [r7, #16]
 80066d2:	e001      	b.n	80066d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80066d4:	2300      	movs	r3, #0
 80066d6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80066d8:	693b      	ldr	r3, [r7, #16]
}
 80066da:	4618      	mov	r0, r3
 80066dc:	371c      	adds	r7, #28
 80066de:	46bd      	mov	sp, r7
 80066e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e4:	4770      	bx	lr
 80066e6:	bf00      	nop
 80066e8:	40021000 	.word	0x40021000
 80066ec:	00f42400 	.word	0x00f42400
 80066f0:	007a1200 	.word	0x007a1200

080066f4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80066f4:	b480      	push	{r7}
 80066f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80066f8:	4b03      	ldr	r3, [pc, #12]	@ (8006708 <HAL_RCC_GetHCLKFreq+0x14>)
 80066fa:	681b      	ldr	r3, [r3, #0]
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	46bd      	mov	sp, r7
 8006700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006704:	4770      	bx	lr
 8006706:	bf00      	nop
 8006708:	20000020 	.word	0x20000020

0800670c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006710:	f7ff fff0 	bl	80066f4 <HAL_RCC_GetHCLKFreq>
 8006714:	4602      	mov	r2, r0
 8006716:	4b06      	ldr	r3, [pc, #24]	@ (8006730 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006718:	689b      	ldr	r3, [r3, #8]
 800671a:	0adb      	lsrs	r3, r3, #11
 800671c:	f003 0307 	and.w	r3, r3, #7
 8006720:	4904      	ldr	r1, [pc, #16]	@ (8006734 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006722:	5ccb      	ldrb	r3, [r1, r3]
 8006724:	f003 031f 	and.w	r3, r3, #31
 8006728:	fa22 f303 	lsr.w	r3, r2, r3
}
 800672c:	4618      	mov	r0, r3
 800672e:	bd80      	pop	{r7, pc}
 8006730:	40021000 	.word	0x40021000
 8006734:	08013510 	.word	0x08013510

08006738 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006738:	b480      	push	{r7}
 800673a:	b083      	sub	sp, #12
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
 8006740:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	220f      	movs	r2, #15
 8006746:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8006748:	4b12      	ldr	r3, [pc, #72]	@ (8006794 <HAL_RCC_GetClockConfig+0x5c>)
 800674a:	689b      	ldr	r3, [r3, #8]
 800674c:	f003 0203 	and.w	r2, r3, #3
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8006754:	4b0f      	ldr	r3, [pc, #60]	@ (8006794 <HAL_RCC_GetClockConfig+0x5c>)
 8006756:	689b      	ldr	r3, [r3, #8]
 8006758:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8006760:	4b0c      	ldr	r3, [pc, #48]	@ (8006794 <HAL_RCC_GetClockConfig+0x5c>)
 8006762:	689b      	ldr	r3, [r3, #8]
 8006764:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800676c:	4b09      	ldr	r3, [pc, #36]	@ (8006794 <HAL_RCC_GetClockConfig+0x5c>)
 800676e:	689b      	ldr	r3, [r3, #8]
 8006770:	08db      	lsrs	r3, r3, #3
 8006772:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800677a:	4b07      	ldr	r3, [pc, #28]	@ (8006798 <HAL_RCC_GetClockConfig+0x60>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f003 020f 	and.w	r2, r3, #15
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	601a      	str	r2, [r3, #0]
}
 8006786:	bf00      	nop
 8006788:	370c      	adds	r7, #12
 800678a:	46bd      	mov	sp, r7
 800678c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006790:	4770      	bx	lr
 8006792:	bf00      	nop
 8006794:	40021000 	.word	0x40021000
 8006798:	40022000 	.word	0x40022000

0800679c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800679c:	b480      	push	{r7}
 800679e:	b087      	sub	sp, #28
 80067a0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80067a2:	4b1e      	ldr	r3, [pc, #120]	@ (800681c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80067a4:	68db      	ldr	r3, [r3, #12]
 80067a6:	f003 0303 	and.w	r3, r3, #3
 80067aa:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80067ac:	4b1b      	ldr	r3, [pc, #108]	@ (800681c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80067ae:	68db      	ldr	r3, [r3, #12]
 80067b0:	091b      	lsrs	r3, r3, #4
 80067b2:	f003 030f 	and.w	r3, r3, #15
 80067b6:	3301      	adds	r3, #1
 80067b8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	2b03      	cmp	r3, #3
 80067be:	d10c      	bne.n	80067da <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80067c0:	4a17      	ldr	r2, [pc, #92]	@ (8006820 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80067c8:	4a14      	ldr	r2, [pc, #80]	@ (800681c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80067ca:	68d2      	ldr	r2, [r2, #12]
 80067cc:	0a12      	lsrs	r2, r2, #8
 80067ce:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80067d2:	fb02 f303 	mul.w	r3, r2, r3
 80067d6:	617b      	str	r3, [r7, #20]
    break;
 80067d8:	e00c      	b.n	80067f4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80067da:	4a12      	ldr	r2, [pc, #72]	@ (8006824 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	fbb2 f3f3 	udiv	r3, r2, r3
 80067e2:	4a0e      	ldr	r2, [pc, #56]	@ (800681c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80067e4:	68d2      	ldr	r2, [r2, #12]
 80067e6:	0a12      	lsrs	r2, r2, #8
 80067e8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80067ec:	fb02 f303 	mul.w	r3, r2, r3
 80067f0:	617b      	str	r3, [r7, #20]
    break;
 80067f2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80067f4:	4b09      	ldr	r3, [pc, #36]	@ (800681c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80067f6:	68db      	ldr	r3, [r3, #12]
 80067f8:	0e5b      	lsrs	r3, r3, #25
 80067fa:	f003 0303 	and.w	r3, r3, #3
 80067fe:	3301      	adds	r3, #1
 8006800:	005b      	lsls	r3, r3, #1
 8006802:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006804:	697a      	ldr	r2, [r7, #20]
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	fbb2 f3f3 	udiv	r3, r2, r3
 800680c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800680e:	687b      	ldr	r3, [r7, #4]
}
 8006810:	4618      	mov	r0, r3
 8006812:	371c      	adds	r7, #28
 8006814:	46bd      	mov	sp, r7
 8006816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681a:	4770      	bx	lr
 800681c:	40021000 	.word	0x40021000
 8006820:	007a1200 	.word	0x007a1200
 8006824:	00f42400 	.word	0x00f42400

08006828 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b086      	sub	sp, #24
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006830:	2300      	movs	r3, #0
 8006832:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006834:	2300      	movs	r3, #0
 8006836:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006840:	2b00      	cmp	r3, #0
 8006842:	f000 8098 	beq.w	8006976 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006846:	2300      	movs	r3, #0
 8006848:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800684a:	4b43      	ldr	r3, [pc, #268]	@ (8006958 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800684c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800684e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006852:	2b00      	cmp	r3, #0
 8006854:	d10d      	bne.n	8006872 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006856:	4b40      	ldr	r3, [pc, #256]	@ (8006958 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006858:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800685a:	4a3f      	ldr	r2, [pc, #252]	@ (8006958 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800685c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006860:	6593      	str	r3, [r2, #88]	@ 0x58
 8006862:	4b3d      	ldr	r3, [pc, #244]	@ (8006958 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006864:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006866:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800686a:	60bb      	str	r3, [r7, #8]
 800686c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800686e:	2301      	movs	r3, #1
 8006870:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006872:	4b3a      	ldr	r3, [pc, #232]	@ (800695c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a39      	ldr	r2, [pc, #228]	@ (800695c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006878:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800687c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800687e:	f7fc ff6d 	bl	800375c <HAL_GetTick>
 8006882:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006884:	e009      	b.n	800689a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006886:	f7fc ff69 	bl	800375c <HAL_GetTick>
 800688a:	4602      	mov	r2, r0
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	1ad3      	subs	r3, r2, r3
 8006890:	2b02      	cmp	r3, #2
 8006892:	d902      	bls.n	800689a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006894:	2303      	movs	r3, #3
 8006896:	74fb      	strb	r3, [r7, #19]
        break;
 8006898:	e005      	b.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800689a:	4b30      	ldr	r3, [pc, #192]	@ (800695c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d0ef      	beq.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80068a6:	7cfb      	ldrb	r3, [r7, #19]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d159      	bne.n	8006960 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80068ac:	4b2a      	ldr	r3, [pc, #168]	@ (8006958 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80068ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80068b6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d01e      	beq.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80068c2:	697a      	ldr	r2, [r7, #20]
 80068c4:	429a      	cmp	r2, r3
 80068c6:	d019      	beq.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80068c8:	4b23      	ldr	r3, [pc, #140]	@ (8006958 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80068ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80068d2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80068d4:	4b20      	ldr	r3, [pc, #128]	@ (8006958 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80068d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068da:	4a1f      	ldr	r2, [pc, #124]	@ (8006958 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80068dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80068e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80068e4:	4b1c      	ldr	r3, [pc, #112]	@ (8006958 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80068e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068ea:	4a1b      	ldr	r2, [pc, #108]	@ (8006958 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80068ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80068f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80068f4:	4a18      	ldr	r2, [pc, #96]	@ (8006958 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80068f6:	697b      	ldr	r3, [r7, #20]
 80068f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	f003 0301 	and.w	r3, r3, #1
 8006902:	2b00      	cmp	r3, #0
 8006904:	d016      	beq.n	8006934 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006906:	f7fc ff29 	bl	800375c <HAL_GetTick>
 800690a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800690c:	e00b      	b.n	8006926 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800690e:	f7fc ff25 	bl	800375c <HAL_GetTick>
 8006912:	4602      	mov	r2, r0
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	1ad3      	subs	r3, r2, r3
 8006918:	f241 3288 	movw	r2, #5000	@ 0x1388
 800691c:	4293      	cmp	r3, r2
 800691e:	d902      	bls.n	8006926 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006920:	2303      	movs	r3, #3
 8006922:	74fb      	strb	r3, [r7, #19]
            break;
 8006924:	e006      	b.n	8006934 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006926:	4b0c      	ldr	r3, [pc, #48]	@ (8006958 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006928:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800692c:	f003 0302 	and.w	r3, r3, #2
 8006930:	2b00      	cmp	r3, #0
 8006932:	d0ec      	beq.n	800690e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006934:	7cfb      	ldrb	r3, [r7, #19]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d10b      	bne.n	8006952 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800693a:	4b07      	ldr	r3, [pc, #28]	@ (8006958 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800693c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006940:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006948:	4903      	ldr	r1, [pc, #12]	@ (8006958 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800694a:	4313      	orrs	r3, r2
 800694c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006950:	e008      	b.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006952:	7cfb      	ldrb	r3, [r7, #19]
 8006954:	74bb      	strb	r3, [r7, #18]
 8006956:	e005      	b.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006958:	40021000 	.word	0x40021000
 800695c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006960:	7cfb      	ldrb	r3, [r7, #19]
 8006962:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006964:	7c7b      	ldrb	r3, [r7, #17]
 8006966:	2b01      	cmp	r3, #1
 8006968:	d105      	bne.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800696a:	4ba7      	ldr	r3, [pc, #668]	@ (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800696c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800696e:	4aa6      	ldr	r2, [pc, #664]	@ (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006970:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006974:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f003 0301 	and.w	r3, r3, #1
 800697e:	2b00      	cmp	r3, #0
 8006980:	d00a      	beq.n	8006998 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006982:	4ba1      	ldr	r3, [pc, #644]	@ (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006984:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006988:	f023 0203 	bic.w	r2, r3, #3
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	499d      	ldr	r1, [pc, #628]	@ (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006992:	4313      	orrs	r3, r2
 8006994:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f003 0302 	and.w	r3, r3, #2
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d00a      	beq.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80069a4:	4b98      	ldr	r3, [pc, #608]	@ (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069aa:	f023 020c 	bic.w	r2, r3, #12
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	689b      	ldr	r3, [r3, #8]
 80069b2:	4995      	ldr	r1, [pc, #596]	@ (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069b4:	4313      	orrs	r3, r2
 80069b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f003 0304 	and.w	r3, r3, #4
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d00a      	beq.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80069c6:	4b90      	ldr	r3, [pc, #576]	@ (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069cc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	68db      	ldr	r3, [r3, #12]
 80069d4:	498c      	ldr	r1, [pc, #560]	@ (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069d6:	4313      	orrs	r3, r2
 80069d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f003 0308 	and.w	r3, r3, #8
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d00a      	beq.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80069e8:	4b87      	ldr	r3, [pc, #540]	@ (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069ee:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	691b      	ldr	r3, [r3, #16]
 80069f6:	4984      	ldr	r1, [pc, #528]	@ (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069f8:	4313      	orrs	r3, r2
 80069fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f003 0310 	and.w	r3, r3, #16
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d00a      	beq.n	8006a20 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006a0a:	4b7f      	ldr	r3, [pc, #508]	@ (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a10:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	695b      	ldr	r3, [r3, #20]
 8006a18:	497b      	ldr	r1, [pc, #492]	@ (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f003 0320 	and.w	r3, r3, #32
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d00a      	beq.n	8006a42 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006a2c:	4b76      	ldr	r3, [pc, #472]	@ (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a32:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	699b      	ldr	r3, [r3, #24]
 8006a3a:	4973      	ldr	r1, [pc, #460]	@ (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a3c:	4313      	orrs	r3, r2
 8006a3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d00a      	beq.n	8006a64 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006a4e:	4b6e      	ldr	r3, [pc, #440]	@ (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a54:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	69db      	ldr	r3, [r3, #28]
 8006a5c:	496a      	ldr	r1, [pc, #424]	@ (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d00a      	beq.n	8006a86 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006a70:	4b65      	ldr	r3, [pc, #404]	@ (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a76:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6a1b      	ldr	r3, [r3, #32]
 8006a7e:	4962      	ldr	r1, [pc, #392]	@ (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a80:	4313      	orrs	r3, r2
 8006a82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d00a      	beq.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006a92:	4b5d      	ldr	r3, [pc, #372]	@ (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a98:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aa0:	4959      	ldr	r1, [pc, #356]	@ (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d00a      	beq.n	8006aca <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006ab4:	4b54      	ldr	r3, [pc, #336]	@ (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006aba:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ac2:	4951      	ldr	r1, [pc, #324]	@ (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ac4:	4313      	orrs	r3, r2
 8006ac6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d015      	beq.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006ad6:	4b4c      	ldr	r3, [pc, #304]	@ (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006adc:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ae4:	4948      	ldr	r1, [pc, #288]	@ (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006af0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006af4:	d105      	bne.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006af6:	4b44      	ldr	r3, [pc, #272]	@ (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006af8:	68db      	ldr	r3, [r3, #12]
 8006afa:	4a43      	ldr	r2, [pc, #268]	@ (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006afc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006b00:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d015      	beq.n	8006b3a <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006b0e:	4b3e      	ldr	r3, [pc, #248]	@ (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b14:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b1c:	493a      	ldr	r1, [pc, #232]	@ (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b28:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006b2c:	d105      	bne.n	8006b3a <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006b2e:	4b36      	ldr	r3, [pc, #216]	@ (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b30:	68db      	ldr	r3, [r3, #12]
 8006b32:	4a35      	ldr	r2, [pc, #212]	@ (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b34:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006b38:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d015      	beq.n	8006b72 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006b46:	4b30      	ldr	r3, [pc, #192]	@ (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b4c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b54:	492c      	ldr	r1, [pc, #176]	@ (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b56:	4313      	orrs	r3, r2
 8006b58:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b60:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006b64:	d105      	bne.n	8006b72 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006b66:	4b28      	ldr	r3, [pc, #160]	@ (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b68:	68db      	ldr	r3, [r3, #12]
 8006b6a:	4a27      	ldr	r2, [pc, #156]	@ (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b6c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006b70:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d015      	beq.n	8006baa <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006b7e:	4b22      	ldr	r3, [pc, #136]	@ (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b84:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b8c:	491e      	ldr	r1, [pc, #120]	@ (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b98:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006b9c:	d105      	bne.n	8006baa <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006b9e:	4b1a      	ldr	r3, [pc, #104]	@ (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ba0:	68db      	ldr	r3, [r3, #12]
 8006ba2:	4a19      	ldr	r2, [pc, #100]	@ (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ba4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006ba8:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d015      	beq.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006bb6:	4b14      	ldr	r3, [pc, #80]	@ (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bbc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bc4:	4910      	ldr	r1, [pc, #64]	@ (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bd0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006bd4:	d105      	bne.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006bd6:	4b0c      	ldr	r3, [pc, #48]	@ (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bd8:	68db      	ldr	r3, [r3, #12]
 8006bda:	4a0b      	ldr	r2, [pc, #44]	@ (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bdc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006be0:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d018      	beq.n	8006c20 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006bee:	4b06      	ldr	r3, [pc, #24]	@ (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bf4:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bfc:	4902      	ldr	r1, [pc, #8]	@ (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	e001      	b.n	8006c0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8006c08:	40021000 	.word	0x40021000
 8006c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c0e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006c12:	d105      	bne.n	8006c20 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006c14:	4b21      	ldr	r3, [pc, #132]	@ (8006c9c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006c16:	68db      	ldr	r3, [r3, #12]
 8006c18:	4a20      	ldr	r2, [pc, #128]	@ (8006c9c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006c1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c1e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d015      	beq.n	8006c58 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006c2c:	4b1b      	ldr	r3, [pc, #108]	@ (8006c9c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c32:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c3a:	4918      	ldr	r1, [pc, #96]	@ (8006c9c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c4a:	d105      	bne.n	8006c58 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006c4c:	4b13      	ldr	r3, [pc, #76]	@ (8006c9c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006c4e:	68db      	ldr	r3, [r3, #12]
 8006c50:	4a12      	ldr	r2, [pc, #72]	@ (8006c9c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006c52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c56:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d015      	beq.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006c64:	4b0d      	ldr	r3, [pc, #52]	@ (8006c9c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006c66:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006c6a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c72:	490a      	ldr	r1, [pc, #40]	@ (8006c9c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006c74:	4313      	orrs	r3, r2
 8006c76:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c7e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006c82:	d105      	bne.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006c84:	4b05      	ldr	r3, [pc, #20]	@ (8006c9c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006c86:	68db      	ldr	r3, [r3, #12]
 8006c88:	4a04      	ldr	r2, [pc, #16]	@ (8006c9c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006c8a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006c8e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006c90:	7cbb      	ldrb	r3, [r7, #18]
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	3718      	adds	r7, #24
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}
 8006c9a:	bf00      	nop
 8006c9c:	40021000 	.word	0x40021000

08006ca0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b084      	sub	sp, #16
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d101      	bne.n	8006cb2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006cae:	2301      	movs	r3, #1
 8006cb0:	e09d      	b.n	8006dee <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d108      	bne.n	8006ccc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006cc2:	d009      	beq.n	8006cd8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	61da      	str	r2, [r3, #28]
 8006cca:	e005      	b.n	8006cd8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006ce4:	b2db      	uxtb	r3, r3
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d106      	bne.n	8006cf8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2200      	movs	r2, #0
 8006cee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f7fc fa56 	bl	80031a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2202      	movs	r2, #2
 8006cfc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	681a      	ldr	r2, [r3, #0]
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006d0e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	68db      	ldr	r3, [r3, #12]
 8006d14:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006d18:	d902      	bls.n	8006d20 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	60fb      	str	r3, [r7, #12]
 8006d1e:	e002      	b.n	8006d26 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006d20:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006d24:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	68db      	ldr	r3, [r3, #12]
 8006d2a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8006d2e:	d007      	beq.n	8006d40 <HAL_SPI_Init+0xa0>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	68db      	ldr	r3, [r3, #12]
 8006d34:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006d38:	d002      	beq.n	8006d40 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	689b      	ldr	r3, [r3, #8]
 8006d4c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006d50:	431a      	orrs	r2, r3
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	691b      	ldr	r3, [r3, #16]
 8006d56:	f003 0302 	and.w	r3, r3, #2
 8006d5a:	431a      	orrs	r2, r3
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	695b      	ldr	r3, [r3, #20]
 8006d60:	f003 0301 	and.w	r3, r3, #1
 8006d64:	431a      	orrs	r2, r3
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	699b      	ldr	r3, [r3, #24]
 8006d6a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006d6e:	431a      	orrs	r2, r3
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	69db      	ldr	r3, [r3, #28]
 8006d74:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006d78:	431a      	orrs	r2, r3
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6a1b      	ldr	r3, [r3, #32]
 8006d7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d82:	ea42 0103 	orr.w	r1, r2, r3
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d8a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	430a      	orrs	r2, r1
 8006d94:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	699b      	ldr	r3, [r3, #24]
 8006d9a:	0c1b      	lsrs	r3, r3, #16
 8006d9c:	f003 0204 	and.w	r2, r3, #4
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006da4:	f003 0310 	and.w	r3, r3, #16
 8006da8:	431a      	orrs	r2, r3
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006dae:	f003 0308 	and.w	r3, r3, #8
 8006db2:	431a      	orrs	r2, r3
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	68db      	ldr	r3, [r3, #12]
 8006db8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006dbc:	ea42 0103 	orr.w	r1, r2, r3
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	430a      	orrs	r2, r1
 8006dcc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	69da      	ldr	r2, [r3, #28]
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006ddc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2200      	movs	r2, #0
 8006de2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2201      	movs	r2, #1
 8006de8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8006dec:	2300      	movs	r3, #0
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	3710      	adds	r7, #16
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}

08006df6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006df6:	b580      	push	{r7, lr}
 8006df8:	b088      	sub	sp, #32
 8006dfa:	af00      	add	r7, sp, #0
 8006dfc:	60f8      	str	r0, [r7, #12]
 8006dfe:	60b9      	str	r1, [r7, #8]
 8006e00:	603b      	str	r3, [r7, #0]
 8006e02:	4613      	mov	r3, r2
 8006e04:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006e06:	f7fc fca9 	bl	800375c <HAL_GetTick>
 8006e0a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8006e0c:	88fb      	ldrh	r3, [r7, #6]
 8006e0e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006e16:	b2db      	uxtb	r3, r3
 8006e18:	2b01      	cmp	r3, #1
 8006e1a:	d001      	beq.n	8006e20 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8006e1c:	2302      	movs	r3, #2
 8006e1e:	e15c      	b.n	80070da <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d002      	beq.n	8006e2c <HAL_SPI_Transmit+0x36>
 8006e26:	88fb      	ldrh	r3, [r7, #6]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d101      	bne.n	8006e30 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	e154      	b.n	80070da <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006e36:	2b01      	cmp	r3, #1
 8006e38:	d101      	bne.n	8006e3e <HAL_SPI_Transmit+0x48>
 8006e3a:	2302      	movs	r3, #2
 8006e3c:	e14d      	b.n	80070da <HAL_SPI_Transmit+0x2e4>
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	2201      	movs	r2, #1
 8006e42:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	2203      	movs	r2, #3
 8006e4a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	2200      	movs	r2, #0
 8006e52:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	68ba      	ldr	r2, [r7, #8]
 8006e58:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	88fa      	ldrh	r2, [r7, #6]
 8006e5e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	88fa      	ldrh	r2, [r7, #6]
 8006e64:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	2200      	movs	r2, #0
 8006e78:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	2200      	movs	r2, #0
 8006e86:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	689b      	ldr	r3, [r3, #8]
 8006e8c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006e90:	d10f      	bne.n	8006eb2 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	681a      	ldr	r2, [r3, #0]
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006ea0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	681a      	ldr	r2, [r3, #0]
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006eb0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ebc:	2b40      	cmp	r3, #64	@ 0x40
 8006ebe:	d007      	beq.n	8006ed0 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	681a      	ldr	r2, [r3, #0]
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006ece:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	68db      	ldr	r3, [r3, #12]
 8006ed4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006ed8:	d952      	bls.n	8006f80 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	685b      	ldr	r3, [r3, #4]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d002      	beq.n	8006ee8 <HAL_SPI_Transmit+0xf2>
 8006ee2:	8b7b      	ldrh	r3, [r7, #26]
 8006ee4:	2b01      	cmp	r3, #1
 8006ee6:	d145      	bne.n	8006f74 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006eec:	881a      	ldrh	r2, [r3, #0]
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ef8:	1c9a      	adds	r2, r3, #2
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f02:	b29b      	uxth	r3, r3
 8006f04:	3b01      	subs	r3, #1
 8006f06:	b29a      	uxth	r2, r3
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006f0c:	e032      	b.n	8006f74 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	689b      	ldr	r3, [r3, #8]
 8006f14:	f003 0302 	and.w	r3, r3, #2
 8006f18:	2b02      	cmp	r3, #2
 8006f1a:	d112      	bne.n	8006f42 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f20:	881a      	ldrh	r2, [r3, #0]
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f2c:	1c9a      	adds	r2, r3, #2
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f36:	b29b      	uxth	r3, r3
 8006f38:	3b01      	subs	r3, #1
 8006f3a:	b29a      	uxth	r2, r3
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006f40:	e018      	b.n	8006f74 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006f42:	f7fc fc0b 	bl	800375c <HAL_GetTick>
 8006f46:	4602      	mov	r2, r0
 8006f48:	69fb      	ldr	r3, [r7, #28]
 8006f4a:	1ad3      	subs	r3, r2, r3
 8006f4c:	683a      	ldr	r2, [r7, #0]
 8006f4e:	429a      	cmp	r2, r3
 8006f50:	d803      	bhi.n	8006f5a <HAL_SPI_Transmit+0x164>
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006f58:	d102      	bne.n	8006f60 <HAL_SPI_Transmit+0x16a>
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d109      	bne.n	8006f74 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	2201      	movs	r2, #1
 8006f64:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8006f70:	2303      	movs	r3, #3
 8006f72:	e0b2      	b.n	80070da <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f78:	b29b      	uxth	r3, r3
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d1c7      	bne.n	8006f0e <HAL_SPI_Transmit+0x118>
 8006f7e:	e083      	b.n	8007088 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	685b      	ldr	r3, [r3, #4]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d002      	beq.n	8006f8e <HAL_SPI_Transmit+0x198>
 8006f88:	8b7b      	ldrh	r3, [r7, #26]
 8006f8a:	2b01      	cmp	r3, #1
 8006f8c:	d177      	bne.n	800707e <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f92:	b29b      	uxth	r3, r3
 8006f94:	2b01      	cmp	r3, #1
 8006f96:	d912      	bls.n	8006fbe <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f9c:	881a      	ldrh	r2, [r3, #0]
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fa8:	1c9a      	adds	r2, r3, #2
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006fb2:	b29b      	uxth	r3, r3
 8006fb4:	3b02      	subs	r3, #2
 8006fb6:	b29a      	uxth	r2, r3
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006fbc:	e05f      	b.n	800707e <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	330c      	adds	r3, #12
 8006fc8:	7812      	ldrb	r2, [r2, #0]
 8006fca:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fd0:	1c5a      	adds	r2, r3, #1
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006fda:	b29b      	uxth	r3, r3
 8006fdc:	3b01      	subs	r3, #1
 8006fde:	b29a      	uxth	r2, r3
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006fe4:	e04b      	b.n	800707e <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	689b      	ldr	r3, [r3, #8]
 8006fec:	f003 0302 	and.w	r3, r3, #2
 8006ff0:	2b02      	cmp	r3, #2
 8006ff2:	d12b      	bne.n	800704c <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ff8:	b29b      	uxth	r3, r3
 8006ffa:	2b01      	cmp	r3, #1
 8006ffc:	d912      	bls.n	8007024 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007002:	881a      	ldrh	r2, [r3, #0]
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800700e:	1c9a      	adds	r2, r3, #2
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007018:	b29b      	uxth	r3, r3
 800701a:	3b02      	subs	r3, #2
 800701c:	b29a      	uxth	r2, r3
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007022:	e02c      	b.n	800707e <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	330c      	adds	r3, #12
 800702e:	7812      	ldrb	r2, [r2, #0]
 8007030:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007036:	1c5a      	adds	r2, r3, #1
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007040:	b29b      	uxth	r3, r3
 8007042:	3b01      	subs	r3, #1
 8007044:	b29a      	uxth	r2, r3
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800704a:	e018      	b.n	800707e <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800704c:	f7fc fb86 	bl	800375c <HAL_GetTick>
 8007050:	4602      	mov	r2, r0
 8007052:	69fb      	ldr	r3, [r7, #28]
 8007054:	1ad3      	subs	r3, r2, r3
 8007056:	683a      	ldr	r2, [r7, #0]
 8007058:	429a      	cmp	r2, r3
 800705a:	d803      	bhi.n	8007064 <HAL_SPI_Transmit+0x26e>
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007062:	d102      	bne.n	800706a <HAL_SPI_Transmit+0x274>
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d109      	bne.n	800707e <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	2201      	movs	r2, #1
 800706e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	2200      	movs	r2, #0
 8007076:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800707a:	2303      	movs	r3, #3
 800707c:	e02d      	b.n	80070da <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007082:	b29b      	uxth	r3, r3
 8007084:	2b00      	cmp	r3, #0
 8007086:	d1ae      	bne.n	8006fe6 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007088:	69fa      	ldr	r2, [r7, #28]
 800708a:	6839      	ldr	r1, [r7, #0]
 800708c:	68f8      	ldr	r0, [r7, #12]
 800708e:	f000 fb65 	bl	800775c <SPI_EndRxTxTransaction>
 8007092:	4603      	mov	r3, r0
 8007094:	2b00      	cmp	r3, #0
 8007096:	d002      	beq.n	800709e <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	2220      	movs	r2, #32
 800709c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	689b      	ldr	r3, [r3, #8]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d10a      	bne.n	80070bc <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80070a6:	2300      	movs	r3, #0
 80070a8:	617b      	str	r3, [r7, #20]
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	68db      	ldr	r3, [r3, #12]
 80070b0:	617b      	str	r3, [r7, #20]
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	689b      	ldr	r3, [r3, #8]
 80070b8:	617b      	str	r3, [r7, #20]
 80070ba:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	2201      	movs	r2, #1
 80070c0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	2200      	movs	r2, #0
 80070c8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d001      	beq.n	80070d8 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 80070d4:	2301      	movs	r3, #1
 80070d6:	e000      	b.n	80070da <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 80070d8:	2300      	movs	r3, #0
  }
}
 80070da:	4618      	mov	r0, r3
 80070dc:	3720      	adds	r7, #32
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd80      	pop	{r7, pc}

080070e2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80070e2:	b580      	push	{r7, lr}
 80070e4:	b08a      	sub	sp, #40	@ 0x28
 80070e6:	af00      	add	r7, sp, #0
 80070e8:	60f8      	str	r0, [r7, #12]
 80070ea:	60b9      	str	r1, [r7, #8]
 80070ec:	607a      	str	r2, [r7, #4]
 80070ee:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80070f0:	2301      	movs	r3, #1
 80070f2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80070f4:	f7fc fb32 	bl	800375c <HAL_GetTick>
 80070f8:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007100:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	685b      	ldr	r3, [r3, #4]
 8007106:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8007108:	887b      	ldrh	r3, [r7, #2]
 800710a:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 800710c:	887b      	ldrh	r3, [r7, #2]
 800710e:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007110:	7ffb      	ldrb	r3, [r7, #31]
 8007112:	2b01      	cmp	r3, #1
 8007114:	d00c      	beq.n	8007130 <HAL_SPI_TransmitReceive+0x4e>
 8007116:	69bb      	ldr	r3, [r7, #24]
 8007118:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800711c:	d106      	bne.n	800712c <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	689b      	ldr	r3, [r3, #8]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d102      	bne.n	800712c <HAL_SPI_TransmitReceive+0x4a>
 8007126:	7ffb      	ldrb	r3, [r7, #31]
 8007128:	2b04      	cmp	r3, #4
 800712a:	d001      	beq.n	8007130 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800712c:	2302      	movs	r3, #2
 800712e:	e1f3      	b.n	8007518 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d005      	beq.n	8007142 <HAL_SPI_TransmitReceive+0x60>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d002      	beq.n	8007142 <HAL_SPI_TransmitReceive+0x60>
 800713c:	887b      	ldrh	r3, [r7, #2]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d101      	bne.n	8007146 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8007142:	2301      	movs	r3, #1
 8007144:	e1e8      	b.n	8007518 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800714c:	2b01      	cmp	r3, #1
 800714e:	d101      	bne.n	8007154 <HAL_SPI_TransmitReceive+0x72>
 8007150:	2302      	movs	r3, #2
 8007152:	e1e1      	b.n	8007518 <HAL_SPI_TransmitReceive+0x436>
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	2201      	movs	r2, #1
 8007158:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007162:	b2db      	uxtb	r3, r3
 8007164:	2b04      	cmp	r3, #4
 8007166:	d003      	beq.n	8007170 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	2205      	movs	r2, #5
 800716c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	2200      	movs	r2, #0
 8007174:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	687a      	ldr	r2, [r7, #4]
 800717a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	887a      	ldrh	r2, [r7, #2]
 8007180:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	887a      	ldrh	r2, [r7, #2]
 8007188:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	68ba      	ldr	r2, [r7, #8]
 8007190:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	887a      	ldrh	r2, [r7, #2]
 8007196:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	887a      	ldrh	r2, [r7, #2]
 800719c:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	2200      	movs	r2, #0
 80071a2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	2200      	movs	r2, #0
 80071a8:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	68db      	ldr	r3, [r3, #12]
 80071ae:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80071b2:	d802      	bhi.n	80071ba <HAL_SPI_TransmitReceive+0xd8>
 80071b4:	8abb      	ldrh	r3, [r7, #20]
 80071b6:	2b01      	cmp	r3, #1
 80071b8:	d908      	bls.n	80071cc <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	685a      	ldr	r2, [r3, #4]
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80071c8:	605a      	str	r2, [r3, #4]
 80071ca:	e007      	b.n	80071dc <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	685a      	ldr	r2, [r3, #4]
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80071da:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071e6:	2b40      	cmp	r3, #64	@ 0x40
 80071e8:	d007      	beq.n	80071fa <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	681a      	ldr	r2, [r3, #0]
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80071f8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	68db      	ldr	r3, [r3, #12]
 80071fe:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007202:	f240 8083 	bls.w	800730c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	685b      	ldr	r3, [r3, #4]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d002      	beq.n	8007214 <HAL_SPI_TransmitReceive+0x132>
 800720e:	8afb      	ldrh	r3, [r7, #22]
 8007210:	2b01      	cmp	r3, #1
 8007212:	d16f      	bne.n	80072f4 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007218:	881a      	ldrh	r2, [r3, #0]
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007224:	1c9a      	adds	r2, r3, #2
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800722e:	b29b      	uxth	r3, r3
 8007230:	3b01      	subs	r3, #1
 8007232:	b29a      	uxth	r2, r3
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007238:	e05c      	b.n	80072f4 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	689b      	ldr	r3, [r3, #8]
 8007240:	f003 0302 	and.w	r3, r3, #2
 8007244:	2b02      	cmp	r3, #2
 8007246:	d11b      	bne.n	8007280 <HAL_SPI_TransmitReceive+0x19e>
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800724c:	b29b      	uxth	r3, r3
 800724e:	2b00      	cmp	r3, #0
 8007250:	d016      	beq.n	8007280 <HAL_SPI_TransmitReceive+0x19e>
 8007252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007254:	2b01      	cmp	r3, #1
 8007256:	d113      	bne.n	8007280 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800725c:	881a      	ldrh	r2, [r3, #0]
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007268:	1c9a      	adds	r2, r3, #2
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007272:	b29b      	uxth	r3, r3
 8007274:	3b01      	subs	r3, #1
 8007276:	b29a      	uxth	r2, r3
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800727c:	2300      	movs	r3, #0
 800727e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	689b      	ldr	r3, [r3, #8]
 8007286:	f003 0301 	and.w	r3, r3, #1
 800728a:	2b01      	cmp	r3, #1
 800728c:	d11c      	bne.n	80072c8 <HAL_SPI_TransmitReceive+0x1e6>
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007294:	b29b      	uxth	r3, r3
 8007296:	2b00      	cmp	r3, #0
 8007298:	d016      	beq.n	80072c8 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	68da      	ldr	r2, [r3, #12]
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072a4:	b292      	uxth	r2, r2
 80072a6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072ac:	1c9a      	adds	r2, r3, #2
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80072b8:	b29b      	uxth	r3, r3
 80072ba:	3b01      	subs	r3, #1
 80072bc:	b29a      	uxth	r2, r3
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80072c4:	2301      	movs	r3, #1
 80072c6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80072c8:	f7fc fa48 	bl	800375c <HAL_GetTick>
 80072cc:	4602      	mov	r2, r0
 80072ce:	6a3b      	ldr	r3, [r7, #32]
 80072d0:	1ad3      	subs	r3, r2, r3
 80072d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80072d4:	429a      	cmp	r2, r3
 80072d6:	d80d      	bhi.n	80072f4 <HAL_SPI_TransmitReceive+0x212>
 80072d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072da:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80072de:	d009      	beq.n	80072f4 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	2201      	movs	r2, #1
 80072e4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	2200      	movs	r2, #0
 80072ec:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80072f0:	2303      	movs	r3, #3
 80072f2:	e111      	b.n	8007518 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80072f8:	b29b      	uxth	r3, r3
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d19d      	bne.n	800723a <HAL_SPI_TransmitReceive+0x158>
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007304:	b29b      	uxth	r3, r3
 8007306:	2b00      	cmp	r3, #0
 8007308:	d197      	bne.n	800723a <HAL_SPI_TransmitReceive+0x158>
 800730a:	e0e5      	b.n	80074d8 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	685b      	ldr	r3, [r3, #4]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d003      	beq.n	800731c <HAL_SPI_TransmitReceive+0x23a>
 8007314:	8afb      	ldrh	r3, [r7, #22]
 8007316:	2b01      	cmp	r3, #1
 8007318:	f040 80d1 	bne.w	80074be <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007320:	b29b      	uxth	r3, r3
 8007322:	2b01      	cmp	r3, #1
 8007324:	d912      	bls.n	800734c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800732a:	881a      	ldrh	r2, [r3, #0]
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007336:	1c9a      	adds	r2, r3, #2
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007340:	b29b      	uxth	r3, r3
 8007342:	3b02      	subs	r3, #2
 8007344:	b29a      	uxth	r2, r3
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800734a:	e0b8      	b.n	80074be <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	330c      	adds	r3, #12
 8007356:	7812      	ldrb	r2, [r2, #0]
 8007358:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800735e:	1c5a      	adds	r2, r3, #1
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007368:	b29b      	uxth	r3, r3
 800736a:	3b01      	subs	r3, #1
 800736c:	b29a      	uxth	r2, r3
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007372:	e0a4      	b.n	80074be <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	689b      	ldr	r3, [r3, #8]
 800737a:	f003 0302 	and.w	r3, r3, #2
 800737e:	2b02      	cmp	r3, #2
 8007380:	d134      	bne.n	80073ec <HAL_SPI_TransmitReceive+0x30a>
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007386:	b29b      	uxth	r3, r3
 8007388:	2b00      	cmp	r3, #0
 800738a:	d02f      	beq.n	80073ec <HAL_SPI_TransmitReceive+0x30a>
 800738c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800738e:	2b01      	cmp	r3, #1
 8007390:	d12c      	bne.n	80073ec <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007396:	b29b      	uxth	r3, r3
 8007398:	2b01      	cmp	r3, #1
 800739a:	d912      	bls.n	80073c2 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073a0:	881a      	ldrh	r2, [r3, #0]
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073ac:	1c9a      	adds	r2, r3, #2
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80073b6:	b29b      	uxth	r3, r3
 80073b8:	3b02      	subs	r3, #2
 80073ba:	b29a      	uxth	r2, r3
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80073c0:	e012      	b.n	80073e8 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	330c      	adds	r3, #12
 80073cc:	7812      	ldrb	r2, [r2, #0]
 80073ce:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073d4:	1c5a      	adds	r2, r3, #1
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80073de:	b29b      	uxth	r3, r3
 80073e0:	3b01      	subs	r3, #1
 80073e2:	b29a      	uxth	r2, r3
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80073e8:	2300      	movs	r3, #0
 80073ea:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	689b      	ldr	r3, [r3, #8]
 80073f2:	f003 0301 	and.w	r3, r3, #1
 80073f6:	2b01      	cmp	r3, #1
 80073f8:	d148      	bne.n	800748c <HAL_SPI_TransmitReceive+0x3aa>
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007400:	b29b      	uxth	r3, r3
 8007402:	2b00      	cmp	r3, #0
 8007404:	d042      	beq.n	800748c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800740c:	b29b      	uxth	r3, r3
 800740e:	2b01      	cmp	r3, #1
 8007410:	d923      	bls.n	800745a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	68da      	ldr	r2, [r3, #12]
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800741c:	b292      	uxth	r2, r2
 800741e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007424:	1c9a      	adds	r2, r3, #2
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007430:	b29b      	uxth	r3, r3
 8007432:	3b02      	subs	r3, #2
 8007434:	b29a      	uxth	r2, r3
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007442:	b29b      	uxth	r3, r3
 8007444:	2b01      	cmp	r3, #1
 8007446:	d81f      	bhi.n	8007488 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	685a      	ldr	r2, [r3, #4]
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007456:	605a      	str	r2, [r3, #4]
 8007458:	e016      	b.n	8007488 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f103 020c 	add.w	r2, r3, #12
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007466:	7812      	ldrb	r2, [r2, #0]
 8007468:	b2d2      	uxtb	r2, r2
 800746a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007470:	1c5a      	adds	r2, r3, #1
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800747c:	b29b      	uxth	r3, r3
 800747e:	3b01      	subs	r3, #1
 8007480:	b29a      	uxth	r2, r3
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007488:	2301      	movs	r3, #1
 800748a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800748c:	f7fc f966 	bl	800375c <HAL_GetTick>
 8007490:	4602      	mov	r2, r0
 8007492:	6a3b      	ldr	r3, [r7, #32]
 8007494:	1ad3      	subs	r3, r2, r3
 8007496:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007498:	429a      	cmp	r2, r3
 800749a:	d803      	bhi.n	80074a4 <HAL_SPI_TransmitReceive+0x3c2>
 800749c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800749e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80074a2:	d102      	bne.n	80074aa <HAL_SPI_TransmitReceive+0x3c8>
 80074a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d109      	bne.n	80074be <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	2201      	movs	r2, #1
 80074ae:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	2200      	movs	r2, #0
 80074b6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80074ba:	2303      	movs	r3, #3
 80074bc:	e02c      	b.n	8007518 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80074c2:	b29b      	uxth	r3, r3
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	f47f af55 	bne.w	8007374 <HAL_SPI_TransmitReceive+0x292>
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80074d0:	b29b      	uxth	r3, r3
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	f47f af4e 	bne.w	8007374 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80074d8:	6a3a      	ldr	r2, [r7, #32]
 80074da:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80074dc:	68f8      	ldr	r0, [r7, #12]
 80074de:	f000 f93d 	bl	800775c <SPI_EndRxTxTransaction>
 80074e2:	4603      	mov	r3, r0
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d008      	beq.n	80074fa <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	2220      	movs	r2, #32
 80074ec:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	2200      	movs	r2, #0
 80074f2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 80074f6:	2301      	movs	r3, #1
 80074f8:	e00e      	b.n	8007518 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	2201      	movs	r2, #1
 80074fe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	2200      	movs	r2, #0
 8007506:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800750e:	2b00      	cmp	r3, #0
 8007510:	d001      	beq.n	8007516 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8007512:	2301      	movs	r3, #1
 8007514:	e000      	b.n	8007518 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8007516:	2300      	movs	r3, #0
  }
}
 8007518:	4618      	mov	r0, r3
 800751a:	3728      	adds	r7, #40	@ 0x28
 800751c:	46bd      	mov	sp, r7
 800751e:	bd80      	pop	{r7, pc}

08007520 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b088      	sub	sp, #32
 8007524:	af00      	add	r7, sp, #0
 8007526:	60f8      	str	r0, [r7, #12]
 8007528:	60b9      	str	r1, [r7, #8]
 800752a:	603b      	str	r3, [r7, #0]
 800752c:	4613      	mov	r3, r2
 800752e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007530:	f7fc f914 	bl	800375c <HAL_GetTick>
 8007534:	4602      	mov	r2, r0
 8007536:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007538:	1a9b      	subs	r3, r3, r2
 800753a:	683a      	ldr	r2, [r7, #0]
 800753c:	4413      	add	r3, r2
 800753e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007540:	f7fc f90c 	bl	800375c <HAL_GetTick>
 8007544:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007546:	4b39      	ldr	r3, [pc, #228]	@ (800762c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	015b      	lsls	r3, r3, #5
 800754c:	0d1b      	lsrs	r3, r3, #20
 800754e:	69fa      	ldr	r2, [r7, #28]
 8007550:	fb02 f303 	mul.w	r3, r2, r3
 8007554:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007556:	e054      	b.n	8007602 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800755e:	d050      	beq.n	8007602 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007560:	f7fc f8fc 	bl	800375c <HAL_GetTick>
 8007564:	4602      	mov	r2, r0
 8007566:	69bb      	ldr	r3, [r7, #24]
 8007568:	1ad3      	subs	r3, r2, r3
 800756a:	69fa      	ldr	r2, [r7, #28]
 800756c:	429a      	cmp	r2, r3
 800756e:	d902      	bls.n	8007576 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007570:	69fb      	ldr	r3, [r7, #28]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d13d      	bne.n	80075f2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	685a      	ldr	r2, [r3, #4]
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007584:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	685b      	ldr	r3, [r3, #4]
 800758a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800758e:	d111      	bne.n	80075b4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	689b      	ldr	r3, [r3, #8]
 8007594:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007598:	d004      	beq.n	80075a4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	689b      	ldr	r3, [r3, #8]
 800759e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80075a2:	d107      	bne.n	80075b4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	681a      	ldr	r2, [r3, #0]
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80075b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80075bc:	d10f      	bne.n	80075de <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	681a      	ldr	r2, [r3, #0]
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80075cc:	601a      	str	r2, [r3, #0]
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	681a      	ldr	r2, [r3, #0]
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80075dc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	2201      	movs	r2, #1
 80075e2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	2200      	movs	r2, #0
 80075ea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80075ee:	2303      	movs	r3, #3
 80075f0:	e017      	b.n	8007622 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80075f2:	697b      	ldr	r3, [r7, #20]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d101      	bne.n	80075fc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80075f8:	2300      	movs	r3, #0
 80075fa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	3b01      	subs	r3, #1
 8007600:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	689a      	ldr	r2, [r3, #8]
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	4013      	ands	r3, r2
 800760c:	68ba      	ldr	r2, [r7, #8]
 800760e:	429a      	cmp	r2, r3
 8007610:	bf0c      	ite	eq
 8007612:	2301      	moveq	r3, #1
 8007614:	2300      	movne	r3, #0
 8007616:	b2db      	uxtb	r3, r3
 8007618:	461a      	mov	r2, r3
 800761a:	79fb      	ldrb	r3, [r7, #7]
 800761c:	429a      	cmp	r2, r3
 800761e:	d19b      	bne.n	8007558 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007620:	2300      	movs	r3, #0
}
 8007622:	4618      	mov	r0, r3
 8007624:	3720      	adds	r7, #32
 8007626:	46bd      	mov	sp, r7
 8007628:	bd80      	pop	{r7, pc}
 800762a:	bf00      	nop
 800762c:	20000020 	.word	0x20000020

08007630 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b08a      	sub	sp, #40	@ 0x28
 8007634:	af00      	add	r7, sp, #0
 8007636:	60f8      	str	r0, [r7, #12]
 8007638:	60b9      	str	r1, [r7, #8]
 800763a:	607a      	str	r2, [r7, #4]
 800763c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800763e:	2300      	movs	r3, #0
 8007640:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007642:	f7fc f88b 	bl	800375c <HAL_GetTick>
 8007646:	4602      	mov	r2, r0
 8007648:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800764a:	1a9b      	subs	r3, r3, r2
 800764c:	683a      	ldr	r2, [r7, #0]
 800764e:	4413      	add	r3, r2
 8007650:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8007652:	f7fc f883 	bl	800375c <HAL_GetTick>
 8007656:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	330c      	adds	r3, #12
 800765e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007660:	4b3d      	ldr	r3, [pc, #244]	@ (8007758 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007662:	681a      	ldr	r2, [r3, #0]
 8007664:	4613      	mov	r3, r2
 8007666:	009b      	lsls	r3, r3, #2
 8007668:	4413      	add	r3, r2
 800766a:	00da      	lsls	r2, r3, #3
 800766c:	1ad3      	subs	r3, r2, r3
 800766e:	0d1b      	lsrs	r3, r3, #20
 8007670:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007672:	fb02 f303 	mul.w	r3, r2, r3
 8007676:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007678:	e060      	b.n	800773c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007680:	d107      	bne.n	8007692 <SPI_WaitFifoStateUntilTimeout+0x62>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d104      	bne.n	8007692 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007688:	69fb      	ldr	r3, [r7, #28]
 800768a:	781b      	ldrb	r3, [r3, #0]
 800768c:	b2db      	uxtb	r3, r3
 800768e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007690:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007698:	d050      	beq.n	800773c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800769a:	f7fc f85f 	bl	800375c <HAL_GetTick>
 800769e:	4602      	mov	r2, r0
 80076a0:	6a3b      	ldr	r3, [r7, #32]
 80076a2:	1ad3      	subs	r3, r2, r3
 80076a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80076a6:	429a      	cmp	r2, r3
 80076a8:	d902      	bls.n	80076b0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80076aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d13d      	bne.n	800772c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	685a      	ldr	r2, [r3, #4]
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80076be:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	685b      	ldr	r3, [r3, #4]
 80076c4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80076c8:	d111      	bne.n	80076ee <SPI_WaitFifoStateUntilTimeout+0xbe>
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	689b      	ldr	r3, [r3, #8]
 80076ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80076d2:	d004      	beq.n	80076de <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	689b      	ldr	r3, [r3, #8]
 80076d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80076dc:	d107      	bne.n	80076ee <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	681a      	ldr	r2, [r3, #0]
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80076ec:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80076f6:	d10f      	bne.n	8007718 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	681a      	ldr	r2, [r3, #0]
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007706:	601a      	str	r2, [r3, #0]
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	681a      	ldr	r2, [r3, #0]
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007716:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	2201      	movs	r2, #1
 800771c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	2200      	movs	r2, #0
 8007724:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007728:	2303      	movs	r3, #3
 800772a:	e010      	b.n	800774e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800772c:	69bb      	ldr	r3, [r7, #24]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d101      	bne.n	8007736 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8007732:	2300      	movs	r3, #0
 8007734:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8007736:	69bb      	ldr	r3, [r7, #24]
 8007738:	3b01      	subs	r3, #1
 800773a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	689a      	ldr	r2, [r3, #8]
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	4013      	ands	r3, r2
 8007746:	687a      	ldr	r2, [r7, #4]
 8007748:	429a      	cmp	r2, r3
 800774a:	d196      	bne.n	800767a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800774c:	2300      	movs	r3, #0
}
 800774e:	4618      	mov	r0, r3
 8007750:	3728      	adds	r7, #40	@ 0x28
 8007752:	46bd      	mov	sp, r7
 8007754:	bd80      	pop	{r7, pc}
 8007756:	bf00      	nop
 8007758:	20000020 	.word	0x20000020

0800775c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b086      	sub	sp, #24
 8007760:	af02      	add	r7, sp, #8
 8007762:	60f8      	str	r0, [r7, #12]
 8007764:	60b9      	str	r1, [r7, #8]
 8007766:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	9300      	str	r3, [sp, #0]
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	2200      	movs	r2, #0
 8007770:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8007774:	68f8      	ldr	r0, [r7, #12]
 8007776:	f7ff ff5b 	bl	8007630 <SPI_WaitFifoStateUntilTimeout>
 800777a:	4603      	mov	r3, r0
 800777c:	2b00      	cmp	r3, #0
 800777e:	d007      	beq.n	8007790 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007784:	f043 0220 	orr.w	r2, r3, #32
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800778c:	2303      	movs	r3, #3
 800778e:	e027      	b.n	80077e0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	9300      	str	r3, [sp, #0]
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	2200      	movs	r2, #0
 8007798:	2180      	movs	r1, #128	@ 0x80
 800779a:	68f8      	ldr	r0, [r7, #12]
 800779c:	f7ff fec0 	bl	8007520 <SPI_WaitFlagStateUntilTimeout>
 80077a0:	4603      	mov	r3, r0
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d007      	beq.n	80077b6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80077aa:	f043 0220 	orr.w	r2, r3, #32
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80077b2:	2303      	movs	r3, #3
 80077b4:	e014      	b.n	80077e0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	9300      	str	r3, [sp, #0]
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	2200      	movs	r2, #0
 80077be:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80077c2:	68f8      	ldr	r0, [r7, #12]
 80077c4:	f7ff ff34 	bl	8007630 <SPI_WaitFifoStateUntilTimeout>
 80077c8:	4603      	mov	r3, r0
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d007      	beq.n	80077de <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80077d2:	f043 0220 	orr.w	r2, r3, #32
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80077da:	2303      	movs	r3, #3
 80077dc:	e000      	b.n	80077e0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80077de:	2300      	movs	r3, #0
}
 80077e0:	4618      	mov	r0, r3
 80077e2:	3710      	adds	r7, #16
 80077e4:	46bd      	mov	sp, r7
 80077e6:	bd80      	pop	{r7, pc}

080077e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b082      	sub	sp, #8
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d101      	bne.n	80077fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80077f6:	2301      	movs	r3, #1
 80077f8:	e049      	b.n	800788e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007800:	b2db      	uxtb	r3, r3
 8007802:	2b00      	cmp	r3, #0
 8007804:	d106      	bne.n	8007814 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2200      	movs	r2, #0
 800780a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f000 f841 	bl	8007896 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2202      	movs	r2, #2
 8007818:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681a      	ldr	r2, [r3, #0]
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	3304      	adds	r3, #4
 8007824:	4619      	mov	r1, r3
 8007826:	4610      	mov	r0, r2
 8007828:	f000 fa28 	bl	8007c7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2201      	movs	r2, #1
 8007830:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2201      	movs	r2, #1
 8007838:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2201      	movs	r2, #1
 8007840:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2201      	movs	r2, #1
 8007848:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2201      	movs	r2, #1
 8007850:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2201      	movs	r2, #1
 8007858:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2201      	movs	r2, #1
 8007860:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2201      	movs	r2, #1
 8007868:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2201      	movs	r2, #1
 8007870:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2201      	movs	r2, #1
 8007878:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2201      	movs	r2, #1
 8007880:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2201      	movs	r2, #1
 8007888:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800788c:	2300      	movs	r3, #0
}
 800788e:	4618      	mov	r0, r3
 8007890:	3708      	adds	r7, #8
 8007892:	46bd      	mov	sp, r7
 8007894:	bd80      	pop	{r7, pc}

08007896 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007896:	b480      	push	{r7}
 8007898:	b083      	sub	sp, #12
 800789a:	af00      	add	r7, sp, #0
 800789c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800789e:	bf00      	nop
 80078a0:	370c      	adds	r7, #12
 80078a2:	46bd      	mov	sp, r7
 80078a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a8:	4770      	bx	lr
	...

080078ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80078ac:	b480      	push	{r7}
 80078ae:	b085      	sub	sp, #20
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80078ba:	b2db      	uxtb	r3, r3
 80078bc:	2b01      	cmp	r3, #1
 80078be:	d001      	beq.n	80078c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80078c0:	2301      	movs	r3, #1
 80078c2:	e04f      	b.n	8007964 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2202      	movs	r2, #2
 80078c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	68da      	ldr	r2, [r3, #12]
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f042 0201 	orr.w	r2, r2, #1
 80078da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	4a23      	ldr	r2, [pc, #140]	@ (8007970 <HAL_TIM_Base_Start_IT+0xc4>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d01d      	beq.n	8007922 <HAL_TIM_Base_Start_IT+0x76>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80078ee:	d018      	beq.n	8007922 <HAL_TIM_Base_Start_IT+0x76>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4a1f      	ldr	r2, [pc, #124]	@ (8007974 <HAL_TIM_Base_Start_IT+0xc8>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d013      	beq.n	8007922 <HAL_TIM_Base_Start_IT+0x76>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	4a1e      	ldr	r2, [pc, #120]	@ (8007978 <HAL_TIM_Base_Start_IT+0xcc>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d00e      	beq.n	8007922 <HAL_TIM_Base_Start_IT+0x76>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	4a1c      	ldr	r2, [pc, #112]	@ (800797c <HAL_TIM_Base_Start_IT+0xd0>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d009      	beq.n	8007922 <HAL_TIM_Base_Start_IT+0x76>
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	4a1b      	ldr	r2, [pc, #108]	@ (8007980 <HAL_TIM_Base_Start_IT+0xd4>)
 8007914:	4293      	cmp	r3, r2
 8007916:	d004      	beq.n	8007922 <HAL_TIM_Base_Start_IT+0x76>
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	4a19      	ldr	r2, [pc, #100]	@ (8007984 <HAL_TIM_Base_Start_IT+0xd8>)
 800791e:	4293      	cmp	r3, r2
 8007920:	d115      	bne.n	800794e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	689a      	ldr	r2, [r3, #8]
 8007928:	4b17      	ldr	r3, [pc, #92]	@ (8007988 <HAL_TIM_Base_Start_IT+0xdc>)
 800792a:	4013      	ands	r3, r2
 800792c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	2b06      	cmp	r3, #6
 8007932:	d015      	beq.n	8007960 <HAL_TIM_Base_Start_IT+0xb4>
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800793a:	d011      	beq.n	8007960 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	681a      	ldr	r2, [r3, #0]
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f042 0201 	orr.w	r2, r2, #1
 800794a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800794c:	e008      	b.n	8007960 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	681a      	ldr	r2, [r3, #0]
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f042 0201 	orr.w	r2, r2, #1
 800795c:	601a      	str	r2, [r3, #0]
 800795e:	e000      	b.n	8007962 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007960:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007962:	2300      	movs	r3, #0
}
 8007964:	4618      	mov	r0, r3
 8007966:	3714      	adds	r7, #20
 8007968:	46bd      	mov	sp, r7
 800796a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796e:	4770      	bx	lr
 8007970:	40012c00 	.word	0x40012c00
 8007974:	40000400 	.word	0x40000400
 8007978:	40000800 	.word	0x40000800
 800797c:	40013400 	.word	0x40013400
 8007980:	40014000 	.word	0x40014000
 8007984:	40015000 	.word	0x40015000
 8007988:	00010007 	.word	0x00010007

0800798c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b084      	sub	sp, #16
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	68db      	ldr	r3, [r3, #12]
 800799a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	691b      	ldr	r3, [r3, #16]
 80079a2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	f003 0302 	and.w	r3, r3, #2
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d020      	beq.n	80079f0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	f003 0302 	and.w	r3, r3, #2
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d01b      	beq.n	80079f0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f06f 0202 	mvn.w	r2, #2
 80079c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2201      	movs	r2, #1
 80079c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	699b      	ldr	r3, [r3, #24]
 80079ce:	f003 0303 	and.w	r3, r3, #3
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d003      	beq.n	80079de <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f000 f931 	bl	8007c3e <HAL_TIM_IC_CaptureCallback>
 80079dc:	e005      	b.n	80079ea <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f000 f923 	bl	8007c2a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	f000 f934 	bl	8007c52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2200      	movs	r2, #0
 80079ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80079f0:	68bb      	ldr	r3, [r7, #8]
 80079f2:	f003 0304 	and.w	r3, r3, #4
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d020      	beq.n	8007a3c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	f003 0304 	and.w	r3, r3, #4
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d01b      	beq.n	8007a3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f06f 0204 	mvn.w	r2, #4
 8007a0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2202      	movs	r2, #2
 8007a12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	699b      	ldr	r3, [r3, #24]
 8007a1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d003      	beq.n	8007a2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	f000 f90b 	bl	8007c3e <HAL_TIM_IC_CaptureCallback>
 8007a28:	e005      	b.n	8007a36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	f000 f8fd 	bl	8007c2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f000 f90e 	bl	8007c52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2200      	movs	r2, #0
 8007a3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	f003 0308 	and.w	r3, r3, #8
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d020      	beq.n	8007a88 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	f003 0308 	and.w	r3, r3, #8
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d01b      	beq.n	8007a88 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f06f 0208 	mvn.w	r2, #8
 8007a58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2204      	movs	r2, #4
 8007a5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	69db      	ldr	r3, [r3, #28]
 8007a66:	f003 0303 	and.w	r3, r3, #3
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d003      	beq.n	8007a76 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a6e:	6878      	ldr	r0, [r7, #4]
 8007a70:	f000 f8e5 	bl	8007c3e <HAL_TIM_IC_CaptureCallback>
 8007a74:	e005      	b.n	8007a82 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f000 f8d7 	bl	8007c2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f000 f8e8 	bl	8007c52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2200      	movs	r2, #0
 8007a86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007a88:	68bb      	ldr	r3, [r7, #8]
 8007a8a:	f003 0310 	and.w	r3, r3, #16
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d020      	beq.n	8007ad4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	f003 0310 	and.w	r3, r3, #16
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d01b      	beq.n	8007ad4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f06f 0210 	mvn.w	r2, #16
 8007aa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2208      	movs	r2, #8
 8007aaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	69db      	ldr	r3, [r3, #28]
 8007ab2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d003      	beq.n	8007ac2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f000 f8bf 	bl	8007c3e <HAL_TIM_IC_CaptureCallback>
 8007ac0:	e005      	b.n	8007ace <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f000 f8b1 	bl	8007c2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	f000 f8c2 	bl	8007c52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	f003 0301 	and.w	r3, r3, #1
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d00c      	beq.n	8007af8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	f003 0301 	and.w	r3, r3, #1
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d007      	beq.n	8007af8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f06f 0201 	mvn.w	r2, #1
 8007af0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	f7fb faba 	bl	800306c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d104      	bne.n	8007b0c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007b02:	68bb      	ldr	r3, [r7, #8]
 8007b04:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d00c      	beq.n	8007b26 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d007      	beq.n	8007b26 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007b1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007b20:	6878      	ldr	r0, [r7, #4]
 8007b22:	f000 f95f 	bl	8007de4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007b26:	68bb      	ldr	r3, [r7, #8]
 8007b28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d00c      	beq.n	8007b4a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d007      	beq.n	8007b4a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007b42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	f000 f957 	bl	8007df8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007b4a:	68bb      	ldr	r3, [r7, #8]
 8007b4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d00c      	beq.n	8007b6e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d007      	beq.n	8007b6e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007b66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f000 f87c 	bl	8007c66 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007b6e:	68bb      	ldr	r3, [r7, #8]
 8007b70:	f003 0320 	and.w	r3, r3, #32
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d00c      	beq.n	8007b92 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	f003 0320 	and.w	r3, r3, #32
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d007      	beq.n	8007b92 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f06f 0220 	mvn.w	r2, #32
 8007b8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f000 f91f 	bl	8007dd0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8007b92:	68bb      	ldr	r3, [r7, #8]
 8007b94:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d00c      	beq.n	8007bb6 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d007      	beq.n	8007bb6 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8007bae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8007bb0:	6878      	ldr	r0, [r7, #4]
 8007bb2:	f000 f92b 	bl	8007e0c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8007bb6:	68bb      	ldr	r3, [r7, #8]
 8007bb8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d00c      	beq.n	8007bda <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d007      	beq.n	8007bda <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8007bd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f000 f923 	bl	8007e20 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d00c      	beq.n	8007bfe <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d007      	beq.n	8007bfe <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8007bf6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	f000 f91b 	bl	8007e34 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d00c      	beq.n	8007c22 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d007      	beq.n	8007c22 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8007c1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	f000 f913 	bl	8007e48 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007c22:	bf00      	nop
 8007c24:	3710      	adds	r7, #16
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bd80      	pop	{r7, pc}

08007c2a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007c2a:	b480      	push	{r7}
 8007c2c:	b083      	sub	sp, #12
 8007c2e:	af00      	add	r7, sp, #0
 8007c30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007c32:	bf00      	nop
 8007c34:	370c      	adds	r7, #12
 8007c36:	46bd      	mov	sp, r7
 8007c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3c:	4770      	bx	lr

08007c3e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007c3e:	b480      	push	{r7}
 8007c40:	b083      	sub	sp, #12
 8007c42:	af00      	add	r7, sp, #0
 8007c44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007c46:	bf00      	nop
 8007c48:	370c      	adds	r7, #12
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c50:	4770      	bx	lr

08007c52 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007c52:	b480      	push	{r7}
 8007c54:	b083      	sub	sp, #12
 8007c56:	af00      	add	r7, sp, #0
 8007c58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007c5a:	bf00      	nop
 8007c5c:	370c      	adds	r7, #12
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c64:	4770      	bx	lr

08007c66 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007c66:	b480      	push	{r7}
 8007c68:	b083      	sub	sp, #12
 8007c6a:	af00      	add	r7, sp, #0
 8007c6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007c6e:	bf00      	nop
 8007c70:	370c      	adds	r7, #12
 8007c72:	46bd      	mov	sp, r7
 8007c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c78:	4770      	bx	lr
	...

08007c7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007c7c:	b480      	push	{r7}
 8007c7e:	b085      	sub	sp, #20
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
 8007c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	4a48      	ldr	r2, [pc, #288]	@ (8007db0 <TIM_Base_SetConfig+0x134>)
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d013      	beq.n	8007cbc <TIM_Base_SetConfig+0x40>
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c9a:	d00f      	beq.n	8007cbc <TIM_Base_SetConfig+0x40>
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	4a45      	ldr	r2, [pc, #276]	@ (8007db4 <TIM_Base_SetConfig+0x138>)
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d00b      	beq.n	8007cbc <TIM_Base_SetConfig+0x40>
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	4a44      	ldr	r2, [pc, #272]	@ (8007db8 <TIM_Base_SetConfig+0x13c>)
 8007ca8:	4293      	cmp	r3, r2
 8007caa:	d007      	beq.n	8007cbc <TIM_Base_SetConfig+0x40>
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	4a43      	ldr	r2, [pc, #268]	@ (8007dbc <TIM_Base_SetConfig+0x140>)
 8007cb0:	4293      	cmp	r3, r2
 8007cb2:	d003      	beq.n	8007cbc <TIM_Base_SetConfig+0x40>
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	4a42      	ldr	r2, [pc, #264]	@ (8007dc0 <TIM_Base_SetConfig+0x144>)
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	d108      	bne.n	8007cce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007cc2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	685b      	ldr	r3, [r3, #4]
 8007cc8:	68fa      	ldr	r2, [r7, #12]
 8007cca:	4313      	orrs	r3, r2
 8007ccc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	4a37      	ldr	r2, [pc, #220]	@ (8007db0 <TIM_Base_SetConfig+0x134>)
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	d01f      	beq.n	8007d16 <TIM_Base_SetConfig+0x9a>
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007cdc:	d01b      	beq.n	8007d16 <TIM_Base_SetConfig+0x9a>
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	4a34      	ldr	r2, [pc, #208]	@ (8007db4 <TIM_Base_SetConfig+0x138>)
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	d017      	beq.n	8007d16 <TIM_Base_SetConfig+0x9a>
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	4a33      	ldr	r2, [pc, #204]	@ (8007db8 <TIM_Base_SetConfig+0x13c>)
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d013      	beq.n	8007d16 <TIM_Base_SetConfig+0x9a>
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	4a32      	ldr	r2, [pc, #200]	@ (8007dbc <TIM_Base_SetConfig+0x140>)
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d00f      	beq.n	8007d16 <TIM_Base_SetConfig+0x9a>
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	4a32      	ldr	r2, [pc, #200]	@ (8007dc4 <TIM_Base_SetConfig+0x148>)
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d00b      	beq.n	8007d16 <TIM_Base_SetConfig+0x9a>
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	4a31      	ldr	r2, [pc, #196]	@ (8007dc8 <TIM_Base_SetConfig+0x14c>)
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d007      	beq.n	8007d16 <TIM_Base_SetConfig+0x9a>
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	4a30      	ldr	r2, [pc, #192]	@ (8007dcc <TIM_Base_SetConfig+0x150>)
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d003      	beq.n	8007d16 <TIM_Base_SetConfig+0x9a>
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	4a2b      	ldr	r2, [pc, #172]	@ (8007dc0 <TIM_Base_SetConfig+0x144>)
 8007d12:	4293      	cmp	r3, r2
 8007d14:	d108      	bne.n	8007d28 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007d1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	68db      	ldr	r3, [r3, #12]
 8007d22:	68fa      	ldr	r2, [r7, #12]
 8007d24:	4313      	orrs	r3, r2
 8007d26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	695b      	ldr	r3, [r3, #20]
 8007d32:	4313      	orrs	r3, r2
 8007d34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	68fa      	ldr	r2, [r7, #12]
 8007d3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	689a      	ldr	r2, [r3, #8]
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	681a      	ldr	r2, [r3, #0]
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	4a18      	ldr	r2, [pc, #96]	@ (8007db0 <TIM_Base_SetConfig+0x134>)
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d013      	beq.n	8007d7c <TIM_Base_SetConfig+0x100>
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	4a19      	ldr	r2, [pc, #100]	@ (8007dbc <TIM_Base_SetConfig+0x140>)
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d00f      	beq.n	8007d7c <TIM_Base_SetConfig+0x100>
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	4a19      	ldr	r2, [pc, #100]	@ (8007dc4 <TIM_Base_SetConfig+0x148>)
 8007d60:	4293      	cmp	r3, r2
 8007d62:	d00b      	beq.n	8007d7c <TIM_Base_SetConfig+0x100>
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	4a18      	ldr	r2, [pc, #96]	@ (8007dc8 <TIM_Base_SetConfig+0x14c>)
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d007      	beq.n	8007d7c <TIM_Base_SetConfig+0x100>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	4a17      	ldr	r2, [pc, #92]	@ (8007dcc <TIM_Base_SetConfig+0x150>)
 8007d70:	4293      	cmp	r3, r2
 8007d72:	d003      	beq.n	8007d7c <TIM_Base_SetConfig+0x100>
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	4a12      	ldr	r2, [pc, #72]	@ (8007dc0 <TIM_Base_SetConfig+0x144>)
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d103      	bne.n	8007d84 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	691a      	ldr	r2, [r3, #16]
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2201      	movs	r2, #1
 8007d88:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	691b      	ldr	r3, [r3, #16]
 8007d8e:	f003 0301 	and.w	r3, r3, #1
 8007d92:	2b01      	cmp	r3, #1
 8007d94:	d105      	bne.n	8007da2 <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	691b      	ldr	r3, [r3, #16]
 8007d9a:	f023 0201 	bic.w	r2, r3, #1
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	611a      	str	r2, [r3, #16]
  }
}
 8007da2:	bf00      	nop
 8007da4:	3714      	adds	r7, #20
 8007da6:	46bd      	mov	sp, r7
 8007da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dac:	4770      	bx	lr
 8007dae:	bf00      	nop
 8007db0:	40012c00 	.word	0x40012c00
 8007db4:	40000400 	.word	0x40000400
 8007db8:	40000800 	.word	0x40000800
 8007dbc:	40013400 	.word	0x40013400
 8007dc0:	40015000 	.word	0x40015000
 8007dc4:	40014000 	.word	0x40014000
 8007dc8:	40014400 	.word	0x40014400
 8007dcc:	40014800 	.word	0x40014800

08007dd0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	b083      	sub	sp, #12
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007dd8:	bf00      	nop
 8007dda:	370c      	adds	r7, #12
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de2:	4770      	bx	lr

08007de4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007de4:	b480      	push	{r7}
 8007de6:	b083      	sub	sp, #12
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007dec:	bf00      	nop
 8007dee:	370c      	adds	r7, #12
 8007df0:	46bd      	mov	sp, r7
 8007df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df6:	4770      	bx	lr

08007df8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007df8:	b480      	push	{r7}
 8007dfa:	b083      	sub	sp, #12
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007e00:	bf00      	nop
 8007e02:	370c      	adds	r7, #12
 8007e04:	46bd      	mov	sp, r7
 8007e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0a:	4770      	bx	lr

08007e0c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	b083      	sub	sp, #12
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007e14:	bf00      	nop
 8007e16:	370c      	adds	r7, #12
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1e:	4770      	bx	lr

08007e20 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007e20:	b480      	push	{r7}
 8007e22:	b083      	sub	sp, #12
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007e28:	bf00      	nop
 8007e2a:	370c      	adds	r7, #12
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e32:	4770      	bx	lr

08007e34 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007e34:	b480      	push	{r7}
 8007e36:	b083      	sub	sp, #12
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007e3c:	bf00      	nop
 8007e3e:	370c      	adds	r7, #12
 8007e40:	46bd      	mov	sp, r7
 8007e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e46:	4770      	bx	lr

08007e48 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007e48:	b480      	push	{r7}
 8007e4a:	b083      	sub	sp, #12
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007e50:	bf00      	nop
 8007e52:	370c      	adds	r7, #12
 8007e54:	46bd      	mov	sp, r7
 8007e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5a:	4770      	bx	lr

08007e5c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8007e5c:	b480      	push	{r7}
 8007e5e:	b085      	sub	sp, #20
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2200      	movs	r2, #0
 8007e68:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007e6c:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8007e70:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	b29a      	uxth	r2, r3
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007e7c:	2300      	movs	r3, #0
}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	3714      	adds	r7, #20
 8007e82:	46bd      	mov	sp, r7
 8007e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e88:	4770      	bx	lr

08007e8a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007e8a:	b480      	push	{r7}
 8007e8c:	b085      	sub	sp, #20
 8007e8e:	af00      	add	r7, sp, #0
 8007e90:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007e92:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8007e96:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8007e9e:	b29a      	uxth	r2, r3
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	b29b      	uxth	r3, r3
 8007ea4:	43db      	mvns	r3, r3
 8007ea6:	b29b      	uxth	r3, r3
 8007ea8:	4013      	ands	r3, r2
 8007eaa:	b29a      	uxth	r2, r3
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007eb2:	2300      	movs	r3, #0
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	3714      	adds	r7, #20
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebe:	4770      	bx	lr

08007ec0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007ec0:	b480      	push	{r7}
 8007ec2:	b085      	sub	sp, #20
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	60f8      	str	r0, [r7, #12]
 8007ec8:	1d3b      	adds	r3, r7, #4
 8007eca:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	2201      	movs	r2, #1
 8007ed2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	2200      	movs	r2, #0
 8007eda:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	2200      	movs	r2, #0
 8007eea:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8007eee:	2300      	movs	r3, #0
}
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	3714      	adds	r7, #20
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efa:	4770      	bx	lr

08007efc <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007efc:	b480      	push	{r7}
 8007efe:	b0a7      	sub	sp, #156	@ 0x9c
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
 8007f04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8007f06:	2300      	movs	r3, #0
 8007f08:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007f0c:	687a      	ldr	r2, [r7, #4]
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	781b      	ldrb	r3, [r3, #0]
 8007f12:	009b      	lsls	r3, r3, #2
 8007f14:	4413      	add	r3, r2
 8007f16:	881b      	ldrh	r3, [r3, #0]
 8007f18:	b29b      	uxth	r3, r3
 8007f1a:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8007f1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f22:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	78db      	ldrb	r3, [r3, #3]
 8007f2a:	2b03      	cmp	r3, #3
 8007f2c:	d81f      	bhi.n	8007f6e <USB_ActivateEndpoint+0x72>
 8007f2e:	a201      	add	r2, pc, #4	@ (adr r2, 8007f34 <USB_ActivateEndpoint+0x38>)
 8007f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f34:	08007f45 	.word	0x08007f45
 8007f38:	08007f61 	.word	0x08007f61
 8007f3c:	08007f77 	.word	0x08007f77
 8007f40:	08007f53 	.word	0x08007f53
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8007f44:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8007f48:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007f4c:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8007f50:	e012      	b.n	8007f78 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8007f52:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8007f56:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8007f5a:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8007f5e:	e00b      	b.n	8007f78 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8007f60:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8007f64:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007f68:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8007f6c:	e004      	b.n	8007f78 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8007f6e:	2301      	movs	r3, #1
 8007f70:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 8007f74:	e000      	b.n	8007f78 <USB_ActivateEndpoint+0x7c>
      break;
 8007f76:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8007f78:	687a      	ldr	r2, [r7, #4]
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	781b      	ldrb	r3, [r3, #0]
 8007f7e:	009b      	lsls	r3, r3, #2
 8007f80:	441a      	add	r2, r3
 8007f82:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8007f86:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f8a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f8e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007f92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f96:	b29b      	uxth	r3, r3
 8007f98:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8007f9a:	687a      	ldr	r2, [r7, #4]
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	781b      	ldrb	r3, [r3, #0]
 8007fa0:	009b      	lsls	r3, r3, #2
 8007fa2:	4413      	add	r3, r2
 8007fa4:	881b      	ldrh	r3, [r3, #0]
 8007fa6:	b29b      	uxth	r3, r3
 8007fa8:	b21b      	sxth	r3, r3
 8007faa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007fae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007fb2:	b21a      	sxth	r2, r3
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	781b      	ldrb	r3, [r3, #0]
 8007fb8:	b21b      	sxth	r3, r3
 8007fba:	4313      	orrs	r3, r2
 8007fbc:	b21b      	sxth	r3, r3
 8007fbe:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 8007fc2:	687a      	ldr	r2, [r7, #4]
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	781b      	ldrb	r3, [r3, #0]
 8007fc8:	009b      	lsls	r3, r3, #2
 8007fca:	441a      	add	r2, r3
 8007fcc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8007fd0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007fd4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007fd8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007fdc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007fe0:	b29b      	uxth	r3, r3
 8007fe2:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	7b1b      	ldrb	r3, [r3, #12]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	f040 8180 	bne.w	80082ee <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	785b      	ldrb	r3, [r3, #1]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	f000 8084 	beq.w	8008100 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	61bb      	str	r3, [r7, #24]
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008002:	b29b      	uxth	r3, r3
 8008004:	461a      	mov	r2, r3
 8008006:	69bb      	ldr	r3, [r7, #24]
 8008008:	4413      	add	r3, r2
 800800a:	61bb      	str	r3, [r7, #24]
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	781b      	ldrb	r3, [r3, #0]
 8008010:	00da      	lsls	r2, r3, #3
 8008012:	69bb      	ldr	r3, [r7, #24]
 8008014:	4413      	add	r3, r2
 8008016:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800801a:	617b      	str	r3, [r7, #20]
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	88db      	ldrh	r3, [r3, #6]
 8008020:	085b      	lsrs	r3, r3, #1
 8008022:	b29b      	uxth	r3, r3
 8008024:	005b      	lsls	r3, r3, #1
 8008026:	b29a      	uxth	r2, r3
 8008028:	697b      	ldr	r3, [r7, #20]
 800802a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800802c:	687a      	ldr	r2, [r7, #4]
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	781b      	ldrb	r3, [r3, #0]
 8008032:	009b      	lsls	r3, r3, #2
 8008034:	4413      	add	r3, r2
 8008036:	881b      	ldrh	r3, [r3, #0]
 8008038:	827b      	strh	r3, [r7, #18]
 800803a:	8a7b      	ldrh	r3, [r7, #18]
 800803c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008040:	2b00      	cmp	r3, #0
 8008042:	d01b      	beq.n	800807c <USB_ActivateEndpoint+0x180>
 8008044:	687a      	ldr	r2, [r7, #4]
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	781b      	ldrb	r3, [r3, #0]
 800804a:	009b      	lsls	r3, r3, #2
 800804c:	4413      	add	r3, r2
 800804e:	881b      	ldrh	r3, [r3, #0]
 8008050:	b29b      	uxth	r3, r3
 8008052:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008056:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800805a:	823b      	strh	r3, [r7, #16]
 800805c:	687a      	ldr	r2, [r7, #4]
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	781b      	ldrb	r3, [r3, #0]
 8008062:	009b      	lsls	r3, r3, #2
 8008064:	441a      	add	r2, r3
 8008066:	8a3b      	ldrh	r3, [r7, #16]
 8008068:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800806c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008070:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008074:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008078:	b29b      	uxth	r3, r3
 800807a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	78db      	ldrb	r3, [r3, #3]
 8008080:	2b01      	cmp	r3, #1
 8008082:	d020      	beq.n	80080c6 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008084:	687a      	ldr	r2, [r7, #4]
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	781b      	ldrb	r3, [r3, #0]
 800808a:	009b      	lsls	r3, r3, #2
 800808c:	4413      	add	r3, r2
 800808e:	881b      	ldrh	r3, [r3, #0]
 8008090:	b29b      	uxth	r3, r3
 8008092:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008096:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800809a:	81bb      	strh	r3, [r7, #12]
 800809c:	89bb      	ldrh	r3, [r7, #12]
 800809e:	f083 0320 	eor.w	r3, r3, #32
 80080a2:	81bb      	strh	r3, [r7, #12]
 80080a4:	687a      	ldr	r2, [r7, #4]
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	781b      	ldrb	r3, [r3, #0]
 80080aa:	009b      	lsls	r3, r3, #2
 80080ac:	441a      	add	r2, r3
 80080ae:	89bb      	ldrh	r3, [r7, #12]
 80080b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80080b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80080b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80080bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80080c0:	b29b      	uxth	r3, r3
 80080c2:	8013      	strh	r3, [r2, #0]
 80080c4:	e3f9      	b.n	80088ba <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80080c6:	687a      	ldr	r2, [r7, #4]
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	781b      	ldrb	r3, [r3, #0]
 80080cc:	009b      	lsls	r3, r3, #2
 80080ce:	4413      	add	r3, r2
 80080d0:	881b      	ldrh	r3, [r3, #0]
 80080d2:	b29b      	uxth	r3, r3
 80080d4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80080d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80080dc:	81fb      	strh	r3, [r7, #14]
 80080de:	687a      	ldr	r2, [r7, #4]
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	781b      	ldrb	r3, [r3, #0]
 80080e4:	009b      	lsls	r3, r3, #2
 80080e6:	441a      	add	r2, r3
 80080e8:	89fb      	ldrh	r3, [r7, #14]
 80080ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80080ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80080f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80080f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80080fa:	b29b      	uxth	r3, r3
 80080fc:	8013      	strh	r3, [r2, #0]
 80080fe:	e3dc      	b.n	80088ba <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	633b      	str	r3, [r7, #48]	@ 0x30
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800810a:	b29b      	uxth	r3, r3
 800810c:	461a      	mov	r2, r3
 800810e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008110:	4413      	add	r3, r2
 8008112:	633b      	str	r3, [r7, #48]	@ 0x30
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	781b      	ldrb	r3, [r3, #0]
 8008118:	00da      	lsls	r2, r3, #3
 800811a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800811c:	4413      	add	r3, r2
 800811e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008122:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	88db      	ldrh	r3, [r3, #6]
 8008128:	085b      	lsrs	r3, r3, #1
 800812a:	b29b      	uxth	r3, r3
 800812c:	005b      	lsls	r3, r3, #1
 800812e:	b29a      	uxth	r2, r3
 8008130:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008132:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800813e:	b29b      	uxth	r3, r3
 8008140:	461a      	mov	r2, r3
 8008142:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008144:	4413      	add	r3, r2
 8008146:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	781b      	ldrb	r3, [r3, #0]
 800814c:	00da      	lsls	r2, r3, #3
 800814e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008150:	4413      	add	r3, r2
 8008152:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008156:	627b      	str	r3, [r7, #36]	@ 0x24
 8008158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800815a:	881b      	ldrh	r3, [r3, #0]
 800815c:	b29b      	uxth	r3, r3
 800815e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008162:	b29a      	uxth	r2, r3
 8008164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008166:	801a      	strh	r2, [r3, #0]
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	691b      	ldr	r3, [r3, #16]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d10a      	bne.n	8008186 <USB_ActivateEndpoint+0x28a>
 8008170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008172:	881b      	ldrh	r3, [r3, #0]
 8008174:	b29b      	uxth	r3, r3
 8008176:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800817a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800817e:	b29a      	uxth	r2, r3
 8008180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008182:	801a      	strh	r2, [r3, #0]
 8008184:	e041      	b.n	800820a <USB_ActivateEndpoint+0x30e>
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	691b      	ldr	r3, [r3, #16]
 800818a:	2b3e      	cmp	r3, #62	@ 0x3e
 800818c:	d81c      	bhi.n	80081c8 <USB_ActivateEndpoint+0x2cc>
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	691b      	ldr	r3, [r3, #16]
 8008192:	085b      	lsrs	r3, r3, #1
 8008194:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	691b      	ldr	r3, [r3, #16]
 800819c:	f003 0301 	and.w	r3, r3, #1
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d004      	beq.n	80081ae <USB_ActivateEndpoint+0x2b2>
 80081a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80081a8:	3301      	adds	r3, #1
 80081aa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80081ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081b0:	881b      	ldrh	r3, [r3, #0]
 80081b2:	b29a      	uxth	r2, r3
 80081b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80081b8:	b29b      	uxth	r3, r3
 80081ba:	029b      	lsls	r3, r3, #10
 80081bc:	b29b      	uxth	r3, r3
 80081be:	4313      	orrs	r3, r2
 80081c0:	b29a      	uxth	r2, r3
 80081c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081c4:	801a      	strh	r2, [r3, #0]
 80081c6:	e020      	b.n	800820a <USB_ActivateEndpoint+0x30e>
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	691b      	ldr	r3, [r3, #16]
 80081cc:	095b      	lsrs	r3, r3, #5
 80081ce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	691b      	ldr	r3, [r3, #16]
 80081d6:	f003 031f 	and.w	r3, r3, #31
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d104      	bne.n	80081e8 <USB_ActivateEndpoint+0x2ec>
 80081de:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80081e2:	3b01      	subs	r3, #1
 80081e4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80081e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081ea:	881b      	ldrh	r3, [r3, #0]
 80081ec:	b29a      	uxth	r2, r3
 80081ee:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80081f2:	b29b      	uxth	r3, r3
 80081f4:	029b      	lsls	r3, r3, #10
 80081f6:	b29b      	uxth	r3, r3
 80081f8:	4313      	orrs	r3, r2
 80081fa:	b29b      	uxth	r3, r3
 80081fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008200:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008204:	b29a      	uxth	r2, r3
 8008206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008208:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800820a:	687a      	ldr	r2, [r7, #4]
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	781b      	ldrb	r3, [r3, #0]
 8008210:	009b      	lsls	r3, r3, #2
 8008212:	4413      	add	r3, r2
 8008214:	881b      	ldrh	r3, [r3, #0]
 8008216:	847b      	strh	r3, [r7, #34]	@ 0x22
 8008218:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800821a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800821e:	2b00      	cmp	r3, #0
 8008220:	d01b      	beq.n	800825a <USB_ActivateEndpoint+0x35e>
 8008222:	687a      	ldr	r2, [r7, #4]
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	781b      	ldrb	r3, [r3, #0]
 8008228:	009b      	lsls	r3, r3, #2
 800822a:	4413      	add	r3, r2
 800822c:	881b      	ldrh	r3, [r3, #0]
 800822e:	b29b      	uxth	r3, r3
 8008230:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008234:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008238:	843b      	strh	r3, [r7, #32]
 800823a:	687a      	ldr	r2, [r7, #4]
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	781b      	ldrb	r3, [r3, #0]
 8008240:	009b      	lsls	r3, r3, #2
 8008242:	441a      	add	r2, r3
 8008244:	8c3b      	ldrh	r3, [r7, #32]
 8008246:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800824a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800824e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008252:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008256:	b29b      	uxth	r3, r3
 8008258:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	781b      	ldrb	r3, [r3, #0]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d124      	bne.n	80082ac <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008262:	687a      	ldr	r2, [r7, #4]
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	781b      	ldrb	r3, [r3, #0]
 8008268:	009b      	lsls	r3, r3, #2
 800826a:	4413      	add	r3, r2
 800826c:	881b      	ldrh	r3, [r3, #0]
 800826e:	b29b      	uxth	r3, r3
 8008270:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008274:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008278:	83bb      	strh	r3, [r7, #28]
 800827a:	8bbb      	ldrh	r3, [r7, #28]
 800827c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008280:	83bb      	strh	r3, [r7, #28]
 8008282:	8bbb      	ldrh	r3, [r7, #28]
 8008284:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008288:	83bb      	strh	r3, [r7, #28]
 800828a:	687a      	ldr	r2, [r7, #4]
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	781b      	ldrb	r3, [r3, #0]
 8008290:	009b      	lsls	r3, r3, #2
 8008292:	441a      	add	r2, r3
 8008294:	8bbb      	ldrh	r3, [r7, #28]
 8008296:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800829a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800829e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80082a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082a6:	b29b      	uxth	r3, r3
 80082a8:	8013      	strh	r3, [r2, #0]
 80082aa:	e306      	b.n	80088ba <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80082ac:	687a      	ldr	r2, [r7, #4]
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	781b      	ldrb	r3, [r3, #0]
 80082b2:	009b      	lsls	r3, r3, #2
 80082b4:	4413      	add	r3, r2
 80082b6:	881b      	ldrh	r3, [r3, #0]
 80082b8:	b29b      	uxth	r3, r3
 80082ba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80082be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80082c2:	83fb      	strh	r3, [r7, #30]
 80082c4:	8bfb      	ldrh	r3, [r7, #30]
 80082c6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80082ca:	83fb      	strh	r3, [r7, #30]
 80082cc:	687a      	ldr	r2, [r7, #4]
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	781b      	ldrb	r3, [r3, #0]
 80082d2:	009b      	lsls	r3, r3, #2
 80082d4:	441a      	add	r2, r3
 80082d6:	8bfb      	ldrh	r3, [r7, #30]
 80082d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80082dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80082e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80082e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082e8:	b29b      	uxth	r3, r3
 80082ea:	8013      	strh	r3, [r2, #0]
 80082ec:	e2e5      	b.n	80088ba <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	78db      	ldrb	r3, [r3, #3]
 80082f2:	2b02      	cmp	r3, #2
 80082f4:	d11e      	bne.n	8008334 <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80082f6:	687a      	ldr	r2, [r7, #4]
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	781b      	ldrb	r3, [r3, #0]
 80082fc:	009b      	lsls	r3, r3, #2
 80082fe:	4413      	add	r3, r2
 8008300:	881b      	ldrh	r3, [r3, #0]
 8008302:	b29b      	uxth	r3, r3
 8008304:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008308:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800830c:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 8008310:	687a      	ldr	r2, [r7, #4]
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	781b      	ldrb	r3, [r3, #0]
 8008316:	009b      	lsls	r3, r3, #2
 8008318:	441a      	add	r2, r3
 800831a:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800831e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008322:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008326:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800832a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800832e:	b29b      	uxth	r3, r3
 8008330:	8013      	strh	r3, [r2, #0]
 8008332:	e01d      	b.n	8008370 <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8008334:	687a      	ldr	r2, [r7, #4]
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	781b      	ldrb	r3, [r3, #0]
 800833a:	009b      	lsls	r3, r3, #2
 800833c:	4413      	add	r3, r2
 800833e:	881b      	ldrh	r3, [r3, #0]
 8008340:	b29b      	uxth	r3, r3
 8008342:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8008346:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800834a:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 800834e:	687a      	ldr	r2, [r7, #4]
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	781b      	ldrb	r3, [r3, #0]
 8008354:	009b      	lsls	r3, r3, #2
 8008356:	441a      	add	r2, r3
 8008358:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 800835c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008360:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008364:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008368:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800836c:	b29b      	uxth	r3, r3
 800836e:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800837a:	b29b      	uxth	r3, r3
 800837c:	461a      	mov	r2, r3
 800837e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008380:	4413      	add	r3, r2
 8008382:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	781b      	ldrb	r3, [r3, #0]
 8008388:	00da      	lsls	r2, r3, #3
 800838a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800838c:	4413      	add	r3, r2
 800838e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008392:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	891b      	ldrh	r3, [r3, #8]
 8008398:	085b      	lsrs	r3, r3, #1
 800839a:	b29b      	uxth	r3, r3
 800839c:	005b      	lsls	r3, r3, #1
 800839e:	b29a      	uxth	r2, r3
 80083a0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80083a2:	801a      	strh	r2, [r3, #0]
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	677b      	str	r3, [r7, #116]	@ 0x74
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80083ae:	b29b      	uxth	r3, r3
 80083b0:	461a      	mov	r2, r3
 80083b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80083b4:	4413      	add	r3, r2
 80083b6:	677b      	str	r3, [r7, #116]	@ 0x74
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	781b      	ldrb	r3, [r3, #0]
 80083bc:	00da      	lsls	r2, r3, #3
 80083be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80083c0:	4413      	add	r3, r2
 80083c2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80083c6:	673b      	str	r3, [r7, #112]	@ 0x70
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	895b      	ldrh	r3, [r3, #10]
 80083cc:	085b      	lsrs	r3, r3, #1
 80083ce:	b29b      	uxth	r3, r3
 80083d0:	005b      	lsls	r3, r3, #1
 80083d2:	b29a      	uxth	r2, r3
 80083d4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80083d6:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	785b      	ldrb	r3, [r3, #1]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	f040 81af 	bne.w	8008740 <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80083e2:	687a      	ldr	r2, [r7, #4]
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	781b      	ldrb	r3, [r3, #0]
 80083e8:	009b      	lsls	r3, r3, #2
 80083ea:	4413      	add	r3, r2
 80083ec:	881b      	ldrh	r3, [r3, #0]
 80083ee:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 80083f2:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 80083f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d01d      	beq.n	800843a <USB_ActivateEndpoint+0x53e>
 80083fe:	687a      	ldr	r2, [r7, #4]
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	781b      	ldrb	r3, [r3, #0]
 8008404:	009b      	lsls	r3, r3, #2
 8008406:	4413      	add	r3, r2
 8008408:	881b      	ldrh	r3, [r3, #0]
 800840a:	b29b      	uxth	r3, r3
 800840c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008410:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008414:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 8008418:	687a      	ldr	r2, [r7, #4]
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	781b      	ldrb	r3, [r3, #0]
 800841e:	009b      	lsls	r3, r3, #2
 8008420:	441a      	add	r2, r3
 8008422:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8008426:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800842a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800842e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008432:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008436:	b29b      	uxth	r3, r3
 8008438:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800843a:	687a      	ldr	r2, [r7, #4]
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	781b      	ldrb	r3, [r3, #0]
 8008440:	009b      	lsls	r3, r3, #2
 8008442:	4413      	add	r3, r2
 8008444:	881b      	ldrh	r3, [r3, #0]
 8008446:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 800844a:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 800844e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008452:	2b00      	cmp	r3, #0
 8008454:	d01d      	beq.n	8008492 <USB_ActivateEndpoint+0x596>
 8008456:	687a      	ldr	r2, [r7, #4]
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	781b      	ldrb	r3, [r3, #0]
 800845c:	009b      	lsls	r3, r3, #2
 800845e:	4413      	add	r3, r2
 8008460:	881b      	ldrh	r3, [r3, #0]
 8008462:	b29b      	uxth	r3, r3
 8008464:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008468:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800846c:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 8008470:	687a      	ldr	r2, [r7, #4]
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	781b      	ldrb	r3, [r3, #0]
 8008476:	009b      	lsls	r3, r3, #2
 8008478:	441a      	add	r2, r3
 800847a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 800847e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008482:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008486:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800848a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800848e:	b29b      	uxth	r3, r3
 8008490:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	785b      	ldrb	r3, [r3, #1]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d16b      	bne.n	8008572 <USB_ActivateEndpoint+0x676>
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80084a4:	b29b      	uxth	r3, r3
 80084a6:	461a      	mov	r2, r3
 80084a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80084aa:	4413      	add	r3, r2
 80084ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	781b      	ldrb	r3, [r3, #0]
 80084b2:	00da      	lsls	r2, r3, #3
 80084b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80084b6:	4413      	add	r3, r2
 80084b8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80084bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80084be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80084c0:	881b      	ldrh	r3, [r3, #0]
 80084c2:	b29b      	uxth	r3, r3
 80084c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80084c8:	b29a      	uxth	r2, r3
 80084ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80084cc:	801a      	strh	r2, [r3, #0]
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	691b      	ldr	r3, [r3, #16]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d10a      	bne.n	80084ec <USB_ActivateEndpoint+0x5f0>
 80084d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80084d8:	881b      	ldrh	r3, [r3, #0]
 80084da:	b29b      	uxth	r3, r3
 80084dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80084e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084e4:	b29a      	uxth	r2, r3
 80084e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80084e8:	801a      	strh	r2, [r3, #0]
 80084ea:	e05d      	b.n	80085a8 <USB_ActivateEndpoint+0x6ac>
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	691b      	ldr	r3, [r3, #16]
 80084f0:	2b3e      	cmp	r3, #62	@ 0x3e
 80084f2:	d81c      	bhi.n	800852e <USB_ActivateEndpoint+0x632>
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	691b      	ldr	r3, [r3, #16]
 80084f8:	085b      	lsrs	r3, r3, #1
 80084fa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	691b      	ldr	r3, [r3, #16]
 8008502:	f003 0301 	and.w	r3, r3, #1
 8008506:	2b00      	cmp	r3, #0
 8008508:	d004      	beq.n	8008514 <USB_ActivateEndpoint+0x618>
 800850a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800850e:	3301      	adds	r3, #1
 8008510:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008514:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008516:	881b      	ldrh	r3, [r3, #0]
 8008518:	b29a      	uxth	r2, r3
 800851a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800851e:	b29b      	uxth	r3, r3
 8008520:	029b      	lsls	r3, r3, #10
 8008522:	b29b      	uxth	r3, r3
 8008524:	4313      	orrs	r3, r2
 8008526:	b29a      	uxth	r2, r3
 8008528:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800852a:	801a      	strh	r2, [r3, #0]
 800852c:	e03c      	b.n	80085a8 <USB_ActivateEndpoint+0x6ac>
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	691b      	ldr	r3, [r3, #16]
 8008532:	095b      	lsrs	r3, r3, #5
 8008534:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	691b      	ldr	r3, [r3, #16]
 800853c:	f003 031f 	and.w	r3, r3, #31
 8008540:	2b00      	cmp	r3, #0
 8008542:	d104      	bne.n	800854e <USB_ActivateEndpoint+0x652>
 8008544:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008548:	3b01      	subs	r3, #1
 800854a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800854e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008550:	881b      	ldrh	r3, [r3, #0]
 8008552:	b29a      	uxth	r2, r3
 8008554:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008558:	b29b      	uxth	r3, r3
 800855a:	029b      	lsls	r3, r3, #10
 800855c:	b29b      	uxth	r3, r3
 800855e:	4313      	orrs	r3, r2
 8008560:	b29b      	uxth	r3, r3
 8008562:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008566:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800856a:	b29a      	uxth	r2, r3
 800856c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800856e:	801a      	strh	r2, [r3, #0]
 8008570:	e01a      	b.n	80085a8 <USB_ActivateEndpoint+0x6ac>
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	785b      	ldrb	r3, [r3, #1]
 8008576:	2b01      	cmp	r3, #1
 8008578:	d116      	bne.n	80085a8 <USB_ActivateEndpoint+0x6ac>
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	657b      	str	r3, [r7, #84]	@ 0x54
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008584:	b29b      	uxth	r3, r3
 8008586:	461a      	mov	r2, r3
 8008588:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800858a:	4413      	add	r3, r2
 800858c:	657b      	str	r3, [r7, #84]	@ 0x54
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	781b      	ldrb	r3, [r3, #0]
 8008592:	00da      	lsls	r2, r3, #3
 8008594:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008596:	4413      	add	r3, r2
 8008598:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800859c:	653b      	str	r3, [r7, #80]	@ 0x50
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	691b      	ldr	r3, [r3, #16]
 80085a2:	b29a      	uxth	r2, r3
 80085a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80085a6:	801a      	strh	r2, [r3, #0]
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	647b      	str	r3, [r7, #68]	@ 0x44
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	785b      	ldrb	r3, [r3, #1]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d16b      	bne.n	800868c <USB_ActivateEndpoint+0x790>
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80085be:	b29b      	uxth	r3, r3
 80085c0:	461a      	mov	r2, r3
 80085c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80085c4:	4413      	add	r3, r2
 80085c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	781b      	ldrb	r3, [r3, #0]
 80085cc:	00da      	lsls	r2, r3, #3
 80085ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80085d0:	4413      	add	r3, r2
 80085d2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80085d6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80085d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085da:	881b      	ldrh	r3, [r3, #0]
 80085dc:	b29b      	uxth	r3, r3
 80085de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80085e2:	b29a      	uxth	r2, r3
 80085e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085e6:	801a      	strh	r2, [r3, #0]
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	691b      	ldr	r3, [r3, #16]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d10a      	bne.n	8008606 <USB_ActivateEndpoint+0x70a>
 80085f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085f2:	881b      	ldrh	r3, [r3, #0]
 80085f4:	b29b      	uxth	r3, r3
 80085f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085fe:	b29a      	uxth	r2, r3
 8008600:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008602:	801a      	strh	r2, [r3, #0]
 8008604:	e05b      	b.n	80086be <USB_ActivateEndpoint+0x7c2>
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	691b      	ldr	r3, [r3, #16]
 800860a:	2b3e      	cmp	r3, #62	@ 0x3e
 800860c:	d81c      	bhi.n	8008648 <USB_ActivateEndpoint+0x74c>
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	691b      	ldr	r3, [r3, #16]
 8008612:	085b      	lsrs	r3, r3, #1
 8008614:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	691b      	ldr	r3, [r3, #16]
 800861c:	f003 0301 	and.w	r3, r3, #1
 8008620:	2b00      	cmp	r3, #0
 8008622:	d004      	beq.n	800862e <USB_ActivateEndpoint+0x732>
 8008624:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008628:	3301      	adds	r3, #1
 800862a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800862e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008630:	881b      	ldrh	r3, [r3, #0]
 8008632:	b29a      	uxth	r2, r3
 8008634:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008638:	b29b      	uxth	r3, r3
 800863a:	029b      	lsls	r3, r3, #10
 800863c:	b29b      	uxth	r3, r3
 800863e:	4313      	orrs	r3, r2
 8008640:	b29a      	uxth	r2, r3
 8008642:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008644:	801a      	strh	r2, [r3, #0]
 8008646:	e03a      	b.n	80086be <USB_ActivateEndpoint+0x7c2>
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	691b      	ldr	r3, [r3, #16]
 800864c:	095b      	lsrs	r3, r3, #5
 800864e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	691b      	ldr	r3, [r3, #16]
 8008656:	f003 031f 	and.w	r3, r3, #31
 800865a:	2b00      	cmp	r3, #0
 800865c:	d104      	bne.n	8008668 <USB_ActivateEndpoint+0x76c>
 800865e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008662:	3b01      	subs	r3, #1
 8008664:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008668:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800866a:	881b      	ldrh	r3, [r3, #0]
 800866c:	b29a      	uxth	r2, r3
 800866e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008672:	b29b      	uxth	r3, r3
 8008674:	029b      	lsls	r3, r3, #10
 8008676:	b29b      	uxth	r3, r3
 8008678:	4313      	orrs	r3, r2
 800867a:	b29b      	uxth	r3, r3
 800867c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008680:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008684:	b29a      	uxth	r2, r3
 8008686:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008688:	801a      	strh	r2, [r3, #0]
 800868a:	e018      	b.n	80086be <USB_ActivateEndpoint+0x7c2>
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	785b      	ldrb	r3, [r3, #1]
 8008690:	2b01      	cmp	r3, #1
 8008692:	d114      	bne.n	80086be <USB_ActivateEndpoint+0x7c2>
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800869a:	b29b      	uxth	r3, r3
 800869c:	461a      	mov	r2, r3
 800869e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80086a0:	4413      	add	r3, r2
 80086a2:	647b      	str	r3, [r7, #68]	@ 0x44
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	781b      	ldrb	r3, [r3, #0]
 80086a8:	00da      	lsls	r2, r3, #3
 80086aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80086ac:	4413      	add	r3, r2
 80086ae:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80086b2:	643b      	str	r3, [r7, #64]	@ 0x40
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	691b      	ldr	r3, [r3, #16]
 80086b8:	b29a      	uxth	r2, r3
 80086ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80086bc:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80086be:	687a      	ldr	r2, [r7, #4]
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	781b      	ldrb	r3, [r3, #0]
 80086c4:	009b      	lsls	r3, r3, #2
 80086c6:	4413      	add	r3, r2
 80086c8:	881b      	ldrh	r3, [r3, #0]
 80086ca:	b29b      	uxth	r3, r3
 80086cc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80086d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80086d4:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80086d6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80086d8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80086dc:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80086de:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80086e0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80086e4:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80086e6:	687a      	ldr	r2, [r7, #4]
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	781b      	ldrb	r3, [r3, #0]
 80086ec:	009b      	lsls	r3, r3, #2
 80086ee:	441a      	add	r2, r3
 80086f0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80086f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80086f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80086fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80086fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008702:	b29b      	uxth	r3, r3
 8008704:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008706:	687a      	ldr	r2, [r7, #4]
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	781b      	ldrb	r3, [r3, #0]
 800870c:	009b      	lsls	r3, r3, #2
 800870e:	4413      	add	r3, r2
 8008710:	881b      	ldrh	r3, [r3, #0]
 8008712:	b29b      	uxth	r3, r3
 8008714:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008718:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800871c:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800871e:	687a      	ldr	r2, [r7, #4]
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	781b      	ldrb	r3, [r3, #0]
 8008724:	009b      	lsls	r3, r3, #2
 8008726:	441a      	add	r2, r3
 8008728:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800872a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800872e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008732:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008736:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800873a:	b29b      	uxth	r3, r3
 800873c:	8013      	strh	r3, [r2, #0]
 800873e:	e0bc      	b.n	80088ba <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008740:	687a      	ldr	r2, [r7, #4]
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	781b      	ldrb	r3, [r3, #0]
 8008746:	009b      	lsls	r3, r3, #2
 8008748:	4413      	add	r3, r2
 800874a:	881b      	ldrh	r3, [r3, #0]
 800874c:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8008750:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008754:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008758:	2b00      	cmp	r3, #0
 800875a:	d01d      	beq.n	8008798 <USB_ActivateEndpoint+0x89c>
 800875c:	687a      	ldr	r2, [r7, #4]
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	781b      	ldrb	r3, [r3, #0]
 8008762:	009b      	lsls	r3, r3, #2
 8008764:	4413      	add	r3, r2
 8008766:	881b      	ldrh	r3, [r3, #0]
 8008768:	b29b      	uxth	r3, r3
 800876a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800876e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008772:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 8008776:	687a      	ldr	r2, [r7, #4]
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	781b      	ldrb	r3, [r3, #0]
 800877c:	009b      	lsls	r3, r3, #2
 800877e:	441a      	add	r2, r3
 8008780:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008784:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008788:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800878c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008790:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008794:	b29b      	uxth	r3, r3
 8008796:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008798:	687a      	ldr	r2, [r7, #4]
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	781b      	ldrb	r3, [r3, #0]
 800879e:	009b      	lsls	r3, r3, #2
 80087a0:	4413      	add	r3, r2
 80087a2:	881b      	ldrh	r3, [r3, #0]
 80087a4:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 80087a8:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 80087ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d01d      	beq.n	80087f0 <USB_ActivateEndpoint+0x8f4>
 80087b4:	687a      	ldr	r2, [r7, #4]
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	781b      	ldrb	r3, [r3, #0]
 80087ba:	009b      	lsls	r3, r3, #2
 80087bc:	4413      	add	r3, r2
 80087be:	881b      	ldrh	r3, [r3, #0]
 80087c0:	b29b      	uxth	r3, r3
 80087c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80087c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80087ca:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 80087ce:	687a      	ldr	r2, [r7, #4]
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	781b      	ldrb	r3, [r3, #0]
 80087d4:	009b      	lsls	r3, r3, #2
 80087d6:	441a      	add	r2, r3
 80087d8:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 80087dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80087e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80087e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80087e8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80087ec:	b29b      	uxth	r3, r3
 80087ee:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	78db      	ldrb	r3, [r3, #3]
 80087f4:	2b01      	cmp	r3, #1
 80087f6:	d024      	beq.n	8008842 <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80087f8:	687a      	ldr	r2, [r7, #4]
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	781b      	ldrb	r3, [r3, #0]
 80087fe:	009b      	lsls	r3, r3, #2
 8008800:	4413      	add	r3, r2
 8008802:	881b      	ldrh	r3, [r3, #0]
 8008804:	b29b      	uxth	r3, r3
 8008806:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800880a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800880e:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8008812:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8008816:	f083 0320 	eor.w	r3, r3, #32
 800881a:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800881e:	687a      	ldr	r2, [r7, #4]
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	781b      	ldrb	r3, [r3, #0]
 8008824:	009b      	lsls	r3, r3, #2
 8008826:	441a      	add	r2, r3
 8008828:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800882c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008830:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008834:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008838:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800883c:	b29b      	uxth	r3, r3
 800883e:	8013      	strh	r3, [r2, #0]
 8008840:	e01d      	b.n	800887e <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008842:	687a      	ldr	r2, [r7, #4]
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	781b      	ldrb	r3, [r3, #0]
 8008848:	009b      	lsls	r3, r3, #2
 800884a:	4413      	add	r3, r2
 800884c:	881b      	ldrh	r3, [r3, #0]
 800884e:	b29b      	uxth	r3, r3
 8008850:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008854:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008858:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800885c:	687a      	ldr	r2, [r7, #4]
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	781b      	ldrb	r3, [r3, #0]
 8008862:	009b      	lsls	r3, r3, #2
 8008864:	441a      	add	r2, r3
 8008866:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800886a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800886e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008872:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008876:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800887a:	b29b      	uxth	r3, r3
 800887c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800887e:	687a      	ldr	r2, [r7, #4]
 8008880:	683b      	ldr	r3, [r7, #0]
 8008882:	781b      	ldrb	r3, [r3, #0]
 8008884:	009b      	lsls	r3, r3, #2
 8008886:	4413      	add	r3, r2
 8008888:	881b      	ldrh	r3, [r3, #0]
 800888a:	b29b      	uxth	r3, r3
 800888c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008890:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008894:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8008898:	687a      	ldr	r2, [r7, #4]
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	781b      	ldrb	r3, [r3, #0]
 800889e:	009b      	lsls	r3, r3, #2
 80088a0:	441a      	add	r2, r3
 80088a2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80088a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80088aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80088ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80088b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80088b6:	b29b      	uxth	r3, r3
 80088b8:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80088ba:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 80088be:	4618      	mov	r0, r3
 80088c0:	379c      	adds	r7, #156	@ 0x9c
 80088c2:	46bd      	mov	sp, r7
 80088c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c8:	4770      	bx	lr
 80088ca:	bf00      	nop

080088cc <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80088cc:	b480      	push	{r7}
 80088ce:	b08d      	sub	sp, #52	@ 0x34
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
 80088d4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	7b1b      	ldrb	r3, [r3, #12]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	f040 808e 	bne.w	80089fc <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	785b      	ldrb	r3, [r3, #1]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d044      	beq.n	8008972 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80088e8:	687a      	ldr	r2, [r7, #4]
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	781b      	ldrb	r3, [r3, #0]
 80088ee:	009b      	lsls	r3, r3, #2
 80088f0:	4413      	add	r3, r2
 80088f2:	881b      	ldrh	r3, [r3, #0]
 80088f4:	81bb      	strh	r3, [r7, #12]
 80088f6:	89bb      	ldrh	r3, [r7, #12]
 80088f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d01b      	beq.n	8008938 <USB_DeactivateEndpoint+0x6c>
 8008900:	687a      	ldr	r2, [r7, #4]
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	781b      	ldrb	r3, [r3, #0]
 8008906:	009b      	lsls	r3, r3, #2
 8008908:	4413      	add	r3, r2
 800890a:	881b      	ldrh	r3, [r3, #0]
 800890c:	b29b      	uxth	r3, r3
 800890e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008912:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008916:	817b      	strh	r3, [r7, #10]
 8008918:	687a      	ldr	r2, [r7, #4]
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	781b      	ldrb	r3, [r3, #0]
 800891e:	009b      	lsls	r3, r3, #2
 8008920:	441a      	add	r2, r3
 8008922:	897b      	ldrh	r3, [r7, #10]
 8008924:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008928:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800892c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008930:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008934:	b29b      	uxth	r3, r3
 8008936:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008938:	687a      	ldr	r2, [r7, #4]
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	781b      	ldrb	r3, [r3, #0]
 800893e:	009b      	lsls	r3, r3, #2
 8008940:	4413      	add	r3, r2
 8008942:	881b      	ldrh	r3, [r3, #0]
 8008944:	b29b      	uxth	r3, r3
 8008946:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800894a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800894e:	813b      	strh	r3, [r7, #8]
 8008950:	687a      	ldr	r2, [r7, #4]
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	781b      	ldrb	r3, [r3, #0]
 8008956:	009b      	lsls	r3, r3, #2
 8008958:	441a      	add	r2, r3
 800895a:	893b      	ldrh	r3, [r7, #8]
 800895c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008960:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008964:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008968:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800896c:	b29b      	uxth	r3, r3
 800896e:	8013      	strh	r3, [r2, #0]
 8008970:	e192      	b.n	8008c98 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008972:	687a      	ldr	r2, [r7, #4]
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	781b      	ldrb	r3, [r3, #0]
 8008978:	009b      	lsls	r3, r3, #2
 800897a:	4413      	add	r3, r2
 800897c:	881b      	ldrh	r3, [r3, #0]
 800897e:	827b      	strh	r3, [r7, #18]
 8008980:	8a7b      	ldrh	r3, [r7, #18]
 8008982:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008986:	2b00      	cmp	r3, #0
 8008988:	d01b      	beq.n	80089c2 <USB_DeactivateEndpoint+0xf6>
 800898a:	687a      	ldr	r2, [r7, #4]
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	781b      	ldrb	r3, [r3, #0]
 8008990:	009b      	lsls	r3, r3, #2
 8008992:	4413      	add	r3, r2
 8008994:	881b      	ldrh	r3, [r3, #0]
 8008996:	b29b      	uxth	r3, r3
 8008998:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800899c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80089a0:	823b      	strh	r3, [r7, #16]
 80089a2:	687a      	ldr	r2, [r7, #4]
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	781b      	ldrb	r3, [r3, #0]
 80089a8:	009b      	lsls	r3, r3, #2
 80089aa:	441a      	add	r2, r3
 80089ac:	8a3b      	ldrh	r3, [r7, #16]
 80089ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80089b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80089b6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80089ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80089be:	b29b      	uxth	r3, r3
 80089c0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80089c2:	687a      	ldr	r2, [r7, #4]
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	781b      	ldrb	r3, [r3, #0]
 80089c8:	009b      	lsls	r3, r3, #2
 80089ca:	4413      	add	r3, r2
 80089cc:	881b      	ldrh	r3, [r3, #0]
 80089ce:	b29b      	uxth	r3, r3
 80089d0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80089d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80089d8:	81fb      	strh	r3, [r7, #14]
 80089da:	687a      	ldr	r2, [r7, #4]
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	781b      	ldrb	r3, [r3, #0]
 80089e0:	009b      	lsls	r3, r3, #2
 80089e2:	441a      	add	r2, r3
 80089e4:	89fb      	ldrh	r3, [r7, #14]
 80089e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80089ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80089ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80089f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80089f6:	b29b      	uxth	r3, r3
 80089f8:	8013      	strh	r3, [r2, #0]
 80089fa:	e14d      	b.n	8008c98 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	785b      	ldrb	r3, [r3, #1]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	f040 80a5 	bne.w	8008b50 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008a06:	687a      	ldr	r2, [r7, #4]
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	781b      	ldrb	r3, [r3, #0]
 8008a0c:	009b      	lsls	r3, r3, #2
 8008a0e:	4413      	add	r3, r2
 8008a10:	881b      	ldrh	r3, [r3, #0]
 8008a12:	843b      	strh	r3, [r7, #32]
 8008a14:	8c3b      	ldrh	r3, [r7, #32]
 8008a16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d01b      	beq.n	8008a56 <USB_DeactivateEndpoint+0x18a>
 8008a1e:	687a      	ldr	r2, [r7, #4]
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	781b      	ldrb	r3, [r3, #0]
 8008a24:	009b      	lsls	r3, r3, #2
 8008a26:	4413      	add	r3, r2
 8008a28:	881b      	ldrh	r3, [r3, #0]
 8008a2a:	b29b      	uxth	r3, r3
 8008a2c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008a30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a34:	83fb      	strh	r3, [r7, #30]
 8008a36:	687a      	ldr	r2, [r7, #4]
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	781b      	ldrb	r3, [r3, #0]
 8008a3c:	009b      	lsls	r3, r3, #2
 8008a3e:	441a      	add	r2, r3
 8008a40:	8bfb      	ldrh	r3, [r7, #30]
 8008a42:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008a46:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008a4a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008a4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a52:	b29b      	uxth	r3, r3
 8008a54:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008a56:	687a      	ldr	r2, [r7, #4]
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	781b      	ldrb	r3, [r3, #0]
 8008a5c:	009b      	lsls	r3, r3, #2
 8008a5e:	4413      	add	r3, r2
 8008a60:	881b      	ldrh	r3, [r3, #0]
 8008a62:	83bb      	strh	r3, [r7, #28]
 8008a64:	8bbb      	ldrh	r3, [r7, #28]
 8008a66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d01b      	beq.n	8008aa6 <USB_DeactivateEndpoint+0x1da>
 8008a6e:	687a      	ldr	r2, [r7, #4]
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	781b      	ldrb	r3, [r3, #0]
 8008a74:	009b      	lsls	r3, r3, #2
 8008a76:	4413      	add	r3, r2
 8008a78:	881b      	ldrh	r3, [r3, #0]
 8008a7a:	b29b      	uxth	r3, r3
 8008a7c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008a80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a84:	837b      	strh	r3, [r7, #26]
 8008a86:	687a      	ldr	r2, [r7, #4]
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	781b      	ldrb	r3, [r3, #0]
 8008a8c:	009b      	lsls	r3, r3, #2
 8008a8e:	441a      	add	r2, r3
 8008a90:	8b7b      	ldrh	r3, [r7, #26]
 8008a92:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008a96:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008a9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008a9e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008aa2:	b29b      	uxth	r3, r3
 8008aa4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8008aa6:	687a      	ldr	r2, [r7, #4]
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	781b      	ldrb	r3, [r3, #0]
 8008aac:	009b      	lsls	r3, r3, #2
 8008aae:	4413      	add	r3, r2
 8008ab0:	881b      	ldrh	r3, [r3, #0]
 8008ab2:	b29b      	uxth	r3, r3
 8008ab4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008ab8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008abc:	833b      	strh	r3, [r7, #24]
 8008abe:	687a      	ldr	r2, [r7, #4]
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	781b      	ldrb	r3, [r3, #0]
 8008ac4:	009b      	lsls	r3, r3, #2
 8008ac6:	441a      	add	r2, r3
 8008ac8:	8b3b      	ldrh	r3, [r7, #24]
 8008aca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008ace:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008ad2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008ad6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008ada:	b29b      	uxth	r3, r3
 8008adc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008ade:	687a      	ldr	r2, [r7, #4]
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	781b      	ldrb	r3, [r3, #0]
 8008ae4:	009b      	lsls	r3, r3, #2
 8008ae6:	4413      	add	r3, r2
 8008ae8:	881b      	ldrh	r3, [r3, #0]
 8008aea:	b29b      	uxth	r3, r3
 8008aec:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008af0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008af4:	82fb      	strh	r3, [r7, #22]
 8008af6:	687a      	ldr	r2, [r7, #4]
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	781b      	ldrb	r3, [r3, #0]
 8008afc:	009b      	lsls	r3, r3, #2
 8008afe:	441a      	add	r2, r3
 8008b00:	8afb      	ldrh	r3, [r7, #22]
 8008b02:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008b06:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008b0a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008b0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b12:	b29b      	uxth	r3, r3
 8008b14:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008b16:	687a      	ldr	r2, [r7, #4]
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	781b      	ldrb	r3, [r3, #0]
 8008b1c:	009b      	lsls	r3, r3, #2
 8008b1e:	4413      	add	r3, r2
 8008b20:	881b      	ldrh	r3, [r3, #0]
 8008b22:	b29b      	uxth	r3, r3
 8008b24:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008b28:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008b2c:	82bb      	strh	r3, [r7, #20]
 8008b2e:	687a      	ldr	r2, [r7, #4]
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	781b      	ldrb	r3, [r3, #0]
 8008b34:	009b      	lsls	r3, r3, #2
 8008b36:	441a      	add	r2, r3
 8008b38:	8abb      	ldrh	r3, [r7, #20]
 8008b3a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008b3e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008b42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008b46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b4a:	b29b      	uxth	r3, r3
 8008b4c:	8013      	strh	r3, [r2, #0]
 8008b4e:	e0a3      	b.n	8008c98 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008b50:	687a      	ldr	r2, [r7, #4]
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	781b      	ldrb	r3, [r3, #0]
 8008b56:	009b      	lsls	r3, r3, #2
 8008b58:	4413      	add	r3, r2
 8008b5a:	881b      	ldrh	r3, [r3, #0]
 8008b5c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8008b5e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8008b60:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d01b      	beq.n	8008ba0 <USB_DeactivateEndpoint+0x2d4>
 8008b68:	687a      	ldr	r2, [r7, #4]
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	781b      	ldrb	r3, [r3, #0]
 8008b6e:	009b      	lsls	r3, r3, #2
 8008b70:	4413      	add	r3, r2
 8008b72:	881b      	ldrh	r3, [r3, #0]
 8008b74:	b29b      	uxth	r3, r3
 8008b76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008b7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b7e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8008b80:	687a      	ldr	r2, [r7, #4]
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	781b      	ldrb	r3, [r3, #0]
 8008b86:	009b      	lsls	r3, r3, #2
 8008b88:	441a      	add	r2, r3
 8008b8a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8008b8c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008b90:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008b94:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008b98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b9c:	b29b      	uxth	r3, r3
 8008b9e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008ba0:	687a      	ldr	r2, [r7, #4]
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	781b      	ldrb	r3, [r3, #0]
 8008ba6:	009b      	lsls	r3, r3, #2
 8008ba8:	4413      	add	r3, r2
 8008baa:	881b      	ldrh	r3, [r3, #0]
 8008bac:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8008bae:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8008bb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d01b      	beq.n	8008bf0 <USB_DeactivateEndpoint+0x324>
 8008bb8:	687a      	ldr	r2, [r7, #4]
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	781b      	ldrb	r3, [r3, #0]
 8008bbe:	009b      	lsls	r3, r3, #2
 8008bc0:	4413      	add	r3, r2
 8008bc2:	881b      	ldrh	r3, [r3, #0]
 8008bc4:	b29b      	uxth	r3, r3
 8008bc6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008bca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008bce:	853b      	strh	r3, [r7, #40]	@ 0x28
 8008bd0:	687a      	ldr	r2, [r7, #4]
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	781b      	ldrb	r3, [r3, #0]
 8008bd6:	009b      	lsls	r3, r3, #2
 8008bd8:	441a      	add	r2, r3
 8008bda:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008bdc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008be0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008be4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008be8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008bec:	b29b      	uxth	r3, r3
 8008bee:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008bf0:	687a      	ldr	r2, [r7, #4]
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	781b      	ldrb	r3, [r3, #0]
 8008bf6:	009b      	lsls	r3, r3, #2
 8008bf8:	4413      	add	r3, r2
 8008bfa:	881b      	ldrh	r3, [r3, #0]
 8008bfc:	b29b      	uxth	r3, r3
 8008bfe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008c02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c06:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8008c08:	687a      	ldr	r2, [r7, #4]
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	781b      	ldrb	r3, [r3, #0]
 8008c0e:	009b      	lsls	r3, r3, #2
 8008c10:	441a      	add	r2, r3
 8008c12:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008c14:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008c18:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008c1c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008c20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c24:	b29b      	uxth	r3, r3
 8008c26:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008c28:	687a      	ldr	r2, [r7, #4]
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	781b      	ldrb	r3, [r3, #0]
 8008c2e:	009b      	lsls	r3, r3, #2
 8008c30:	4413      	add	r3, r2
 8008c32:	881b      	ldrh	r3, [r3, #0]
 8008c34:	b29b      	uxth	r3, r3
 8008c36:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008c3a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008c3e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8008c40:	687a      	ldr	r2, [r7, #4]
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	781b      	ldrb	r3, [r3, #0]
 8008c46:	009b      	lsls	r3, r3, #2
 8008c48:	441a      	add	r2, r3
 8008c4a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008c4c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008c50:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008c54:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008c58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c5c:	b29b      	uxth	r3, r3
 8008c5e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008c60:	687a      	ldr	r2, [r7, #4]
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	781b      	ldrb	r3, [r3, #0]
 8008c66:	009b      	lsls	r3, r3, #2
 8008c68:	4413      	add	r3, r2
 8008c6a:	881b      	ldrh	r3, [r3, #0]
 8008c6c:	b29b      	uxth	r3, r3
 8008c6e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008c72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c76:	847b      	strh	r3, [r7, #34]	@ 0x22
 8008c78:	687a      	ldr	r2, [r7, #4]
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	781b      	ldrb	r3, [r3, #0]
 8008c7e:	009b      	lsls	r3, r3, #2
 8008c80:	441a      	add	r2, r3
 8008c82:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008c84:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008c88:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008c8c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008c90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c94:	b29b      	uxth	r3, r3
 8008c96:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8008c98:	2300      	movs	r3, #0
}
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	3734      	adds	r7, #52	@ 0x34
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca4:	4770      	bx	lr

08008ca6 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008ca6:	b580      	push	{r7, lr}
 8008ca8:	b0ac      	sub	sp, #176	@ 0xb0
 8008caa:	af00      	add	r7, sp, #0
 8008cac:	6078      	str	r0, [r7, #4]
 8008cae:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	785b      	ldrb	r3, [r3, #1]
 8008cb4:	2b01      	cmp	r3, #1
 8008cb6:	f040 84ca 	bne.w	800964e <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	699a      	ldr	r2, [r3, #24]
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	691b      	ldr	r3, [r3, #16]
 8008cc2:	429a      	cmp	r2, r3
 8008cc4:	d904      	bls.n	8008cd0 <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	691b      	ldr	r3, [r3, #16]
 8008cca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008cce:	e003      	b.n	8008cd8 <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	699b      	ldr	r3, [r3, #24]
 8008cd4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	7b1b      	ldrb	r3, [r3, #12]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d122      	bne.n	8008d26 <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	6959      	ldr	r1, [r3, #20]
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	88da      	ldrh	r2, [r3, #6]
 8008ce8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008cec:	b29b      	uxth	r3, r3
 8008cee:	6878      	ldr	r0, [r7, #4]
 8008cf0:	f000 febd 	bl	8009a6e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	613b      	str	r3, [r7, #16]
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008cfe:	b29b      	uxth	r3, r3
 8008d00:	461a      	mov	r2, r3
 8008d02:	693b      	ldr	r3, [r7, #16]
 8008d04:	4413      	add	r3, r2
 8008d06:	613b      	str	r3, [r7, #16]
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	781b      	ldrb	r3, [r3, #0]
 8008d0c:	00da      	lsls	r2, r3, #3
 8008d0e:	693b      	ldr	r3, [r7, #16]
 8008d10:	4413      	add	r3, r2
 8008d12:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008d16:	60fb      	str	r3, [r7, #12]
 8008d18:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008d1c:	b29a      	uxth	r2, r3
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	801a      	strh	r2, [r3, #0]
 8008d22:	f000 bc6f 	b.w	8009604 <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	78db      	ldrb	r3, [r3, #3]
 8008d2a:	2b02      	cmp	r3, #2
 8008d2c:	f040 831e 	bne.w	800936c <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	6a1a      	ldr	r2, [r3, #32]
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	691b      	ldr	r3, [r3, #16]
 8008d38:	429a      	cmp	r2, r3
 8008d3a:	f240 82cf 	bls.w	80092dc <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008d3e:	687a      	ldr	r2, [r7, #4]
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	781b      	ldrb	r3, [r3, #0]
 8008d44:	009b      	lsls	r3, r3, #2
 8008d46:	4413      	add	r3, r2
 8008d48:	881b      	ldrh	r3, [r3, #0]
 8008d4a:	b29b      	uxth	r3, r3
 8008d4c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008d50:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d54:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8008d58:	687a      	ldr	r2, [r7, #4]
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	781b      	ldrb	r3, [r3, #0]
 8008d5e:	009b      	lsls	r3, r3, #2
 8008d60:	441a      	add	r2, r3
 8008d62:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8008d66:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008d6a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008d6e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8008d72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d76:	b29b      	uxth	r3, r3
 8008d78:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	6a1a      	ldr	r2, [r3, #32]
 8008d7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008d82:	1ad2      	subs	r2, r2, r3
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008d88:	687a      	ldr	r2, [r7, #4]
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	781b      	ldrb	r3, [r3, #0]
 8008d8e:	009b      	lsls	r3, r3, #2
 8008d90:	4413      	add	r3, r2
 8008d92:	881b      	ldrh	r3, [r3, #0]
 8008d94:	b29b      	uxth	r3, r3
 8008d96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	f000 814f 	beq.w	800903e <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	633b      	str	r3, [r7, #48]	@ 0x30
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	785b      	ldrb	r3, [r3, #1]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d16b      	bne.n	8008e84 <USB_EPStartXfer+0x1de>
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008db6:	b29b      	uxth	r3, r3
 8008db8:	461a      	mov	r2, r3
 8008dba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dbc:	4413      	add	r3, r2
 8008dbe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	781b      	ldrb	r3, [r3, #0]
 8008dc4:	00da      	lsls	r2, r3, #3
 8008dc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dc8:	4413      	add	r3, r2
 8008dca:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008dce:	627b      	str	r3, [r7, #36]	@ 0x24
 8008dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dd2:	881b      	ldrh	r3, [r3, #0]
 8008dd4:	b29b      	uxth	r3, r3
 8008dd6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008dda:	b29a      	uxth	r2, r3
 8008ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dde:	801a      	strh	r2, [r3, #0]
 8008de0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d10a      	bne.n	8008dfe <USB_EPStartXfer+0x158>
 8008de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dea:	881b      	ldrh	r3, [r3, #0]
 8008dec:	b29b      	uxth	r3, r3
 8008dee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008df2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008df6:	b29a      	uxth	r2, r3
 8008df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dfa:	801a      	strh	r2, [r3, #0]
 8008dfc:	e05b      	b.n	8008eb6 <USB_EPStartXfer+0x210>
 8008dfe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008e02:	2b3e      	cmp	r3, #62	@ 0x3e
 8008e04:	d81c      	bhi.n	8008e40 <USB_EPStartXfer+0x19a>
 8008e06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008e0a:	085b      	lsrs	r3, r3, #1
 8008e0c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008e10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008e14:	f003 0301 	and.w	r3, r3, #1
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d004      	beq.n	8008e26 <USB_EPStartXfer+0x180>
 8008e1c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008e20:	3301      	adds	r3, #1
 8008e22:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e28:	881b      	ldrh	r3, [r3, #0]
 8008e2a:	b29a      	uxth	r2, r3
 8008e2c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008e30:	b29b      	uxth	r3, r3
 8008e32:	029b      	lsls	r3, r3, #10
 8008e34:	b29b      	uxth	r3, r3
 8008e36:	4313      	orrs	r3, r2
 8008e38:	b29a      	uxth	r2, r3
 8008e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e3c:	801a      	strh	r2, [r3, #0]
 8008e3e:	e03a      	b.n	8008eb6 <USB_EPStartXfer+0x210>
 8008e40:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008e44:	095b      	lsrs	r3, r3, #5
 8008e46:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008e4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008e4e:	f003 031f 	and.w	r3, r3, #31
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d104      	bne.n	8008e60 <USB_EPStartXfer+0x1ba>
 8008e56:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008e5a:	3b01      	subs	r3, #1
 8008e5c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e62:	881b      	ldrh	r3, [r3, #0]
 8008e64:	b29a      	uxth	r2, r3
 8008e66:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008e6a:	b29b      	uxth	r3, r3
 8008e6c:	029b      	lsls	r3, r3, #10
 8008e6e:	b29b      	uxth	r3, r3
 8008e70:	4313      	orrs	r3, r2
 8008e72:	b29b      	uxth	r3, r3
 8008e74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e7c:	b29a      	uxth	r2, r3
 8008e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e80:	801a      	strh	r2, [r3, #0]
 8008e82:	e018      	b.n	8008eb6 <USB_EPStartXfer+0x210>
 8008e84:	683b      	ldr	r3, [r7, #0]
 8008e86:	785b      	ldrb	r3, [r3, #1]
 8008e88:	2b01      	cmp	r3, #1
 8008e8a:	d114      	bne.n	8008eb6 <USB_EPStartXfer+0x210>
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008e92:	b29b      	uxth	r3, r3
 8008e94:	461a      	mov	r2, r3
 8008e96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e98:	4413      	add	r3, r2
 8008e9a:	633b      	str	r3, [r7, #48]	@ 0x30
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	781b      	ldrb	r3, [r3, #0]
 8008ea0:	00da      	lsls	r2, r3, #3
 8008ea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ea4:	4413      	add	r3, r2
 8008ea6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008eaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008eac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008eb0:	b29a      	uxth	r2, r3
 8008eb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008eb4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	895b      	ldrh	r3, [r3, #10]
 8008eba:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	6959      	ldr	r1, [r3, #20]
 8008ec2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008ec6:	b29b      	uxth	r3, r3
 8008ec8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008ecc:	6878      	ldr	r0, [r7, #4]
 8008ece:	f000 fdce 	bl	8009a6e <USB_WritePMA>
            ep->xfer_buff += len;
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	695a      	ldr	r2, [r3, #20]
 8008ed6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008eda:	441a      	add	r2, r3
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008ee0:	683b      	ldr	r3, [r7, #0]
 8008ee2:	6a1a      	ldr	r2, [r3, #32]
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	691b      	ldr	r3, [r3, #16]
 8008ee8:	429a      	cmp	r2, r3
 8008eea:	d907      	bls.n	8008efc <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	6a1a      	ldr	r2, [r3, #32]
 8008ef0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008ef4:	1ad2      	subs	r2, r2, r3
 8008ef6:	683b      	ldr	r3, [r7, #0]
 8008ef8:	621a      	str	r2, [r3, #32]
 8008efa:	e006      	b.n	8008f0a <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	6a1b      	ldr	r3, [r3, #32]
 8008f00:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	2200      	movs	r2, #0
 8008f08:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	785b      	ldrb	r3, [r3, #1]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d16b      	bne.n	8008fea <USB_EPStartXfer+0x344>
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	61bb      	str	r3, [r7, #24]
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008f1c:	b29b      	uxth	r3, r3
 8008f1e:	461a      	mov	r2, r3
 8008f20:	69bb      	ldr	r3, [r7, #24]
 8008f22:	4413      	add	r3, r2
 8008f24:	61bb      	str	r3, [r7, #24]
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	781b      	ldrb	r3, [r3, #0]
 8008f2a:	00da      	lsls	r2, r3, #3
 8008f2c:	69bb      	ldr	r3, [r7, #24]
 8008f2e:	4413      	add	r3, r2
 8008f30:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008f34:	617b      	str	r3, [r7, #20]
 8008f36:	697b      	ldr	r3, [r7, #20]
 8008f38:	881b      	ldrh	r3, [r3, #0]
 8008f3a:	b29b      	uxth	r3, r3
 8008f3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008f40:	b29a      	uxth	r2, r3
 8008f42:	697b      	ldr	r3, [r7, #20]
 8008f44:	801a      	strh	r2, [r3, #0]
 8008f46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d10a      	bne.n	8008f64 <USB_EPStartXfer+0x2be>
 8008f4e:	697b      	ldr	r3, [r7, #20]
 8008f50:	881b      	ldrh	r3, [r3, #0]
 8008f52:	b29b      	uxth	r3, r3
 8008f54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f5c:	b29a      	uxth	r2, r3
 8008f5e:	697b      	ldr	r3, [r7, #20]
 8008f60:	801a      	strh	r2, [r3, #0]
 8008f62:	e05d      	b.n	8009020 <USB_EPStartXfer+0x37a>
 8008f64:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008f68:	2b3e      	cmp	r3, #62	@ 0x3e
 8008f6a:	d81c      	bhi.n	8008fa6 <USB_EPStartXfer+0x300>
 8008f6c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008f70:	085b      	lsrs	r3, r3, #1
 8008f72:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008f76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008f7a:	f003 0301 	and.w	r3, r3, #1
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d004      	beq.n	8008f8c <USB_EPStartXfer+0x2e6>
 8008f82:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008f86:	3301      	adds	r3, #1
 8008f88:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008f8c:	697b      	ldr	r3, [r7, #20]
 8008f8e:	881b      	ldrh	r3, [r3, #0]
 8008f90:	b29a      	uxth	r2, r3
 8008f92:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008f96:	b29b      	uxth	r3, r3
 8008f98:	029b      	lsls	r3, r3, #10
 8008f9a:	b29b      	uxth	r3, r3
 8008f9c:	4313      	orrs	r3, r2
 8008f9e:	b29a      	uxth	r2, r3
 8008fa0:	697b      	ldr	r3, [r7, #20]
 8008fa2:	801a      	strh	r2, [r3, #0]
 8008fa4:	e03c      	b.n	8009020 <USB_EPStartXfer+0x37a>
 8008fa6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008faa:	095b      	lsrs	r3, r3, #5
 8008fac:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008fb0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008fb4:	f003 031f 	and.w	r3, r3, #31
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d104      	bne.n	8008fc6 <USB_EPStartXfer+0x320>
 8008fbc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008fc0:	3b01      	subs	r3, #1
 8008fc2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008fc6:	697b      	ldr	r3, [r7, #20]
 8008fc8:	881b      	ldrh	r3, [r3, #0]
 8008fca:	b29a      	uxth	r2, r3
 8008fcc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008fd0:	b29b      	uxth	r3, r3
 8008fd2:	029b      	lsls	r3, r3, #10
 8008fd4:	b29b      	uxth	r3, r3
 8008fd6:	4313      	orrs	r3, r2
 8008fd8:	b29b      	uxth	r3, r3
 8008fda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008fde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008fe2:	b29a      	uxth	r2, r3
 8008fe4:	697b      	ldr	r3, [r7, #20]
 8008fe6:	801a      	strh	r2, [r3, #0]
 8008fe8:	e01a      	b.n	8009020 <USB_EPStartXfer+0x37a>
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	785b      	ldrb	r3, [r3, #1]
 8008fee:	2b01      	cmp	r3, #1
 8008ff0:	d116      	bne.n	8009020 <USB_EPStartXfer+0x37a>
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	623b      	str	r3, [r7, #32]
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008ffc:	b29b      	uxth	r3, r3
 8008ffe:	461a      	mov	r2, r3
 8009000:	6a3b      	ldr	r3, [r7, #32]
 8009002:	4413      	add	r3, r2
 8009004:	623b      	str	r3, [r7, #32]
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	781b      	ldrb	r3, [r3, #0]
 800900a:	00da      	lsls	r2, r3, #3
 800900c:	6a3b      	ldr	r3, [r7, #32]
 800900e:	4413      	add	r3, r2
 8009010:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009014:	61fb      	str	r3, [r7, #28]
 8009016:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800901a:	b29a      	uxth	r2, r3
 800901c:	69fb      	ldr	r3, [r7, #28]
 800901e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009020:	683b      	ldr	r3, [r7, #0]
 8009022:	891b      	ldrh	r3, [r3, #8]
 8009024:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	6959      	ldr	r1, [r3, #20]
 800902c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009030:	b29b      	uxth	r3, r3
 8009032:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009036:	6878      	ldr	r0, [r7, #4]
 8009038:	f000 fd19 	bl	8009a6e <USB_WritePMA>
 800903c:	e2e2      	b.n	8009604 <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	785b      	ldrb	r3, [r3, #1]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d16b      	bne.n	800911e <USB_EPStartXfer+0x478>
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	64bb      	str	r3, [r7, #72]	@ 0x48
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009050:	b29b      	uxth	r3, r3
 8009052:	461a      	mov	r2, r3
 8009054:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009056:	4413      	add	r3, r2
 8009058:	64bb      	str	r3, [r7, #72]	@ 0x48
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	781b      	ldrb	r3, [r3, #0]
 800905e:	00da      	lsls	r2, r3, #3
 8009060:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009062:	4413      	add	r3, r2
 8009064:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009068:	647b      	str	r3, [r7, #68]	@ 0x44
 800906a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800906c:	881b      	ldrh	r3, [r3, #0]
 800906e:	b29b      	uxth	r3, r3
 8009070:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009074:	b29a      	uxth	r2, r3
 8009076:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009078:	801a      	strh	r2, [r3, #0]
 800907a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800907e:	2b00      	cmp	r3, #0
 8009080:	d10a      	bne.n	8009098 <USB_EPStartXfer+0x3f2>
 8009082:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009084:	881b      	ldrh	r3, [r3, #0]
 8009086:	b29b      	uxth	r3, r3
 8009088:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800908c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009090:	b29a      	uxth	r2, r3
 8009092:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009094:	801a      	strh	r2, [r3, #0]
 8009096:	e05d      	b.n	8009154 <USB_EPStartXfer+0x4ae>
 8009098:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800909c:	2b3e      	cmp	r3, #62	@ 0x3e
 800909e:	d81c      	bhi.n	80090da <USB_EPStartXfer+0x434>
 80090a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80090a4:	085b      	lsrs	r3, r3, #1
 80090a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80090aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80090ae:	f003 0301 	and.w	r3, r3, #1
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d004      	beq.n	80090c0 <USB_EPStartXfer+0x41a>
 80090b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80090ba:	3301      	adds	r3, #1
 80090bc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80090c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80090c2:	881b      	ldrh	r3, [r3, #0]
 80090c4:	b29a      	uxth	r2, r3
 80090c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80090ca:	b29b      	uxth	r3, r3
 80090cc:	029b      	lsls	r3, r3, #10
 80090ce:	b29b      	uxth	r3, r3
 80090d0:	4313      	orrs	r3, r2
 80090d2:	b29a      	uxth	r2, r3
 80090d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80090d6:	801a      	strh	r2, [r3, #0]
 80090d8:	e03c      	b.n	8009154 <USB_EPStartXfer+0x4ae>
 80090da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80090de:	095b      	lsrs	r3, r3, #5
 80090e0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80090e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80090e8:	f003 031f 	and.w	r3, r3, #31
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d104      	bne.n	80090fa <USB_EPStartXfer+0x454>
 80090f0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80090f4:	3b01      	subs	r3, #1
 80090f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80090fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80090fc:	881b      	ldrh	r3, [r3, #0]
 80090fe:	b29a      	uxth	r2, r3
 8009100:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009104:	b29b      	uxth	r3, r3
 8009106:	029b      	lsls	r3, r3, #10
 8009108:	b29b      	uxth	r3, r3
 800910a:	4313      	orrs	r3, r2
 800910c:	b29b      	uxth	r3, r3
 800910e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009112:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009116:	b29a      	uxth	r2, r3
 8009118:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800911a:	801a      	strh	r2, [r3, #0]
 800911c:	e01a      	b.n	8009154 <USB_EPStartXfer+0x4ae>
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	785b      	ldrb	r3, [r3, #1]
 8009122:	2b01      	cmp	r3, #1
 8009124:	d116      	bne.n	8009154 <USB_EPStartXfer+0x4ae>
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	653b      	str	r3, [r7, #80]	@ 0x50
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009130:	b29b      	uxth	r3, r3
 8009132:	461a      	mov	r2, r3
 8009134:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009136:	4413      	add	r3, r2
 8009138:	653b      	str	r3, [r7, #80]	@ 0x50
 800913a:	683b      	ldr	r3, [r7, #0]
 800913c:	781b      	ldrb	r3, [r3, #0]
 800913e:	00da      	lsls	r2, r3, #3
 8009140:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009142:	4413      	add	r3, r2
 8009144:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009148:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800914a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800914e:	b29a      	uxth	r2, r3
 8009150:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009152:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	891b      	ldrh	r3, [r3, #8]
 8009158:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	6959      	ldr	r1, [r3, #20]
 8009160:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009164:	b29b      	uxth	r3, r3
 8009166:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800916a:	6878      	ldr	r0, [r7, #4]
 800916c:	f000 fc7f 	bl	8009a6e <USB_WritePMA>
            ep->xfer_buff += len;
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	695a      	ldr	r2, [r3, #20]
 8009174:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009178:	441a      	add	r2, r3
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	6a1a      	ldr	r2, [r3, #32]
 8009182:	683b      	ldr	r3, [r7, #0]
 8009184:	691b      	ldr	r3, [r3, #16]
 8009186:	429a      	cmp	r2, r3
 8009188:	d907      	bls.n	800919a <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	6a1a      	ldr	r2, [r3, #32]
 800918e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009192:	1ad2      	subs	r2, r2, r3
 8009194:	683b      	ldr	r3, [r7, #0]
 8009196:	621a      	str	r2, [r3, #32]
 8009198:	e006      	b.n	80091a8 <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 800919a:	683b      	ldr	r3, [r7, #0]
 800919c:	6a1b      	ldr	r3, [r3, #32]
 800919e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	2200      	movs	r2, #0
 80091a6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	643b      	str	r3, [r7, #64]	@ 0x40
 80091ac:	683b      	ldr	r3, [r7, #0]
 80091ae:	785b      	ldrb	r3, [r3, #1]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d16b      	bne.n	800928c <USB_EPStartXfer+0x5e6>
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80091be:	b29b      	uxth	r3, r3
 80091c0:	461a      	mov	r2, r3
 80091c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091c4:	4413      	add	r3, r2
 80091c6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	781b      	ldrb	r3, [r3, #0]
 80091cc:	00da      	lsls	r2, r3, #3
 80091ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091d0:	4413      	add	r3, r2
 80091d2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80091d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80091d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091da:	881b      	ldrh	r3, [r3, #0]
 80091dc:	b29b      	uxth	r3, r3
 80091de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80091e2:	b29a      	uxth	r2, r3
 80091e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091e6:	801a      	strh	r2, [r3, #0]
 80091e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d10a      	bne.n	8009206 <USB_EPStartXfer+0x560>
 80091f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091f2:	881b      	ldrh	r3, [r3, #0]
 80091f4:	b29b      	uxth	r3, r3
 80091f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80091fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80091fe:	b29a      	uxth	r2, r3
 8009200:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009202:	801a      	strh	r2, [r3, #0]
 8009204:	e05b      	b.n	80092be <USB_EPStartXfer+0x618>
 8009206:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800920a:	2b3e      	cmp	r3, #62	@ 0x3e
 800920c:	d81c      	bhi.n	8009248 <USB_EPStartXfer+0x5a2>
 800920e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009212:	085b      	lsrs	r3, r3, #1
 8009214:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009218:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800921c:	f003 0301 	and.w	r3, r3, #1
 8009220:	2b00      	cmp	r3, #0
 8009222:	d004      	beq.n	800922e <USB_EPStartXfer+0x588>
 8009224:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009228:	3301      	adds	r3, #1
 800922a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800922e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009230:	881b      	ldrh	r3, [r3, #0]
 8009232:	b29a      	uxth	r2, r3
 8009234:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009238:	b29b      	uxth	r3, r3
 800923a:	029b      	lsls	r3, r3, #10
 800923c:	b29b      	uxth	r3, r3
 800923e:	4313      	orrs	r3, r2
 8009240:	b29a      	uxth	r2, r3
 8009242:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009244:	801a      	strh	r2, [r3, #0]
 8009246:	e03a      	b.n	80092be <USB_EPStartXfer+0x618>
 8009248:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800924c:	095b      	lsrs	r3, r3, #5
 800924e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009252:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009256:	f003 031f 	and.w	r3, r3, #31
 800925a:	2b00      	cmp	r3, #0
 800925c:	d104      	bne.n	8009268 <USB_EPStartXfer+0x5c2>
 800925e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009262:	3b01      	subs	r3, #1
 8009264:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009268:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800926a:	881b      	ldrh	r3, [r3, #0]
 800926c:	b29a      	uxth	r2, r3
 800926e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009272:	b29b      	uxth	r3, r3
 8009274:	029b      	lsls	r3, r3, #10
 8009276:	b29b      	uxth	r3, r3
 8009278:	4313      	orrs	r3, r2
 800927a:	b29b      	uxth	r3, r3
 800927c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009280:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009284:	b29a      	uxth	r2, r3
 8009286:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009288:	801a      	strh	r2, [r3, #0]
 800928a:	e018      	b.n	80092be <USB_EPStartXfer+0x618>
 800928c:	683b      	ldr	r3, [r7, #0]
 800928e:	785b      	ldrb	r3, [r3, #1]
 8009290:	2b01      	cmp	r3, #1
 8009292:	d114      	bne.n	80092be <USB_EPStartXfer+0x618>
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800929a:	b29b      	uxth	r3, r3
 800929c:	461a      	mov	r2, r3
 800929e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80092a0:	4413      	add	r3, r2
 80092a2:	643b      	str	r3, [r7, #64]	@ 0x40
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	781b      	ldrb	r3, [r3, #0]
 80092a8:	00da      	lsls	r2, r3, #3
 80092aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80092ac:	4413      	add	r3, r2
 80092ae:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80092b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80092b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80092b8:	b29a      	uxth	r2, r3
 80092ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092bc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80092be:	683b      	ldr	r3, [r7, #0]
 80092c0:	895b      	ldrh	r3, [r3, #10]
 80092c2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	6959      	ldr	r1, [r3, #20]
 80092ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80092ce:	b29b      	uxth	r3, r3
 80092d0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80092d4:	6878      	ldr	r0, [r7, #4]
 80092d6:	f000 fbca 	bl	8009a6e <USB_WritePMA>
 80092da:	e193      	b.n	8009604 <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	6a1b      	ldr	r3, [r3, #32]
 80092e0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80092e4:	687a      	ldr	r2, [r7, #4]
 80092e6:	683b      	ldr	r3, [r7, #0]
 80092e8:	781b      	ldrb	r3, [r3, #0]
 80092ea:	009b      	lsls	r3, r3, #2
 80092ec:	4413      	add	r3, r2
 80092ee:	881b      	ldrh	r3, [r3, #0]
 80092f0:	b29b      	uxth	r3, r3
 80092f2:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80092f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80092fa:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80092fe:	687a      	ldr	r2, [r7, #4]
 8009300:	683b      	ldr	r3, [r7, #0]
 8009302:	781b      	ldrb	r3, [r3, #0]
 8009304:	009b      	lsls	r3, r3, #2
 8009306:	441a      	add	r2, r3
 8009308:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800930c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009310:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009314:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009318:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800931c:	b29b      	uxth	r3, r3
 800931e:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800932a:	b29b      	uxth	r3, r3
 800932c:	461a      	mov	r2, r3
 800932e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009330:	4413      	add	r3, r2
 8009332:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	781b      	ldrb	r3, [r3, #0]
 8009338:	00da      	lsls	r2, r3, #3
 800933a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800933c:	4413      	add	r3, r2
 800933e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009342:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009344:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009348:	b29a      	uxth	r2, r3
 800934a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800934c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800934e:	683b      	ldr	r3, [r7, #0]
 8009350:	891b      	ldrh	r3, [r3, #8]
 8009352:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	6959      	ldr	r1, [r3, #20]
 800935a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800935e:	b29b      	uxth	r3, r3
 8009360:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009364:	6878      	ldr	r0, [r7, #4]
 8009366:	f000 fb82 	bl	8009a6e <USB_WritePMA>
 800936a:	e14b      	b.n	8009604 <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800936c:	683b      	ldr	r3, [r7, #0]
 800936e:	6a1a      	ldr	r2, [r3, #32]
 8009370:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009374:	1ad2      	subs	r2, r2, r3
 8009376:	683b      	ldr	r3, [r7, #0]
 8009378:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800937a:	687a      	ldr	r2, [r7, #4]
 800937c:	683b      	ldr	r3, [r7, #0]
 800937e:	781b      	ldrb	r3, [r3, #0]
 8009380:	009b      	lsls	r3, r3, #2
 8009382:	4413      	add	r3, r2
 8009384:	881b      	ldrh	r3, [r3, #0]
 8009386:	b29b      	uxth	r3, r3
 8009388:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800938c:	2b00      	cmp	r3, #0
 800938e:	f000 809a 	beq.w	80094c6 <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	673b      	str	r3, [r7, #112]	@ 0x70
 8009396:	683b      	ldr	r3, [r7, #0]
 8009398:	785b      	ldrb	r3, [r3, #1]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d16b      	bne.n	8009476 <USB_EPStartXfer+0x7d0>
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80093a8:	b29b      	uxth	r3, r3
 80093aa:	461a      	mov	r2, r3
 80093ac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80093ae:	4413      	add	r3, r2
 80093b0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	781b      	ldrb	r3, [r3, #0]
 80093b6:	00da      	lsls	r2, r3, #3
 80093b8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80093ba:	4413      	add	r3, r2
 80093bc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80093c0:	667b      	str	r3, [r7, #100]	@ 0x64
 80093c2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80093c4:	881b      	ldrh	r3, [r3, #0]
 80093c6:	b29b      	uxth	r3, r3
 80093c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80093cc:	b29a      	uxth	r2, r3
 80093ce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80093d0:	801a      	strh	r2, [r3, #0]
 80093d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d10a      	bne.n	80093f0 <USB_EPStartXfer+0x74a>
 80093da:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80093dc:	881b      	ldrh	r3, [r3, #0]
 80093de:	b29b      	uxth	r3, r3
 80093e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80093e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80093e8:	b29a      	uxth	r2, r3
 80093ea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80093ec:	801a      	strh	r2, [r3, #0]
 80093ee:	e05b      	b.n	80094a8 <USB_EPStartXfer+0x802>
 80093f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80093f4:	2b3e      	cmp	r3, #62	@ 0x3e
 80093f6:	d81c      	bhi.n	8009432 <USB_EPStartXfer+0x78c>
 80093f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80093fc:	085b      	lsrs	r3, r3, #1
 80093fe:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009402:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009406:	f003 0301 	and.w	r3, r3, #1
 800940a:	2b00      	cmp	r3, #0
 800940c:	d004      	beq.n	8009418 <USB_EPStartXfer+0x772>
 800940e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009412:	3301      	adds	r3, #1
 8009414:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009418:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800941a:	881b      	ldrh	r3, [r3, #0]
 800941c:	b29a      	uxth	r2, r3
 800941e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009422:	b29b      	uxth	r3, r3
 8009424:	029b      	lsls	r3, r3, #10
 8009426:	b29b      	uxth	r3, r3
 8009428:	4313      	orrs	r3, r2
 800942a:	b29a      	uxth	r2, r3
 800942c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800942e:	801a      	strh	r2, [r3, #0]
 8009430:	e03a      	b.n	80094a8 <USB_EPStartXfer+0x802>
 8009432:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009436:	095b      	lsrs	r3, r3, #5
 8009438:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800943c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009440:	f003 031f 	and.w	r3, r3, #31
 8009444:	2b00      	cmp	r3, #0
 8009446:	d104      	bne.n	8009452 <USB_EPStartXfer+0x7ac>
 8009448:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800944c:	3b01      	subs	r3, #1
 800944e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009452:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009454:	881b      	ldrh	r3, [r3, #0]
 8009456:	b29a      	uxth	r2, r3
 8009458:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800945c:	b29b      	uxth	r3, r3
 800945e:	029b      	lsls	r3, r3, #10
 8009460:	b29b      	uxth	r3, r3
 8009462:	4313      	orrs	r3, r2
 8009464:	b29b      	uxth	r3, r3
 8009466:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800946a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800946e:	b29a      	uxth	r2, r3
 8009470:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009472:	801a      	strh	r2, [r3, #0]
 8009474:	e018      	b.n	80094a8 <USB_EPStartXfer+0x802>
 8009476:	683b      	ldr	r3, [r7, #0]
 8009478:	785b      	ldrb	r3, [r3, #1]
 800947a:	2b01      	cmp	r3, #1
 800947c:	d114      	bne.n	80094a8 <USB_EPStartXfer+0x802>
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009484:	b29b      	uxth	r3, r3
 8009486:	461a      	mov	r2, r3
 8009488:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800948a:	4413      	add	r3, r2
 800948c:	673b      	str	r3, [r7, #112]	@ 0x70
 800948e:	683b      	ldr	r3, [r7, #0]
 8009490:	781b      	ldrb	r3, [r3, #0]
 8009492:	00da      	lsls	r2, r3, #3
 8009494:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009496:	4413      	add	r3, r2
 8009498:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800949c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800949e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80094a2:	b29a      	uxth	r2, r3
 80094a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80094a6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	895b      	ldrh	r3, [r3, #10]
 80094ac:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80094b0:	683b      	ldr	r3, [r7, #0]
 80094b2:	6959      	ldr	r1, [r3, #20]
 80094b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80094b8:	b29b      	uxth	r3, r3
 80094ba:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80094be:	6878      	ldr	r0, [r7, #4]
 80094c0:	f000 fad5 	bl	8009a6e <USB_WritePMA>
 80094c4:	e09e      	b.n	8009604 <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80094c6:	683b      	ldr	r3, [r7, #0]
 80094c8:	785b      	ldrb	r3, [r3, #1]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d16b      	bne.n	80095a6 <USB_EPStartXfer+0x900>
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80094d8:	b29b      	uxth	r3, r3
 80094da:	461a      	mov	r2, r3
 80094dc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80094de:	4413      	add	r3, r2
 80094e0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	781b      	ldrb	r3, [r3, #0]
 80094e6:	00da      	lsls	r2, r3, #3
 80094e8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80094ea:	4413      	add	r3, r2
 80094ec:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80094f0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80094f2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80094f4:	881b      	ldrh	r3, [r3, #0]
 80094f6:	b29b      	uxth	r3, r3
 80094f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80094fc:	b29a      	uxth	r2, r3
 80094fe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009500:	801a      	strh	r2, [r3, #0]
 8009502:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009506:	2b00      	cmp	r3, #0
 8009508:	d10a      	bne.n	8009520 <USB_EPStartXfer+0x87a>
 800950a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800950c:	881b      	ldrh	r3, [r3, #0]
 800950e:	b29b      	uxth	r3, r3
 8009510:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009514:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009518:	b29a      	uxth	r2, r3
 800951a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800951c:	801a      	strh	r2, [r3, #0]
 800951e:	e063      	b.n	80095e8 <USB_EPStartXfer+0x942>
 8009520:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009524:	2b3e      	cmp	r3, #62	@ 0x3e
 8009526:	d81c      	bhi.n	8009562 <USB_EPStartXfer+0x8bc>
 8009528:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800952c:	085b      	lsrs	r3, r3, #1
 800952e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009532:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009536:	f003 0301 	and.w	r3, r3, #1
 800953a:	2b00      	cmp	r3, #0
 800953c:	d004      	beq.n	8009548 <USB_EPStartXfer+0x8a2>
 800953e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009542:	3301      	adds	r3, #1
 8009544:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009548:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800954a:	881b      	ldrh	r3, [r3, #0]
 800954c:	b29a      	uxth	r2, r3
 800954e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009552:	b29b      	uxth	r3, r3
 8009554:	029b      	lsls	r3, r3, #10
 8009556:	b29b      	uxth	r3, r3
 8009558:	4313      	orrs	r3, r2
 800955a:	b29a      	uxth	r2, r3
 800955c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800955e:	801a      	strh	r2, [r3, #0]
 8009560:	e042      	b.n	80095e8 <USB_EPStartXfer+0x942>
 8009562:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009566:	095b      	lsrs	r3, r3, #5
 8009568:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800956c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009570:	f003 031f 	and.w	r3, r3, #31
 8009574:	2b00      	cmp	r3, #0
 8009576:	d104      	bne.n	8009582 <USB_EPStartXfer+0x8dc>
 8009578:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800957c:	3b01      	subs	r3, #1
 800957e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009582:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009584:	881b      	ldrh	r3, [r3, #0]
 8009586:	b29a      	uxth	r2, r3
 8009588:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800958c:	b29b      	uxth	r3, r3
 800958e:	029b      	lsls	r3, r3, #10
 8009590:	b29b      	uxth	r3, r3
 8009592:	4313      	orrs	r3, r2
 8009594:	b29b      	uxth	r3, r3
 8009596:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800959a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800959e:	b29a      	uxth	r2, r3
 80095a0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80095a2:	801a      	strh	r2, [r3, #0]
 80095a4:	e020      	b.n	80095e8 <USB_EPStartXfer+0x942>
 80095a6:	683b      	ldr	r3, [r7, #0]
 80095a8:	785b      	ldrb	r3, [r3, #1]
 80095aa:	2b01      	cmp	r3, #1
 80095ac:	d11c      	bne.n	80095e8 <USB_EPStartXfer+0x942>
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80095ba:	b29b      	uxth	r3, r3
 80095bc:	461a      	mov	r2, r3
 80095be:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80095c2:	4413      	add	r3, r2
 80095c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	781b      	ldrb	r3, [r3, #0]
 80095cc:	00da      	lsls	r2, r3, #3
 80095ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80095d2:	4413      	add	r3, r2
 80095d4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80095d8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80095dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80095e0:	b29a      	uxth	r2, r3
 80095e2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80095e6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	891b      	ldrh	r3, [r3, #8]
 80095ec:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80095f0:	683b      	ldr	r3, [r7, #0]
 80095f2:	6959      	ldr	r1, [r3, #20]
 80095f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80095f8:	b29b      	uxth	r3, r3
 80095fa:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80095fe:	6878      	ldr	r0, [r7, #4]
 8009600:	f000 fa35 	bl	8009a6e <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8009604:	687a      	ldr	r2, [r7, #4]
 8009606:	683b      	ldr	r3, [r7, #0]
 8009608:	781b      	ldrb	r3, [r3, #0]
 800960a:	009b      	lsls	r3, r3, #2
 800960c:	4413      	add	r3, r2
 800960e:	881b      	ldrh	r3, [r3, #0]
 8009610:	b29b      	uxth	r3, r3
 8009612:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009616:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800961a:	817b      	strh	r3, [r7, #10]
 800961c:	897b      	ldrh	r3, [r7, #10]
 800961e:	f083 0310 	eor.w	r3, r3, #16
 8009622:	817b      	strh	r3, [r7, #10]
 8009624:	897b      	ldrh	r3, [r7, #10]
 8009626:	f083 0320 	eor.w	r3, r3, #32
 800962a:	817b      	strh	r3, [r7, #10]
 800962c:	687a      	ldr	r2, [r7, #4]
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	781b      	ldrb	r3, [r3, #0]
 8009632:	009b      	lsls	r3, r3, #2
 8009634:	441a      	add	r2, r3
 8009636:	897b      	ldrh	r3, [r7, #10]
 8009638:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800963c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009640:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009644:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009648:	b29b      	uxth	r3, r3
 800964a:	8013      	strh	r3, [r2, #0]
 800964c:	e0d5      	b.n	80097fa <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800964e:	683b      	ldr	r3, [r7, #0]
 8009650:	7b1b      	ldrb	r3, [r3, #12]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d156      	bne.n	8009704 <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 8009656:	683b      	ldr	r3, [r7, #0]
 8009658:	699b      	ldr	r3, [r3, #24]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d122      	bne.n	80096a4 <USB_EPStartXfer+0x9fe>
 800965e:	683b      	ldr	r3, [r7, #0]
 8009660:	78db      	ldrb	r3, [r3, #3]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d11e      	bne.n	80096a4 <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 8009666:	687a      	ldr	r2, [r7, #4]
 8009668:	683b      	ldr	r3, [r7, #0]
 800966a:	781b      	ldrb	r3, [r3, #0]
 800966c:	009b      	lsls	r3, r3, #2
 800966e:	4413      	add	r3, r2
 8009670:	881b      	ldrh	r3, [r3, #0]
 8009672:	b29b      	uxth	r3, r3
 8009674:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009678:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800967c:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 8009680:	687a      	ldr	r2, [r7, #4]
 8009682:	683b      	ldr	r3, [r7, #0]
 8009684:	781b      	ldrb	r3, [r3, #0]
 8009686:	009b      	lsls	r3, r3, #2
 8009688:	441a      	add	r2, r3
 800968a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800968e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009692:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009696:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800969a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800969e:	b29b      	uxth	r3, r3
 80096a0:	8013      	strh	r3, [r2, #0]
 80096a2:	e01d      	b.n	80096e0 <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 80096a4:	687a      	ldr	r2, [r7, #4]
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	781b      	ldrb	r3, [r3, #0]
 80096aa:	009b      	lsls	r3, r3, #2
 80096ac:	4413      	add	r3, r2
 80096ae:	881b      	ldrh	r3, [r3, #0]
 80096b0:	b29b      	uxth	r3, r3
 80096b2:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80096b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80096ba:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 80096be:	687a      	ldr	r2, [r7, #4]
 80096c0:	683b      	ldr	r3, [r7, #0]
 80096c2:	781b      	ldrb	r3, [r3, #0]
 80096c4:	009b      	lsls	r3, r3, #2
 80096c6:	441a      	add	r2, r3
 80096c8:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 80096cc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80096d0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80096d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80096d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80096dc:	b29b      	uxth	r3, r3
 80096de:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80096e0:	683b      	ldr	r3, [r7, #0]
 80096e2:	699a      	ldr	r2, [r3, #24]
 80096e4:	683b      	ldr	r3, [r7, #0]
 80096e6:	691b      	ldr	r3, [r3, #16]
 80096e8:	429a      	cmp	r2, r3
 80096ea:	d907      	bls.n	80096fc <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	699a      	ldr	r2, [r3, #24]
 80096f0:	683b      	ldr	r3, [r7, #0]
 80096f2:	691b      	ldr	r3, [r3, #16]
 80096f4:	1ad2      	subs	r2, r2, r3
 80096f6:	683b      	ldr	r3, [r7, #0]
 80096f8:	619a      	str	r2, [r3, #24]
 80096fa:	e054      	b.n	80097a6 <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 80096fc:	683b      	ldr	r3, [r7, #0]
 80096fe:	2200      	movs	r2, #0
 8009700:	619a      	str	r2, [r3, #24]
 8009702:	e050      	b.n	80097a6 <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8009704:	683b      	ldr	r3, [r7, #0]
 8009706:	78db      	ldrb	r3, [r3, #3]
 8009708:	2b02      	cmp	r3, #2
 800970a:	d142      	bne.n	8009792 <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800970c:	683b      	ldr	r3, [r7, #0]
 800970e:	69db      	ldr	r3, [r3, #28]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d048      	beq.n	80097a6 <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8009714:	687a      	ldr	r2, [r7, #4]
 8009716:	683b      	ldr	r3, [r7, #0]
 8009718:	781b      	ldrb	r3, [r3, #0]
 800971a:	009b      	lsls	r3, r3, #2
 800971c:	4413      	add	r3, r2
 800971e:	881b      	ldrh	r3, [r3, #0]
 8009720:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009724:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8009728:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800972c:	2b00      	cmp	r3, #0
 800972e:	d005      	beq.n	800973c <USB_EPStartXfer+0xa96>
 8009730:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8009734:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009738:	2b00      	cmp	r3, #0
 800973a:	d10b      	bne.n	8009754 <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800973c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8009740:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009744:	2b00      	cmp	r3, #0
 8009746:	d12e      	bne.n	80097a6 <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009748:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800974c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009750:	2b00      	cmp	r3, #0
 8009752:	d128      	bne.n	80097a6 <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8009754:	687a      	ldr	r2, [r7, #4]
 8009756:	683b      	ldr	r3, [r7, #0]
 8009758:	781b      	ldrb	r3, [r3, #0]
 800975a:	009b      	lsls	r3, r3, #2
 800975c:	4413      	add	r3, r2
 800975e:	881b      	ldrh	r3, [r3, #0]
 8009760:	b29b      	uxth	r3, r3
 8009762:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009766:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800976a:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 800976e:	687a      	ldr	r2, [r7, #4]
 8009770:	683b      	ldr	r3, [r7, #0]
 8009772:	781b      	ldrb	r3, [r3, #0]
 8009774:	009b      	lsls	r3, r3, #2
 8009776:	441a      	add	r2, r3
 8009778:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 800977c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009780:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009784:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009788:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800978c:	b29b      	uxth	r3, r3
 800978e:	8013      	strh	r3, [r2, #0]
 8009790:	e009      	b.n	80097a6 <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8009792:	683b      	ldr	r3, [r7, #0]
 8009794:	78db      	ldrb	r3, [r3, #3]
 8009796:	2b01      	cmp	r3, #1
 8009798:	d103      	bne.n	80097a2 <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 800979a:	683b      	ldr	r3, [r7, #0]
 800979c:	2200      	movs	r2, #0
 800979e:	619a      	str	r2, [r3, #24]
 80097a0:	e001      	b.n	80097a6 <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 80097a2:	2301      	movs	r3, #1
 80097a4:	e02a      	b.n	80097fc <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80097a6:	687a      	ldr	r2, [r7, #4]
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	781b      	ldrb	r3, [r3, #0]
 80097ac:	009b      	lsls	r3, r3, #2
 80097ae:	4413      	add	r3, r2
 80097b0:	881b      	ldrh	r3, [r3, #0]
 80097b2:	b29b      	uxth	r3, r3
 80097b4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80097b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80097bc:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80097c0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80097c4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80097c8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80097cc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80097d0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80097d4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80097d8:	687a      	ldr	r2, [r7, #4]
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	781b      	ldrb	r3, [r3, #0]
 80097de:	009b      	lsls	r3, r3, #2
 80097e0:	441a      	add	r2, r3
 80097e2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80097e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80097ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80097ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80097f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80097f6:	b29b      	uxth	r3, r3
 80097f8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80097fa:	2300      	movs	r3, #0
}
 80097fc:	4618      	mov	r0, r3
 80097fe:	37b0      	adds	r7, #176	@ 0xb0
 8009800:	46bd      	mov	sp, r7
 8009802:	bd80      	pop	{r7, pc}

08009804 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009804:	b480      	push	{r7}
 8009806:	b085      	sub	sp, #20
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
 800980c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800980e:	683b      	ldr	r3, [r7, #0]
 8009810:	785b      	ldrb	r3, [r3, #1]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d020      	beq.n	8009858 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8009816:	687a      	ldr	r2, [r7, #4]
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	781b      	ldrb	r3, [r3, #0]
 800981c:	009b      	lsls	r3, r3, #2
 800981e:	4413      	add	r3, r2
 8009820:	881b      	ldrh	r3, [r3, #0]
 8009822:	b29b      	uxth	r3, r3
 8009824:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009828:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800982c:	81bb      	strh	r3, [r7, #12]
 800982e:	89bb      	ldrh	r3, [r7, #12]
 8009830:	f083 0310 	eor.w	r3, r3, #16
 8009834:	81bb      	strh	r3, [r7, #12]
 8009836:	687a      	ldr	r2, [r7, #4]
 8009838:	683b      	ldr	r3, [r7, #0]
 800983a:	781b      	ldrb	r3, [r3, #0]
 800983c:	009b      	lsls	r3, r3, #2
 800983e:	441a      	add	r2, r3
 8009840:	89bb      	ldrh	r3, [r7, #12]
 8009842:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009846:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800984a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800984e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009852:	b29b      	uxth	r3, r3
 8009854:	8013      	strh	r3, [r2, #0]
 8009856:	e01f      	b.n	8009898 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8009858:	687a      	ldr	r2, [r7, #4]
 800985a:	683b      	ldr	r3, [r7, #0]
 800985c:	781b      	ldrb	r3, [r3, #0]
 800985e:	009b      	lsls	r3, r3, #2
 8009860:	4413      	add	r3, r2
 8009862:	881b      	ldrh	r3, [r3, #0]
 8009864:	b29b      	uxth	r3, r3
 8009866:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800986a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800986e:	81fb      	strh	r3, [r7, #14]
 8009870:	89fb      	ldrh	r3, [r7, #14]
 8009872:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009876:	81fb      	strh	r3, [r7, #14]
 8009878:	687a      	ldr	r2, [r7, #4]
 800987a:	683b      	ldr	r3, [r7, #0]
 800987c:	781b      	ldrb	r3, [r3, #0]
 800987e:	009b      	lsls	r3, r3, #2
 8009880:	441a      	add	r2, r3
 8009882:	89fb      	ldrh	r3, [r7, #14]
 8009884:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009888:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800988c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009890:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009894:	b29b      	uxth	r3, r3
 8009896:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009898:	2300      	movs	r3, #0
}
 800989a:	4618      	mov	r0, r3
 800989c:	3714      	adds	r7, #20
 800989e:	46bd      	mov	sp, r7
 80098a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a4:	4770      	bx	lr

080098a6 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80098a6:	b480      	push	{r7}
 80098a8:	b087      	sub	sp, #28
 80098aa:	af00      	add	r7, sp, #0
 80098ac:	6078      	str	r0, [r7, #4]
 80098ae:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80098b0:	683b      	ldr	r3, [r7, #0]
 80098b2:	785b      	ldrb	r3, [r3, #1]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d04c      	beq.n	8009952 <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80098b8:	687a      	ldr	r2, [r7, #4]
 80098ba:	683b      	ldr	r3, [r7, #0]
 80098bc:	781b      	ldrb	r3, [r3, #0]
 80098be:	009b      	lsls	r3, r3, #2
 80098c0:	4413      	add	r3, r2
 80098c2:	881b      	ldrh	r3, [r3, #0]
 80098c4:	823b      	strh	r3, [r7, #16]
 80098c6:	8a3b      	ldrh	r3, [r7, #16]
 80098c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d01b      	beq.n	8009908 <USB_EPClearStall+0x62>
 80098d0:	687a      	ldr	r2, [r7, #4]
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	781b      	ldrb	r3, [r3, #0]
 80098d6:	009b      	lsls	r3, r3, #2
 80098d8:	4413      	add	r3, r2
 80098da:	881b      	ldrh	r3, [r3, #0]
 80098dc:	b29b      	uxth	r3, r3
 80098de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80098e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80098e6:	81fb      	strh	r3, [r7, #14]
 80098e8:	687a      	ldr	r2, [r7, #4]
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	781b      	ldrb	r3, [r3, #0]
 80098ee:	009b      	lsls	r3, r3, #2
 80098f0:	441a      	add	r2, r3
 80098f2:	89fb      	ldrh	r3, [r7, #14]
 80098f4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80098f8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80098fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009900:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009904:	b29b      	uxth	r3, r3
 8009906:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8009908:	683b      	ldr	r3, [r7, #0]
 800990a:	78db      	ldrb	r3, [r3, #3]
 800990c:	2b01      	cmp	r3, #1
 800990e:	d06c      	beq.n	80099ea <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009910:	687a      	ldr	r2, [r7, #4]
 8009912:	683b      	ldr	r3, [r7, #0]
 8009914:	781b      	ldrb	r3, [r3, #0]
 8009916:	009b      	lsls	r3, r3, #2
 8009918:	4413      	add	r3, r2
 800991a:	881b      	ldrh	r3, [r3, #0]
 800991c:	b29b      	uxth	r3, r3
 800991e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009922:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009926:	81bb      	strh	r3, [r7, #12]
 8009928:	89bb      	ldrh	r3, [r7, #12]
 800992a:	f083 0320 	eor.w	r3, r3, #32
 800992e:	81bb      	strh	r3, [r7, #12]
 8009930:	687a      	ldr	r2, [r7, #4]
 8009932:	683b      	ldr	r3, [r7, #0]
 8009934:	781b      	ldrb	r3, [r3, #0]
 8009936:	009b      	lsls	r3, r3, #2
 8009938:	441a      	add	r2, r3
 800993a:	89bb      	ldrh	r3, [r7, #12]
 800993c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009940:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009944:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009948:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800994c:	b29b      	uxth	r3, r3
 800994e:	8013      	strh	r3, [r2, #0]
 8009950:	e04b      	b.n	80099ea <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009952:	687a      	ldr	r2, [r7, #4]
 8009954:	683b      	ldr	r3, [r7, #0]
 8009956:	781b      	ldrb	r3, [r3, #0]
 8009958:	009b      	lsls	r3, r3, #2
 800995a:	4413      	add	r3, r2
 800995c:	881b      	ldrh	r3, [r3, #0]
 800995e:	82fb      	strh	r3, [r7, #22]
 8009960:	8afb      	ldrh	r3, [r7, #22]
 8009962:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009966:	2b00      	cmp	r3, #0
 8009968:	d01b      	beq.n	80099a2 <USB_EPClearStall+0xfc>
 800996a:	687a      	ldr	r2, [r7, #4]
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	781b      	ldrb	r3, [r3, #0]
 8009970:	009b      	lsls	r3, r3, #2
 8009972:	4413      	add	r3, r2
 8009974:	881b      	ldrh	r3, [r3, #0]
 8009976:	b29b      	uxth	r3, r3
 8009978:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800997c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009980:	82bb      	strh	r3, [r7, #20]
 8009982:	687a      	ldr	r2, [r7, #4]
 8009984:	683b      	ldr	r3, [r7, #0]
 8009986:	781b      	ldrb	r3, [r3, #0]
 8009988:	009b      	lsls	r3, r3, #2
 800998a:	441a      	add	r2, r3
 800998c:	8abb      	ldrh	r3, [r7, #20]
 800998e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009992:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009996:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800999a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800999e:	b29b      	uxth	r3, r3
 80099a0:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80099a2:	687a      	ldr	r2, [r7, #4]
 80099a4:	683b      	ldr	r3, [r7, #0]
 80099a6:	781b      	ldrb	r3, [r3, #0]
 80099a8:	009b      	lsls	r3, r3, #2
 80099aa:	4413      	add	r3, r2
 80099ac:	881b      	ldrh	r3, [r3, #0]
 80099ae:	b29b      	uxth	r3, r3
 80099b0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80099b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80099b8:	827b      	strh	r3, [r7, #18]
 80099ba:	8a7b      	ldrh	r3, [r7, #18]
 80099bc:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80099c0:	827b      	strh	r3, [r7, #18]
 80099c2:	8a7b      	ldrh	r3, [r7, #18]
 80099c4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80099c8:	827b      	strh	r3, [r7, #18]
 80099ca:	687a      	ldr	r2, [r7, #4]
 80099cc:	683b      	ldr	r3, [r7, #0]
 80099ce:	781b      	ldrb	r3, [r3, #0]
 80099d0:	009b      	lsls	r3, r3, #2
 80099d2:	441a      	add	r2, r3
 80099d4:	8a7b      	ldrh	r3, [r7, #18]
 80099d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80099da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80099de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80099e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80099e6:	b29b      	uxth	r3, r3
 80099e8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80099ea:	2300      	movs	r3, #0
}
 80099ec:	4618      	mov	r0, r3
 80099ee:	371c      	adds	r7, #28
 80099f0:	46bd      	mov	sp, r7
 80099f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f6:	4770      	bx	lr

080099f8 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80099f8:	b480      	push	{r7}
 80099fa:	b083      	sub	sp, #12
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
 8009a00:	460b      	mov	r3, r1
 8009a02:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8009a04:	78fb      	ldrb	r3, [r7, #3]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d103      	bne.n	8009a12 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	2280      	movs	r2, #128	@ 0x80
 8009a0e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8009a12:	2300      	movs	r3, #0
}
 8009a14:	4618      	mov	r0, r3
 8009a16:	370c      	adds	r7, #12
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1e:	4770      	bx	lr

08009a20 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8009a20:	b480      	push	{r7}
 8009a22:	b083      	sub	sp, #12
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8009a2e:	b29b      	uxth	r3, r3
 8009a30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a38:	b29a      	uxth	r2, r3
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8009a40:	2300      	movs	r3, #0
}
 8009a42:	4618      	mov	r0, r3
 8009a44:	370c      	adds	r7, #12
 8009a46:	46bd      	mov	sp, r7
 8009a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4c:	4770      	bx	lr

08009a4e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8009a4e:	b480      	push	{r7}
 8009a50:	b085      	sub	sp, #20
 8009a52:	af00      	add	r7, sp, #0
 8009a54:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8009a5c:	b29b      	uxth	r3, r3
 8009a5e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8009a60:	68fb      	ldr	r3, [r7, #12]
}
 8009a62:	4618      	mov	r0, r3
 8009a64:	3714      	adds	r7, #20
 8009a66:	46bd      	mov	sp, r7
 8009a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6c:	4770      	bx	lr

08009a6e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009a6e:	b480      	push	{r7}
 8009a70:	b08b      	sub	sp, #44	@ 0x2c
 8009a72:	af00      	add	r7, sp, #0
 8009a74:	60f8      	str	r0, [r7, #12]
 8009a76:	60b9      	str	r1, [r7, #8]
 8009a78:	4611      	mov	r1, r2
 8009a7a:	461a      	mov	r2, r3
 8009a7c:	460b      	mov	r3, r1
 8009a7e:	80fb      	strh	r3, [r7, #6]
 8009a80:	4613      	mov	r3, r2
 8009a82:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009a84:	88bb      	ldrh	r3, [r7, #4]
 8009a86:	3301      	adds	r3, #1
 8009a88:	085b      	lsrs	r3, r3, #1
 8009a8a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009a90:	68bb      	ldr	r3, [r7, #8]
 8009a92:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009a94:	88fa      	ldrh	r2, [r7, #6]
 8009a96:	697b      	ldr	r3, [r7, #20]
 8009a98:	4413      	add	r3, r2
 8009a9a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009a9e:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8009aa0:	69bb      	ldr	r3, [r7, #24]
 8009aa2:	627b      	str	r3, [r7, #36]	@ 0x24
 8009aa4:	e01b      	b.n	8009ade <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8009aa6:	69fb      	ldr	r3, [r7, #28]
 8009aa8:	781b      	ldrb	r3, [r3, #0]
 8009aaa:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8009aac:	69fb      	ldr	r3, [r7, #28]
 8009aae:	3301      	adds	r3, #1
 8009ab0:	781b      	ldrb	r3, [r3, #0]
 8009ab2:	021b      	lsls	r3, r3, #8
 8009ab4:	b21a      	sxth	r2, r3
 8009ab6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009aba:	4313      	orrs	r3, r2
 8009abc:	b21b      	sxth	r3, r3
 8009abe:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8009ac0:	6a3b      	ldr	r3, [r7, #32]
 8009ac2:	8a7a      	ldrh	r2, [r7, #18]
 8009ac4:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8009ac6:	6a3b      	ldr	r3, [r7, #32]
 8009ac8:	3302      	adds	r3, #2
 8009aca:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8009acc:	69fb      	ldr	r3, [r7, #28]
 8009ace:	3301      	adds	r3, #1
 8009ad0:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8009ad2:	69fb      	ldr	r3, [r7, #28]
 8009ad4:	3301      	adds	r3, #1
 8009ad6:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8009ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ada:	3b01      	subs	r3, #1
 8009adc:	627b      	str	r3, [r7, #36]	@ 0x24
 8009ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d1e0      	bne.n	8009aa6 <USB_WritePMA+0x38>
  }
}
 8009ae4:	bf00      	nop
 8009ae6:	bf00      	nop
 8009ae8:	372c      	adds	r7, #44	@ 0x2c
 8009aea:	46bd      	mov	sp, r7
 8009aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af0:	4770      	bx	lr

08009af2 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009af2:	b480      	push	{r7}
 8009af4:	b08b      	sub	sp, #44	@ 0x2c
 8009af6:	af00      	add	r7, sp, #0
 8009af8:	60f8      	str	r0, [r7, #12]
 8009afa:	60b9      	str	r1, [r7, #8]
 8009afc:	4611      	mov	r1, r2
 8009afe:	461a      	mov	r2, r3
 8009b00:	460b      	mov	r3, r1
 8009b02:	80fb      	strh	r3, [r7, #6]
 8009b04:	4613      	mov	r3, r2
 8009b06:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8009b08:	88bb      	ldrh	r3, [r7, #4]
 8009b0a:	085b      	lsrs	r3, r3, #1
 8009b0c:	b29b      	uxth	r3, r3
 8009b0e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009b14:	68bb      	ldr	r3, [r7, #8]
 8009b16:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009b18:	88fa      	ldrh	r2, [r7, #6]
 8009b1a:	697b      	ldr	r3, [r7, #20]
 8009b1c:	4413      	add	r3, r2
 8009b1e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009b22:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8009b24:	69bb      	ldr	r3, [r7, #24]
 8009b26:	627b      	str	r3, [r7, #36]	@ 0x24
 8009b28:	e018      	b.n	8009b5c <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8009b2a:	6a3b      	ldr	r3, [r7, #32]
 8009b2c:	881b      	ldrh	r3, [r3, #0]
 8009b2e:	b29b      	uxth	r3, r3
 8009b30:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8009b32:	6a3b      	ldr	r3, [r7, #32]
 8009b34:	3302      	adds	r3, #2
 8009b36:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8009b38:	693b      	ldr	r3, [r7, #16]
 8009b3a:	b2da      	uxtb	r2, r3
 8009b3c:	69fb      	ldr	r3, [r7, #28]
 8009b3e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009b40:	69fb      	ldr	r3, [r7, #28]
 8009b42:	3301      	adds	r3, #1
 8009b44:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8009b46:	693b      	ldr	r3, [r7, #16]
 8009b48:	0a1b      	lsrs	r3, r3, #8
 8009b4a:	b2da      	uxtb	r2, r3
 8009b4c:	69fb      	ldr	r3, [r7, #28]
 8009b4e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009b50:	69fb      	ldr	r3, [r7, #28]
 8009b52:	3301      	adds	r3, #1
 8009b54:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8009b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b58:	3b01      	subs	r3, #1
 8009b5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8009b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d1e3      	bne.n	8009b2a <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8009b62:	88bb      	ldrh	r3, [r7, #4]
 8009b64:	f003 0301 	and.w	r3, r3, #1
 8009b68:	b29b      	uxth	r3, r3
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d007      	beq.n	8009b7e <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8009b6e:	6a3b      	ldr	r3, [r7, #32]
 8009b70:	881b      	ldrh	r3, [r3, #0]
 8009b72:	b29b      	uxth	r3, r3
 8009b74:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8009b76:	693b      	ldr	r3, [r7, #16]
 8009b78:	b2da      	uxtb	r2, r3
 8009b7a:	69fb      	ldr	r3, [r7, #28]
 8009b7c:	701a      	strb	r2, [r3, #0]
  }
}
 8009b7e:	bf00      	nop
 8009b80:	372c      	adds	r7, #44	@ 0x2c
 8009b82:	46bd      	mov	sp, r7
 8009b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b88:	4770      	bx	lr

08009b8a <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009b8a:	b580      	push	{r7, lr}
 8009b8c:	b084      	sub	sp, #16
 8009b8e:	af00      	add	r7, sp, #0
 8009b90:	6078      	str	r0, [r7, #4]
 8009b92:	460b      	mov	r3, r1
 8009b94:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009b96:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8009b9a:	f005 fdad 	bl	800f6f8 <USBD_static_malloc>
 8009b9e:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d105      	bne.n	8009bb2 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	2200      	movs	r2, #0
 8009baa:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 8009bae:	2302      	movs	r3, #2
 8009bb0:	e066      	b.n	8009c80 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	68fa      	ldr	r2, [r7, #12]
 8009bb6:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	7c1b      	ldrb	r3, [r3, #16]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d119      	bne.n	8009bf6 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009bc2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009bc6:	2202      	movs	r2, #2
 8009bc8:	2181      	movs	r1, #129	@ 0x81
 8009bca:	6878      	ldr	r0, [r7, #4]
 8009bcc:	f005 fc3b 	bl	800f446 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	2201      	movs	r2, #1
 8009bd4:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009bd6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009bda:	2202      	movs	r2, #2
 8009bdc:	2101      	movs	r1, #1
 8009bde:	6878      	ldr	r0, [r7, #4]
 8009be0:	f005 fc31 	bl	800f446 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	2201      	movs	r2, #1
 8009be8:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	2210      	movs	r2, #16
 8009bf0:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 8009bf4:	e016      	b.n	8009c24 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009bf6:	2340      	movs	r3, #64	@ 0x40
 8009bf8:	2202      	movs	r2, #2
 8009bfa:	2181      	movs	r1, #129	@ 0x81
 8009bfc:	6878      	ldr	r0, [r7, #4]
 8009bfe:	f005 fc22 	bl	800f446 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	2201      	movs	r2, #1
 8009c06:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009c08:	2340      	movs	r3, #64	@ 0x40
 8009c0a:	2202      	movs	r2, #2
 8009c0c:	2101      	movs	r1, #1
 8009c0e:	6878      	ldr	r0, [r7, #4]
 8009c10:	f005 fc19 	bl	800f446 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	2201      	movs	r2, #1
 8009c18:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	2210      	movs	r2, #16
 8009c20:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009c24:	2308      	movs	r3, #8
 8009c26:	2203      	movs	r2, #3
 8009c28:	2182      	movs	r1, #130	@ 0x82
 8009c2a:	6878      	ldr	r0, [r7, #4]
 8009c2c:	f005 fc0b 	bl	800f446 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	2201      	movs	r2, #1
 8009c34:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	2200      	movs	r2, #0
 8009c46:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	7c1b      	ldrb	r3, [r3, #16]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d109      	bne.n	8009c6e <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009c60:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009c64:	2101      	movs	r1, #1
 8009c66:	6878      	ldr	r0, [r7, #4]
 8009c68:	f005 fcdc 	bl	800f624 <USBD_LL_PrepareReceive>
 8009c6c:	e007      	b.n	8009c7e <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009c74:	2340      	movs	r3, #64	@ 0x40
 8009c76:	2101      	movs	r1, #1
 8009c78:	6878      	ldr	r0, [r7, #4]
 8009c7a:	f005 fcd3 	bl	800f624 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009c7e:	2300      	movs	r3, #0
}
 8009c80:	4618      	mov	r0, r3
 8009c82:	3710      	adds	r7, #16
 8009c84:	46bd      	mov	sp, r7
 8009c86:	bd80      	pop	{r7, pc}

08009c88 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b082      	sub	sp, #8
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
 8009c90:	460b      	mov	r3, r1
 8009c92:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009c94:	2181      	movs	r1, #129	@ 0x81
 8009c96:	6878      	ldr	r0, [r7, #4]
 8009c98:	f005 fbfb 	bl	800f492 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009ca2:	2101      	movs	r1, #1
 8009ca4:	6878      	ldr	r0, [r7, #4]
 8009ca6:	f005 fbf4 	bl	800f492 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	2200      	movs	r2, #0
 8009cae:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009cb2:	2182      	movs	r1, #130	@ 0x82
 8009cb4:	6878      	ldr	r0, [r7, #4]
 8009cb6:	f005 fbec 	bl	800f492 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d00e      	beq.n	8009cf2 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009cda:	685b      	ldr	r3, [r3, #4]
 8009cdc:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	f005 fd15 	bl	800f714 <USBD_static_free>
    pdev->pClassData = NULL;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	2200      	movs	r2, #0
 8009cee:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009cf2:	2300      	movs	r3, #0
}
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	3708      	adds	r7, #8
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	bd80      	pop	{r7, pc}

08009cfc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b086      	sub	sp, #24
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]
 8009d04:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009d0c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009d0e:	2300      	movs	r3, #0
 8009d10:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009d12:	2300      	movs	r3, #0
 8009d14:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009d16:	2300      	movs	r3, #0
 8009d18:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009d1a:	693b      	ldr	r3, [r7, #16]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d101      	bne.n	8009d24 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8009d20:	2303      	movs	r3, #3
 8009d22:	e0af      	b.n	8009e84 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009d24:	683b      	ldr	r3, [r7, #0]
 8009d26:	781b      	ldrb	r3, [r3, #0]
 8009d28:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d03f      	beq.n	8009db0 <USBD_CDC_Setup+0xb4>
 8009d30:	2b20      	cmp	r3, #32
 8009d32:	f040 809f 	bne.w	8009e74 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009d36:	683b      	ldr	r3, [r7, #0]
 8009d38:	88db      	ldrh	r3, [r3, #6]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d02e      	beq.n	8009d9c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009d3e:	683b      	ldr	r3, [r7, #0]
 8009d40:	781b      	ldrb	r3, [r3, #0]
 8009d42:	b25b      	sxtb	r3, r3
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	da16      	bge.n	8009d76 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009d4e:	689b      	ldr	r3, [r3, #8]
 8009d50:	683a      	ldr	r2, [r7, #0]
 8009d52:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8009d54:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009d56:	683a      	ldr	r2, [r7, #0]
 8009d58:	88d2      	ldrh	r2, [r2, #6]
 8009d5a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	88db      	ldrh	r3, [r3, #6]
 8009d60:	2b07      	cmp	r3, #7
 8009d62:	bf28      	it	cs
 8009d64:	2307      	movcs	r3, #7
 8009d66:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009d68:	693b      	ldr	r3, [r7, #16]
 8009d6a:	89fa      	ldrh	r2, [r7, #14]
 8009d6c:	4619      	mov	r1, r3
 8009d6e:	6878      	ldr	r0, [r7, #4]
 8009d70:	f001 facd 	bl	800b30e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8009d74:	e085      	b.n	8009e82 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8009d76:	683b      	ldr	r3, [r7, #0]
 8009d78:	785a      	ldrb	r2, [r3, #1]
 8009d7a:	693b      	ldr	r3, [r7, #16]
 8009d7c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8009d80:	683b      	ldr	r3, [r7, #0]
 8009d82:	88db      	ldrh	r3, [r3, #6]
 8009d84:	b2da      	uxtb	r2, r3
 8009d86:	693b      	ldr	r3, [r7, #16]
 8009d88:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8009d8c:	6939      	ldr	r1, [r7, #16]
 8009d8e:	683b      	ldr	r3, [r7, #0]
 8009d90:	88db      	ldrh	r3, [r3, #6]
 8009d92:	461a      	mov	r2, r3
 8009d94:	6878      	ldr	r0, [r7, #4]
 8009d96:	f001 fae6 	bl	800b366 <USBD_CtlPrepareRx>
      break;
 8009d9a:	e072      	b.n	8009e82 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009da2:	689b      	ldr	r3, [r3, #8]
 8009da4:	683a      	ldr	r2, [r7, #0]
 8009da6:	7850      	ldrb	r0, [r2, #1]
 8009da8:	2200      	movs	r2, #0
 8009daa:	6839      	ldr	r1, [r7, #0]
 8009dac:	4798      	blx	r3
      break;
 8009dae:	e068      	b.n	8009e82 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009db0:	683b      	ldr	r3, [r7, #0]
 8009db2:	785b      	ldrb	r3, [r3, #1]
 8009db4:	2b0b      	cmp	r3, #11
 8009db6:	d852      	bhi.n	8009e5e <USBD_CDC_Setup+0x162>
 8009db8:	a201      	add	r2, pc, #4	@ (adr r2, 8009dc0 <USBD_CDC_Setup+0xc4>)
 8009dba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dbe:	bf00      	nop
 8009dc0:	08009df1 	.word	0x08009df1
 8009dc4:	08009e6d 	.word	0x08009e6d
 8009dc8:	08009e5f 	.word	0x08009e5f
 8009dcc:	08009e5f 	.word	0x08009e5f
 8009dd0:	08009e5f 	.word	0x08009e5f
 8009dd4:	08009e5f 	.word	0x08009e5f
 8009dd8:	08009e5f 	.word	0x08009e5f
 8009ddc:	08009e5f 	.word	0x08009e5f
 8009de0:	08009e5f 	.word	0x08009e5f
 8009de4:	08009e5f 	.word	0x08009e5f
 8009de8:	08009e1b 	.word	0x08009e1b
 8009dec:	08009e45 	.word	0x08009e45
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009df6:	b2db      	uxtb	r3, r3
 8009df8:	2b03      	cmp	r3, #3
 8009dfa:	d107      	bne.n	8009e0c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009dfc:	f107 030a 	add.w	r3, r7, #10
 8009e00:	2202      	movs	r2, #2
 8009e02:	4619      	mov	r1, r3
 8009e04:	6878      	ldr	r0, [r7, #4]
 8009e06:	f001 fa82 	bl	800b30e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009e0a:	e032      	b.n	8009e72 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8009e0c:	6839      	ldr	r1, [r7, #0]
 8009e0e:	6878      	ldr	r0, [r7, #4]
 8009e10:	f001 fa0c 	bl	800b22c <USBD_CtlError>
            ret = USBD_FAIL;
 8009e14:	2303      	movs	r3, #3
 8009e16:	75fb      	strb	r3, [r7, #23]
          break;
 8009e18:	e02b      	b.n	8009e72 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e20:	b2db      	uxtb	r3, r3
 8009e22:	2b03      	cmp	r3, #3
 8009e24:	d107      	bne.n	8009e36 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009e26:	f107 030d 	add.w	r3, r7, #13
 8009e2a:	2201      	movs	r2, #1
 8009e2c:	4619      	mov	r1, r3
 8009e2e:	6878      	ldr	r0, [r7, #4]
 8009e30:	f001 fa6d 	bl	800b30e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009e34:	e01d      	b.n	8009e72 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8009e36:	6839      	ldr	r1, [r7, #0]
 8009e38:	6878      	ldr	r0, [r7, #4]
 8009e3a:	f001 f9f7 	bl	800b22c <USBD_CtlError>
            ret = USBD_FAIL;
 8009e3e:	2303      	movs	r3, #3
 8009e40:	75fb      	strb	r3, [r7, #23]
          break;
 8009e42:	e016      	b.n	8009e72 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e4a:	b2db      	uxtb	r3, r3
 8009e4c:	2b03      	cmp	r3, #3
 8009e4e:	d00f      	beq.n	8009e70 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8009e50:	6839      	ldr	r1, [r7, #0]
 8009e52:	6878      	ldr	r0, [r7, #4]
 8009e54:	f001 f9ea 	bl	800b22c <USBD_CtlError>
            ret = USBD_FAIL;
 8009e58:	2303      	movs	r3, #3
 8009e5a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009e5c:	e008      	b.n	8009e70 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009e5e:	6839      	ldr	r1, [r7, #0]
 8009e60:	6878      	ldr	r0, [r7, #4]
 8009e62:	f001 f9e3 	bl	800b22c <USBD_CtlError>
          ret = USBD_FAIL;
 8009e66:	2303      	movs	r3, #3
 8009e68:	75fb      	strb	r3, [r7, #23]
          break;
 8009e6a:	e002      	b.n	8009e72 <USBD_CDC_Setup+0x176>
          break;
 8009e6c:	bf00      	nop
 8009e6e:	e008      	b.n	8009e82 <USBD_CDC_Setup+0x186>
          break;
 8009e70:	bf00      	nop
      }
      break;
 8009e72:	e006      	b.n	8009e82 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8009e74:	6839      	ldr	r1, [r7, #0]
 8009e76:	6878      	ldr	r0, [r7, #4]
 8009e78:	f001 f9d8 	bl	800b22c <USBD_CtlError>
      ret = USBD_FAIL;
 8009e7c:	2303      	movs	r3, #3
 8009e7e:	75fb      	strb	r3, [r7, #23]
      break;
 8009e80:	bf00      	nop
  }

  return (uint8_t)ret;
 8009e82:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e84:	4618      	mov	r0, r3
 8009e86:	3718      	adds	r7, #24
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	bd80      	pop	{r7, pc}

08009e8c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b084      	sub	sp, #16
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
 8009e94:	460b      	mov	r3, r1
 8009e96:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8009e9e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d101      	bne.n	8009eae <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009eaa:	2303      	movs	r3, #3
 8009eac:	e04f      	b.n	8009f4e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009eb4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009eb6:	78fa      	ldrb	r2, [r7, #3]
 8009eb8:	6879      	ldr	r1, [r7, #4]
 8009eba:	4613      	mov	r3, r2
 8009ebc:	009b      	lsls	r3, r3, #2
 8009ebe:	4413      	add	r3, r2
 8009ec0:	009b      	lsls	r3, r3, #2
 8009ec2:	440b      	add	r3, r1
 8009ec4:	3318      	adds	r3, #24
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d029      	beq.n	8009f20 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009ecc:	78fa      	ldrb	r2, [r7, #3]
 8009ece:	6879      	ldr	r1, [r7, #4]
 8009ed0:	4613      	mov	r3, r2
 8009ed2:	009b      	lsls	r3, r3, #2
 8009ed4:	4413      	add	r3, r2
 8009ed6:	009b      	lsls	r3, r3, #2
 8009ed8:	440b      	add	r3, r1
 8009eda:	3318      	adds	r3, #24
 8009edc:	681a      	ldr	r2, [r3, #0]
 8009ede:	78f9      	ldrb	r1, [r7, #3]
 8009ee0:	68f8      	ldr	r0, [r7, #12]
 8009ee2:	460b      	mov	r3, r1
 8009ee4:	009b      	lsls	r3, r3, #2
 8009ee6:	440b      	add	r3, r1
 8009ee8:	00db      	lsls	r3, r3, #3
 8009eea:	4403      	add	r3, r0
 8009eec:	3320      	adds	r3, #32
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	fbb2 f1f3 	udiv	r1, r2, r3
 8009ef4:	fb01 f303 	mul.w	r3, r1, r3
 8009ef8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d110      	bne.n	8009f20 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8009efe:	78fa      	ldrb	r2, [r7, #3]
 8009f00:	6879      	ldr	r1, [r7, #4]
 8009f02:	4613      	mov	r3, r2
 8009f04:	009b      	lsls	r3, r3, #2
 8009f06:	4413      	add	r3, r2
 8009f08:	009b      	lsls	r3, r3, #2
 8009f0a:	440b      	add	r3, r1
 8009f0c:	3318      	adds	r3, #24
 8009f0e:	2200      	movs	r2, #0
 8009f10:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009f12:	78f9      	ldrb	r1, [r7, #3]
 8009f14:	2300      	movs	r3, #0
 8009f16:	2200      	movs	r2, #0
 8009f18:	6878      	ldr	r0, [r7, #4]
 8009f1a:	f005 fb62 	bl	800f5e2 <USBD_LL_Transmit>
 8009f1e:	e015      	b.n	8009f4c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8009f20:	68bb      	ldr	r3, [r7, #8]
 8009f22:	2200      	movs	r2, #0
 8009f24:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009f2e:	691b      	ldr	r3, [r3, #16]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d00b      	beq.n	8009f4c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009f3a:	691b      	ldr	r3, [r3, #16]
 8009f3c:	68ba      	ldr	r2, [r7, #8]
 8009f3e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8009f42:	68ba      	ldr	r2, [r7, #8]
 8009f44:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8009f48:	78fa      	ldrb	r2, [r7, #3]
 8009f4a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009f4c:	2300      	movs	r3, #0
}
 8009f4e:	4618      	mov	r0, r3
 8009f50:	3710      	adds	r7, #16
 8009f52:	46bd      	mov	sp, r7
 8009f54:	bd80      	pop	{r7, pc}

08009f56 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009f56:	b580      	push	{r7, lr}
 8009f58:	b084      	sub	sp, #16
 8009f5a:	af00      	add	r7, sp, #0
 8009f5c:	6078      	str	r0, [r7, #4]
 8009f5e:	460b      	mov	r3, r1
 8009f60:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009f68:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d101      	bne.n	8009f78 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009f74:	2303      	movs	r3, #3
 8009f76:	e015      	b.n	8009fa4 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009f78:	78fb      	ldrb	r3, [r7, #3]
 8009f7a:	4619      	mov	r1, r3
 8009f7c:	6878      	ldr	r0, [r7, #4]
 8009f7e:	f005 fb72 	bl	800f666 <USBD_LL_GetRxDataSize>
 8009f82:	4602      	mov	r2, r0
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009f90:	68db      	ldr	r3, [r3, #12]
 8009f92:	68fa      	ldr	r2, [r7, #12]
 8009f94:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8009f98:	68fa      	ldr	r2, [r7, #12]
 8009f9a:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8009f9e:	4611      	mov	r1, r2
 8009fa0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009fa2:	2300      	movs	r3, #0
}
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	3710      	adds	r7, #16
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	bd80      	pop	{r7, pc}

08009fac <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b084      	sub	sp, #16
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009fba:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d101      	bne.n	8009fc6 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8009fc2:	2303      	movs	r3, #3
 8009fc4:	e01a      	b.n	8009ffc <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d014      	beq.n	8009ffa <USBD_CDC_EP0_RxReady+0x4e>
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8009fd6:	2bff      	cmp	r3, #255	@ 0xff
 8009fd8:	d00f      	beq.n	8009ffa <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009fe0:	689b      	ldr	r3, [r3, #8]
 8009fe2:	68fa      	ldr	r2, [r7, #12]
 8009fe4:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 8009fe8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8009fea:	68fa      	ldr	r2, [r7, #12]
 8009fec:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009ff0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	22ff      	movs	r2, #255	@ 0xff
 8009ff6:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8009ffa:	2300      	movs	r3, #0
}
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	3710      	adds	r7, #16
 800a000:	46bd      	mov	sp, r7
 800a002:	bd80      	pop	{r7, pc}

0800a004 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a004:	b480      	push	{r7}
 800a006:	b083      	sub	sp, #12
 800a008:	af00      	add	r7, sp, #0
 800a00a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	2243      	movs	r2, #67	@ 0x43
 800a010:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800a012:	4b03      	ldr	r3, [pc, #12]	@ (800a020 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800a014:	4618      	mov	r0, r3
 800a016:	370c      	adds	r7, #12
 800a018:	46bd      	mov	sp, r7
 800a01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01e:	4770      	bx	lr
 800a020:	200000b4 	.word	0x200000b4

0800a024 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a024:	b480      	push	{r7}
 800a026:	b083      	sub	sp, #12
 800a028:	af00      	add	r7, sp, #0
 800a02a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	2243      	movs	r2, #67	@ 0x43
 800a030:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800a032:	4b03      	ldr	r3, [pc, #12]	@ (800a040 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800a034:	4618      	mov	r0, r3
 800a036:	370c      	adds	r7, #12
 800a038:	46bd      	mov	sp, r7
 800a03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03e:	4770      	bx	lr
 800a040:	20000070 	.word	0x20000070

0800a044 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a044:	b480      	push	{r7}
 800a046:	b083      	sub	sp, #12
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	2243      	movs	r2, #67	@ 0x43
 800a050:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800a052:	4b03      	ldr	r3, [pc, #12]	@ (800a060 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a054:	4618      	mov	r0, r3
 800a056:	370c      	adds	r7, #12
 800a058:	46bd      	mov	sp, r7
 800a05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05e:	4770      	bx	lr
 800a060:	200000f8 	.word	0x200000f8

0800a064 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a064:	b480      	push	{r7}
 800a066:	b083      	sub	sp, #12
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	220a      	movs	r2, #10
 800a070:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a072:	4b03      	ldr	r3, [pc, #12]	@ (800a080 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a074:	4618      	mov	r0, r3
 800a076:	370c      	adds	r7, #12
 800a078:	46bd      	mov	sp, r7
 800a07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07e:	4770      	bx	lr
 800a080:	2000002c 	.word	0x2000002c

0800a084 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a084:	b480      	push	{r7}
 800a086:	b083      	sub	sp, #12
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
 800a08c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a08e:	683b      	ldr	r3, [r7, #0]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d101      	bne.n	800a098 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a094:	2303      	movs	r3, #3
 800a096:	e004      	b.n	800a0a2 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	683a      	ldr	r2, [r7, #0]
 800a09c:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 800a0a0:	2300      	movs	r3, #0
}
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	370c      	adds	r7, #12
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ac:	4770      	bx	lr

0800a0ae <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a0ae:	b480      	push	{r7}
 800a0b0:	b087      	sub	sp, #28
 800a0b2:	af00      	add	r7, sp, #0
 800a0b4:	60f8      	str	r0, [r7, #12]
 800a0b6:	60b9      	str	r1, [r7, #8]
 800a0b8:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a0c0:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800a0c2:	697b      	ldr	r3, [r7, #20]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d101      	bne.n	800a0cc <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800a0c8:	2303      	movs	r3, #3
 800a0ca:	e008      	b.n	800a0de <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800a0cc:	697b      	ldr	r3, [r7, #20]
 800a0ce:	68ba      	ldr	r2, [r7, #8]
 800a0d0:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800a0d4:	697b      	ldr	r3, [r7, #20]
 800a0d6:	687a      	ldr	r2, [r7, #4]
 800a0d8:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800a0dc:	2300      	movs	r3, #0
}
 800a0de:	4618      	mov	r0, r3
 800a0e0:	371c      	adds	r7, #28
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e8:	4770      	bx	lr

0800a0ea <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a0ea:	b480      	push	{r7}
 800a0ec:	b085      	sub	sp, #20
 800a0ee:	af00      	add	r7, sp, #0
 800a0f0:	6078      	str	r0, [r7, #4]
 800a0f2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a0fa:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d101      	bne.n	800a106 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800a102:	2303      	movs	r3, #3
 800a104:	e004      	b.n	800a110 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	683a      	ldr	r2, [r7, #0]
 800a10a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800a10e:	2300      	movs	r3, #0
}
 800a110:	4618      	mov	r0, r3
 800a112:	3714      	adds	r7, #20
 800a114:	46bd      	mov	sp, r7
 800a116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11a:	4770      	bx	lr

0800a11c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b084      	sub	sp, #16
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a12a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800a12c:	2301      	movs	r3, #1
 800a12e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a136:	2b00      	cmp	r3, #0
 800a138:	d101      	bne.n	800a13e <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a13a:	2303      	movs	r3, #3
 800a13c:	e01a      	b.n	800a174 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800a13e:	68bb      	ldr	r3, [r7, #8]
 800a140:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a144:	2b00      	cmp	r3, #0
 800a146:	d114      	bne.n	800a172 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a148:	68bb      	ldr	r3, [r7, #8]
 800a14a:	2201      	movs	r2, #1
 800a14c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800a150:	68bb      	ldr	r3, [r7, #8]
 800a152:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800a15a:	68bb      	ldr	r3, [r7, #8]
 800a15c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800a160:	68bb      	ldr	r3, [r7, #8]
 800a162:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800a166:	2181      	movs	r1, #129	@ 0x81
 800a168:	6878      	ldr	r0, [r7, #4]
 800a16a:	f005 fa3a 	bl	800f5e2 <USBD_LL_Transmit>

    ret = USBD_OK;
 800a16e:	2300      	movs	r3, #0
 800a170:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800a172:	7bfb      	ldrb	r3, [r7, #15]
}
 800a174:	4618      	mov	r0, r3
 800a176:	3710      	adds	r7, #16
 800a178:	46bd      	mov	sp, r7
 800a17a:	bd80      	pop	{r7, pc}

0800a17c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b084      	sub	sp, #16
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a18a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a192:	2b00      	cmp	r3, #0
 800a194:	d101      	bne.n	800a19a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800a196:	2303      	movs	r3, #3
 800a198:	e016      	b.n	800a1c8 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	7c1b      	ldrb	r3, [r3, #16]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d109      	bne.n	800a1b6 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a1a8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a1ac:	2101      	movs	r1, #1
 800a1ae:	6878      	ldr	r0, [r7, #4]
 800a1b0:	f005 fa38 	bl	800f624 <USBD_LL_PrepareReceive>
 800a1b4:	e007      	b.n	800a1c6 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a1bc:	2340      	movs	r3, #64	@ 0x40
 800a1be:	2101      	movs	r1, #1
 800a1c0:	6878      	ldr	r0, [r7, #4]
 800a1c2:	f005 fa2f 	bl	800f624 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a1c6:	2300      	movs	r3, #0
}
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	3710      	adds	r7, #16
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	bd80      	pop	{r7, pc}

0800a1d0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b086      	sub	sp, #24
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	60f8      	str	r0, [r7, #12]
 800a1d8:	60b9      	str	r1, [r7, #8]
 800a1da:	4613      	mov	r3, r2
 800a1dc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d101      	bne.n	800a1e8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a1e4:	2303      	movs	r3, #3
 800a1e6:	e01f      	b.n	800a228 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a200:	68bb      	ldr	r3, [r7, #8]
 800a202:	2b00      	cmp	r3, #0
 800a204:	d003      	beq.n	800a20e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	68ba      	ldr	r2, [r7, #8]
 800a20a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	2201      	movs	r2, #1
 800a212:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	79fa      	ldrb	r2, [r7, #7]
 800a21a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a21c:	68f8      	ldr	r0, [r7, #12]
 800a21e:	f005 f897 	bl	800f350 <USBD_LL_Init>
 800a222:	4603      	mov	r3, r0
 800a224:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a226:	7dfb      	ldrb	r3, [r7, #23]
}
 800a228:	4618      	mov	r0, r3
 800a22a:	3718      	adds	r7, #24
 800a22c:	46bd      	mov	sp, r7
 800a22e:	bd80      	pop	{r7, pc}

0800a230 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a230:	b580      	push	{r7, lr}
 800a232:	b084      	sub	sp, #16
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
 800a238:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a23a:	2300      	movs	r3, #0
 800a23c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a23e:	683b      	ldr	r3, [r7, #0]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d101      	bne.n	800a248 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800a244:	2303      	movs	r3, #3
 800a246:	e016      	b.n	800a276 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	683a      	ldr	r2, [r7, #0]
 800a24c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d00b      	beq.n	800a274 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a262:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a264:	f107 020e 	add.w	r2, r7, #14
 800a268:	4610      	mov	r0, r2
 800a26a:	4798      	blx	r3
 800a26c:	4602      	mov	r2, r0
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800a274:	2300      	movs	r3, #0
}
 800a276:	4618      	mov	r0, r3
 800a278:	3710      	adds	r7, #16
 800a27a:	46bd      	mov	sp, r7
 800a27c:	bd80      	pop	{r7, pc}

0800a27e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a27e:	b580      	push	{r7, lr}
 800a280:	b082      	sub	sp, #8
 800a282:	af00      	add	r7, sp, #0
 800a284:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a286:	6878      	ldr	r0, [r7, #4]
 800a288:	f005 f8c2 	bl	800f410 <USBD_LL_Start>
 800a28c:	4603      	mov	r3, r0
}
 800a28e:	4618      	mov	r0, r3
 800a290:	3708      	adds	r7, #8
 800a292:	46bd      	mov	sp, r7
 800a294:	bd80      	pop	{r7, pc}

0800a296 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a296:	b480      	push	{r7}
 800a298:	b083      	sub	sp, #12
 800a29a:	af00      	add	r7, sp, #0
 800a29c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a29e:	2300      	movs	r3, #0
}
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	370c      	adds	r7, #12
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2aa:	4770      	bx	lr

0800a2ac <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b084      	sub	sp, #16
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
 800a2b4:	460b      	mov	r3, r1
 800a2b6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a2b8:	2303      	movs	r3, #3
 800a2ba:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d009      	beq.n	800a2da <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	78fa      	ldrb	r2, [r7, #3]
 800a2d0:	4611      	mov	r1, r2
 800a2d2:	6878      	ldr	r0, [r7, #4]
 800a2d4:	4798      	blx	r3
 800a2d6:	4603      	mov	r3, r0
 800a2d8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a2da:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2dc:	4618      	mov	r0, r3
 800a2de:	3710      	adds	r7, #16
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	bd80      	pop	{r7, pc}

0800a2e4 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b082      	sub	sp, #8
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
 800a2ec:	460b      	mov	r3, r1
 800a2ee:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d007      	beq.n	800a30a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a300:	685b      	ldr	r3, [r3, #4]
 800a302:	78fa      	ldrb	r2, [r7, #3]
 800a304:	4611      	mov	r1, r2
 800a306:	6878      	ldr	r0, [r7, #4]
 800a308:	4798      	blx	r3
  }

  return USBD_OK;
 800a30a:	2300      	movs	r3, #0
}
 800a30c:	4618      	mov	r0, r3
 800a30e:	3708      	adds	r7, #8
 800a310:	46bd      	mov	sp, r7
 800a312:	bd80      	pop	{r7, pc}

0800a314 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a314:	b580      	push	{r7, lr}
 800a316:	b084      	sub	sp, #16
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]
 800a31c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a324:	6839      	ldr	r1, [r7, #0]
 800a326:	4618      	mov	r0, r3
 800a328:	f000 ff46 	bl	800b1b8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	2201      	movs	r2, #1
 800a330:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800a33a:	461a      	mov	r2, r3
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a348:	f003 031f 	and.w	r3, r3, #31
 800a34c:	2b02      	cmp	r3, #2
 800a34e:	d01a      	beq.n	800a386 <USBD_LL_SetupStage+0x72>
 800a350:	2b02      	cmp	r3, #2
 800a352:	d822      	bhi.n	800a39a <USBD_LL_SetupStage+0x86>
 800a354:	2b00      	cmp	r3, #0
 800a356:	d002      	beq.n	800a35e <USBD_LL_SetupStage+0x4a>
 800a358:	2b01      	cmp	r3, #1
 800a35a:	d00a      	beq.n	800a372 <USBD_LL_SetupStage+0x5e>
 800a35c:	e01d      	b.n	800a39a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a364:	4619      	mov	r1, r3
 800a366:	6878      	ldr	r0, [r7, #4]
 800a368:	f000 f9ee 	bl	800a748 <USBD_StdDevReq>
 800a36c:	4603      	mov	r3, r0
 800a36e:	73fb      	strb	r3, [r7, #15]
      break;
 800a370:	e020      	b.n	800a3b4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a378:	4619      	mov	r1, r3
 800a37a:	6878      	ldr	r0, [r7, #4]
 800a37c:	f000 fa52 	bl	800a824 <USBD_StdItfReq>
 800a380:	4603      	mov	r3, r0
 800a382:	73fb      	strb	r3, [r7, #15]
      break;
 800a384:	e016      	b.n	800a3b4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a38c:	4619      	mov	r1, r3
 800a38e:	6878      	ldr	r0, [r7, #4]
 800a390:	f000 fa91 	bl	800a8b6 <USBD_StdEPReq>
 800a394:	4603      	mov	r3, r0
 800a396:	73fb      	strb	r3, [r7, #15]
      break;
 800a398:	e00c      	b.n	800a3b4 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a3a0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a3a4:	b2db      	uxtb	r3, r3
 800a3a6:	4619      	mov	r1, r3
 800a3a8:	6878      	ldr	r0, [r7, #4]
 800a3aa:	f005 f891 	bl	800f4d0 <USBD_LL_StallEP>
 800a3ae:	4603      	mov	r3, r0
 800a3b0:	73fb      	strb	r3, [r7, #15]
      break;
 800a3b2:	bf00      	nop
  }

  return ret;
 800a3b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	3710      	adds	r7, #16
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	bd80      	pop	{r7, pc}

0800a3be <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a3be:	b580      	push	{r7, lr}
 800a3c0:	b086      	sub	sp, #24
 800a3c2:	af00      	add	r7, sp, #0
 800a3c4:	60f8      	str	r0, [r7, #12]
 800a3c6:	460b      	mov	r3, r1
 800a3c8:	607a      	str	r2, [r7, #4]
 800a3ca:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a3cc:	7afb      	ldrb	r3, [r7, #11]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d138      	bne.n	800a444 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800a3d8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a3e0:	2b03      	cmp	r3, #3
 800a3e2:	d14a      	bne.n	800a47a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800a3e4:	693b      	ldr	r3, [r7, #16]
 800a3e6:	689a      	ldr	r2, [r3, #8]
 800a3e8:	693b      	ldr	r3, [r7, #16]
 800a3ea:	68db      	ldr	r3, [r3, #12]
 800a3ec:	429a      	cmp	r2, r3
 800a3ee:	d913      	bls.n	800a418 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a3f0:	693b      	ldr	r3, [r7, #16]
 800a3f2:	689a      	ldr	r2, [r3, #8]
 800a3f4:	693b      	ldr	r3, [r7, #16]
 800a3f6:	68db      	ldr	r3, [r3, #12]
 800a3f8:	1ad2      	subs	r2, r2, r3
 800a3fa:	693b      	ldr	r3, [r7, #16]
 800a3fc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a3fe:	693b      	ldr	r3, [r7, #16]
 800a400:	68da      	ldr	r2, [r3, #12]
 800a402:	693b      	ldr	r3, [r7, #16]
 800a404:	689b      	ldr	r3, [r3, #8]
 800a406:	4293      	cmp	r3, r2
 800a408:	bf28      	it	cs
 800a40a:	4613      	movcs	r3, r2
 800a40c:	461a      	mov	r2, r3
 800a40e:	6879      	ldr	r1, [r7, #4]
 800a410:	68f8      	ldr	r0, [r7, #12]
 800a412:	f000 ffc5 	bl	800b3a0 <USBD_CtlContinueRx>
 800a416:	e030      	b.n	800a47a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a41e:	b2db      	uxtb	r3, r3
 800a420:	2b03      	cmp	r3, #3
 800a422:	d10b      	bne.n	800a43c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a42a:	691b      	ldr	r3, [r3, #16]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d005      	beq.n	800a43c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a436:	691b      	ldr	r3, [r3, #16]
 800a438:	68f8      	ldr	r0, [r7, #12]
 800a43a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a43c:	68f8      	ldr	r0, [r7, #12]
 800a43e:	f000 ffc0 	bl	800b3c2 <USBD_CtlSendStatus>
 800a442:	e01a      	b.n	800a47a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a44a:	b2db      	uxtb	r3, r3
 800a44c:	2b03      	cmp	r3, #3
 800a44e:	d114      	bne.n	800a47a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a456:	699b      	ldr	r3, [r3, #24]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d00e      	beq.n	800a47a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a462:	699b      	ldr	r3, [r3, #24]
 800a464:	7afa      	ldrb	r2, [r7, #11]
 800a466:	4611      	mov	r1, r2
 800a468:	68f8      	ldr	r0, [r7, #12]
 800a46a:	4798      	blx	r3
 800a46c:	4603      	mov	r3, r0
 800a46e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800a470:	7dfb      	ldrb	r3, [r7, #23]
 800a472:	2b00      	cmp	r3, #0
 800a474:	d001      	beq.n	800a47a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800a476:	7dfb      	ldrb	r3, [r7, #23]
 800a478:	e000      	b.n	800a47c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800a47a:	2300      	movs	r3, #0
}
 800a47c:	4618      	mov	r0, r3
 800a47e:	3718      	adds	r7, #24
 800a480:	46bd      	mov	sp, r7
 800a482:	bd80      	pop	{r7, pc}

0800a484 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a484:	b580      	push	{r7, lr}
 800a486:	b086      	sub	sp, #24
 800a488:	af00      	add	r7, sp, #0
 800a48a:	60f8      	str	r0, [r7, #12]
 800a48c:	460b      	mov	r3, r1
 800a48e:	607a      	str	r2, [r7, #4]
 800a490:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a492:	7afb      	ldrb	r3, [r7, #11]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d16b      	bne.n	800a570 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	3314      	adds	r3, #20
 800a49c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a4a4:	2b02      	cmp	r3, #2
 800a4a6:	d156      	bne.n	800a556 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800a4a8:	693b      	ldr	r3, [r7, #16]
 800a4aa:	689a      	ldr	r2, [r3, #8]
 800a4ac:	693b      	ldr	r3, [r7, #16]
 800a4ae:	68db      	ldr	r3, [r3, #12]
 800a4b0:	429a      	cmp	r2, r3
 800a4b2:	d914      	bls.n	800a4de <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a4b4:	693b      	ldr	r3, [r7, #16]
 800a4b6:	689a      	ldr	r2, [r3, #8]
 800a4b8:	693b      	ldr	r3, [r7, #16]
 800a4ba:	68db      	ldr	r3, [r3, #12]
 800a4bc:	1ad2      	subs	r2, r2, r3
 800a4be:	693b      	ldr	r3, [r7, #16]
 800a4c0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a4c2:	693b      	ldr	r3, [r7, #16]
 800a4c4:	689b      	ldr	r3, [r3, #8]
 800a4c6:	461a      	mov	r2, r3
 800a4c8:	6879      	ldr	r1, [r7, #4]
 800a4ca:	68f8      	ldr	r0, [r7, #12]
 800a4cc:	f000 ff3a 	bl	800b344 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	2100      	movs	r1, #0
 800a4d6:	68f8      	ldr	r0, [r7, #12]
 800a4d8:	f005 f8a4 	bl	800f624 <USBD_LL_PrepareReceive>
 800a4dc:	e03b      	b.n	800a556 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a4de:	693b      	ldr	r3, [r7, #16]
 800a4e0:	68da      	ldr	r2, [r3, #12]
 800a4e2:	693b      	ldr	r3, [r7, #16]
 800a4e4:	689b      	ldr	r3, [r3, #8]
 800a4e6:	429a      	cmp	r2, r3
 800a4e8:	d11c      	bne.n	800a524 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a4ea:	693b      	ldr	r3, [r7, #16]
 800a4ec:	685a      	ldr	r2, [r3, #4]
 800a4ee:	693b      	ldr	r3, [r7, #16]
 800a4f0:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a4f2:	429a      	cmp	r2, r3
 800a4f4:	d316      	bcc.n	800a524 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a4f6:	693b      	ldr	r3, [r7, #16]
 800a4f8:	685a      	ldr	r2, [r3, #4]
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a500:	429a      	cmp	r2, r3
 800a502:	d20f      	bcs.n	800a524 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a504:	2200      	movs	r2, #0
 800a506:	2100      	movs	r1, #0
 800a508:	68f8      	ldr	r0, [r7, #12]
 800a50a:	f000 ff1b 	bl	800b344 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	2200      	movs	r2, #0
 800a512:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a516:	2300      	movs	r3, #0
 800a518:	2200      	movs	r2, #0
 800a51a:	2100      	movs	r1, #0
 800a51c:	68f8      	ldr	r0, [r7, #12]
 800a51e:	f005 f881 	bl	800f624 <USBD_LL_PrepareReceive>
 800a522:	e018      	b.n	800a556 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a52a:	b2db      	uxtb	r3, r3
 800a52c:	2b03      	cmp	r3, #3
 800a52e:	d10b      	bne.n	800a548 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a536:	68db      	ldr	r3, [r3, #12]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d005      	beq.n	800a548 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a542:	68db      	ldr	r3, [r3, #12]
 800a544:	68f8      	ldr	r0, [r7, #12]
 800a546:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a548:	2180      	movs	r1, #128	@ 0x80
 800a54a:	68f8      	ldr	r0, [r7, #12]
 800a54c:	f004 ffc0 	bl	800f4d0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a550:	68f8      	ldr	r0, [r7, #12]
 800a552:	f000 ff49 	bl	800b3e8 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800a55c:	2b01      	cmp	r3, #1
 800a55e:	d122      	bne.n	800a5a6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800a560:	68f8      	ldr	r0, [r7, #12]
 800a562:	f7ff fe98 	bl	800a296 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	2200      	movs	r2, #0
 800a56a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800a56e:	e01a      	b.n	800a5a6 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a576:	b2db      	uxtb	r3, r3
 800a578:	2b03      	cmp	r3, #3
 800a57a:	d114      	bne.n	800a5a6 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a582:	695b      	ldr	r3, [r3, #20]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d00e      	beq.n	800a5a6 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a58e:	695b      	ldr	r3, [r3, #20]
 800a590:	7afa      	ldrb	r2, [r7, #11]
 800a592:	4611      	mov	r1, r2
 800a594:	68f8      	ldr	r0, [r7, #12]
 800a596:	4798      	blx	r3
 800a598:	4603      	mov	r3, r0
 800a59a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800a59c:	7dfb      	ldrb	r3, [r7, #23]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d001      	beq.n	800a5a6 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800a5a2:	7dfb      	ldrb	r3, [r7, #23]
 800a5a4:	e000      	b.n	800a5a8 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800a5a6:	2300      	movs	r3, #0
}
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	3718      	adds	r7, #24
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	bd80      	pop	{r7, pc}

0800a5b0 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	b082      	sub	sp, #8
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	2201      	movs	r2, #1
 800a5bc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d101      	bne.n	800a5e4 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800a5e0:	2303      	movs	r3, #3
 800a5e2:	e02f      	b.n	800a644 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d00f      	beq.n	800a60e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a5f4:	685b      	ldr	r3, [r3, #4]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d009      	beq.n	800a60e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a600:	685b      	ldr	r3, [r3, #4]
 800a602:	687a      	ldr	r2, [r7, #4]
 800a604:	6852      	ldr	r2, [r2, #4]
 800a606:	b2d2      	uxtb	r2, r2
 800a608:	4611      	mov	r1, r2
 800a60a:	6878      	ldr	r0, [r7, #4]
 800a60c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a60e:	2340      	movs	r3, #64	@ 0x40
 800a610:	2200      	movs	r2, #0
 800a612:	2100      	movs	r1, #0
 800a614:	6878      	ldr	r0, [r7, #4]
 800a616:	f004 ff16 	bl	800f446 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	2201      	movs	r2, #1
 800a61e:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	2240      	movs	r2, #64	@ 0x40
 800a626:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a62a:	2340      	movs	r3, #64	@ 0x40
 800a62c:	2200      	movs	r2, #0
 800a62e:	2180      	movs	r1, #128	@ 0x80
 800a630:	6878      	ldr	r0, [r7, #4]
 800a632:	f004 ff08 	bl	800f446 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	2201      	movs	r2, #1
 800a63a:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	2240      	movs	r2, #64	@ 0x40
 800a640:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800a642:	2300      	movs	r3, #0
}
 800a644:	4618      	mov	r0, r3
 800a646:	3708      	adds	r7, #8
 800a648:	46bd      	mov	sp, r7
 800a64a:	bd80      	pop	{r7, pc}

0800a64c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a64c:	b480      	push	{r7}
 800a64e:	b083      	sub	sp, #12
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
 800a654:	460b      	mov	r3, r1
 800a656:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	78fa      	ldrb	r2, [r7, #3]
 800a65c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a65e:	2300      	movs	r3, #0
}
 800a660:	4618      	mov	r0, r3
 800a662:	370c      	adds	r7, #12
 800a664:	46bd      	mov	sp, r7
 800a666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66a:	4770      	bx	lr

0800a66c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a66c:	b480      	push	{r7}
 800a66e:	b083      	sub	sp, #12
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a67a:	b2da      	uxtb	r2, r3
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	2204      	movs	r2, #4
 800a686:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800a68a:	2300      	movs	r3, #0
}
 800a68c:	4618      	mov	r0, r3
 800a68e:	370c      	adds	r7, #12
 800a690:	46bd      	mov	sp, r7
 800a692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a696:	4770      	bx	lr

0800a698 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a698:	b480      	push	{r7}
 800a69a:	b083      	sub	sp, #12
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a6a6:	b2db      	uxtb	r3, r3
 800a6a8:	2b04      	cmp	r3, #4
 800a6aa:	d106      	bne.n	800a6ba <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800a6b2:	b2da      	uxtb	r2, r3
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800a6ba:	2300      	movs	r3, #0
}
 800a6bc:	4618      	mov	r0, r3
 800a6be:	370c      	adds	r7, #12
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c6:	4770      	bx	lr

0800a6c8 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b082      	sub	sp, #8
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d101      	bne.n	800a6de <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800a6da:	2303      	movs	r3, #3
 800a6dc:	e012      	b.n	800a704 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a6e4:	b2db      	uxtb	r3, r3
 800a6e6:	2b03      	cmp	r3, #3
 800a6e8:	d10b      	bne.n	800a702 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a6f0:	69db      	ldr	r3, [r3, #28]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d005      	beq.n	800a702 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a6fc:	69db      	ldr	r3, [r3, #28]
 800a6fe:	6878      	ldr	r0, [r7, #4]
 800a700:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a702:	2300      	movs	r3, #0
}
 800a704:	4618      	mov	r0, r3
 800a706:	3708      	adds	r7, #8
 800a708:	46bd      	mov	sp, r7
 800a70a:	bd80      	pop	{r7, pc}

0800a70c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a70c:	b480      	push	{r7}
 800a70e:	b087      	sub	sp, #28
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a718:	697b      	ldr	r3, [r7, #20]
 800a71a:	781b      	ldrb	r3, [r3, #0]
 800a71c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a71e:	697b      	ldr	r3, [r7, #20]
 800a720:	3301      	adds	r3, #1
 800a722:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a724:	697b      	ldr	r3, [r7, #20]
 800a726:	781b      	ldrb	r3, [r3, #0]
 800a728:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a72a:	8a3b      	ldrh	r3, [r7, #16]
 800a72c:	021b      	lsls	r3, r3, #8
 800a72e:	b21a      	sxth	r2, r3
 800a730:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a734:	4313      	orrs	r3, r2
 800a736:	b21b      	sxth	r3, r3
 800a738:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a73a:	89fb      	ldrh	r3, [r7, #14]
}
 800a73c:	4618      	mov	r0, r3
 800a73e:	371c      	adds	r7, #28
 800a740:	46bd      	mov	sp, r7
 800a742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a746:	4770      	bx	lr

0800a748 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b084      	sub	sp, #16
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
 800a750:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a752:	2300      	movs	r3, #0
 800a754:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a756:	683b      	ldr	r3, [r7, #0]
 800a758:	781b      	ldrb	r3, [r3, #0]
 800a75a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a75e:	2b40      	cmp	r3, #64	@ 0x40
 800a760:	d005      	beq.n	800a76e <USBD_StdDevReq+0x26>
 800a762:	2b40      	cmp	r3, #64	@ 0x40
 800a764:	d853      	bhi.n	800a80e <USBD_StdDevReq+0xc6>
 800a766:	2b00      	cmp	r3, #0
 800a768:	d00b      	beq.n	800a782 <USBD_StdDevReq+0x3a>
 800a76a:	2b20      	cmp	r3, #32
 800a76c:	d14f      	bne.n	800a80e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a774:	689b      	ldr	r3, [r3, #8]
 800a776:	6839      	ldr	r1, [r7, #0]
 800a778:	6878      	ldr	r0, [r7, #4]
 800a77a:	4798      	blx	r3
 800a77c:	4603      	mov	r3, r0
 800a77e:	73fb      	strb	r3, [r7, #15]
      break;
 800a780:	e04a      	b.n	800a818 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a782:	683b      	ldr	r3, [r7, #0]
 800a784:	785b      	ldrb	r3, [r3, #1]
 800a786:	2b09      	cmp	r3, #9
 800a788:	d83b      	bhi.n	800a802 <USBD_StdDevReq+0xba>
 800a78a:	a201      	add	r2, pc, #4	@ (adr r2, 800a790 <USBD_StdDevReq+0x48>)
 800a78c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a790:	0800a7e5 	.word	0x0800a7e5
 800a794:	0800a7f9 	.word	0x0800a7f9
 800a798:	0800a803 	.word	0x0800a803
 800a79c:	0800a7ef 	.word	0x0800a7ef
 800a7a0:	0800a803 	.word	0x0800a803
 800a7a4:	0800a7c3 	.word	0x0800a7c3
 800a7a8:	0800a7b9 	.word	0x0800a7b9
 800a7ac:	0800a803 	.word	0x0800a803
 800a7b0:	0800a7db 	.word	0x0800a7db
 800a7b4:	0800a7cd 	.word	0x0800a7cd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a7b8:	6839      	ldr	r1, [r7, #0]
 800a7ba:	6878      	ldr	r0, [r7, #4]
 800a7bc:	f000 f9de 	bl	800ab7c <USBD_GetDescriptor>
          break;
 800a7c0:	e024      	b.n	800a80c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a7c2:	6839      	ldr	r1, [r7, #0]
 800a7c4:	6878      	ldr	r0, [r7, #4]
 800a7c6:	f000 fb6d 	bl	800aea4 <USBD_SetAddress>
          break;
 800a7ca:	e01f      	b.n	800a80c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a7cc:	6839      	ldr	r1, [r7, #0]
 800a7ce:	6878      	ldr	r0, [r7, #4]
 800a7d0:	f000 fbac 	bl	800af2c <USBD_SetConfig>
 800a7d4:	4603      	mov	r3, r0
 800a7d6:	73fb      	strb	r3, [r7, #15]
          break;
 800a7d8:	e018      	b.n	800a80c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a7da:	6839      	ldr	r1, [r7, #0]
 800a7dc:	6878      	ldr	r0, [r7, #4]
 800a7de:	f000 fc4b 	bl	800b078 <USBD_GetConfig>
          break;
 800a7e2:	e013      	b.n	800a80c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a7e4:	6839      	ldr	r1, [r7, #0]
 800a7e6:	6878      	ldr	r0, [r7, #4]
 800a7e8:	f000 fc7c 	bl	800b0e4 <USBD_GetStatus>
          break;
 800a7ec:	e00e      	b.n	800a80c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a7ee:	6839      	ldr	r1, [r7, #0]
 800a7f0:	6878      	ldr	r0, [r7, #4]
 800a7f2:	f000 fcab 	bl	800b14c <USBD_SetFeature>
          break;
 800a7f6:	e009      	b.n	800a80c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a7f8:	6839      	ldr	r1, [r7, #0]
 800a7fa:	6878      	ldr	r0, [r7, #4]
 800a7fc:	f000 fcba 	bl	800b174 <USBD_ClrFeature>
          break;
 800a800:	e004      	b.n	800a80c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800a802:	6839      	ldr	r1, [r7, #0]
 800a804:	6878      	ldr	r0, [r7, #4]
 800a806:	f000 fd11 	bl	800b22c <USBD_CtlError>
          break;
 800a80a:	bf00      	nop
      }
      break;
 800a80c:	e004      	b.n	800a818 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800a80e:	6839      	ldr	r1, [r7, #0]
 800a810:	6878      	ldr	r0, [r7, #4]
 800a812:	f000 fd0b 	bl	800b22c <USBD_CtlError>
      break;
 800a816:	bf00      	nop
  }

  return ret;
 800a818:	7bfb      	ldrb	r3, [r7, #15]
}
 800a81a:	4618      	mov	r0, r3
 800a81c:	3710      	adds	r7, #16
 800a81e:	46bd      	mov	sp, r7
 800a820:	bd80      	pop	{r7, pc}
 800a822:	bf00      	nop

0800a824 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a824:	b580      	push	{r7, lr}
 800a826:	b084      	sub	sp, #16
 800a828:	af00      	add	r7, sp, #0
 800a82a:	6078      	str	r0, [r7, #4]
 800a82c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a82e:	2300      	movs	r3, #0
 800a830:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a832:	683b      	ldr	r3, [r7, #0]
 800a834:	781b      	ldrb	r3, [r3, #0]
 800a836:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a83a:	2b40      	cmp	r3, #64	@ 0x40
 800a83c:	d005      	beq.n	800a84a <USBD_StdItfReq+0x26>
 800a83e:	2b40      	cmp	r3, #64	@ 0x40
 800a840:	d82f      	bhi.n	800a8a2 <USBD_StdItfReq+0x7e>
 800a842:	2b00      	cmp	r3, #0
 800a844:	d001      	beq.n	800a84a <USBD_StdItfReq+0x26>
 800a846:	2b20      	cmp	r3, #32
 800a848:	d12b      	bne.n	800a8a2 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a850:	b2db      	uxtb	r3, r3
 800a852:	3b01      	subs	r3, #1
 800a854:	2b02      	cmp	r3, #2
 800a856:	d81d      	bhi.n	800a894 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a858:	683b      	ldr	r3, [r7, #0]
 800a85a:	889b      	ldrh	r3, [r3, #4]
 800a85c:	b2db      	uxtb	r3, r3
 800a85e:	2b01      	cmp	r3, #1
 800a860:	d813      	bhi.n	800a88a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a868:	689b      	ldr	r3, [r3, #8]
 800a86a:	6839      	ldr	r1, [r7, #0]
 800a86c:	6878      	ldr	r0, [r7, #4]
 800a86e:	4798      	blx	r3
 800a870:	4603      	mov	r3, r0
 800a872:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a874:	683b      	ldr	r3, [r7, #0]
 800a876:	88db      	ldrh	r3, [r3, #6]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d110      	bne.n	800a89e <USBD_StdItfReq+0x7a>
 800a87c:	7bfb      	ldrb	r3, [r7, #15]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d10d      	bne.n	800a89e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a882:	6878      	ldr	r0, [r7, #4]
 800a884:	f000 fd9d 	bl	800b3c2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a888:	e009      	b.n	800a89e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800a88a:	6839      	ldr	r1, [r7, #0]
 800a88c:	6878      	ldr	r0, [r7, #4]
 800a88e:	f000 fccd 	bl	800b22c <USBD_CtlError>
          break;
 800a892:	e004      	b.n	800a89e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800a894:	6839      	ldr	r1, [r7, #0]
 800a896:	6878      	ldr	r0, [r7, #4]
 800a898:	f000 fcc8 	bl	800b22c <USBD_CtlError>
          break;
 800a89c:	e000      	b.n	800a8a0 <USBD_StdItfReq+0x7c>
          break;
 800a89e:	bf00      	nop
      }
      break;
 800a8a0:	e004      	b.n	800a8ac <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800a8a2:	6839      	ldr	r1, [r7, #0]
 800a8a4:	6878      	ldr	r0, [r7, #4]
 800a8a6:	f000 fcc1 	bl	800b22c <USBD_CtlError>
      break;
 800a8aa:	bf00      	nop
  }

  return ret;
 800a8ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	3710      	adds	r7, #16
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	bd80      	pop	{r7, pc}

0800a8b6 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a8b6:	b580      	push	{r7, lr}
 800a8b8:	b084      	sub	sp, #16
 800a8ba:	af00      	add	r7, sp, #0
 800a8bc:	6078      	str	r0, [r7, #4]
 800a8be:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800a8c4:	683b      	ldr	r3, [r7, #0]
 800a8c6:	889b      	ldrh	r3, [r3, #4]
 800a8c8:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a8ca:	683b      	ldr	r3, [r7, #0]
 800a8cc:	781b      	ldrb	r3, [r3, #0]
 800a8ce:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a8d2:	2b40      	cmp	r3, #64	@ 0x40
 800a8d4:	d007      	beq.n	800a8e6 <USBD_StdEPReq+0x30>
 800a8d6:	2b40      	cmp	r3, #64	@ 0x40
 800a8d8:	f200 8145 	bhi.w	800ab66 <USBD_StdEPReq+0x2b0>
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d00c      	beq.n	800a8fa <USBD_StdEPReq+0x44>
 800a8e0:	2b20      	cmp	r3, #32
 800a8e2:	f040 8140 	bne.w	800ab66 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a8ec:	689b      	ldr	r3, [r3, #8]
 800a8ee:	6839      	ldr	r1, [r7, #0]
 800a8f0:	6878      	ldr	r0, [r7, #4]
 800a8f2:	4798      	blx	r3
 800a8f4:	4603      	mov	r3, r0
 800a8f6:	73fb      	strb	r3, [r7, #15]
      break;
 800a8f8:	e13a      	b.n	800ab70 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a8fa:	683b      	ldr	r3, [r7, #0]
 800a8fc:	785b      	ldrb	r3, [r3, #1]
 800a8fe:	2b03      	cmp	r3, #3
 800a900:	d007      	beq.n	800a912 <USBD_StdEPReq+0x5c>
 800a902:	2b03      	cmp	r3, #3
 800a904:	f300 8129 	bgt.w	800ab5a <USBD_StdEPReq+0x2a4>
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d07f      	beq.n	800aa0c <USBD_StdEPReq+0x156>
 800a90c:	2b01      	cmp	r3, #1
 800a90e:	d03c      	beq.n	800a98a <USBD_StdEPReq+0xd4>
 800a910:	e123      	b.n	800ab5a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a918:	b2db      	uxtb	r3, r3
 800a91a:	2b02      	cmp	r3, #2
 800a91c:	d002      	beq.n	800a924 <USBD_StdEPReq+0x6e>
 800a91e:	2b03      	cmp	r3, #3
 800a920:	d016      	beq.n	800a950 <USBD_StdEPReq+0x9a>
 800a922:	e02c      	b.n	800a97e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a924:	7bbb      	ldrb	r3, [r7, #14]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d00d      	beq.n	800a946 <USBD_StdEPReq+0x90>
 800a92a:	7bbb      	ldrb	r3, [r7, #14]
 800a92c:	2b80      	cmp	r3, #128	@ 0x80
 800a92e:	d00a      	beq.n	800a946 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a930:	7bbb      	ldrb	r3, [r7, #14]
 800a932:	4619      	mov	r1, r3
 800a934:	6878      	ldr	r0, [r7, #4]
 800a936:	f004 fdcb 	bl	800f4d0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a93a:	2180      	movs	r1, #128	@ 0x80
 800a93c:	6878      	ldr	r0, [r7, #4]
 800a93e:	f004 fdc7 	bl	800f4d0 <USBD_LL_StallEP>
 800a942:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a944:	e020      	b.n	800a988 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800a946:	6839      	ldr	r1, [r7, #0]
 800a948:	6878      	ldr	r0, [r7, #4]
 800a94a:	f000 fc6f 	bl	800b22c <USBD_CtlError>
              break;
 800a94e:	e01b      	b.n	800a988 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a950:	683b      	ldr	r3, [r7, #0]
 800a952:	885b      	ldrh	r3, [r3, #2]
 800a954:	2b00      	cmp	r3, #0
 800a956:	d10e      	bne.n	800a976 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a958:	7bbb      	ldrb	r3, [r7, #14]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d00b      	beq.n	800a976 <USBD_StdEPReq+0xc0>
 800a95e:	7bbb      	ldrb	r3, [r7, #14]
 800a960:	2b80      	cmp	r3, #128	@ 0x80
 800a962:	d008      	beq.n	800a976 <USBD_StdEPReq+0xc0>
 800a964:	683b      	ldr	r3, [r7, #0]
 800a966:	88db      	ldrh	r3, [r3, #6]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d104      	bne.n	800a976 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a96c:	7bbb      	ldrb	r3, [r7, #14]
 800a96e:	4619      	mov	r1, r3
 800a970:	6878      	ldr	r0, [r7, #4]
 800a972:	f004 fdad 	bl	800f4d0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a976:	6878      	ldr	r0, [r7, #4]
 800a978:	f000 fd23 	bl	800b3c2 <USBD_CtlSendStatus>

              break;
 800a97c:	e004      	b.n	800a988 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800a97e:	6839      	ldr	r1, [r7, #0]
 800a980:	6878      	ldr	r0, [r7, #4]
 800a982:	f000 fc53 	bl	800b22c <USBD_CtlError>
              break;
 800a986:	bf00      	nop
          }
          break;
 800a988:	e0ec      	b.n	800ab64 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a990:	b2db      	uxtb	r3, r3
 800a992:	2b02      	cmp	r3, #2
 800a994:	d002      	beq.n	800a99c <USBD_StdEPReq+0xe6>
 800a996:	2b03      	cmp	r3, #3
 800a998:	d016      	beq.n	800a9c8 <USBD_StdEPReq+0x112>
 800a99a:	e030      	b.n	800a9fe <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a99c:	7bbb      	ldrb	r3, [r7, #14]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d00d      	beq.n	800a9be <USBD_StdEPReq+0x108>
 800a9a2:	7bbb      	ldrb	r3, [r7, #14]
 800a9a4:	2b80      	cmp	r3, #128	@ 0x80
 800a9a6:	d00a      	beq.n	800a9be <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a9a8:	7bbb      	ldrb	r3, [r7, #14]
 800a9aa:	4619      	mov	r1, r3
 800a9ac:	6878      	ldr	r0, [r7, #4]
 800a9ae:	f004 fd8f 	bl	800f4d0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a9b2:	2180      	movs	r1, #128	@ 0x80
 800a9b4:	6878      	ldr	r0, [r7, #4]
 800a9b6:	f004 fd8b 	bl	800f4d0 <USBD_LL_StallEP>
 800a9ba:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a9bc:	e025      	b.n	800aa0a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800a9be:	6839      	ldr	r1, [r7, #0]
 800a9c0:	6878      	ldr	r0, [r7, #4]
 800a9c2:	f000 fc33 	bl	800b22c <USBD_CtlError>
              break;
 800a9c6:	e020      	b.n	800aa0a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a9c8:	683b      	ldr	r3, [r7, #0]
 800a9ca:	885b      	ldrh	r3, [r3, #2]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d11b      	bne.n	800aa08 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a9d0:	7bbb      	ldrb	r3, [r7, #14]
 800a9d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d004      	beq.n	800a9e4 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a9da:	7bbb      	ldrb	r3, [r7, #14]
 800a9dc:	4619      	mov	r1, r3
 800a9de:	6878      	ldr	r0, [r7, #4]
 800a9e0:	f004 fd95 	bl	800f50e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a9e4:	6878      	ldr	r0, [r7, #4]
 800a9e6:	f000 fcec 	bl	800b3c2 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a9f0:	689b      	ldr	r3, [r3, #8]
 800a9f2:	6839      	ldr	r1, [r7, #0]
 800a9f4:	6878      	ldr	r0, [r7, #4]
 800a9f6:	4798      	blx	r3
 800a9f8:	4603      	mov	r3, r0
 800a9fa:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800a9fc:	e004      	b.n	800aa08 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800a9fe:	6839      	ldr	r1, [r7, #0]
 800aa00:	6878      	ldr	r0, [r7, #4]
 800aa02:	f000 fc13 	bl	800b22c <USBD_CtlError>
              break;
 800aa06:	e000      	b.n	800aa0a <USBD_StdEPReq+0x154>
              break;
 800aa08:	bf00      	nop
          }
          break;
 800aa0a:	e0ab      	b.n	800ab64 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa12:	b2db      	uxtb	r3, r3
 800aa14:	2b02      	cmp	r3, #2
 800aa16:	d002      	beq.n	800aa1e <USBD_StdEPReq+0x168>
 800aa18:	2b03      	cmp	r3, #3
 800aa1a:	d032      	beq.n	800aa82 <USBD_StdEPReq+0x1cc>
 800aa1c:	e097      	b.n	800ab4e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aa1e:	7bbb      	ldrb	r3, [r7, #14]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d007      	beq.n	800aa34 <USBD_StdEPReq+0x17e>
 800aa24:	7bbb      	ldrb	r3, [r7, #14]
 800aa26:	2b80      	cmp	r3, #128	@ 0x80
 800aa28:	d004      	beq.n	800aa34 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800aa2a:	6839      	ldr	r1, [r7, #0]
 800aa2c:	6878      	ldr	r0, [r7, #4]
 800aa2e:	f000 fbfd 	bl	800b22c <USBD_CtlError>
                break;
 800aa32:	e091      	b.n	800ab58 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aa34:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	da0b      	bge.n	800aa54 <USBD_StdEPReq+0x19e>
 800aa3c:	7bbb      	ldrb	r3, [r7, #14]
 800aa3e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800aa42:	4613      	mov	r3, r2
 800aa44:	009b      	lsls	r3, r3, #2
 800aa46:	4413      	add	r3, r2
 800aa48:	009b      	lsls	r3, r3, #2
 800aa4a:	3310      	adds	r3, #16
 800aa4c:	687a      	ldr	r2, [r7, #4]
 800aa4e:	4413      	add	r3, r2
 800aa50:	3304      	adds	r3, #4
 800aa52:	e00b      	b.n	800aa6c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800aa54:	7bbb      	ldrb	r3, [r7, #14]
 800aa56:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aa5a:	4613      	mov	r3, r2
 800aa5c:	009b      	lsls	r3, r3, #2
 800aa5e:	4413      	add	r3, r2
 800aa60:	009b      	lsls	r3, r3, #2
 800aa62:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800aa66:	687a      	ldr	r2, [r7, #4]
 800aa68:	4413      	add	r3, r2
 800aa6a:	3304      	adds	r3, #4
 800aa6c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800aa6e:	68bb      	ldr	r3, [r7, #8]
 800aa70:	2200      	movs	r2, #0
 800aa72:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800aa74:	68bb      	ldr	r3, [r7, #8]
 800aa76:	2202      	movs	r2, #2
 800aa78:	4619      	mov	r1, r3
 800aa7a:	6878      	ldr	r0, [r7, #4]
 800aa7c:	f000 fc47 	bl	800b30e <USBD_CtlSendData>
              break;
 800aa80:	e06a      	b.n	800ab58 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800aa82:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	da11      	bge.n	800aaae <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800aa8a:	7bbb      	ldrb	r3, [r7, #14]
 800aa8c:	f003 020f 	and.w	r2, r3, #15
 800aa90:	6879      	ldr	r1, [r7, #4]
 800aa92:	4613      	mov	r3, r2
 800aa94:	009b      	lsls	r3, r3, #2
 800aa96:	4413      	add	r3, r2
 800aa98:	009b      	lsls	r3, r3, #2
 800aa9a:	440b      	add	r3, r1
 800aa9c:	3324      	adds	r3, #36	@ 0x24
 800aa9e:	881b      	ldrh	r3, [r3, #0]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d117      	bne.n	800aad4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800aaa4:	6839      	ldr	r1, [r7, #0]
 800aaa6:	6878      	ldr	r0, [r7, #4]
 800aaa8:	f000 fbc0 	bl	800b22c <USBD_CtlError>
                  break;
 800aaac:	e054      	b.n	800ab58 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800aaae:	7bbb      	ldrb	r3, [r7, #14]
 800aab0:	f003 020f 	and.w	r2, r3, #15
 800aab4:	6879      	ldr	r1, [r7, #4]
 800aab6:	4613      	mov	r3, r2
 800aab8:	009b      	lsls	r3, r3, #2
 800aaba:	4413      	add	r3, r2
 800aabc:	009b      	lsls	r3, r3, #2
 800aabe:	440b      	add	r3, r1
 800aac0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800aac4:	881b      	ldrh	r3, [r3, #0]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d104      	bne.n	800aad4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800aaca:	6839      	ldr	r1, [r7, #0]
 800aacc:	6878      	ldr	r0, [r7, #4]
 800aace:	f000 fbad 	bl	800b22c <USBD_CtlError>
                  break;
 800aad2:	e041      	b.n	800ab58 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aad4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	da0b      	bge.n	800aaf4 <USBD_StdEPReq+0x23e>
 800aadc:	7bbb      	ldrb	r3, [r7, #14]
 800aade:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800aae2:	4613      	mov	r3, r2
 800aae4:	009b      	lsls	r3, r3, #2
 800aae6:	4413      	add	r3, r2
 800aae8:	009b      	lsls	r3, r3, #2
 800aaea:	3310      	adds	r3, #16
 800aaec:	687a      	ldr	r2, [r7, #4]
 800aaee:	4413      	add	r3, r2
 800aaf0:	3304      	adds	r3, #4
 800aaf2:	e00b      	b.n	800ab0c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800aaf4:	7bbb      	ldrb	r3, [r7, #14]
 800aaf6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aafa:	4613      	mov	r3, r2
 800aafc:	009b      	lsls	r3, r3, #2
 800aafe:	4413      	add	r3, r2
 800ab00:	009b      	lsls	r3, r3, #2
 800ab02:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ab06:	687a      	ldr	r2, [r7, #4]
 800ab08:	4413      	add	r3, r2
 800ab0a:	3304      	adds	r3, #4
 800ab0c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ab0e:	7bbb      	ldrb	r3, [r7, #14]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d002      	beq.n	800ab1a <USBD_StdEPReq+0x264>
 800ab14:	7bbb      	ldrb	r3, [r7, #14]
 800ab16:	2b80      	cmp	r3, #128	@ 0x80
 800ab18:	d103      	bne.n	800ab22 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800ab1a:	68bb      	ldr	r3, [r7, #8]
 800ab1c:	2200      	movs	r2, #0
 800ab1e:	601a      	str	r2, [r3, #0]
 800ab20:	e00e      	b.n	800ab40 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ab22:	7bbb      	ldrb	r3, [r7, #14]
 800ab24:	4619      	mov	r1, r3
 800ab26:	6878      	ldr	r0, [r7, #4]
 800ab28:	f004 fd10 	bl	800f54c <USBD_LL_IsStallEP>
 800ab2c:	4603      	mov	r3, r0
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d003      	beq.n	800ab3a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800ab32:	68bb      	ldr	r3, [r7, #8]
 800ab34:	2201      	movs	r2, #1
 800ab36:	601a      	str	r2, [r3, #0]
 800ab38:	e002      	b.n	800ab40 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800ab3a:	68bb      	ldr	r3, [r7, #8]
 800ab3c:	2200      	movs	r2, #0
 800ab3e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ab40:	68bb      	ldr	r3, [r7, #8]
 800ab42:	2202      	movs	r2, #2
 800ab44:	4619      	mov	r1, r3
 800ab46:	6878      	ldr	r0, [r7, #4]
 800ab48:	f000 fbe1 	bl	800b30e <USBD_CtlSendData>
              break;
 800ab4c:	e004      	b.n	800ab58 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800ab4e:	6839      	ldr	r1, [r7, #0]
 800ab50:	6878      	ldr	r0, [r7, #4]
 800ab52:	f000 fb6b 	bl	800b22c <USBD_CtlError>
              break;
 800ab56:	bf00      	nop
          }
          break;
 800ab58:	e004      	b.n	800ab64 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800ab5a:	6839      	ldr	r1, [r7, #0]
 800ab5c:	6878      	ldr	r0, [r7, #4]
 800ab5e:	f000 fb65 	bl	800b22c <USBD_CtlError>
          break;
 800ab62:	bf00      	nop
      }
      break;
 800ab64:	e004      	b.n	800ab70 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800ab66:	6839      	ldr	r1, [r7, #0]
 800ab68:	6878      	ldr	r0, [r7, #4]
 800ab6a:	f000 fb5f 	bl	800b22c <USBD_CtlError>
      break;
 800ab6e:	bf00      	nop
  }

  return ret;
 800ab70:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab72:	4618      	mov	r0, r3
 800ab74:	3710      	adds	r7, #16
 800ab76:	46bd      	mov	sp, r7
 800ab78:	bd80      	pop	{r7, pc}
	...

0800ab7c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab7c:	b580      	push	{r7, lr}
 800ab7e:	b084      	sub	sp, #16
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	6078      	str	r0, [r7, #4]
 800ab84:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ab86:	2300      	movs	r3, #0
 800ab88:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ab8a:	2300      	movs	r3, #0
 800ab8c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ab8e:	2300      	movs	r3, #0
 800ab90:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ab92:	683b      	ldr	r3, [r7, #0]
 800ab94:	885b      	ldrh	r3, [r3, #2]
 800ab96:	0a1b      	lsrs	r3, r3, #8
 800ab98:	b29b      	uxth	r3, r3
 800ab9a:	3b01      	subs	r3, #1
 800ab9c:	2b0e      	cmp	r3, #14
 800ab9e:	f200 8152 	bhi.w	800ae46 <USBD_GetDescriptor+0x2ca>
 800aba2:	a201      	add	r2, pc, #4	@ (adr r2, 800aba8 <USBD_GetDescriptor+0x2c>)
 800aba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aba8:	0800ac19 	.word	0x0800ac19
 800abac:	0800ac31 	.word	0x0800ac31
 800abb0:	0800ac71 	.word	0x0800ac71
 800abb4:	0800ae47 	.word	0x0800ae47
 800abb8:	0800ae47 	.word	0x0800ae47
 800abbc:	0800ade7 	.word	0x0800ade7
 800abc0:	0800ae13 	.word	0x0800ae13
 800abc4:	0800ae47 	.word	0x0800ae47
 800abc8:	0800ae47 	.word	0x0800ae47
 800abcc:	0800ae47 	.word	0x0800ae47
 800abd0:	0800ae47 	.word	0x0800ae47
 800abd4:	0800ae47 	.word	0x0800ae47
 800abd8:	0800ae47 	.word	0x0800ae47
 800abdc:	0800ae47 	.word	0x0800ae47
 800abe0:	0800abe5 	.word	0x0800abe5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800abea:	69db      	ldr	r3, [r3, #28]
 800abec:	2b00      	cmp	r3, #0
 800abee:	d00b      	beq.n	800ac08 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800abf6:	69db      	ldr	r3, [r3, #28]
 800abf8:	687a      	ldr	r2, [r7, #4]
 800abfa:	7c12      	ldrb	r2, [r2, #16]
 800abfc:	f107 0108 	add.w	r1, r7, #8
 800ac00:	4610      	mov	r0, r2
 800ac02:	4798      	blx	r3
 800ac04:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ac06:	e126      	b.n	800ae56 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ac08:	6839      	ldr	r1, [r7, #0]
 800ac0a:	6878      	ldr	r0, [r7, #4]
 800ac0c:	f000 fb0e 	bl	800b22c <USBD_CtlError>
        err++;
 800ac10:	7afb      	ldrb	r3, [r7, #11]
 800ac12:	3301      	adds	r3, #1
 800ac14:	72fb      	strb	r3, [r7, #11]
      break;
 800ac16:	e11e      	b.n	800ae56 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	687a      	ldr	r2, [r7, #4]
 800ac22:	7c12      	ldrb	r2, [r2, #16]
 800ac24:	f107 0108 	add.w	r1, r7, #8
 800ac28:	4610      	mov	r0, r2
 800ac2a:	4798      	blx	r3
 800ac2c:	60f8      	str	r0, [r7, #12]
      break;
 800ac2e:	e112      	b.n	800ae56 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	7c1b      	ldrb	r3, [r3, #16]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d10d      	bne.n	800ac54 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ac3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac40:	f107 0208 	add.w	r2, r7, #8
 800ac44:	4610      	mov	r0, r2
 800ac46:	4798      	blx	r3
 800ac48:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	3301      	adds	r3, #1
 800ac4e:	2202      	movs	r2, #2
 800ac50:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ac52:	e100      	b.n	800ae56 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ac5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac5c:	f107 0208 	add.w	r2, r7, #8
 800ac60:	4610      	mov	r0, r2
 800ac62:	4798      	blx	r3
 800ac64:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	3301      	adds	r3, #1
 800ac6a:	2202      	movs	r2, #2
 800ac6c:	701a      	strb	r2, [r3, #0]
      break;
 800ac6e:	e0f2      	b.n	800ae56 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ac70:	683b      	ldr	r3, [r7, #0]
 800ac72:	885b      	ldrh	r3, [r3, #2]
 800ac74:	b2db      	uxtb	r3, r3
 800ac76:	2b05      	cmp	r3, #5
 800ac78:	f200 80ac 	bhi.w	800add4 <USBD_GetDescriptor+0x258>
 800ac7c:	a201      	add	r2, pc, #4	@ (adr r2, 800ac84 <USBD_GetDescriptor+0x108>)
 800ac7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac82:	bf00      	nop
 800ac84:	0800ac9d 	.word	0x0800ac9d
 800ac88:	0800acd1 	.word	0x0800acd1
 800ac8c:	0800ad05 	.word	0x0800ad05
 800ac90:	0800ad39 	.word	0x0800ad39
 800ac94:	0800ad6d 	.word	0x0800ad6d
 800ac98:	0800ada1 	.word	0x0800ada1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aca2:	685b      	ldr	r3, [r3, #4]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d00b      	beq.n	800acc0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800acae:	685b      	ldr	r3, [r3, #4]
 800acb0:	687a      	ldr	r2, [r7, #4]
 800acb2:	7c12      	ldrb	r2, [r2, #16]
 800acb4:	f107 0108 	add.w	r1, r7, #8
 800acb8:	4610      	mov	r0, r2
 800acba:	4798      	blx	r3
 800acbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800acbe:	e091      	b.n	800ade4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800acc0:	6839      	ldr	r1, [r7, #0]
 800acc2:	6878      	ldr	r0, [r7, #4]
 800acc4:	f000 fab2 	bl	800b22c <USBD_CtlError>
            err++;
 800acc8:	7afb      	ldrb	r3, [r7, #11]
 800acca:	3301      	adds	r3, #1
 800accc:	72fb      	strb	r3, [r7, #11]
          break;
 800acce:	e089      	b.n	800ade4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800acd6:	689b      	ldr	r3, [r3, #8]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d00b      	beq.n	800acf4 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ace2:	689b      	ldr	r3, [r3, #8]
 800ace4:	687a      	ldr	r2, [r7, #4]
 800ace6:	7c12      	ldrb	r2, [r2, #16]
 800ace8:	f107 0108 	add.w	r1, r7, #8
 800acec:	4610      	mov	r0, r2
 800acee:	4798      	blx	r3
 800acf0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800acf2:	e077      	b.n	800ade4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800acf4:	6839      	ldr	r1, [r7, #0]
 800acf6:	6878      	ldr	r0, [r7, #4]
 800acf8:	f000 fa98 	bl	800b22c <USBD_CtlError>
            err++;
 800acfc:	7afb      	ldrb	r3, [r7, #11]
 800acfe:	3301      	adds	r3, #1
 800ad00:	72fb      	strb	r3, [r7, #11]
          break;
 800ad02:	e06f      	b.n	800ade4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ad0a:	68db      	ldr	r3, [r3, #12]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d00b      	beq.n	800ad28 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ad16:	68db      	ldr	r3, [r3, #12]
 800ad18:	687a      	ldr	r2, [r7, #4]
 800ad1a:	7c12      	ldrb	r2, [r2, #16]
 800ad1c:	f107 0108 	add.w	r1, r7, #8
 800ad20:	4610      	mov	r0, r2
 800ad22:	4798      	blx	r3
 800ad24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad26:	e05d      	b.n	800ade4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ad28:	6839      	ldr	r1, [r7, #0]
 800ad2a:	6878      	ldr	r0, [r7, #4]
 800ad2c:	f000 fa7e 	bl	800b22c <USBD_CtlError>
            err++;
 800ad30:	7afb      	ldrb	r3, [r7, #11]
 800ad32:	3301      	adds	r3, #1
 800ad34:	72fb      	strb	r3, [r7, #11]
          break;
 800ad36:	e055      	b.n	800ade4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ad3e:	691b      	ldr	r3, [r3, #16]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d00b      	beq.n	800ad5c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ad4a:	691b      	ldr	r3, [r3, #16]
 800ad4c:	687a      	ldr	r2, [r7, #4]
 800ad4e:	7c12      	ldrb	r2, [r2, #16]
 800ad50:	f107 0108 	add.w	r1, r7, #8
 800ad54:	4610      	mov	r0, r2
 800ad56:	4798      	blx	r3
 800ad58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad5a:	e043      	b.n	800ade4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ad5c:	6839      	ldr	r1, [r7, #0]
 800ad5e:	6878      	ldr	r0, [r7, #4]
 800ad60:	f000 fa64 	bl	800b22c <USBD_CtlError>
            err++;
 800ad64:	7afb      	ldrb	r3, [r7, #11]
 800ad66:	3301      	adds	r3, #1
 800ad68:	72fb      	strb	r3, [r7, #11]
          break;
 800ad6a:	e03b      	b.n	800ade4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ad72:	695b      	ldr	r3, [r3, #20]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d00b      	beq.n	800ad90 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ad7e:	695b      	ldr	r3, [r3, #20]
 800ad80:	687a      	ldr	r2, [r7, #4]
 800ad82:	7c12      	ldrb	r2, [r2, #16]
 800ad84:	f107 0108 	add.w	r1, r7, #8
 800ad88:	4610      	mov	r0, r2
 800ad8a:	4798      	blx	r3
 800ad8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad8e:	e029      	b.n	800ade4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ad90:	6839      	ldr	r1, [r7, #0]
 800ad92:	6878      	ldr	r0, [r7, #4]
 800ad94:	f000 fa4a 	bl	800b22c <USBD_CtlError>
            err++;
 800ad98:	7afb      	ldrb	r3, [r7, #11]
 800ad9a:	3301      	adds	r3, #1
 800ad9c:	72fb      	strb	r3, [r7, #11]
          break;
 800ad9e:	e021      	b.n	800ade4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ada6:	699b      	ldr	r3, [r3, #24]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d00b      	beq.n	800adc4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800adb2:	699b      	ldr	r3, [r3, #24]
 800adb4:	687a      	ldr	r2, [r7, #4]
 800adb6:	7c12      	ldrb	r2, [r2, #16]
 800adb8:	f107 0108 	add.w	r1, r7, #8
 800adbc:	4610      	mov	r0, r2
 800adbe:	4798      	blx	r3
 800adc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800adc2:	e00f      	b.n	800ade4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800adc4:	6839      	ldr	r1, [r7, #0]
 800adc6:	6878      	ldr	r0, [r7, #4]
 800adc8:	f000 fa30 	bl	800b22c <USBD_CtlError>
            err++;
 800adcc:	7afb      	ldrb	r3, [r7, #11]
 800adce:	3301      	adds	r3, #1
 800add0:	72fb      	strb	r3, [r7, #11]
          break;
 800add2:	e007      	b.n	800ade4 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800add4:	6839      	ldr	r1, [r7, #0]
 800add6:	6878      	ldr	r0, [r7, #4]
 800add8:	f000 fa28 	bl	800b22c <USBD_CtlError>
          err++;
 800addc:	7afb      	ldrb	r3, [r7, #11]
 800adde:	3301      	adds	r3, #1
 800ade0:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800ade2:	bf00      	nop
      }
      break;
 800ade4:	e037      	b.n	800ae56 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	7c1b      	ldrb	r3, [r3, #16]
 800adea:	2b00      	cmp	r3, #0
 800adec:	d109      	bne.n	800ae02 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800adf4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800adf6:	f107 0208 	add.w	r2, r7, #8
 800adfa:	4610      	mov	r0, r2
 800adfc:	4798      	blx	r3
 800adfe:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ae00:	e029      	b.n	800ae56 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ae02:	6839      	ldr	r1, [r7, #0]
 800ae04:	6878      	ldr	r0, [r7, #4]
 800ae06:	f000 fa11 	bl	800b22c <USBD_CtlError>
        err++;
 800ae0a:	7afb      	ldrb	r3, [r7, #11]
 800ae0c:	3301      	adds	r3, #1
 800ae0e:	72fb      	strb	r3, [r7, #11]
      break;
 800ae10:	e021      	b.n	800ae56 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	7c1b      	ldrb	r3, [r3, #16]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d10d      	bne.n	800ae36 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ae20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae22:	f107 0208 	add.w	r2, r7, #8
 800ae26:	4610      	mov	r0, r2
 800ae28:	4798      	blx	r3
 800ae2a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	3301      	adds	r3, #1
 800ae30:	2207      	movs	r2, #7
 800ae32:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ae34:	e00f      	b.n	800ae56 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ae36:	6839      	ldr	r1, [r7, #0]
 800ae38:	6878      	ldr	r0, [r7, #4]
 800ae3a:	f000 f9f7 	bl	800b22c <USBD_CtlError>
        err++;
 800ae3e:	7afb      	ldrb	r3, [r7, #11]
 800ae40:	3301      	adds	r3, #1
 800ae42:	72fb      	strb	r3, [r7, #11]
      break;
 800ae44:	e007      	b.n	800ae56 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800ae46:	6839      	ldr	r1, [r7, #0]
 800ae48:	6878      	ldr	r0, [r7, #4]
 800ae4a:	f000 f9ef 	bl	800b22c <USBD_CtlError>
      err++;
 800ae4e:	7afb      	ldrb	r3, [r7, #11]
 800ae50:	3301      	adds	r3, #1
 800ae52:	72fb      	strb	r3, [r7, #11]
      break;
 800ae54:	bf00      	nop
  }

  if (err != 0U)
 800ae56:	7afb      	ldrb	r3, [r7, #11]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d11e      	bne.n	800ae9a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800ae5c:	683b      	ldr	r3, [r7, #0]
 800ae5e:	88db      	ldrh	r3, [r3, #6]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d016      	beq.n	800ae92 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800ae64:	893b      	ldrh	r3, [r7, #8]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d00e      	beq.n	800ae88 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800ae6a:	683b      	ldr	r3, [r7, #0]
 800ae6c:	88da      	ldrh	r2, [r3, #6]
 800ae6e:	893b      	ldrh	r3, [r7, #8]
 800ae70:	4293      	cmp	r3, r2
 800ae72:	bf28      	it	cs
 800ae74:	4613      	movcs	r3, r2
 800ae76:	b29b      	uxth	r3, r3
 800ae78:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ae7a:	893b      	ldrh	r3, [r7, #8]
 800ae7c:	461a      	mov	r2, r3
 800ae7e:	68f9      	ldr	r1, [r7, #12]
 800ae80:	6878      	ldr	r0, [r7, #4]
 800ae82:	f000 fa44 	bl	800b30e <USBD_CtlSendData>
 800ae86:	e009      	b.n	800ae9c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ae88:	6839      	ldr	r1, [r7, #0]
 800ae8a:	6878      	ldr	r0, [r7, #4]
 800ae8c:	f000 f9ce 	bl	800b22c <USBD_CtlError>
 800ae90:	e004      	b.n	800ae9c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ae92:	6878      	ldr	r0, [r7, #4]
 800ae94:	f000 fa95 	bl	800b3c2 <USBD_CtlSendStatus>
 800ae98:	e000      	b.n	800ae9c <USBD_GetDescriptor+0x320>
    return;
 800ae9a:	bf00      	nop
  }
}
 800ae9c:	3710      	adds	r7, #16
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	bd80      	pop	{r7, pc}
 800aea2:	bf00      	nop

0800aea4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aea4:	b580      	push	{r7, lr}
 800aea6:	b084      	sub	sp, #16
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	6078      	str	r0, [r7, #4]
 800aeac:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800aeae:	683b      	ldr	r3, [r7, #0]
 800aeb0:	889b      	ldrh	r3, [r3, #4]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d131      	bne.n	800af1a <USBD_SetAddress+0x76>
 800aeb6:	683b      	ldr	r3, [r7, #0]
 800aeb8:	88db      	ldrh	r3, [r3, #6]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d12d      	bne.n	800af1a <USBD_SetAddress+0x76>
 800aebe:	683b      	ldr	r3, [r7, #0]
 800aec0:	885b      	ldrh	r3, [r3, #2]
 800aec2:	2b7f      	cmp	r3, #127	@ 0x7f
 800aec4:	d829      	bhi.n	800af1a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800aec6:	683b      	ldr	r3, [r7, #0]
 800aec8:	885b      	ldrh	r3, [r3, #2]
 800aeca:	b2db      	uxtb	r3, r3
 800aecc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aed0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aed8:	b2db      	uxtb	r3, r3
 800aeda:	2b03      	cmp	r3, #3
 800aedc:	d104      	bne.n	800aee8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800aede:	6839      	ldr	r1, [r7, #0]
 800aee0:	6878      	ldr	r0, [r7, #4]
 800aee2:	f000 f9a3 	bl	800b22c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aee6:	e01d      	b.n	800af24 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	7bfa      	ldrb	r2, [r7, #15]
 800aeec:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800aef0:	7bfb      	ldrb	r3, [r7, #15]
 800aef2:	4619      	mov	r1, r3
 800aef4:	6878      	ldr	r0, [r7, #4]
 800aef6:	f004 fb55 	bl	800f5a4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800aefa:	6878      	ldr	r0, [r7, #4]
 800aefc:	f000 fa61 	bl	800b3c2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800af00:	7bfb      	ldrb	r3, [r7, #15]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d004      	beq.n	800af10 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	2202      	movs	r2, #2
 800af0a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af0e:	e009      	b.n	800af24 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	2201      	movs	r2, #1
 800af14:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af18:	e004      	b.n	800af24 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800af1a:	6839      	ldr	r1, [r7, #0]
 800af1c:	6878      	ldr	r0, [r7, #4]
 800af1e:	f000 f985 	bl	800b22c <USBD_CtlError>
  }
}
 800af22:	bf00      	nop
 800af24:	bf00      	nop
 800af26:	3710      	adds	r7, #16
 800af28:	46bd      	mov	sp, r7
 800af2a:	bd80      	pop	{r7, pc}

0800af2c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af2c:	b580      	push	{r7, lr}
 800af2e:	b084      	sub	sp, #16
 800af30:	af00      	add	r7, sp, #0
 800af32:	6078      	str	r0, [r7, #4]
 800af34:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800af36:	2300      	movs	r3, #0
 800af38:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800af3a:	683b      	ldr	r3, [r7, #0]
 800af3c:	885b      	ldrh	r3, [r3, #2]
 800af3e:	b2da      	uxtb	r2, r3
 800af40:	4b4c      	ldr	r3, [pc, #304]	@ (800b074 <USBD_SetConfig+0x148>)
 800af42:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800af44:	4b4b      	ldr	r3, [pc, #300]	@ (800b074 <USBD_SetConfig+0x148>)
 800af46:	781b      	ldrb	r3, [r3, #0]
 800af48:	2b01      	cmp	r3, #1
 800af4a:	d905      	bls.n	800af58 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800af4c:	6839      	ldr	r1, [r7, #0]
 800af4e:	6878      	ldr	r0, [r7, #4]
 800af50:	f000 f96c 	bl	800b22c <USBD_CtlError>
    return USBD_FAIL;
 800af54:	2303      	movs	r3, #3
 800af56:	e088      	b.n	800b06a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800af5e:	b2db      	uxtb	r3, r3
 800af60:	2b02      	cmp	r3, #2
 800af62:	d002      	beq.n	800af6a <USBD_SetConfig+0x3e>
 800af64:	2b03      	cmp	r3, #3
 800af66:	d025      	beq.n	800afb4 <USBD_SetConfig+0x88>
 800af68:	e071      	b.n	800b04e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800af6a:	4b42      	ldr	r3, [pc, #264]	@ (800b074 <USBD_SetConfig+0x148>)
 800af6c:	781b      	ldrb	r3, [r3, #0]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d01c      	beq.n	800afac <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800af72:	4b40      	ldr	r3, [pc, #256]	@ (800b074 <USBD_SetConfig+0x148>)
 800af74:	781b      	ldrb	r3, [r3, #0]
 800af76:	461a      	mov	r2, r3
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800af7c:	4b3d      	ldr	r3, [pc, #244]	@ (800b074 <USBD_SetConfig+0x148>)
 800af7e:	781b      	ldrb	r3, [r3, #0]
 800af80:	4619      	mov	r1, r3
 800af82:	6878      	ldr	r0, [r7, #4]
 800af84:	f7ff f992 	bl	800a2ac <USBD_SetClassConfig>
 800af88:	4603      	mov	r3, r0
 800af8a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800af8c:	7bfb      	ldrb	r3, [r7, #15]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d004      	beq.n	800af9c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800af92:	6839      	ldr	r1, [r7, #0]
 800af94:	6878      	ldr	r0, [r7, #4]
 800af96:	f000 f949 	bl	800b22c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800af9a:	e065      	b.n	800b068 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800af9c:	6878      	ldr	r0, [r7, #4]
 800af9e:	f000 fa10 	bl	800b3c2 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	2203      	movs	r2, #3
 800afa6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800afaa:	e05d      	b.n	800b068 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800afac:	6878      	ldr	r0, [r7, #4]
 800afae:	f000 fa08 	bl	800b3c2 <USBD_CtlSendStatus>
      break;
 800afb2:	e059      	b.n	800b068 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800afb4:	4b2f      	ldr	r3, [pc, #188]	@ (800b074 <USBD_SetConfig+0x148>)
 800afb6:	781b      	ldrb	r3, [r3, #0]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d112      	bne.n	800afe2 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	2202      	movs	r2, #2
 800afc0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800afc4:	4b2b      	ldr	r3, [pc, #172]	@ (800b074 <USBD_SetConfig+0x148>)
 800afc6:	781b      	ldrb	r3, [r3, #0]
 800afc8:	461a      	mov	r2, r3
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800afce:	4b29      	ldr	r3, [pc, #164]	@ (800b074 <USBD_SetConfig+0x148>)
 800afd0:	781b      	ldrb	r3, [r3, #0]
 800afd2:	4619      	mov	r1, r3
 800afd4:	6878      	ldr	r0, [r7, #4]
 800afd6:	f7ff f985 	bl	800a2e4 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800afda:	6878      	ldr	r0, [r7, #4]
 800afdc:	f000 f9f1 	bl	800b3c2 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800afe0:	e042      	b.n	800b068 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800afe2:	4b24      	ldr	r3, [pc, #144]	@ (800b074 <USBD_SetConfig+0x148>)
 800afe4:	781b      	ldrb	r3, [r3, #0]
 800afe6:	461a      	mov	r2, r3
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	685b      	ldr	r3, [r3, #4]
 800afec:	429a      	cmp	r2, r3
 800afee:	d02a      	beq.n	800b046 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	685b      	ldr	r3, [r3, #4]
 800aff4:	b2db      	uxtb	r3, r3
 800aff6:	4619      	mov	r1, r3
 800aff8:	6878      	ldr	r0, [r7, #4]
 800affa:	f7ff f973 	bl	800a2e4 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800affe:	4b1d      	ldr	r3, [pc, #116]	@ (800b074 <USBD_SetConfig+0x148>)
 800b000:	781b      	ldrb	r3, [r3, #0]
 800b002:	461a      	mov	r2, r3
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b008:	4b1a      	ldr	r3, [pc, #104]	@ (800b074 <USBD_SetConfig+0x148>)
 800b00a:	781b      	ldrb	r3, [r3, #0]
 800b00c:	4619      	mov	r1, r3
 800b00e:	6878      	ldr	r0, [r7, #4]
 800b010:	f7ff f94c 	bl	800a2ac <USBD_SetClassConfig>
 800b014:	4603      	mov	r3, r0
 800b016:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b018:	7bfb      	ldrb	r3, [r7, #15]
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d00f      	beq.n	800b03e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800b01e:	6839      	ldr	r1, [r7, #0]
 800b020:	6878      	ldr	r0, [r7, #4]
 800b022:	f000 f903 	bl	800b22c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	685b      	ldr	r3, [r3, #4]
 800b02a:	b2db      	uxtb	r3, r3
 800b02c:	4619      	mov	r1, r3
 800b02e:	6878      	ldr	r0, [r7, #4]
 800b030:	f7ff f958 	bl	800a2e4 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	2202      	movs	r2, #2
 800b038:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b03c:	e014      	b.n	800b068 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b03e:	6878      	ldr	r0, [r7, #4]
 800b040:	f000 f9bf 	bl	800b3c2 <USBD_CtlSendStatus>
      break;
 800b044:	e010      	b.n	800b068 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b046:	6878      	ldr	r0, [r7, #4]
 800b048:	f000 f9bb 	bl	800b3c2 <USBD_CtlSendStatus>
      break;
 800b04c:	e00c      	b.n	800b068 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800b04e:	6839      	ldr	r1, [r7, #0]
 800b050:	6878      	ldr	r0, [r7, #4]
 800b052:	f000 f8eb 	bl	800b22c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b056:	4b07      	ldr	r3, [pc, #28]	@ (800b074 <USBD_SetConfig+0x148>)
 800b058:	781b      	ldrb	r3, [r3, #0]
 800b05a:	4619      	mov	r1, r3
 800b05c:	6878      	ldr	r0, [r7, #4]
 800b05e:	f7ff f941 	bl	800a2e4 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b062:	2303      	movs	r3, #3
 800b064:	73fb      	strb	r3, [r7, #15]
      break;
 800b066:	bf00      	nop
  }

  return ret;
 800b068:	7bfb      	ldrb	r3, [r7, #15]
}
 800b06a:	4618      	mov	r0, r3
 800b06c:	3710      	adds	r7, #16
 800b06e:	46bd      	mov	sp, r7
 800b070:	bd80      	pop	{r7, pc}
 800b072:	bf00      	nop
 800b074:	20000640 	.word	0x20000640

0800b078 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b078:	b580      	push	{r7, lr}
 800b07a:	b082      	sub	sp, #8
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
 800b080:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b082:	683b      	ldr	r3, [r7, #0]
 800b084:	88db      	ldrh	r3, [r3, #6]
 800b086:	2b01      	cmp	r3, #1
 800b088:	d004      	beq.n	800b094 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b08a:	6839      	ldr	r1, [r7, #0]
 800b08c:	6878      	ldr	r0, [r7, #4]
 800b08e:	f000 f8cd 	bl	800b22c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b092:	e023      	b.n	800b0dc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b09a:	b2db      	uxtb	r3, r3
 800b09c:	2b02      	cmp	r3, #2
 800b09e:	dc02      	bgt.n	800b0a6 <USBD_GetConfig+0x2e>
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	dc03      	bgt.n	800b0ac <USBD_GetConfig+0x34>
 800b0a4:	e015      	b.n	800b0d2 <USBD_GetConfig+0x5a>
 800b0a6:	2b03      	cmp	r3, #3
 800b0a8:	d00b      	beq.n	800b0c2 <USBD_GetConfig+0x4a>
 800b0aa:	e012      	b.n	800b0d2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	2200      	movs	r2, #0
 800b0b0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	3308      	adds	r3, #8
 800b0b6:	2201      	movs	r2, #1
 800b0b8:	4619      	mov	r1, r3
 800b0ba:	6878      	ldr	r0, [r7, #4]
 800b0bc:	f000 f927 	bl	800b30e <USBD_CtlSendData>
        break;
 800b0c0:	e00c      	b.n	800b0dc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	3304      	adds	r3, #4
 800b0c6:	2201      	movs	r2, #1
 800b0c8:	4619      	mov	r1, r3
 800b0ca:	6878      	ldr	r0, [r7, #4]
 800b0cc:	f000 f91f 	bl	800b30e <USBD_CtlSendData>
        break;
 800b0d0:	e004      	b.n	800b0dc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b0d2:	6839      	ldr	r1, [r7, #0]
 800b0d4:	6878      	ldr	r0, [r7, #4]
 800b0d6:	f000 f8a9 	bl	800b22c <USBD_CtlError>
        break;
 800b0da:	bf00      	nop
}
 800b0dc:	bf00      	nop
 800b0de:	3708      	adds	r7, #8
 800b0e0:	46bd      	mov	sp, r7
 800b0e2:	bd80      	pop	{r7, pc}

0800b0e4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b0e4:	b580      	push	{r7, lr}
 800b0e6:	b082      	sub	sp, #8
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	6078      	str	r0, [r7, #4]
 800b0ec:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b0f4:	b2db      	uxtb	r3, r3
 800b0f6:	3b01      	subs	r3, #1
 800b0f8:	2b02      	cmp	r3, #2
 800b0fa:	d81e      	bhi.n	800b13a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b0fc:	683b      	ldr	r3, [r7, #0]
 800b0fe:	88db      	ldrh	r3, [r3, #6]
 800b100:	2b02      	cmp	r3, #2
 800b102:	d004      	beq.n	800b10e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b104:	6839      	ldr	r1, [r7, #0]
 800b106:	6878      	ldr	r0, [r7, #4]
 800b108:	f000 f890 	bl	800b22c <USBD_CtlError>
        break;
 800b10c:	e01a      	b.n	800b144 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	2201      	movs	r2, #1
 800b112:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d005      	beq.n	800b12a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	68db      	ldr	r3, [r3, #12]
 800b122:	f043 0202 	orr.w	r2, r3, #2
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	330c      	adds	r3, #12
 800b12e:	2202      	movs	r2, #2
 800b130:	4619      	mov	r1, r3
 800b132:	6878      	ldr	r0, [r7, #4]
 800b134:	f000 f8eb 	bl	800b30e <USBD_CtlSendData>
      break;
 800b138:	e004      	b.n	800b144 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b13a:	6839      	ldr	r1, [r7, #0]
 800b13c:	6878      	ldr	r0, [r7, #4]
 800b13e:	f000 f875 	bl	800b22c <USBD_CtlError>
      break;
 800b142:	bf00      	nop
  }
}
 800b144:	bf00      	nop
 800b146:	3708      	adds	r7, #8
 800b148:	46bd      	mov	sp, r7
 800b14a:	bd80      	pop	{r7, pc}

0800b14c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b14c:	b580      	push	{r7, lr}
 800b14e:	b082      	sub	sp, #8
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
 800b154:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b156:	683b      	ldr	r3, [r7, #0]
 800b158:	885b      	ldrh	r3, [r3, #2]
 800b15a:	2b01      	cmp	r3, #1
 800b15c:	d106      	bne.n	800b16c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	2201      	movs	r2, #1
 800b162:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b166:	6878      	ldr	r0, [r7, #4]
 800b168:	f000 f92b 	bl	800b3c2 <USBD_CtlSendStatus>
  }
}
 800b16c:	bf00      	nop
 800b16e:	3708      	adds	r7, #8
 800b170:	46bd      	mov	sp, r7
 800b172:	bd80      	pop	{r7, pc}

0800b174 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b174:	b580      	push	{r7, lr}
 800b176:	b082      	sub	sp, #8
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
 800b17c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b184:	b2db      	uxtb	r3, r3
 800b186:	3b01      	subs	r3, #1
 800b188:	2b02      	cmp	r3, #2
 800b18a:	d80b      	bhi.n	800b1a4 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b18c:	683b      	ldr	r3, [r7, #0]
 800b18e:	885b      	ldrh	r3, [r3, #2]
 800b190:	2b01      	cmp	r3, #1
 800b192:	d10c      	bne.n	800b1ae <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	2200      	movs	r2, #0
 800b198:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b19c:	6878      	ldr	r0, [r7, #4]
 800b19e:	f000 f910 	bl	800b3c2 <USBD_CtlSendStatus>
      }
      break;
 800b1a2:	e004      	b.n	800b1ae <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b1a4:	6839      	ldr	r1, [r7, #0]
 800b1a6:	6878      	ldr	r0, [r7, #4]
 800b1a8:	f000 f840 	bl	800b22c <USBD_CtlError>
      break;
 800b1ac:	e000      	b.n	800b1b0 <USBD_ClrFeature+0x3c>
      break;
 800b1ae:	bf00      	nop
  }
}
 800b1b0:	bf00      	nop
 800b1b2:	3708      	adds	r7, #8
 800b1b4:	46bd      	mov	sp, r7
 800b1b6:	bd80      	pop	{r7, pc}

0800b1b8 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b1b8:	b580      	push	{r7, lr}
 800b1ba:	b084      	sub	sp, #16
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	6078      	str	r0, [r7, #4]
 800b1c0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b1c2:	683b      	ldr	r3, [r7, #0]
 800b1c4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	781a      	ldrb	r2, [r3, #0]
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	3301      	adds	r3, #1
 800b1d2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	781a      	ldrb	r2, [r3, #0]
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	3301      	adds	r3, #1
 800b1e0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b1e2:	68f8      	ldr	r0, [r7, #12]
 800b1e4:	f7ff fa92 	bl	800a70c <SWAPBYTE>
 800b1e8:	4603      	mov	r3, r0
 800b1ea:	461a      	mov	r2, r3
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	3301      	adds	r3, #1
 800b1f4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	3301      	adds	r3, #1
 800b1fa:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b1fc:	68f8      	ldr	r0, [r7, #12]
 800b1fe:	f7ff fa85 	bl	800a70c <SWAPBYTE>
 800b202:	4603      	mov	r3, r0
 800b204:	461a      	mov	r2, r3
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	3301      	adds	r3, #1
 800b20e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	3301      	adds	r3, #1
 800b214:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b216:	68f8      	ldr	r0, [r7, #12]
 800b218:	f7ff fa78 	bl	800a70c <SWAPBYTE>
 800b21c:	4603      	mov	r3, r0
 800b21e:	461a      	mov	r2, r3
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	80da      	strh	r2, [r3, #6]
}
 800b224:	bf00      	nop
 800b226:	3710      	adds	r7, #16
 800b228:	46bd      	mov	sp, r7
 800b22a:	bd80      	pop	{r7, pc}

0800b22c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b22c:	b580      	push	{r7, lr}
 800b22e:	b082      	sub	sp, #8
 800b230:	af00      	add	r7, sp, #0
 800b232:	6078      	str	r0, [r7, #4]
 800b234:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b236:	2180      	movs	r1, #128	@ 0x80
 800b238:	6878      	ldr	r0, [r7, #4]
 800b23a:	f004 f949 	bl	800f4d0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b23e:	2100      	movs	r1, #0
 800b240:	6878      	ldr	r0, [r7, #4]
 800b242:	f004 f945 	bl	800f4d0 <USBD_LL_StallEP>
}
 800b246:	bf00      	nop
 800b248:	3708      	adds	r7, #8
 800b24a:	46bd      	mov	sp, r7
 800b24c:	bd80      	pop	{r7, pc}

0800b24e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b24e:	b580      	push	{r7, lr}
 800b250:	b086      	sub	sp, #24
 800b252:	af00      	add	r7, sp, #0
 800b254:	60f8      	str	r0, [r7, #12]
 800b256:	60b9      	str	r1, [r7, #8]
 800b258:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b25a:	2300      	movs	r3, #0
 800b25c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	2b00      	cmp	r3, #0
 800b262:	d036      	beq.n	800b2d2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b268:	6938      	ldr	r0, [r7, #16]
 800b26a:	f000 f836 	bl	800b2da <USBD_GetLen>
 800b26e:	4603      	mov	r3, r0
 800b270:	3301      	adds	r3, #1
 800b272:	b29b      	uxth	r3, r3
 800b274:	005b      	lsls	r3, r3, #1
 800b276:	b29a      	uxth	r2, r3
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b27c:	7dfb      	ldrb	r3, [r7, #23]
 800b27e:	68ba      	ldr	r2, [r7, #8]
 800b280:	4413      	add	r3, r2
 800b282:	687a      	ldr	r2, [r7, #4]
 800b284:	7812      	ldrb	r2, [r2, #0]
 800b286:	701a      	strb	r2, [r3, #0]
  idx++;
 800b288:	7dfb      	ldrb	r3, [r7, #23]
 800b28a:	3301      	adds	r3, #1
 800b28c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b28e:	7dfb      	ldrb	r3, [r7, #23]
 800b290:	68ba      	ldr	r2, [r7, #8]
 800b292:	4413      	add	r3, r2
 800b294:	2203      	movs	r2, #3
 800b296:	701a      	strb	r2, [r3, #0]
  idx++;
 800b298:	7dfb      	ldrb	r3, [r7, #23]
 800b29a:	3301      	adds	r3, #1
 800b29c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b29e:	e013      	b.n	800b2c8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b2a0:	7dfb      	ldrb	r3, [r7, #23]
 800b2a2:	68ba      	ldr	r2, [r7, #8]
 800b2a4:	4413      	add	r3, r2
 800b2a6:	693a      	ldr	r2, [r7, #16]
 800b2a8:	7812      	ldrb	r2, [r2, #0]
 800b2aa:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b2ac:	693b      	ldr	r3, [r7, #16]
 800b2ae:	3301      	adds	r3, #1
 800b2b0:	613b      	str	r3, [r7, #16]
    idx++;
 800b2b2:	7dfb      	ldrb	r3, [r7, #23]
 800b2b4:	3301      	adds	r3, #1
 800b2b6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b2b8:	7dfb      	ldrb	r3, [r7, #23]
 800b2ba:	68ba      	ldr	r2, [r7, #8]
 800b2bc:	4413      	add	r3, r2
 800b2be:	2200      	movs	r2, #0
 800b2c0:	701a      	strb	r2, [r3, #0]
    idx++;
 800b2c2:	7dfb      	ldrb	r3, [r7, #23]
 800b2c4:	3301      	adds	r3, #1
 800b2c6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b2c8:	693b      	ldr	r3, [r7, #16]
 800b2ca:	781b      	ldrb	r3, [r3, #0]
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d1e7      	bne.n	800b2a0 <USBD_GetString+0x52>
 800b2d0:	e000      	b.n	800b2d4 <USBD_GetString+0x86>
    return;
 800b2d2:	bf00      	nop
  }
}
 800b2d4:	3718      	adds	r7, #24
 800b2d6:	46bd      	mov	sp, r7
 800b2d8:	bd80      	pop	{r7, pc}

0800b2da <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b2da:	b480      	push	{r7}
 800b2dc:	b085      	sub	sp, #20
 800b2de:	af00      	add	r7, sp, #0
 800b2e0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b2e2:	2300      	movs	r3, #0
 800b2e4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b2ea:	e005      	b.n	800b2f8 <USBD_GetLen+0x1e>
  {
    len++;
 800b2ec:	7bfb      	ldrb	r3, [r7, #15]
 800b2ee:	3301      	adds	r3, #1
 800b2f0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b2f2:	68bb      	ldr	r3, [r7, #8]
 800b2f4:	3301      	adds	r3, #1
 800b2f6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b2f8:	68bb      	ldr	r3, [r7, #8]
 800b2fa:	781b      	ldrb	r3, [r3, #0]
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d1f5      	bne.n	800b2ec <USBD_GetLen+0x12>
  }

  return len;
 800b300:	7bfb      	ldrb	r3, [r7, #15]
}
 800b302:	4618      	mov	r0, r3
 800b304:	3714      	adds	r7, #20
 800b306:	46bd      	mov	sp, r7
 800b308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b30c:	4770      	bx	lr

0800b30e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b30e:	b580      	push	{r7, lr}
 800b310:	b084      	sub	sp, #16
 800b312:	af00      	add	r7, sp, #0
 800b314:	60f8      	str	r0, [r7, #12]
 800b316:	60b9      	str	r1, [r7, #8]
 800b318:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	2202      	movs	r2, #2
 800b31e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	687a      	ldr	r2, [r7, #4]
 800b326:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	687a      	ldr	r2, [r7, #4]
 800b32c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	68ba      	ldr	r2, [r7, #8]
 800b332:	2100      	movs	r1, #0
 800b334:	68f8      	ldr	r0, [r7, #12]
 800b336:	f004 f954 	bl	800f5e2 <USBD_LL_Transmit>

  return USBD_OK;
 800b33a:	2300      	movs	r3, #0
}
 800b33c:	4618      	mov	r0, r3
 800b33e:	3710      	adds	r7, #16
 800b340:	46bd      	mov	sp, r7
 800b342:	bd80      	pop	{r7, pc}

0800b344 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b344:	b580      	push	{r7, lr}
 800b346:	b084      	sub	sp, #16
 800b348:	af00      	add	r7, sp, #0
 800b34a:	60f8      	str	r0, [r7, #12]
 800b34c:	60b9      	str	r1, [r7, #8]
 800b34e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	68ba      	ldr	r2, [r7, #8]
 800b354:	2100      	movs	r1, #0
 800b356:	68f8      	ldr	r0, [r7, #12]
 800b358:	f004 f943 	bl	800f5e2 <USBD_LL_Transmit>

  return USBD_OK;
 800b35c:	2300      	movs	r3, #0
}
 800b35e:	4618      	mov	r0, r3
 800b360:	3710      	adds	r7, #16
 800b362:	46bd      	mov	sp, r7
 800b364:	bd80      	pop	{r7, pc}

0800b366 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b366:	b580      	push	{r7, lr}
 800b368:	b084      	sub	sp, #16
 800b36a:	af00      	add	r7, sp, #0
 800b36c:	60f8      	str	r0, [r7, #12]
 800b36e:	60b9      	str	r1, [r7, #8]
 800b370:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	2203      	movs	r2, #3
 800b376:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	687a      	ldr	r2, [r7, #4]
 800b37e:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	687a      	ldr	r2, [r7, #4]
 800b386:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	68ba      	ldr	r2, [r7, #8]
 800b38e:	2100      	movs	r1, #0
 800b390:	68f8      	ldr	r0, [r7, #12]
 800b392:	f004 f947 	bl	800f624 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b396:	2300      	movs	r3, #0
}
 800b398:	4618      	mov	r0, r3
 800b39a:	3710      	adds	r7, #16
 800b39c:	46bd      	mov	sp, r7
 800b39e:	bd80      	pop	{r7, pc}

0800b3a0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b3a0:	b580      	push	{r7, lr}
 800b3a2:	b084      	sub	sp, #16
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	60f8      	str	r0, [r7, #12]
 800b3a8:	60b9      	str	r1, [r7, #8]
 800b3aa:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	68ba      	ldr	r2, [r7, #8]
 800b3b0:	2100      	movs	r1, #0
 800b3b2:	68f8      	ldr	r0, [r7, #12]
 800b3b4:	f004 f936 	bl	800f624 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b3b8:	2300      	movs	r3, #0
}
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	3710      	adds	r7, #16
 800b3be:	46bd      	mov	sp, r7
 800b3c0:	bd80      	pop	{r7, pc}

0800b3c2 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b3c2:	b580      	push	{r7, lr}
 800b3c4:	b082      	sub	sp, #8
 800b3c6:	af00      	add	r7, sp, #0
 800b3c8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	2204      	movs	r2, #4
 800b3ce:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	2200      	movs	r2, #0
 800b3d6:	2100      	movs	r1, #0
 800b3d8:	6878      	ldr	r0, [r7, #4]
 800b3da:	f004 f902 	bl	800f5e2 <USBD_LL_Transmit>

  return USBD_OK;
 800b3de:	2300      	movs	r3, #0
}
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	3708      	adds	r7, #8
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	bd80      	pop	{r7, pc}

0800b3e8 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b3e8:	b580      	push	{r7, lr}
 800b3ea:	b082      	sub	sp, #8
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	2205      	movs	r2, #5
 800b3f4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b3f8:	2300      	movs	r3, #0
 800b3fa:	2200      	movs	r2, #0
 800b3fc:	2100      	movs	r1, #0
 800b3fe:	6878      	ldr	r0, [r7, #4]
 800b400:	f004 f910 	bl	800f624 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b404:	2300      	movs	r3, #0
}
 800b406:	4618      	mov	r0, r3
 800b408:	3708      	adds	r7, #8
 800b40a:	46bd      	mov	sp, r7
 800b40c:	bd80      	pop	{r7, pc}
	...

0800b410 <__NVIC_SetPriority>:
{
 800b410:	b480      	push	{r7}
 800b412:	b083      	sub	sp, #12
 800b414:	af00      	add	r7, sp, #0
 800b416:	4603      	mov	r3, r0
 800b418:	6039      	str	r1, [r7, #0]
 800b41a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b41c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b420:	2b00      	cmp	r3, #0
 800b422:	db0a      	blt.n	800b43a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b424:	683b      	ldr	r3, [r7, #0]
 800b426:	b2da      	uxtb	r2, r3
 800b428:	490c      	ldr	r1, [pc, #48]	@ (800b45c <__NVIC_SetPriority+0x4c>)
 800b42a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b42e:	0112      	lsls	r2, r2, #4
 800b430:	b2d2      	uxtb	r2, r2
 800b432:	440b      	add	r3, r1
 800b434:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800b438:	e00a      	b.n	800b450 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b43a:	683b      	ldr	r3, [r7, #0]
 800b43c:	b2da      	uxtb	r2, r3
 800b43e:	4908      	ldr	r1, [pc, #32]	@ (800b460 <__NVIC_SetPriority+0x50>)
 800b440:	79fb      	ldrb	r3, [r7, #7]
 800b442:	f003 030f 	and.w	r3, r3, #15
 800b446:	3b04      	subs	r3, #4
 800b448:	0112      	lsls	r2, r2, #4
 800b44a:	b2d2      	uxtb	r2, r2
 800b44c:	440b      	add	r3, r1
 800b44e:	761a      	strb	r2, [r3, #24]
}
 800b450:	bf00      	nop
 800b452:	370c      	adds	r7, #12
 800b454:	46bd      	mov	sp, r7
 800b456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b45a:	4770      	bx	lr
 800b45c:	e000e100 	.word	0xe000e100
 800b460:	e000ed00 	.word	0xe000ed00

0800b464 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800b464:	b580      	push	{r7, lr}
 800b466:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800b468:	4b05      	ldr	r3, [pc, #20]	@ (800b480 <SysTick_Handler+0x1c>)
 800b46a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800b46c:	f002 fb06 	bl	800da7c <xTaskGetSchedulerState>
 800b470:	4603      	mov	r3, r0
 800b472:	2b01      	cmp	r3, #1
 800b474:	d001      	beq.n	800b47a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800b476:	f003 f9ff 	bl	800e878 <xPortSysTickHandler>
  }
}
 800b47a:	bf00      	nop
 800b47c:	bd80      	pop	{r7, pc}
 800b47e:	bf00      	nop
 800b480:	e000e010 	.word	0xe000e010

0800b484 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b484:	b580      	push	{r7, lr}
 800b486:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800b488:	2100      	movs	r1, #0
 800b48a:	f06f 0004 	mvn.w	r0, #4
 800b48e:	f7ff ffbf 	bl	800b410 <__NVIC_SetPriority>
#endif
}
 800b492:	bf00      	nop
 800b494:	bd80      	pop	{r7, pc}
	...

0800b498 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b498:	b480      	push	{r7}
 800b49a:	b083      	sub	sp, #12
 800b49c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b49e:	f3ef 8305 	mrs	r3, IPSR
 800b4a2:	603b      	str	r3, [r7, #0]
  return(result);
 800b4a4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d003      	beq.n	800b4b2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800b4aa:	f06f 0305 	mvn.w	r3, #5
 800b4ae:	607b      	str	r3, [r7, #4]
 800b4b0:	e00c      	b.n	800b4cc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b4b2:	4b0a      	ldr	r3, [pc, #40]	@ (800b4dc <osKernelInitialize+0x44>)
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d105      	bne.n	800b4c6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b4ba:	4b08      	ldr	r3, [pc, #32]	@ (800b4dc <osKernelInitialize+0x44>)
 800b4bc:	2201      	movs	r2, #1
 800b4be:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	607b      	str	r3, [r7, #4]
 800b4c4:	e002      	b.n	800b4cc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800b4c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b4ca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b4cc:	687b      	ldr	r3, [r7, #4]
}
 800b4ce:	4618      	mov	r0, r3
 800b4d0:	370c      	adds	r7, #12
 800b4d2:	46bd      	mov	sp, r7
 800b4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d8:	4770      	bx	lr
 800b4da:	bf00      	nop
 800b4dc:	20000644 	.word	0x20000644

0800b4e0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b4e0:	b580      	push	{r7, lr}
 800b4e2:	b082      	sub	sp, #8
 800b4e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b4e6:	f3ef 8305 	mrs	r3, IPSR
 800b4ea:	603b      	str	r3, [r7, #0]
  return(result);
 800b4ec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d003      	beq.n	800b4fa <osKernelStart+0x1a>
    stat = osErrorISR;
 800b4f2:	f06f 0305 	mvn.w	r3, #5
 800b4f6:	607b      	str	r3, [r7, #4]
 800b4f8:	e010      	b.n	800b51c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b4fa:	4b0b      	ldr	r3, [pc, #44]	@ (800b528 <osKernelStart+0x48>)
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	2b01      	cmp	r3, #1
 800b500:	d109      	bne.n	800b516 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b502:	f7ff ffbf 	bl	800b484 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b506:	4b08      	ldr	r3, [pc, #32]	@ (800b528 <osKernelStart+0x48>)
 800b508:	2202      	movs	r2, #2
 800b50a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b50c:	f001 fe30 	bl	800d170 <vTaskStartScheduler>
      stat = osOK;
 800b510:	2300      	movs	r3, #0
 800b512:	607b      	str	r3, [r7, #4]
 800b514:	e002      	b.n	800b51c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800b516:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b51a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b51c:	687b      	ldr	r3, [r7, #4]
}
 800b51e:	4618      	mov	r0, r3
 800b520:	3708      	adds	r7, #8
 800b522:	46bd      	mov	sp, r7
 800b524:	bd80      	pop	{r7, pc}
 800b526:	bf00      	nop
 800b528:	20000644 	.word	0x20000644

0800b52c <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800b52c:	b580      	push	{r7, lr}
 800b52e:	b082      	sub	sp, #8
 800b530:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b532:	f3ef 8305 	mrs	r3, IPSR
 800b536:	603b      	str	r3, [r7, #0]
  return(result);
 800b538:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d003      	beq.n	800b546 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800b53e:	f001 ff43 	bl	800d3c8 <xTaskGetTickCountFromISR>
 800b542:	6078      	str	r0, [r7, #4]
 800b544:	e002      	b.n	800b54c <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800b546:	f001 ff2f 	bl	800d3a8 <xTaskGetTickCount>
 800b54a:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800b54c:	687b      	ldr	r3, [r7, #4]
}
 800b54e:	4618      	mov	r0, r3
 800b550:	3708      	adds	r7, #8
 800b552:	46bd      	mov	sp, r7
 800b554:	bd80      	pop	{r7, pc}

0800b556 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b556:	b580      	push	{r7, lr}
 800b558:	b08e      	sub	sp, #56	@ 0x38
 800b55a:	af04      	add	r7, sp, #16
 800b55c:	60f8      	str	r0, [r7, #12]
 800b55e:	60b9      	str	r1, [r7, #8]
 800b560:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b562:	2300      	movs	r3, #0
 800b564:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b566:	f3ef 8305 	mrs	r3, IPSR
 800b56a:	617b      	str	r3, [r7, #20]
  return(result);
 800b56c:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d17e      	bne.n	800b670 <osThreadNew+0x11a>
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	2b00      	cmp	r3, #0
 800b576:	d07b      	beq.n	800b670 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800b578:	2380      	movs	r3, #128	@ 0x80
 800b57a:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800b57c:	2318      	movs	r3, #24
 800b57e:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800b580:	2300      	movs	r3, #0
 800b582:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800b584:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b588:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d045      	beq.n	800b61c <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	2b00      	cmp	r3, #0
 800b596:	d002      	beq.n	800b59e <osThreadNew+0x48>
        name = attr->name;
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	699b      	ldr	r3, [r3, #24]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d002      	beq.n	800b5ac <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	699b      	ldr	r3, [r3, #24]
 800b5aa:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b5ac:	69fb      	ldr	r3, [r7, #28]
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d008      	beq.n	800b5c4 <osThreadNew+0x6e>
 800b5b2:	69fb      	ldr	r3, [r7, #28]
 800b5b4:	2b38      	cmp	r3, #56	@ 0x38
 800b5b6:	d805      	bhi.n	800b5c4 <osThreadNew+0x6e>
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	685b      	ldr	r3, [r3, #4]
 800b5bc:	f003 0301 	and.w	r3, r3, #1
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d001      	beq.n	800b5c8 <osThreadNew+0x72>
        return (NULL);
 800b5c4:	2300      	movs	r3, #0
 800b5c6:	e054      	b.n	800b672 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	695b      	ldr	r3, [r3, #20]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d003      	beq.n	800b5d8 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	695b      	ldr	r3, [r3, #20]
 800b5d4:	089b      	lsrs	r3, r3, #2
 800b5d6:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	689b      	ldr	r3, [r3, #8]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d00e      	beq.n	800b5fe <osThreadNew+0xa8>
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	68db      	ldr	r3, [r3, #12]
 800b5e4:	2ba7      	cmp	r3, #167	@ 0xa7
 800b5e6:	d90a      	bls.n	800b5fe <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d006      	beq.n	800b5fe <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	695b      	ldr	r3, [r3, #20]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d002      	beq.n	800b5fe <osThreadNew+0xa8>
        mem = 1;
 800b5f8:	2301      	movs	r3, #1
 800b5fa:	61bb      	str	r3, [r7, #24]
 800b5fc:	e010      	b.n	800b620 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	689b      	ldr	r3, [r3, #8]
 800b602:	2b00      	cmp	r3, #0
 800b604:	d10c      	bne.n	800b620 <osThreadNew+0xca>
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	68db      	ldr	r3, [r3, #12]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d108      	bne.n	800b620 <osThreadNew+0xca>
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	691b      	ldr	r3, [r3, #16]
 800b612:	2b00      	cmp	r3, #0
 800b614:	d104      	bne.n	800b620 <osThreadNew+0xca>
          mem = 0;
 800b616:	2300      	movs	r3, #0
 800b618:	61bb      	str	r3, [r7, #24]
 800b61a:	e001      	b.n	800b620 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800b61c:	2300      	movs	r3, #0
 800b61e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b620:	69bb      	ldr	r3, [r7, #24]
 800b622:	2b01      	cmp	r3, #1
 800b624:	d110      	bne.n	800b648 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800b62a:	687a      	ldr	r2, [r7, #4]
 800b62c:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b62e:	9202      	str	r2, [sp, #8]
 800b630:	9301      	str	r3, [sp, #4]
 800b632:	69fb      	ldr	r3, [r7, #28]
 800b634:	9300      	str	r3, [sp, #0]
 800b636:	68bb      	ldr	r3, [r7, #8]
 800b638:	6a3a      	ldr	r2, [r7, #32]
 800b63a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b63c:	68f8      	ldr	r0, [r7, #12]
 800b63e:	f001 fb23 	bl	800cc88 <xTaskCreateStatic>
 800b642:	4603      	mov	r3, r0
 800b644:	613b      	str	r3, [r7, #16]
 800b646:	e013      	b.n	800b670 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800b648:	69bb      	ldr	r3, [r7, #24]
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d110      	bne.n	800b670 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b64e:	6a3b      	ldr	r3, [r7, #32]
 800b650:	b29a      	uxth	r2, r3
 800b652:	f107 0310 	add.w	r3, r7, #16
 800b656:	9301      	str	r3, [sp, #4]
 800b658:	69fb      	ldr	r3, [r7, #28]
 800b65a:	9300      	str	r3, [sp, #0]
 800b65c:	68bb      	ldr	r3, [r7, #8]
 800b65e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b660:	68f8      	ldr	r0, [r7, #12]
 800b662:	f001 fb71 	bl	800cd48 <xTaskCreate>
 800b666:	4603      	mov	r3, r0
 800b668:	2b01      	cmp	r3, #1
 800b66a:	d001      	beq.n	800b670 <osThreadNew+0x11a>
            hTask = NULL;
 800b66c:	2300      	movs	r3, #0
 800b66e:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b670:	693b      	ldr	r3, [r7, #16]
}
 800b672:	4618      	mov	r0, r3
 800b674:	3728      	adds	r7, #40	@ 0x28
 800b676:	46bd      	mov	sp, r7
 800b678:	bd80      	pop	{r7, pc}

0800b67a <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800b67a:	b580      	push	{r7, lr}
 800b67c:	b084      	sub	sp, #16
 800b67e:	af00      	add	r7, sp, #0
 800b680:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b682:	f3ef 8305 	mrs	r3, IPSR
 800b686:	60bb      	str	r3, [r7, #8]
  return(result);
 800b688:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d003      	beq.n	800b696 <osDelay+0x1c>
    stat = osErrorISR;
 800b68e:	f06f 0305 	mvn.w	r3, #5
 800b692:	60fb      	str	r3, [r7, #12]
 800b694:	e007      	b.n	800b6a6 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800b696:	2300      	movs	r3, #0
 800b698:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d002      	beq.n	800b6a6 <osDelay+0x2c>
      vTaskDelay(ticks);
 800b6a0:	6878      	ldr	r0, [r7, #4]
 800b6a2:	f001 fd2f 	bl	800d104 <vTaskDelay>
    }
  }

  return (stat);
 800b6a6:	68fb      	ldr	r3, [r7, #12]
}
 800b6a8:	4618      	mov	r0, r3
 800b6aa:	3710      	adds	r7, #16
 800b6ac:	46bd      	mov	sp, r7
 800b6ae:	bd80      	pop	{r7, pc}

0800b6b0 <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 800b6b0:	b580      	push	{r7, lr}
 800b6b2:	b086      	sub	sp, #24
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b6b8:	f3ef 8305 	mrs	r3, IPSR
 800b6bc:	60fb      	str	r3, [r7, #12]
  return(result);
 800b6be:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d003      	beq.n	800b6cc <osDelayUntil+0x1c>
    stat = osErrorISR;
 800b6c4:	f06f 0305 	mvn.w	r3, #5
 800b6c8:	617b      	str	r3, [r7, #20]
 800b6ca:	e019      	b.n	800b700 <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 800b6cc:	2300      	movs	r3, #0
 800b6ce:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 800b6d0:	f001 fe6a 	bl	800d3a8 <xTaskGetTickCount>
 800b6d4:	4603      	mov	r3, r0
 800b6d6:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 800b6d8:	68bb      	ldr	r3, [r7, #8]
 800b6da:	687a      	ldr	r2, [r7, #4]
 800b6dc:	1ad3      	subs	r3, r2, r3
 800b6de:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 800b6e0:	693b      	ldr	r3, [r7, #16]
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d009      	beq.n	800b6fa <osDelayUntil+0x4a>
 800b6e6:	693b      	ldr	r3, [r7, #16]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	db06      	blt.n	800b6fa <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 800b6ec:	f107 0308 	add.w	r3, r7, #8
 800b6f0:	6939      	ldr	r1, [r7, #16]
 800b6f2:	4618      	mov	r0, r3
 800b6f4:	f001 fc86 	bl	800d004 <vTaskDelayUntil>
 800b6f8:	e002      	b.n	800b700 <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 800b6fa:	f06f 0303 	mvn.w	r3, #3
 800b6fe:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800b700:	697b      	ldr	r3, [r7, #20]
}
 800b702:	4618      	mov	r0, r3
 800b704:	3718      	adds	r7, #24
 800b706:	46bd      	mov	sp, r7
 800b708:	bd80      	pop	{r7, pc}

0800b70a <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800b70a:	b580      	push	{r7, lr}
 800b70c:	b088      	sub	sp, #32
 800b70e:	af00      	add	r7, sp, #0
 800b710:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800b712:	2300      	movs	r3, #0
 800b714:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b716:	f3ef 8305 	mrs	r3, IPSR
 800b71a:	60bb      	str	r3, [r7, #8]
  return(result);
 800b71c:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d174      	bne.n	800b80c <osMutexNew+0x102>
    if (attr != NULL) {
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	2b00      	cmp	r3, #0
 800b726:	d003      	beq.n	800b730 <osMutexNew+0x26>
      type = attr->attr_bits;
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	685b      	ldr	r3, [r3, #4]
 800b72c:	61bb      	str	r3, [r7, #24]
 800b72e:	e001      	b.n	800b734 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800b730:	2300      	movs	r3, #0
 800b732:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800b734:	69bb      	ldr	r3, [r7, #24]
 800b736:	f003 0301 	and.w	r3, r3, #1
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d002      	beq.n	800b744 <osMutexNew+0x3a>
      rmtx = 1U;
 800b73e:	2301      	movs	r3, #1
 800b740:	617b      	str	r3, [r7, #20]
 800b742:	e001      	b.n	800b748 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800b744:	2300      	movs	r3, #0
 800b746:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800b748:	69bb      	ldr	r3, [r7, #24]
 800b74a:	f003 0308 	and.w	r3, r3, #8
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d15c      	bne.n	800b80c <osMutexNew+0x102>
      mem = -1;
 800b752:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b756:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d015      	beq.n	800b78a <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	689b      	ldr	r3, [r3, #8]
 800b762:	2b00      	cmp	r3, #0
 800b764:	d006      	beq.n	800b774 <osMutexNew+0x6a>
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	68db      	ldr	r3, [r3, #12]
 800b76a:	2b4f      	cmp	r3, #79	@ 0x4f
 800b76c:	d902      	bls.n	800b774 <osMutexNew+0x6a>
          mem = 1;
 800b76e:	2301      	movs	r3, #1
 800b770:	613b      	str	r3, [r7, #16]
 800b772:	e00c      	b.n	800b78e <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	689b      	ldr	r3, [r3, #8]
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d108      	bne.n	800b78e <osMutexNew+0x84>
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	68db      	ldr	r3, [r3, #12]
 800b780:	2b00      	cmp	r3, #0
 800b782:	d104      	bne.n	800b78e <osMutexNew+0x84>
            mem = 0;
 800b784:	2300      	movs	r3, #0
 800b786:	613b      	str	r3, [r7, #16]
 800b788:	e001      	b.n	800b78e <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800b78a:	2300      	movs	r3, #0
 800b78c:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800b78e:	693b      	ldr	r3, [r7, #16]
 800b790:	2b01      	cmp	r3, #1
 800b792:	d112      	bne.n	800b7ba <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800b794:	697b      	ldr	r3, [r7, #20]
 800b796:	2b00      	cmp	r3, #0
 800b798:	d007      	beq.n	800b7aa <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	689b      	ldr	r3, [r3, #8]
 800b79e:	4619      	mov	r1, r3
 800b7a0:	2004      	movs	r0, #4
 800b7a2:	f000 fc50 	bl	800c046 <xQueueCreateMutexStatic>
 800b7a6:	61f8      	str	r0, [r7, #28]
 800b7a8:	e016      	b.n	800b7d8 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	689b      	ldr	r3, [r3, #8]
 800b7ae:	4619      	mov	r1, r3
 800b7b0:	2001      	movs	r0, #1
 800b7b2:	f000 fc48 	bl	800c046 <xQueueCreateMutexStatic>
 800b7b6:	61f8      	str	r0, [r7, #28]
 800b7b8:	e00e      	b.n	800b7d8 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800b7ba:	693b      	ldr	r3, [r7, #16]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d10b      	bne.n	800b7d8 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800b7c0:	697b      	ldr	r3, [r7, #20]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d004      	beq.n	800b7d0 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800b7c6:	2004      	movs	r0, #4
 800b7c8:	f000 fc25 	bl	800c016 <xQueueCreateMutex>
 800b7cc:	61f8      	str	r0, [r7, #28]
 800b7ce:	e003      	b.n	800b7d8 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800b7d0:	2001      	movs	r0, #1
 800b7d2:	f000 fc20 	bl	800c016 <xQueueCreateMutex>
 800b7d6:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800b7d8:	69fb      	ldr	r3, [r7, #28]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d00c      	beq.n	800b7f8 <osMutexNew+0xee>
        if (attr != NULL) {
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d003      	beq.n	800b7ec <osMutexNew+0xe2>
          name = attr->name;
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	60fb      	str	r3, [r7, #12]
 800b7ea:	e001      	b.n	800b7f0 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800b7ec:	2300      	movs	r3, #0
 800b7ee:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800b7f0:	68f9      	ldr	r1, [r7, #12]
 800b7f2:	69f8      	ldr	r0, [r7, #28]
 800b7f4:	f001 f9ea 	bl	800cbcc <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800b7f8:	69fb      	ldr	r3, [r7, #28]
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d006      	beq.n	800b80c <osMutexNew+0x102>
 800b7fe:	697b      	ldr	r3, [r7, #20]
 800b800:	2b00      	cmp	r3, #0
 800b802:	d003      	beq.n	800b80c <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800b804:	69fb      	ldr	r3, [r7, #28]
 800b806:	f043 0301 	orr.w	r3, r3, #1
 800b80a:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800b80c:	69fb      	ldr	r3, [r7, #28]
}
 800b80e:	4618      	mov	r0, r3
 800b810:	3720      	adds	r7, #32
 800b812:	46bd      	mov	sp, r7
 800b814:	bd80      	pop	{r7, pc}

0800b816 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800b816:	b580      	push	{r7, lr}
 800b818:	b086      	sub	sp, #24
 800b81a:	af00      	add	r7, sp, #0
 800b81c:	6078      	str	r0, [r7, #4]
 800b81e:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	f023 0301 	bic.w	r3, r3, #1
 800b826:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	f003 0301 	and.w	r3, r3, #1
 800b82e:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800b830:	2300      	movs	r3, #0
 800b832:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b834:	f3ef 8305 	mrs	r3, IPSR
 800b838:	60bb      	str	r3, [r7, #8]
  return(result);
 800b83a:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d003      	beq.n	800b848 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800b840:	f06f 0305 	mvn.w	r3, #5
 800b844:	617b      	str	r3, [r7, #20]
 800b846:	e02c      	b.n	800b8a2 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800b848:	693b      	ldr	r3, [r7, #16]
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d103      	bne.n	800b856 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800b84e:	f06f 0303 	mvn.w	r3, #3
 800b852:	617b      	str	r3, [r7, #20]
 800b854:	e025      	b.n	800b8a2 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d011      	beq.n	800b880 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800b85c:	6839      	ldr	r1, [r7, #0]
 800b85e:	6938      	ldr	r0, [r7, #16]
 800b860:	f000 fc41 	bl	800c0e6 <xQueueTakeMutexRecursive>
 800b864:	4603      	mov	r3, r0
 800b866:	2b01      	cmp	r3, #1
 800b868:	d01b      	beq.n	800b8a2 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800b86a:	683b      	ldr	r3, [r7, #0]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d003      	beq.n	800b878 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800b870:	f06f 0301 	mvn.w	r3, #1
 800b874:	617b      	str	r3, [r7, #20]
 800b876:	e014      	b.n	800b8a2 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800b878:	f06f 0302 	mvn.w	r3, #2
 800b87c:	617b      	str	r3, [r7, #20]
 800b87e:	e010      	b.n	800b8a2 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800b880:	6839      	ldr	r1, [r7, #0]
 800b882:	6938      	ldr	r0, [r7, #16]
 800b884:	f000 fee8 	bl	800c658 <xQueueSemaphoreTake>
 800b888:	4603      	mov	r3, r0
 800b88a:	2b01      	cmp	r3, #1
 800b88c:	d009      	beq.n	800b8a2 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800b88e:	683b      	ldr	r3, [r7, #0]
 800b890:	2b00      	cmp	r3, #0
 800b892:	d003      	beq.n	800b89c <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800b894:	f06f 0301 	mvn.w	r3, #1
 800b898:	617b      	str	r3, [r7, #20]
 800b89a:	e002      	b.n	800b8a2 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800b89c:	f06f 0302 	mvn.w	r3, #2
 800b8a0:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800b8a2:	697b      	ldr	r3, [r7, #20]
}
 800b8a4:	4618      	mov	r0, r3
 800b8a6:	3718      	adds	r7, #24
 800b8a8:	46bd      	mov	sp, r7
 800b8aa:	bd80      	pop	{r7, pc}

0800b8ac <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800b8ac:	b580      	push	{r7, lr}
 800b8ae:	b086      	sub	sp, #24
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	f023 0301 	bic.w	r3, r3, #1
 800b8ba:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	f003 0301 	and.w	r3, r3, #1
 800b8c2:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b8c8:	f3ef 8305 	mrs	r3, IPSR
 800b8cc:	60bb      	str	r3, [r7, #8]
  return(result);
 800b8ce:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d003      	beq.n	800b8dc <osMutexRelease+0x30>
    stat = osErrorISR;
 800b8d4:	f06f 0305 	mvn.w	r3, #5
 800b8d8:	617b      	str	r3, [r7, #20]
 800b8da:	e01f      	b.n	800b91c <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800b8dc:	693b      	ldr	r3, [r7, #16]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d103      	bne.n	800b8ea <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800b8e2:	f06f 0303 	mvn.w	r3, #3
 800b8e6:	617b      	str	r3, [r7, #20]
 800b8e8:	e018      	b.n	800b91c <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d009      	beq.n	800b904 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800b8f0:	6938      	ldr	r0, [r7, #16]
 800b8f2:	f000 fbc3 	bl	800c07c <xQueueGiveMutexRecursive>
 800b8f6:	4603      	mov	r3, r0
 800b8f8:	2b01      	cmp	r3, #1
 800b8fa:	d00f      	beq.n	800b91c <osMutexRelease+0x70>
        stat = osErrorResource;
 800b8fc:	f06f 0302 	mvn.w	r3, #2
 800b900:	617b      	str	r3, [r7, #20]
 800b902:	e00b      	b.n	800b91c <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800b904:	2300      	movs	r3, #0
 800b906:	2200      	movs	r2, #0
 800b908:	2100      	movs	r1, #0
 800b90a:	6938      	ldr	r0, [r7, #16]
 800b90c:	f000 fc22 	bl	800c154 <xQueueGenericSend>
 800b910:	4603      	mov	r3, r0
 800b912:	2b01      	cmp	r3, #1
 800b914:	d002      	beq.n	800b91c <osMutexRelease+0x70>
        stat = osErrorResource;
 800b916:	f06f 0302 	mvn.w	r3, #2
 800b91a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800b91c:	697b      	ldr	r3, [r7, #20]
}
 800b91e:	4618      	mov	r0, r3
 800b920:	3718      	adds	r7, #24
 800b922:	46bd      	mov	sp, r7
 800b924:	bd80      	pop	{r7, pc}

0800b926 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800b926:	b580      	push	{r7, lr}
 800b928:	b08a      	sub	sp, #40	@ 0x28
 800b92a:	af02      	add	r7, sp, #8
 800b92c:	60f8      	str	r0, [r7, #12]
 800b92e:	60b9      	str	r1, [r7, #8]
 800b930:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800b932:	2300      	movs	r3, #0
 800b934:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b936:	f3ef 8305 	mrs	r3, IPSR
 800b93a:	613b      	str	r3, [r7, #16]
  return(result);
 800b93c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d15f      	bne.n	800ba02 <osMessageQueueNew+0xdc>
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	2b00      	cmp	r3, #0
 800b946:	d05c      	beq.n	800ba02 <osMessageQueueNew+0xdc>
 800b948:	68bb      	ldr	r3, [r7, #8]
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d059      	beq.n	800ba02 <osMessageQueueNew+0xdc>
    mem = -1;
 800b94e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b952:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	2b00      	cmp	r3, #0
 800b958:	d029      	beq.n	800b9ae <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	689b      	ldr	r3, [r3, #8]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d012      	beq.n	800b988 <osMessageQueueNew+0x62>
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	68db      	ldr	r3, [r3, #12]
 800b966:	2b4f      	cmp	r3, #79	@ 0x4f
 800b968:	d90e      	bls.n	800b988 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d00a      	beq.n	800b988 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	695a      	ldr	r2, [r3, #20]
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	68b9      	ldr	r1, [r7, #8]
 800b97a:	fb01 f303 	mul.w	r3, r1, r3
 800b97e:	429a      	cmp	r2, r3
 800b980:	d302      	bcc.n	800b988 <osMessageQueueNew+0x62>
        mem = 1;
 800b982:	2301      	movs	r3, #1
 800b984:	61bb      	str	r3, [r7, #24]
 800b986:	e014      	b.n	800b9b2 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	689b      	ldr	r3, [r3, #8]
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d110      	bne.n	800b9b2 <osMessageQueueNew+0x8c>
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	68db      	ldr	r3, [r3, #12]
 800b994:	2b00      	cmp	r3, #0
 800b996:	d10c      	bne.n	800b9b2 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d108      	bne.n	800b9b2 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	695b      	ldr	r3, [r3, #20]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d104      	bne.n	800b9b2 <osMessageQueueNew+0x8c>
          mem = 0;
 800b9a8:	2300      	movs	r3, #0
 800b9aa:	61bb      	str	r3, [r7, #24]
 800b9ac:	e001      	b.n	800b9b2 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800b9ae:	2300      	movs	r3, #0
 800b9b0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b9b2:	69bb      	ldr	r3, [r7, #24]
 800b9b4:	2b01      	cmp	r3, #1
 800b9b6:	d10b      	bne.n	800b9d0 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	691a      	ldr	r2, [r3, #16]
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	689b      	ldr	r3, [r3, #8]
 800b9c0:	2100      	movs	r1, #0
 800b9c2:	9100      	str	r1, [sp, #0]
 800b9c4:	68b9      	ldr	r1, [r7, #8]
 800b9c6:	68f8      	ldr	r0, [r7, #12]
 800b9c8:	f000 fa30 	bl	800be2c <xQueueGenericCreateStatic>
 800b9cc:	61f8      	str	r0, [r7, #28]
 800b9ce:	e008      	b.n	800b9e2 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800b9d0:	69bb      	ldr	r3, [r7, #24]
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d105      	bne.n	800b9e2 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800b9d6:	2200      	movs	r2, #0
 800b9d8:	68b9      	ldr	r1, [r7, #8]
 800b9da:	68f8      	ldr	r0, [r7, #12]
 800b9dc:	f000 faa3 	bl	800bf26 <xQueueGenericCreate>
 800b9e0:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800b9e2:	69fb      	ldr	r3, [r7, #28]
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d00c      	beq.n	800ba02 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d003      	beq.n	800b9f6 <osMessageQueueNew+0xd0>
        name = attr->name;
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	617b      	str	r3, [r7, #20]
 800b9f4:	e001      	b.n	800b9fa <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800b9f6:	2300      	movs	r3, #0
 800b9f8:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800b9fa:	6979      	ldr	r1, [r7, #20]
 800b9fc:	69f8      	ldr	r0, [r7, #28]
 800b9fe:	f001 f8e5 	bl	800cbcc <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800ba02:	69fb      	ldr	r3, [r7, #28]
}
 800ba04:	4618      	mov	r0, r3
 800ba06:	3720      	adds	r7, #32
 800ba08:	46bd      	mov	sp, r7
 800ba0a:	bd80      	pop	{r7, pc}

0800ba0c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800ba0c:	b580      	push	{r7, lr}
 800ba0e:	b088      	sub	sp, #32
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	60f8      	str	r0, [r7, #12]
 800ba14:	60b9      	str	r1, [r7, #8]
 800ba16:	603b      	str	r3, [r7, #0]
 800ba18:	4613      	mov	r3, r2
 800ba1a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800ba20:	2300      	movs	r3, #0
 800ba22:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ba24:	f3ef 8305 	mrs	r3, IPSR
 800ba28:	617b      	str	r3, [r7, #20]
  return(result);
 800ba2a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d028      	beq.n	800ba82 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ba30:	69bb      	ldr	r3, [r7, #24]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d005      	beq.n	800ba42 <osMessageQueuePut+0x36>
 800ba36:	68bb      	ldr	r3, [r7, #8]
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d002      	beq.n	800ba42 <osMessageQueuePut+0x36>
 800ba3c:	683b      	ldr	r3, [r7, #0]
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d003      	beq.n	800ba4a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800ba42:	f06f 0303 	mvn.w	r3, #3
 800ba46:	61fb      	str	r3, [r7, #28]
 800ba48:	e038      	b.n	800babc <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800ba4a:	2300      	movs	r3, #0
 800ba4c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800ba4e:	f107 0210 	add.w	r2, r7, #16
 800ba52:	2300      	movs	r3, #0
 800ba54:	68b9      	ldr	r1, [r7, #8]
 800ba56:	69b8      	ldr	r0, [r7, #24]
 800ba58:	f000 fc7e 	bl	800c358 <xQueueGenericSendFromISR>
 800ba5c:	4603      	mov	r3, r0
 800ba5e:	2b01      	cmp	r3, #1
 800ba60:	d003      	beq.n	800ba6a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800ba62:	f06f 0302 	mvn.w	r3, #2
 800ba66:	61fb      	str	r3, [r7, #28]
 800ba68:	e028      	b.n	800babc <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800ba6a:	693b      	ldr	r3, [r7, #16]
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d025      	beq.n	800babc <osMessageQueuePut+0xb0>
 800ba70:	4b15      	ldr	r3, [pc, #84]	@ (800bac8 <osMessageQueuePut+0xbc>)
 800ba72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ba76:	601a      	str	r2, [r3, #0]
 800ba78:	f3bf 8f4f 	dsb	sy
 800ba7c:	f3bf 8f6f 	isb	sy
 800ba80:	e01c      	b.n	800babc <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800ba82:	69bb      	ldr	r3, [r7, #24]
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d002      	beq.n	800ba8e <osMessageQueuePut+0x82>
 800ba88:	68bb      	ldr	r3, [r7, #8]
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d103      	bne.n	800ba96 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800ba8e:	f06f 0303 	mvn.w	r3, #3
 800ba92:	61fb      	str	r3, [r7, #28]
 800ba94:	e012      	b.n	800babc <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800ba96:	2300      	movs	r3, #0
 800ba98:	683a      	ldr	r2, [r7, #0]
 800ba9a:	68b9      	ldr	r1, [r7, #8]
 800ba9c:	69b8      	ldr	r0, [r7, #24]
 800ba9e:	f000 fb59 	bl	800c154 <xQueueGenericSend>
 800baa2:	4603      	mov	r3, r0
 800baa4:	2b01      	cmp	r3, #1
 800baa6:	d009      	beq.n	800babc <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800baa8:	683b      	ldr	r3, [r7, #0]
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d003      	beq.n	800bab6 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800baae:	f06f 0301 	mvn.w	r3, #1
 800bab2:	61fb      	str	r3, [r7, #28]
 800bab4:	e002      	b.n	800babc <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800bab6:	f06f 0302 	mvn.w	r3, #2
 800baba:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800babc:	69fb      	ldr	r3, [r7, #28]
}
 800babe:	4618      	mov	r0, r3
 800bac0:	3720      	adds	r7, #32
 800bac2:	46bd      	mov	sp, r7
 800bac4:	bd80      	pop	{r7, pc}
 800bac6:	bf00      	nop
 800bac8:	e000ed04 	.word	0xe000ed04

0800bacc <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800bacc:	b580      	push	{r7, lr}
 800bace:	b088      	sub	sp, #32
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	60f8      	str	r0, [r7, #12]
 800bad4:	60b9      	str	r1, [r7, #8]
 800bad6:	607a      	str	r2, [r7, #4]
 800bad8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800bade:	2300      	movs	r3, #0
 800bae0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bae2:	f3ef 8305 	mrs	r3, IPSR
 800bae6:	617b      	str	r3, [r7, #20]
  return(result);
 800bae8:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800baea:	2b00      	cmp	r3, #0
 800baec:	d028      	beq.n	800bb40 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800baee:	69bb      	ldr	r3, [r7, #24]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d005      	beq.n	800bb00 <osMessageQueueGet+0x34>
 800baf4:	68bb      	ldr	r3, [r7, #8]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d002      	beq.n	800bb00 <osMessageQueueGet+0x34>
 800bafa:	683b      	ldr	r3, [r7, #0]
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d003      	beq.n	800bb08 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800bb00:	f06f 0303 	mvn.w	r3, #3
 800bb04:	61fb      	str	r3, [r7, #28]
 800bb06:	e037      	b.n	800bb78 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800bb08:	2300      	movs	r3, #0
 800bb0a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800bb0c:	f107 0310 	add.w	r3, r7, #16
 800bb10:	461a      	mov	r2, r3
 800bb12:	68b9      	ldr	r1, [r7, #8]
 800bb14:	69b8      	ldr	r0, [r7, #24]
 800bb16:	f000 feaf 	bl	800c878 <xQueueReceiveFromISR>
 800bb1a:	4603      	mov	r3, r0
 800bb1c:	2b01      	cmp	r3, #1
 800bb1e:	d003      	beq.n	800bb28 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800bb20:	f06f 0302 	mvn.w	r3, #2
 800bb24:	61fb      	str	r3, [r7, #28]
 800bb26:	e027      	b.n	800bb78 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800bb28:	693b      	ldr	r3, [r7, #16]
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d024      	beq.n	800bb78 <osMessageQueueGet+0xac>
 800bb2e:	4b15      	ldr	r3, [pc, #84]	@ (800bb84 <osMessageQueueGet+0xb8>)
 800bb30:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bb34:	601a      	str	r2, [r3, #0]
 800bb36:	f3bf 8f4f 	dsb	sy
 800bb3a:	f3bf 8f6f 	isb	sy
 800bb3e:	e01b      	b.n	800bb78 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800bb40:	69bb      	ldr	r3, [r7, #24]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d002      	beq.n	800bb4c <osMessageQueueGet+0x80>
 800bb46:	68bb      	ldr	r3, [r7, #8]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d103      	bne.n	800bb54 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800bb4c:	f06f 0303 	mvn.w	r3, #3
 800bb50:	61fb      	str	r3, [r7, #28]
 800bb52:	e011      	b.n	800bb78 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800bb54:	683a      	ldr	r2, [r7, #0]
 800bb56:	68b9      	ldr	r1, [r7, #8]
 800bb58:	69b8      	ldr	r0, [r7, #24]
 800bb5a:	f000 fc9b 	bl	800c494 <xQueueReceive>
 800bb5e:	4603      	mov	r3, r0
 800bb60:	2b01      	cmp	r3, #1
 800bb62:	d009      	beq.n	800bb78 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800bb64:	683b      	ldr	r3, [r7, #0]
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d003      	beq.n	800bb72 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800bb6a:	f06f 0301 	mvn.w	r3, #1
 800bb6e:	61fb      	str	r3, [r7, #28]
 800bb70:	e002      	b.n	800bb78 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800bb72:	f06f 0302 	mvn.w	r3, #2
 800bb76:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800bb78:	69fb      	ldr	r3, [r7, #28]
}
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	3720      	adds	r7, #32
 800bb7e:	46bd      	mov	sp, r7
 800bb80:	bd80      	pop	{r7, pc}
 800bb82:	bf00      	nop
 800bb84:	e000ed04 	.word	0xe000ed04

0800bb88 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800bb88:	b480      	push	{r7}
 800bb8a:	b085      	sub	sp, #20
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	60f8      	str	r0, [r7, #12]
 800bb90:	60b9      	str	r1, [r7, #8]
 800bb92:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	4a07      	ldr	r2, [pc, #28]	@ (800bbb4 <vApplicationGetIdleTaskMemory+0x2c>)
 800bb98:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800bb9a:	68bb      	ldr	r3, [r7, #8]
 800bb9c:	4a06      	ldr	r2, [pc, #24]	@ (800bbb8 <vApplicationGetIdleTaskMemory+0x30>)
 800bb9e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	2280      	movs	r2, #128	@ 0x80
 800bba4:	601a      	str	r2, [r3, #0]
}
 800bba6:	bf00      	nop
 800bba8:	3714      	adds	r7, #20
 800bbaa:	46bd      	mov	sp, r7
 800bbac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb0:	4770      	bx	lr
 800bbb2:	bf00      	nop
 800bbb4:	20000648 	.word	0x20000648
 800bbb8:	200006f0 	.word	0x200006f0

0800bbbc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800bbbc:	b480      	push	{r7}
 800bbbe:	b085      	sub	sp, #20
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	60f8      	str	r0, [r7, #12]
 800bbc4:	60b9      	str	r1, [r7, #8]
 800bbc6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	4a07      	ldr	r2, [pc, #28]	@ (800bbe8 <vApplicationGetTimerTaskMemory+0x2c>)
 800bbcc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800bbce:	68bb      	ldr	r3, [r7, #8]
 800bbd0:	4a06      	ldr	r2, [pc, #24]	@ (800bbec <vApplicationGetTimerTaskMemory+0x30>)
 800bbd2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800bbda:	601a      	str	r2, [r3, #0]
}
 800bbdc:	bf00      	nop
 800bbde:	3714      	adds	r7, #20
 800bbe0:	46bd      	mov	sp, r7
 800bbe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe6:	4770      	bx	lr
 800bbe8:	200008f0 	.word	0x200008f0
 800bbec:	20000998 	.word	0x20000998

0800bbf0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800bbf0:	b480      	push	{r7}
 800bbf2:	b083      	sub	sp, #12
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	f103 0208 	add.w	r2, r3, #8
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bc08:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	f103 0208 	add.w	r2, r3, #8
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	f103 0208 	add.w	r2, r3, #8
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	2200      	movs	r2, #0
 800bc22:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800bc24:	bf00      	nop
 800bc26:	370c      	adds	r7, #12
 800bc28:	46bd      	mov	sp, r7
 800bc2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2e:	4770      	bx	lr

0800bc30 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800bc30:	b480      	push	{r7}
 800bc32:	b083      	sub	sp, #12
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	2200      	movs	r2, #0
 800bc3c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800bc3e:	bf00      	nop
 800bc40:	370c      	adds	r7, #12
 800bc42:	46bd      	mov	sp, r7
 800bc44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc48:	4770      	bx	lr

0800bc4a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bc4a:	b480      	push	{r7}
 800bc4c:	b085      	sub	sp, #20
 800bc4e:	af00      	add	r7, sp, #0
 800bc50:	6078      	str	r0, [r7, #4]
 800bc52:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	685b      	ldr	r3, [r3, #4]
 800bc58:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800bc5a:	683b      	ldr	r3, [r7, #0]
 800bc5c:	68fa      	ldr	r2, [r7, #12]
 800bc5e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	689a      	ldr	r2, [r3, #8]
 800bc64:	683b      	ldr	r3, [r7, #0]
 800bc66:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	689b      	ldr	r3, [r3, #8]
 800bc6c:	683a      	ldr	r2, [r7, #0]
 800bc6e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	683a      	ldr	r2, [r7, #0]
 800bc74:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800bc76:	683b      	ldr	r3, [r7, #0]
 800bc78:	687a      	ldr	r2, [r7, #4]
 800bc7a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	1c5a      	adds	r2, r3, #1
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	601a      	str	r2, [r3, #0]
}
 800bc86:	bf00      	nop
 800bc88:	3714      	adds	r7, #20
 800bc8a:	46bd      	mov	sp, r7
 800bc8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc90:	4770      	bx	lr

0800bc92 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bc92:	b480      	push	{r7}
 800bc94:	b085      	sub	sp, #20
 800bc96:	af00      	add	r7, sp, #0
 800bc98:	6078      	str	r0, [r7, #4]
 800bc9a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800bc9c:	683b      	ldr	r3, [r7, #0]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800bca2:	68bb      	ldr	r3, [r7, #8]
 800bca4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bca8:	d103      	bne.n	800bcb2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	691b      	ldr	r3, [r3, #16]
 800bcae:	60fb      	str	r3, [r7, #12]
 800bcb0:	e00c      	b.n	800bccc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	3308      	adds	r3, #8
 800bcb6:	60fb      	str	r3, [r7, #12]
 800bcb8:	e002      	b.n	800bcc0 <vListInsert+0x2e>
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	685b      	ldr	r3, [r3, #4]
 800bcbe:	60fb      	str	r3, [r7, #12]
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	685b      	ldr	r3, [r3, #4]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	68ba      	ldr	r2, [r7, #8]
 800bcc8:	429a      	cmp	r2, r3
 800bcca:	d2f6      	bcs.n	800bcba <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	685a      	ldr	r2, [r3, #4]
 800bcd0:	683b      	ldr	r3, [r7, #0]
 800bcd2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800bcd4:	683b      	ldr	r3, [r7, #0]
 800bcd6:	685b      	ldr	r3, [r3, #4]
 800bcd8:	683a      	ldr	r2, [r7, #0]
 800bcda:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800bcdc:	683b      	ldr	r3, [r7, #0]
 800bcde:	68fa      	ldr	r2, [r7, #12]
 800bce0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	683a      	ldr	r2, [r7, #0]
 800bce6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800bce8:	683b      	ldr	r3, [r7, #0]
 800bcea:	687a      	ldr	r2, [r7, #4]
 800bcec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	1c5a      	adds	r2, r3, #1
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	601a      	str	r2, [r3, #0]
}
 800bcf8:	bf00      	nop
 800bcfa:	3714      	adds	r7, #20
 800bcfc:	46bd      	mov	sp, r7
 800bcfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd02:	4770      	bx	lr

0800bd04 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800bd04:	b480      	push	{r7}
 800bd06:	b085      	sub	sp, #20
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	691b      	ldr	r3, [r3, #16]
 800bd10:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	685b      	ldr	r3, [r3, #4]
 800bd16:	687a      	ldr	r2, [r7, #4]
 800bd18:	6892      	ldr	r2, [r2, #8]
 800bd1a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	689b      	ldr	r3, [r3, #8]
 800bd20:	687a      	ldr	r2, [r7, #4]
 800bd22:	6852      	ldr	r2, [r2, #4]
 800bd24:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	685b      	ldr	r3, [r3, #4]
 800bd2a:	687a      	ldr	r2, [r7, #4]
 800bd2c:	429a      	cmp	r2, r3
 800bd2e:	d103      	bne.n	800bd38 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	689a      	ldr	r2, [r3, #8]
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	2200      	movs	r2, #0
 800bd3c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	1e5a      	subs	r2, r3, #1
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	681b      	ldr	r3, [r3, #0]
}
 800bd4c:	4618      	mov	r0, r3
 800bd4e:	3714      	adds	r7, #20
 800bd50:	46bd      	mov	sp, r7
 800bd52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd56:	4770      	bx	lr

0800bd58 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800bd58:	b580      	push	{r7, lr}
 800bd5a:	b084      	sub	sp, #16
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	6078      	str	r0, [r7, #4]
 800bd60:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d10b      	bne.n	800bd84 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800bd6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd70:	f383 8811 	msr	BASEPRI, r3
 800bd74:	f3bf 8f6f 	isb	sy
 800bd78:	f3bf 8f4f 	dsb	sy
 800bd7c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800bd7e:	bf00      	nop
 800bd80:	bf00      	nop
 800bd82:	e7fd      	b.n	800bd80 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800bd84:	f002 fce8 	bl	800e758 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	681a      	ldr	r2, [r3, #0]
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bd90:	68f9      	ldr	r1, [r7, #12]
 800bd92:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800bd94:	fb01 f303 	mul.w	r3, r1, r3
 800bd98:	441a      	add	r2, r3
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	2200      	movs	r2, #0
 800bda2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	681a      	ldr	r2, [r3, #0]
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	681a      	ldr	r2, [r3, #0]
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bdb4:	3b01      	subs	r3, #1
 800bdb6:	68f9      	ldr	r1, [r7, #12]
 800bdb8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800bdba:	fb01 f303 	mul.w	r3, r1, r3
 800bdbe:	441a      	add	r2, r3
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	22ff      	movs	r2, #255	@ 0xff
 800bdc8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	22ff      	movs	r2, #255	@ 0xff
 800bdd0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800bdd4:	683b      	ldr	r3, [r7, #0]
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d114      	bne.n	800be04 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	691b      	ldr	r3, [r3, #16]
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d01a      	beq.n	800be18 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	3310      	adds	r3, #16
 800bde6:	4618      	mov	r0, r3
 800bde8:	f001 fc72 	bl	800d6d0 <xTaskRemoveFromEventList>
 800bdec:	4603      	mov	r3, r0
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d012      	beq.n	800be18 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800bdf2:	4b0d      	ldr	r3, [pc, #52]	@ (800be28 <xQueueGenericReset+0xd0>)
 800bdf4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bdf8:	601a      	str	r2, [r3, #0]
 800bdfa:	f3bf 8f4f 	dsb	sy
 800bdfe:	f3bf 8f6f 	isb	sy
 800be02:	e009      	b.n	800be18 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	3310      	adds	r3, #16
 800be08:	4618      	mov	r0, r3
 800be0a:	f7ff fef1 	bl	800bbf0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	3324      	adds	r3, #36	@ 0x24
 800be12:	4618      	mov	r0, r3
 800be14:	f7ff feec 	bl	800bbf0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800be18:	f002 fcd0 	bl	800e7bc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800be1c:	2301      	movs	r3, #1
}
 800be1e:	4618      	mov	r0, r3
 800be20:	3710      	adds	r7, #16
 800be22:	46bd      	mov	sp, r7
 800be24:	bd80      	pop	{r7, pc}
 800be26:	bf00      	nop
 800be28:	e000ed04 	.word	0xe000ed04

0800be2c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800be2c:	b580      	push	{r7, lr}
 800be2e:	b08e      	sub	sp, #56	@ 0x38
 800be30:	af02      	add	r7, sp, #8
 800be32:	60f8      	str	r0, [r7, #12]
 800be34:	60b9      	str	r1, [r7, #8]
 800be36:	607a      	str	r2, [r7, #4]
 800be38:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d10b      	bne.n	800be58 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800be40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be44:	f383 8811 	msr	BASEPRI, r3
 800be48:	f3bf 8f6f 	isb	sy
 800be4c:	f3bf 8f4f 	dsb	sy
 800be50:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800be52:	bf00      	nop
 800be54:	bf00      	nop
 800be56:	e7fd      	b.n	800be54 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800be58:	683b      	ldr	r3, [r7, #0]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d10b      	bne.n	800be76 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800be5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be62:	f383 8811 	msr	BASEPRI, r3
 800be66:	f3bf 8f6f 	isb	sy
 800be6a:	f3bf 8f4f 	dsb	sy
 800be6e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800be70:	bf00      	nop
 800be72:	bf00      	nop
 800be74:	e7fd      	b.n	800be72 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d002      	beq.n	800be82 <xQueueGenericCreateStatic+0x56>
 800be7c:	68bb      	ldr	r3, [r7, #8]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d001      	beq.n	800be86 <xQueueGenericCreateStatic+0x5a>
 800be82:	2301      	movs	r3, #1
 800be84:	e000      	b.n	800be88 <xQueueGenericCreateStatic+0x5c>
 800be86:	2300      	movs	r3, #0
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d10b      	bne.n	800bea4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800be8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be90:	f383 8811 	msr	BASEPRI, r3
 800be94:	f3bf 8f6f 	isb	sy
 800be98:	f3bf 8f4f 	dsb	sy
 800be9c:	623b      	str	r3, [r7, #32]
}
 800be9e:	bf00      	nop
 800bea0:	bf00      	nop
 800bea2:	e7fd      	b.n	800bea0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d102      	bne.n	800beb0 <xQueueGenericCreateStatic+0x84>
 800beaa:	68bb      	ldr	r3, [r7, #8]
 800beac:	2b00      	cmp	r3, #0
 800beae:	d101      	bne.n	800beb4 <xQueueGenericCreateStatic+0x88>
 800beb0:	2301      	movs	r3, #1
 800beb2:	e000      	b.n	800beb6 <xQueueGenericCreateStatic+0x8a>
 800beb4:	2300      	movs	r3, #0
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d10b      	bne.n	800bed2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800beba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bebe:	f383 8811 	msr	BASEPRI, r3
 800bec2:	f3bf 8f6f 	isb	sy
 800bec6:	f3bf 8f4f 	dsb	sy
 800beca:	61fb      	str	r3, [r7, #28]
}
 800becc:	bf00      	nop
 800bece:	bf00      	nop
 800bed0:	e7fd      	b.n	800bece <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800bed2:	2350      	movs	r3, #80	@ 0x50
 800bed4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800bed6:	697b      	ldr	r3, [r7, #20]
 800bed8:	2b50      	cmp	r3, #80	@ 0x50
 800beda:	d00b      	beq.n	800bef4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800bedc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bee0:	f383 8811 	msr	BASEPRI, r3
 800bee4:	f3bf 8f6f 	isb	sy
 800bee8:	f3bf 8f4f 	dsb	sy
 800beec:	61bb      	str	r3, [r7, #24]
}
 800beee:	bf00      	nop
 800bef0:	bf00      	nop
 800bef2:	e7fd      	b.n	800bef0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800bef4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bef6:	683b      	ldr	r3, [r7, #0]
 800bef8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800befa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800befc:	2b00      	cmp	r3, #0
 800befe:	d00d      	beq.n	800bf1c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800bf00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf02:	2201      	movs	r2, #1
 800bf04:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bf08:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800bf0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf0e:	9300      	str	r3, [sp, #0]
 800bf10:	4613      	mov	r3, r2
 800bf12:	687a      	ldr	r2, [r7, #4]
 800bf14:	68b9      	ldr	r1, [r7, #8]
 800bf16:	68f8      	ldr	r0, [r7, #12]
 800bf18:	f000 f840 	bl	800bf9c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bf1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800bf1e:	4618      	mov	r0, r3
 800bf20:	3730      	adds	r7, #48	@ 0x30
 800bf22:	46bd      	mov	sp, r7
 800bf24:	bd80      	pop	{r7, pc}

0800bf26 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800bf26:	b580      	push	{r7, lr}
 800bf28:	b08a      	sub	sp, #40	@ 0x28
 800bf2a:	af02      	add	r7, sp, #8
 800bf2c:	60f8      	str	r0, [r7, #12]
 800bf2e:	60b9      	str	r1, [r7, #8]
 800bf30:	4613      	mov	r3, r2
 800bf32:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d10b      	bne.n	800bf52 <xQueueGenericCreate+0x2c>
	__asm volatile
 800bf3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf3e:	f383 8811 	msr	BASEPRI, r3
 800bf42:	f3bf 8f6f 	isb	sy
 800bf46:	f3bf 8f4f 	dsb	sy
 800bf4a:	613b      	str	r3, [r7, #16]
}
 800bf4c:	bf00      	nop
 800bf4e:	bf00      	nop
 800bf50:	e7fd      	b.n	800bf4e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	68ba      	ldr	r2, [r7, #8]
 800bf56:	fb02 f303 	mul.w	r3, r2, r3
 800bf5a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800bf5c:	69fb      	ldr	r3, [r7, #28]
 800bf5e:	3350      	adds	r3, #80	@ 0x50
 800bf60:	4618      	mov	r0, r3
 800bf62:	f002 fd1b 	bl	800e99c <pvPortMalloc>
 800bf66:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800bf68:	69bb      	ldr	r3, [r7, #24]
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d011      	beq.n	800bf92 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800bf6e:	69bb      	ldr	r3, [r7, #24]
 800bf70:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bf72:	697b      	ldr	r3, [r7, #20]
 800bf74:	3350      	adds	r3, #80	@ 0x50
 800bf76:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800bf78:	69bb      	ldr	r3, [r7, #24]
 800bf7a:	2200      	movs	r2, #0
 800bf7c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bf80:	79fa      	ldrb	r2, [r7, #7]
 800bf82:	69bb      	ldr	r3, [r7, #24]
 800bf84:	9300      	str	r3, [sp, #0]
 800bf86:	4613      	mov	r3, r2
 800bf88:	697a      	ldr	r2, [r7, #20]
 800bf8a:	68b9      	ldr	r1, [r7, #8]
 800bf8c:	68f8      	ldr	r0, [r7, #12]
 800bf8e:	f000 f805 	bl	800bf9c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bf92:	69bb      	ldr	r3, [r7, #24]
	}
 800bf94:	4618      	mov	r0, r3
 800bf96:	3720      	adds	r7, #32
 800bf98:	46bd      	mov	sp, r7
 800bf9a:	bd80      	pop	{r7, pc}

0800bf9c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800bf9c:	b580      	push	{r7, lr}
 800bf9e:	b084      	sub	sp, #16
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	60f8      	str	r0, [r7, #12]
 800bfa4:	60b9      	str	r1, [r7, #8]
 800bfa6:	607a      	str	r2, [r7, #4]
 800bfa8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800bfaa:	68bb      	ldr	r3, [r7, #8]
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d103      	bne.n	800bfb8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800bfb0:	69bb      	ldr	r3, [r7, #24]
 800bfb2:	69ba      	ldr	r2, [r7, #24]
 800bfb4:	601a      	str	r2, [r3, #0]
 800bfb6:	e002      	b.n	800bfbe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800bfb8:	69bb      	ldr	r3, [r7, #24]
 800bfba:	687a      	ldr	r2, [r7, #4]
 800bfbc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800bfbe:	69bb      	ldr	r3, [r7, #24]
 800bfc0:	68fa      	ldr	r2, [r7, #12]
 800bfc2:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800bfc4:	69bb      	ldr	r3, [r7, #24]
 800bfc6:	68ba      	ldr	r2, [r7, #8]
 800bfc8:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800bfca:	2101      	movs	r1, #1
 800bfcc:	69b8      	ldr	r0, [r7, #24]
 800bfce:	f7ff fec3 	bl	800bd58 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800bfd2:	69bb      	ldr	r3, [r7, #24]
 800bfd4:	78fa      	ldrb	r2, [r7, #3]
 800bfd6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800bfda:	bf00      	nop
 800bfdc:	3710      	adds	r7, #16
 800bfde:	46bd      	mov	sp, r7
 800bfe0:	bd80      	pop	{r7, pc}

0800bfe2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800bfe2:	b580      	push	{r7, lr}
 800bfe4:	b082      	sub	sp, #8
 800bfe6:	af00      	add	r7, sp, #0
 800bfe8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d00e      	beq.n	800c00e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	2200      	movs	r2, #0
 800bff4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	2200      	movs	r2, #0
 800bffa:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	2200      	movs	r2, #0
 800c000:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800c002:	2300      	movs	r3, #0
 800c004:	2200      	movs	r2, #0
 800c006:	2100      	movs	r1, #0
 800c008:	6878      	ldr	r0, [r7, #4]
 800c00a:	f000 f8a3 	bl	800c154 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800c00e:	bf00      	nop
 800c010:	3708      	adds	r7, #8
 800c012:	46bd      	mov	sp, r7
 800c014:	bd80      	pop	{r7, pc}

0800c016 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800c016:	b580      	push	{r7, lr}
 800c018:	b086      	sub	sp, #24
 800c01a:	af00      	add	r7, sp, #0
 800c01c:	4603      	mov	r3, r0
 800c01e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800c020:	2301      	movs	r3, #1
 800c022:	617b      	str	r3, [r7, #20]
 800c024:	2300      	movs	r3, #0
 800c026:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800c028:	79fb      	ldrb	r3, [r7, #7]
 800c02a:	461a      	mov	r2, r3
 800c02c:	6939      	ldr	r1, [r7, #16]
 800c02e:	6978      	ldr	r0, [r7, #20]
 800c030:	f7ff ff79 	bl	800bf26 <xQueueGenericCreate>
 800c034:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800c036:	68f8      	ldr	r0, [r7, #12]
 800c038:	f7ff ffd3 	bl	800bfe2 <prvInitialiseMutex>

		return xNewQueue;
 800c03c:	68fb      	ldr	r3, [r7, #12]
	}
 800c03e:	4618      	mov	r0, r3
 800c040:	3718      	adds	r7, #24
 800c042:	46bd      	mov	sp, r7
 800c044:	bd80      	pop	{r7, pc}

0800c046 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800c046:	b580      	push	{r7, lr}
 800c048:	b088      	sub	sp, #32
 800c04a:	af02      	add	r7, sp, #8
 800c04c:	4603      	mov	r3, r0
 800c04e:	6039      	str	r1, [r7, #0]
 800c050:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800c052:	2301      	movs	r3, #1
 800c054:	617b      	str	r3, [r7, #20]
 800c056:	2300      	movs	r3, #0
 800c058:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800c05a:	79fb      	ldrb	r3, [r7, #7]
 800c05c:	9300      	str	r3, [sp, #0]
 800c05e:	683b      	ldr	r3, [r7, #0]
 800c060:	2200      	movs	r2, #0
 800c062:	6939      	ldr	r1, [r7, #16]
 800c064:	6978      	ldr	r0, [r7, #20]
 800c066:	f7ff fee1 	bl	800be2c <xQueueGenericCreateStatic>
 800c06a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800c06c:	68f8      	ldr	r0, [r7, #12]
 800c06e:	f7ff ffb8 	bl	800bfe2 <prvInitialiseMutex>

		return xNewQueue;
 800c072:	68fb      	ldr	r3, [r7, #12]
	}
 800c074:	4618      	mov	r0, r3
 800c076:	3718      	adds	r7, #24
 800c078:	46bd      	mov	sp, r7
 800c07a:	bd80      	pop	{r7, pc}

0800c07c <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800c07c:	b590      	push	{r4, r7, lr}
 800c07e:	b087      	sub	sp, #28
 800c080:	af00      	add	r7, sp, #0
 800c082:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800c088:	693b      	ldr	r3, [r7, #16]
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d10b      	bne.n	800c0a6 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 800c08e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c092:	f383 8811 	msr	BASEPRI, r3
 800c096:	f3bf 8f6f 	isb	sy
 800c09a:	f3bf 8f4f 	dsb	sy
 800c09e:	60fb      	str	r3, [r7, #12]
}
 800c0a0:	bf00      	nop
 800c0a2:	bf00      	nop
 800c0a4:	e7fd      	b.n	800c0a2 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800c0a6:	693b      	ldr	r3, [r7, #16]
 800c0a8:	689c      	ldr	r4, [r3, #8]
 800c0aa:	f001 fcd7 	bl	800da5c <xTaskGetCurrentTaskHandle>
 800c0ae:	4603      	mov	r3, r0
 800c0b0:	429c      	cmp	r4, r3
 800c0b2:	d111      	bne.n	800c0d8 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800c0b4:	693b      	ldr	r3, [r7, #16]
 800c0b6:	68db      	ldr	r3, [r3, #12]
 800c0b8:	1e5a      	subs	r2, r3, #1
 800c0ba:	693b      	ldr	r3, [r7, #16]
 800c0bc:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800c0be:	693b      	ldr	r3, [r7, #16]
 800c0c0:	68db      	ldr	r3, [r3, #12]
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d105      	bne.n	800c0d2 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800c0c6:	2300      	movs	r3, #0
 800c0c8:	2200      	movs	r2, #0
 800c0ca:	2100      	movs	r1, #0
 800c0cc:	6938      	ldr	r0, [r7, #16]
 800c0ce:	f000 f841 	bl	800c154 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800c0d2:	2301      	movs	r3, #1
 800c0d4:	617b      	str	r3, [r7, #20]
 800c0d6:	e001      	b.n	800c0dc <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800c0d8:	2300      	movs	r3, #0
 800c0da:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800c0dc:	697b      	ldr	r3, [r7, #20]
	}
 800c0de:	4618      	mov	r0, r3
 800c0e0:	371c      	adds	r7, #28
 800c0e2:	46bd      	mov	sp, r7
 800c0e4:	bd90      	pop	{r4, r7, pc}

0800c0e6 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800c0e6:	b590      	push	{r4, r7, lr}
 800c0e8:	b087      	sub	sp, #28
 800c0ea:	af00      	add	r7, sp, #0
 800c0ec:	6078      	str	r0, [r7, #4]
 800c0ee:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800c0f4:	693b      	ldr	r3, [r7, #16]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d10b      	bne.n	800c112 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 800c0fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0fe:	f383 8811 	msr	BASEPRI, r3
 800c102:	f3bf 8f6f 	isb	sy
 800c106:	f3bf 8f4f 	dsb	sy
 800c10a:	60fb      	str	r3, [r7, #12]
}
 800c10c:	bf00      	nop
 800c10e:	bf00      	nop
 800c110:	e7fd      	b.n	800c10e <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800c112:	693b      	ldr	r3, [r7, #16]
 800c114:	689c      	ldr	r4, [r3, #8]
 800c116:	f001 fca1 	bl	800da5c <xTaskGetCurrentTaskHandle>
 800c11a:	4603      	mov	r3, r0
 800c11c:	429c      	cmp	r4, r3
 800c11e:	d107      	bne.n	800c130 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800c120:	693b      	ldr	r3, [r7, #16]
 800c122:	68db      	ldr	r3, [r3, #12]
 800c124:	1c5a      	adds	r2, r3, #1
 800c126:	693b      	ldr	r3, [r7, #16]
 800c128:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800c12a:	2301      	movs	r3, #1
 800c12c:	617b      	str	r3, [r7, #20]
 800c12e:	e00c      	b.n	800c14a <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800c130:	6839      	ldr	r1, [r7, #0]
 800c132:	6938      	ldr	r0, [r7, #16]
 800c134:	f000 fa90 	bl	800c658 <xQueueSemaphoreTake>
 800c138:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800c13a:	697b      	ldr	r3, [r7, #20]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d004      	beq.n	800c14a <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800c140:	693b      	ldr	r3, [r7, #16]
 800c142:	68db      	ldr	r3, [r3, #12]
 800c144:	1c5a      	adds	r2, r3, #1
 800c146:	693b      	ldr	r3, [r7, #16]
 800c148:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800c14a:	697b      	ldr	r3, [r7, #20]
	}
 800c14c:	4618      	mov	r0, r3
 800c14e:	371c      	adds	r7, #28
 800c150:	46bd      	mov	sp, r7
 800c152:	bd90      	pop	{r4, r7, pc}

0800c154 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c154:	b580      	push	{r7, lr}
 800c156:	b08e      	sub	sp, #56	@ 0x38
 800c158:	af00      	add	r7, sp, #0
 800c15a:	60f8      	str	r0, [r7, #12]
 800c15c:	60b9      	str	r1, [r7, #8]
 800c15e:	607a      	str	r2, [r7, #4]
 800c160:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c162:	2300      	movs	r3, #0
 800c164:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800c16a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d10b      	bne.n	800c188 <xQueueGenericSend+0x34>
	__asm volatile
 800c170:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c174:	f383 8811 	msr	BASEPRI, r3
 800c178:	f3bf 8f6f 	isb	sy
 800c17c:	f3bf 8f4f 	dsb	sy
 800c180:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c182:	bf00      	nop
 800c184:	bf00      	nop
 800c186:	e7fd      	b.n	800c184 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c188:	68bb      	ldr	r3, [r7, #8]
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d103      	bne.n	800c196 <xQueueGenericSend+0x42>
 800c18e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c192:	2b00      	cmp	r3, #0
 800c194:	d101      	bne.n	800c19a <xQueueGenericSend+0x46>
 800c196:	2301      	movs	r3, #1
 800c198:	e000      	b.n	800c19c <xQueueGenericSend+0x48>
 800c19a:	2300      	movs	r3, #0
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d10b      	bne.n	800c1b8 <xQueueGenericSend+0x64>
	__asm volatile
 800c1a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1a4:	f383 8811 	msr	BASEPRI, r3
 800c1a8:	f3bf 8f6f 	isb	sy
 800c1ac:	f3bf 8f4f 	dsb	sy
 800c1b0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c1b2:	bf00      	nop
 800c1b4:	bf00      	nop
 800c1b6:	e7fd      	b.n	800c1b4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c1b8:	683b      	ldr	r3, [r7, #0]
 800c1ba:	2b02      	cmp	r3, #2
 800c1bc:	d103      	bne.n	800c1c6 <xQueueGenericSend+0x72>
 800c1be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c1c2:	2b01      	cmp	r3, #1
 800c1c4:	d101      	bne.n	800c1ca <xQueueGenericSend+0x76>
 800c1c6:	2301      	movs	r3, #1
 800c1c8:	e000      	b.n	800c1cc <xQueueGenericSend+0x78>
 800c1ca:	2300      	movs	r3, #0
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d10b      	bne.n	800c1e8 <xQueueGenericSend+0x94>
	__asm volatile
 800c1d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1d4:	f383 8811 	msr	BASEPRI, r3
 800c1d8:	f3bf 8f6f 	isb	sy
 800c1dc:	f3bf 8f4f 	dsb	sy
 800c1e0:	623b      	str	r3, [r7, #32]
}
 800c1e2:	bf00      	nop
 800c1e4:	bf00      	nop
 800c1e6:	e7fd      	b.n	800c1e4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c1e8:	f001 fc48 	bl	800da7c <xTaskGetSchedulerState>
 800c1ec:	4603      	mov	r3, r0
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d102      	bne.n	800c1f8 <xQueueGenericSend+0xa4>
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d101      	bne.n	800c1fc <xQueueGenericSend+0xa8>
 800c1f8:	2301      	movs	r3, #1
 800c1fa:	e000      	b.n	800c1fe <xQueueGenericSend+0xaa>
 800c1fc:	2300      	movs	r3, #0
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d10b      	bne.n	800c21a <xQueueGenericSend+0xc6>
	__asm volatile
 800c202:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c206:	f383 8811 	msr	BASEPRI, r3
 800c20a:	f3bf 8f6f 	isb	sy
 800c20e:	f3bf 8f4f 	dsb	sy
 800c212:	61fb      	str	r3, [r7, #28]
}
 800c214:	bf00      	nop
 800c216:	bf00      	nop
 800c218:	e7fd      	b.n	800c216 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c21a:	f002 fa9d 	bl	800e758 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c21e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c220:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c224:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c226:	429a      	cmp	r2, r3
 800c228:	d302      	bcc.n	800c230 <xQueueGenericSend+0xdc>
 800c22a:	683b      	ldr	r3, [r7, #0]
 800c22c:	2b02      	cmp	r3, #2
 800c22e:	d129      	bne.n	800c284 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c230:	683a      	ldr	r2, [r7, #0]
 800c232:	68b9      	ldr	r1, [r7, #8]
 800c234:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c236:	f000 fbb9 	bl	800c9ac <prvCopyDataToQueue>
 800c23a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c23c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c23e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c240:	2b00      	cmp	r3, #0
 800c242:	d010      	beq.n	800c266 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c244:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c246:	3324      	adds	r3, #36	@ 0x24
 800c248:	4618      	mov	r0, r3
 800c24a:	f001 fa41 	bl	800d6d0 <xTaskRemoveFromEventList>
 800c24e:	4603      	mov	r3, r0
 800c250:	2b00      	cmp	r3, #0
 800c252:	d013      	beq.n	800c27c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c254:	4b3f      	ldr	r3, [pc, #252]	@ (800c354 <xQueueGenericSend+0x200>)
 800c256:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c25a:	601a      	str	r2, [r3, #0]
 800c25c:	f3bf 8f4f 	dsb	sy
 800c260:	f3bf 8f6f 	isb	sy
 800c264:	e00a      	b.n	800c27c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c266:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d007      	beq.n	800c27c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c26c:	4b39      	ldr	r3, [pc, #228]	@ (800c354 <xQueueGenericSend+0x200>)
 800c26e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c272:	601a      	str	r2, [r3, #0]
 800c274:	f3bf 8f4f 	dsb	sy
 800c278:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c27c:	f002 fa9e 	bl	800e7bc <vPortExitCritical>
				return pdPASS;
 800c280:	2301      	movs	r3, #1
 800c282:	e063      	b.n	800c34c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	2b00      	cmp	r3, #0
 800c288:	d103      	bne.n	800c292 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c28a:	f002 fa97 	bl	800e7bc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c28e:	2300      	movs	r3, #0
 800c290:	e05c      	b.n	800c34c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c292:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c294:	2b00      	cmp	r3, #0
 800c296:	d106      	bne.n	800c2a6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c298:	f107 0314 	add.w	r3, r7, #20
 800c29c:	4618      	mov	r0, r3
 800c29e:	f001 fa7b 	bl	800d798 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c2a2:	2301      	movs	r3, #1
 800c2a4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c2a6:	f002 fa89 	bl	800e7bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c2aa:	f000 ffd1 	bl	800d250 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c2ae:	f002 fa53 	bl	800e758 <vPortEnterCritical>
 800c2b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2b4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c2b8:	b25b      	sxtb	r3, r3
 800c2ba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c2be:	d103      	bne.n	800c2c8 <xQueueGenericSend+0x174>
 800c2c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2c2:	2200      	movs	r2, #0
 800c2c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c2c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2ca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c2ce:	b25b      	sxtb	r3, r3
 800c2d0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c2d4:	d103      	bne.n	800c2de <xQueueGenericSend+0x18a>
 800c2d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2d8:	2200      	movs	r2, #0
 800c2da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c2de:	f002 fa6d 	bl	800e7bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c2e2:	1d3a      	adds	r2, r7, #4
 800c2e4:	f107 0314 	add.w	r3, r7, #20
 800c2e8:	4611      	mov	r1, r2
 800c2ea:	4618      	mov	r0, r3
 800c2ec:	f001 fa6a 	bl	800d7c4 <xTaskCheckForTimeOut>
 800c2f0:	4603      	mov	r3, r0
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d124      	bne.n	800c340 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c2f6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c2f8:	f000 fc50 	bl	800cb9c <prvIsQueueFull>
 800c2fc:	4603      	mov	r3, r0
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d018      	beq.n	800c334 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c304:	3310      	adds	r3, #16
 800c306:	687a      	ldr	r2, [r7, #4]
 800c308:	4611      	mov	r1, r2
 800c30a:	4618      	mov	r0, r3
 800c30c:	f001 f98e 	bl	800d62c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c310:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c312:	f000 fbdb 	bl	800cacc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c316:	f000 ffa9 	bl	800d26c <xTaskResumeAll>
 800c31a:	4603      	mov	r3, r0
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	f47f af7c 	bne.w	800c21a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800c322:	4b0c      	ldr	r3, [pc, #48]	@ (800c354 <xQueueGenericSend+0x200>)
 800c324:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c328:	601a      	str	r2, [r3, #0]
 800c32a:	f3bf 8f4f 	dsb	sy
 800c32e:	f3bf 8f6f 	isb	sy
 800c332:	e772      	b.n	800c21a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c334:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c336:	f000 fbc9 	bl	800cacc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c33a:	f000 ff97 	bl	800d26c <xTaskResumeAll>
 800c33e:	e76c      	b.n	800c21a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c340:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c342:	f000 fbc3 	bl	800cacc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c346:	f000 ff91 	bl	800d26c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c34a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c34c:	4618      	mov	r0, r3
 800c34e:	3738      	adds	r7, #56	@ 0x38
 800c350:	46bd      	mov	sp, r7
 800c352:	bd80      	pop	{r7, pc}
 800c354:	e000ed04 	.word	0xe000ed04

0800c358 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c358:	b580      	push	{r7, lr}
 800c35a:	b090      	sub	sp, #64	@ 0x40
 800c35c:	af00      	add	r7, sp, #0
 800c35e:	60f8      	str	r0, [r7, #12]
 800c360:	60b9      	str	r1, [r7, #8]
 800c362:	607a      	str	r2, [r7, #4]
 800c364:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800c36a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d10b      	bne.n	800c388 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800c370:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c374:	f383 8811 	msr	BASEPRI, r3
 800c378:	f3bf 8f6f 	isb	sy
 800c37c:	f3bf 8f4f 	dsb	sy
 800c380:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c382:	bf00      	nop
 800c384:	bf00      	nop
 800c386:	e7fd      	b.n	800c384 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c388:	68bb      	ldr	r3, [r7, #8]
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d103      	bne.n	800c396 <xQueueGenericSendFromISR+0x3e>
 800c38e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c392:	2b00      	cmp	r3, #0
 800c394:	d101      	bne.n	800c39a <xQueueGenericSendFromISR+0x42>
 800c396:	2301      	movs	r3, #1
 800c398:	e000      	b.n	800c39c <xQueueGenericSendFromISR+0x44>
 800c39a:	2300      	movs	r3, #0
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d10b      	bne.n	800c3b8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800c3a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3a4:	f383 8811 	msr	BASEPRI, r3
 800c3a8:	f3bf 8f6f 	isb	sy
 800c3ac:	f3bf 8f4f 	dsb	sy
 800c3b0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c3b2:	bf00      	nop
 800c3b4:	bf00      	nop
 800c3b6:	e7fd      	b.n	800c3b4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c3b8:	683b      	ldr	r3, [r7, #0]
 800c3ba:	2b02      	cmp	r3, #2
 800c3bc:	d103      	bne.n	800c3c6 <xQueueGenericSendFromISR+0x6e>
 800c3be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c3c2:	2b01      	cmp	r3, #1
 800c3c4:	d101      	bne.n	800c3ca <xQueueGenericSendFromISR+0x72>
 800c3c6:	2301      	movs	r3, #1
 800c3c8:	e000      	b.n	800c3cc <xQueueGenericSendFromISR+0x74>
 800c3ca:	2300      	movs	r3, #0
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d10b      	bne.n	800c3e8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800c3d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3d4:	f383 8811 	msr	BASEPRI, r3
 800c3d8:	f3bf 8f6f 	isb	sy
 800c3dc:	f3bf 8f4f 	dsb	sy
 800c3e0:	623b      	str	r3, [r7, #32]
}
 800c3e2:	bf00      	nop
 800c3e4:	bf00      	nop
 800c3e6:	e7fd      	b.n	800c3e4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c3e8:	f002 fa96 	bl	800e918 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c3ec:	f3ef 8211 	mrs	r2, BASEPRI
 800c3f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3f4:	f383 8811 	msr	BASEPRI, r3
 800c3f8:	f3bf 8f6f 	isb	sy
 800c3fc:	f3bf 8f4f 	dsb	sy
 800c400:	61fa      	str	r2, [r7, #28]
 800c402:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c404:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c406:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c408:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c40a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c40c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c40e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c410:	429a      	cmp	r2, r3
 800c412:	d302      	bcc.n	800c41a <xQueueGenericSendFromISR+0xc2>
 800c414:	683b      	ldr	r3, [r7, #0]
 800c416:	2b02      	cmp	r3, #2
 800c418:	d12f      	bne.n	800c47a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c41a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c41c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c420:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c424:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c426:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c428:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c42a:	683a      	ldr	r2, [r7, #0]
 800c42c:	68b9      	ldr	r1, [r7, #8]
 800c42e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c430:	f000 fabc 	bl	800c9ac <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c434:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800c438:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c43c:	d112      	bne.n	800c464 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c43e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c442:	2b00      	cmp	r3, #0
 800c444:	d016      	beq.n	800c474 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c446:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c448:	3324      	adds	r3, #36	@ 0x24
 800c44a:	4618      	mov	r0, r3
 800c44c:	f001 f940 	bl	800d6d0 <xTaskRemoveFromEventList>
 800c450:	4603      	mov	r3, r0
 800c452:	2b00      	cmp	r3, #0
 800c454:	d00e      	beq.n	800c474 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d00b      	beq.n	800c474 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	2201      	movs	r2, #1
 800c460:	601a      	str	r2, [r3, #0]
 800c462:	e007      	b.n	800c474 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c464:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800c468:	3301      	adds	r3, #1
 800c46a:	b2db      	uxtb	r3, r3
 800c46c:	b25a      	sxtb	r2, r3
 800c46e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c470:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800c474:	2301      	movs	r3, #1
 800c476:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800c478:	e001      	b.n	800c47e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c47a:	2300      	movs	r3, #0
 800c47c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c47e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c480:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c482:	697b      	ldr	r3, [r7, #20]
 800c484:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c488:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c48a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800c48c:	4618      	mov	r0, r3
 800c48e:	3740      	adds	r7, #64	@ 0x40
 800c490:	46bd      	mov	sp, r7
 800c492:	bd80      	pop	{r7, pc}

0800c494 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c494:	b580      	push	{r7, lr}
 800c496:	b08c      	sub	sp, #48	@ 0x30
 800c498:	af00      	add	r7, sp, #0
 800c49a:	60f8      	str	r0, [r7, #12]
 800c49c:	60b9      	str	r1, [r7, #8]
 800c49e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c4a0:	2300      	movs	r3, #0
 800c4a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c4a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d10b      	bne.n	800c4c6 <xQueueReceive+0x32>
	__asm volatile
 800c4ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4b2:	f383 8811 	msr	BASEPRI, r3
 800c4b6:	f3bf 8f6f 	isb	sy
 800c4ba:	f3bf 8f4f 	dsb	sy
 800c4be:	623b      	str	r3, [r7, #32]
}
 800c4c0:	bf00      	nop
 800c4c2:	bf00      	nop
 800c4c4:	e7fd      	b.n	800c4c2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c4c6:	68bb      	ldr	r3, [r7, #8]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d103      	bne.n	800c4d4 <xQueueReceive+0x40>
 800c4cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d101      	bne.n	800c4d8 <xQueueReceive+0x44>
 800c4d4:	2301      	movs	r3, #1
 800c4d6:	e000      	b.n	800c4da <xQueueReceive+0x46>
 800c4d8:	2300      	movs	r3, #0
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d10b      	bne.n	800c4f6 <xQueueReceive+0x62>
	__asm volatile
 800c4de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4e2:	f383 8811 	msr	BASEPRI, r3
 800c4e6:	f3bf 8f6f 	isb	sy
 800c4ea:	f3bf 8f4f 	dsb	sy
 800c4ee:	61fb      	str	r3, [r7, #28]
}
 800c4f0:	bf00      	nop
 800c4f2:	bf00      	nop
 800c4f4:	e7fd      	b.n	800c4f2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c4f6:	f001 fac1 	bl	800da7c <xTaskGetSchedulerState>
 800c4fa:	4603      	mov	r3, r0
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d102      	bne.n	800c506 <xQueueReceive+0x72>
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	2b00      	cmp	r3, #0
 800c504:	d101      	bne.n	800c50a <xQueueReceive+0x76>
 800c506:	2301      	movs	r3, #1
 800c508:	e000      	b.n	800c50c <xQueueReceive+0x78>
 800c50a:	2300      	movs	r3, #0
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d10b      	bne.n	800c528 <xQueueReceive+0x94>
	__asm volatile
 800c510:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c514:	f383 8811 	msr	BASEPRI, r3
 800c518:	f3bf 8f6f 	isb	sy
 800c51c:	f3bf 8f4f 	dsb	sy
 800c520:	61bb      	str	r3, [r7, #24]
}
 800c522:	bf00      	nop
 800c524:	bf00      	nop
 800c526:	e7fd      	b.n	800c524 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c528:	f002 f916 	bl	800e758 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c52c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c52e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c530:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c534:	2b00      	cmp	r3, #0
 800c536:	d01f      	beq.n	800c578 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c538:	68b9      	ldr	r1, [r7, #8]
 800c53a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c53c:	f000 faa0 	bl	800ca80 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c542:	1e5a      	subs	r2, r3, #1
 800c544:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c546:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c548:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c54a:	691b      	ldr	r3, [r3, #16]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d00f      	beq.n	800c570 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c550:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c552:	3310      	adds	r3, #16
 800c554:	4618      	mov	r0, r3
 800c556:	f001 f8bb 	bl	800d6d0 <xTaskRemoveFromEventList>
 800c55a:	4603      	mov	r3, r0
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d007      	beq.n	800c570 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c560:	4b3c      	ldr	r3, [pc, #240]	@ (800c654 <xQueueReceive+0x1c0>)
 800c562:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c566:	601a      	str	r2, [r3, #0]
 800c568:	f3bf 8f4f 	dsb	sy
 800c56c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c570:	f002 f924 	bl	800e7bc <vPortExitCritical>
				return pdPASS;
 800c574:	2301      	movs	r3, #1
 800c576:	e069      	b.n	800c64c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d103      	bne.n	800c586 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c57e:	f002 f91d 	bl	800e7bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c582:	2300      	movs	r3, #0
 800c584:	e062      	b.n	800c64c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c586:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d106      	bne.n	800c59a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c58c:	f107 0310 	add.w	r3, r7, #16
 800c590:	4618      	mov	r0, r3
 800c592:	f001 f901 	bl	800d798 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c596:	2301      	movs	r3, #1
 800c598:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c59a:	f002 f90f 	bl	800e7bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c59e:	f000 fe57 	bl	800d250 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c5a2:	f002 f8d9 	bl	800e758 <vPortEnterCritical>
 800c5a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5a8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c5ac:	b25b      	sxtb	r3, r3
 800c5ae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c5b2:	d103      	bne.n	800c5bc <xQueueReceive+0x128>
 800c5b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5b6:	2200      	movs	r2, #0
 800c5b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c5bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5be:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c5c2:	b25b      	sxtb	r3, r3
 800c5c4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c5c8:	d103      	bne.n	800c5d2 <xQueueReceive+0x13e>
 800c5ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5cc:	2200      	movs	r2, #0
 800c5ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c5d2:	f002 f8f3 	bl	800e7bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c5d6:	1d3a      	adds	r2, r7, #4
 800c5d8:	f107 0310 	add.w	r3, r7, #16
 800c5dc:	4611      	mov	r1, r2
 800c5de:	4618      	mov	r0, r3
 800c5e0:	f001 f8f0 	bl	800d7c4 <xTaskCheckForTimeOut>
 800c5e4:	4603      	mov	r3, r0
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d123      	bne.n	800c632 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c5ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c5ec:	f000 fac0 	bl	800cb70 <prvIsQueueEmpty>
 800c5f0:	4603      	mov	r3, r0
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d017      	beq.n	800c626 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c5f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5f8:	3324      	adds	r3, #36	@ 0x24
 800c5fa:	687a      	ldr	r2, [r7, #4]
 800c5fc:	4611      	mov	r1, r2
 800c5fe:	4618      	mov	r0, r3
 800c600:	f001 f814 	bl	800d62c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c604:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c606:	f000 fa61 	bl	800cacc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c60a:	f000 fe2f 	bl	800d26c <xTaskResumeAll>
 800c60e:	4603      	mov	r3, r0
 800c610:	2b00      	cmp	r3, #0
 800c612:	d189      	bne.n	800c528 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800c614:	4b0f      	ldr	r3, [pc, #60]	@ (800c654 <xQueueReceive+0x1c0>)
 800c616:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c61a:	601a      	str	r2, [r3, #0]
 800c61c:	f3bf 8f4f 	dsb	sy
 800c620:	f3bf 8f6f 	isb	sy
 800c624:	e780      	b.n	800c528 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c626:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c628:	f000 fa50 	bl	800cacc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c62c:	f000 fe1e 	bl	800d26c <xTaskResumeAll>
 800c630:	e77a      	b.n	800c528 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c632:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c634:	f000 fa4a 	bl	800cacc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c638:	f000 fe18 	bl	800d26c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c63c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c63e:	f000 fa97 	bl	800cb70 <prvIsQueueEmpty>
 800c642:	4603      	mov	r3, r0
 800c644:	2b00      	cmp	r3, #0
 800c646:	f43f af6f 	beq.w	800c528 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c64a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c64c:	4618      	mov	r0, r3
 800c64e:	3730      	adds	r7, #48	@ 0x30
 800c650:	46bd      	mov	sp, r7
 800c652:	bd80      	pop	{r7, pc}
 800c654:	e000ed04 	.word	0xe000ed04

0800c658 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800c658:	b580      	push	{r7, lr}
 800c65a:	b08e      	sub	sp, #56	@ 0x38
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	6078      	str	r0, [r7, #4]
 800c660:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800c662:	2300      	movs	r3, #0
 800c664:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800c66a:	2300      	movs	r3, #0
 800c66c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c66e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c670:	2b00      	cmp	r3, #0
 800c672:	d10b      	bne.n	800c68c <xQueueSemaphoreTake+0x34>
	__asm volatile
 800c674:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c678:	f383 8811 	msr	BASEPRI, r3
 800c67c:	f3bf 8f6f 	isb	sy
 800c680:	f3bf 8f4f 	dsb	sy
 800c684:	623b      	str	r3, [r7, #32]
}
 800c686:	bf00      	nop
 800c688:	bf00      	nop
 800c68a:	e7fd      	b.n	800c688 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c68c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c68e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c690:	2b00      	cmp	r3, #0
 800c692:	d00b      	beq.n	800c6ac <xQueueSemaphoreTake+0x54>
	__asm volatile
 800c694:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c698:	f383 8811 	msr	BASEPRI, r3
 800c69c:	f3bf 8f6f 	isb	sy
 800c6a0:	f3bf 8f4f 	dsb	sy
 800c6a4:	61fb      	str	r3, [r7, #28]
}
 800c6a6:	bf00      	nop
 800c6a8:	bf00      	nop
 800c6aa:	e7fd      	b.n	800c6a8 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c6ac:	f001 f9e6 	bl	800da7c <xTaskGetSchedulerState>
 800c6b0:	4603      	mov	r3, r0
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d102      	bne.n	800c6bc <xQueueSemaphoreTake+0x64>
 800c6b6:	683b      	ldr	r3, [r7, #0]
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d101      	bne.n	800c6c0 <xQueueSemaphoreTake+0x68>
 800c6bc:	2301      	movs	r3, #1
 800c6be:	e000      	b.n	800c6c2 <xQueueSemaphoreTake+0x6a>
 800c6c0:	2300      	movs	r3, #0
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d10b      	bne.n	800c6de <xQueueSemaphoreTake+0x86>
	__asm volatile
 800c6c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6ca:	f383 8811 	msr	BASEPRI, r3
 800c6ce:	f3bf 8f6f 	isb	sy
 800c6d2:	f3bf 8f4f 	dsb	sy
 800c6d6:	61bb      	str	r3, [r7, #24]
}
 800c6d8:	bf00      	nop
 800c6da:	bf00      	nop
 800c6dc:	e7fd      	b.n	800c6da <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c6de:	f002 f83b 	bl	800e758 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c6e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c6e6:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c6e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d024      	beq.n	800c738 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c6ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6f0:	1e5a      	subs	r2, r3, #1
 800c6f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6f4:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c6f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d104      	bne.n	800c708 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800c6fe:	f001 fb37 	bl	800dd70 <pvTaskIncrementMutexHeldCount>
 800c702:	4602      	mov	r2, r0
 800c704:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c706:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c708:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c70a:	691b      	ldr	r3, [r3, #16]
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d00f      	beq.n	800c730 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c710:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c712:	3310      	adds	r3, #16
 800c714:	4618      	mov	r0, r3
 800c716:	f000 ffdb 	bl	800d6d0 <xTaskRemoveFromEventList>
 800c71a:	4603      	mov	r3, r0
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d007      	beq.n	800c730 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c720:	4b54      	ldr	r3, [pc, #336]	@ (800c874 <xQueueSemaphoreTake+0x21c>)
 800c722:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c726:	601a      	str	r2, [r3, #0]
 800c728:	f3bf 8f4f 	dsb	sy
 800c72c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c730:	f002 f844 	bl	800e7bc <vPortExitCritical>
				return pdPASS;
 800c734:	2301      	movs	r3, #1
 800c736:	e098      	b.n	800c86a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c738:	683b      	ldr	r3, [r7, #0]
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d112      	bne.n	800c764 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c73e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c740:	2b00      	cmp	r3, #0
 800c742:	d00b      	beq.n	800c75c <xQueueSemaphoreTake+0x104>
	__asm volatile
 800c744:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c748:	f383 8811 	msr	BASEPRI, r3
 800c74c:	f3bf 8f6f 	isb	sy
 800c750:	f3bf 8f4f 	dsb	sy
 800c754:	617b      	str	r3, [r7, #20]
}
 800c756:	bf00      	nop
 800c758:	bf00      	nop
 800c75a:	e7fd      	b.n	800c758 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800c75c:	f002 f82e 	bl	800e7bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c760:	2300      	movs	r3, #0
 800c762:	e082      	b.n	800c86a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c764:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c766:	2b00      	cmp	r3, #0
 800c768:	d106      	bne.n	800c778 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c76a:	f107 030c 	add.w	r3, r7, #12
 800c76e:	4618      	mov	r0, r3
 800c770:	f001 f812 	bl	800d798 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c774:	2301      	movs	r3, #1
 800c776:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c778:	f002 f820 	bl	800e7bc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c77c:	f000 fd68 	bl	800d250 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c780:	f001 ffea 	bl	800e758 <vPortEnterCritical>
 800c784:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c786:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c78a:	b25b      	sxtb	r3, r3
 800c78c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c790:	d103      	bne.n	800c79a <xQueueSemaphoreTake+0x142>
 800c792:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c794:	2200      	movs	r2, #0
 800c796:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c79a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c79c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c7a0:	b25b      	sxtb	r3, r3
 800c7a2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c7a6:	d103      	bne.n	800c7b0 <xQueueSemaphoreTake+0x158>
 800c7a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7aa:	2200      	movs	r2, #0
 800c7ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c7b0:	f002 f804 	bl	800e7bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c7b4:	463a      	mov	r2, r7
 800c7b6:	f107 030c 	add.w	r3, r7, #12
 800c7ba:	4611      	mov	r1, r2
 800c7bc:	4618      	mov	r0, r3
 800c7be:	f001 f801 	bl	800d7c4 <xTaskCheckForTimeOut>
 800c7c2:	4603      	mov	r3, r0
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d132      	bne.n	800c82e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c7c8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c7ca:	f000 f9d1 	bl	800cb70 <prvIsQueueEmpty>
 800c7ce:	4603      	mov	r3, r0
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d026      	beq.n	800c822 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c7d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d109      	bne.n	800c7f0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800c7dc:	f001 ffbc 	bl	800e758 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c7e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7e2:	689b      	ldr	r3, [r3, #8]
 800c7e4:	4618      	mov	r0, r3
 800c7e6:	f001 f967 	bl	800dab8 <xTaskPriorityInherit>
 800c7ea:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800c7ec:	f001 ffe6 	bl	800e7bc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c7f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7f2:	3324      	adds	r3, #36	@ 0x24
 800c7f4:	683a      	ldr	r2, [r7, #0]
 800c7f6:	4611      	mov	r1, r2
 800c7f8:	4618      	mov	r0, r3
 800c7fa:	f000 ff17 	bl	800d62c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c7fe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c800:	f000 f964 	bl	800cacc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c804:	f000 fd32 	bl	800d26c <xTaskResumeAll>
 800c808:	4603      	mov	r3, r0
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	f47f af67 	bne.w	800c6de <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800c810:	4b18      	ldr	r3, [pc, #96]	@ (800c874 <xQueueSemaphoreTake+0x21c>)
 800c812:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c816:	601a      	str	r2, [r3, #0]
 800c818:	f3bf 8f4f 	dsb	sy
 800c81c:	f3bf 8f6f 	isb	sy
 800c820:	e75d      	b.n	800c6de <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c822:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c824:	f000 f952 	bl	800cacc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c828:	f000 fd20 	bl	800d26c <xTaskResumeAll>
 800c82c:	e757      	b.n	800c6de <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c82e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c830:	f000 f94c 	bl	800cacc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c834:	f000 fd1a 	bl	800d26c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c838:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c83a:	f000 f999 	bl	800cb70 <prvIsQueueEmpty>
 800c83e:	4603      	mov	r3, r0
 800c840:	2b00      	cmp	r3, #0
 800c842:	f43f af4c 	beq.w	800c6de <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c846:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d00d      	beq.n	800c868 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800c84c:	f001 ff84 	bl	800e758 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c850:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c852:	f000 f893 	bl	800c97c <prvGetDisinheritPriorityAfterTimeout>
 800c856:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c858:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c85a:	689b      	ldr	r3, [r3, #8]
 800c85c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c85e:	4618      	mov	r0, r3
 800c860:	f001 fa02 	bl	800dc68 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c864:	f001 ffaa 	bl	800e7bc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c868:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c86a:	4618      	mov	r0, r3
 800c86c:	3738      	adds	r7, #56	@ 0x38
 800c86e:	46bd      	mov	sp, r7
 800c870:	bd80      	pop	{r7, pc}
 800c872:	bf00      	nop
 800c874:	e000ed04 	.word	0xe000ed04

0800c878 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c878:	b580      	push	{r7, lr}
 800c87a:	b08e      	sub	sp, #56	@ 0x38
 800c87c:	af00      	add	r7, sp, #0
 800c87e:	60f8      	str	r0, [r7, #12]
 800c880:	60b9      	str	r1, [r7, #8]
 800c882:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800c888:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d10b      	bne.n	800c8a6 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800c88e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c892:	f383 8811 	msr	BASEPRI, r3
 800c896:	f3bf 8f6f 	isb	sy
 800c89a:	f3bf 8f4f 	dsb	sy
 800c89e:	623b      	str	r3, [r7, #32]
}
 800c8a0:	bf00      	nop
 800c8a2:	bf00      	nop
 800c8a4:	e7fd      	b.n	800c8a2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c8a6:	68bb      	ldr	r3, [r7, #8]
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d103      	bne.n	800c8b4 <xQueueReceiveFromISR+0x3c>
 800c8ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d101      	bne.n	800c8b8 <xQueueReceiveFromISR+0x40>
 800c8b4:	2301      	movs	r3, #1
 800c8b6:	e000      	b.n	800c8ba <xQueueReceiveFromISR+0x42>
 800c8b8:	2300      	movs	r3, #0
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d10b      	bne.n	800c8d6 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800c8be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8c2:	f383 8811 	msr	BASEPRI, r3
 800c8c6:	f3bf 8f6f 	isb	sy
 800c8ca:	f3bf 8f4f 	dsb	sy
 800c8ce:	61fb      	str	r3, [r7, #28]
}
 800c8d0:	bf00      	nop
 800c8d2:	bf00      	nop
 800c8d4:	e7fd      	b.n	800c8d2 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c8d6:	f002 f81f 	bl	800e918 <vPortValidateInterruptPriority>
	__asm volatile
 800c8da:	f3ef 8211 	mrs	r2, BASEPRI
 800c8de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8e2:	f383 8811 	msr	BASEPRI, r3
 800c8e6:	f3bf 8f6f 	isb	sy
 800c8ea:	f3bf 8f4f 	dsb	sy
 800c8ee:	61ba      	str	r2, [r7, #24]
 800c8f0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800c8f2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c8f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c8f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c8fa:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c8fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d02f      	beq.n	800c962 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800c902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c904:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c908:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c90c:	68b9      	ldr	r1, [r7, #8]
 800c90e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c910:	f000 f8b6 	bl	800ca80 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c914:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c916:	1e5a      	subs	r2, r3, #1
 800c918:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c91a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800c91c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800c920:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c924:	d112      	bne.n	800c94c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c926:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c928:	691b      	ldr	r3, [r3, #16]
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d016      	beq.n	800c95c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c92e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c930:	3310      	adds	r3, #16
 800c932:	4618      	mov	r0, r3
 800c934:	f000 fecc 	bl	800d6d0 <xTaskRemoveFromEventList>
 800c938:	4603      	mov	r3, r0
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d00e      	beq.n	800c95c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	2b00      	cmp	r3, #0
 800c942:	d00b      	beq.n	800c95c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	2201      	movs	r2, #1
 800c948:	601a      	str	r2, [r3, #0]
 800c94a:	e007      	b.n	800c95c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c94c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c950:	3301      	adds	r3, #1
 800c952:	b2db      	uxtb	r3, r3
 800c954:	b25a      	sxtb	r2, r3
 800c956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c958:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800c95c:	2301      	movs	r3, #1
 800c95e:	637b      	str	r3, [r7, #52]	@ 0x34
 800c960:	e001      	b.n	800c966 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800c962:	2300      	movs	r3, #0
 800c964:	637b      	str	r3, [r7, #52]	@ 0x34
 800c966:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c968:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c96a:	693b      	ldr	r3, [r7, #16]
 800c96c:	f383 8811 	msr	BASEPRI, r3
}
 800c970:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c972:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800c974:	4618      	mov	r0, r3
 800c976:	3738      	adds	r7, #56	@ 0x38
 800c978:	46bd      	mov	sp, r7
 800c97a:	bd80      	pop	{r7, pc}

0800c97c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c97c:	b480      	push	{r7}
 800c97e:	b085      	sub	sp, #20
 800c980:	af00      	add	r7, sp, #0
 800c982:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d006      	beq.n	800c99a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800c996:	60fb      	str	r3, [r7, #12]
 800c998:	e001      	b.n	800c99e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c99a:	2300      	movs	r3, #0
 800c99c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c99e:	68fb      	ldr	r3, [r7, #12]
	}
 800c9a0:	4618      	mov	r0, r3
 800c9a2:	3714      	adds	r7, #20
 800c9a4:	46bd      	mov	sp, r7
 800c9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9aa:	4770      	bx	lr

0800c9ac <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c9ac:	b580      	push	{r7, lr}
 800c9ae:	b086      	sub	sp, #24
 800c9b0:	af00      	add	r7, sp, #0
 800c9b2:	60f8      	str	r0, [r7, #12]
 800c9b4:	60b9      	str	r1, [r7, #8]
 800c9b6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c9b8:	2300      	movs	r3, #0
 800c9ba:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c9c0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d10d      	bne.n	800c9e6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d14d      	bne.n	800ca6e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	689b      	ldr	r3, [r3, #8]
 800c9d6:	4618      	mov	r0, r3
 800c9d8:	f001 f8d6 	bl	800db88 <xTaskPriorityDisinherit>
 800c9dc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	2200      	movs	r2, #0
 800c9e2:	609a      	str	r2, [r3, #8]
 800c9e4:	e043      	b.n	800ca6e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d119      	bne.n	800ca20 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	6858      	ldr	r0, [r3, #4]
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c9f4:	461a      	mov	r2, r3
 800c9f6:	68b9      	ldr	r1, [r7, #8]
 800c9f8:	f003 fcab 	bl	8010352 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	685a      	ldr	r2, [r3, #4]
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca04:	441a      	add	r2, r3
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	685a      	ldr	r2, [r3, #4]
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	689b      	ldr	r3, [r3, #8]
 800ca12:	429a      	cmp	r2, r3
 800ca14:	d32b      	bcc.n	800ca6e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	681a      	ldr	r2, [r3, #0]
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	605a      	str	r2, [r3, #4]
 800ca1e:	e026      	b.n	800ca6e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	68d8      	ldr	r0, [r3, #12]
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca28:	461a      	mov	r2, r3
 800ca2a:	68b9      	ldr	r1, [r7, #8]
 800ca2c:	f003 fc91 	bl	8010352 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	68da      	ldr	r2, [r3, #12]
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca38:	425b      	negs	r3, r3
 800ca3a:	441a      	add	r2, r3
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	68da      	ldr	r2, [r3, #12]
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	429a      	cmp	r2, r3
 800ca4a:	d207      	bcs.n	800ca5c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	689a      	ldr	r2, [r3, #8]
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca54:	425b      	negs	r3, r3
 800ca56:	441a      	add	r2, r3
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	2b02      	cmp	r3, #2
 800ca60:	d105      	bne.n	800ca6e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ca62:	693b      	ldr	r3, [r7, #16]
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d002      	beq.n	800ca6e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ca68:	693b      	ldr	r3, [r7, #16]
 800ca6a:	3b01      	subs	r3, #1
 800ca6c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ca6e:	693b      	ldr	r3, [r7, #16]
 800ca70:	1c5a      	adds	r2, r3, #1
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800ca76:	697b      	ldr	r3, [r7, #20]
}
 800ca78:	4618      	mov	r0, r3
 800ca7a:	3718      	adds	r7, #24
 800ca7c:	46bd      	mov	sp, r7
 800ca7e:	bd80      	pop	{r7, pc}

0800ca80 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ca80:	b580      	push	{r7, lr}
 800ca82:	b082      	sub	sp, #8
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	6078      	str	r0, [r7, #4]
 800ca88:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d018      	beq.n	800cac4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	68da      	ldr	r2, [r3, #12]
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca9a:	441a      	add	r2, r3
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	68da      	ldr	r2, [r3, #12]
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	689b      	ldr	r3, [r3, #8]
 800caa8:	429a      	cmp	r2, r3
 800caaa:	d303      	bcc.n	800cab4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	681a      	ldr	r2, [r3, #0]
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	68d9      	ldr	r1, [r3, #12]
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cabc:	461a      	mov	r2, r3
 800cabe:	6838      	ldr	r0, [r7, #0]
 800cac0:	f003 fc47 	bl	8010352 <memcpy>
	}
}
 800cac4:	bf00      	nop
 800cac6:	3708      	adds	r7, #8
 800cac8:	46bd      	mov	sp, r7
 800caca:	bd80      	pop	{r7, pc}

0800cacc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800cacc:	b580      	push	{r7, lr}
 800cace:	b084      	sub	sp, #16
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800cad4:	f001 fe40 	bl	800e758 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cade:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cae0:	e011      	b.n	800cb06 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d012      	beq.n	800cb10 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	3324      	adds	r3, #36	@ 0x24
 800caee:	4618      	mov	r0, r3
 800caf0:	f000 fdee 	bl	800d6d0 <xTaskRemoveFromEventList>
 800caf4:	4603      	mov	r3, r0
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d001      	beq.n	800cafe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800cafa:	f000 fec7 	bl	800d88c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800cafe:	7bfb      	ldrb	r3, [r7, #15]
 800cb00:	3b01      	subs	r3, #1
 800cb02:	b2db      	uxtb	r3, r3
 800cb04:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cb06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	dce9      	bgt.n	800cae2 <prvUnlockQueue+0x16>
 800cb0e:	e000      	b.n	800cb12 <prvUnlockQueue+0x46>
					break;
 800cb10:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	22ff      	movs	r2, #255	@ 0xff
 800cb16:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800cb1a:	f001 fe4f 	bl	800e7bc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800cb1e:	f001 fe1b 	bl	800e758 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cb28:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cb2a:	e011      	b.n	800cb50 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	691b      	ldr	r3, [r3, #16]
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d012      	beq.n	800cb5a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	3310      	adds	r3, #16
 800cb38:	4618      	mov	r0, r3
 800cb3a:	f000 fdc9 	bl	800d6d0 <xTaskRemoveFromEventList>
 800cb3e:	4603      	mov	r3, r0
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d001      	beq.n	800cb48 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800cb44:	f000 fea2 	bl	800d88c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800cb48:	7bbb      	ldrb	r3, [r7, #14]
 800cb4a:	3b01      	subs	r3, #1
 800cb4c:	b2db      	uxtb	r3, r3
 800cb4e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cb50:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	dce9      	bgt.n	800cb2c <prvUnlockQueue+0x60>
 800cb58:	e000      	b.n	800cb5c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800cb5a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	22ff      	movs	r2, #255	@ 0xff
 800cb60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800cb64:	f001 fe2a 	bl	800e7bc <vPortExitCritical>
}
 800cb68:	bf00      	nop
 800cb6a:	3710      	adds	r7, #16
 800cb6c:	46bd      	mov	sp, r7
 800cb6e:	bd80      	pop	{r7, pc}

0800cb70 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800cb70:	b580      	push	{r7, lr}
 800cb72:	b084      	sub	sp, #16
 800cb74:	af00      	add	r7, sp, #0
 800cb76:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cb78:	f001 fdee 	bl	800e758 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d102      	bne.n	800cb8a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800cb84:	2301      	movs	r3, #1
 800cb86:	60fb      	str	r3, [r7, #12]
 800cb88:	e001      	b.n	800cb8e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800cb8a:	2300      	movs	r3, #0
 800cb8c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cb8e:	f001 fe15 	bl	800e7bc <vPortExitCritical>

	return xReturn;
 800cb92:	68fb      	ldr	r3, [r7, #12]
}
 800cb94:	4618      	mov	r0, r3
 800cb96:	3710      	adds	r7, #16
 800cb98:	46bd      	mov	sp, r7
 800cb9a:	bd80      	pop	{r7, pc}

0800cb9c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800cb9c:	b580      	push	{r7, lr}
 800cb9e:	b084      	sub	sp, #16
 800cba0:	af00      	add	r7, sp, #0
 800cba2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cba4:	f001 fdd8 	bl	800e758 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cbb0:	429a      	cmp	r2, r3
 800cbb2:	d102      	bne.n	800cbba <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800cbb4:	2301      	movs	r3, #1
 800cbb6:	60fb      	str	r3, [r7, #12]
 800cbb8:	e001      	b.n	800cbbe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800cbba:	2300      	movs	r3, #0
 800cbbc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cbbe:	f001 fdfd 	bl	800e7bc <vPortExitCritical>

	return xReturn;
 800cbc2:	68fb      	ldr	r3, [r7, #12]
}
 800cbc4:	4618      	mov	r0, r3
 800cbc6:	3710      	adds	r7, #16
 800cbc8:	46bd      	mov	sp, r7
 800cbca:	bd80      	pop	{r7, pc}

0800cbcc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800cbcc:	b480      	push	{r7}
 800cbce:	b085      	sub	sp, #20
 800cbd0:	af00      	add	r7, sp, #0
 800cbd2:	6078      	str	r0, [r7, #4]
 800cbd4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cbd6:	2300      	movs	r3, #0
 800cbd8:	60fb      	str	r3, [r7, #12]
 800cbda:	e014      	b.n	800cc06 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800cbdc:	4a0f      	ldr	r2, [pc, #60]	@ (800cc1c <vQueueAddToRegistry+0x50>)
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d10b      	bne.n	800cc00 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800cbe8:	490c      	ldr	r1, [pc, #48]	@ (800cc1c <vQueueAddToRegistry+0x50>)
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	683a      	ldr	r2, [r7, #0]
 800cbee:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800cbf2:	4a0a      	ldr	r2, [pc, #40]	@ (800cc1c <vQueueAddToRegistry+0x50>)
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	00db      	lsls	r3, r3, #3
 800cbf8:	4413      	add	r3, r2
 800cbfa:	687a      	ldr	r2, [r7, #4]
 800cbfc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800cbfe:	e006      	b.n	800cc0e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	3301      	adds	r3, #1
 800cc04:	60fb      	str	r3, [r7, #12]
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	2b07      	cmp	r3, #7
 800cc0a:	d9e7      	bls.n	800cbdc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800cc0c:	bf00      	nop
 800cc0e:	bf00      	nop
 800cc10:	3714      	adds	r7, #20
 800cc12:	46bd      	mov	sp, r7
 800cc14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc18:	4770      	bx	lr
 800cc1a:	bf00      	nop
 800cc1c:	20000d98 	.word	0x20000d98

0800cc20 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800cc20:	b580      	push	{r7, lr}
 800cc22:	b086      	sub	sp, #24
 800cc24:	af00      	add	r7, sp, #0
 800cc26:	60f8      	str	r0, [r7, #12]
 800cc28:	60b9      	str	r1, [r7, #8]
 800cc2a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800cc30:	f001 fd92 	bl	800e758 <vPortEnterCritical>
 800cc34:	697b      	ldr	r3, [r7, #20]
 800cc36:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cc3a:	b25b      	sxtb	r3, r3
 800cc3c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cc40:	d103      	bne.n	800cc4a <vQueueWaitForMessageRestricted+0x2a>
 800cc42:	697b      	ldr	r3, [r7, #20]
 800cc44:	2200      	movs	r2, #0
 800cc46:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cc4a:	697b      	ldr	r3, [r7, #20]
 800cc4c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cc50:	b25b      	sxtb	r3, r3
 800cc52:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cc56:	d103      	bne.n	800cc60 <vQueueWaitForMessageRestricted+0x40>
 800cc58:	697b      	ldr	r3, [r7, #20]
 800cc5a:	2200      	movs	r2, #0
 800cc5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800cc60:	f001 fdac 	bl	800e7bc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800cc64:	697b      	ldr	r3, [r7, #20]
 800cc66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d106      	bne.n	800cc7a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800cc6c:	697b      	ldr	r3, [r7, #20]
 800cc6e:	3324      	adds	r3, #36	@ 0x24
 800cc70:	687a      	ldr	r2, [r7, #4]
 800cc72:	68b9      	ldr	r1, [r7, #8]
 800cc74:	4618      	mov	r0, r3
 800cc76:	f000 fcff 	bl	800d678 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800cc7a:	6978      	ldr	r0, [r7, #20]
 800cc7c:	f7ff ff26 	bl	800cacc <prvUnlockQueue>
	}
 800cc80:	bf00      	nop
 800cc82:	3718      	adds	r7, #24
 800cc84:	46bd      	mov	sp, r7
 800cc86:	bd80      	pop	{r7, pc}

0800cc88 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800cc88:	b580      	push	{r7, lr}
 800cc8a:	b08e      	sub	sp, #56	@ 0x38
 800cc8c:	af04      	add	r7, sp, #16
 800cc8e:	60f8      	str	r0, [r7, #12]
 800cc90:	60b9      	str	r1, [r7, #8]
 800cc92:	607a      	str	r2, [r7, #4]
 800cc94:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800cc96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d10b      	bne.n	800ccb4 <xTaskCreateStatic+0x2c>
	__asm volatile
 800cc9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cca0:	f383 8811 	msr	BASEPRI, r3
 800cca4:	f3bf 8f6f 	isb	sy
 800cca8:	f3bf 8f4f 	dsb	sy
 800ccac:	623b      	str	r3, [r7, #32]
}
 800ccae:	bf00      	nop
 800ccb0:	bf00      	nop
 800ccb2:	e7fd      	b.n	800ccb0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ccb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d10b      	bne.n	800ccd2 <xTaskCreateStatic+0x4a>
	__asm volatile
 800ccba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccbe:	f383 8811 	msr	BASEPRI, r3
 800ccc2:	f3bf 8f6f 	isb	sy
 800ccc6:	f3bf 8f4f 	dsb	sy
 800ccca:	61fb      	str	r3, [r7, #28]
}
 800cccc:	bf00      	nop
 800ccce:	bf00      	nop
 800ccd0:	e7fd      	b.n	800ccce <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ccd2:	23a8      	movs	r3, #168	@ 0xa8
 800ccd4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ccd6:	693b      	ldr	r3, [r7, #16]
 800ccd8:	2ba8      	cmp	r3, #168	@ 0xa8
 800ccda:	d00b      	beq.n	800ccf4 <xTaskCreateStatic+0x6c>
	__asm volatile
 800ccdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cce0:	f383 8811 	msr	BASEPRI, r3
 800cce4:	f3bf 8f6f 	isb	sy
 800cce8:	f3bf 8f4f 	dsb	sy
 800ccec:	61bb      	str	r3, [r7, #24]
}
 800ccee:	bf00      	nop
 800ccf0:	bf00      	nop
 800ccf2:	e7fd      	b.n	800ccf0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ccf4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ccf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d01e      	beq.n	800cd3a <xTaskCreateStatic+0xb2>
 800ccfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d01b      	beq.n	800cd3a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cd02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd04:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800cd06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd08:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cd0a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800cd0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd0e:	2202      	movs	r2, #2
 800cd10:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800cd14:	2300      	movs	r3, #0
 800cd16:	9303      	str	r3, [sp, #12]
 800cd18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd1a:	9302      	str	r3, [sp, #8]
 800cd1c:	f107 0314 	add.w	r3, r7, #20
 800cd20:	9301      	str	r3, [sp, #4]
 800cd22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd24:	9300      	str	r3, [sp, #0]
 800cd26:	683b      	ldr	r3, [r7, #0]
 800cd28:	687a      	ldr	r2, [r7, #4]
 800cd2a:	68b9      	ldr	r1, [r7, #8]
 800cd2c:	68f8      	ldr	r0, [r7, #12]
 800cd2e:	f000 f851 	bl	800cdd4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cd32:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cd34:	f000 f8f6 	bl	800cf24 <prvAddNewTaskToReadyList>
 800cd38:	e001      	b.n	800cd3e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800cd3a:	2300      	movs	r3, #0
 800cd3c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800cd3e:	697b      	ldr	r3, [r7, #20]
	}
 800cd40:	4618      	mov	r0, r3
 800cd42:	3728      	adds	r7, #40	@ 0x28
 800cd44:	46bd      	mov	sp, r7
 800cd46:	bd80      	pop	{r7, pc}

0800cd48 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800cd48:	b580      	push	{r7, lr}
 800cd4a:	b08c      	sub	sp, #48	@ 0x30
 800cd4c:	af04      	add	r7, sp, #16
 800cd4e:	60f8      	str	r0, [r7, #12]
 800cd50:	60b9      	str	r1, [r7, #8]
 800cd52:	603b      	str	r3, [r7, #0]
 800cd54:	4613      	mov	r3, r2
 800cd56:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800cd58:	88fb      	ldrh	r3, [r7, #6]
 800cd5a:	009b      	lsls	r3, r3, #2
 800cd5c:	4618      	mov	r0, r3
 800cd5e:	f001 fe1d 	bl	800e99c <pvPortMalloc>
 800cd62:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800cd64:	697b      	ldr	r3, [r7, #20]
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d00e      	beq.n	800cd88 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800cd6a:	20a8      	movs	r0, #168	@ 0xa8
 800cd6c:	f001 fe16 	bl	800e99c <pvPortMalloc>
 800cd70:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800cd72:	69fb      	ldr	r3, [r7, #28]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d003      	beq.n	800cd80 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800cd78:	69fb      	ldr	r3, [r7, #28]
 800cd7a:	697a      	ldr	r2, [r7, #20]
 800cd7c:	631a      	str	r2, [r3, #48]	@ 0x30
 800cd7e:	e005      	b.n	800cd8c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800cd80:	6978      	ldr	r0, [r7, #20]
 800cd82:	f001 fed9 	bl	800eb38 <vPortFree>
 800cd86:	e001      	b.n	800cd8c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800cd88:	2300      	movs	r3, #0
 800cd8a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800cd8c:	69fb      	ldr	r3, [r7, #28]
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d017      	beq.n	800cdc2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800cd92:	69fb      	ldr	r3, [r7, #28]
 800cd94:	2200      	movs	r2, #0
 800cd96:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800cd9a:	88fa      	ldrh	r2, [r7, #6]
 800cd9c:	2300      	movs	r3, #0
 800cd9e:	9303      	str	r3, [sp, #12]
 800cda0:	69fb      	ldr	r3, [r7, #28]
 800cda2:	9302      	str	r3, [sp, #8]
 800cda4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cda6:	9301      	str	r3, [sp, #4]
 800cda8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdaa:	9300      	str	r3, [sp, #0]
 800cdac:	683b      	ldr	r3, [r7, #0]
 800cdae:	68b9      	ldr	r1, [r7, #8]
 800cdb0:	68f8      	ldr	r0, [r7, #12]
 800cdb2:	f000 f80f 	bl	800cdd4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cdb6:	69f8      	ldr	r0, [r7, #28]
 800cdb8:	f000 f8b4 	bl	800cf24 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800cdbc:	2301      	movs	r3, #1
 800cdbe:	61bb      	str	r3, [r7, #24]
 800cdc0:	e002      	b.n	800cdc8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800cdc2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cdc6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800cdc8:	69bb      	ldr	r3, [r7, #24]
	}
 800cdca:	4618      	mov	r0, r3
 800cdcc:	3720      	adds	r7, #32
 800cdce:	46bd      	mov	sp, r7
 800cdd0:	bd80      	pop	{r7, pc}
	...

0800cdd4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800cdd4:	b580      	push	{r7, lr}
 800cdd6:	b088      	sub	sp, #32
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	60f8      	str	r0, [r7, #12]
 800cddc:	60b9      	str	r1, [r7, #8]
 800cdde:	607a      	str	r2, [r7, #4]
 800cde0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800cde2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cde4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	009b      	lsls	r3, r3, #2
 800cdea:	461a      	mov	r2, r3
 800cdec:	21a5      	movs	r1, #165	@ 0xa5
 800cdee:	f003 fa21 	bl	8010234 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800cdf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdf4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cdfc:	3b01      	subs	r3, #1
 800cdfe:	009b      	lsls	r3, r3, #2
 800ce00:	4413      	add	r3, r2
 800ce02:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ce04:	69bb      	ldr	r3, [r7, #24]
 800ce06:	f023 0307 	bic.w	r3, r3, #7
 800ce0a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ce0c:	69bb      	ldr	r3, [r7, #24]
 800ce0e:	f003 0307 	and.w	r3, r3, #7
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d00b      	beq.n	800ce2e <prvInitialiseNewTask+0x5a>
	__asm volatile
 800ce16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce1a:	f383 8811 	msr	BASEPRI, r3
 800ce1e:	f3bf 8f6f 	isb	sy
 800ce22:	f3bf 8f4f 	dsb	sy
 800ce26:	617b      	str	r3, [r7, #20]
}
 800ce28:	bf00      	nop
 800ce2a:	bf00      	nop
 800ce2c:	e7fd      	b.n	800ce2a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ce2e:	68bb      	ldr	r3, [r7, #8]
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d01f      	beq.n	800ce74 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ce34:	2300      	movs	r3, #0
 800ce36:	61fb      	str	r3, [r7, #28]
 800ce38:	e012      	b.n	800ce60 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ce3a:	68ba      	ldr	r2, [r7, #8]
 800ce3c:	69fb      	ldr	r3, [r7, #28]
 800ce3e:	4413      	add	r3, r2
 800ce40:	7819      	ldrb	r1, [r3, #0]
 800ce42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ce44:	69fb      	ldr	r3, [r7, #28]
 800ce46:	4413      	add	r3, r2
 800ce48:	3334      	adds	r3, #52	@ 0x34
 800ce4a:	460a      	mov	r2, r1
 800ce4c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ce4e:	68ba      	ldr	r2, [r7, #8]
 800ce50:	69fb      	ldr	r3, [r7, #28]
 800ce52:	4413      	add	r3, r2
 800ce54:	781b      	ldrb	r3, [r3, #0]
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d006      	beq.n	800ce68 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ce5a:	69fb      	ldr	r3, [r7, #28]
 800ce5c:	3301      	adds	r3, #1
 800ce5e:	61fb      	str	r3, [r7, #28]
 800ce60:	69fb      	ldr	r3, [r7, #28]
 800ce62:	2b0f      	cmp	r3, #15
 800ce64:	d9e9      	bls.n	800ce3a <prvInitialiseNewTask+0x66>
 800ce66:	e000      	b.n	800ce6a <prvInitialiseNewTask+0x96>
			{
				break;
 800ce68:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ce6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce6c:	2200      	movs	r2, #0
 800ce6e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800ce72:	e003      	b.n	800ce7c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ce74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce76:	2200      	movs	r2, #0
 800ce78:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ce7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce7e:	2b37      	cmp	r3, #55	@ 0x37
 800ce80:	d901      	bls.n	800ce86 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ce82:	2337      	movs	r3, #55	@ 0x37
 800ce84:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ce86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce88:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ce8a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ce8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce8e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ce90:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ce92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce94:	2200      	movs	r2, #0
 800ce96:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ce98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce9a:	3304      	adds	r3, #4
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	f7fe fec7 	bl	800bc30 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800cea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cea4:	3318      	adds	r3, #24
 800cea6:	4618      	mov	r0, r3
 800cea8:	f7fe fec2 	bl	800bc30 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ceac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ceae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ceb0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ceb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ceb4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ceb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ceba:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800cebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cebe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cec0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800cec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cec4:	2200      	movs	r2, #0
 800cec6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ceca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cecc:	2200      	movs	r2, #0
 800cece:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800ced2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ced4:	3354      	adds	r3, #84	@ 0x54
 800ced6:	224c      	movs	r2, #76	@ 0x4c
 800ced8:	2100      	movs	r1, #0
 800ceda:	4618      	mov	r0, r3
 800cedc:	f003 f9aa 	bl	8010234 <memset>
 800cee0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cee2:	4a0d      	ldr	r2, [pc, #52]	@ (800cf18 <prvInitialiseNewTask+0x144>)
 800cee4:	659a      	str	r2, [r3, #88]	@ 0x58
 800cee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cee8:	4a0c      	ldr	r2, [pc, #48]	@ (800cf1c <prvInitialiseNewTask+0x148>)
 800ceea:	65da      	str	r2, [r3, #92]	@ 0x5c
 800ceec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ceee:	4a0c      	ldr	r2, [pc, #48]	@ (800cf20 <prvInitialiseNewTask+0x14c>)
 800cef0:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800cef2:	683a      	ldr	r2, [r7, #0]
 800cef4:	68f9      	ldr	r1, [r7, #12]
 800cef6:	69b8      	ldr	r0, [r7, #24]
 800cef8:	f001 fafc 	bl	800e4f4 <pxPortInitialiseStack>
 800cefc:	4602      	mov	r2, r0
 800cefe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf00:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800cf02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d002      	beq.n	800cf0e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800cf08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cf0c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cf0e:	bf00      	nop
 800cf10:	3720      	adds	r7, #32
 800cf12:	46bd      	mov	sp, r7
 800cf14:	bd80      	pop	{r7, pc}
 800cf16:	bf00      	nop
 800cf18:	200127f8 	.word	0x200127f8
 800cf1c:	20012860 	.word	0x20012860
 800cf20:	200128c8 	.word	0x200128c8

0800cf24 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800cf24:	b580      	push	{r7, lr}
 800cf26:	b082      	sub	sp, #8
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800cf2c:	f001 fc14 	bl	800e758 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800cf30:	4b2d      	ldr	r3, [pc, #180]	@ (800cfe8 <prvAddNewTaskToReadyList+0xc4>)
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	3301      	adds	r3, #1
 800cf36:	4a2c      	ldr	r2, [pc, #176]	@ (800cfe8 <prvAddNewTaskToReadyList+0xc4>)
 800cf38:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800cf3a:	4b2c      	ldr	r3, [pc, #176]	@ (800cfec <prvAddNewTaskToReadyList+0xc8>)
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d109      	bne.n	800cf56 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800cf42:	4a2a      	ldr	r2, [pc, #168]	@ (800cfec <prvAddNewTaskToReadyList+0xc8>)
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800cf48:	4b27      	ldr	r3, [pc, #156]	@ (800cfe8 <prvAddNewTaskToReadyList+0xc4>)
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	2b01      	cmp	r3, #1
 800cf4e:	d110      	bne.n	800cf72 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800cf50:	f000 fcc0 	bl	800d8d4 <prvInitialiseTaskLists>
 800cf54:	e00d      	b.n	800cf72 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800cf56:	4b26      	ldr	r3, [pc, #152]	@ (800cff0 <prvAddNewTaskToReadyList+0xcc>)
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d109      	bne.n	800cf72 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800cf5e:	4b23      	ldr	r3, [pc, #140]	@ (800cfec <prvAddNewTaskToReadyList+0xc8>)
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf68:	429a      	cmp	r2, r3
 800cf6a:	d802      	bhi.n	800cf72 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800cf6c:	4a1f      	ldr	r2, [pc, #124]	@ (800cfec <prvAddNewTaskToReadyList+0xc8>)
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800cf72:	4b20      	ldr	r3, [pc, #128]	@ (800cff4 <prvAddNewTaskToReadyList+0xd0>)
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	3301      	adds	r3, #1
 800cf78:	4a1e      	ldr	r2, [pc, #120]	@ (800cff4 <prvAddNewTaskToReadyList+0xd0>)
 800cf7a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800cf7c:	4b1d      	ldr	r3, [pc, #116]	@ (800cff4 <prvAddNewTaskToReadyList+0xd0>)
 800cf7e:	681a      	ldr	r2, [r3, #0]
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cf88:	4b1b      	ldr	r3, [pc, #108]	@ (800cff8 <prvAddNewTaskToReadyList+0xd4>)
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	429a      	cmp	r2, r3
 800cf8e:	d903      	bls.n	800cf98 <prvAddNewTaskToReadyList+0x74>
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf94:	4a18      	ldr	r2, [pc, #96]	@ (800cff8 <prvAddNewTaskToReadyList+0xd4>)
 800cf96:	6013      	str	r3, [r2, #0]
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cf9c:	4613      	mov	r3, r2
 800cf9e:	009b      	lsls	r3, r3, #2
 800cfa0:	4413      	add	r3, r2
 800cfa2:	009b      	lsls	r3, r3, #2
 800cfa4:	4a15      	ldr	r2, [pc, #84]	@ (800cffc <prvAddNewTaskToReadyList+0xd8>)
 800cfa6:	441a      	add	r2, r3
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	3304      	adds	r3, #4
 800cfac:	4619      	mov	r1, r3
 800cfae:	4610      	mov	r0, r2
 800cfb0:	f7fe fe4b 	bl	800bc4a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800cfb4:	f001 fc02 	bl	800e7bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800cfb8:	4b0d      	ldr	r3, [pc, #52]	@ (800cff0 <prvAddNewTaskToReadyList+0xcc>)
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d00e      	beq.n	800cfde <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800cfc0:	4b0a      	ldr	r3, [pc, #40]	@ (800cfec <prvAddNewTaskToReadyList+0xc8>)
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cfca:	429a      	cmp	r2, r3
 800cfcc:	d207      	bcs.n	800cfde <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800cfce:	4b0c      	ldr	r3, [pc, #48]	@ (800d000 <prvAddNewTaskToReadyList+0xdc>)
 800cfd0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cfd4:	601a      	str	r2, [r3, #0]
 800cfd6:	f3bf 8f4f 	dsb	sy
 800cfda:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cfde:	bf00      	nop
 800cfe0:	3708      	adds	r7, #8
 800cfe2:	46bd      	mov	sp, r7
 800cfe4:	bd80      	pop	{r7, pc}
 800cfe6:	bf00      	nop
 800cfe8:	200012ac 	.word	0x200012ac
 800cfec:	20000dd8 	.word	0x20000dd8
 800cff0:	200012b8 	.word	0x200012b8
 800cff4:	200012c8 	.word	0x200012c8
 800cff8:	200012b4 	.word	0x200012b4
 800cffc:	20000ddc 	.word	0x20000ddc
 800d000:	e000ed04 	.word	0xe000ed04

0800d004 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800d004:	b580      	push	{r7, lr}
 800d006:	b08a      	sub	sp, #40	@ 0x28
 800d008:	af00      	add	r7, sp, #0
 800d00a:	6078      	str	r0, [r7, #4]
 800d00c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800d00e:	2300      	movs	r3, #0
 800d010:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	2b00      	cmp	r3, #0
 800d016:	d10b      	bne.n	800d030 <vTaskDelayUntil+0x2c>
	__asm volatile
 800d018:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d01c:	f383 8811 	msr	BASEPRI, r3
 800d020:	f3bf 8f6f 	isb	sy
 800d024:	f3bf 8f4f 	dsb	sy
 800d028:	617b      	str	r3, [r7, #20]
}
 800d02a:	bf00      	nop
 800d02c:	bf00      	nop
 800d02e:	e7fd      	b.n	800d02c <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800d030:	683b      	ldr	r3, [r7, #0]
 800d032:	2b00      	cmp	r3, #0
 800d034:	d10b      	bne.n	800d04e <vTaskDelayUntil+0x4a>
	__asm volatile
 800d036:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d03a:	f383 8811 	msr	BASEPRI, r3
 800d03e:	f3bf 8f6f 	isb	sy
 800d042:	f3bf 8f4f 	dsb	sy
 800d046:	613b      	str	r3, [r7, #16]
}
 800d048:	bf00      	nop
 800d04a:	bf00      	nop
 800d04c:	e7fd      	b.n	800d04a <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 800d04e:	4b2a      	ldr	r3, [pc, #168]	@ (800d0f8 <vTaskDelayUntil+0xf4>)
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	2b00      	cmp	r3, #0
 800d054:	d00b      	beq.n	800d06e <vTaskDelayUntil+0x6a>
	__asm volatile
 800d056:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d05a:	f383 8811 	msr	BASEPRI, r3
 800d05e:	f3bf 8f6f 	isb	sy
 800d062:	f3bf 8f4f 	dsb	sy
 800d066:	60fb      	str	r3, [r7, #12]
}
 800d068:	bf00      	nop
 800d06a:	bf00      	nop
 800d06c:	e7fd      	b.n	800d06a <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 800d06e:	f000 f8ef 	bl	800d250 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800d072:	4b22      	ldr	r3, [pc, #136]	@ (800d0fc <vTaskDelayUntil+0xf8>)
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	683a      	ldr	r2, [r7, #0]
 800d07e:	4413      	add	r3, r2
 800d080:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	6a3a      	ldr	r2, [r7, #32]
 800d088:	429a      	cmp	r2, r3
 800d08a:	d20b      	bcs.n	800d0a4 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	69fa      	ldr	r2, [r7, #28]
 800d092:	429a      	cmp	r2, r3
 800d094:	d211      	bcs.n	800d0ba <vTaskDelayUntil+0xb6>
 800d096:	69fa      	ldr	r2, [r7, #28]
 800d098:	6a3b      	ldr	r3, [r7, #32]
 800d09a:	429a      	cmp	r2, r3
 800d09c:	d90d      	bls.n	800d0ba <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800d09e:	2301      	movs	r3, #1
 800d0a0:	627b      	str	r3, [r7, #36]	@ 0x24
 800d0a2:	e00a      	b.n	800d0ba <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	69fa      	ldr	r2, [r7, #28]
 800d0aa:	429a      	cmp	r2, r3
 800d0ac:	d303      	bcc.n	800d0b6 <vTaskDelayUntil+0xb2>
 800d0ae:	69fa      	ldr	r2, [r7, #28]
 800d0b0:	6a3b      	ldr	r3, [r7, #32]
 800d0b2:	429a      	cmp	r2, r3
 800d0b4:	d901      	bls.n	800d0ba <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800d0b6:	2301      	movs	r3, #1
 800d0b8:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	69fa      	ldr	r2, [r7, #28]
 800d0be:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800d0c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d006      	beq.n	800d0d4 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800d0c6:	69fa      	ldr	r2, [r7, #28]
 800d0c8:	6a3b      	ldr	r3, [r7, #32]
 800d0ca:	1ad3      	subs	r3, r2, r3
 800d0cc:	2100      	movs	r1, #0
 800d0ce:	4618      	mov	r0, r3
 800d0d0:	f000 fe62 	bl	800dd98 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800d0d4:	f000 f8ca 	bl	800d26c <xTaskResumeAll>
 800d0d8:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d0da:	69bb      	ldr	r3, [r7, #24]
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d107      	bne.n	800d0f0 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 800d0e0:	4b07      	ldr	r3, [pc, #28]	@ (800d100 <vTaskDelayUntil+0xfc>)
 800d0e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d0e6:	601a      	str	r2, [r3, #0]
 800d0e8:	f3bf 8f4f 	dsb	sy
 800d0ec:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d0f0:	bf00      	nop
 800d0f2:	3728      	adds	r7, #40	@ 0x28
 800d0f4:	46bd      	mov	sp, r7
 800d0f6:	bd80      	pop	{r7, pc}
 800d0f8:	200012d4 	.word	0x200012d4
 800d0fc:	200012b0 	.word	0x200012b0
 800d100:	e000ed04 	.word	0xe000ed04

0800d104 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d104:	b580      	push	{r7, lr}
 800d106:	b084      	sub	sp, #16
 800d108:	af00      	add	r7, sp, #0
 800d10a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d10c:	2300      	movs	r3, #0
 800d10e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	2b00      	cmp	r3, #0
 800d114:	d018      	beq.n	800d148 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d116:	4b14      	ldr	r3, [pc, #80]	@ (800d168 <vTaskDelay+0x64>)
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d00b      	beq.n	800d136 <vTaskDelay+0x32>
	__asm volatile
 800d11e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d122:	f383 8811 	msr	BASEPRI, r3
 800d126:	f3bf 8f6f 	isb	sy
 800d12a:	f3bf 8f4f 	dsb	sy
 800d12e:	60bb      	str	r3, [r7, #8]
}
 800d130:	bf00      	nop
 800d132:	bf00      	nop
 800d134:	e7fd      	b.n	800d132 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d136:	f000 f88b 	bl	800d250 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d13a:	2100      	movs	r1, #0
 800d13c:	6878      	ldr	r0, [r7, #4]
 800d13e:	f000 fe2b 	bl	800dd98 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d142:	f000 f893 	bl	800d26c <xTaskResumeAll>
 800d146:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d107      	bne.n	800d15e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800d14e:	4b07      	ldr	r3, [pc, #28]	@ (800d16c <vTaskDelay+0x68>)
 800d150:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d154:	601a      	str	r2, [r3, #0]
 800d156:	f3bf 8f4f 	dsb	sy
 800d15a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d15e:	bf00      	nop
 800d160:	3710      	adds	r7, #16
 800d162:	46bd      	mov	sp, r7
 800d164:	bd80      	pop	{r7, pc}
 800d166:	bf00      	nop
 800d168:	200012d4 	.word	0x200012d4
 800d16c:	e000ed04 	.word	0xe000ed04

0800d170 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d170:	b580      	push	{r7, lr}
 800d172:	b08a      	sub	sp, #40	@ 0x28
 800d174:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d176:	2300      	movs	r3, #0
 800d178:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d17a:	2300      	movs	r3, #0
 800d17c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d17e:	463a      	mov	r2, r7
 800d180:	1d39      	adds	r1, r7, #4
 800d182:	f107 0308 	add.w	r3, r7, #8
 800d186:	4618      	mov	r0, r3
 800d188:	f7fe fcfe 	bl	800bb88 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d18c:	6839      	ldr	r1, [r7, #0]
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	68ba      	ldr	r2, [r7, #8]
 800d192:	9202      	str	r2, [sp, #8]
 800d194:	9301      	str	r3, [sp, #4]
 800d196:	2300      	movs	r3, #0
 800d198:	9300      	str	r3, [sp, #0]
 800d19a:	2300      	movs	r3, #0
 800d19c:	460a      	mov	r2, r1
 800d19e:	4924      	ldr	r1, [pc, #144]	@ (800d230 <vTaskStartScheduler+0xc0>)
 800d1a0:	4824      	ldr	r0, [pc, #144]	@ (800d234 <vTaskStartScheduler+0xc4>)
 800d1a2:	f7ff fd71 	bl	800cc88 <xTaskCreateStatic>
 800d1a6:	4603      	mov	r3, r0
 800d1a8:	4a23      	ldr	r2, [pc, #140]	@ (800d238 <vTaskStartScheduler+0xc8>)
 800d1aa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d1ac:	4b22      	ldr	r3, [pc, #136]	@ (800d238 <vTaskStartScheduler+0xc8>)
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d002      	beq.n	800d1ba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d1b4:	2301      	movs	r3, #1
 800d1b6:	617b      	str	r3, [r7, #20]
 800d1b8:	e001      	b.n	800d1be <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d1ba:	2300      	movs	r3, #0
 800d1bc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d1be:	697b      	ldr	r3, [r7, #20]
 800d1c0:	2b01      	cmp	r3, #1
 800d1c2:	d102      	bne.n	800d1ca <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800d1c4:	f000 fe3c 	bl	800de40 <xTimerCreateTimerTask>
 800d1c8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d1ca:	697b      	ldr	r3, [r7, #20]
 800d1cc:	2b01      	cmp	r3, #1
 800d1ce:	d11b      	bne.n	800d208 <vTaskStartScheduler+0x98>
	__asm volatile
 800d1d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1d4:	f383 8811 	msr	BASEPRI, r3
 800d1d8:	f3bf 8f6f 	isb	sy
 800d1dc:	f3bf 8f4f 	dsb	sy
 800d1e0:	613b      	str	r3, [r7, #16]
}
 800d1e2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d1e4:	4b15      	ldr	r3, [pc, #84]	@ (800d23c <vTaskStartScheduler+0xcc>)
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	3354      	adds	r3, #84	@ 0x54
 800d1ea:	4a15      	ldr	r2, [pc, #84]	@ (800d240 <vTaskStartScheduler+0xd0>)
 800d1ec:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d1ee:	4b15      	ldr	r3, [pc, #84]	@ (800d244 <vTaskStartScheduler+0xd4>)
 800d1f0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d1f4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d1f6:	4b14      	ldr	r3, [pc, #80]	@ (800d248 <vTaskStartScheduler+0xd8>)
 800d1f8:	2201      	movs	r2, #1
 800d1fa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d1fc:	4b13      	ldr	r3, [pc, #76]	@ (800d24c <vTaskStartScheduler+0xdc>)
 800d1fe:	2200      	movs	r2, #0
 800d200:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d202:	f001 fa05 	bl	800e610 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d206:	e00f      	b.n	800d228 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d208:	697b      	ldr	r3, [r7, #20]
 800d20a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d20e:	d10b      	bne.n	800d228 <vTaskStartScheduler+0xb8>
	__asm volatile
 800d210:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d214:	f383 8811 	msr	BASEPRI, r3
 800d218:	f3bf 8f6f 	isb	sy
 800d21c:	f3bf 8f4f 	dsb	sy
 800d220:	60fb      	str	r3, [r7, #12]
}
 800d222:	bf00      	nop
 800d224:	bf00      	nop
 800d226:	e7fd      	b.n	800d224 <vTaskStartScheduler+0xb4>
}
 800d228:	bf00      	nop
 800d22a:	3718      	adds	r7, #24
 800d22c:	46bd      	mov	sp, r7
 800d22e:	bd80      	pop	{r7, pc}
 800d230:	0801340c 	.word	0x0801340c
 800d234:	0800d8a5 	.word	0x0800d8a5
 800d238:	200012d0 	.word	0x200012d0
 800d23c:	20000dd8 	.word	0x20000dd8
 800d240:	200001b4 	.word	0x200001b4
 800d244:	200012cc 	.word	0x200012cc
 800d248:	200012b8 	.word	0x200012b8
 800d24c:	200012b0 	.word	0x200012b0

0800d250 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d250:	b480      	push	{r7}
 800d252:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d254:	4b04      	ldr	r3, [pc, #16]	@ (800d268 <vTaskSuspendAll+0x18>)
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	3301      	adds	r3, #1
 800d25a:	4a03      	ldr	r2, [pc, #12]	@ (800d268 <vTaskSuspendAll+0x18>)
 800d25c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d25e:	bf00      	nop
 800d260:	46bd      	mov	sp, r7
 800d262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d266:	4770      	bx	lr
 800d268:	200012d4 	.word	0x200012d4

0800d26c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d26c:	b580      	push	{r7, lr}
 800d26e:	b084      	sub	sp, #16
 800d270:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d272:	2300      	movs	r3, #0
 800d274:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d276:	2300      	movs	r3, #0
 800d278:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d27a:	4b42      	ldr	r3, [pc, #264]	@ (800d384 <xTaskResumeAll+0x118>)
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d10b      	bne.n	800d29a <xTaskResumeAll+0x2e>
	__asm volatile
 800d282:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d286:	f383 8811 	msr	BASEPRI, r3
 800d28a:	f3bf 8f6f 	isb	sy
 800d28e:	f3bf 8f4f 	dsb	sy
 800d292:	603b      	str	r3, [r7, #0]
}
 800d294:	bf00      	nop
 800d296:	bf00      	nop
 800d298:	e7fd      	b.n	800d296 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d29a:	f001 fa5d 	bl	800e758 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d29e:	4b39      	ldr	r3, [pc, #228]	@ (800d384 <xTaskResumeAll+0x118>)
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	3b01      	subs	r3, #1
 800d2a4:	4a37      	ldr	r2, [pc, #220]	@ (800d384 <xTaskResumeAll+0x118>)
 800d2a6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d2a8:	4b36      	ldr	r3, [pc, #216]	@ (800d384 <xTaskResumeAll+0x118>)
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d162      	bne.n	800d376 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d2b0:	4b35      	ldr	r3, [pc, #212]	@ (800d388 <xTaskResumeAll+0x11c>)
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d05e      	beq.n	800d376 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d2b8:	e02f      	b.n	800d31a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d2ba:	4b34      	ldr	r3, [pc, #208]	@ (800d38c <xTaskResumeAll+0x120>)
 800d2bc:	68db      	ldr	r3, [r3, #12]
 800d2be:	68db      	ldr	r3, [r3, #12]
 800d2c0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	3318      	adds	r3, #24
 800d2c6:	4618      	mov	r0, r3
 800d2c8:	f7fe fd1c 	bl	800bd04 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	3304      	adds	r3, #4
 800d2d0:	4618      	mov	r0, r3
 800d2d2:	f7fe fd17 	bl	800bd04 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d2da:	4b2d      	ldr	r3, [pc, #180]	@ (800d390 <xTaskResumeAll+0x124>)
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	429a      	cmp	r2, r3
 800d2e0:	d903      	bls.n	800d2ea <xTaskResumeAll+0x7e>
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d2e6:	4a2a      	ldr	r2, [pc, #168]	@ (800d390 <xTaskResumeAll+0x124>)
 800d2e8:	6013      	str	r3, [r2, #0]
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d2ee:	4613      	mov	r3, r2
 800d2f0:	009b      	lsls	r3, r3, #2
 800d2f2:	4413      	add	r3, r2
 800d2f4:	009b      	lsls	r3, r3, #2
 800d2f6:	4a27      	ldr	r2, [pc, #156]	@ (800d394 <xTaskResumeAll+0x128>)
 800d2f8:	441a      	add	r2, r3
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	3304      	adds	r3, #4
 800d2fe:	4619      	mov	r1, r3
 800d300:	4610      	mov	r0, r2
 800d302:	f7fe fca2 	bl	800bc4a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d30a:	4b23      	ldr	r3, [pc, #140]	@ (800d398 <xTaskResumeAll+0x12c>)
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d310:	429a      	cmp	r2, r3
 800d312:	d302      	bcc.n	800d31a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800d314:	4b21      	ldr	r3, [pc, #132]	@ (800d39c <xTaskResumeAll+0x130>)
 800d316:	2201      	movs	r2, #1
 800d318:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d31a:	4b1c      	ldr	r3, [pc, #112]	@ (800d38c <xTaskResumeAll+0x120>)
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d1cb      	bne.n	800d2ba <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	2b00      	cmp	r3, #0
 800d326:	d001      	beq.n	800d32c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d328:	f000 fb78 	bl	800da1c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d32c:	4b1c      	ldr	r3, [pc, #112]	@ (800d3a0 <xTaskResumeAll+0x134>)
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	2b00      	cmp	r3, #0
 800d336:	d010      	beq.n	800d35a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d338:	f000 f858 	bl	800d3ec <xTaskIncrementTick>
 800d33c:	4603      	mov	r3, r0
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d002      	beq.n	800d348 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800d342:	4b16      	ldr	r3, [pc, #88]	@ (800d39c <xTaskResumeAll+0x130>)
 800d344:	2201      	movs	r2, #1
 800d346:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	3b01      	subs	r3, #1
 800d34c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	2b00      	cmp	r3, #0
 800d352:	d1f1      	bne.n	800d338 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800d354:	4b12      	ldr	r3, [pc, #72]	@ (800d3a0 <xTaskResumeAll+0x134>)
 800d356:	2200      	movs	r2, #0
 800d358:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d35a:	4b10      	ldr	r3, [pc, #64]	@ (800d39c <xTaskResumeAll+0x130>)
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d009      	beq.n	800d376 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d362:	2301      	movs	r3, #1
 800d364:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d366:	4b0f      	ldr	r3, [pc, #60]	@ (800d3a4 <xTaskResumeAll+0x138>)
 800d368:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d36c:	601a      	str	r2, [r3, #0]
 800d36e:	f3bf 8f4f 	dsb	sy
 800d372:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d376:	f001 fa21 	bl	800e7bc <vPortExitCritical>

	return xAlreadyYielded;
 800d37a:	68bb      	ldr	r3, [r7, #8]
}
 800d37c:	4618      	mov	r0, r3
 800d37e:	3710      	adds	r7, #16
 800d380:	46bd      	mov	sp, r7
 800d382:	bd80      	pop	{r7, pc}
 800d384:	200012d4 	.word	0x200012d4
 800d388:	200012ac 	.word	0x200012ac
 800d38c:	2000126c 	.word	0x2000126c
 800d390:	200012b4 	.word	0x200012b4
 800d394:	20000ddc 	.word	0x20000ddc
 800d398:	20000dd8 	.word	0x20000dd8
 800d39c:	200012c0 	.word	0x200012c0
 800d3a0:	200012bc 	.word	0x200012bc
 800d3a4:	e000ed04 	.word	0xe000ed04

0800d3a8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d3a8:	b480      	push	{r7}
 800d3aa:	b083      	sub	sp, #12
 800d3ac:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d3ae:	4b05      	ldr	r3, [pc, #20]	@ (800d3c4 <xTaskGetTickCount+0x1c>)
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d3b4:	687b      	ldr	r3, [r7, #4]
}
 800d3b6:	4618      	mov	r0, r3
 800d3b8:	370c      	adds	r7, #12
 800d3ba:	46bd      	mov	sp, r7
 800d3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3c0:	4770      	bx	lr
 800d3c2:	bf00      	nop
 800d3c4:	200012b0 	.word	0x200012b0

0800d3c8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800d3c8:	b580      	push	{r7, lr}
 800d3ca:	b082      	sub	sp, #8
 800d3cc:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d3ce:	f001 faa3 	bl	800e918 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800d3d2:	2300      	movs	r3, #0
 800d3d4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800d3d6:	4b04      	ldr	r3, [pc, #16]	@ (800d3e8 <xTaskGetTickCountFromISR+0x20>)
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d3dc:	683b      	ldr	r3, [r7, #0]
}
 800d3de:	4618      	mov	r0, r3
 800d3e0:	3708      	adds	r7, #8
 800d3e2:	46bd      	mov	sp, r7
 800d3e4:	bd80      	pop	{r7, pc}
 800d3e6:	bf00      	nop
 800d3e8:	200012b0 	.word	0x200012b0

0800d3ec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d3ec:	b580      	push	{r7, lr}
 800d3ee:	b086      	sub	sp, #24
 800d3f0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d3f2:	2300      	movs	r3, #0
 800d3f4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d3f6:	4b4f      	ldr	r3, [pc, #316]	@ (800d534 <xTaskIncrementTick+0x148>)
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	f040 8090 	bne.w	800d520 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d400:	4b4d      	ldr	r3, [pc, #308]	@ (800d538 <xTaskIncrementTick+0x14c>)
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	3301      	adds	r3, #1
 800d406:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d408:	4a4b      	ldr	r2, [pc, #300]	@ (800d538 <xTaskIncrementTick+0x14c>)
 800d40a:	693b      	ldr	r3, [r7, #16]
 800d40c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d40e:	693b      	ldr	r3, [r7, #16]
 800d410:	2b00      	cmp	r3, #0
 800d412:	d121      	bne.n	800d458 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800d414:	4b49      	ldr	r3, [pc, #292]	@ (800d53c <xTaskIncrementTick+0x150>)
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d00b      	beq.n	800d436 <xTaskIncrementTick+0x4a>
	__asm volatile
 800d41e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d422:	f383 8811 	msr	BASEPRI, r3
 800d426:	f3bf 8f6f 	isb	sy
 800d42a:	f3bf 8f4f 	dsb	sy
 800d42e:	603b      	str	r3, [r7, #0]
}
 800d430:	bf00      	nop
 800d432:	bf00      	nop
 800d434:	e7fd      	b.n	800d432 <xTaskIncrementTick+0x46>
 800d436:	4b41      	ldr	r3, [pc, #260]	@ (800d53c <xTaskIncrementTick+0x150>)
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	60fb      	str	r3, [r7, #12]
 800d43c:	4b40      	ldr	r3, [pc, #256]	@ (800d540 <xTaskIncrementTick+0x154>)
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	4a3e      	ldr	r2, [pc, #248]	@ (800d53c <xTaskIncrementTick+0x150>)
 800d442:	6013      	str	r3, [r2, #0]
 800d444:	4a3e      	ldr	r2, [pc, #248]	@ (800d540 <xTaskIncrementTick+0x154>)
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	6013      	str	r3, [r2, #0]
 800d44a:	4b3e      	ldr	r3, [pc, #248]	@ (800d544 <xTaskIncrementTick+0x158>)
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	3301      	adds	r3, #1
 800d450:	4a3c      	ldr	r2, [pc, #240]	@ (800d544 <xTaskIncrementTick+0x158>)
 800d452:	6013      	str	r3, [r2, #0]
 800d454:	f000 fae2 	bl	800da1c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d458:	4b3b      	ldr	r3, [pc, #236]	@ (800d548 <xTaskIncrementTick+0x15c>)
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	693a      	ldr	r2, [r7, #16]
 800d45e:	429a      	cmp	r2, r3
 800d460:	d349      	bcc.n	800d4f6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d462:	4b36      	ldr	r3, [pc, #216]	@ (800d53c <xTaskIncrementTick+0x150>)
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d104      	bne.n	800d476 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d46c:	4b36      	ldr	r3, [pc, #216]	@ (800d548 <xTaskIncrementTick+0x15c>)
 800d46e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d472:	601a      	str	r2, [r3, #0]
					break;
 800d474:	e03f      	b.n	800d4f6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d476:	4b31      	ldr	r3, [pc, #196]	@ (800d53c <xTaskIncrementTick+0x150>)
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	68db      	ldr	r3, [r3, #12]
 800d47c:	68db      	ldr	r3, [r3, #12]
 800d47e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d480:	68bb      	ldr	r3, [r7, #8]
 800d482:	685b      	ldr	r3, [r3, #4]
 800d484:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d486:	693a      	ldr	r2, [r7, #16]
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	429a      	cmp	r2, r3
 800d48c:	d203      	bcs.n	800d496 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d48e:	4a2e      	ldr	r2, [pc, #184]	@ (800d548 <xTaskIncrementTick+0x15c>)
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d494:	e02f      	b.n	800d4f6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d496:	68bb      	ldr	r3, [r7, #8]
 800d498:	3304      	adds	r3, #4
 800d49a:	4618      	mov	r0, r3
 800d49c:	f7fe fc32 	bl	800bd04 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d4a0:	68bb      	ldr	r3, [r7, #8]
 800d4a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d004      	beq.n	800d4b2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d4a8:	68bb      	ldr	r3, [r7, #8]
 800d4aa:	3318      	adds	r3, #24
 800d4ac:	4618      	mov	r0, r3
 800d4ae:	f7fe fc29 	bl	800bd04 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d4b2:	68bb      	ldr	r3, [r7, #8]
 800d4b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d4b6:	4b25      	ldr	r3, [pc, #148]	@ (800d54c <xTaskIncrementTick+0x160>)
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	429a      	cmp	r2, r3
 800d4bc:	d903      	bls.n	800d4c6 <xTaskIncrementTick+0xda>
 800d4be:	68bb      	ldr	r3, [r7, #8]
 800d4c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d4c2:	4a22      	ldr	r2, [pc, #136]	@ (800d54c <xTaskIncrementTick+0x160>)
 800d4c4:	6013      	str	r3, [r2, #0]
 800d4c6:	68bb      	ldr	r3, [r7, #8]
 800d4c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d4ca:	4613      	mov	r3, r2
 800d4cc:	009b      	lsls	r3, r3, #2
 800d4ce:	4413      	add	r3, r2
 800d4d0:	009b      	lsls	r3, r3, #2
 800d4d2:	4a1f      	ldr	r2, [pc, #124]	@ (800d550 <xTaskIncrementTick+0x164>)
 800d4d4:	441a      	add	r2, r3
 800d4d6:	68bb      	ldr	r3, [r7, #8]
 800d4d8:	3304      	adds	r3, #4
 800d4da:	4619      	mov	r1, r3
 800d4dc:	4610      	mov	r0, r2
 800d4de:	f7fe fbb4 	bl	800bc4a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d4e2:	68bb      	ldr	r3, [r7, #8]
 800d4e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d4e6:	4b1b      	ldr	r3, [pc, #108]	@ (800d554 <xTaskIncrementTick+0x168>)
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d4ec:	429a      	cmp	r2, r3
 800d4ee:	d3b8      	bcc.n	800d462 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800d4f0:	2301      	movs	r3, #1
 800d4f2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d4f4:	e7b5      	b.n	800d462 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d4f6:	4b17      	ldr	r3, [pc, #92]	@ (800d554 <xTaskIncrementTick+0x168>)
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d4fc:	4914      	ldr	r1, [pc, #80]	@ (800d550 <xTaskIncrementTick+0x164>)
 800d4fe:	4613      	mov	r3, r2
 800d500:	009b      	lsls	r3, r3, #2
 800d502:	4413      	add	r3, r2
 800d504:	009b      	lsls	r3, r3, #2
 800d506:	440b      	add	r3, r1
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	2b01      	cmp	r3, #1
 800d50c:	d901      	bls.n	800d512 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800d50e:	2301      	movs	r3, #1
 800d510:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d512:	4b11      	ldr	r3, [pc, #68]	@ (800d558 <xTaskIncrementTick+0x16c>)
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	2b00      	cmp	r3, #0
 800d518:	d007      	beq.n	800d52a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800d51a:	2301      	movs	r3, #1
 800d51c:	617b      	str	r3, [r7, #20]
 800d51e:	e004      	b.n	800d52a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d520:	4b0e      	ldr	r3, [pc, #56]	@ (800d55c <xTaskIncrementTick+0x170>)
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	3301      	adds	r3, #1
 800d526:	4a0d      	ldr	r2, [pc, #52]	@ (800d55c <xTaskIncrementTick+0x170>)
 800d528:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d52a:	697b      	ldr	r3, [r7, #20]
}
 800d52c:	4618      	mov	r0, r3
 800d52e:	3718      	adds	r7, #24
 800d530:	46bd      	mov	sp, r7
 800d532:	bd80      	pop	{r7, pc}
 800d534:	200012d4 	.word	0x200012d4
 800d538:	200012b0 	.word	0x200012b0
 800d53c:	20001264 	.word	0x20001264
 800d540:	20001268 	.word	0x20001268
 800d544:	200012c4 	.word	0x200012c4
 800d548:	200012cc 	.word	0x200012cc
 800d54c:	200012b4 	.word	0x200012b4
 800d550:	20000ddc 	.word	0x20000ddc
 800d554:	20000dd8 	.word	0x20000dd8
 800d558:	200012c0 	.word	0x200012c0
 800d55c:	200012bc 	.word	0x200012bc

0800d560 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d560:	b480      	push	{r7}
 800d562:	b085      	sub	sp, #20
 800d564:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d566:	4b2b      	ldr	r3, [pc, #172]	@ (800d614 <vTaskSwitchContext+0xb4>)
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d003      	beq.n	800d576 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d56e:	4b2a      	ldr	r3, [pc, #168]	@ (800d618 <vTaskSwitchContext+0xb8>)
 800d570:	2201      	movs	r2, #1
 800d572:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d574:	e047      	b.n	800d606 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800d576:	4b28      	ldr	r3, [pc, #160]	@ (800d618 <vTaskSwitchContext+0xb8>)
 800d578:	2200      	movs	r2, #0
 800d57a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d57c:	4b27      	ldr	r3, [pc, #156]	@ (800d61c <vTaskSwitchContext+0xbc>)
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	60fb      	str	r3, [r7, #12]
 800d582:	e011      	b.n	800d5a8 <vTaskSwitchContext+0x48>
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	2b00      	cmp	r3, #0
 800d588:	d10b      	bne.n	800d5a2 <vTaskSwitchContext+0x42>
	__asm volatile
 800d58a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d58e:	f383 8811 	msr	BASEPRI, r3
 800d592:	f3bf 8f6f 	isb	sy
 800d596:	f3bf 8f4f 	dsb	sy
 800d59a:	607b      	str	r3, [r7, #4]
}
 800d59c:	bf00      	nop
 800d59e:	bf00      	nop
 800d5a0:	e7fd      	b.n	800d59e <vTaskSwitchContext+0x3e>
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	3b01      	subs	r3, #1
 800d5a6:	60fb      	str	r3, [r7, #12]
 800d5a8:	491d      	ldr	r1, [pc, #116]	@ (800d620 <vTaskSwitchContext+0xc0>)
 800d5aa:	68fa      	ldr	r2, [r7, #12]
 800d5ac:	4613      	mov	r3, r2
 800d5ae:	009b      	lsls	r3, r3, #2
 800d5b0:	4413      	add	r3, r2
 800d5b2:	009b      	lsls	r3, r3, #2
 800d5b4:	440b      	add	r3, r1
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d0e3      	beq.n	800d584 <vTaskSwitchContext+0x24>
 800d5bc:	68fa      	ldr	r2, [r7, #12]
 800d5be:	4613      	mov	r3, r2
 800d5c0:	009b      	lsls	r3, r3, #2
 800d5c2:	4413      	add	r3, r2
 800d5c4:	009b      	lsls	r3, r3, #2
 800d5c6:	4a16      	ldr	r2, [pc, #88]	@ (800d620 <vTaskSwitchContext+0xc0>)
 800d5c8:	4413      	add	r3, r2
 800d5ca:	60bb      	str	r3, [r7, #8]
 800d5cc:	68bb      	ldr	r3, [r7, #8]
 800d5ce:	685b      	ldr	r3, [r3, #4]
 800d5d0:	685a      	ldr	r2, [r3, #4]
 800d5d2:	68bb      	ldr	r3, [r7, #8]
 800d5d4:	605a      	str	r2, [r3, #4]
 800d5d6:	68bb      	ldr	r3, [r7, #8]
 800d5d8:	685a      	ldr	r2, [r3, #4]
 800d5da:	68bb      	ldr	r3, [r7, #8]
 800d5dc:	3308      	adds	r3, #8
 800d5de:	429a      	cmp	r2, r3
 800d5e0:	d104      	bne.n	800d5ec <vTaskSwitchContext+0x8c>
 800d5e2:	68bb      	ldr	r3, [r7, #8]
 800d5e4:	685b      	ldr	r3, [r3, #4]
 800d5e6:	685a      	ldr	r2, [r3, #4]
 800d5e8:	68bb      	ldr	r3, [r7, #8]
 800d5ea:	605a      	str	r2, [r3, #4]
 800d5ec:	68bb      	ldr	r3, [r7, #8]
 800d5ee:	685b      	ldr	r3, [r3, #4]
 800d5f0:	68db      	ldr	r3, [r3, #12]
 800d5f2:	4a0c      	ldr	r2, [pc, #48]	@ (800d624 <vTaskSwitchContext+0xc4>)
 800d5f4:	6013      	str	r3, [r2, #0]
 800d5f6:	4a09      	ldr	r2, [pc, #36]	@ (800d61c <vTaskSwitchContext+0xbc>)
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d5fc:	4b09      	ldr	r3, [pc, #36]	@ (800d624 <vTaskSwitchContext+0xc4>)
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	3354      	adds	r3, #84	@ 0x54
 800d602:	4a09      	ldr	r2, [pc, #36]	@ (800d628 <vTaskSwitchContext+0xc8>)
 800d604:	6013      	str	r3, [r2, #0]
}
 800d606:	bf00      	nop
 800d608:	3714      	adds	r7, #20
 800d60a:	46bd      	mov	sp, r7
 800d60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d610:	4770      	bx	lr
 800d612:	bf00      	nop
 800d614:	200012d4 	.word	0x200012d4
 800d618:	200012c0 	.word	0x200012c0
 800d61c:	200012b4 	.word	0x200012b4
 800d620:	20000ddc 	.word	0x20000ddc
 800d624:	20000dd8 	.word	0x20000dd8
 800d628:	200001b4 	.word	0x200001b4

0800d62c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d62c:	b580      	push	{r7, lr}
 800d62e:	b084      	sub	sp, #16
 800d630:	af00      	add	r7, sp, #0
 800d632:	6078      	str	r0, [r7, #4]
 800d634:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d10b      	bne.n	800d654 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800d63c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d640:	f383 8811 	msr	BASEPRI, r3
 800d644:	f3bf 8f6f 	isb	sy
 800d648:	f3bf 8f4f 	dsb	sy
 800d64c:	60fb      	str	r3, [r7, #12]
}
 800d64e:	bf00      	nop
 800d650:	bf00      	nop
 800d652:	e7fd      	b.n	800d650 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d654:	4b07      	ldr	r3, [pc, #28]	@ (800d674 <vTaskPlaceOnEventList+0x48>)
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	3318      	adds	r3, #24
 800d65a:	4619      	mov	r1, r3
 800d65c:	6878      	ldr	r0, [r7, #4]
 800d65e:	f7fe fb18 	bl	800bc92 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d662:	2101      	movs	r1, #1
 800d664:	6838      	ldr	r0, [r7, #0]
 800d666:	f000 fb97 	bl	800dd98 <prvAddCurrentTaskToDelayedList>
}
 800d66a:	bf00      	nop
 800d66c:	3710      	adds	r7, #16
 800d66e:	46bd      	mov	sp, r7
 800d670:	bd80      	pop	{r7, pc}
 800d672:	bf00      	nop
 800d674:	20000dd8 	.word	0x20000dd8

0800d678 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d678:	b580      	push	{r7, lr}
 800d67a:	b086      	sub	sp, #24
 800d67c:	af00      	add	r7, sp, #0
 800d67e:	60f8      	str	r0, [r7, #12]
 800d680:	60b9      	str	r1, [r7, #8]
 800d682:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	2b00      	cmp	r3, #0
 800d688:	d10b      	bne.n	800d6a2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800d68a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d68e:	f383 8811 	msr	BASEPRI, r3
 800d692:	f3bf 8f6f 	isb	sy
 800d696:	f3bf 8f4f 	dsb	sy
 800d69a:	617b      	str	r3, [r7, #20]
}
 800d69c:	bf00      	nop
 800d69e:	bf00      	nop
 800d6a0:	e7fd      	b.n	800d69e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d6a2:	4b0a      	ldr	r3, [pc, #40]	@ (800d6cc <vTaskPlaceOnEventListRestricted+0x54>)
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	3318      	adds	r3, #24
 800d6a8:	4619      	mov	r1, r3
 800d6aa:	68f8      	ldr	r0, [r7, #12]
 800d6ac:	f7fe facd 	bl	800bc4a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d002      	beq.n	800d6bc <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800d6b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d6ba:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d6bc:	6879      	ldr	r1, [r7, #4]
 800d6be:	68b8      	ldr	r0, [r7, #8]
 800d6c0:	f000 fb6a 	bl	800dd98 <prvAddCurrentTaskToDelayedList>
	}
 800d6c4:	bf00      	nop
 800d6c6:	3718      	adds	r7, #24
 800d6c8:	46bd      	mov	sp, r7
 800d6ca:	bd80      	pop	{r7, pc}
 800d6cc:	20000dd8 	.word	0x20000dd8

0800d6d0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d6d0:	b580      	push	{r7, lr}
 800d6d2:	b086      	sub	sp, #24
 800d6d4:	af00      	add	r7, sp, #0
 800d6d6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	68db      	ldr	r3, [r3, #12]
 800d6dc:	68db      	ldr	r3, [r3, #12]
 800d6de:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d6e0:	693b      	ldr	r3, [r7, #16]
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d10b      	bne.n	800d6fe <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800d6e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6ea:	f383 8811 	msr	BASEPRI, r3
 800d6ee:	f3bf 8f6f 	isb	sy
 800d6f2:	f3bf 8f4f 	dsb	sy
 800d6f6:	60fb      	str	r3, [r7, #12]
}
 800d6f8:	bf00      	nop
 800d6fa:	bf00      	nop
 800d6fc:	e7fd      	b.n	800d6fa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d6fe:	693b      	ldr	r3, [r7, #16]
 800d700:	3318      	adds	r3, #24
 800d702:	4618      	mov	r0, r3
 800d704:	f7fe fafe 	bl	800bd04 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d708:	4b1d      	ldr	r3, [pc, #116]	@ (800d780 <xTaskRemoveFromEventList+0xb0>)
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d11d      	bne.n	800d74c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d710:	693b      	ldr	r3, [r7, #16]
 800d712:	3304      	adds	r3, #4
 800d714:	4618      	mov	r0, r3
 800d716:	f7fe faf5 	bl	800bd04 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d71a:	693b      	ldr	r3, [r7, #16]
 800d71c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d71e:	4b19      	ldr	r3, [pc, #100]	@ (800d784 <xTaskRemoveFromEventList+0xb4>)
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	429a      	cmp	r2, r3
 800d724:	d903      	bls.n	800d72e <xTaskRemoveFromEventList+0x5e>
 800d726:	693b      	ldr	r3, [r7, #16]
 800d728:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d72a:	4a16      	ldr	r2, [pc, #88]	@ (800d784 <xTaskRemoveFromEventList+0xb4>)
 800d72c:	6013      	str	r3, [r2, #0]
 800d72e:	693b      	ldr	r3, [r7, #16]
 800d730:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d732:	4613      	mov	r3, r2
 800d734:	009b      	lsls	r3, r3, #2
 800d736:	4413      	add	r3, r2
 800d738:	009b      	lsls	r3, r3, #2
 800d73a:	4a13      	ldr	r2, [pc, #76]	@ (800d788 <xTaskRemoveFromEventList+0xb8>)
 800d73c:	441a      	add	r2, r3
 800d73e:	693b      	ldr	r3, [r7, #16]
 800d740:	3304      	adds	r3, #4
 800d742:	4619      	mov	r1, r3
 800d744:	4610      	mov	r0, r2
 800d746:	f7fe fa80 	bl	800bc4a <vListInsertEnd>
 800d74a:	e005      	b.n	800d758 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d74c:	693b      	ldr	r3, [r7, #16]
 800d74e:	3318      	adds	r3, #24
 800d750:	4619      	mov	r1, r3
 800d752:	480e      	ldr	r0, [pc, #56]	@ (800d78c <xTaskRemoveFromEventList+0xbc>)
 800d754:	f7fe fa79 	bl	800bc4a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d758:	693b      	ldr	r3, [r7, #16]
 800d75a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d75c:	4b0c      	ldr	r3, [pc, #48]	@ (800d790 <xTaskRemoveFromEventList+0xc0>)
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d762:	429a      	cmp	r2, r3
 800d764:	d905      	bls.n	800d772 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d766:	2301      	movs	r3, #1
 800d768:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d76a:	4b0a      	ldr	r3, [pc, #40]	@ (800d794 <xTaskRemoveFromEventList+0xc4>)
 800d76c:	2201      	movs	r2, #1
 800d76e:	601a      	str	r2, [r3, #0]
 800d770:	e001      	b.n	800d776 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800d772:	2300      	movs	r3, #0
 800d774:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d776:	697b      	ldr	r3, [r7, #20]
}
 800d778:	4618      	mov	r0, r3
 800d77a:	3718      	adds	r7, #24
 800d77c:	46bd      	mov	sp, r7
 800d77e:	bd80      	pop	{r7, pc}
 800d780:	200012d4 	.word	0x200012d4
 800d784:	200012b4 	.word	0x200012b4
 800d788:	20000ddc 	.word	0x20000ddc
 800d78c:	2000126c 	.word	0x2000126c
 800d790:	20000dd8 	.word	0x20000dd8
 800d794:	200012c0 	.word	0x200012c0

0800d798 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d798:	b480      	push	{r7}
 800d79a:	b083      	sub	sp, #12
 800d79c:	af00      	add	r7, sp, #0
 800d79e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d7a0:	4b06      	ldr	r3, [pc, #24]	@ (800d7bc <vTaskInternalSetTimeOutState+0x24>)
 800d7a2:	681a      	ldr	r2, [r3, #0]
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d7a8:	4b05      	ldr	r3, [pc, #20]	@ (800d7c0 <vTaskInternalSetTimeOutState+0x28>)
 800d7aa:	681a      	ldr	r2, [r3, #0]
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	605a      	str	r2, [r3, #4]
}
 800d7b0:	bf00      	nop
 800d7b2:	370c      	adds	r7, #12
 800d7b4:	46bd      	mov	sp, r7
 800d7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ba:	4770      	bx	lr
 800d7bc:	200012c4 	.word	0x200012c4
 800d7c0:	200012b0 	.word	0x200012b0

0800d7c4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d7c4:	b580      	push	{r7, lr}
 800d7c6:	b088      	sub	sp, #32
 800d7c8:	af00      	add	r7, sp, #0
 800d7ca:	6078      	str	r0, [r7, #4]
 800d7cc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d10b      	bne.n	800d7ec <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800d7d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7d8:	f383 8811 	msr	BASEPRI, r3
 800d7dc:	f3bf 8f6f 	isb	sy
 800d7e0:	f3bf 8f4f 	dsb	sy
 800d7e4:	613b      	str	r3, [r7, #16]
}
 800d7e6:	bf00      	nop
 800d7e8:	bf00      	nop
 800d7ea:	e7fd      	b.n	800d7e8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d7ec:	683b      	ldr	r3, [r7, #0]
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d10b      	bne.n	800d80a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800d7f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7f6:	f383 8811 	msr	BASEPRI, r3
 800d7fa:	f3bf 8f6f 	isb	sy
 800d7fe:	f3bf 8f4f 	dsb	sy
 800d802:	60fb      	str	r3, [r7, #12]
}
 800d804:	bf00      	nop
 800d806:	bf00      	nop
 800d808:	e7fd      	b.n	800d806 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800d80a:	f000 ffa5 	bl	800e758 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d80e:	4b1d      	ldr	r3, [pc, #116]	@ (800d884 <xTaskCheckForTimeOut+0xc0>)
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	685b      	ldr	r3, [r3, #4]
 800d818:	69ba      	ldr	r2, [r7, #24]
 800d81a:	1ad3      	subs	r3, r2, r3
 800d81c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d81e:	683b      	ldr	r3, [r7, #0]
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d826:	d102      	bne.n	800d82e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d828:	2300      	movs	r3, #0
 800d82a:	61fb      	str	r3, [r7, #28]
 800d82c:	e023      	b.n	800d876 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	681a      	ldr	r2, [r3, #0]
 800d832:	4b15      	ldr	r3, [pc, #84]	@ (800d888 <xTaskCheckForTimeOut+0xc4>)
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	429a      	cmp	r2, r3
 800d838:	d007      	beq.n	800d84a <xTaskCheckForTimeOut+0x86>
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	685b      	ldr	r3, [r3, #4]
 800d83e:	69ba      	ldr	r2, [r7, #24]
 800d840:	429a      	cmp	r2, r3
 800d842:	d302      	bcc.n	800d84a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d844:	2301      	movs	r3, #1
 800d846:	61fb      	str	r3, [r7, #28]
 800d848:	e015      	b.n	800d876 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d84a:	683b      	ldr	r3, [r7, #0]
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	697a      	ldr	r2, [r7, #20]
 800d850:	429a      	cmp	r2, r3
 800d852:	d20b      	bcs.n	800d86c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d854:	683b      	ldr	r3, [r7, #0]
 800d856:	681a      	ldr	r2, [r3, #0]
 800d858:	697b      	ldr	r3, [r7, #20]
 800d85a:	1ad2      	subs	r2, r2, r3
 800d85c:	683b      	ldr	r3, [r7, #0]
 800d85e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d860:	6878      	ldr	r0, [r7, #4]
 800d862:	f7ff ff99 	bl	800d798 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d866:	2300      	movs	r3, #0
 800d868:	61fb      	str	r3, [r7, #28]
 800d86a:	e004      	b.n	800d876 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800d86c:	683b      	ldr	r3, [r7, #0]
 800d86e:	2200      	movs	r2, #0
 800d870:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d872:	2301      	movs	r3, #1
 800d874:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d876:	f000 ffa1 	bl	800e7bc <vPortExitCritical>

	return xReturn;
 800d87a:	69fb      	ldr	r3, [r7, #28]
}
 800d87c:	4618      	mov	r0, r3
 800d87e:	3720      	adds	r7, #32
 800d880:	46bd      	mov	sp, r7
 800d882:	bd80      	pop	{r7, pc}
 800d884:	200012b0 	.word	0x200012b0
 800d888:	200012c4 	.word	0x200012c4

0800d88c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d88c:	b480      	push	{r7}
 800d88e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d890:	4b03      	ldr	r3, [pc, #12]	@ (800d8a0 <vTaskMissedYield+0x14>)
 800d892:	2201      	movs	r2, #1
 800d894:	601a      	str	r2, [r3, #0]
}
 800d896:	bf00      	nop
 800d898:	46bd      	mov	sp, r7
 800d89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d89e:	4770      	bx	lr
 800d8a0:	200012c0 	.word	0x200012c0

0800d8a4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d8a4:	b580      	push	{r7, lr}
 800d8a6:	b082      	sub	sp, #8
 800d8a8:	af00      	add	r7, sp, #0
 800d8aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d8ac:	f000 f852 	bl	800d954 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d8b0:	4b06      	ldr	r3, [pc, #24]	@ (800d8cc <prvIdleTask+0x28>)
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	2b01      	cmp	r3, #1
 800d8b6:	d9f9      	bls.n	800d8ac <prvIdleTask+0x8>
			{
				taskYIELD();
 800d8b8:	4b05      	ldr	r3, [pc, #20]	@ (800d8d0 <prvIdleTask+0x2c>)
 800d8ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d8be:	601a      	str	r2, [r3, #0]
 800d8c0:	f3bf 8f4f 	dsb	sy
 800d8c4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d8c8:	e7f0      	b.n	800d8ac <prvIdleTask+0x8>
 800d8ca:	bf00      	nop
 800d8cc:	20000ddc 	.word	0x20000ddc
 800d8d0:	e000ed04 	.word	0xe000ed04

0800d8d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d8d4:	b580      	push	{r7, lr}
 800d8d6:	b082      	sub	sp, #8
 800d8d8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d8da:	2300      	movs	r3, #0
 800d8dc:	607b      	str	r3, [r7, #4]
 800d8de:	e00c      	b.n	800d8fa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d8e0:	687a      	ldr	r2, [r7, #4]
 800d8e2:	4613      	mov	r3, r2
 800d8e4:	009b      	lsls	r3, r3, #2
 800d8e6:	4413      	add	r3, r2
 800d8e8:	009b      	lsls	r3, r3, #2
 800d8ea:	4a12      	ldr	r2, [pc, #72]	@ (800d934 <prvInitialiseTaskLists+0x60>)
 800d8ec:	4413      	add	r3, r2
 800d8ee:	4618      	mov	r0, r3
 800d8f0:	f7fe f97e 	bl	800bbf0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	3301      	adds	r3, #1
 800d8f8:	607b      	str	r3, [r7, #4]
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	2b37      	cmp	r3, #55	@ 0x37
 800d8fe:	d9ef      	bls.n	800d8e0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d900:	480d      	ldr	r0, [pc, #52]	@ (800d938 <prvInitialiseTaskLists+0x64>)
 800d902:	f7fe f975 	bl	800bbf0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d906:	480d      	ldr	r0, [pc, #52]	@ (800d93c <prvInitialiseTaskLists+0x68>)
 800d908:	f7fe f972 	bl	800bbf0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d90c:	480c      	ldr	r0, [pc, #48]	@ (800d940 <prvInitialiseTaskLists+0x6c>)
 800d90e:	f7fe f96f 	bl	800bbf0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d912:	480c      	ldr	r0, [pc, #48]	@ (800d944 <prvInitialiseTaskLists+0x70>)
 800d914:	f7fe f96c 	bl	800bbf0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d918:	480b      	ldr	r0, [pc, #44]	@ (800d948 <prvInitialiseTaskLists+0x74>)
 800d91a:	f7fe f969 	bl	800bbf0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d91e:	4b0b      	ldr	r3, [pc, #44]	@ (800d94c <prvInitialiseTaskLists+0x78>)
 800d920:	4a05      	ldr	r2, [pc, #20]	@ (800d938 <prvInitialiseTaskLists+0x64>)
 800d922:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d924:	4b0a      	ldr	r3, [pc, #40]	@ (800d950 <prvInitialiseTaskLists+0x7c>)
 800d926:	4a05      	ldr	r2, [pc, #20]	@ (800d93c <prvInitialiseTaskLists+0x68>)
 800d928:	601a      	str	r2, [r3, #0]
}
 800d92a:	bf00      	nop
 800d92c:	3708      	adds	r7, #8
 800d92e:	46bd      	mov	sp, r7
 800d930:	bd80      	pop	{r7, pc}
 800d932:	bf00      	nop
 800d934:	20000ddc 	.word	0x20000ddc
 800d938:	2000123c 	.word	0x2000123c
 800d93c:	20001250 	.word	0x20001250
 800d940:	2000126c 	.word	0x2000126c
 800d944:	20001280 	.word	0x20001280
 800d948:	20001298 	.word	0x20001298
 800d94c:	20001264 	.word	0x20001264
 800d950:	20001268 	.word	0x20001268

0800d954 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d954:	b580      	push	{r7, lr}
 800d956:	b082      	sub	sp, #8
 800d958:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d95a:	e019      	b.n	800d990 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d95c:	f000 fefc 	bl	800e758 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d960:	4b10      	ldr	r3, [pc, #64]	@ (800d9a4 <prvCheckTasksWaitingTermination+0x50>)
 800d962:	68db      	ldr	r3, [r3, #12]
 800d964:	68db      	ldr	r3, [r3, #12]
 800d966:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	3304      	adds	r3, #4
 800d96c:	4618      	mov	r0, r3
 800d96e:	f7fe f9c9 	bl	800bd04 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d972:	4b0d      	ldr	r3, [pc, #52]	@ (800d9a8 <prvCheckTasksWaitingTermination+0x54>)
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	3b01      	subs	r3, #1
 800d978:	4a0b      	ldr	r2, [pc, #44]	@ (800d9a8 <prvCheckTasksWaitingTermination+0x54>)
 800d97a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d97c:	4b0b      	ldr	r3, [pc, #44]	@ (800d9ac <prvCheckTasksWaitingTermination+0x58>)
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	3b01      	subs	r3, #1
 800d982:	4a0a      	ldr	r2, [pc, #40]	@ (800d9ac <prvCheckTasksWaitingTermination+0x58>)
 800d984:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d986:	f000 ff19 	bl	800e7bc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d98a:	6878      	ldr	r0, [r7, #4]
 800d98c:	f000 f810 	bl	800d9b0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d990:	4b06      	ldr	r3, [pc, #24]	@ (800d9ac <prvCheckTasksWaitingTermination+0x58>)
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	2b00      	cmp	r3, #0
 800d996:	d1e1      	bne.n	800d95c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d998:	bf00      	nop
 800d99a:	bf00      	nop
 800d99c:	3708      	adds	r7, #8
 800d99e:	46bd      	mov	sp, r7
 800d9a0:	bd80      	pop	{r7, pc}
 800d9a2:	bf00      	nop
 800d9a4:	20001280 	.word	0x20001280
 800d9a8:	200012ac 	.word	0x200012ac
 800d9ac:	20001294 	.word	0x20001294

0800d9b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d9b0:	b580      	push	{r7, lr}
 800d9b2:	b084      	sub	sp, #16
 800d9b4:	af00      	add	r7, sp, #0
 800d9b6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	3354      	adds	r3, #84	@ 0x54
 800d9bc:	4618      	mov	r0, r3
 800d9be:	f002 fc45 	bl	801024c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d108      	bne.n	800d9de <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d9d0:	4618      	mov	r0, r3
 800d9d2:	f001 f8b1 	bl	800eb38 <vPortFree>
				vPortFree( pxTCB );
 800d9d6:	6878      	ldr	r0, [r7, #4]
 800d9d8:	f001 f8ae 	bl	800eb38 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d9dc:	e019      	b.n	800da12 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800d9e4:	2b01      	cmp	r3, #1
 800d9e6:	d103      	bne.n	800d9f0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800d9e8:	6878      	ldr	r0, [r7, #4]
 800d9ea:	f001 f8a5 	bl	800eb38 <vPortFree>
	}
 800d9ee:	e010      	b.n	800da12 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800d9f6:	2b02      	cmp	r3, #2
 800d9f8:	d00b      	beq.n	800da12 <prvDeleteTCB+0x62>
	__asm volatile
 800d9fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9fe:	f383 8811 	msr	BASEPRI, r3
 800da02:	f3bf 8f6f 	isb	sy
 800da06:	f3bf 8f4f 	dsb	sy
 800da0a:	60fb      	str	r3, [r7, #12]
}
 800da0c:	bf00      	nop
 800da0e:	bf00      	nop
 800da10:	e7fd      	b.n	800da0e <prvDeleteTCB+0x5e>
	}
 800da12:	bf00      	nop
 800da14:	3710      	adds	r7, #16
 800da16:	46bd      	mov	sp, r7
 800da18:	bd80      	pop	{r7, pc}
	...

0800da1c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800da1c:	b480      	push	{r7}
 800da1e:	b083      	sub	sp, #12
 800da20:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800da22:	4b0c      	ldr	r3, [pc, #48]	@ (800da54 <prvResetNextTaskUnblockTime+0x38>)
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d104      	bne.n	800da36 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800da2c:	4b0a      	ldr	r3, [pc, #40]	@ (800da58 <prvResetNextTaskUnblockTime+0x3c>)
 800da2e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800da32:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800da34:	e008      	b.n	800da48 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800da36:	4b07      	ldr	r3, [pc, #28]	@ (800da54 <prvResetNextTaskUnblockTime+0x38>)
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	68db      	ldr	r3, [r3, #12]
 800da3c:	68db      	ldr	r3, [r3, #12]
 800da3e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	685b      	ldr	r3, [r3, #4]
 800da44:	4a04      	ldr	r2, [pc, #16]	@ (800da58 <prvResetNextTaskUnblockTime+0x3c>)
 800da46:	6013      	str	r3, [r2, #0]
}
 800da48:	bf00      	nop
 800da4a:	370c      	adds	r7, #12
 800da4c:	46bd      	mov	sp, r7
 800da4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da52:	4770      	bx	lr
 800da54:	20001264 	.word	0x20001264
 800da58:	200012cc 	.word	0x200012cc

0800da5c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800da5c:	b480      	push	{r7}
 800da5e:	b083      	sub	sp, #12
 800da60:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800da62:	4b05      	ldr	r3, [pc, #20]	@ (800da78 <xTaskGetCurrentTaskHandle+0x1c>)
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	607b      	str	r3, [r7, #4]

		return xReturn;
 800da68:	687b      	ldr	r3, [r7, #4]
	}
 800da6a:	4618      	mov	r0, r3
 800da6c:	370c      	adds	r7, #12
 800da6e:	46bd      	mov	sp, r7
 800da70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da74:	4770      	bx	lr
 800da76:	bf00      	nop
 800da78:	20000dd8 	.word	0x20000dd8

0800da7c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800da7c:	b480      	push	{r7}
 800da7e:	b083      	sub	sp, #12
 800da80:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800da82:	4b0b      	ldr	r3, [pc, #44]	@ (800dab0 <xTaskGetSchedulerState+0x34>)
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	2b00      	cmp	r3, #0
 800da88:	d102      	bne.n	800da90 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800da8a:	2301      	movs	r3, #1
 800da8c:	607b      	str	r3, [r7, #4]
 800da8e:	e008      	b.n	800daa2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800da90:	4b08      	ldr	r3, [pc, #32]	@ (800dab4 <xTaskGetSchedulerState+0x38>)
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	2b00      	cmp	r3, #0
 800da96:	d102      	bne.n	800da9e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800da98:	2302      	movs	r3, #2
 800da9a:	607b      	str	r3, [r7, #4]
 800da9c:	e001      	b.n	800daa2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800da9e:	2300      	movs	r3, #0
 800daa0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800daa2:	687b      	ldr	r3, [r7, #4]
	}
 800daa4:	4618      	mov	r0, r3
 800daa6:	370c      	adds	r7, #12
 800daa8:	46bd      	mov	sp, r7
 800daaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daae:	4770      	bx	lr
 800dab0:	200012b8 	.word	0x200012b8
 800dab4:	200012d4 	.word	0x200012d4

0800dab8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800dab8:	b580      	push	{r7, lr}
 800daba:	b084      	sub	sp, #16
 800dabc:	af00      	add	r7, sp, #0
 800dabe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800dac4:	2300      	movs	r3, #0
 800dac6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d051      	beq.n	800db72 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800dace:	68bb      	ldr	r3, [r7, #8]
 800dad0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dad2:	4b2a      	ldr	r3, [pc, #168]	@ (800db7c <xTaskPriorityInherit+0xc4>)
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dad8:	429a      	cmp	r2, r3
 800dada:	d241      	bcs.n	800db60 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800dadc:	68bb      	ldr	r3, [r7, #8]
 800dade:	699b      	ldr	r3, [r3, #24]
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	db06      	blt.n	800daf2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dae4:	4b25      	ldr	r3, [pc, #148]	@ (800db7c <xTaskPriorityInherit+0xc4>)
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800daea:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800daee:	68bb      	ldr	r3, [r7, #8]
 800daf0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800daf2:	68bb      	ldr	r3, [r7, #8]
 800daf4:	6959      	ldr	r1, [r3, #20]
 800daf6:	68bb      	ldr	r3, [r7, #8]
 800daf8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dafa:	4613      	mov	r3, r2
 800dafc:	009b      	lsls	r3, r3, #2
 800dafe:	4413      	add	r3, r2
 800db00:	009b      	lsls	r3, r3, #2
 800db02:	4a1f      	ldr	r2, [pc, #124]	@ (800db80 <xTaskPriorityInherit+0xc8>)
 800db04:	4413      	add	r3, r2
 800db06:	4299      	cmp	r1, r3
 800db08:	d122      	bne.n	800db50 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800db0a:	68bb      	ldr	r3, [r7, #8]
 800db0c:	3304      	adds	r3, #4
 800db0e:	4618      	mov	r0, r3
 800db10:	f7fe f8f8 	bl	800bd04 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800db14:	4b19      	ldr	r3, [pc, #100]	@ (800db7c <xTaskPriorityInherit+0xc4>)
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800db1a:	68bb      	ldr	r3, [r7, #8]
 800db1c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800db1e:	68bb      	ldr	r3, [r7, #8]
 800db20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800db22:	4b18      	ldr	r3, [pc, #96]	@ (800db84 <xTaskPriorityInherit+0xcc>)
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	429a      	cmp	r2, r3
 800db28:	d903      	bls.n	800db32 <xTaskPriorityInherit+0x7a>
 800db2a:	68bb      	ldr	r3, [r7, #8]
 800db2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db2e:	4a15      	ldr	r2, [pc, #84]	@ (800db84 <xTaskPriorityInherit+0xcc>)
 800db30:	6013      	str	r3, [r2, #0]
 800db32:	68bb      	ldr	r3, [r7, #8]
 800db34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800db36:	4613      	mov	r3, r2
 800db38:	009b      	lsls	r3, r3, #2
 800db3a:	4413      	add	r3, r2
 800db3c:	009b      	lsls	r3, r3, #2
 800db3e:	4a10      	ldr	r2, [pc, #64]	@ (800db80 <xTaskPriorityInherit+0xc8>)
 800db40:	441a      	add	r2, r3
 800db42:	68bb      	ldr	r3, [r7, #8]
 800db44:	3304      	adds	r3, #4
 800db46:	4619      	mov	r1, r3
 800db48:	4610      	mov	r0, r2
 800db4a:	f7fe f87e 	bl	800bc4a <vListInsertEnd>
 800db4e:	e004      	b.n	800db5a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800db50:	4b0a      	ldr	r3, [pc, #40]	@ (800db7c <xTaskPriorityInherit+0xc4>)
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800db56:	68bb      	ldr	r3, [r7, #8]
 800db58:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800db5a:	2301      	movs	r3, #1
 800db5c:	60fb      	str	r3, [r7, #12]
 800db5e:	e008      	b.n	800db72 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800db60:	68bb      	ldr	r3, [r7, #8]
 800db62:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800db64:	4b05      	ldr	r3, [pc, #20]	@ (800db7c <xTaskPriorityInherit+0xc4>)
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db6a:	429a      	cmp	r2, r3
 800db6c:	d201      	bcs.n	800db72 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800db6e:	2301      	movs	r3, #1
 800db70:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800db72:	68fb      	ldr	r3, [r7, #12]
	}
 800db74:	4618      	mov	r0, r3
 800db76:	3710      	adds	r7, #16
 800db78:	46bd      	mov	sp, r7
 800db7a:	bd80      	pop	{r7, pc}
 800db7c:	20000dd8 	.word	0x20000dd8
 800db80:	20000ddc 	.word	0x20000ddc
 800db84:	200012b4 	.word	0x200012b4

0800db88 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800db88:	b580      	push	{r7, lr}
 800db8a:	b086      	sub	sp, #24
 800db8c:	af00      	add	r7, sp, #0
 800db8e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800db94:	2300      	movs	r3, #0
 800db96:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d058      	beq.n	800dc50 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800db9e:	4b2f      	ldr	r3, [pc, #188]	@ (800dc5c <xTaskPriorityDisinherit+0xd4>)
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	693a      	ldr	r2, [r7, #16]
 800dba4:	429a      	cmp	r2, r3
 800dba6:	d00b      	beq.n	800dbc0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800dba8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbac:	f383 8811 	msr	BASEPRI, r3
 800dbb0:	f3bf 8f6f 	isb	sy
 800dbb4:	f3bf 8f4f 	dsb	sy
 800dbb8:	60fb      	str	r3, [r7, #12]
}
 800dbba:	bf00      	nop
 800dbbc:	bf00      	nop
 800dbbe:	e7fd      	b.n	800dbbc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800dbc0:	693b      	ldr	r3, [r7, #16]
 800dbc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d10b      	bne.n	800dbe0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800dbc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbcc:	f383 8811 	msr	BASEPRI, r3
 800dbd0:	f3bf 8f6f 	isb	sy
 800dbd4:	f3bf 8f4f 	dsb	sy
 800dbd8:	60bb      	str	r3, [r7, #8]
}
 800dbda:	bf00      	nop
 800dbdc:	bf00      	nop
 800dbde:	e7fd      	b.n	800dbdc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800dbe0:	693b      	ldr	r3, [r7, #16]
 800dbe2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dbe4:	1e5a      	subs	r2, r3, #1
 800dbe6:	693b      	ldr	r3, [r7, #16]
 800dbe8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800dbea:	693b      	ldr	r3, [r7, #16]
 800dbec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dbee:	693b      	ldr	r3, [r7, #16]
 800dbf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dbf2:	429a      	cmp	r2, r3
 800dbf4:	d02c      	beq.n	800dc50 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800dbf6:	693b      	ldr	r3, [r7, #16]
 800dbf8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d128      	bne.n	800dc50 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dbfe:	693b      	ldr	r3, [r7, #16]
 800dc00:	3304      	adds	r3, #4
 800dc02:	4618      	mov	r0, r3
 800dc04:	f7fe f87e 	bl	800bd04 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800dc08:	693b      	ldr	r3, [r7, #16]
 800dc0a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800dc0c:	693b      	ldr	r3, [r7, #16]
 800dc0e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dc10:	693b      	ldr	r3, [r7, #16]
 800dc12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc14:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800dc18:	693b      	ldr	r3, [r7, #16]
 800dc1a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800dc1c:	693b      	ldr	r3, [r7, #16]
 800dc1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dc20:	4b0f      	ldr	r3, [pc, #60]	@ (800dc60 <xTaskPriorityDisinherit+0xd8>)
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	429a      	cmp	r2, r3
 800dc26:	d903      	bls.n	800dc30 <xTaskPriorityDisinherit+0xa8>
 800dc28:	693b      	ldr	r3, [r7, #16]
 800dc2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc2c:	4a0c      	ldr	r2, [pc, #48]	@ (800dc60 <xTaskPriorityDisinherit+0xd8>)
 800dc2e:	6013      	str	r3, [r2, #0]
 800dc30:	693b      	ldr	r3, [r7, #16]
 800dc32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dc34:	4613      	mov	r3, r2
 800dc36:	009b      	lsls	r3, r3, #2
 800dc38:	4413      	add	r3, r2
 800dc3a:	009b      	lsls	r3, r3, #2
 800dc3c:	4a09      	ldr	r2, [pc, #36]	@ (800dc64 <xTaskPriorityDisinherit+0xdc>)
 800dc3e:	441a      	add	r2, r3
 800dc40:	693b      	ldr	r3, [r7, #16]
 800dc42:	3304      	adds	r3, #4
 800dc44:	4619      	mov	r1, r3
 800dc46:	4610      	mov	r0, r2
 800dc48:	f7fd ffff 	bl	800bc4a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800dc4c:	2301      	movs	r3, #1
 800dc4e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800dc50:	697b      	ldr	r3, [r7, #20]
	}
 800dc52:	4618      	mov	r0, r3
 800dc54:	3718      	adds	r7, #24
 800dc56:	46bd      	mov	sp, r7
 800dc58:	bd80      	pop	{r7, pc}
 800dc5a:	bf00      	nop
 800dc5c:	20000dd8 	.word	0x20000dd8
 800dc60:	200012b4 	.word	0x200012b4
 800dc64:	20000ddc 	.word	0x20000ddc

0800dc68 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800dc68:	b580      	push	{r7, lr}
 800dc6a:	b088      	sub	sp, #32
 800dc6c:	af00      	add	r7, sp, #0
 800dc6e:	6078      	str	r0, [r7, #4]
 800dc70:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800dc76:	2301      	movs	r3, #1
 800dc78:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d06c      	beq.n	800dd5a <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800dc80:	69bb      	ldr	r3, [r7, #24]
 800dc82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d10b      	bne.n	800dca0 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800dc88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc8c:	f383 8811 	msr	BASEPRI, r3
 800dc90:	f3bf 8f6f 	isb	sy
 800dc94:	f3bf 8f4f 	dsb	sy
 800dc98:	60fb      	str	r3, [r7, #12]
}
 800dc9a:	bf00      	nop
 800dc9c:	bf00      	nop
 800dc9e:	e7fd      	b.n	800dc9c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800dca0:	69bb      	ldr	r3, [r7, #24]
 800dca2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dca4:	683a      	ldr	r2, [r7, #0]
 800dca6:	429a      	cmp	r2, r3
 800dca8:	d902      	bls.n	800dcb0 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800dcaa:	683b      	ldr	r3, [r7, #0]
 800dcac:	61fb      	str	r3, [r7, #28]
 800dcae:	e002      	b.n	800dcb6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800dcb0:	69bb      	ldr	r3, [r7, #24]
 800dcb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dcb4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800dcb6:	69bb      	ldr	r3, [r7, #24]
 800dcb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dcba:	69fa      	ldr	r2, [r7, #28]
 800dcbc:	429a      	cmp	r2, r3
 800dcbe:	d04c      	beq.n	800dd5a <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800dcc0:	69bb      	ldr	r3, [r7, #24]
 800dcc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dcc4:	697a      	ldr	r2, [r7, #20]
 800dcc6:	429a      	cmp	r2, r3
 800dcc8:	d147      	bne.n	800dd5a <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800dcca:	4b26      	ldr	r3, [pc, #152]	@ (800dd64 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	69ba      	ldr	r2, [r7, #24]
 800dcd0:	429a      	cmp	r2, r3
 800dcd2:	d10b      	bne.n	800dcec <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800dcd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dcd8:	f383 8811 	msr	BASEPRI, r3
 800dcdc:	f3bf 8f6f 	isb	sy
 800dce0:	f3bf 8f4f 	dsb	sy
 800dce4:	60bb      	str	r3, [r7, #8]
}
 800dce6:	bf00      	nop
 800dce8:	bf00      	nop
 800dcea:	e7fd      	b.n	800dce8 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800dcec:	69bb      	ldr	r3, [r7, #24]
 800dcee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dcf0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800dcf2:	69bb      	ldr	r3, [r7, #24]
 800dcf4:	69fa      	ldr	r2, [r7, #28]
 800dcf6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800dcf8:	69bb      	ldr	r3, [r7, #24]
 800dcfa:	699b      	ldr	r3, [r3, #24]
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	db04      	blt.n	800dd0a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dd00:	69fb      	ldr	r3, [r7, #28]
 800dd02:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800dd06:	69bb      	ldr	r3, [r7, #24]
 800dd08:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800dd0a:	69bb      	ldr	r3, [r7, #24]
 800dd0c:	6959      	ldr	r1, [r3, #20]
 800dd0e:	693a      	ldr	r2, [r7, #16]
 800dd10:	4613      	mov	r3, r2
 800dd12:	009b      	lsls	r3, r3, #2
 800dd14:	4413      	add	r3, r2
 800dd16:	009b      	lsls	r3, r3, #2
 800dd18:	4a13      	ldr	r2, [pc, #76]	@ (800dd68 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800dd1a:	4413      	add	r3, r2
 800dd1c:	4299      	cmp	r1, r3
 800dd1e:	d11c      	bne.n	800dd5a <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dd20:	69bb      	ldr	r3, [r7, #24]
 800dd22:	3304      	adds	r3, #4
 800dd24:	4618      	mov	r0, r3
 800dd26:	f7fd ffed 	bl	800bd04 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800dd2a:	69bb      	ldr	r3, [r7, #24]
 800dd2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dd2e:	4b0f      	ldr	r3, [pc, #60]	@ (800dd6c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	429a      	cmp	r2, r3
 800dd34:	d903      	bls.n	800dd3e <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800dd36:	69bb      	ldr	r3, [r7, #24]
 800dd38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd3a:	4a0c      	ldr	r2, [pc, #48]	@ (800dd6c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800dd3c:	6013      	str	r3, [r2, #0]
 800dd3e:	69bb      	ldr	r3, [r7, #24]
 800dd40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dd42:	4613      	mov	r3, r2
 800dd44:	009b      	lsls	r3, r3, #2
 800dd46:	4413      	add	r3, r2
 800dd48:	009b      	lsls	r3, r3, #2
 800dd4a:	4a07      	ldr	r2, [pc, #28]	@ (800dd68 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800dd4c:	441a      	add	r2, r3
 800dd4e:	69bb      	ldr	r3, [r7, #24]
 800dd50:	3304      	adds	r3, #4
 800dd52:	4619      	mov	r1, r3
 800dd54:	4610      	mov	r0, r2
 800dd56:	f7fd ff78 	bl	800bc4a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800dd5a:	bf00      	nop
 800dd5c:	3720      	adds	r7, #32
 800dd5e:	46bd      	mov	sp, r7
 800dd60:	bd80      	pop	{r7, pc}
 800dd62:	bf00      	nop
 800dd64:	20000dd8 	.word	0x20000dd8
 800dd68:	20000ddc 	.word	0x20000ddc
 800dd6c:	200012b4 	.word	0x200012b4

0800dd70 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800dd70:	b480      	push	{r7}
 800dd72:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800dd74:	4b07      	ldr	r3, [pc, #28]	@ (800dd94 <pvTaskIncrementMutexHeldCount+0x24>)
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d004      	beq.n	800dd86 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800dd7c:	4b05      	ldr	r3, [pc, #20]	@ (800dd94 <pvTaskIncrementMutexHeldCount+0x24>)
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800dd82:	3201      	adds	r2, #1
 800dd84:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800dd86:	4b03      	ldr	r3, [pc, #12]	@ (800dd94 <pvTaskIncrementMutexHeldCount+0x24>)
 800dd88:	681b      	ldr	r3, [r3, #0]
	}
 800dd8a:	4618      	mov	r0, r3
 800dd8c:	46bd      	mov	sp, r7
 800dd8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd92:	4770      	bx	lr
 800dd94:	20000dd8 	.word	0x20000dd8

0800dd98 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800dd98:	b580      	push	{r7, lr}
 800dd9a:	b084      	sub	sp, #16
 800dd9c:	af00      	add	r7, sp, #0
 800dd9e:	6078      	str	r0, [r7, #4]
 800dda0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800dda2:	4b21      	ldr	r3, [pc, #132]	@ (800de28 <prvAddCurrentTaskToDelayedList+0x90>)
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dda8:	4b20      	ldr	r3, [pc, #128]	@ (800de2c <prvAddCurrentTaskToDelayedList+0x94>)
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	3304      	adds	r3, #4
 800ddae:	4618      	mov	r0, r3
 800ddb0:	f7fd ffa8 	bl	800bd04 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ddba:	d10a      	bne.n	800ddd2 <prvAddCurrentTaskToDelayedList+0x3a>
 800ddbc:	683b      	ldr	r3, [r7, #0]
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d007      	beq.n	800ddd2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ddc2:	4b1a      	ldr	r3, [pc, #104]	@ (800de2c <prvAddCurrentTaskToDelayedList+0x94>)
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	3304      	adds	r3, #4
 800ddc8:	4619      	mov	r1, r3
 800ddca:	4819      	ldr	r0, [pc, #100]	@ (800de30 <prvAddCurrentTaskToDelayedList+0x98>)
 800ddcc:	f7fd ff3d 	bl	800bc4a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ddd0:	e026      	b.n	800de20 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ddd2:	68fa      	ldr	r2, [r7, #12]
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	4413      	add	r3, r2
 800ddd8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ddda:	4b14      	ldr	r3, [pc, #80]	@ (800de2c <prvAddCurrentTaskToDelayedList+0x94>)
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	68ba      	ldr	r2, [r7, #8]
 800dde0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800dde2:	68ba      	ldr	r2, [r7, #8]
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	429a      	cmp	r2, r3
 800dde8:	d209      	bcs.n	800ddfe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ddea:	4b12      	ldr	r3, [pc, #72]	@ (800de34 <prvAddCurrentTaskToDelayedList+0x9c>)
 800ddec:	681a      	ldr	r2, [r3, #0]
 800ddee:	4b0f      	ldr	r3, [pc, #60]	@ (800de2c <prvAddCurrentTaskToDelayedList+0x94>)
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	3304      	adds	r3, #4
 800ddf4:	4619      	mov	r1, r3
 800ddf6:	4610      	mov	r0, r2
 800ddf8:	f7fd ff4b 	bl	800bc92 <vListInsert>
}
 800ddfc:	e010      	b.n	800de20 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ddfe:	4b0e      	ldr	r3, [pc, #56]	@ (800de38 <prvAddCurrentTaskToDelayedList+0xa0>)
 800de00:	681a      	ldr	r2, [r3, #0]
 800de02:	4b0a      	ldr	r3, [pc, #40]	@ (800de2c <prvAddCurrentTaskToDelayedList+0x94>)
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	3304      	adds	r3, #4
 800de08:	4619      	mov	r1, r3
 800de0a:	4610      	mov	r0, r2
 800de0c:	f7fd ff41 	bl	800bc92 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800de10:	4b0a      	ldr	r3, [pc, #40]	@ (800de3c <prvAddCurrentTaskToDelayedList+0xa4>)
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	68ba      	ldr	r2, [r7, #8]
 800de16:	429a      	cmp	r2, r3
 800de18:	d202      	bcs.n	800de20 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800de1a:	4a08      	ldr	r2, [pc, #32]	@ (800de3c <prvAddCurrentTaskToDelayedList+0xa4>)
 800de1c:	68bb      	ldr	r3, [r7, #8]
 800de1e:	6013      	str	r3, [r2, #0]
}
 800de20:	bf00      	nop
 800de22:	3710      	adds	r7, #16
 800de24:	46bd      	mov	sp, r7
 800de26:	bd80      	pop	{r7, pc}
 800de28:	200012b0 	.word	0x200012b0
 800de2c:	20000dd8 	.word	0x20000dd8
 800de30:	20001298 	.word	0x20001298
 800de34:	20001268 	.word	0x20001268
 800de38:	20001264 	.word	0x20001264
 800de3c:	200012cc 	.word	0x200012cc

0800de40 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800de40:	b580      	push	{r7, lr}
 800de42:	b08a      	sub	sp, #40	@ 0x28
 800de44:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800de46:	2300      	movs	r3, #0
 800de48:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800de4a:	f000 fb13 	bl	800e474 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800de4e:	4b1d      	ldr	r3, [pc, #116]	@ (800dec4 <xTimerCreateTimerTask+0x84>)
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	2b00      	cmp	r3, #0
 800de54:	d021      	beq.n	800de9a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800de56:	2300      	movs	r3, #0
 800de58:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800de5a:	2300      	movs	r3, #0
 800de5c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800de5e:	1d3a      	adds	r2, r7, #4
 800de60:	f107 0108 	add.w	r1, r7, #8
 800de64:	f107 030c 	add.w	r3, r7, #12
 800de68:	4618      	mov	r0, r3
 800de6a:	f7fd fea7 	bl	800bbbc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800de6e:	6879      	ldr	r1, [r7, #4]
 800de70:	68bb      	ldr	r3, [r7, #8]
 800de72:	68fa      	ldr	r2, [r7, #12]
 800de74:	9202      	str	r2, [sp, #8]
 800de76:	9301      	str	r3, [sp, #4]
 800de78:	2302      	movs	r3, #2
 800de7a:	9300      	str	r3, [sp, #0]
 800de7c:	2300      	movs	r3, #0
 800de7e:	460a      	mov	r2, r1
 800de80:	4911      	ldr	r1, [pc, #68]	@ (800dec8 <xTimerCreateTimerTask+0x88>)
 800de82:	4812      	ldr	r0, [pc, #72]	@ (800decc <xTimerCreateTimerTask+0x8c>)
 800de84:	f7fe ff00 	bl	800cc88 <xTaskCreateStatic>
 800de88:	4603      	mov	r3, r0
 800de8a:	4a11      	ldr	r2, [pc, #68]	@ (800ded0 <xTimerCreateTimerTask+0x90>)
 800de8c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800de8e:	4b10      	ldr	r3, [pc, #64]	@ (800ded0 <xTimerCreateTimerTask+0x90>)
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	2b00      	cmp	r3, #0
 800de94:	d001      	beq.n	800de9a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800de96:	2301      	movs	r3, #1
 800de98:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800de9a:	697b      	ldr	r3, [r7, #20]
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d10b      	bne.n	800deb8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800dea0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dea4:	f383 8811 	msr	BASEPRI, r3
 800dea8:	f3bf 8f6f 	isb	sy
 800deac:	f3bf 8f4f 	dsb	sy
 800deb0:	613b      	str	r3, [r7, #16]
}
 800deb2:	bf00      	nop
 800deb4:	bf00      	nop
 800deb6:	e7fd      	b.n	800deb4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800deb8:	697b      	ldr	r3, [r7, #20]
}
 800deba:	4618      	mov	r0, r3
 800debc:	3718      	adds	r7, #24
 800debe:	46bd      	mov	sp, r7
 800dec0:	bd80      	pop	{r7, pc}
 800dec2:	bf00      	nop
 800dec4:	20001308 	.word	0x20001308
 800dec8:	08013414 	.word	0x08013414
 800decc:	0800e00d 	.word	0x0800e00d
 800ded0:	2000130c 	.word	0x2000130c

0800ded4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ded4:	b580      	push	{r7, lr}
 800ded6:	b08a      	sub	sp, #40	@ 0x28
 800ded8:	af00      	add	r7, sp, #0
 800deda:	60f8      	str	r0, [r7, #12]
 800dedc:	60b9      	str	r1, [r7, #8]
 800dede:	607a      	str	r2, [r7, #4]
 800dee0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800dee2:	2300      	movs	r3, #0
 800dee4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d10b      	bne.n	800df04 <xTimerGenericCommand+0x30>
	__asm volatile
 800deec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800def0:	f383 8811 	msr	BASEPRI, r3
 800def4:	f3bf 8f6f 	isb	sy
 800def8:	f3bf 8f4f 	dsb	sy
 800defc:	623b      	str	r3, [r7, #32]
}
 800defe:	bf00      	nop
 800df00:	bf00      	nop
 800df02:	e7fd      	b.n	800df00 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800df04:	4b19      	ldr	r3, [pc, #100]	@ (800df6c <xTimerGenericCommand+0x98>)
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d02a      	beq.n	800df62 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800df0c:	68bb      	ldr	r3, [r7, #8]
 800df0e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800df18:	68bb      	ldr	r3, [r7, #8]
 800df1a:	2b05      	cmp	r3, #5
 800df1c:	dc18      	bgt.n	800df50 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800df1e:	f7ff fdad 	bl	800da7c <xTaskGetSchedulerState>
 800df22:	4603      	mov	r3, r0
 800df24:	2b02      	cmp	r3, #2
 800df26:	d109      	bne.n	800df3c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800df28:	4b10      	ldr	r3, [pc, #64]	@ (800df6c <xTimerGenericCommand+0x98>)
 800df2a:	6818      	ldr	r0, [r3, #0]
 800df2c:	f107 0110 	add.w	r1, r7, #16
 800df30:	2300      	movs	r3, #0
 800df32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800df34:	f7fe f90e 	bl	800c154 <xQueueGenericSend>
 800df38:	6278      	str	r0, [r7, #36]	@ 0x24
 800df3a:	e012      	b.n	800df62 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800df3c:	4b0b      	ldr	r3, [pc, #44]	@ (800df6c <xTimerGenericCommand+0x98>)
 800df3e:	6818      	ldr	r0, [r3, #0]
 800df40:	f107 0110 	add.w	r1, r7, #16
 800df44:	2300      	movs	r3, #0
 800df46:	2200      	movs	r2, #0
 800df48:	f7fe f904 	bl	800c154 <xQueueGenericSend>
 800df4c:	6278      	str	r0, [r7, #36]	@ 0x24
 800df4e:	e008      	b.n	800df62 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800df50:	4b06      	ldr	r3, [pc, #24]	@ (800df6c <xTimerGenericCommand+0x98>)
 800df52:	6818      	ldr	r0, [r3, #0]
 800df54:	f107 0110 	add.w	r1, r7, #16
 800df58:	2300      	movs	r3, #0
 800df5a:	683a      	ldr	r2, [r7, #0]
 800df5c:	f7fe f9fc 	bl	800c358 <xQueueGenericSendFromISR>
 800df60:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800df62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800df64:	4618      	mov	r0, r3
 800df66:	3728      	adds	r7, #40	@ 0x28
 800df68:	46bd      	mov	sp, r7
 800df6a:	bd80      	pop	{r7, pc}
 800df6c:	20001308 	.word	0x20001308

0800df70 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800df70:	b580      	push	{r7, lr}
 800df72:	b088      	sub	sp, #32
 800df74:	af02      	add	r7, sp, #8
 800df76:	6078      	str	r0, [r7, #4]
 800df78:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800df7a:	4b23      	ldr	r3, [pc, #140]	@ (800e008 <prvProcessExpiredTimer+0x98>)
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	68db      	ldr	r3, [r3, #12]
 800df80:	68db      	ldr	r3, [r3, #12]
 800df82:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800df84:	697b      	ldr	r3, [r7, #20]
 800df86:	3304      	adds	r3, #4
 800df88:	4618      	mov	r0, r3
 800df8a:	f7fd febb 	bl	800bd04 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800df8e:	697b      	ldr	r3, [r7, #20]
 800df90:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800df94:	f003 0304 	and.w	r3, r3, #4
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d023      	beq.n	800dfe4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800df9c:	697b      	ldr	r3, [r7, #20]
 800df9e:	699a      	ldr	r2, [r3, #24]
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	18d1      	adds	r1, r2, r3
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	683a      	ldr	r2, [r7, #0]
 800dfa8:	6978      	ldr	r0, [r7, #20]
 800dfaa:	f000 f8d5 	bl	800e158 <prvInsertTimerInActiveList>
 800dfae:	4603      	mov	r3, r0
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d020      	beq.n	800dff6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800dfb4:	2300      	movs	r3, #0
 800dfb6:	9300      	str	r3, [sp, #0]
 800dfb8:	2300      	movs	r3, #0
 800dfba:	687a      	ldr	r2, [r7, #4]
 800dfbc:	2100      	movs	r1, #0
 800dfbe:	6978      	ldr	r0, [r7, #20]
 800dfc0:	f7ff ff88 	bl	800ded4 <xTimerGenericCommand>
 800dfc4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800dfc6:	693b      	ldr	r3, [r7, #16]
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d114      	bne.n	800dff6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800dfcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfd0:	f383 8811 	msr	BASEPRI, r3
 800dfd4:	f3bf 8f6f 	isb	sy
 800dfd8:	f3bf 8f4f 	dsb	sy
 800dfdc:	60fb      	str	r3, [r7, #12]
}
 800dfde:	bf00      	nop
 800dfe0:	bf00      	nop
 800dfe2:	e7fd      	b.n	800dfe0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dfe4:	697b      	ldr	r3, [r7, #20]
 800dfe6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dfea:	f023 0301 	bic.w	r3, r3, #1
 800dfee:	b2da      	uxtb	r2, r3
 800dff0:	697b      	ldr	r3, [r7, #20]
 800dff2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dff6:	697b      	ldr	r3, [r7, #20]
 800dff8:	6a1b      	ldr	r3, [r3, #32]
 800dffa:	6978      	ldr	r0, [r7, #20]
 800dffc:	4798      	blx	r3
}
 800dffe:	bf00      	nop
 800e000:	3718      	adds	r7, #24
 800e002:	46bd      	mov	sp, r7
 800e004:	bd80      	pop	{r7, pc}
 800e006:	bf00      	nop
 800e008:	20001300 	.word	0x20001300

0800e00c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800e00c:	b580      	push	{r7, lr}
 800e00e:	b084      	sub	sp, #16
 800e010:	af00      	add	r7, sp, #0
 800e012:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e014:	f107 0308 	add.w	r3, r7, #8
 800e018:	4618      	mov	r0, r3
 800e01a:	f000 f859 	bl	800e0d0 <prvGetNextExpireTime>
 800e01e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e020:	68bb      	ldr	r3, [r7, #8]
 800e022:	4619      	mov	r1, r3
 800e024:	68f8      	ldr	r0, [r7, #12]
 800e026:	f000 f805 	bl	800e034 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e02a:	f000 f8d7 	bl	800e1dc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e02e:	bf00      	nop
 800e030:	e7f0      	b.n	800e014 <prvTimerTask+0x8>
	...

0800e034 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e034:	b580      	push	{r7, lr}
 800e036:	b084      	sub	sp, #16
 800e038:	af00      	add	r7, sp, #0
 800e03a:	6078      	str	r0, [r7, #4]
 800e03c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e03e:	f7ff f907 	bl	800d250 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e042:	f107 0308 	add.w	r3, r7, #8
 800e046:	4618      	mov	r0, r3
 800e048:	f000 f866 	bl	800e118 <prvSampleTimeNow>
 800e04c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e04e:	68bb      	ldr	r3, [r7, #8]
 800e050:	2b00      	cmp	r3, #0
 800e052:	d130      	bne.n	800e0b6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e054:	683b      	ldr	r3, [r7, #0]
 800e056:	2b00      	cmp	r3, #0
 800e058:	d10a      	bne.n	800e070 <prvProcessTimerOrBlockTask+0x3c>
 800e05a:	687a      	ldr	r2, [r7, #4]
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	429a      	cmp	r2, r3
 800e060:	d806      	bhi.n	800e070 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e062:	f7ff f903 	bl	800d26c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e066:	68f9      	ldr	r1, [r7, #12]
 800e068:	6878      	ldr	r0, [r7, #4]
 800e06a:	f7ff ff81 	bl	800df70 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e06e:	e024      	b.n	800e0ba <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e070:	683b      	ldr	r3, [r7, #0]
 800e072:	2b00      	cmp	r3, #0
 800e074:	d008      	beq.n	800e088 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e076:	4b13      	ldr	r3, [pc, #76]	@ (800e0c4 <prvProcessTimerOrBlockTask+0x90>)
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d101      	bne.n	800e084 <prvProcessTimerOrBlockTask+0x50>
 800e080:	2301      	movs	r3, #1
 800e082:	e000      	b.n	800e086 <prvProcessTimerOrBlockTask+0x52>
 800e084:	2300      	movs	r3, #0
 800e086:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e088:	4b0f      	ldr	r3, [pc, #60]	@ (800e0c8 <prvProcessTimerOrBlockTask+0x94>)
 800e08a:	6818      	ldr	r0, [r3, #0]
 800e08c:	687a      	ldr	r2, [r7, #4]
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	1ad3      	subs	r3, r2, r3
 800e092:	683a      	ldr	r2, [r7, #0]
 800e094:	4619      	mov	r1, r3
 800e096:	f7fe fdc3 	bl	800cc20 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e09a:	f7ff f8e7 	bl	800d26c <xTaskResumeAll>
 800e09e:	4603      	mov	r3, r0
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d10a      	bne.n	800e0ba <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e0a4:	4b09      	ldr	r3, [pc, #36]	@ (800e0cc <prvProcessTimerOrBlockTask+0x98>)
 800e0a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e0aa:	601a      	str	r2, [r3, #0]
 800e0ac:	f3bf 8f4f 	dsb	sy
 800e0b0:	f3bf 8f6f 	isb	sy
}
 800e0b4:	e001      	b.n	800e0ba <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e0b6:	f7ff f8d9 	bl	800d26c <xTaskResumeAll>
}
 800e0ba:	bf00      	nop
 800e0bc:	3710      	adds	r7, #16
 800e0be:	46bd      	mov	sp, r7
 800e0c0:	bd80      	pop	{r7, pc}
 800e0c2:	bf00      	nop
 800e0c4:	20001304 	.word	0x20001304
 800e0c8:	20001308 	.word	0x20001308
 800e0cc:	e000ed04 	.word	0xe000ed04

0800e0d0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e0d0:	b480      	push	{r7}
 800e0d2:	b085      	sub	sp, #20
 800e0d4:	af00      	add	r7, sp, #0
 800e0d6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e0d8:	4b0e      	ldr	r3, [pc, #56]	@ (800e114 <prvGetNextExpireTime+0x44>)
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	681b      	ldr	r3, [r3, #0]
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d101      	bne.n	800e0e6 <prvGetNextExpireTime+0x16>
 800e0e2:	2201      	movs	r2, #1
 800e0e4:	e000      	b.n	800e0e8 <prvGetNextExpireTime+0x18>
 800e0e6:	2200      	movs	r2, #0
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d105      	bne.n	800e100 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e0f4:	4b07      	ldr	r3, [pc, #28]	@ (800e114 <prvGetNextExpireTime+0x44>)
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	68db      	ldr	r3, [r3, #12]
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	60fb      	str	r3, [r7, #12]
 800e0fe:	e001      	b.n	800e104 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e100:	2300      	movs	r3, #0
 800e102:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e104:	68fb      	ldr	r3, [r7, #12]
}
 800e106:	4618      	mov	r0, r3
 800e108:	3714      	adds	r7, #20
 800e10a:	46bd      	mov	sp, r7
 800e10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e110:	4770      	bx	lr
 800e112:	bf00      	nop
 800e114:	20001300 	.word	0x20001300

0800e118 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e118:	b580      	push	{r7, lr}
 800e11a:	b084      	sub	sp, #16
 800e11c:	af00      	add	r7, sp, #0
 800e11e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e120:	f7ff f942 	bl	800d3a8 <xTaskGetTickCount>
 800e124:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e126:	4b0b      	ldr	r3, [pc, #44]	@ (800e154 <prvSampleTimeNow+0x3c>)
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	68fa      	ldr	r2, [r7, #12]
 800e12c:	429a      	cmp	r2, r3
 800e12e:	d205      	bcs.n	800e13c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e130:	f000 f93a 	bl	800e3a8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	2201      	movs	r2, #1
 800e138:	601a      	str	r2, [r3, #0]
 800e13a:	e002      	b.n	800e142 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	2200      	movs	r2, #0
 800e140:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e142:	4a04      	ldr	r2, [pc, #16]	@ (800e154 <prvSampleTimeNow+0x3c>)
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e148:	68fb      	ldr	r3, [r7, #12]
}
 800e14a:	4618      	mov	r0, r3
 800e14c:	3710      	adds	r7, #16
 800e14e:	46bd      	mov	sp, r7
 800e150:	bd80      	pop	{r7, pc}
 800e152:	bf00      	nop
 800e154:	20001310 	.word	0x20001310

0800e158 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e158:	b580      	push	{r7, lr}
 800e15a:	b086      	sub	sp, #24
 800e15c:	af00      	add	r7, sp, #0
 800e15e:	60f8      	str	r0, [r7, #12]
 800e160:	60b9      	str	r1, [r7, #8]
 800e162:	607a      	str	r2, [r7, #4]
 800e164:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e166:	2300      	movs	r3, #0
 800e168:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	68ba      	ldr	r2, [r7, #8]
 800e16e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	68fa      	ldr	r2, [r7, #12]
 800e174:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e176:	68ba      	ldr	r2, [r7, #8]
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	429a      	cmp	r2, r3
 800e17c:	d812      	bhi.n	800e1a4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e17e:	687a      	ldr	r2, [r7, #4]
 800e180:	683b      	ldr	r3, [r7, #0]
 800e182:	1ad2      	subs	r2, r2, r3
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	699b      	ldr	r3, [r3, #24]
 800e188:	429a      	cmp	r2, r3
 800e18a:	d302      	bcc.n	800e192 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e18c:	2301      	movs	r3, #1
 800e18e:	617b      	str	r3, [r7, #20]
 800e190:	e01b      	b.n	800e1ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e192:	4b10      	ldr	r3, [pc, #64]	@ (800e1d4 <prvInsertTimerInActiveList+0x7c>)
 800e194:	681a      	ldr	r2, [r3, #0]
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	3304      	adds	r3, #4
 800e19a:	4619      	mov	r1, r3
 800e19c:	4610      	mov	r0, r2
 800e19e:	f7fd fd78 	bl	800bc92 <vListInsert>
 800e1a2:	e012      	b.n	800e1ca <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e1a4:	687a      	ldr	r2, [r7, #4]
 800e1a6:	683b      	ldr	r3, [r7, #0]
 800e1a8:	429a      	cmp	r2, r3
 800e1aa:	d206      	bcs.n	800e1ba <prvInsertTimerInActiveList+0x62>
 800e1ac:	68ba      	ldr	r2, [r7, #8]
 800e1ae:	683b      	ldr	r3, [r7, #0]
 800e1b0:	429a      	cmp	r2, r3
 800e1b2:	d302      	bcc.n	800e1ba <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e1b4:	2301      	movs	r3, #1
 800e1b6:	617b      	str	r3, [r7, #20]
 800e1b8:	e007      	b.n	800e1ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e1ba:	4b07      	ldr	r3, [pc, #28]	@ (800e1d8 <prvInsertTimerInActiveList+0x80>)
 800e1bc:	681a      	ldr	r2, [r3, #0]
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	3304      	adds	r3, #4
 800e1c2:	4619      	mov	r1, r3
 800e1c4:	4610      	mov	r0, r2
 800e1c6:	f7fd fd64 	bl	800bc92 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e1ca:	697b      	ldr	r3, [r7, #20]
}
 800e1cc:	4618      	mov	r0, r3
 800e1ce:	3718      	adds	r7, #24
 800e1d0:	46bd      	mov	sp, r7
 800e1d2:	bd80      	pop	{r7, pc}
 800e1d4:	20001304 	.word	0x20001304
 800e1d8:	20001300 	.word	0x20001300

0800e1dc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e1dc:	b580      	push	{r7, lr}
 800e1de:	b08e      	sub	sp, #56	@ 0x38
 800e1e0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e1e2:	e0ce      	b.n	800e382 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	da19      	bge.n	800e21e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e1ea:	1d3b      	adds	r3, r7, #4
 800e1ec:	3304      	adds	r3, #4
 800e1ee:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800e1f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d10b      	bne.n	800e20e <prvProcessReceivedCommands+0x32>
	__asm volatile
 800e1f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1fa:	f383 8811 	msr	BASEPRI, r3
 800e1fe:	f3bf 8f6f 	isb	sy
 800e202:	f3bf 8f4f 	dsb	sy
 800e206:	61fb      	str	r3, [r7, #28]
}
 800e208:	bf00      	nop
 800e20a:	bf00      	nop
 800e20c:	e7fd      	b.n	800e20a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e20e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e214:	6850      	ldr	r0, [r2, #4]
 800e216:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e218:	6892      	ldr	r2, [r2, #8]
 800e21a:	4611      	mov	r1, r2
 800e21c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	2b00      	cmp	r3, #0
 800e222:	f2c0 80ae 	blt.w	800e382 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e22a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e22c:	695b      	ldr	r3, [r3, #20]
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d004      	beq.n	800e23c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e232:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e234:	3304      	adds	r3, #4
 800e236:	4618      	mov	r0, r3
 800e238:	f7fd fd64 	bl	800bd04 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e23c:	463b      	mov	r3, r7
 800e23e:	4618      	mov	r0, r3
 800e240:	f7ff ff6a 	bl	800e118 <prvSampleTimeNow>
 800e244:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	2b09      	cmp	r3, #9
 800e24a:	f200 8097 	bhi.w	800e37c <prvProcessReceivedCommands+0x1a0>
 800e24e:	a201      	add	r2, pc, #4	@ (adr r2, 800e254 <prvProcessReceivedCommands+0x78>)
 800e250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e254:	0800e27d 	.word	0x0800e27d
 800e258:	0800e27d 	.word	0x0800e27d
 800e25c:	0800e27d 	.word	0x0800e27d
 800e260:	0800e2f3 	.word	0x0800e2f3
 800e264:	0800e307 	.word	0x0800e307
 800e268:	0800e353 	.word	0x0800e353
 800e26c:	0800e27d 	.word	0x0800e27d
 800e270:	0800e27d 	.word	0x0800e27d
 800e274:	0800e2f3 	.word	0x0800e2f3
 800e278:	0800e307 	.word	0x0800e307
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e27c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e27e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e282:	f043 0301 	orr.w	r3, r3, #1
 800e286:	b2da      	uxtb	r2, r3
 800e288:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e28a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e28e:	68ba      	ldr	r2, [r7, #8]
 800e290:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e292:	699b      	ldr	r3, [r3, #24]
 800e294:	18d1      	adds	r1, r2, r3
 800e296:	68bb      	ldr	r3, [r7, #8]
 800e298:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e29a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e29c:	f7ff ff5c 	bl	800e158 <prvInsertTimerInActiveList>
 800e2a0:	4603      	mov	r3, r0
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d06c      	beq.n	800e380 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e2a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2a8:	6a1b      	ldr	r3, [r3, #32]
 800e2aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e2ac:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e2ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e2b4:	f003 0304 	and.w	r3, r3, #4
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d061      	beq.n	800e380 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e2bc:	68ba      	ldr	r2, [r7, #8]
 800e2be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2c0:	699b      	ldr	r3, [r3, #24]
 800e2c2:	441a      	add	r2, r3
 800e2c4:	2300      	movs	r3, #0
 800e2c6:	9300      	str	r3, [sp, #0]
 800e2c8:	2300      	movs	r3, #0
 800e2ca:	2100      	movs	r1, #0
 800e2cc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e2ce:	f7ff fe01 	bl	800ded4 <xTimerGenericCommand>
 800e2d2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800e2d4:	6a3b      	ldr	r3, [r7, #32]
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d152      	bne.n	800e380 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800e2da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2de:	f383 8811 	msr	BASEPRI, r3
 800e2e2:	f3bf 8f6f 	isb	sy
 800e2e6:	f3bf 8f4f 	dsb	sy
 800e2ea:	61bb      	str	r3, [r7, #24]
}
 800e2ec:	bf00      	nop
 800e2ee:	bf00      	nop
 800e2f0:	e7fd      	b.n	800e2ee <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e2f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2f4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e2f8:	f023 0301 	bic.w	r3, r3, #1
 800e2fc:	b2da      	uxtb	r2, r3
 800e2fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e300:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800e304:	e03d      	b.n	800e382 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e306:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e308:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e30c:	f043 0301 	orr.w	r3, r3, #1
 800e310:	b2da      	uxtb	r2, r3
 800e312:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e314:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e318:	68ba      	ldr	r2, [r7, #8]
 800e31a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e31c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e31e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e320:	699b      	ldr	r3, [r3, #24]
 800e322:	2b00      	cmp	r3, #0
 800e324:	d10b      	bne.n	800e33e <prvProcessReceivedCommands+0x162>
	__asm volatile
 800e326:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e32a:	f383 8811 	msr	BASEPRI, r3
 800e32e:	f3bf 8f6f 	isb	sy
 800e332:	f3bf 8f4f 	dsb	sy
 800e336:	617b      	str	r3, [r7, #20]
}
 800e338:	bf00      	nop
 800e33a:	bf00      	nop
 800e33c:	e7fd      	b.n	800e33a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e33e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e340:	699a      	ldr	r2, [r3, #24]
 800e342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e344:	18d1      	adds	r1, r2, r3
 800e346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e348:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e34a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e34c:	f7ff ff04 	bl	800e158 <prvInsertTimerInActiveList>
					break;
 800e350:	e017      	b.n	800e382 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e352:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e354:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e358:	f003 0302 	and.w	r3, r3, #2
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d103      	bne.n	800e368 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800e360:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e362:	f000 fbe9 	bl	800eb38 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e366:	e00c      	b.n	800e382 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e368:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e36a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e36e:	f023 0301 	bic.w	r3, r3, #1
 800e372:	b2da      	uxtb	r2, r3
 800e374:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e376:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800e37a:	e002      	b.n	800e382 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800e37c:	bf00      	nop
 800e37e:	e000      	b.n	800e382 <prvProcessReceivedCommands+0x1a6>
					break;
 800e380:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e382:	4b08      	ldr	r3, [pc, #32]	@ (800e3a4 <prvProcessReceivedCommands+0x1c8>)
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	1d39      	adds	r1, r7, #4
 800e388:	2200      	movs	r2, #0
 800e38a:	4618      	mov	r0, r3
 800e38c:	f7fe f882 	bl	800c494 <xQueueReceive>
 800e390:	4603      	mov	r3, r0
 800e392:	2b00      	cmp	r3, #0
 800e394:	f47f af26 	bne.w	800e1e4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800e398:	bf00      	nop
 800e39a:	bf00      	nop
 800e39c:	3730      	adds	r7, #48	@ 0x30
 800e39e:	46bd      	mov	sp, r7
 800e3a0:	bd80      	pop	{r7, pc}
 800e3a2:	bf00      	nop
 800e3a4:	20001308 	.word	0x20001308

0800e3a8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e3a8:	b580      	push	{r7, lr}
 800e3aa:	b088      	sub	sp, #32
 800e3ac:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e3ae:	e049      	b.n	800e444 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e3b0:	4b2e      	ldr	r3, [pc, #184]	@ (800e46c <prvSwitchTimerLists+0xc4>)
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	68db      	ldr	r3, [r3, #12]
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e3ba:	4b2c      	ldr	r3, [pc, #176]	@ (800e46c <prvSwitchTimerLists+0xc4>)
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	68db      	ldr	r3, [r3, #12]
 800e3c0:	68db      	ldr	r3, [r3, #12]
 800e3c2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	3304      	adds	r3, #4
 800e3c8:	4618      	mov	r0, r3
 800e3ca:	f7fd fc9b 	bl	800bd04 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	6a1b      	ldr	r3, [r3, #32]
 800e3d2:	68f8      	ldr	r0, [r7, #12]
 800e3d4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e3dc:	f003 0304 	and.w	r3, r3, #4
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d02f      	beq.n	800e444 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	699b      	ldr	r3, [r3, #24]
 800e3e8:	693a      	ldr	r2, [r7, #16]
 800e3ea:	4413      	add	r3, r2
 800e3ec:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e3ee:	68ba      	ldr	r2, [r7, #8]
 800e3f0:	693b      	ldr	r3, [r7, #16]
 800e3f2:	429a      	cmp	r2, r3
 800e3f4:	d90e      	bls.n	800e414 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	68ba      	ldr	r2, [r7, #8]
 800e3fa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	68fa      	ldr	r2, [r7, #12]
 800e400:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e402:	4b1a      	ldr	r3, [pc, #104]	@ (800e46c <prvSwitchTimerLists+0xc4>)
 800e404:	681a      	ldr	r2, [r3, #0]
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	3304      	adds	r3, #4
 800e40a:	4619      	mov	r1, r3
 800e40c:	4610      	mov	r0, r2
 800e40e:	f7fd fc40 	bl	800bc92 <vListInsert>
 800e412:	e017      	b.n	800e444 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e414:	2300      	movs	r3, #0
 800e416:	9300      	str	r3, [sp, #0]
 800e418:	2300      	movs	r3, #0
 800e41a:	693a      	ldr	r2, [r7, #16]
 800e41c:	2100      	movs	r1, #0
 800e41e:	68f8      	ldr	r0, [r7, #12]
 800e420:	f7ff fd58 	bl	800ded4 <xTimerGenericCommand>
 800e424:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d10b      	bne.n	800e444 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800e42c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e430:	f383 8811 	msr	BASEPRI, r3
 800e434:	f3bf 8f6f 	isb	sy
 800e438:	f3bf 8f4f 	dsb	sy
 800e43c:	603b      	str	r3, [r7, #0]
}
 800e43e:	bf00      	nop
 800e440:	bf00      	nop
 800e442:	e7fd      	b.n	800e440 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e444:	4b09      	ldr	r3, [pc, #36]	@ (800e46c <prvSwitchTimerLists+0xc4>)
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d1b0      	bne.n	800e3b0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e44e:	4b07      	ldr	r3, [pc, #28]	@ (800e46c <prvSwitchTimerLists+0xc4>)
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e454:	4b06      	ldr	r3, [pc, #24]	@ (800e470 <prvSwitchTimerLists+0xc8>)
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	4a04      	ldr	r2, [pc, #16]	@ (800e46c <prvSwitchTimerLists+0xc4>)
 800e45a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e45c:	4a04      	ldr	r2, [pc, #16]	@ (800e470 <prvSwitchTimerLists+0xc8>)
 800e45e:	697b      	ldr	r3, [r7, #20]
 800e460:	6013      	str	r3, [r2, #0]
}
 800e462:	bf00      	nop
 800e464:	3718      	adds	r7, #24
 800e466:	46bd      	mov	sp, r7
 800e468:	bd80      	pop	{r7, pc}
 800e46a:	bf00      	nop
 800e46c:	20001300 	.word	0x20001300
 800e470:	20001304 	.word	0x20001304

0800e474 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e474:	b580      	push	{r7, lr}
 800e476:	b082      	sub	sp, #8
 800e478:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e47a:	f000 f96d 	bl	800e758 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e47e:	4b15      	ldr	r3, [pc, #84]	@ (800e4d4 <prvCheckForValidListAndQueue+0x60>)
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	2b00      	cmp	r3, #0
 800e484:	d120      	bne.n	800e4c8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e486:	4814      	ldr	r0, [pc, #80]	@ (800e4d8 <prvCheckForValidListAndQueue+0x64>)
 800e488:	f7fd fbb2 	bl	800bbf0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e48c:	4813      	ldr	r0, [pc, #76]	@ (800e4dc <prvCheckForValidListAndQueue+0x68>)
 800e48e:	f7fd fbaf 	bl	800bbf0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e492:	4b13      	ldr	r3, [pc, #76]	@ (800e4e0 <prvCheckForValidListAndQueue+0x6c>)
 800e494:	4a10      	ldr	r2, [pc, #64]	@ (800e4d8 <prvCheckForValidListAndQueue+0x64>)
 800e496:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e498:	4b12      	ldr	r3, [pc, #72]	@ (800e4e4 <prvCheckForValidListAndQueue+0x70>)
 800e49a:	4a10      	ldr	r2, [pc, #64]	@ (800e4dc <prvCheckForValidListAndQueue+0x68>)
 800e49c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e49e:	2300      	movs	r3, #0
 800e4a0:	9300      	str	r3, [sp, #0]
 800e4a2:	4b11      	ldr	r3, [pc, #68]	@ (800e4e8 <prvCheckForValidListAndQueue+0x74>)
 800e4a4:	4a11      	ldr	r2, [pc, #68]	@ (800e4ec <prvCheckForValidListAndQueue+0x78>)
 800e4a6:	2110      	movs	r1, #16
 800e4a8:	200a      	movs	r0, #10
 800e4aa:	f7fd fcbf 	bl	800be2c <xQueueGenericCreateStatic>
 800e4ae:	4603      	mov	r3, r0
 800e4b0:	4a08      	ldr	r2, [pc, #32]	@ (800e4d4 <prvCheckForValidListAndQueue+0x60>)
 800e4b2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e4b4:	4b07      	ldr	r3, [pc, #28]	@ (800e4d4 <prvCheckForValidListAndQueue+0x60>)
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d005      	beq.n	800e4c8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e4bc:	4b05      	ldr	r3, [pc, #20]	@ (800e4d4 <prvCheckForValidListAndQueue+0x60>)
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	490b      	ldr	r1, [pc, #44]	@ (800e4f0 <prvCheckForValidListAndQueue+0x7c>)
 800e4c2:	4618      	mov	r0, r3
 800e4c4:	f7fe fb82 	bl	800cbcc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e4c8:	f000 f978 	bl	800e7bc <vPortExitCritical>
}
 800e4cc:	bf00      	nop
 800e4ce:	46bd      	mov	sp, r7
 800e4d0:	bd80      	pop	{r7, pc}
 800e4d2:	bf00      	nop
 800e4d4:	20001308 	.word	0x20001308
 800e4d8:	200012d8 	.word	0x200012d8
 800e4dc:	200012ec 	.word	0x200012ec
 800e4e0:	20001300 	.word	0x20001300
 800e4e4:	20001304 	.word	0x20001304
 800e4e8:	200013b4 	.word	0x200013b4
 800e4ec:	20001314 	.word	0x20001314
 800e4f0:	0801341c 	.word	0x0801341c

0800e4f4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e4f4:	b480      	push	{r7}
 800e4f6:	b085      	sub	sp, #20
 800e4f8:	af00      	add	r7, sp, #0
 800e4fa:	60f8      	str	r0, [r7, #12]
 800e4fc:	60b9      	str	r1, [r7, #8]
 800e4fe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e500:	68fb      	ldr	r3, [r7, #12]
 800e502:	3b04      	subs	r3, #4
 800e504:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800e50c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e50e:	68fb      	ldr	r3, [r7, #12]
 800e510:	3b04      	subs	r3, #4
 800e512:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e514:	68bb      	ldr	r3, [r7, #8]
 800e516:	f023 0201 	bic.w	r2, r3, #1
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	3b04      	subs	r3, #4
 800e522:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e524:	4a0c      	ldr	r2, [pc, #48]	@ (800e558 <pxPortInitialiseStack+0x64>)
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	3b14      	subs	r3, #20
 800e52e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e530:	687a      	ldr	r2, [r7, #4]
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e536:	68fb      	ldr	r3, [r7, #12]
 800e538:	3b04      	subs	r3, #4
 800e53a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	f06f 0202 	mvn.w	r2, #2
 800e542:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	3b20      	subs	r3, #32
 800e548:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e54a:	68fb      	ldr	r3, [r7, #12]
}
 800e54c:	4618      	mov	r0, r3
 800e54e:	3714      	adds	r7, #20
 800e550:	46bd      	mov	sp, r7
 800e552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e556:	4770      	bx	lr
 800e558:	0800e55d 	.word	0x0800e55d

0800e55c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e55c:	b480      	push	{r7}
 800e55e:	b085      	sub	sp, #20
 800e560:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e562:	2300      	movs	r3, #0
 800e564:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e566:	4b13      	ldr	r3, [pc, #76]	@ (800e5b4 <prvTaskExitError+0x58>)
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e56e:	d00b      	beq.n	800e588 <prvTaskExitError+0x2c>
	__asm volatile
 800e570:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e574:	f383 8811 	msr	BASEPRI, r3
 800e578:	f3bf 8f6f 	isb	sy
 800e57c:	f3bf 8f4f 	dsb	sy
 800e580:	60fb      	str	r3, [r7, #12]
}
 800e582:	bf00      	nop
 800e584:	bf00      	nop
 800e586:	e7fd      	b.n	800e584 <prvTaskExitError+0x28>
	__asm volatile
 800e588:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e58c:	f383 8811 	msr	BASEPRI, r3
 800e590:	f3bf 8f6f 	isb	sy
 800e594:	f3bf 8f4f 	dsb	sy
 800e598:	60bb      	str	r3, [r7, #8]
}
 800e59a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e59c:	bf00      	nop
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d0fc      	beq.n	800e59e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e5a4:	bf00      	nop
 800e5a6:	bf00      	nop
 800e5a8:	3714      	adds	r7, #20
 800e5aa:	46bd      	mov	sp, r7
 800e5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5b0:	4770      	bx	lr
 800e5b2:	bf00      	nop
 800e5b4:	2000013c 	.word	0x2000013c
	...

0800e5c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e5c0:	4b07      	ldr	r3, [pc, #28]	@ (800e5e0 <pxCurrentTCBConst2>)
 800e5c2:	6819      	ldr	r1, [r3, #0]
 800e5c4:	6808      	ldr	r0, [r1, #0]
 800e5c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5ca:	f380 8809 	msr	PSP, r0
 800e5ce:	f3bf 8f6f 	isb	sy
 800e5d2:	f04f 0000 	mov.w	r0, #0
 800e5d6:	f380 8811 	msr	BASEPRI, r0
 800e5da:	4770      	bx	lr
 800e5dc:	f3af 8000 	nop.w

0800e5e0 <pxCurrentTCBConst2>:
 800e5e0:	20000dd8 	.word	0x20000dd8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e5e4:	bf00      	nop
 800e5e6:	bf00      	nop

0800e5e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e5e8:	4808      	ldr	r0, [pc, #32]	@ (800e60c <prvPortStartFirstTask+0x24>)
 800e5ea:	6800      	ldr	r0, [r0, #0]
 800e5ec:	6800      	ldr	r0, [r0, #0]
 800e5ee:	f380 8808 	msr	MSP, r0
 800e5f2:	f04f 0000 	mov.w	r0, #0
 800e5f6:	f380 8814 	msr	CONTROL, r0
 800e5fa:	b662      	cpsie	i
 800e5fc:	b661      	cpsie	f
 800e5fe:	f3bf 8f4f 	dsb	sy
 800e602:	f3bf 8f6f 	isb	sy
 800e606:	df00      	svc	0
 800e608:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e60a:	bf00      	nop
 800e60c:	e000ed08 	.word	0xe000ed08

0800e610 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e610:	b580      	push	{r7, lr}
 800e612:	b086      	sub	sp, #24
 800e614:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e616:	4b47      	ldr	r3, [pc, #284]	@ (800e734 <xPortStartScheduler+0x124>)
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	4a47      	ldr	r2, [pc, #284]	@ (800e738 <xPortStartScheduler+0x128>)
 800e61c:	4293      	cmp	r3, r2
 800e61e:	d10b      	bne.n	800e638 <xPortStartScheduler+0x28>
	__asm volatile
 800e620:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e624:	f383 8811 	msr	BASEPRI, r3
 800e628:	f3bf 8f6f 	isb	sy
 800e62c:	f3bf 8f4f 	dsb	sy
 800e630:	613b      	str	r3, [r7, #16]
}
 800e632:	bf00      	nop
 800e634:	bf00      	nop
 800e636:	e7fd      	b.n	800e634 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e638:	4b3e      	ldr	r3, [pc, #248]	@ (800e734 <xPortStartScheduler+0x124>)
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	4a3f      	ldr	r2, [pc, #252]	@ (800e73c <xPortStartScheduler+0x12c>)
 800e63e:	4293      	cmp	r3, r2
 800e640:	d10b      	bne.n	800e65a <xPortStartScheduler+0x4a>
	__asm volatile
 800e642:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e646:	f383 8811 	msr	BASEPRI, r3
 800e64a:	f3bf 8f6f 	isb	sy
 800e64e:	f3bf 8f4f 	dsb	sy
 800e652:	60fb      	str	r3, [r7, #12]
}
 800e654:	bf00      	nop
 800e656:	bf00      	nop
 800e658:	e7fd      	b.n	800e656 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e65a:	4b39      	ldr	r3, [pc, #228]	@ (800e740 <xPortStartScheduler+0x130>)
 800e65c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e65e:	697b      	ldr	r3, [r7, #20]
 800e660:	781b      	ldrb	r3, [r3, #0]
 800e662:	b2db      	uxtb	r3, r3
 800e664:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e666:	697b      	ldr	r3, [r7, #20]
 800e668:	22ff      	movs	r2, #255	@ 0xff
 800e66a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e66c:	697b      	ldr	r3, [r7, #20]
 800e66e:	781b      	ldrb	r3, [r3, #0]
 800e670:	b2db      	uxtb	r3, r3
 800e672:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e674:	78fb      	ldrb	r3, [r7, #3]
 800e676:	b2db      	uxtb	r3, r3
 800e678:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800e67c:	b2da      	uxtb	r2, r3
 800e67e:	4b31      	ldr	r3, [pc, #196]	@ (800e744 <xPortStartScheduler+0x134>)
 800e680:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e682:	4b31      	ldr	r3, [pc, #196]	@ (800e748 <xPortStartScheduler+0x138>)
 800e684:	2207      	movs	r2, #7
 800e686:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e688:	e009      	b.n	800e69e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800e68a:	4b2f      	ldr	r3, [pc, #188]	@ (800e748 <xPortStartScheduler+0x138>)
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	3b01      	subs	r3, #1
 800e690:	4a2d      	ldr	r2, [pc, #180]	@ (800e748 <xPortStartScheduler+0x138>)
 800e692:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e694:	78fb      	ldrb	r3, [r7, #3]
 800e696:	b2db      	uxtb	r3, r3
 800e698:	005b      	lsls	r3, r3, #1
 800e69a:	b2db      	uxtb	r3, r3
 800e69c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e69e:	78fb      	ldrb	r3, [r7, #3]
 800e6a0:	b2db      	uxtb	r3, r3
 800e6a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e6a6:	2b80      	cmp	r3, #128	@ 0x80
 800e6a8:	d0ef      	beq.n	800e68a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e6aa:	4b27      	ldr	r3, [pc, #156]	@ (800e748 <xPortStartScheduler+0x138>)
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	f1c3 0307 	rsb	r3, r3, #7
 800e6b2:	2b04      	cmp	r3, #4
 800e6b4:	d00b      	beq.n	800e6ce <xPortStartScheduler+0xbe>
	__asm volatile
 800e6b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6ba:	f383 8811 	msr	BASEPRI, r3
 800e6be:	f3bf 8f6f 	isb	sy
 800e6c2:	f3bf 8f4f 	dsb	sy
 800e6c6:	60bb      	str	r3, [r7, #8]
}
 800e6c8:	bf00      	nop
 800e6ca:	bf00      	nop
 800e6cc:	e7fd      	b.n	800e6ca <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e6ce:	4b1e      	ldr	r3, [pc, #120]	@ (800e748 <xPortStartScheduler+0x138>)
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	021b      	lsls	r3, r3, #8
 800e6d4:	4a1c      	ldr	r2, [pc, #112]	@ (800e748 <xPortStartScheduler+0x138>)
 800e6d6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e6d8:	4b1b      	ldr	r3, [pc, #108]	@ (800e748 <xPortStartScheduler+0x138>)
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800e6e0:	4a19      	ldr	r2, [pc, #100]	@ (800e748 <xPortStartScheduler+0x138>)
 800e6e2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	b2da      	uxtb	r2, r3
 800e6e8:	697b      	ldr	r3, [r7, #20]
 800e6ea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e6ec:	4b17      	ldr	r3, [pc, #92]	@ (800e74c <xPortStartScheduler+0x13c>)
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	4a16      	ldr	r2, [pc, #88]	@ (800e74c <xPortStartScheduler+0x13c>)
 800e6f2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800e6f6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e6f8:	4b14      	ldr	r3, [pc, #80]	@ (800e74c <xPortStartScheduler+0x13c>)
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	4a13      	ldr	r2, [pc, #76]	@ (800e74c <xPortStartScheduler+0x13c>)
 800e6fe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800e702:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e704:	f000 f8da 	bl	800e8bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e708:	4b11      	ldr	r3, [pc, #68]	@ (800e750 <xPortStartScheduler+0x140>)
 800e70a:	2200      	movs	r2, #0
 800e70c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e70e:	f000 f8f9 	bl	800e904 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e712:	4b10      	ldr	r3, [pc, #64]	@ (800e754 <xPortStartScheduler+0x144>)
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	4a0f      	ldr	r2, [pc, #60]	@ (800e754 <xPortStartScheduler+0x144>)
 800e718:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800e71c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e71e:	f7ff ff63 	bl	800e5e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e722:	f7fe ff1d 	bl	800d560 <vTaskSwitchContext>
	prvTaskExitError();
 800e726:	f7ff ff19 	bl	800e55c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e72a:	2300      	movs	r3, #0
}
 800e72c:	4618      	mov	r0, r3
 800e72e:	3718      	adds	r7, #24
 800e730:	46bd      	mov	sp, r7
 800e732:	bd80      	pop	{r7, pc}
 800e734:	e000ed00 	.word	0xe000ed00
 800e738:	410fc271 	.word	0x410fc271
 800e73c:	410fc270 	.word	0x410fc270
 800e740:	e000e400 	.word	0xe000e400
 800e744:	20001404 	.word	0x20001404
 800e748:	20001408 	.word	0x20001408
 800e74c:	e000ed20 	.word	0xe000ed20
 800e750:	2000013c 	.word	0x2000013c
 800e754:	e000ef34 	.word	0xe000ef34

0800e758 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e758:	b480      	push	{r7}
 800e75a:	b083      	sub	sp, #12
 800e75c:	af00      	add	r7, sp, #0
	__asm volatile
 800e75e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e762:	f383 8811 	msr	BASEPRI, r3
 800e766:	f3bf 8f6f 	isb	sy
 800e76a:	f3bf 8f4f 	dsb	sy
 800e76e:	607b      	str	r3, [r7, #4]
}
 800e770:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e772:	4b10      	ldr	r3, [pc, #64]	@ (800e7b4 <vPortEnterCritical+0x5c>)
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	3301      	adds	r3, #1
 800e778:	4a0e      	ldr	r2, [pc, #56]	@ (800e7b4 <vPortEnterCritical+0x5c>)
 800e77a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e77c:	4b0d      	ldr	r3, [pc, #52]	@ (800e7b4 <vPortEnterCritical+0x5c>)
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	2b01      	cmp	r3, #1
 800e782:	d110      	bne.n	800e7a6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e784:	4b0c      	ldr	r3, [pc, #48]	@ (800e7b8 <vPortEnterCritical+0x60>)
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	b2db      	uxtb	r3, r3
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d00b      	beq.n	800e7a6 <vPortEnterCritical+0x4e>
	__asm volatile
 800e78e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e792:	f383 8811 	msr	BASEPRI, r3
 800e796:	f3bf 8f6f 	isb	sy
 800e79a:	f3bf 8f4f 	dsb	sy
 800e79e:	603b      	str	r3, [r7, #0]
}
 800e7a0:	bf00      	nop
 800e7a2:	bf00      	nop
 800e7a4:	e7fd      	b.n	800e7a2 <vPortEnterCritical+0x4a>
	}
}
 800e7a6:	bf00      	nop
 800e7a8:	370c      	adds	r7, #12
 800e7aa:	46bd      	mov	sp, r7
 800e7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7b0:	4770      	bx	lr
 800e7b2:	bf00      	nop
 800e7b4:	2000013c 	.word	0x2000013c
 800e7b8:	e000ed04 	.word	0xe000ed04

0800e7bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e7bc:	b480      	push	{r7}
 800e7be:	b083      	sub	sp, #12
 800e7c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e7c2:	4b12      	ldr	r3, [pc, #72]	@ (800e80c <vPortExitCritical+0x50>)
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d10b      	bne.n	800e7e2 <vPortExitCritical+0x26>
	__asm volatile
 800e7ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7ce:	f383 8811 	msr	BASEPRI, r3
 800e7d2:	f3bf 8f6f 	isb	sy
 800e7d6:	f3bf 8f4f 	dsb	sy
 800e7da:	607b      	str	r3, [r7, #4]
}
 800e7dc:	bf00      	nop
 800e7de:	bf00      	nop
 800e7e0:	e7fd      	b.n	800e7de <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e7e2:	4b0a      	ldr	r3, [pc, #40]	@ (800e80c <vPortExitCritical+0x50>)
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	3b01      	subs	r3, #1
 800e7e8:	4a08      	ldr	r2, [pc, #32]	@ (800e80c <vPortExitCritical+0x50>)
 800e7ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e7ec:	4b07      	ldr	r3, [pc, #28]	@ (800e80c <vPortExitCritical+0x50>)
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d105      	bne.n	800e800 <vPortExitCritical+0x44>
 800e7f4:	2300      	movs	r3, #0
 800e7f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e7f8:	683b      	ldr	r3, [r7, #0]
 800e7fa:	f383 8811 	msr	BASEPRI, r3
}
 800e7fe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e800:	bf00      	nop
 800e802:	370c      	adds	r7, #12
 800e804:	46bd      	mov	sp, r7
 800e806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e80a:	4770      	bx	lr
 800e80c:	2000013c 	.word	0x2000013c

0800e810 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e810:	f3ef 8009 	mrs	r0, PSP
 800e814:	f3bf 8f6f 	isb	sy
 800e818:	4b15      	ldr	r3, [pc, #84]	@ (800e870 <pxCurrentTCBConst>)
 800e81a:	681a      	ldr	r2, [r3, #0]
 800e81c:	f01e 0f10 	tst.w	lr, #16
 800e820:	bf08      	it	eq
 800e822:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e826:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e82a:	6010      	str	r0, [r2, #0]
 800e82c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e830:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800e834:	f380 8811 	msr	BASEPRI, r0
 800e838:	f3bf 8f4f 	dsb	sy
 800e83c:	f3bf 8f6f 	isb	sy
 800e840:	f7fe fe8e 	bl	800d560 <vTaskSwitchContext>
 800e844:	f04f 0000 	mov.w	r0, #0
 800e848:	f380 8811 	msr	BASEPRI, r0
 800e84c:	bc09      	pop	{r0, r3}
 800e84e:	6819      	ldr	r1, [r3, #0]
 800e850:	6808      	ldr	r0, [r1, #0]
 800e852:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e856:	f01e 0f10 	tst.w	lr, #16
 800e85a:	bf08      	it	eq
 800e85c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e860:	f380 8809 	msr	PSP, r0
 800e864:	f3bf 8f6f 	isb	sy
 800e868:	4770      	bx	lr
 800e86a:	bf00      	nop
 800e86c:	f3af 8000 	nop.w

0800e870 <pxCurrentTCBConst>:
 800e870:	20000dd8 	.word	0x20000dd8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e874:	bf00      	nop
 800e876:	bf00      	nop

0800e878 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e878:	b580      	push	{r7, lr}
 800e87a:	b082      	sub	sp, #8
 800e87c:	af00      	add	r7, sp, #0
	__asm volatile
 800e87e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e882:	f383 8811 	msr	BASEPRI, r3
 800e886:	f3bf 8f6f 	isb	sy
 800e88a:	f3bf 8f4f 	dsb	sy
 800e88e:	607b      	str	r3, [r7, #4]
}
 800e890:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e892:	f7fe fdab 	bl	800d3ec <xTaskIncrementTick>
 800e896:	4603      	mov	r3, r0
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d003      	beq.n	800e8a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e89c:	4b06      	ldr	r3, [pc, #24]	@ (800e8b8 <xPortSysTickHandler+0x40>)
 800e89e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e8a2:	601a      	str	r2, [r3, #0]
 800e8a4:	2300      	movs	r3, #0
 800e8a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e8a8:	683b      	ldr	r3, [r7, #0]
 800e8aa:	f383 8811 	msr	BASEPRI, r3
}
 800e8ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e8b0:	bf00      	nop
 800e8b2:	3708      	adds	r7, #8
 800e8b4:	46bd      	mov	sp, r7
 800e8b6:	bd80      	pop	{r7, pc}
 800e8b8:	e000ed04 	.word	0xe000ed04

0800e8bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e8bc:	b480      	push	{r7}
 800e8be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e8c0:	4b0b      	ldr	r3, [pc, #44]	@ (800e8f0 <vPortSetupTimerInterrupt+0x34>)
 800e8c2:	2200      	movs	r2, #0
 800e8c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e8c6:	4b0b      	ldr	r3, [pc, #44]	@ (800e8f4 <vPortSetupTimerInterrupt+0x38>)
 800e8c8:	2200      	movs	r2, #0
 800e8ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e8cc:	4b0a      	ldr	r3, [pc, #40]	@ (800e8f8 <vPortSetupTimerInterrupt+0x3c>)
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	4a0a      	ldr	r2, [pc, #40]	@ (800e8fc <vPortSetupTimerInterrupt+0x40>)
 800e8d2:	fba2 2303 	umull	r2, r3, r2, r3
 800e8d6:	099b      	lsrs	r3, r3, #6
 800e8d8:	4a09      	ldr	r2, [pc, #36]	@ (800e900 <vPortSetupTimerInterrupt+0x44>)
 800e8da:	3b01      	subs	r3, #1
 800e8dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e8de:	4b04      	ldr	r3, [pc, #16]	@ (800e8f0 <vPortSetupTimerInterrupt+0x34>)
 800e8e0:	2207      	movs	r2, #7
 800e8e2:	601a      	str	r2, [r3, #0]
}
 800e8e4:	bf00      	nop
 800e8e6:	46bd      	mov	sp, r7
 800e8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ec:	4770      	bx	lr
 800e8ee:	bf00      	nop
 800e8f0:	e000e010 	.word	0xe000e010
 800e8f4:	e000e018 	.word	0xe000e018
 800e8f8:	20000020 	.word	0x20000020
 800e8fc:	10624dd3 	.word	0x10624dd3
 800e900:	e000e014 	.word	0xe000e014

0800e904 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e904:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800e914 <vPortEnableVFP+0x10>
 800e908:	6801      	ldr	r1, [r0, #0]
 800e90a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800e90e:	6001      	str	r1, [r0, #0]
 800e910:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e912:	bf00      	nop
 800e914:	e000ed88 	.word	0xe000ed88

0800e918 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e918:	b480      	push	{r7}
 800e91a:	b085      	sub	sp, #20
 800e91c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e91e:	f3ef 8305 	mrs	r3, IPSR
 800e922:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	2b0f      	cmp	r3, #15
 800e928:	d915      	bls.n	800e956 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e92a:	4a18      	ldr	r2, [pc, #96]	@ (800e98c <vPortValidateInterruptPriority+0x74>)
 800e92c:	68fb      	ldr	r3, [r7, #12]
 800e92e:	4413      	add	r3, r2
 800e930:	781b      	ldrb	r3, [r3, #0]
 800e932:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e934:	4b16      	ldr	r3, [pc, #88]	@ (800e990 <vPortValidateInterruptPriority+0x78>)
 800e936:	781b      	ldrb	r3, [r3, #0]
 800e938:	7afa      	ldrb	r2, [r7, #11]
 800e93a:	429a      	cmp	r2, r3
 800e93c:	d20b      	bcs.n	800e956 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800e93e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e942:	f383 8811 	msr	BASEPRI, r3
 800e946:	f3bf 8f6f 	isb	sy
 800e94a:	f3bf 8f4f 	dsb	sy
 800e94e:	607b      	str	r3, [r7, #4]
}
 800e950:	bf00      	nop
 800e952:	bf00      	nop
 800e954:	e7fd      	b.n	800e952 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e956:	4b0f      	ldr	r3, [pc, #60]	@ (800e994 <vPortValidateInterruptPriority+0x7c>)
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800e95e:	4b0e      	ldr	r3, [pc, #56]	@ (800e998 <vPortValidateInterruptPriority+0x80>)
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	429a      	cmp	r2, r3
 800e964:	d90b      	bls.n	800e97e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800e966:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e96a:	f383 8811 	msr	BASEPRI, r3
 800e96e:	f3bf 8f6f 	isb	sy
 800e972:	f3bf 8f4f 	dsb	sy
 800e976:	603b      	str	r3, [r7, #0]
}
 800e978:	bf00      	nop
 800e97a:	bf00      	nop
 800e97c:	e7fd      	b.n	800e97a <vPortValidateInterruptPriority+0x62>
	}
 800e97e:	bf00      	nop
 800e980:	3714      	adds	r7, #20
 800e982:	46bd      	mov	sp, r7
 800e984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e988:	4770      	bx	lr
 800e98a:	bf00      	nop
 800e98c:	e000e3f0 	.word	0xe000e3f0
 800e990:	20001404 	.word	0x20001404
 800e994:	e000ed0c 	.word	0xe000ed0c
 800e998:	20001408 	.word	0x20001408

0800e99c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e99c:	b580      	push	{r7, lr}
 800e99e:	b08a      	sub	sp, #40	@ 0x28
 800e9a0:	af00      	add	r7, sp, #0
 800e9a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e9a4:	2300      	movs	r3, #0
 800e9a6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e9a8:	f7fe fc52 	bl	800d250 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e9ac:	4b5c      	ldr	r3, [pc, #368]	@ (800eb20 <pvPortMalloc+0x184>)
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d101      	bne.n	800e9b8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e9b4:	f000 f924 	bl	800ec00 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e9b8:	4b5a      	ldr	r3, [pc, #360]	@ (800eb24 <pvPortMalloc+0x188>)
 800e9ba:	681a      	ldr	r2, [r3, #0]
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	4013      	ands	r3, r2
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	f040 8095 	bne.w	800eaf0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d01e      	beq.n	800ea0a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800e9cc:	2208      	movs	r2, #8
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	4413      	add	r3, r2
 800e9d2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	f003 0307 	and.w	r3, r3, #7
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d015      	beq.n	800ea0a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	f023 0307 	bic.w	r3, r3, #7
 800e9e4:	3308      	adds	r3, #8
 800e9e6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	f003 0307 	and.w	r3, r3, #7
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d00b      	beq.n	800ea0a <pvPortMalloc+0x6e>
	__asm volatile
 800e9f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e9f6:	f383 8811 	msr	BASEPRI, r3
 800e9fa:	f3bf 8f6f 	isb	sy
 800e9fe:	f3bf 8f4f 	dsb	sy
 800ea02:	617b      	str	r3, [r7, #20]
}
 800ea04:	bf00      	nop
 800ea06:	bf00      	nop
 800ea08:	e7fd      	b.n	800ea06 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d06f      	beq.n	800eaf0 <pvPortMalloc+0x154>
 800ea10:	4b45      	ldr	r3, [pc, #276]	@ (800eb28 <pvPortMalloc+0x18c>)
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	687a      	ldr	r2, [r7, #4]
 800ea16:	429a      	cmp	r2, r3
 800ea18:	d86a      	bhi.n	800eaf0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ea1a:	4b44      	ldr	r3, [pc, #272]	@ (800eb2c <pvPortMalloc+0x190>)
 800ea1c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ea1e:	4b43      	ldr	r3, [pc, #268]	@ (800eb2c <pvPortMalloc+0x190>)
 800ea20:	681b      	ldr	r3, [r3, #0]
 800ea22:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ea24:	e004      	b.n	800ea30 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800ea26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea28:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ea2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ea30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea32:	685b      	ldr	r3, [r3, #4]
 800ea34:	687a      	ldr	r2, [r7, #4]
 800ea36:	429a      	cmp	r2, r3
 800ea38:	d903      	bls.n	800ea42 <pvPortMalloc+0xa6>
 800ea3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d1f1      	bne.n	800ea26 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ea42:	4b37      	ldr	r3, [pc, #220]	@ (800eb20 <pvPortMalloc+0x184>)
 800ea44:	681b      	ldr	r3, [r3, #0]
 800ea46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ea48:	429a      	cmp	r2, r3
 800ea4a:	d051      	beq.n	800eaf0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ea4c:	6a3b      	ldr	r3, [r7, #32]
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	2208      	movs	r2, #8
 800ea52:	4413      	add	r3, r2
 800ea54:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ea56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea58:	681a      	ldr	r2, [r3, #0]
 800ea5a:	6a3b      	ldr	r3, [r7, #32]
 800ea5c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ea5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea60:	685a      	ldr	r2, [r3, #4]
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	1ad2      	subs	r2, r2, r3
 800ea66:	2308      	movs	r3, #8
 800ea68:	005b      	lsls	r3, r3, #1
 800ea6a:	429a      	cmp	r2, r3
 800ea6c:	d920      	bls.n	800eab0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ea6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	4413      	add	r3, r2
 800ea74:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ea76:	69bb      	ldr	r3, [r7, #24]
 800ea78:	f003 0307 	and.w	r3, r3, #7
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d00b      	beq.n	800ea98 <pvPortMalloc+0xfc>
	__asm volatile
 800ea80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea84:	f383 8811 	msr	BASEPRI, r3
 800ea88:	f3bf 8f6f 	isb	sy
 800ea8c:	f3bf 8f4f 	dsb	sy
 800ea90:	613b      	str	r3, [r7, #16]
}
 800ea92:	bf00      	nop
 800ea94:	bf00      	nop
 800ea96:	e7fd      	b.n	800ea94 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ea98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea9a:	685a      	ldr	r2, [r3, #4]
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	1ad2      	subs	r2, r2, r3
 800eaa0:	69bb      	ldr	r3, [r7, #24]
 800eaa2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800eaa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eaa6:	687a      	ldr	r2, [r7, #4]
 800eaa8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800eaaa:	69b8      	ldr	r0, [r7, #24]
 800eaac:	f000 f90a 	bl	800ecc4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800eab0:	4b1d      	ldr	r3, [pc, #116]	@ (800eb28 <pvPortMalloc+0x18c>)
 800eab2:	681a      	ldr	r2, [r3, #0]
 800eab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eab6:	685b      	ldr	r3, [r3, #4]
 800eab8:	1ad3      	subs	r3, r2, r3
 800eaba:	4a1b      	ldr	r2, [pc, #108]	@ (800eb28 <pvPortMalloc+0x18c>)
 800eabc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800eabe:	4b1a      	ldr	r3, [pc, #104]	@ (800eb28 <pvPortMalloc+0x18c>)
 800eac0:	681a      	ldr	r2, [r3, #0]
 800eac2:	4b1b      	ldr	r3, [pc, #108]	@ (800eb30 <pvPortMalloc+0x194>)
 800eac4:	681b      	ldr	r3, [r3, #0]
 800eac6:	429a      	cmp	r2, r3
 800eac8:	d203      	bcs.n	800ead2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800eaca:	4b17      	ldr	r3, [pc, #92]	@ (800eb28 <pvPortMalloc+0x18c>)
 800eacc:	681b      	ldr	r3, [r3, #0]
 800eace:	4a18      	ldr	r2, [pc, #96]	@ (800eb30 <pvPortMalloc+0x194>)
 800ead0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ead2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ead4:	685a      	ldr	r2, [r3, #4]
 800ead6:	4b13      	ldr	r3, [pc, #76]	@ (800eb24 <pvPortMalloc+0x188>)
 800ead8:	681b      	ldr	r3, [r3, #0]
 800eada:	431a      	orrs	r2, r3
 800eadc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eade:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800eae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eae2:	2200      	movs	r2, #0
 800eae4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800eae6:	4b13      	ldr	r3, [pc, #76]	@ (800eb34 <pvPortMalloc+0x198>)
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	3301      	adds	r3, #1
 800eaec:	4a11      	ldr	r2, [pc, #68]	@ (800eb34 <pvPortMalloc+0x198>)
 800eaee:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800eaf0:	f7fe fbbc 	bl	800d26c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800eaf4:	69fb      	ldr	r3, [r7, #28]
 800eaf6:	f003 0307 	and.w	r3, r3, #7
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	d00b      	beq.n	800eb16 <pvPortMalloc+0x17a>
	__asm volatile
 800eafe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb02:	f383 8811 	msr	BASEPRI, r3
 800eb06:	f3bf 8f6f 	isb	sy
 800eb0a:	f3bf 8f4f 	dsb	sy
 800eb0e:	60fb      	str	r3, [r7, #12]
}
 800eb10:	bf00      	nop
 800eb12:	bf00      	nop
 800eb14:	e7fd      	b.n	800eb12 <pvPortMalloc+0x176>
	return pvReturn;
 800eb16:	69fb      	ldr	r3, [r7, #28]
}
 800eb18:	4618      	mov	r0, r3
 800eb1a:	3728      	adds	r7, #40	@ 0x28
 800eb1c:	46bd      	mov	sp, r7
 800eb1e:	bd80      	pop	{r7, pc}
 800eb20:	20010e14 	.word	0x20010e14
 800eb24:	20010e28 	.word	0x20010e28
 800eb28:	20010e18 	.word	0x20010e18
 800eb2c:	20010e0c 	.word	0x20010e0c
 800eb30:	20010e1c 	.word	0x20010e1c
 800eb34:	20010e20 	.word	0x20010e20

0800eb38 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800eb38:	b580      	push	{r7, lr}
 800eb3a:	b086      	sub	sp, #24
 800eb3c:	af00      	add	r7, sp, #0
 800eb3e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d04f      	beq.n	800ebea <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800eb4a:	2308      	movs	r3, #8
 800eb4c:	425b      	negs	r3, r3
 800eb4e:	697a      	ldr	r2, [r7, #20]
 800eb50:	4413      	add	r3, r2
 800eb52:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800eb54:	697b      	ldr	r3, [r7, #20]
 800eb56:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800eb58:	693b      	ldr	r3, [r7, #16]
 800eb5a:	685a      	ldr	r2, [r3, #4]
 800eb5c:	4b25      	ldr	r3, [pc, #148]	@ (800ebf4 <vPortFree+0xbc>)
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	4013      	ands	r3, r2
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d10b      	bne.n	800eb7e <vPortFree+0x46>
	__asm volatile
 800eb66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb6a:	f383 8811 	msr	BASEPRI, r3
 800eb6e:	f3bf 8f6f 	isb	sy
 800eb72:	f3bf 8f4f 	dsb	sy
 800eb76:	60fb      	str	r3, [r7, #12]
}
 800eb78:	bf00      	nop
 800eb7a:	bf00      	nop
 800eb7c:	e7fd      	b.n	800eb7a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800eb7e:	693b      	ldr	r3, [r7, #16]
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d00b      	beq.n	800eb9e <vPortFree+0x66>
	__asm volatile
 800eb86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb8a:	f383 8811 	msr	BASEPRI, r3
 800eb8e:	f3bf 8f6f 	isb	sy
 800eb92:	f3bf 8f4f 	dsb	sy
 800eb96:	60bb      	str	r3, [r7, #8]
}
 800eb98:	bf00      	nop
 800eb9a:	bf00      	nop
 800eb9c:	e7fd      	b.n	800eb9a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800eb9e:	693b      	ldr	r3, [r7, #16]
 800eba0:	685a      	ldr	r2, [r3, #4]
 800eba2:	4b14      	ldr	r3, [pc, #80]	@ (800ebf4 <vPortFree+0xbc>)
 800eba4:	681b      	ldr	r3, [r3, #0]
 800eba6:	4013      	ands	r3, r2
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d01e      	beq.n	800ebea <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ebac:	693b      	ldr	r3, [r7, #16]
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d11a      	bne.n	800ebea <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ebb4:	693b      	ldr	r3, [r7, #16]
 800ebb6:	685a      	ldr	r2, [r3, #4]
 800ebb8:	4b0e      	ldr	r3, [pc, #56]	@ (800ebf4 <vPortFree+0xbc>)
 800ebba:	681b      	ldr	r3, [r3, #0]
 800ebbc:	43db      	mvns	r3, r3
 800ebbe:	401a      	ands	r2, r3
 800ebc0:	693b      	ldr	r3, [r7, #16]
 800ebc2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ebc4:	f7fe fb44 	bl	800d250 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ebc8:	693b      	ldr	r3, [r7, #16]
 800ebca:	685a      	ldr	r2, [r3, #4]
 800ebcc:	4b0a      	ldr	r3, [pc, #40]	@ (800ebf8 <vPortFree+0xc0>)
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	4413      	add	r3, r2
 800ebd2:	4a09      	ldr	r2, [pc, #36]	@ (800ebf8 <vPortFree+0xc0>)
 800ebd4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ebd6:	6938      	ldr	r0, [r7, #16]
 800ebd8:	f000 f874 	bl	800ecc4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ebdc:	4b07      	ldr	r3, [pc, #28]	@ (800ebfc <vPortFree+0xc4>)
 800ebde:	681b      	ldr	r3, [r3, #0]
 800ebe0:	3301      	adds	r3, #1
 800ebe2:	4a06      	ldr	r2, [pc, #24]	@ (800ebfc <vPortFree+0xc4>)
 800ebe4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ebe6:	f7fe fb41 	bl	800d26c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ebea:	bf00      	nop
 800ebec:	3718      	adds	r7, #24
 800ebee:	46bd      	mov	sp, r7
 800ebf0:	bd80      	pop	{r7, pc}
 800ebf2:	bf00      	nop
 800ebf4:	20010e28 	.word	0x20010e28
 800ebf8:	20010e18 	.word	0x20010e18
 800ebfc:	20010e24 	.word	0x20010e24

0800ec00 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ec00:	b480      	push	{r7}
 800ec02:	b085      	sub	sp, #20
 800ec04:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ec06:	f44f 437a 	mov.w	r3, #64000	@ 0xfa00
 800ec0a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ec0c:	4b27      	ldr	r3, [pc, #156]	@ (800ecac <prvHeapInit+0xac>)
 800ec0e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ec10:	68fb      	ldr	r3, [r7, #12]
 800ec12:	f003 0307 	and.w	r3, r3, #7
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d00c      	beq.n	800ec34 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	3307      	adds	r3, #7
 800ec1e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	f023 0307 	bic.w	r3, r3, #7
 800ec26:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ec28:	68ba      	ldr	r2, [r7, #8]
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	1ad3      	subs	r3, r2, r3
 800ec2e:	4a1f      	ldr	r2, [pc, #124]	@ (800ecac <prvHeapInit+0xac>)
 800ec30:	4413      	add	r3, r2
 800ec32:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ec38:	4a1d      	ldr	r2, [pc, #116]	@ (800ecb0 <prvHeapInit+0xb0>)
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ec3e:	4b1c      	ldr	r3, [pc, #112]	@ (800ecb0 <prvHeapInit+0xb0>)
 800ec40:	2200      	movs	r2, #0
 800ec42:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	68ba      	ldr	r2, [r7, #8]
 800ec48:	4413      	add	r3, r2
 800ec4a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ec4c:	2208      	movs	r2, #8
 800ec4e:	68fb      	ldr	r3, [r7, #12]
 800ec50:	1a9b      	subs	r3, r3, r2
 800ec52:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	f023 0307 	bic.w	r3, r3, #7
 800ec5a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ec5c:	68fb      	ldr	r3, [r7, #12]
 800ec5e:	4a15      	ldr	r2, [pc, #84]	@ (800ecb4 <prvHeapInit+0xb4>)
 800ec60:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ec62:	4b14      	ldr	r3, [pc, #80]	@ (800ecb4 <prvHeapInit+0xb4>)
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	2200      	movs	r2, #0
 800ec68:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ec6a:	4b12      	ldr	r3, [pc, #72]	@ (800ecb4 <prvHeapInit+0xb4>)
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	2200      	movs	r2, #0
 800ec70:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ec76:	683b      	ldr	r3, [r7, #0]
 800ec78:	68fa      	ldr	r2, [r7, #12]
 800ec7a:	1ad2      	subs	r2, r2, r3
 800ec7c:	683b      	ldr	r3, [r7, #0]
 800ec7e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ec80:	4b0c      	ldr	r3, [pc, #48]	@ (800ecb4 <prvHeapInit+0xb4>)
 800ec82:	681a      	ldr	r2, [r3, #0]
 800ec84:	683b      	ldr	r3, [r7, #0]
 800ec86:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ec88:	683b      	ldr	r3, [r7, #0]
 800ec8a:	685b      	ldr	r3, [r3, #4]
 800ec8c:	4a0a      	ldr	r2, [pc, #40]	@ (800ecb8 <prvHeapInit+0xb8>)
 800ec8e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ec90:	683b      	ldr	r3, [r7, #0]
 800ec92:	685b      	ldr	r3, [r3, #4]
 800ec94:	4a09      	ldr	r2, [pc, #36]	@ (800ecbc <prvHeapInit+0xbc>)
 800ec96:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ec98:	4b09      	ldr	r3, [pc, #36]	@ (800ecc0 <prvHeapInit+0xc0>)
 800ec9a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800ec9e:	601a      	str	r2, [r3, #0]
}
 800eca0:	bf00      	nop
 800eca2:	3714      	adds	r7, #20
 800eca4:	46bd      	mov	sp, r7
 800eca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecaa:	4770      	bx	lr
 800ecac:	2000140c 	.word	0x2000140c
 800ecb0:	20010e0c 	.word	0x20010e0c
 800ecb4:	20010e14 	.word	0x20010e14
 800ecb8:	20010e1c 	.word	0x20010e1c
 800ecbc:	20010e18 	.word	0x20010e18
 800ecc0:	20010e28 	.word	0x20010e28

0800ecc4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ecc4:	b480      	push	{r7}
 800ecc6:	b085      	sub	sp, #20
 800ecc8:	af00      	add	r7, sp, #0
 800ecca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800eccc:	4b28      	ldr	r3, [pc, #160]	@ (800ed70 <prvInsertBlockIntoFreeList+0xac>)
 800ecce:	60fb      	str	r3, [r7, #12]
 800ecd0:	e002      	b.n	800ecd8 <prvInsertBlockIntoFreeList+0x14>
 800ecd2:	68fb      	ldr	r3, [r7, #12]
 800ecd4:	681b      	ldr	r3, [r3, #0]
 800ecd6:	60fb      	str	r3, [r7, #12]
 800ecd8:	68fb      	ldr	r3, [r7, #12]
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	687a      	ldr	r2, [r7, #4]
 800ecde:	429a      	cmp	r2, r3
 800ece0:	d8f7      	bhi.n	800ecd2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ece6:	68fb      	ldr	r3, [r7, #12]
 800ece8:	685b      	ldr	r3, [r3, #4]
 800ecea:	68ba      	ldr	r2, [r7, #8]
 800ecec:	4413      	add	r3, r2
 800ecee:	687a      	ldr	r2, [r7, #4]
 800ecf0:	429a      	cmp	r2, r3
 800ecf2:	d108      	bne.n	800ed06 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	685a      	ldr	r2, [r3, #4]
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	685b      	ldr	r3, [r3, #4]
 800ecfc:	441a      	add	r2, r3
 800ecfe:	68fb      	ldr	r3, [r7, #12]
 800ed00:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	685b      	ldr	r3, [r3, #4]
 800ed0e:	68ba      	ldr	r2, [r7, #8]
 800ed10:	441a      	add	r2, r3
 800ed12:	68fb      	ldr	r3, [r7, #12]
 800ed14:	681b      	ldr	r3, [r3, #0]
 800ed16:	429a      	cmp	r2, r3
 800ed18:	d118      	bne.n	800ed4c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	681a      	ldr	r2, [r3, #0]
 800ed1e:	4b15      	ldr	r3, [pc, #84]	@ (800ed74 <prvInsertBlockIntoFreeList+0xb0>)
 800ed20:	681b      	ldr	r3, [r3, #0]
 800ed22:	429a      	cmp	r2, r3
 800ed24:	d00d      	beq.n	800ed42 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	685a      	ldr	r2, [r3, #4]
 800ed2a:	68fb      	ldr	r3, [r7, #12]
 800ed2c:	681b      	ldr	r3, [r3, #0]
 800ed2e:	685b      	ldr	r3, [r3, #4]
 800ed30:	441a      	add	r2, r3
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ed36:	68fb      	ldr	r3, [r7, #12]
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	681a      	ldr	r2, [r3, #0]
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	601a      	str	r2, [r3, #0]
 800ed40:	e008      	b.n	800ed54 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ed42:	4b0c      	ldr	r3, [pc, #48]	@ (800ed74 <prvInsertBlockIntoFreeList+0xb0>)
 800ed44:	681a      	ldr	r2, [r3, #0]
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	601a      	str	r2, [r3, #0]
 800ed4a:	e003      	b.n	800ed54 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	681a      	ldr	r2, [r3, #0]
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ed54:	68fa      	ldr	r2, [r7, #12]
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	429a      	cmp	r2, r3
 800ed5a:	d002      	beq.n	800ed62 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	687a      	ldr	r2, [r7, #4]
 800ed60:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ed62:	bf00      	nop
 800ed64:	3714      	adds	r7, #20
 800ed66:	46bd      	mov	sp, r7
 800ed68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed6c:	4770      	bx	lr
 800ed6e:	bf00      	nop
 800ed70:	20010e0c 	.word	0x20010e0c
 800ed74:	20010e14 	.word	0x20010e14

0800ed78 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800ed78:	b580      	push	{r7, lr}
 800ed7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800ed7c:	2200      	movs	r2, #0
 800ed7e:	4912      	ldr	r1, [pc, #72]	@ (800edc8 <MX_USB_Device_Init+0x50>)
 800ed80:	4812      	ldr	r0, [pc, #72]	@ (800edcc <MX_USB_Device_Init+0x54>)
 800ed82:	f7fb fa25 	bl	800a1d0 <USBD_Init>
 800ed86:	4603      	mov	r3, r0
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d001      	beq.n	800ed90 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800ed8c:	f7f4 f980 	bl	8003090 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800ed90:	490f      	ldr	r1, [pc, #60]	@ (800edd0 <MX_USB_Device_Init+0x58>)
 800ed92:	480e      	ldr	r0, [pc, #56]	@ (800edcc <MX_USB_Device_Init+0x54>)
 800ed94:	f7fb fa4c 	bl	800a230 <USBD_RegisterClass>
 800ed98:	4603      	mov	r3, r0
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	d001      	beq.n	800eda2 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800ed9e:	f7f4 f977 	bl	8003090 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800eda2:	490c      	ldr	r1, [pc, #48]	@ (800edd4 <MX_USB_Device_Init+0x5c>)
 800eda4:	4809      	ldr	r0, [pc, #36]	@ (800edcc <MX_USB_Device_Init+0x54>)
 800eda6:	f7fb f96d 	bl	800a084 <USBD_CDC_RegisterInterface>
 800edaa:	4603      	mov	r3, r0
 800edac:	2b00      	cmp	r3, #0
 800edae:	d001      	beq.n	800edb4 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800edb0:	f7f4 f96e 	bl	8003090 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800edb4:	4805      	ldr	r0, [pc, #20]	@ (800edcc <MX_USB_Device_Init+0x54>)
 800edb6:	f7fb fa62 	bl	800a27e <USBD_Start>
 800edba:	4603      	mov	r3, r0
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d001      	beq.n	800edc4 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800edc0:	f7f4 f966 	bl	8003090 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800edc4:	bf00      	nop
 800edc6:	bd80      	pop	{r7, pc}
 800edc8:	20000154 	.word	0x20000154
 800edcc:	20010e2c 	.word	0x20010e2c
 800edd0:	20000038 	.word	0x20000038
 800edd4:	20000140 	.word	0x20000140

0800edd8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800edd8:	b580      	push	{r7, lr}
 800edda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800eddc:	2200      	movs	r2, #0
 800edde:	4905      	ldr	r1, [pc, #20]	@ (800edf4 <CDC_Init_FS+0x1c>)
 800ede0:	4805      	ldr	r0, [pc, #20]	@ (800edf8 <CDC_Init_FS+0x20>)
 800ede2:	f7fb f964 	bl	800a0ae <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ede6:	4905      	ldr	r1, [pc, #20]	@ (800edfc <CDC_Init_FS+0x24>)
 800ede8:	4803      	ldr	r0, [pc, #12]	@ (800edf8 <CDC_Init_FS+0x20>)
 800edea:	f7fb f97e 	bl	800a0ea <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800edee:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800edf0:	4618      	mov	r0, r3
 800edf2:	bd80      	pop	{r7, pc}
 800edf4:	200118fc 	.word	0x200118fc
 800edf8:	20010e2c 	.word	0x20010e2c
 800edfc:	200110fc 	.word	0x200110fc

0800ee00 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ee00:	b480      	push	{r7}
 800ee02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ee04:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ee06:	4618      	mov	r0, r3
 800ee08:	46bd      	mov	sp, r7
 800ee0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee0e:	4770      	bx	lr

0800ee10 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ee10:	b480      	push	{r7}
 800ee12:	b083      	sub	sp, #12
 800ee14:	af00      	add	r7, sp, #0
 800ee16:	4603      	mov	r3, r0
 800ee18:	6039      	str	r1, [r7, #0]
 800ee1a:	71fb      	strb	r3, [r7, #7]
 800ee1c:	4613      	mov	r3, r2
 800ee1e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ee20:	79fb      	ldrb	r3, [r7, #7]
 800ee22:	2b23      	cmp	r3, #35	@ 0x23
 800ee24:	d84a      	bhi.n	800eebc <CDC_Control_FS+0xac>
 800ee26:	a201      	add	r2, pc, #4	@ (adr r2, 800ee2c <CDC_Control_FS+0x1c>)
 800ee28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee2c:	0800eebd 	.word	0x0800eebd
 800ee30:	0800eebd 	.word	0x0800eebd
 800ee34:	0800eebd 	.word	0x0800eebd
 800ee38:	0800eebd 	.word	0x0800eebd
 800ee3c:	0800eebd 	.word	0x0800eebd
 800ee40:	0800eebd 	.word	0x0800eebd
 800ee44:	0800eebd 	.word	0x0800eebd
 800ee48:	0800eebd 	.word	0x0800eebd
 800ee4c:	0800eebd 	.word	0x0800eebd
 800ee50:	0800eebd 	.word	0x0800eebd
 800ee54:	0800eebd 	.word	0x0800eebd
 800ee58:	0800eebd 	.word	0x0800eebd
 800ee5c:	0800eebd 	.word	0x0800eebd
 800ee60:	0800eebd 	.word	0x0800eebd
 800ee64:	0800eebd 	.word	0x0800eebd
 800ee68:	0800eebd 	.word	0x0800eebd
 800ee6c:	0800eebd 	.word	0x0800eebd
 800ee70:	0800eebd 	.word	0x0800eebd
 800ee74:	0800eebd 	.word	0x0800eebd
 800ee78:	0800eebd 	.word	0x0800eebd
 800ee7c:	0800eebd 	.word	0x0800eebd
 800ee80:	0800eebd 	.word	0x0800eebd
 800ee84:	0800eebd 	.word	0x0800eebd
 800ee88:	0800eebd 	.word	0x0800eebd
 800ee8c:	0800eebd 	.word	0x0800eebd
 800ee90:	0800eebd 	.word	0x0800eebd
 800ee94:	0800eebd 	.word	0x0800eebd
 800ee98:	0800eebd 	.word	0x0800eebd
 800ee9c:	0800eebd 	.word	0x0800eebd
 800eea0:	0800eebd 	.word	0x0800eebd
 800eea4:	0800eebd 	.word	0x0800eebd
 800eea8:	0800eebd 	.word	0x0800eebd
 800eeac:	0800eebd 	.word	0x0800eebd
 800eeb0:	0800eebd 	.word	0x0800eebd
 800eeb4:	0800eebd 	.word	0x0800eebd
 800eeb8:	0800eebd 	.word	0x0800eebd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800eebc:	bf00      	nop
  }

  return (USBD_OK);
 800eebe:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800eec0:	4618      	mov	r0, r3
 800eec2:	370c      	adds	r7, #12
 800eec4:	46bd      	mov	sp, r7
 800eec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeca:	4770      	bx	lr

0800eecc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800eecc:	b580      	push	{r7, lr}
 800eece:	b082      	sub	sp, #8
 800eed0:	af00      	add	r7, sp, #0
 800eed2:	6078      	str	r0, [r7, #4]
 800eed4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800eed6:	6879      	ldr	r1, [r7, #4]
 800eed8:	4805      	ldr	r0, [pc, #20]	@ (800eef0 <CDC_Receive_FS+0x24>)
 800eeda:	f7fb f906 	bl	800a0ea <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800eede:	4804      	ldr	r0, [pc, #16]	@ (800eef0 <CDC_Receive_FS+0x24>)
 800eee0:	f7fb f94c 	bl	800a17c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800eee4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800eee6:	4618      	mov	r0, r3
 800eee8:	3708      	adds	r7, #8
 800eeea:	46bd      	mov	sp, r7
 800eeec:	bd80      	pop	{r7, pc}
 800eeee:	bf00      	nop
 800eef0:	20010e2c 	.word	0x20010e2c

0800eef4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800eef4:	b580      	push	{r7, lr}
 800eef6:	b084      	sub	sp, #16
 800eef8:	af00      	add	r7, sp, #0
 800eefa:	6078      	str	r0, [r7, #4]
 800eefc:	460b      	mov	r3, r1
 800eefe:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800ef00:	2300      	movs	r3, #0
 800ef02:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800ef04:	4b0d      	ldr	r3, [pc, #52]	@ (800ef3c <CDC_Transmit_FS+0x48>)
 800ef06:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ef0a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800ef0c:	68bb      	ldr	r3, [r7, #8]
 800ef0e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	d001      	beq.n	800ef1a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800ef16:	2301      	movs	r3, #1
 800ef18:	e00b      	b.n	800ef32 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800ef1a:	887b      	ldrh	r3, [r7, #2]
 800ef1c:	461a      	mov	r2, r3
 800ef1e:	6879      	ldr	r1, [r7, #4]
 800ef20:	4806      	ldr	r0, [pc, #24]	@ (800ef3c <CDC_Transmit_FS+0x48>)
 800ef22:	f7fb f8c4 	bl	800a0ae <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800ef26:	4805      	ldr	r0, [pc, #20]	@ (800ef3c <CDC_Transmit_FS+0x48>)
 800ef28:	f7fb f8f8 	bl	800a11c <USBD_CDC_TransmitPacket>
 800ef2c:	4603      	mov	r3, r0
 800ef2e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800ef30:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef32:	4618      	mov	r0, r3
 800ef34:	3710      	adds	r7, #16
 800ef36:	46bd      	mov	sp, r7
 800ef38:	bd80      	pop	{r7, pc}
 800ef3a:	bf00      	nop
 800ef3c:	20010e2c 	.word	0x20010e2c

0800ef40 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800ef40:	b480      	push	{r7}
 800ef42:	b087      	sub	sp, #28
 800ef44:	af00      	add	r7, sp, #0
 800ef46:	60f8      	str	r0, [r7, #12]
 800ef48:	60b9      	str	r1, [r7, #8]
 800ef4a:	4613      	mov	r3, r2
 800ef4c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800ef4e:	2300      	movs	r3, #0
 800ef50:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800ef52:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ef56:	4618      	mov	r0, r3
 800ef58:	371c      	adds	r7, #28
 800ef5a:	46bd      	mov	sp, r7
 800ef5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef60:	4770      	bx	lr
	...

0800ef64 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ef64:	b480      	push	{r7}
 800ef66:	b083      	sub	sp, #12
 800ef68:	af00      	add	r7, sp, #0
 800ef6a:	4603      	mov	r3, r0
 800ef6c:	6039      	str	r1, [r7, #0]
 800ef6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800ef70:	683b      	ldr	r3, [r7, #0]
 800ef72:	2212      	movs	r2, #18
 800ef74:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800ef76:	4b03      	ldr	r3, [pc, #12]	@ (800ef84 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800ef78:	4618      	mov	r0, r3
 800ef7a:	370c      	adds	r7, #12
 800ef7c:	46bd      	mov	sp, r7
 800ef7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef82:	4770      	bx	lr
 800ef84:	20000174 	.word	0x20000174

0800ef88 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ef88:	b480      	push	{r7}
 800ef8a:	b083      	sub	sp, #12
 800ef8c:	af00      	add	r7, sp, #0
 800ef8e:	4603      	mov	r3, r0
 800ef90:	6039      	str	r1, [r7, #0]
 800ef92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ef94:	683b      	ldr	r3, [r7, #0]
 800ef96:	2204      	movs	r2, #4
 800ef98:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ef9a:	4b03      	ldr	r3, [pc, #12]	@ (800efa8 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800ef9c:	4618      	mov	r0, r3
 800ef9e:	370c      	adds	r7, #12
 800efa0:	46bd      	mov	sp, r7
 800efa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efa6:	4770      	bx	lr
 800efa8:	20000188 	.word	0x20000188

0800efac <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800efac:	b580      	push	{r7, lr}
 800efae:	b082      	sub	sp, #8
 800efb0:	af00      	add	r7, sp, #0
 800efb2:	4603      	mov	r3, r0
 800efb4:	6039      	str	r1, [r7, #0]
 800efb6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800efb8:	79fb      	ldrb	r3, [r7, #7]
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d105      	bne.n	800efca <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800efbe:	683a      	ldr	r2, [r7, #0]
 800efc0:	4907      	ldr	r1, [pc, #28]	@ (800efe0 <USBD_CDC_ProductStrDescriptor+0x34>)
 800efc2:	4808      	ldr	r0, [pc, #32]	@ (800efe4 <USBD_CDC_ProductStrDescriptor+0x38>)
 800efc4:	f7fc f943 	bl	800b24e <USBD_GetString>
 800efc8:	e004      	b.n	800efd4 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800efca:	683a      	ldr	r2, [r7, #0]
 800efcc:	4904      	ldr	r1, [pc, #16]	@ (800efe0 <USBD_CDC_ProductStrDescriptor+0x34>)
 800efce:	4805      	ldr	r0, [pc, #20]	@ (800efe4 <USBD_CDC_ProductStrDescriptor+0x38>)
 800efd0:	f7fc f93d 	bl	800b24e <USBD_GetString>
  }
  return USBD_StrDesc;
 800efd4:	4b02      	ldr	r3, [pc, #8]	@ (800efe0 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800efd6:	4618      	mov	r0, r3
 800efd8:	3708      	adds	r7, #8
 800efda:	46bd      	mov	sp, r7
 800efdc:	bd80      	pop	{r7, pc}
 800efde:	bf00      	nop
 800efe0:	200120fc 	.word	0x200120fc
 800efe4:	08013424 	.word	0x08013424

0800efe8 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800efe8:	b580      	push	{r7, lr}
 800efea:	b082      	sub	sp, #8
 800efec:	af00      	add	r7, sp, #0
 800efee:	4603      	mov	r3, r0
 800eff0:	6039      	str	r1, [r7, #0]
 800eff2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800eff4:	683a      	ldr	r2, [r7, #0]
 800eff6:	4904      	ldr	r1, [pc, #16]	@ (800f008 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800eff8:	4804      	ldr	r0, [pc, #16]	@ (800f00c <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800effa:	f7fc f928 	bl	800b24e <USBD_GetString>
  return USBD_StrDesc;
 800effe:	4b02      	ldr	r3, [pc, #8]	@ (800f008 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800f000:	4618      	mov	r0, r3
 800f002:	3708      	adds	r7, #8
 800f004:	46bd      	mov	sp, r7
 800f006:	bd80      	pop	{r7, pc}
 800f008:	200120fc 	.word	0x200120fc
 800f00c:	0801343c 	.word	0x0801343c

0800f010 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f010:	b580      	push	{r7, lr}
 800f012:	b082      	sub	sp, #8
 800f014:	af00      	add	r7, sp, #0
 800f016:	4603      	mov	r3, r0
 800f018:	6039      	str	r1, [r7, #0]
 800f01a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800f01c:	683b      	ldr	r3, [r7, #0]
 800f01e:	221a      	movs	r2, #26
 800f020:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800f022:	f000 f843 	bl	800f0ac <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800f026:	4b02      	ldr	r3, [pc, #8]	@ (800f030 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800f028:	4618      	mov	r0, r3
 800f02a:	3708      	adds	r7, #8
 800f02c:	46bd      	mov	sp, r7
 800f02e:	bd80      	pop	{r7, pc}
 800f030:	2000018c 	.word	0x2000018c

0800f034 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f034:	b580      	push	{r7, lr}
 800f036:	b082      	sub	sp, #8
 800f038:	af00      	add	r7, sp, #0
 800f03a:	4603      	mov	r3, r0
 800f03c:	6039      	str	r1, [r7, #0]
 800f03e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800f040:	79fb      	ldrb	r3, [r7, #7]
 800f042:	2b00      	cmp	r3, #0
 800f044:	d105      	bne.n	800f052 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800f046:	683a      	ldr	r2, [r7, #0]
 800f048:	4907      	ldr	r1, [pc, #28]	@ (800f068 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800f04a:	4808      	ldr	r0, [pc, #32]	@ (800f06c <USBD_CDC_ConfigStrDescriptor+0x38>)
 800f04c:	f7fc f8ff 	bl	800b24e <USBD_GetString>
 800f050:	e004      	b.n	800f05c <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800f052:	683a      	ldr	r2, [r7, #0]
 800f054:	4904      	ldr	r1, [pc, #16]	@ (800f068 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800f056:	4805      	ldr	r0, [pc, #20]	@ (800f06c <USBD_CDC_ConfigStrDescriptor+0x38>)
 800f058:	f7fc f8f9 	bl	800b24e <USBD_GetString>
  }
  return USBD_StrDesc;
 800f05c:	4b02      	ldr	r3, [pc, #8]	@ (800f068 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800f05e:	4618      	mov	r0, r3
 800f060:	3708      	adds	r7, #8
 800f062:	46bd      	mov	sp, r7
 800f064:	bd80      	pop	{r7, pc}
 800f066:	bf00      	nop
 800f068:	200120fc 	.word	0x200120fc
 800f06c:	08013450 	.word	0x08013450

0800f070 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f070:	b580      	push	{r7, lr}
 800f072:	b082      	sub	sp, #8
 800f074:	af00      	add	r7, sp, #0
 800f076:	4603      	mov	r3, r0
 800f078:	6039      	str	r1, [r7, #0]
 800f07a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f07c:	79fb      	ldrb	r3, [r7, #7]
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d105      	bne.n	800f08e <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800f082:	683a      	ldr	r2, [r7, #0]
 800f084:	4907      	ldr	r1, [pc, #28]	@ (800f0a4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800f086:	4808      	ldr	r0, [pc, #32]	@ (800f0a8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800f088:	f7fc f8e1 	bl	800b24e <USBD_GetString>
 800f08c:	e004      	b.n	800f098 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800f08e:	683a      	ldr	r2, [r7, #0]
 800f090:	4904      	ldr	r1, [pc, #16]	@ (800f0a4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800f092:	4805      	ldr	r0, [pc, #20]	@ (800f0a8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800f094:	f7fc f8db 	bl	800b24e <USBD_GetString>
  }
  return USBD_StrDesc;
 800f098:	4b02      	ldr	r3, [pc, #8]	@ (800f0a4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800f09a:	4618      	mov	r0, r3
 800f09c:	3708      	adds	r7, #8
 800f09e:	46bd      	mov	sp, r7
 800f0a0:	bd80      	pop	{r7, pc}
 800f0a2:	bf00      	nop
 800f0a4:	200120fc 	.word	0x200120fc
 800f0a8:	0801345c 	.word	0x0801345c

0800f0ac <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f0ac:	b580      	push	{r7, lr}
 800f0ae:	b084      	sub	sp, #16
 800f0b0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f0b2:	4b0f      	ldr	r3, [pc, #60]	@ (800f0f0 <Get_SerialNum+0x44>)
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f0b8:	4b0e      	ldr	r3, [pc, #56]	@ (800f0f4 <Get_SerialNum+0x48>)
 800f0ba:	681b      	ldr	r3, [r3, #0]
 800f0bc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800f0be:	4b0e      	ldr	r3, [pc, #56]	@ (800f0f8 <Get_SerialNum+0x4c>)
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f0c4:	68fa      	ldr	r2, [r7, #12]
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	4413      	add	r3, r2
 800f0ca:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f0cc:	68fb      	ldr	r3, [r7, #12]
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d009      	beq.n	800f0e6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f0d2:	2208      	movs	r2, #8
 800f0d4:	4909      	ldr	r1, [pc, #36]	@ (800f0fc <Get_SerialNum+0x50>)
 800f0d6:	68f8      	ldr	r0, [r7, #12]
 800f0d8:	f000 f814 	bl	800f104 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f0dc:	2204      	movs	r2, #4
 800f0de:	4908      	ldr	r1, [pc, #32]	@ (800f100 <Get_SerialNum+0x54>)
 800f0e0:	68b8      	ldr	r0, [r7, #8]
 800f0e2:	f000 f80f 	bl	800f104 <IntToUnicode>
  }
}
 800f0e6:	bf00      	nop
 800f0e8:	3710      	adds	r7, #16
 800f0ea:	46bd      	mov	sp, r7
 800f0ec:	bd80      	pop	{r7, pc}
 800f0ee:	bf00      	nop
 800f0f0:	1fff7590 	.word	0x1fff7590
 800f0f4:	1fff7594 	.word	0x1fff7594
 800f0f8:	1fff7598 	.word	0x1fff7598
 800f0fc:	2000018e 	.word	0x2000018e
 800f100:	2000019e 	.word	0x2000019e

0800f104 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f104:	b480      	push	{r7}
 800f106:	b087      	sub	sp, #28
 800f108:	af00      	add	r7, sp, #0
 800f10a:	60f8      	str	r0, [r7, #12]
 800f10c:	60b9      	str	r1, [r7, #8]
 800f10e:	4613      	mov	r3, r2
 800f110:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f112:	2300      	movs	r3, #0
 800f114:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f116:	2300      	movs	r3, #0
 800f118:	75fb      	strb	r3, [r7, #23]
 800f11a:	e027      	b.n	800f16c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	0f1b      	lsrs	r3, r3, #28
 800f120:	2b09      	cmp	r3, #9
 800f122:	d80b      	bhi.n	800f13c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f124:	68fb      	ldr	r3, [r7, #12]
 800f126:	0f1b      	lsrs	r3, r3, #28
 800f128:	b2da      	uxtb	r2, r3
 800f12a:	7dfb      	ldrb	r3, [r7, #23]
 800f12c:	005b      	lsls	r3, r3, #1
 800f12e:	4619      	mov	r1, r3
 800f130:	68bb      	ldr	r3, [r7, #8]
 800f132:	440b      	add	r3, r1
 800f134:	3230      	adds	r2, #48	@ 0x30
 800f136:	b2d2      	uxtb	r2, r2
 800f138:	701a      	strb	r2, [r3, #0]
 800f13a:	e00a      	b.n	800f152 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f13c:	68fb      	ldr	r3, [r7, #12]
 800f13e:	0f1b      	lsrs	r3, r3, #28
 800f140:	b2da      	uxtb	r2, r3
 800f142:	7dfb      	ldrb	r3, [r7, #23]
 800f144:	005b      	lsls	r3, r3, #1
 800f146:	4619      	mov	r1, r3
 800f148:	68bb      	ldr	r3, [r7, #8]
 800f14a:	440b      	add	r3, r1
 800f14c:	3237      	adds	r2, #55	@ 0x37
 800f14e:	b2d2      	uxtb	r2, r2
 800f150:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f152:	68fb      	ldr	r3, [r7, #12]
 800f154:	011b      	lsls	r3, r3, #4
 800f156:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f158:	7dfb      	ldrb	r3, [r7, #23]
 800f15a:	005b      	lsls	r3, r3, #1
 800f15c:	3301      	adds	r3, #1
 800f15e:	68ba      	ldr	r2, [r7, #8]
 800f160:	4413      	add	r3, r2
 800f162:	2200      	movs	r2, #0
 800f164:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f166:	7dfb      	ldrb	r3, [r7, #23]
 800f168:	3301      	adds	r3, #1
 800f16a:	75fb      	strb	r3, [r7, #23]
 800f16c:	7dfa      	ldrb	r2, [r7, #23]
 800f16e:	79fb      	ldrb	r3, [r7, #7]
 800f170:	429a      	cmp	r2, r3
 800f172:	d3d3      	bcc.n	800f11c <IntToUnicode+0x18>
  }
}
 800f174:	bf00      	nop
 800f176:	bf00      	nop
 800f178:	371c      	adds	r7, #28
 800f17a:	46bd      	mov	sp, r7
 800f17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f180:	4770      	bx	lr
	...

0800f184 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f184:	b580      	push	{r7, lr}
 800f186:	b098      	sub	sp, #96	@ 0x60
 800f188:	af00      	add	r7, sp, #0
 800f18a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800f18c:	f107 0310 	add.w	r3, r7, #16
 800f190:	2250      	movs	r2, #80	@ 0x50
 800f192:	2100      	movs	r1, #0
 800f194:	4618      	mov	r0, r3
 800f196:	f001 f84d 	bl	8010234 <memset>
  if(pcdHandle->Instance==USB)
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	4a15      	ldr	r2, [pc, #84]	@ (800f1f4 <HAL_PCD_MspInit+0x70>)
 800f1a0:	4293      	cmp	r3, r2
 800f1a2:	d122      	bne.n	800f1ea <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800f1a4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800f1a8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800f1aa:	2300      	movs	r3, #0
 800f1ac:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800f1ae:	f107 0310 	add.w	r3, r7, #16
 800f1b2:	4618      	mov	r0, r3
 800f1b4:	f7f7 fb38 	bl	8006828 <HAL_RCCEx_PeriphCLKConfig>
 800f1b8:	4603      	mov	r3, r0
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d001      	beq.n	800f1c2 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800f1be:	f7f3 ff67 	bl	8003090 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800f1c2:	4b0d      	ldr	r3, [pc, #52]	@ (800f1f8 <HAL_PCD_MspInit+0x74>)
 800f1c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f1c6:	4a0c      	ldr	r2, [pc, #48]	@ (800f1f8 <HAL_PCD_MspInit+0x74>)
 800f1c8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800f1cc:	6593      	str	r3, [r2, #88]	@ 0x58
 800f1ce:	4b0a      	ldr	r3, [pc, #40]	@ (800f1f8 <HAL_PCD_MspInit+0x74>)
 800f1d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f1d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f1d6:	60fb      	str	r3, [r7, #12]
 800f1d8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 800f1da:	2200      	movs	r2, #0
 800f1dc:	2105      	movs	r1, #5
 800f1de:	2014      	movs	r0, #20
 800f1e0:	f7f4 fba2 	bl	8003928 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800f1e4:	2014      	movs	r0, #20
 800f1e6:	f7f4 fbb9 	bl	800395c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800f1ea:	bf00      	nop
 800f1ec:	3760      	adds	r7, #96	@ 0x60
 800f1ee:	46bd      	mov	sp, r7
 800f1f0:	bd80      	pop	{r7, pc}
 800f1f2:	bf00      	nop
 800f1f4:	40005c00 	.word	0x40005c00
 800f1f8:	40021000 	.word	0x40021000

0800f1fc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f1fc:	b580      	push	{r7, lr}
 800f1fe:	b082      	sub	sp, #8
 800f200:	af00      	add	r7, sp, #0
 800f202:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800f210:	4619      	mov	r1, r3
 800f212:	4610      	mov	r0, r2
 800f214:	f7fb f87e 	bl	800a314 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800f218:	bf00      	nop
 800f21a:	3708      	adds	r7, #8
 800f21c:	46bd      	mov	sp, r7
 800f21e:	bd80      	pop	{r7, pc}

0800f220 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f220:	b580      	push	{r7, lr}
 800f222:	b082      	sub	sp, #8
 800f224:	af00      	add	r7, sp, #0
 800f226:	6078      	str	r0, [r7, #4]
 800f228:	460b      	mov	r3, r1
 800f22a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800f232:	78fa      	ldrb	r2, [r7, #3]
 800f234:	6879      	ldr	r1, [r7, #4]
 800f236:	4613      	mov	r3, r2
 800f238:	009b      	lsls	r3, r3, #2
 800f23a:	4413      	add	r3, r2
 800f23c:	00db      	lsls	r3, r3, #3
 800f23e:	440b      	add	r3, r1
 800f240:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800f244:	681a      	ldr	r2, [r3, #0]
 800f246:	78fb      	ldrb	r3, [r7, #3]
 800f248:	4619      	mov	r1, r3
 800f24a:	f7fb f8b8 	bl	800a3be <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800f24e:	bf00      	nop
 800f250:	3708      	adds	r7, #8
 800f252:	46bd      	mov	sp, r7
 800f254:	bd80      	pop	{r7, pc}

0800f256 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f256:	b580      	push	{r7, lr}
 800f258:	b082      	sub	sp, #8
 800f25a:	af00      	add	r7, sp, #0
 800f25c:	6078      	str	r0, [r7, #4]
 800f25e:	460b      	mov	r3, r1
 800f260:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800f268:	78fa      	ldrb	r2, [r7, #3]
 800f26a:	6879      	ldr	r1, [r7, #4]
 800f26c:	4613      	mov	r3, r2
 800f26e:	009b      	lsls	r3, r3, #2
 800f270:	4413      	add	r3, r2
 800f272:	00db      	lsls	r3, r3, #3
 800f274:	440b      	add	r3, r1
 800f276:	3324      	adds	r3, #36	@ 0x24
 800f278:	681a      	ldr	r2, [r3, #0]
 800f27a:	78fb      	ldrb	r3, [r7, #3]
 800f27c:	4619      	mov	r1, r3
 800f27e:	f7fb f901 	bl	800a484 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800f282:	bf00      	nop
 800f284:	3708      	adds	r7, #8
 800f286:	46bd      	mov	sp, r7
 800f288:	bd80      	pop	{r7, pc}

0800f28a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f28a:	b580      	push	{r7, lr}
 800f28c:	b082      	sub	sp, #8
 800f28e:	af00      	add	r7, sp, #0
 800f290:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800f298:	4618      	mov	r0, r3
 800f29a:	f7fb fa15 	bl	800a6c8 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800f29e:	bf00      	nop
 800f2a0:	3708      	adds	r7, #8
 800f2a2:	46bd      	mov	sp, r7
 800f2a4:	bd80      	pop	{r7, pc}

0800f2a6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f2a6:	b580      	push	{r7, lr}
 800f2a8:	b084      	sub	sp, #16
 800f2aa:	af00      	add	r7, sp, #0
 800f2ac:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800f2ae:	2301      	movs	r3, #1
 800f2b0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	795b      	ldrb	r3, [r3, #5]
 800f2b6:	2b02      	cmp	r3, #2
 800f2b8:	d001      	beq.n	800f2be <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800f2ba:	f7f3 fee9 	bl	8003090 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800f2c4:	7bfa      	ldrb	r2, [r7, #15]
 800f2c6:	4611      	mov	r1, r2
 800f2c8:	4618      	mov	r0, r3
 800f2ca:	f7fb f9bf 	bl	800a64c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800f2d4:	4618      	mov	r0, r3
 800f2d6:	f7fb f96b 	bl	800a5b0 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800f2da:	bf00      	nop
 800f2dc:	3710      	adds	r7, #16
 800f2de:	46bd      	mov	sp, r7
 800f2e0:	bd80      	pop	{r7, pc}
	...

0800f2e4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f2e4:	b580      	push	{r7, lr}
 800f2e6:	b082      	sub	sp, #8
 800f2e8:	af00      	add	r7, sp, #0
 800f2ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800f2f2:	4618      	mov	r0, r3
 800f2f4:	f7fb f9ba 	bl	800a66c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	7a5b      	ldrb	r3, [r3, #9]
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d005      	beq.n	800f30c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f300:	4b04      	ldr	r3, [pc, #16]	@ (800f314 <HAL_PCD_SuspendCallback+0x30>)
 800f302:	691b      	ldr	r3, [r3, #16]
 800f304:	4a03      	ldr	r2, [pc, #12]	@ (800f314 <HAL_PCD_SuspendCallback+0x30>)
 800f306:	f043 0306 	orr.w	r3, r3, #6
 800f30a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800f30c:	bf00      	nop
 800f30e:	3708      	adds	r7, #8
 800f310:	46bd      	mov	sp, r7
 800f312:	bd80      	pop	{r7, pc}
 800f314:	e000ed00 	.word	0xe000ed00

0800f318 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f318:	b580      	push	{r7, lr}
 800f31a:	b082      	sub	sp, #8
 800f31c:	af00      	add	r7, sp, #0
 800f31e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	7a5b      	ldrb	r3, [r3, #9]
 800f324:	2b00      	cmp	r3, #0
 800f326:	d007      	beq.n	800f338 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f328:	4b08      	ldr	r3, [pc, #32]	@ (800f34c <HAL_PCD_ResumeCallback+0x34>)
 800f32a:	691b      	ldr	r3, [r3, #16]
 800f32c:	4a07      	ldr	r2, [pc, #28]	@ (800f34c <HAL_PCD_ResumeCallback+0x34>)
 800f32e:	f023 0306 	bic.w	r3, r3, #6
 800f332:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800f334:	f000 f9f8 	bl	800f728 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800f33e:	4618      	mov	r0, r3
 800f340:	f7fb f9aa 	bl	800a698 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800f344:	bf00      	nop
 800f346:	3708      	adds	r7, #8
 800f348:	46bd      	mov	sp, r7
 800f34a:	bd80      	pop	{r7, pc}
 800f34c:	e000ed00 	.word	0xe000ed00

0800f350 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800f350:	b580      	push	{r7, lr}
 800f352:	b082      	sub	sp, #8
 800f354:	af00      	add	r7, sp, #0
 800f356:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800f358:	4a2b      	ldr	r2, [pc, #172]	@ (800f408 <USBD_LL_Init+0xb8>)
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	4a29      	ldr	r2, [pc, #164]	@ (800f408 <USBD_LL_Init+0xb8>)
 800f364:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 800f368:	4b27      	ldr	r3, [pc, #156]	@ (800f408 <USBD_LL_Init+0xb8>)
 800f36a:	4a28      	ldr	r2, [pc, #160]	@ (800f40c <USBD_LL_Init+0xbc>)
 800f36c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800f36e:	4b26      	ldr	r3, [pc, #152]	@ (800f408 <USBD_LL_Init+0xb8>)
 800f370:	2208      	movs	r2, #8
 800f372:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800f374:	4b24      	ldr	r3, [pc, #144]	@ (800f408 <USBD_LL_Init+0xb8>)
 800f376:	2202      	movs	r2, #2
 800f378:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800f37a:	4b23      	ldr	r3, [pc, #140]	@ (800f408 <USBD_LL_Init+0xb8>)
 800f37c:	2202      	movs	r2, #2
 800f37e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800f380:	4b21      	ldr	r3, [pc, #132]	@ (800f408 <USBD_LL_Init+0xb8>)
 800f382:	2200      	movs	r2, #0
 800f384:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800f386:	4b20      	ldr	r3, [pc, #128]	@ (800f408 <USBD_LL_Init+0xb8>)
 800f388:	2200      	movs	r2, #0
 800f38a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800f38c:	4b1e      	ldr	r3, [pc, #120]	@ (800f408 <USBD_LL_Init+0xb8>)
 800f38e:	2200      	movs	r2, #0
 800f390:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800f392:	4b1d      	ldr	r3, [pc, #116]	@ (800f408 <USBD_LL_Init+0xb8>)
 800f394:	2200      	movs	r2, #0
 800f396:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800f398:	481b      	ldr	r0, [pc, #108]	@ (800f408 <USBD_LL_Init+0xb8>)
 800f39a:	f7f4 ff45 	bl	8004228 <HAL_PCD_Init>
 800f39e:	4603      	mov	r3, r0
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d001      	beq.n	800f3a8 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800f3a4:	f7f3 fe74 	bl	8003090 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800f3ae:	2318      	movs	r3, #24
 800f3b0:	2200      	movs	r2, #0
 800f3b2:	2100      	movs	r1, #0
 800f3b4:	f7f6 fbcc 	bl	8005b50 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800f3be:	2358      	movs	r3, #88	@ 0x58
 800f3c0:	2200      	movs	r2, #0
 800f3c2:	2180      	movs	r1, #128	@ 0x80
 800f3c4:	f7f6 fbc4 	bl	8005b50 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800f3ce:	23c0      	movs	r3, #192	@ 0xc0
 800f3d0:	2200      	movs	r2, #0
 800f3d2:	2181      	movs	r1, #129	@ 0x81
 800f3d4:	f7f6 fbbc 	bl	8005b50 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800f3de:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800f3e2:	2200      	movs	r2, #0
 800f3e4:	2101      	movs	r1, #1
 800f3e6:	f7f6 fbb3 	bl	8005b50 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800f3f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f3f4:	2200      	movs	r2, #0
 800f3f6:	2182      	movs	r1, #130	@ 0x82
 800f3f8:	f7f6 fbaa 	bl	8005b50 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800f3fc:	2300      	movs	r3, #0
}
 800f3fe:	4618      	mov	r0, r3
 800f400:	3708      	adds	r7, #8
 800f402:	46bd      	mov	sp, r7
 800f404:	bd80      	pop	{r7, pc}
 800f406:	bf00      	nop
 800f408:	200122fc 	.word	0x200122fc
 800f40c:	40005c00 	.word	0x40005c00

0800f410 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800f410:	b580      	push	{r7, lr}
 800f412:	b084      	sub	sp, #16
 800f414:	af00      	add	r7, sp, #0
 800f416:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f418:	2300      	movs	r3, #0
 800f41a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f41c:	2300      	movs	r3, #0
 800f41e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800f426:	4618      	mov	r0, r3
 800f428:	f7f4 ffcc 	bl	80043c4 <HAL_PCD_Start>
 800f42c:	4603      	mov	r3, r0
 800f42e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f430:	7bfb      	ldrb	r3, [r7, #15]
 800f432:	4618      	mov	r0, r3
 800f434:	f000 f97e 	bl	800f734 <USBD_Get_USB_Status>
 800f438:	4603      	mov	r3, r0
 800f43a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f43c:	7bbb      	ldrb	r3, [r7, #14]
}
 800f43e:	4618      	mov	r0, r3
 800f440:	3710      	adds	r7, #16
 800f442:	46bd      	mov	sp, r7
 800f444:	bd80      	pop	{r7, pc}

0800f446 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800f446:	b580      	push	{r7, lr}
 800f448:	b084      	sub	sp, #16
 800f44a:	af00      	add	r7, sp, #0
 800f44c:	6078      	str	r0, [r7, #4]
 800f44e:	4608      	mov	r0, r1
 800f450:	4611      	mov	r1, r2
 800f452:	461a      	mov	r2, r3
 800f454:	4603      	mov	r3, r0
 800f456:	70fb      	strb	r3, [r7, #3]
 800f458:	460b      	mov	r3, r1
 800f45a:	70bb      	strb	r3, [r7, #2]
 800f45c:	4613      	mov	r3, r2
 800f45e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f460:	2300      	movs	r3, #0
 800f462:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f464:	2300      	movs	r3, #0
 800f466:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800f46e:	78bb      	ldrb	r3, [r7, #2]
 800f470:	883a      	ldrh	r2, [r7, #0]
 800f472:	78f9      	ldrb	r1, [r7, #3]
 800f474:	f7f5 f913 	bl	800469e <HAL_PCD_EP_Open>
 800f478:	4603      	mov	r3, r0
 800f47a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f47c:	7bfb      	ldrb	r3, [r7, #15]
 800f47e:	4618      	mov	r0, r3
 800f480:	f000 f958 	bl	800f734 <USBD_Get_USB_Status>
 800f484:	4603      	mov	r3, r0
 800f486:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f488:	7bbb      	ldrb	r3, [r7, #14]
}
 800f48a:	4618      	mov	r0, r3
 800f48c:	3710      	adds	r7, #16
 800f48e:	46bd      	mov	sp, r7
 800f490:	bd80      	pop	{r7, pc}

0800f492 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f492:	b580      	push	{r7, lr}
 800f494:	b084      	sub	sp, #16
 800f496:	af00      	add	r7, sp, #0
 800f498:	6078      	str	r0, [r7, #4]
 800f49a:	460b      	mov	r3, r1
 800f49c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f49e:	2300      	movs	r3, #0
 800f4a0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f4a2:	2300      	movs	r3, #0
 800f4a4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800f4ac:	78fa      	ldrb	r2, [r7, #3]
 800f4ae:	4611      	mov	r1, r2
 800f4b0:	4618      	mov	r0, r3
 800f4b2:	f7f5 f953 	bl	800475c <HAL_PCD_EP_Close>
 800f4b6:	4603      	mov	r3, r0
 800f4b8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f4ba:	7bfb      	ldrb	r3, [r7, #15]
 800f4bc:	4618      	mov	r0, r3
 800f4be:	f000 f939 	bl	800f734 <USBD_Get_USB_Status>
 800f4c2:	4603      	mov	r3, r0
 800f4c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f4c6:	7bbb      	ldrb	r3, [r7, #14]
}
 800f4c8:	4618      	mov	r0, r3
 800f4ca:	3710      	adds	r7, #16
 800f4cc:	46bd      	mov	sp, r7
 800f4ce:	bd80      	pop	{r7, pc}

0800f4d0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f4d0:	b580      	push	{r7, lr}
 800f4d2:	b084      	sub	sp, #16
 800f4d4:	af00      	add	r7, sp, #0
 800f4d6:	6078      	str	r0, [r7, #4]
 800f4d8:	460b      	mov	r3, r1
 800f4da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f4dc:	2300      	movs	r3, #0
 800f4de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f4e0:	2300      	movs	r3, #0
 800f4e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800f4ea:	78fa      	ldrb	r2, [r7, #3]
 800f4ec:	4611      	mov	r1, r2
 800f4ee:	4618      	mov	r0, r3
 800f4f0:	f7f5 f9fc 	bl	80048ec <HAL_PCD_EP_SetStall>
 800f4f4:	4603      	mov	r3, r0
 800f4f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f4f8:	7bfb      	ldrb	r3, [r7, #15]
 800f4fa:	4618      	mov	r0, r3
 800f4fc:	f000 f91a 	bl	800f734 <USBD_Get_USB_Status>
 800f500:	4603      	mov	r3, r0
 800f502:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f504:	7bbb      	ldrb	r3, [r7, #14]
}
 800f506:	4618      	mov	r0, r3
 800f508:	3710      	adds	r7, #16
 800f50a:	46bd      	mov	sp, r7
 800f50c:	bd80      	pop	{r7, pc}

0800f50e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f50e:	b580      	push	{r7, lr}
 800f510:	b084      	sub	sp, #16
 800f512:	af00      	add	r7, sp, #0
 800f514:	6078      	str	r0, [r7, #4]
 800f516:	460b      	mov	r3, r1
 800f518:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f51a:	2300      	movs	r3, #0
 800f51c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f51e:	2300      	movs	r3, #0
 800f520:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800f528:	78fa      	ldrb	r2, [r7, #3]
 800f52a:	4611      	mov	r1, r2
 800f52c:	4618      	mov	r0, r3
 800f52e:	f7f5 fa2f 	bl	8004990 <HAL_PCD_EP_ClrStall>
 800f532:	4603      	mov	r3, r0
 800f534:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f536:	7bfb      	ldrb	r3, [r7, #15]
 800f538:	4618      	mov	r0, r3
 800f53a:	f000 f8fb 	bl	800f734 <USBD_Get_USB_Status>
 800f53e:	4603      	mov	r3, r0
 800f540:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f542:	7bbb      	ldrb	r3, [r7, #14]
}
 800f544:	4618      	mov	r0, r3
 800f546:	3710      	adds	r7, #16
 800f548:	46bd      	mov	sp, r7
 800f54a:	bd80      	pop	{r7, pc}

0800f54c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f54c:	b480      	push	{r7}
 800f54e:	b085      	sub	sp, #20
 800f550:	af00      	add	r7, sp, #0
 800f552:	6078      	str	r0, [r7, #4]
 800f554:	460b      	mov	r3, r1
 800f556:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800f55e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800f560:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f564:	2b00      	cmp	r3, #0
 800f566:	da0b      	bge.n	800f580 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800f568:	78fb      	ldrb	r3, [r7, #3]
 800f56a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f56e:	68f9      	ldr	r1, [r7, #12]
 800f570:	4613      	mov	r3, r2
 800f572:	009b      	lsls	r3, r3, #2
 800f574:	4413      	add	r3, r2
 800f576:	00db      	lsls	r3, r3, #3
 800f578:	440b      	add	r3, r1
 800f57a:	3312      	adds	r3, #18
 800f57c:	781b      	ldrb	r3, [r3, #0]
 800f57e:	e00b      	b.n	800f598 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800f580:	78fb      	ldrb	r3, [r7, #3]
 800f582:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f586:	68f9      	ldr	r1, [r7, #12]
 800f588:	4613      	mov	r3, r2
 800f58a:	009b      	lsls	r3, r3, #2
 800f58c:	4413      	add	r3, r2
 800f58e:	00db      	lsls	r3, r3, #3
 800f590:	440b      	add	r3, r1
 800f592:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800f596:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f598:	4618      	mov	r0, r3
 800f59a:	3714      	adds	r7, #20
 800f59c:	46bd      	mov	sp, r7
 800f59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5a2:	4770      	bx	lr

0800f5a4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800f5a4:	b580      	push	{r7, lr}
 800f5a6:	b084      	sub	sp, #16
 800f5a8:	af00      	add	r7, sp, #0
 800f5aa:	6078      	str	r0, [r7, #4]
 800f5ac:	460b      	mov	r3, r1
 800f5ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f5b0:	2300      	movs	r3, #0
 800f5b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f5b4:	2300      	movs	r3, #0
 800f5b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800f5be:	78fa      	ldrb	r2, [r7, #3]
 800f5c0:	4611      	mov	r1, r2
 800f5c2:	4618      	mov	r0, r3
 800f5c4:	f7f5 f847 	bl	8004656 <HAL_PCD_SetAddress>
 800f5c8:	4603      	mov	r3, r0
 800f5ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f5cc:	7bfb      	ldrb	r3, [r7, #15]
 800f5ce:	4618      	mov	r0, r3
 800f5d0:	f000 f8b0 	bl	800f734 <USBD_Get_USB_Status>
 800f5d4:	4603      	mov	r3, r0
 800f5d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f5d8:	7bbb      	ldrb	r3, [r7, #14]
}
 800f5da:	4618      	mov	r0, r3
 800f5dc:	3710      	adds	r7, #16
 800f5de:	46bd      	mov	sp, r7
 800f5e0:	bd80      	pop	{r7, pc}

0800f5e2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f5e2:	b580      	push	{r7, lr}
 800f5e4:	b086      	sub	sp, #24
 800f5e6:	af00      	add	r7, sp, #0
 800f5e8:	60f8      	str	r0, [r7, #12]
 800f5ea:	607a      	str	r2, [r7, #4]
 800f5ec:	603b      	str	r3, [r7, #0]
 800f5ee:	460b      	mov	r3, r1
 800f5f0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f5f2:	2300      	movs	r3, #0
 800f5f4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f5f6:	2300      	movs	r3, #0
 800f5f8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f5fa:	68fb      	ldr	r3, [r7, #12]
 800f5fc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800f600:	7af9      	ldrb	r1, [r7, #11]
 800f602:	683b      	ldr	r3, [r7, #0]
 800f604:	687a      	ldr	r2, [r7, #4]
 800f606:	f7f5 f93a 	bl	800487e <HAL_PCD_EP_Transmit>
 800f60a:	4603      	mov	r3, r0
 800f60c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f60e:	7dfb      	ldrb	r3, [r7, #23]
 800f610:	4618      	mov	r0, r3
 800f612:	f000 f88f 	bl	800f734 <USBD_Get_USB_Status>
 800f616:	4603      	mov	r3, r0
 800f618:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f61a:	7dbb      	ldrb	r3, [r7, #22]
}
 800f61c:	4618      	mov	r0, r3
 800f61e:	3718      	adds	r7, #24
 800f620:	46bd      	mov	sp, r7
 800f622:	bd80      	pop	{r7, pc}

0800f624 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f624:	b580      	push	{r7, lr}
 800f626:	b086      	sub	sp, #24
 800f628:	af00      	add	r7, sp, #0
 800f62a:	60f8      	str	r0, [r7, #12]
 800f62c:	607a      	str	r2, [r7, #4]
 800f62e:	603b      	str	r3, [r7, #0]
 800f630:	460b      	mov	r3, r1
 800f632:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f634:	2300      	movs	r3, #0
 800f636:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f638:	2300      	movs	r3, #0
 800f63a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f63c:	68fb      	ldr	r3, [r7, #12]
 800f63e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800f642:	7af9      	ldrb	r1, [r7, #11]
 800f644:	683b      	ldr	r3, [r7, #0]
 800f646:	687a      	ldr	r2, [r7, #4]
 800f648:	f7f5 f8d0 	bl	80047ec <HAL_PCD_EP_Receive>
 800f64c:	4603      	mov	r3, r0
 800f64e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f650:	7dfb      	ldrb	r3, [r7, #23]
 800f652:	4618      	mov	r0, r3
 800f654:	f000 f86e 	bl	800f734 <USBD_Get_USB_Status>
 800f658:	4603      	mov	r3, r0
 800f65a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f65c:	7dbb      	ldrb	r3, [r7, #22]
}
 800f65e:	4618      	mov	r0, r3
 800f660:	3718      	adds	r7, #24
 800f662:	46bd      	mov	sp, r7
 800f664:	bd80      	pop	{r7, pc}

0800f666 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f666:	b580      	push	{r7, lr}
 800f668:	b082      	sub	sp, #8
 800f66a:	af00      	add	r7, sp, #0
 800f66c:	6078      	str	r0, [r7, #4]
 800f66e:	460b      	mov	r3, r1
 800f670:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800f678:	78fa      	ldrb	r2, [r7, #3]
 800f67a:	4611      	mov	r1, r2
 800f67c:	4618      	mov	r0, r3
 800f67e:	f7f5 f8e6 	bl	800484e <HAL_PCD_EP_GetRxCount>
 800f682:	4603      	mov	r3, r0
}
 800f684:	4618      	mov	r0, r3
 800f686:	3708      	adds	r7, #8
 800f688:	46bd      	mov	sp, r7
 800f68a:	bd80      	pop	{r7, pc}

0800f68c <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f68c:	b580      	push	{r7, lr}
 800f68e:	b082      	sub	sp, #8
 800f690:	af00      	add	r7, sp, #0
 800f692:	6078      	str	r0, [r7, #4]
 800f694:	460b      	mov	r3, r1
 800f696:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800f698:	78fb      	ldrb	r3, [r7, #3]
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	d002      	beq.n	800f6a4 <HAL_PCDEx_LPM_Callback+0x18>
 800f69e:	2b01      	cmp	r3, #1
 800f6a0:	d013      	beq.n	800f6ca <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800f6a2:	e023      	b.n	800f6ec <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	7a5b      	ldrb	r3, [r3, #9]
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	d007      	beq.n	800f6bc <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800f6ac:	f000 f83c 	bl	800f728 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f6b0:	4b10      	ldr	r3, [pc, #64]	@ (800f6f4 <HAL_PCDEx_LPM_Callback+0x68>)
 800f6b2:	691b      	ldr	r3, [r3, #16]
 800f6b4:	4a0f      	ldr	r2, [pc, #60]	@ (800f6f4 <HAL_PCDEx_LPM_Callback+0x68>)
 800f6b6:	f023 0306 	bic.w	r3, r3, #6
 800f6ba:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800f6c2:	4618      	mov	r0, r3
 800f6c4:	f7fa ffe8 	bl	800a698 <USBD_LL_Resume>
    break;
 800f6c8:	e010      	b.n	800f6ec <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800f6d0:	4618      	mov	r0, r3
 800f6d2:	f7fa ffcb 	bl	800a66c <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	7a5b      	ldrb	r3, [r3, #9]
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	d005      	beq.n	800f6ea <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f6de:	4b05      	ldr	r3, [pc, #20]	@ (800f6f4 <HAL_PCDEx_LPM_Callback+0x68>)
 800f6e0:	691b      	ldr	r3, [r3, #16]
 800f6e2:	4a04      	ldr	r2, [pc, #16]	@ (800f6f4 <HAL_PCDEx_LPM_Callback+0x68>)
 800f6e4:	f043 0306 	orr.w	r3, r3, #6
 800f6e8:	6113      	str	r3, [r2, #16]
    break;
 800f6ea:	bf00      	nop
}
 800f6ec:	bf00      	nop
 800f6ee:	3708      	adds	r7, #8
 800f6f0:	46bd      	mov	sp, r7
 800f6f2:	bd80      	pop	{r7, pc}
 800f6f4:	e000ed00 	.word	0xe000ed00

0800f6f8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800f6f8:	b480      	push	{r7}
 800f6fa:	b083      	sub	sp, #12
 800f6fc:	af00      	add	r7, sp, #0
 800f6fe:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800f700:	4b03      	ldr	r3, [pc, #12]	@ (800f710 <USBD_static_malloc+0x18>)
}
 800f702:	4618      	mov	r0, r3
 800f704:	370c      	adds	r7, #12
 800f706:	46bd      	mov	sp, r7
 800f708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f70c:	4770      	bx	lr
 800f70e:	bf00      	nop
 800f710:	200125d8 	.word	0x200125d8

0800f714 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800f714:	b480      	push	{r7}
 800f716:	b083      	sub	sp, #12
 800f718:	af00      	add	r7, sp, #0
 800f71a:	6078      	str	r0, [r7, #4]

}
 800f71c:	bf00      	nop
 800f71e:	370c      	adds	r7, #12
 800f720:	46bd      	mov	sp, r7
 800f722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f726:	4770      	bx	lr

0800f728 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800f728:	b580      	push	{r7, lr}
 800f72a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800f72c:	f7f2 ffde 	bl	80026ec <SystemClock_Config>
}
 800f730:	bf00      	nop
 800f732:	bd80      	pop	{r7, pc}

0800f734 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f734:	b480      	push	{r7}
 800f736:	b085      	sub	sp, #20
 800f738:	af00      	add	r7, sp, #0
 800f73a:	4603      	mov	r3, r0
 800f73c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f73e:	2300      	movs	r3, #0
 800f740:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f742:	79fb      	ldrb	r3, [r7, #7]
 800f744:	2b03      	cmp	r3, #3
 800f746:	d817      	bhi.n	800f778 <USBD_Get_USB_Status+0x44>
 800f748:	a201      	add	r2, pc, #4	@ (adr r2, 800f750 <USBD_Get_USB_Status+0x1c>)
 800f74a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f74e:	bf00      	nop
 800f750:	0800f761 	.word	0x0800f761
 800f754:	0800f767 	.word	0x0800f767
 800f758:	0800f76d 	.word	0x0800f76d
 800f75c:	0800f773 	.word	0x0800f773
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800f760:	2300      	movs	r3, #0
 800f762:	73fb      	strb	r3, [r7, #15]
    break;
 800f764:	e00b      	b.n	800f77e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f766:	2303      	movs	r3, #3
 800f768:	73fb      	strb	r3, [r7, #15]
    break;
 800f76a:	e008      	b.n	800f77e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f76c:	2301      	movs	r3, #1
 800f76e:	73fb      	strb	r3, [r7, #15]
    break;
 800f770:	e005      	b.n	800f77e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f772:	2303      	movs	r3, #3
 800f774:	73fb      	strb	r3, [r7, #15]
    break;
 800f776:	e002      	b.n	800f77e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800f778:	2303      	movs	r3, #3
 800f77a:	73fb      	strb	r3, [r7, #15]
    break;
 800f77c:	bf00      	nop
  }
  return usb_status;
 800f77e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f780:	4618      	mov	r0, r3
 800f782:	3714      	adds	r7, #20
 800f784:	46bd      	mov	sp, r7
 800f786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f78a:	4770      	bx	lr

0800f78c <__cvt>:
 800f78c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f790:	ec57 6b10 	vmov	r6, r7, d0
 800f794:	2f00      	cmp	r7, #0
 800f796:	460c      	mov	r4, r1
 800f798:	4619      	mov	r1, r3
 800f79a:	463b      	mov	r3, r7
 800f79c:	bfbb      	ittet	lt
 800f79e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800f7a2:	461f      	movlt	r7, r3
 800f7a4:	2300      	movge	r3, #0
 800f7a6:	232d      	movlt	r3, #45	@ 0x2d
 800f7a8:	700b      	strb	r3, [r1, #0]
 800f7aa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f7ac:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800f7b0:	4691      	mov	r9, r2
 800f7b2:	f023 0820 	bic.w	r8, r3, #32
 800f7b6:	bfbc      	itt	lt
 800f7b8:	4632      	movlt	r2, r6
 800f7ba:	4616      	movlt	r6, r2
 800f7bc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800f7c0:	d005      	beq.n	800f7ce <__cvt+0x42>
 800f7c2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800f7c6:	d100      	bne.n	800f7ca <__cvt+0x3e>
 800f7c8:	3401      	adds	r4, #1
 800f7ca:	2102      	movs	r1, #2
 800f7cc:	e000      	b.n	800f7d0 <__cvt+0x44>
 800f7ce:	2103      	movs	r1, #3
 800f7d0:	ab03      	add	r3, sp, #12
 800f7d2:	9301      	str	r3, [sp, #4]
 800f7d4:	ab02      	add	r3, sp, #8
 800f7d6:	9300      	str	r3, [sp, #0]
 800f7d8:	ec47 6b10 	vmov	d0, r6, r7
 800f7dc:	4653      	mov	r3, sl
 800f7de:	4622      	mov	r2, r4
 800f7e0:	f000 fe4e 	bl	8010480 <_dtoa_r>
 800f7e4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800f7e8:	4605      	mov	r5, r0
 800f7ea:	d119      	bne.n	800f820 <__cvt+0x94>
 800f7ec:	f019 0f01 	tst.w	r9, #1
 800f7f0:	d00e      	beq.n	800f810 <__cvt+0x84>
 800f7f2:	eb00 0904 	add.w	r9, r0, r4
 800f7f6:	2200      	movs	r2, #0
 800f7f8:	2300      	movs	r3, #0
 800f7fa:	4630      	mov	r0, r6
 800f7fc:	4639      	mov	r1, r7
 800f7fe:	f7f1 f98b 	bl	8000b18 <__aeabi_dcmpeq>
 800f802:	b108      	cbz	r0, 800f808 <__cvt+0x7c>
 800f804:	f8cd 900c 	str.w	r9, [sp, #12]
 800f808:	2230      	movs	r2, #48	@ 0x30
 800f80a:	9b03      	ldr	r3, [sp, #12]
 800f80c:	454b      	cmp	r3, r9
 800f80e:	d31e      	bcc.n	800f84e <__cvt+0xc2>
 800f810:	9b03      	ldr	r3, [sp, #12]
 800f812:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f814:	1b5b      	subs	r3, r3, r5
 800f816:	4628      	mov	r0, r5
 800f818:	6013      	str	r3, [r2, #0]
 800f81a:	b004      	add	sp, #16
 800f81c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f820:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800f824:	eb00 0904 	add.w	r9, r0, r4
 800f828:	d1e5      	bne.n	800f7f6 <__cvt+0x6a>
 800f82a:	7803      	ldrb	r3, [r0, #0]
 800f82c:	2b30      	cmp	r3, #48	@ 0x30
 800f82e:	d10a      	bne.n	800f846 <__cvt+0xba>
 800f830:	2200      	movs	r2, #0
 800f832:	2300      	movs	r3, #0
 800f834:	4630      	mov	r0, r6
 800f836:	4639      	mov	r1, r7
 800f838:	f7f1 f96e 	bl	8000b18 <__aeabi_dcmpeq>
 800f83c:	b918      	cbnz	r0, 800f846 <__cvt+0xba>
 800f83e:	f1c4 0401 	rsb	r4, r4, #1
 800f842:	f8ca 4000 	str.w	r4, [sl]
 800f846:	f8da 3000 	ldr.w	r3, [sl]
 800f84a:	4499      	add	r9, r3
 800f84c:	e7d3      	b.n	800f7f6 <__cvt+0x6a>
 800f84e:	1c59      	adds	r1, r3, #1
 800f850:	9103      	str	r1, [sp, #12]
 800f852:	701a      	strb	r2, [r3, #0]
 800f854:	e7d9      	b.n	800f80a <__cvt+0x7e>

0800f856 <__exponent>:
 800f856:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f858:	2900      	cmp	r1, #0
 800f85a:	bfba      	itte	lt
 800f85c:	4249      	neglt	r1, r1
 800f85e:	232d      	movlt	r3, #45	@ 0x2d
 800f860:	232b      	movge	r3, #43	@ 0x2b
 800f862:	2909      	cmp	r1, #9
 800f864:	7002      	strb	r2, [r0, #0]
 800f866:	7043      	strb	r3, [r0, #1]
 800f868:	dd29      	ble.n	800f8be <__exponent+0x68>
 800f86a:	f10d 0307 	add.w	r3, sp, #7
 800f86e:	461d      	mov	r5, r3
 800f870:	270a      	movs	r7, #10
 800f872:	461a      	mov	r2, r3
 800f874:	fbb1 f6f7 	udiv	r6, r1, r7
 800f878:	fb07 1416 	mls	r4, r7, r6, r1
 800f87c:	3430      	adds	r4, #48	@ 0x30
 800f87e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800f882:	460c      	mov	r4, r1
 800f884:	2c63      	cmp	r4, #99	@ 0x63
 800f886:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800f88a:	4631      	mov	r1, r6
 800f88c:	dcf1      	bgt.n	800f872 <__exponent+0x1c>
 800f88e:	3130      	adds	r1, #48	@ 0x30
 800f890:	1e94      	subs	r4, r2, #2
 800f892:	f803 1c01 	strb.w	r1, [r3, #-1]
 800f896:	1c41      	adds	r1, r0, #1
 800f898:	4623      	mov	r3, r4
 800f89a:	42ab      	cmp	r3, r5
 800f89c:	d30a      	bcc.n	800f8b4 <__exponent+0x5e>
 800f89e:	f10d 0309 	add.w	r3, sp, #9
 800f8a2:	1a9b      	subs	r3, r3, r2
 800f8a4:	42ac      	cmp	r4, r5
 800f8a6:	bf88      	it	hi
 800f8a8:	2300      	movhi	r3, #0
 800f8aa:	3302      	adds	r3, #2
 800f8ac:	4403      	add	r3, r0
 800f8ae:	1a18      	subs	r0, r3, r0
 800f8b0:	b003      	add	sp, #12
 800f8b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f8b4:	f813 6b01 	ldrb.w	r6, [r3], #1
 800f8b8:	f801 6f01 	strb.w	r6, [r1, #1]!
 800f8bc:	e7ed      	b.n	800f89a <__exponent+0x44>
 800f8be:	2330      	movs	r3, #48	@ 0x30
 800f8c0:	3130      	adds	r1, #48	@ 0x30
 800f8c2:	7083      	strb	r3, [r0, #2]
 800f8c4:	70c1      	strb	r1, [r0, #3]
 800f8c6:	1d03      	adds	r3, r0, #4
 800f8c8:	e7f1      	b.n	800f8ae <__exponent+0x58>
	...

0800f8cc <_printf_float>:
 800f8cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8d0:	b08d      	sub	sp, #52	@ 0x34
 800f8d2:	460c      	mov	r4, r1
 800f8d4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800f8d8:	4616      	mov	r6, r2
 800f8da:	461f      	mov	r7, r3
 800f8dc:	4605      	mov	r5, r0
 800f8de:	f000 fcb1 	bl	8010244 <_localeconv_r>
 800f8e2:	6803      	ldr	r3, [r0, #0]
 800f8e4:	9304      	str	r3, [sp, #16]
 800f8e6:	4618      	mov	r0, r3
 800f8e8:	f7f0 fcea 	bl	80002c0 <strlen>
 800f8ec:	2300      	movs	r3, #0
 800f8ee:	930a      	str	r3, [sp, #40]	@ 0x28
 800f8f0:	f8d8 3000 	ldr.w	r3, [r8]
 800f8f4:	9005      	str	r0, [sp, #20]
 800f8f6:	3307      	adds	r3, #7
 800f8f8:	f023 0307 	bic.w	r3, r3, #7
 800f8fc:	f103 0208 	add.w	r2, r3, #8
 800f900:	f894 a018 	ldrb.w	sl, [r4, #24]
 800f904:	f8d4 b000 	ldr.w	fp, [r4]
 800f908:	f8c8 2000 	str.w	r2, [r8]
 800f90c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f910:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800f914:	9307      	str	r3, [sp, #28]
 800f916:	f8cd 8018 	str.w	r8, [sp, #24]
 800f91a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800f91e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f922:	4b9c      	ldr	r3, [pc, #624]	@ (800fb94 <_printf_float+0x2c8>)
 800f924:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f928:	f7f1 f928 	bl	8000b7c <__aeabi_dcmpun>
 800f92c:	bb70      	cbnz	r0, 800f98c <_printf_float+0xc0>
 800f92e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f932:	4b98      	ldr	r3, [pc, #608]	@ (800fb94 <_printf_float+0x2c8>)
 800f934:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f938:	f7f1 f902 	bl	8000b40 <__aeabi_dcmple>
 800f93c:	bb30      	cbnz	r0, 800f98c <_printf_float+0xc0>
 800f93e:	2200      	movs	r2, #0
 800f940:	2300      	movs	r3, #0
 800f942:	4640      	mov	r0, r8
 800f944:	4649      	mov	r1, r9
 800f946:	f7f1 f8f1 	bl	8000b2c <__aeabi_dcmplt>
 800f94a:	b110      	cbz	r0, 800f952 <_printf_float+0x86>
 800f94c:	232d      	movs	r3, #45	@ 0x2d
 800f94e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f952:	4a91      	ldr	r2, [pc, #580]	@ (800fb98 <_printf_float+0x2cc>)
 800f954:	4b91      	ldr	r3, [pc, #580]	@ (800fb9c <_printf_float+0x2d0>)
 800f956:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800f95a:	bf94      	ite	ls
 800f95c:	4690      	movls	r8, r2
 800f95e:	4698      	movhi	r8, r3
 800f960:	2303      	movs	r3, #3
 800f962:	6123      	str	r3, [r4, #16]
 800f964:	f02b 0304 	bic.w	r3, fp, #4
 800f968:	6023      	str	r3, [r4, #0]
 800f96a:	f04f 0900 	mov.w	r9, #0
 800f96e:	9700      	str	r7, [sp, #0]
 800f970:	4633      	mov	r3, r6
 800f972:	aa0b      	add	r2, sp, #44	@ 0x2c
 800f974:	4621      	mov	r1, r4
 800f976:	4628      	mov	r0, r5
 800f978:	f000 f9d2 	bl	800fd20 <_printf_common>
 800f97c:	3001      	adds	r0, #1
 800f97e:	f040 808d 	bne.w	800fa9c <_printf_float+0x1d0>
 800f982:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f986:	b00d      	add	sp, #52	@ 0x34
 800f988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f98c:	4642      	mov	r2, r8
 800f98e:	464b      	mov	r3, r9
 800f990:	4640      	mov	r0, r8
 800f992:	4649      	mov	r1, r9
 800f994:	f7f1 f8f2 	bl	8000b7c <__aeabi_dcmpun>
 800f998:	b140      	cbz	r0, 800f9ac <_printf_float+0xe0>
 800f99a:	464b      	mov	r3, r9
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	bfbc      	itt	lt
 800f9a0:	232d      	movlt	r3, #45	@ 0x2d
 800f9a2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800f9a6:	4a7e      	ldr	r2, [pc, #504]	@ (800fba0 <_printf_float+0x2d4>)
 800f9a8:	4b7e      	ldr	r3, [pc, #504]	@ (800fba4 <_printf_float+0x2d8>)
 800f9aa:	e7d4      	b.n	800f956 <_printf_float+0x8a>
 800f9ac:	6863      	ldr	r3, [r4, #4]
 800f9ae:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800f9b2:	9206      	str	r2, [sp, #24]
 800f9b4:	1c5a      	adds	r2, r3, #1
 800f9b6:	d13b      	bne.n	800fa30 <_printf_float+0x164>
 800f9b8:	2306      	movs	r3, #6
 800f9ba:	6063      	str	r3, [r4, #4]
 800f9bc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800f9c0:	2300      	movs	r3, #0
 800f9c2:	6022      	str	r2, [r4, #0]
 800f9c4:	9303      	str	r3, [sp, #12]
 800f9c6:	ab0a      	add	r3, sp, #40	@ 0x28
 800f9c8:	e9cd a301 	strd	sl, r3, [sp, #4]
 800f9cc:	ab09      	add	r3, sp, #36	@ 0x24
 800f9ce:	9300      	str	r3, [sp, #0]
 800f9d0:	6861      	ldr	r1, [r4, #4]
 800f9d2:	ec49 8b10 	vmov	d0, r8, r9
 800f9d6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800f9da:	4628      	mov	r0, r5
 800f9dc:	f7ff fed6 	bl	800f78c <__cvt>
 800f9e0:	9b06      	ldr	r3, [sp, #24]
 800f9e2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f9e4:	2b47      	cmp	r3, #71	@ 0x47
 800f9e6:	4680      	mov	r8, r0
 800f9e8:	d129      	bne.n	800fa3e <_printf_float+0x172>
 800f9ea:	1cc8      	adds	r0, r1, #3
 800f9ec:	db02      	blt.n	800f9f4 <_printf_float+0x128>
 800f9ee:	6863      	ldr	r3, [r4, #4]
 800f9f0:	4299      	cmp	r1, r3
 800f9f2:	dd41      	ble.n	800fa78 <_printf_float+0x1ac>
 800f9f4:	f1aa 0a02 	sub.w	sl, sl, #2
 800f9f8:	fa5f fa8a 	uxtb.w	sl, sl
 800f9fc:	3901      	subs	r1, #1
 800f9fe:	4652      	mov	r2, sl
 800fa00:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800fa04:	9109      	str	r1, [sp, #36]	@ 0x24
 800fa06:	f7ff ff26 	bl	800f856 <__exponent>
 800fa0a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800fa0c:	1813      	adds	r3, r2, r0
 800fa0e:	2a01      	cmp	r2, #1
 800fa10:	4681      	mov	r9, r0
 800fa12:	6123      	str	r3, [r4, #16]
 800fa14:	dc02      	bgt.n	800fa1c <_printf_float+0x150>
 800fa16:	6822      	ldr	r2, [r4, #0]
 800fa18:	07d2      	lsls	r2, r2, #31
 800fa1a:	d501      	bpl.n	800fa20 <_printf_float+0x154>
 800fa1c:	3301      	adds	r3, #1
 800fa1e:	6123      	str	r3, [r4, #16]
 800fa20:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	d0a2      	beq.n	800f96e <_printf_float+0xa2>
 800fa28:	232d      	movs	r3, #45	@ 0x2d
 800fa2a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fa2e:	e79e      	b.n	800f96e <_printf_float+0xa2>
 800fa30:	9a06      	ldr	r2, [sp, #24]
 800fa32:	2a47      	cmp	r2, #71	@ 0x47
 800fa34:	d1c2      	bne.n	800f9bc <_printf_float+0xf0>
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	d1c0      	bne.n	800f9bc <_printf_float+0xf0>
 800fa3a:	2301      	movs	r3, #1
 800fa3c:	e7bd      	b.n	800f9ba <_printf_float+0xee>
 800fa3e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800fa42:	d9db      	bls.n	800f9fc <_printf_float+0x130>
 800fa44:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800fa48:	d118      	bne.n	800fa7c <_printf_float+0x1b0>
 800fa4a:	2900      	cmp	r1, #0
 800fa4c:	6863      	ldr	r3, [r4, #4]
 800fa4e:	dd0b      	ble.n	800fa68 <_printf_float+0x19c>
 800fa50:	6121      	str	r1, [r4, #16]
 800fa52:	b913      	cbnz	r3, 800fa5a <_printf_float+0x18e>
 800fa54:	6822      	ldr	r2, [r4, #0]
 800fa56:	07d0      	lsls	r0, r2, #31
 800fa58:	d502      	bpl.n	800fa60 <_printf_float+0x194>
 800fa5a:	3301      	adds	r3, #1
 800fa5c:	440b      	add	r3, r1
 800fa5e:	6123      	str	r3, [r4, #16]
 800fa60:	65a1      	str	r1, [r4, #88]	@ 0x58
 800fa62:	f04f 0900 	mov.w	r9, #0
 800fa66:	e7db      	b.n	800fa20 <_printf_float+0x154>
 800fa68:	b913      	cbnz	r3, 800fa70 <_printf_float+0x1a4>
 800fa6a:	6822      	ldr	r2, [r4, #0]
 800fa6c:	07d2      	lsls	r2, r2, #31
 800fa6e:	d501      	bpl.n	800fa74 <_printf_float+0x1a8>
 800fa70:	3302      	adds	r3, #2
 800fa72:	e7f4      	b.n	800fa5e <_printf_float+0x192>
 800fa74:	2301      	movs	r3, #1
 800fa76:	e7f2      	b.n	800fa5e <_printf_float+0x192>
 800fa78:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800fa7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fa7e:	4299      	cmp	r1, r3
 800fa80:	db05      	blt.n	800fa8e <_printf_float+0x1c2>
 800fa82:	6823      	ldr	r3, [r4, #0]
 800fa84:	6121      	str	r1, [r4, #16]
 800fa86:	07d8      	lsls	r0, r3, #31
 800fa88:	d5ea      	bpl.n	800fa60 <_printf_float+0x194>
 800fa8a:	1c4b      	adds	r3, r1, #1
 800fa8c:	e7e7      	b.n	800fa5e <_printf_float+0x192>
 800fa8e:	2900      	cmp	r1, #0
 800fa90:	bfd4      	ite	le
 800fa92:	f1c1 0202 	rsble	r2, r1, #2
 800fa96:	2201      	movgt	r2, #1
 800fa98:	4413      	add	r3, r2
 800fa9a:	e7e0      	b.n	800fa5e <_printf_float+0x192>
 800fa9c:	6823      	ldr	r3, [r4, #0]
 800fa9e:	055a      	lsls	r2, r3, #21
 800faa0:	d407      	bmi.n	800fab2 <_printf_float+0x1e6>
 800faa2:	6923      	ldr	r3, [r4, #16]
 800faa4:	4642      	mov	r2, r8
 800faa6:	4631      	mov	r1, r6
 800faa8:	4628      	mov	r0, r5
 800faaa:	47b8      	blx	r7
 800faac:	3001      	adds	r0, #1
 800faae:	d12b      	bne.n	800fb08 <_printf_float+0x23c>
 800fab0:	e767      	b.n	800f982 <_printf_float+0xb6>
 800fab2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800fab6:	f240 80dd 	bls.w	800fc74 <_printf_float+0x3a8>
 800faba:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800fabe:	2200      	movs	r2, #0
 800fac0:	2300      	movs	r3, #0
 800fac2:	f7f1 f829 	bl	8000b18 <__aeabi_dcmpeq>
 800fac6:	2800      	cmp	r0, #0
 800fac8:	d033      	beq.n	800fb32 <_printf_float+0x266>
 800faca:	4a37      	ldr	r2, [pc, #220]	@ (800fba8 <_printf_float+0x2dc>)
 800facc:	2301      	movs	r3, #1
 800face:	4631      	mov	r1, r6
 800fad0:	4628      	mov	r0, r5
 800fad2:	47b8      	blx	r7
 800fad4:	3001      	adds	r0, #1
 800fad6:	f43f af54 	beq.w	800f982 <_printf_float+0xb6>
 800fada:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800fade:	4543      	cmp	r3, r8
 800fae0:	db02      	blt.n	800fae8 <_printf_float+0x21c>
 800fae2:	6823      	ldr	r3, [r4, #0]
 800fae4:	07d8      	lsls	r0, r3, #31
 800fae6:	d50f      	bpl.n	800fb08 <_printf_float+0x23c>
 800fae8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800faec:	4631      	mov	r1, r6
 800faee:	4628      	mov	r0, r5
 800faf0:	47b8      	blx	r7
 800faf2:	3001      	adds	r0, #1
 800faf4:	f43f af45 	beq.w	800f982 <_printf_float+0xb6>
 800faf8:	f04f 0900 	mov.w	r9, #0
 800fafc:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800fb00:	f104 0a1a 	add.w	sl, r4, #26
 800fb04:	45c8      	cmp	r8, r9
 800fb06:	dc09      	bgt.n	800fb1c <_printf_float+0x250>
 800fb08:	6823      	ldr	r3, [r4, #0]
 800fb0a:	079b      	lsls	r3, r3, #30
 800fb0c:	f100 8103 	bmi.w	800fd16 <_printf_float+0x44a>
 800fb10:	68e0      	ldr	r0, [r4, #12]
 800fb12:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fb14:	4298      	cmp	r0, r3
 800fb16:	bfb8      	it	lt
 800fb18:	4618      	movlt	r0, r3
 800fb1a:	e734      	b.n	800f986 <_printf_float+0xba>
 800fb1c:	2301      	movs	r3, #1
 800fb1e:	4652      	mov	r2, sl
 800fb20:	4631      	mov	r1, r6
 800fb22:	4628      	mov	r0, r5
 800fb24:	47b8      	blx	r7
 800fb26:	3001      	adds	r0, #1
 800fb28:	f43f af2b 	beq.w	800f982 <_printf_float+0xb6>
 800fb2c:	f109 0901 	add.w	r9, r9, #1
 800fb30:	e7e8      	b.n	800fb04 <_printf_float+0x238>
 800fb32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	dc39      	bgt.n	800fbac <_printf_float+0x2e0>
 800fb38:	4a1b      	ldr	r2, [pc, #108]	@ (800fba8 <_printf_float+0x2dc>)
 800fb3a:	2301      	movs	r3, #1
 800fb3c:	4631      	mov	r1, r6
 800fb3e:	4628      	mov	r0, r5
 800fb40:	47b8      	blx	r7
 800fb42:	3001      	adds	r0, #1
 800fb44:	f43f af1d 	beq.w	800f982 <_printf_float+0xb6>
 800fb48:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800fb4c:	ea59 0303 	orrs.w	r3, r9, r3
 800fb50:	d102      	bne.n	800fb58 <_printf_float+0x28c>
 800fb52:	6823      	ldr	r3, [r4, #0]
 800fb54:	07d9      	lsls	r1, r3, #31
 800fb56:	d5d7      	bpl.n	800fb08 <_printf_float+0x23c>
 800fb58:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fb5c:	4631      	mov	r1, r6
 800fb5e:	4628      	mov	r0, r5
 800fb60:	47b8      	blx	r7
 800fb62:	3001      	adds	r0, #1
 800fb64:	f43f af0d 	beq.w	800f982 <_printf_float+0xb6>
 800fb68:	f04f 0a00 	mov.w	sl, #0
 800fb6c:	f104 0b1a 	add.w	fp, r4, #26
 800fb70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fb72:	425b      	negs	r3, r3
 800fb74:	4553      	cmp	r3, sl
 800fb76:	dc01      	bgt.n	800fb7c <_printf_float+0x2b0>
 800fb78:	464b      	mov	r3, r9
 800fb7a:	e793      	b.n	800faa4 <_printf_float+0x1d8>
 800fb7c:	2301      	movs	r3, #1
 800fb7e:	465a      	mov	r2, fp
 800fb80:	4631      	mov	r1, r6
 800fb82:	4628      	mov	r0, r5
 800fb84:	47b8      	blx	r7
 800fb86:	3001      	adds	r0, #1
 800fb88:	f43f aefb 	beq.w	800f982 <_printf_float+0xb6>
 800fb8c:	f10a 0a01 	add.w	sl, sl, #1
 800fb90:	e7ee      	b.n	800fb70 <_printf_float+0x2a4>
 800fb92:	bf00      	nop
 800fb94:	7fefffff 	.word	0x7fefffff
 800fb98:	08013528 	.word	0x08013528
 800fb9c:	0801352c 	.word	0x0801352c
 800fba0:	08013530 	.word	0x08013530
 800fba4:	08013534 	.word	0x08013534
 800fba8:	08013538 	.word	0x08013538
 800fbac:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800fbae:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800fbb2:	4553      	cmp	r3, sl
 800fbb4:	bfa8      	it	ge
 800fbb6:	4653      	movge	r3, sl
 800fbb8:	2b00      	cmp	r3, #0
 800fbba:	4699      	mov	r9, r3
 800fbbc:	dc36      	bgt.n	800fc2c <_printf_float+0x360>
 800fbbe:	f04f 0b00 	mov.w	fp, #0
 800fbc2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fbc6:	f104 021a 	add.w	r2, r4, #26
 800fbca:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800fbcc:	9306      	str	r3, [sp, #24]
 800fbce:	eba3 0309 	sub.w	r3, r3, r9
 800fbd2:	455b      	cmp	r3, fp
 800fbd4:	dc31      	bgt.n	800fc3a <_printf_float+0x36e>
 800fbd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fbd8:	459a      	cmp	sl, r3
 800fbda:	dc3a      	bgt.n	800fc52 <_printf_float+0x386>
 800fbdc:	6823      	ldr	r3, [r4, #0]
 800fbde:	07da      	lsls	r2, r3, #31
 800fbe0:	d437      	bmi.n	800fc52 <_printf_float+0x386>
 800fbe2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fbe4:	ebaa 0903 	sub.w	r9, sl, r3
 800fbe8:	9b06      	ldr	r3, [sp, #24]
 800fbea:	ebaa 0303 	sub.w	r3, sl, r3
 800fbee:	4599      	cmp	r9, r3
 800fbf0:	bfa8      	it	ge
 800fbf2:	4699      	movge	r9, r3
 800fbf4:	f1b9 0f00 	cmp.w	r9, #0
 800fbf8:	dc33      	bgt.n	800fc62 <_printf_float+0x396>
 800fbfa:	f04f 0800 	mov.w	r8, #0
 800fbfe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fc02:	f104 0b1a 	add.w	fp, r4, #26
 800fc06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fc08:	ebaa 0303 	sub.w	r3, sl, r3
 800fc0c:	eba3 0309 	sub.w	r3, r3, r9
 800fc10:	4543      	cmp	r3, r8
 800fc12:	f77f af79 	ble.w	800fb08 <_printf_float+0x23c>
 800fc16:	2301      	movs	r3, #1
 800fc18:	465a      	mov	r2, fp
 800fc1a:	4631      	mov	r1, r6
 800fc1c:	4628      	mov	r0, r5
 800fc1e:	47b8      	blx	r7
 800fc20:	3001      	adds	r0, #1
 800fc22:	f43f aeae 	beq.w	800f982 <_printf_float+0xb6>
 800fc26:	f108 0801 	add.w	r8, r8, #1
 800fc2a:	e7ec      	b.n	800fc06 <_printf_float+0x33a>
 800fc2c:	4642      	mov	r2, r8
 800fc2e:	4631      	mov	r1, r6
 800fc30:	4628      	mov	r0, r5
 800fc32:	47b8      	blx	r7
 800fc34:	3001      	adds	r0, #1
 800fc36:	d1c2      	bne.n	800fbbe <_printf_float+0x2f2>
 800fc38:	e6a3      	b.n	800f982 <_printf_float+0xb6>
 800fc3a:	2301      	movs	r3, #1
 800fc3c:	4631      	mov	r1, r6
 800fc3e:	4628      	mov	r0, r5
 800fc40:	9206      	str	r2, [sp, #24]
 800fc42:	47b8      	blx	r7
 800fc44:	3001      	adds	r0, #1
 800fc46:	f43f ae9c 	beq.w	800f982 <_printf_float+0xb6>
 800fc4a:	9a06      	ldr	r2, [sp, #24]
 800fc4c:	f10b 0b01 	add.w	fp, fp, #1
 800fc50:	e7bb      	b.n	800fbca <_printf_float+0x2fe>
 800fc52:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fc56:	4631      	mov	r1, r6
 800fc58:	4628      	mov	r0, r5
 800fc5a:	47b8      	blx	r7
 800fc5c:	3001      	adds	r0, #1
 800fc5e:	d1c0      	bne.n	800fbe2 <_printf_float+0x316>
 800fc60:	e68f      	b.n	800f982 <_printf_float+0xb6>
 800fc62:	9a06      	ldr	r2, [sp, #24]
 800fc64:	464b      	mov	r3, r9
 800fc66:	4442      	add	r2, r8
 800fc68:	4631      	mov	r1, r6
 800fc6a:	4628      	mov	r0, r5
 800fc6c:	47b8      	blx	r7
 800fc6e:	3001      	adds	r0, #1
 800fc70:	d1c3      	bne.n	800fbfa <_printf_float+0x32e>
 800fc72:	e686      	b.n	800f982 <_printf_float+0xb6>
 800fc74:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800fc78:	f1ba 0f01 	cmp.w	sl, #1
 800fc7c:	dc01      	bgt.n	800fc82 <_printf_float+0x3b6>
 800fc7e:	07db      	lsls	r3, r3, #31
 800fc80:	d536      	bpl.n	800fcf0 <_printf_float+0x424>
 800fc82:	2301      	movs	r3, #1
 800fc84:	4642      	mov	r2, r8
 800fc86:	4631      	mov	r1, r6
 800fc88:	4628      	mov	r0, r5
 800fc8a:	47b8      	blx	r7
 800fc8c:	3001      	adds	r0, #1
 800fc8e:	f43f ae78 	beq.w	800f982 <_printf_float+0xb6>
 800fc92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fc96:	4631      	mov	r1, r6
 800fc98:	4628      	mov	r0, r5
 800fc9a:	47b8      	blx	r7
 800fc9c:	3001      	adds	r0, #1
 800fc9e:	f43f ae70 	beq.w	800f982 <_printf_float+0xb6>
 800fca2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800fca6:	2200      	movs	r2, #0
 800fca8:	2300      	movs	r3, #0
 800fcaa:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800fcae:	f7f0 ff33 	bl	8000b18 <__aeabi_dcmpeq>
 800fcb2:	b9c0      	cbnz	r0, 800fce6 <_printf_float+0x41a>
 800fcb4:	4653      	mov	r3, sl
 800fcb6:	f108 0201 	add.w	r2, r8, #1
 800fcba:	4631      	mov	r1, r6
 800fcbc:	4628      	mov	r0, r5
 800fcbe:	47b8      	blx	r7
 800fcc0:	3001      	adds	r0, #1
 800fcc2:	d10c      	bne.n	800fcde <_printf_float+0x412>
 800fcc4:	e65d      	b.n	800f982 <_printf_float+0xb6>
 800fcc6:	2301      	movs	r3, #1
 800fcc8:	465a      	mov	r2, fp
 800fcca:	4631      	mov	r1, r6
 800fccc:	4628      	mov	r0, r5
 800fcce:	47b8      	blx	r7
 800fcd0:	3001      	adds	r0, #1
 800fcd2:	f43f ae56 	beq.w	800f982 <_printf_float+0xb6>
 800fcd6:	f108 0801 	add.w	r8, r8, #1
 800fcda:	45d0      	cmp	r8, sl
 800fcdc:	dbf3      	blt.n	800fcc6 <_printf_float+0x3fa>
 800fcde:	464b      	mov	r3, r9
 800fce0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800fce4:	e6df      	b.n	800faa6 <_printf_float+0x1da>
 800fce6:	f04f 0800 	mov.w	r8, #0
 800fcea:	f104 0b1a 	add.w	fp, r4, #26
 800fcee:	e7f4      	b.n	800fcda <_printf_float+0x40e>
 800fcf0:	2301      	movs	r3, #1
 800fcf2:	4642      	mov	r2, r8
 800fcf4:	e7e1      	b.n	800fcba <_printf_float+0x3ee>
 800fcf6:	2301      	movs	r3, #1
 800fcf8:	464a      	mov	r2, r9
 800fcfa:	4631      	mov	r1, r6
 800fcfc:	4628      	mov	r0, r5
 800fcfe:	47b8      	blx	r7
 800fd00:	3001      	adds	r0, #1
 800fd02:	f43f ae3e 	beq.w	800f982 <_printf_float+0xb6>
 800fd06:	f108 0801 	add.w	r8, r8, #1
 800fd0a:	68e3      	ldr	r3, [r4, #12]
 800fd0c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800fd0e:	1a5b      	subs	r3, r3, r1
 800fd10:	4543      	cmp	r3, r8
 800fd12:	dcf0      	bgt.n	800fcf6 <_printf_float+0x42a>
 800fd14:	e6fc      	b.n	800fb10 <_printf_float+0x244>
 800fd16:	f04f 0800 	mov.w	r8, #0
 800fd1a:	f104 0919 	add.w	r9, r4, #25
 800fd1e:	e7f4      	b.n	800fd0a <_printf_float+0x43e>

0800fd20 <_printf_common>:
 800fd20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fd24:	4616      	mov	r6, r2
 800fd26:	4698      	mov	r8, r3
 800fd28:	688a      	ldr	r2, [r1, #8]
 800fd2a:	690b      	ldr	r3, [r1, #16]
 800fd2c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800fd30:	4293      	cmp	r3, r2
 800fd32:	bfb8      	it	lt
 800fd34:	4613      	movlt	r3, r2
 800fd36:	6033      	str	r3, [r6, #0]
 800fd38:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800fd3c:	4607      	mov	r7, r0
 800fd3e:	460c      	mov	r4, r1
 800fd40:	b10a      	cbz	r2, 800fd46 <_printf_common+0x26>
 800fd42:	3301      	adds	r3, #1
 800fd44:	6033      	str	r3, [r6, #0]
 800fd46:	6823      	ldr	r3, [r4, #0]
 800fd48:	0699      	lsls	r1, r3, #26
 800fd4a:	bf42      	ittt	mi
 800fd4c:	6833      	ldrmi	r3, [r6, #0]
 800fd4e:	3302      	addmi	r3, #2
 800fd50:	6033      	strmi	r3, [r6, #0]
 800fd52:	6825      	ldr	r5, [r4, #0]
 800fd54:	f015 0506 	ands.w	r5, r5, #6
 800fd58:	d106      	bne.n	800fd68 <_printf_common+0x48>
 800fd5a:	f104 0a19 	add.w	sl, r4, #25
 800fd5e:	68e3      	ldr	r3, [r4, #12]
 800fd60:	6832      	ldr	r2, [r6, #0]
 800fd62:	1a9b      	subs	r3, r3, r2
 800fd64:	42ab      	cmp	r3, r5
 800fd66:	dc26      	bgt.n	800fdb6 <_printf_common+0x96>
 800fd68:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800fd6c:	6822      	ldr	r2, [r4, #0]
 800fd6e:	3b00      	subs	r3, #0
 800fd70:	bf18      	it	ne
 800fd72:	2301      	movne	r3, #1
 800fd74:	0692      	lsls	r2, r2, #26
 800fd76:	d42b      	bmi.n	800fdd0 <_printf_common+0xb0>
 800fd78:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800fd7c:	4641      	mov	r1, r8
 800fd7e:	4638      	mov	r0, r7
 800fd80:	47c8      	blx	r9
 800fd82:	3001      	adds	r0, #1
 800fd84:	d01e      	beq.n	800fdc4 <_printf_common+0xa4>
 800fd86:	6823      	ldr	r3, [r4, #0]
 800fd88:	6922      	ldr	r2, [r4, #16]
 800fd8a:	f003 0306 	and.w	r3, r3, #6
 800fd8e:	2b04      	cmp	r3, #4
 800fd90:	bf02      	ittt	eq
 800fd92:	68e5      	ldreq	r5, [r4, #12]
 800fd94:	6833      	ldreq	r3, [r6, #0]
 800fd96:	1aed      	subeq	r5, r5, r3
 800fd98:	68a3      	ldr	r3, [r4, #8]
 800fd9a:	bf0c      	ite	eq
 800fd9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fda0:	2500      	movne	r5, #0
 800fda2:	4293      	cmp	r3, r2
 800fda4:	bfc4      	itt	gt
 800fda6:	1a9b      	subgt	r3, r3, r2
 800fda8:	18ed      	addgt	r5, r5, r3
 800fdaa:	2600      	movs	r6, #0
 800fdac:	341a      	adds	r4, #26
 800fdae:	42b5      	cmp	r5, r6
 800fdb0:	d11a      	bne.n	800fde8 <_printf_common+0xc8>
 800fdb2:	2000      	movs	r0, #0
 800fdb4:	e008      	b.n	800fdc8 <_printf_common+0xa8>
 800fdb6:	2301      	movs	r3, #1
 800fdb8:	4652      	mov	r2, sl
 800fdba:	4641      	mov	r1, r8
 800fdbc:	4638      	mov	r0, r7
 800fdbe:	47c8      	blx	r9
 800fdc0:	3001      	adds	r0, #1
 800fdc2:	d103      	bne.n	800fdcc <_printf_common+0xac>
 800fdc4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800fdc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fdcc:	3501      	adds	r5, #1
 800fdce:	e7c6      	b.n	800fd5e <_printf_common+0x3e>
 800fdd0:	18e1      	adds	r1, r4, r3
 800fdd2:	1c5a      	adds	r2, r3, #1
 800fdd4:	2030      	movs	r0, #48	@ 0x30
 800fdd6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800fdda:	4422      	add	r2, r4
 800fddc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800fde0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800fde4:	3302      	adds	r3, #2
 800fde6:	e7c7      	b.n	800fd78 <_printf_common+0x58>
 800fde8:	2301      	movs	r3, #1
 800fdea:	4622      	mov	r2, r4
 800fdec:	4641      	mov	r1, r8
 800fdee:	4638      	mov	r0, r7
 800fdf0:	47c8      	blx	r9
 800fdf2:	3001      	adds	r0, #1
 800fdf4:	d0e6      	beq.n	800fdc4 <_printf_common+0xa4>
 800fdf6:	3601      	adds	r6, #1
 800fdf8:	e7d9      	b.n	800fdae <_printf_common+0x8e>
	...

0800fdfc <_printf_i>:
 800fdfc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fe00:	7e0f      	ldrb	r7, [r1, #24]
 800fe02:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800fe04:	2f78      	cmp	r7, #120	@ 0x78
 800fe06:	4691      	mov	r9, r2
 800fe08:	4680      	mov	r8, r0
 800fe0a:	460c      	mov	r4, r1
 800fe0c:	469a      	mov	sl, r3
 800fe0e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800fe12:	d807      	bhi.n	800fe24 <_printf_i+0x28>
 800fe14:	2f62      	cmp	r7, #98	@ 0x62
 800fe16:	d80a      	bhi.n	800fe2e <_printf_i+0x32>
 800fe18:	2f00      	cmp	r7, #0
 800fe1a:	f000 80d2 	beq.w	800ffc2 <_printf_i+0x1c6>
 800fe1e:	2f58      	cmp	r7, #88	@ 0x58
 800fe20:	f000 80b9 	beq.w	800ff96 <_printf_i+0x19a>
 800fe24:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800fe28:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800fe2c:	e03a      	b.n	800fea4 <_printf_i+0xa8>
 800fe2e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800fe32:	2b15      	cmp	r3, #21
 800fe34:	d8f6      	bhi.n	800fe24 <_printf_i+0x28>
 800fe36:	a101      	add	r1, pc, #4	@ (adr r1, 800fe3c <_printf_i+0x40>)
 800fe38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fe3c:	0800fe95 	.word	0x0800fe95
 800fe40:	0800fea9 	.word	0x0800fea9
 800fe44:	0800fe25 	.word	0x0800fe25
 800fe48:	0800fe25 	.word	0x0800fe25
 800fe4c:	0800fe25 	.word	0x0800fe25
 800fe50:	0800fe25 	.word	0x0800fe25
 800fe54:	0800fea9 	.word	0x0800fea9
 800fe58:	0800fe25 	.word	0x0800fe25
 800fe5c:	0800fe25 	.word	0x0800fe25
 800fe60:	0800fe25 	.word	0x0800fe25
 800fe64:	0800fe25 	.word	0x0800fe25
 800fe68:	0800ffa9 	.word	0x0800ffa9
 800fe6c:	0800fed3 	.word	0x0800fed3
 800fe70:	0800ff63 	.word	0x0800ff63
 800fe74:	0800fe25 	.word	0x0800fe25
 800fe78:	0800fe25 	.word	0x0800fe25
 800fe7c:	0800ffcb 	.word	0x0800ffcb
 800fe80:	0800fe25 	.word	0x0800fe25
 800fe84:	0800fed3 	.word	0x0800fed3
 800fe88:	0800fe25 	.word	0x0800fe25
 800fe8c:	0800fe25 	.word	0x0800fe25
 800fe90:	0800ff6b 	.word	0x0800ff6b
 800fe94:	6833      	ldr	r3, [r6, #0]
 800fe96:	1d1a      	adds	r2, r3, #4
 800fe98:	681b      	ldr	r3, [r3, #0]
 800fe9a:	6032      	str	r2, [r6, #0]
 800fe9c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800fea0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800fea4:	2301      	movs	r3, #1
 800fea6:	e09d      	b.n	800ffe4 <_printf_i+0x1e8>
 800fea8:	6833      	ldr	r3, [r6, #0]
 800feaa:	6820      	ldr	r0, [r4, #0]
 800feac:	1d19      	adds	r1, r3, #4
 800feae:	6031      	str	r1, [r6, #0]
 800feb0:	0606      	lsls	r6, r0, #24
 800feb2:	d501      	bpl.n	800feb8 <_printf_i+0xbc>
 800feb4:	681d      	ldr	r5, [r3, #0]
 800feb6:	e003      	b.n	800fec0 <_printf_i+0xc4>
 800feb8:	0645      	lsls	r5, r0, #25
 800feba:	d5fb      	bpl.n	800feb4 <_printf_i+0xb8>
 800febc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800fec0:	2d00      	cmp	r5, #0
 800fec2:	da03      	bge.n	800fecc <_printf_i+0xd0>
 800fec4:	232d      	movs	r3, #45	@ 0x2d
 800fec6:	426d      	negs	r5, r5
 800fec8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fecc:	4859      	ldr	r0, [pc, #356]	@ (8010034 <_printf_i+0x238>)
 800fece:	230a      	movs	r3, #10
 800fed0:	e011      	b.n	800fef6 <_printf_i+0xfa>
 800fed2:	6821      	ldr	r1, [r4, #0]
 800fed4:	6833      	ldr	r3, [r6, #0]
 800fed6:	0608      	lsls	r0, r1, #24
 800fed8:	f853 5b04 	ldr.w	r5, [r3], #4
 800fedc:	d402      	bmi.n	800fee4 <_printf_i+0xe8>
 800fede:	0649      	lsls	r1, r1, #25
 800fee0:	bf48      	it	mi
 800fee2:	b2ad      	uxthmi	r5, r5
 800fee4:	2f6f      	cmp	r7, #111	@ 0x6f
 800fee6:	4853      	ldr	r0, [pc, #332]	@ (8010034 <_printf_i+0x238>)
 800fee8:	6033      	str	r3, [r6, #0]
 800feea:	bf14      	ite	ne
 800feec:	230a      	movne	r3, #10
 800feee:	2308      	moveq	r3, #8
 800fef0:	2100      	movs	r1, #0
 800fef2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800fef6:	6866      	ldr	r6, [r4, #4]
 800fef8:	60a6      	str	r6, [r4, #8]
 800fefa:	2e00      	cmp	r6, #0
 800fefc:	bfa2      	ittt	ge
 800fefe:	6821      	ldrge	r1, [r4, #0]
 800ff00:	f021 0104 	bicge.w	r1, r1, #4
 800ff04:	6021      	strge	r1, [r4, #0]
 800ff06:	b90d      	cbnz	r5, 800ff0c <_printf_i+0x110>
 800ff08:	2e00      	cmp	r6, #0
 800ff0a:	d04b      	beq.n	800ffa4 <_printf_i+0x1a8>
 800ff0c:	4616      	mov	r6, r2
 800ff0e:	fbb5 f1f3 	udiv	r1, r5, r3
 800ff12:	fb03 5711 	mls	r7, r3, r1, r5
 800ff16:	5dc7      	ldrb	r7, [r0, r7]
 800ff18:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ff1c:	462f      	mov	r7, r5
 800ff1e:	42bb      	cmp	r3, r7
 800ff20:	460d      	mov	r5, r1
 800ff22:	d9f4      	bls.n	800ff0e <_printf_i+0x112>
 800ff24:	2b08      	cmp	r3, #8
 800ff26:	d10b      	bne.n	800ff40 <_printf_i+0x144>
 800ff28:	6823      	ldr	r3, [r4, #0]
 800ff2a:	07df      	lsls	r7, r3, #31
 800ff2c:	d508      	bpl.n	800ff40 <_printf_i+0x144>
 800ff2e:	6923      	ldr	r3, [r4, #16]
 800ff30:	6861      	ldr	r1, [r4, #4]
 800ff32:	4299      	cmp	r1, r3
 800ff34:	bfde      	ittt	le
 800ff36:	2330      	movle	r3, #48	@ 0x30
 800ff38:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ff3c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800ff40:	1b92      	subs	r2, r2, r6
 800ff42:	6122      	str	r2, [r4, #16]
 800ff44:	f8cd a000 	str.w	sl, [sp]
 800ff48:	464b      	mov	r3, r9
 800ff4a:	aa03      	add	r2, sp, #12
 800ff4c:	4621      	mov	r1, r4
 800ff4e:	4640      	mov	r0, r8
 800ff50:	f7ff fee6 	bl	800fd20 <_printf_common>
 800ff54:	3001      	adds	r0, #1
 800ff56:	d14a      	bne.n	800ffee <_printf_i+0x1f2>
 800ff58:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ff5c:	b004      	add	sp, #16
 800ff5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff62:	6823      	ldr	r3, [r4, #0]
 800ff64:	f043 0320 	orr.w	r3, r3, #32
 800ff68:	6023      	str	r3, [r4, #0]
 800ff6a:	4833      	ldr	r0, [pc, #204]	@ (8010038 <_printf_i+0x23c>)
 800ff6c:	2778      	movs	r7, #120	@ 0x78
 800ff6e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ff72:	6823      	ldr	r3, [r4, #0]
 800ff74:	6831      	ldr	r1, [r6, #0]
 800ff76:	061f      	lsls	r7, r3, #24
 800ff78:	f851 5b04 	ldr.w	r5, [r1], #4
 800ff7c:	d402      	bmi.n	800ff84 <_printf_i+0x188>
 800ff7e:	065f      	lsls	r7, r3, #25
 800ff80:	bf48      	it	mi
 800ff82:	b2ad      	uxthmi	r5, r5
 800ff84:	6031      	str	r1, [r6, #0]
 800ff86:	07d9      	lsls	r1, r3, #31
 800ff88:	bf44      	itt	mi
 800ff8a:	f043 0320 	orrmi.w	r3, r3, #32
 800ff8e:	6023      	strmi	r3, [r4, #0]
 800ff90:	b11d      	cbz	r5, 800ff9a <_printf_i+0x19e>
 800ff92:	2310      	movs	r3, #16
 800ff94:	e7ac      	b.n	800fef0 <_printf_i+0xf4>
 800ff96:	4827      	ldr	r0, [pc, #156]	@ (8010034 <_printf_i+0x238>)
 800ff98:	e7e9      	b.n	800ff6e <_printf_i+0x172>
 800ff9a:	6823      	ldr	r3, [r4, #0]
 800ff9c:	f023 0320 	bic.w	r3, r3, #32
 800ffa0:	6023      	str	r3, [r4, #0]
 800ffa2:	e7f6      	b.n	800ff92 <_printf_i+0x196>
 800ffa4:	4616      	mov	r6, r2
 800ffa6:	e7bd      	b.n	800ff24 <_printf_i+0x128>
 800ffa8:	6833      	ldr	r3, [r6, #0]
 800ffaa:	6825      	ldr	r5, [r4, #0]
 800ffac:	6961      	ldr	r1, [r4, #20]
 800ffae:	1d18      	adds	r0, r3, #4
 800ffb0:	6030      	str	r0, [r6, #0]
 800ffb2:	062e      	lsls	r6, r5, #24
 800ffb4:	681b      	ldr	r3, [r3, #0]
 800ffb6:	d501      	bpl.n	800ffbc <_printf_i+0x1c0>
 800ffb8:	6019      	str	r1, [r3, #0]
 800ffba:	e002      	b.n	800ffc2 <_printf_i+0x1c6>
 800ffbc:	0668      	lsls	r0, r5, #25
 800ffbe:	d5fb      	bpl.n	800ffb8 <_printf_i+0x1bc>
 800ffc0:	8019      	strh	r1, [r3, #0]
 800ffc2:	2300      	movs	r3, #0
 800ffc4:	6123      	str	r3, [r4, #16]
 800ffc6:	4616      	mov	r6, r2
 800ffc8:	e7bc      	b.n	800ff44 <_printf_i+0x148>
 800ffca:	6833      	ldr	r3, [r6, #0]
 800ffcc:	1d1a      	adds	r2, r3, #4
 800ffce:	6032      	str	r2, [r6, #0]
 800ffd0:	681e      	ldr	r6, [r3, #0]
 800ffd2:	6862      	ldr	r2, [r4, #4]
 800ffd4:	2100      	movs	r1, #0
 800ffd6:	4630      	mov	r0, r6
 800ffd8:	f7f0 f922 	bl	8000220 <memchr>
 800ffdc:	b108      	cbz	r0, 800ffe2 <_printf_i+0x1e6>
 800ffde:	1b80      	subs	r0, r0, r6
 800ffe0:	6060      	str	r0, [r4, #4]
 800ffe2:	6863      	ldr	r3, [r4, #4]
 800ffe4:	6123      	str	r3, [r4, #16]
 800ffe6:	2300      	movs	r3, #0
 800ffe8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ffec:	e7aa      	b.n	800ff44 <_printf_i+0x148>
 800ffee:	6923      	ldr	r3, [r4, #16]
 800fff0:	4632      	mov	r2, r6
 800fff2:	4649      	mov	r1, r9
 800fff4:	4640      	mov	r0, r8
 800fff6:	47d0      	blx	sl
 800fff8:	3001      	adds	r0, #1
 800fffa:	d0ad      	beq.n	800ff58 <_printf_i+0x15c>
 800fffc:	6823      	ldr	r3, [r4, #0]
 800fffe:	079b      	lsls	r3, r3, #30
 8010000:	d413      	bmi.n	801002a <_printf_i+0x22e>
 8010002:	68e0      	ldr	r0, [r4, #12]
 8010004:	9b03      	ldr	r3, [sp, #12]
 8010006:	4298      	cmp	r0, r3
 8010008:	bfb8      	it	lt
 801000a:	4618      	movlt	r0, r3
 801000c:	e7a6      	b.n	800ff5c <_printf_i+0x160>
 801000e:	2301      	movs	r3, #1
 8010010:	4632      	mov	r2, r6
 8010012:	4649      	mov	r1, r9
 8010014:	4640      	mov	r0, r8
 8010016:	47d0      	blx	sl
 8010018:	3001      	adds	r0, #1
 801001a:	d09d      	beq.n	800ff58 <_printf_i+0x15c>
 801001c:	3501      	adds	r5, #1
 801001e:	68e3      	ldr	r3, [r4, #12]
 8010020:	9903      	ldr	r1, [sp, #12]
 8010022:	1a5b      	subs	r3, r3, r1
 8010024:	42ab      	cmp	r3, r5
 8010026:	dcf2      	bgt.n	801000e <_printf_i+0x212>
 8010028:	e7eb      	b.n	8010002 <_printf_i+0x206>
 801002a:	2500      	movs	r5, #0
 801002c:	f104 0619 	add.w	r6, r4, #25
 8010030:	e7f5      	b.n	801001e <_printf_i+0x222>
 8010032:	bf00      	nop
 8010034:	0801353a 	.word	0x0801353a
 8010038:	0801354b 	.word	0x0801354b

0801003c <std>:
 801003c:	2300      	movs	r3, #0
 801003e:	b510      	push	{r4, lr}
 8010040:	4604      	mov	r4, r0
 8010042:	e9c0 3300 	strd	r3, r3, [r0]
 8010046:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801004a:	6083      	str	r3, [r0, #8]
 801004c:	8181      	strh	r1, [r0, #12]
 801004e:	6643      	str	r3, [r0, #100]	@ 0x64
 8010050:	81c2      	strh	r2, [r0, #14]
 8010052:	6183      	str	r3, [r0, #24]
 8010054:	4619      	mov	r1, r3
 8010056:	2208      	movs	r2, #8
 8010058:	305c      	adds	r0, #92	@ 0x5c
 801005a:	f000 f8eb 	bl	8010234 <memset>
 801005e:	4b0d      	ldr	r3, [pc, #52]	@ (8010094 <std+0x58>)
 8010060:	6263      	str	r3, [r4, #36]	@ 0x24
 8010062:	4b0d      	ldr	r3, [pc, #52]	@ (8010098 <std+0x5c>)
 8010064:	62a3      	str	r3, [r4, #40]	@ 0x28
 8010066:	4b0d      	ldr	r3, [pc, #52]	@ (801009c <std+0x60>)
 8010068:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801006a:	4b0d      	ldr	r3, [pc, #52]	@ (80100a0 <std+0x64>)
 801006c:	6323      	str	r3, [r4, #48]	@ 0x30
 801006e:	4b0d      	ldr	r3, [pc, #52]	@ (80100a4 <std+0x68>)
 8010070:	6224      	str	r4, [r4, #32]
 8010072:	429c      	cmp	r4, r3
 8010074:	d006      	beq.n	8010084 <std+0x48>
 8010076:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801007a:	4294      	cmp	r4, r2
 801007c:	d002      	beq.n	8010084 <std+0x48>
 801007e:	33d0      	adds	r3, #208	@ 0xd0
 8010080:	429c      	cmp	r4, r3
 8010082:	d105      	bne.n	8010090 <std+0x54>
 8010084:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8010088:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801008c:	f000 b95e 	b.w	801034c <__retarget_lock_init_recursive>
 8010090:	bd10      	pop	{r4, pc}
 8010092:	bf00      	nop
 8010094:	08011d15 	.word	0x08011d15
 8010098:	08011d37 	.word	0x08011d37
 801009c:	08011d6f 	.word	0x08011d6f
 80100a0:	08011d93 	.word	0x08011d93
 80100a4:	200127f8 	.word	0x200127f8

080100a8 <stdio_exit_handler>:
 80100a8:	4a02      	ldr	r2, [pc, #8]	@ (80100b4 <stdio_exit_handler+0xc>)
 80100aa:	4903      	ldr	r1, [pc, #12]	@ (80100b8 <stdio_exit_handler+0x10>)
 80100ac:	4803      	ldr	r0, [pc, #12]	@ (80100bc <stdio_exit_handler+0x14>)
 80100ae:	f000 b869 	b.w	8010184 <_fwalk_sglue>
 80100b2:	bf00      	nop
 80100b4:	200001a8 	.word	0x200001a8
 80100b8:	080115a9 	.word	0x080115a9
 80100bc:	200001b8 	.word	0x200001b8

080100c0 <cleanup_stdio>:
 80100c0:	6841      	ldr	r1, [r0, #4]
 80100c2:	4b0c      	ldr	r3, [pc, #48]	@ (80100f4 <cleanup_stdio+0x34>)
 80100c4:	4299      	cmp	r1, r3
 80100c6:	b510      	push	{r4, lr}
 80100c8:	4604      	mov	r4, r0
 80100ca:	d001      	beq.n	80100d0 <cleanup_stdio+0x10>
 80100cc:	f001 fa6c 	bl	80115a8 <_fflush_r>
 80100d0:	68a1      	ldr	r1, [r4, #8]
 80100d2:	4b09      	ldr	r3, [pc, #36]	@ (80100f8 <cleanup_stdio+0x38>)
 80100d4:	4299      	cmp	r1, r3
 80100d6:	d002      	beq.n	80100de <cleanup_stdio+0x1e>
 80100d8:	4620      	mov	r0, r4
 80100da:	f001 fa65 	bl	80115a8 <_fflush_r>
 80100de:	68e1      	ldr	r1, [r4, #12]
 80100e0:	4b06      	ldr	r3, [pc, #24]	@ (80100fc <cleanup_stdio+0x3c>)
 80100e2:	4299      	cmp	r1, r3
 80100e4:	d004      	beq.n	80100f0 <cleanup_stdio+0x30>
 80100e6:	4620      	mov	r0, r4
 80100e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80100ec:	f001 ba5c 	b.w	80115a8 <_fflush_r>
 80100f0:	bd10      	pop	{r4, pc}
 80100f2:	bf00      	nop
 80100f4:	200127f8 	.word	0x200127f8
 80100f8:	20012860 	.word	0x20012860
 80100fc:	200128c8 	.word	0x200128c8

08010100 <global_stdio_init.part.0>:
 8010100:	b510      	push	{r4, lr}
 8010102:	4b0b      	ldr	r3, [pc, #44]	@ (8010130 <global_stdio_init.part.0+0x30>)
 8010104:	4c0b      	ldr	r4, [pc, #44]	@ (8010134 <global_stdio_init.part.0+0x34>)
 8010106:	4a0c      	ldr	r2, [pc, #48]	@ (8010138 <global_stdio_init.part.0+0x38>)
 8010108:	601a      	str	r2, [r3, #0]
 801010a:	4620      	mov	r0, r4
 801010c:	2200      	movs	r2, #0
 801010e:	2104      	movs	r1, #4
 8010110:	f7ff ff94 	bl	801003c <std>
 8010114:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8010118:	2201      	movs	r2, #1
 801011a:	2109      	movs	r1, #9
 801011c:	f7ff ff8e 	bl	801003c <std>
 8010120:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8010124:	2202      	movs	r2, #2
 8010126:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801012a:	2112      	movs	r1, #18
 801012c:	f7ff bf86 	b.w	801003c <std>
 8010130:	20012930 	.word	0x20012930
 8010134:	200127f8 	.word	0x200127f8
 8010138:	080100a9 	.word	0x080100a9

0801013c <__sfp_lock_acquire>:
 801013c:	4801      	ldr	r0, [pc, #4]	@ (8010144 <__sfp_lock_acquire+0x8>)
 801013e:	f000 b906 	b.w	801034e <__retarget_lock_acquire_recursive>
 8010142:	bf00      	nop
 8010144:	20012939 	.word	0x20012939

08010148 <__sfp_lock_release>:
 8010148:	4801      	ldr	r0, [pc, #4]	@ (8010150 <__sfp_lock_release+0x8>)
 801014a:	f000 b901 	b.w	8010350 <__retarget_lock_release_recursive>
 801014e:	bf00      	nop
 8010150:	20012939 	.word	0x20012939

08010154 <__sinit>:
 8010154:	b510      	push	{r4, lr}
 8010156:	4604      	mov	r4, r0
 8010158:	f7ff fff0 	bl	801013c <__sfp_lock_acquire>
 801015c:	6a23      	ldr	r3, [r4, #32]
 801015e:	b11b      	cbz	r3, 8010168 <__sinit+0x14>
 8010160:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010164:	f7ff bff0 	b.w	8010148 <__sfp_lock_release>
 8010168:	4b04      	ldr	r3, [pc, #16]	@ (801017c <__sinit+0x28>)
 801016a:	6223      	str	r3, [r4, #32]
 801016c:	4b04      	ldr	r3, [pc, #16]	@ (8010180 <__sinit+0x2c>)
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	2b00      	cmp	r3, #0
 8010172:	d1f5      	bne.n	8010160 <__sinit+0xc>
 8010174:	f7ff ffc4 	bl	8010100 <global_stdio_init.part.0>
 8010178:	e7f2      	b.n	8010160 <__sinit+0xc>
 801017a:	bf00      	nop
 801017c:	080100c1 	.word	0x080100c1
 8010180:	20012930 	.word	0x20012930

08010184 <_fwalk_sglue>:
 8010184:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010188:	4607      	mov	r7, r0
 801018a:	4688      	mov	r8, r1
 801018c:	4614      	mov	r4, r2
 801018e:	2600      	movs	r6, #0
 8010190:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010194:	f1b9 0901 	subs.w	r9, r9, #1
 8010198:	d505      	bpl.n	80101a6 <_fwalk_sglue+0x22>
 801019a:	6824      	ldr	r4, [r4, #0]
 801019c:	2c00      	cmp	r4, #0
 801019e:	d1f7      	bne.n	8010190 <_fwalk_sglue+0xc>
 80101a0:	4630      	mov	r0, r6
 80101a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80101a6:	89ab      	ldrh	r3, [r5, #12]
 80101a8:	2b01      	cmp	r3, #1
 80101aa:	d907      	bls.n	80101bc <_fwalk_sglue+0x38>
 80101ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80101b0:	3301      	adds	r3, #1
 80101b2:	d003      	beq.n	80101bc <_fwalk_sglue+0x38>
 80101b4:	4629      	mov	r1, r5
 80101b6:	4638      	mov	r0, r7
 80101b8:	47c0      	blx	r8
 80101ba:	4306      	orrs	r6, r0
 80101bc:	3568      	adds	r5, #104	@ 0x68
 80101be:	e7e9      	b.n	8010194 <_fwalk_sglue+0x10>

080101c0 <_vsniprintf_r>:
 80101c0:	b530      	push	{r4, r5, lr}
 80101c2:	4614      	mov	r4, r2
 80101c4:	2c00      	cmp	r4, #0
 80101c6:	b09b      	sub	sp, #108	@ 0x6c
 80101c8:	4605      	mov	r5, r0
 80101ca:	461a      	mov	r2, r3
 80101cc:	da05      	bge.n	80101da <_vsniprintf_r+0x1a>
 80101ce:	238b      	movs	r3, #139	@ 0x8b
 80101d0:	6003      	str	r3, [r0, #0]
 80101d2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80101d6:	b01b      	add	sp, #108	@ 0x6c
 80101d8:	bd30      	pop	{r4, r5, pc}
 80101da:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80101de:	f8ad 300c 	strh.w	r3, [sp, #12]
 80101e2:	bf14      	ite	ne
 80101e4:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 80101e8:	4623      	moveq	r3, r4
 80101ea:	9302      	str	r3, [sp, #8]
 80101ec:	9305      	str	r3, [sp, #20]
 80101ee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80101f2:	9100      	str	r1, [sp, #0]
 80101f4:	9104      	str	r1, [sp, #16]
 80101f6:	f8ad 300e 	strh.w	r3, [sp, #14]
 80101fa:	4669      	mov	r1, sp
 80101fc:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80101fe:	f000 ffa9 	bl	8011154 <_svfiprintf_r>
 8010202:	1c43      	adds	r3, r0, #1
 8010204:	bfbc      	itt	lt
 8010206:	238b      	movlt	r3, #139	@ 0x8b
 8010208:	602b      	strlt	r3, [r5, #0]
 801020a:	2c00      	cmp	r4, #0
 801020c:	d0e3      	beq.n	80101d6 <_vsniprintf_r+0x16>
 801020e:	9b00      	ldr	r3, [sp, #0]
 8010210:	2200      	movs	r2, #0
 8010212:	701a      	strb	r2, [r3, #0]
 8010214:	e7df      	b.n	80101d6 <_vsniprintf_r+0x16>
	...

08010218 <vsniprintf>:
 8010218:	b507      	push	{r0, r1, r2, lr}
 801021a:	9300      	str	r3, [sp, #0]
 801021c:	4613      	mov	r3, r2
 801021e:	460a      	mov	r2, r1
 8010220:	4601      	mov	r1, r0
 8010222:	4803      	ldr	r0, [pc, #12]	@ (8010230 <vsniprintf+0x18>)
 8010224:	6800      	ldr	r0, [r0, #0]
 8010226:	f7ff ffcb 	bl	80101c0 <_vsniprintf_r>
 801022a:	b003      	add	sp, #12
 801022c:	f85d fb04 	ldr.w	pc, [sp], #4
 8010230:	200001b4 	.word	0x200001b4

08010234 <memset>:
 8010234:	4402      	add	r2, r0
 8010236:	4603      	mov	r3, r0
 8010238:	4293      	cmp	r3, r2
 801023a:	d100      	bne.n	801023e <memset+0xa>
 801023c:	4770      	bx	lr
 801023e:	f803 1b01 	strb.w	r1, [r3], #1
 8010242:	e7f9      	b.n	8010238 <memset+0x4>

08010244 <_localeconv_r>:
 8010244:	4800      	ldr	r0, [pc, #0]	@ (8010248 <_localeconv_r+0x4>)
 8010246:	4770      	bx	lr
 8010248:	200002f4 	.word	0x200002f4

0801024c <_reclaim_reent>:
 801024c:	4b29      	ldr	r3, [pc, #164]	@ (80102f4 <_reclaim_reent+0xa8>)
 801024e:	681b      	ldr	r3, [r3, #0]
 8010250:	4283      	cmp	r3, r0
 8010252:	b570      	push	{r4, r5, r6, lr}
 8010254:	4604      	mov	r4, r0
 8010256:	d04b      	beq.n	80102f0 <_reclaim_reent+0xa4>
 8010258:	69c3      	ldr	r3, [r0, #28]
 801025a:	b1ab      	cbz	r3, 8010288 <_reclaim_reent+0x3c>
 801025c:	68db      	ldr	r3, [r3, #12]
 801025e:	b16b      	cbz	r3, 801027c <_reclaim_reent+0x30>
 8010260:	2500      	movs	r5, #0
 8010262:	69e3      	ldr	r3, [r4, #28]
 8010264:	68db      	ldr	r3, [r3, #12]
 8010266:	5959      	ldr	r1, [r3, r5]
 8010268:	2900      	cmp	r1, #0
 801026a:	d13b      	bne.n	80102e4 <_reclaim_reent+0x98>
 801026c:	3504      	adds	r5, #4
 801026e:	2d80      	cmp	r5, #128	@ 0x80
 8010270:	d1f7      	bne.n	8010262 <_reclaim_reent+0x16>
 8010272:	69e3      	ldr	r3, [r4, #28]
 8010274:	4620      	mov	r0, r4
 8010276:	68d9      	ldr	r1, [r3, #12]
 8010278:	f000 fec6 	bl	8011008 <_free_r>
 801027c:	69e3      	ldr	r3, [r4, #28]
 801027e:	6819      	ldr	r1, [r3, #0]
 8010280:	b111      	cbz	r1, 8010288 <_reclaim_reent+0x3c>
 8010282:	4620      	mov	r0, r4
 8010284:	f000 fec0 	bl	8011008 <_free_r>
 8010288:	6961      	ldr	r1, [r4, #20]
 801028a:	b111      	cbz	r1, 8010292 <_reclaim_reent+0x46>
 801028c:	4620      	mov	r0, r4
 801028e:	f000 febb 	bl	8011008 <_free_r>
 8010292:	69e1      	ldr	r1, [r4, #28]
 8010294:	b111      	cbz	r1, 801029c <_reclaim_reent+0x50>
 8010296:	4620      	mov	r0, r4
 8010298:	f000 feb6 	bl	8011008 <_free_r>
 801029c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801029e:	b111      	cbz	r1, 80102a6 <_reclaim_reent+0x5a>
 80102a0:	4620      	mov	r0, r4
 80102a2:	f000 feb1 	bl	8011008 <_free_r>
 80102a6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80102a8:	b111      	cbz	r1, 80102b0 <_reclaim_reent+0x64>
 80102aa:	4620      	mov	r0, r4
 80102ac:	f000 feac 	bl	8011008 <_free_r>
 80102b0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80102b2:	b111      	cbz	r1, 80102ba <_reclaim_reent+0x6e>
 80102b4:	4620      	mov	r0, r4
 80102b6:	f000 fea7 	bl	8011008 <_free_r>
 80102ba:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80102bc:	b111      	cbz	r1, 80102c4 <_reclaim_reent+0x78>
 80102be:	4620      	mov	r0, r4
 80102c0:	f000 fea2 	bl	8011008 <_free_r>
 80102c4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80102c6:	b111      	cbz	r1, 80102ce <_reclaim_reent+0x82>
 80102c8:	4620      	mov	r0, r4
 80102ca:	f000 fe9d 	bl	8011008 <_free_r>
 80102ce:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80102d0:	b111      	cbz	r1, 80102d8 <_reclaim_reent+0x8c>
 80102d2:	4620      	mov	r0, r4
 80102d4:	f000 fe98 	bl	8011008 <_free_r>
 80102d8:	6a23      	ldr	r3, [r4, #32]
 80102da:	b14b      	cbz	r3, 80102f0 <_reclaim_reent+0xa4>
 80102dc:	4620      	mov	r0, r4
 80102de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80102e2:	4718      	bx	r3
 80102e4:	680e      	ldr	r6, [r1, #0]
 80102e6:	4620      	mov	r0, r4
 80102e8:	f000 fe8e 	bl	8011008 <_free_r>
 80102ec:	4631      	mov	r1, r6
 80102ee:	e7bb      	b.n	8010268 <_reclaim_reent+0x1c>
 80102f0:	bd70      	pop	{r4, r5, r6, pc}
 80102f2:	bf00      	nop
 80102f4:	200001b4 	.word	0x200001b4

080102f8 <__errno>:
 80102f8:	4b01      	ldr	r3, [pc, #4]	@ (8010300 <__errno+0x8>)
 80102fa:	6818      	ldr	r0, [r3, #0]
 80102fc:	4770      	bx	lr
 80102fe:	bf00      	nop
 8010300:	200001b4 	.word	0x200001b4

08010304 <__libc_init_array>:
 8010304:	b570      	push	{r4, r5, r6, lr}
 8010306:	4d0d      	ldr	r5, [pc, #52]	@ (801033c <__libc_init_array+0x38>)
 8010308:	4c0d      	ldr	r4, [pc, #52]	@ (8010340 <__libc_init_array+0x3c>)
 801030a:	1b64      	subs	r4, r4, r5
 801030c:	10a4      	asrs	r4, r4, #2
 801030e:	2600      	movs	r6, #0
 8010310:	42a6      	cmp	r6, r4
 8010312:	d109      	bne.n	8010328 <__libc_init_array+0x24>
 8010314:	4d0b      	ldr	r5, [pc, #44]	@ (8010344 <__libc_init_array+0x40>)
 8010316:	4c0c      	ldr	r4, [pc, #48]	@ (8010348 <__libc_init_array+0x44>)
 8010318:	f002 fcd6 	bl	8012cc8 <_init>
 801031c:	1b64      	subs	r4, r4, r5
 801031e:	10a4      	asrs	r4, r4, #2
 8010320:	2600      	movs	r6, #0
 8010322:	42a6      	cmp	r6, r4
 8010324:	d105      	bne.n	8010332 <__libc_init_array+0x2e>
 8010326:	bd70      	pop	{r4, r5, r6, pc}
 8010328:	f855 3b04 	ldr.w	r3, [r5], #4
 801032c:	4798      	blx	r3
 801032e:	3601      	adds	r6, #1
 8010330:	e7ee      	b.n	8010310 <__libc_init_array+0xc>
 8010332:	f855 3b04 	ldr.w	r3, [r5], #4
 8010336:	4798      	blx	r3
 8010338:	3601      	adds	r6, #1
 801033a:	e7f2      	b.n	8010322 <__libc_init_array+0x1e>
 801033c:	080138b8 	.word	0x080138b8
 8010340:	080138b8 	.word	0x080138b8
 8010344:	080138b8 	.word	0x080138b8
 8010348:	080138bc 	.word	0x080138bc

0801034c <__retarget_lock_init_recursive>:
 801034c:	4770      	bx	lr

0801034e <__retarget_lock_acquire_recursive>:
 801034e:	4770      	bx	lr

08010350 <__retarget_lock_release_recursive>:
 8010350:	4770      	bx	lr

08010352 <memcpy>:
 8010352:	440a      	add	r2, r1
 8010354:	4291      	cmp	r1, r2
 8010356:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 801035a:	d100      	bne.n	801035e <memcpy+0xc>
 801035c:	4770      	bx	lr
 801035e:	b510      	push	{r4, lr}
 8010360:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010364:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010368:	4291      	cmp	r1, r2
 801036a:	d1f9      	bne.n	8010360 <memcpy+0xe>
 801036c:	bd10      	pop	{r4, pc}

0801036e <quorem>:
 801036e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010372:	6903      	ldr	r3, [r0, #16]
 8010374:	690c      	ldr	r4, [r1, #16]
 8010376:	42a3      	cmp	r3, r4
 8010378:	4607      	mov	r7, r0
 801037a:	db7e      	blt.n	801047a <quorem+0x10c>
 801037c:	3c01      	subs	r4, #1
 801037e:	f101 0814 	add.w	r8, r1, #20
 8010382:	00a3      	lsls	r3, r4, #2
 8010384:	f100 0514 	add.w	r5, r0, #20
 8010388:	9300      	str	r3, [sp, #0]
 801038a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801038e:	9301      	str	r3, [sp, #4]
 8010390:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010394:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010398:	3301      	adds	r3, #1
 801039a:	429a      	cmp	r2, r3
 801039c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80103a0:	fbb2 f6f3 	udiv	r6, r2, r3
 80103a4:	d32e      	bcc.n	8010404 <quorem+0x96>
 80103a6:	f04f 0a00 	mov.w	sl, #0
 80103aa:	46c4      	mov	ip, r8
 80103ac:	46ae      	mov	lr, r5
 80103ae:	46d3      	mov	fp, sl
 80103b0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80103b4:	b298      	uxth	r0, r3
 80103b6:	fb06 a000 	mla	r0, r6, r0, sl
 80103ba:	0c02      	lsrs	r2, r0, #16
 80103bc:	0c1b      	lsrs	r3, r3, #16
 80103be:	fb06 2303 	mla	r3, r6, r3, r2
 80103c2:	f8de 2000 	ldr.w	r2, [lr]
 80103c6:	b280      	uxth	r0, r0
 80103c8:	b292      	uxth	r2, r2
 80103ca:	1a12      	subs	r2, r2, r0
 80103cc:	445a      	add	r2, fp
 80103ce:	f8de 0000 	ldr.w	r0, [lr]
 80103d2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80103d6:	b29b      	uxth	r3, r3
 80103d8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80103dc:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80103e0:	b292      	uxth	r2, r2
 80103e2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80103e6:	45e1      	cmp	r9, ip
 80103e8:	f84e 2b04 	str.w	r2, [lr], #4
 80103ec:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80103f0:	d2de      	bcs.n	80103b0 <quorem+0x42>
 80103f2:	9b00      	ldr	r3, [sp, #0]
 80103f4:	58eb      	ldr	r3, [r5, r3]
 80103f6:	b92b      	cbnz	r3, 8010404 <quorem+0x96>
 80103f8:	9b01      	ldr	r3, [sp, #4]
 80103fa:	3b04      	subs	r3, #4
 80103fc:	429d      	cmp	r5, r3
 80103fe:	461a      	mov	r2, r3
 8010400:	d32f      	bcc.n	8010462 <quorem+0xf4>
 8010402:	613c      	str	r4, [r7, #16]
 8010404:	4638      	mov	r0, r7
 8010406:	f001 fb7d 	bl	8011b04 <__mcmp>
 801040a:	2800      	cmp	r0, #0
 801040c:	db25      	blt.n	801045a <quorem+0xec>
 801040e:	4629      	mov	r1, r5
 8010410:	2000      	movs	r0, #0
 8010412:	f858 2b04 	ldr.w	r2, [r8], #4
 8010416:	f8d1 c000 	ldr.w	ip, [r1]
 801041a:	fa1f fe82 	uxth.w	lr, r2
 801041e:	fa1f f38c 	uxth.w	r3, ip
 8010422:	eba3 030e 	sub.w	r3, r3, lr
 8010426:	4403      	add	r3, r0
 8010428:	0c12      	lsrs	r2, r2, #16
 801042a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801042e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8010432:	b29b      	uxth	r3, r3
 8010434:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010438:	45c1      	cmp	r9, r8
 801043a:	f841 3b04 	str.w	r3, [r1], #4
 801043e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8010442:	d2e6      	bcs.n	8010412 <quorem+0xa4>
 8010444:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010448:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801044c:	b922      	cbnz	r2, 8010458 <quorem+0xea>
 801044e:	3b04      	subs	r3, #4
 8010450:	429d      	cmp	r5, r3
 8010452:	461a      	mov	r2, r3
 8010454:	d30b      	bcc.n	801046e <quorem+0x100>
 8010456:	613c      	str	r4, [r7, #16]
 8010458:	3601      	adds	r6, #1
 801045a:	4630      	mov	r0, r6
 801045c:	b003      	add	sp, #12
 801045e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010462:	6812      	ldr	r2, [r2, #0]
 8010464:	3b04      	subs	r3, #4
 8010466:	2a00      	cmp	r2, #0
 8010468:	d1cb      	bne.n	8010402 <quorem+0x94>
 801046a:	3c01      	subs	r4, #1
 801046c:	e7c6      	b.n	80103fc <quorem+0x8e>
 801046e:	6812      	ldr	r2, [r2, #0]
 8010470:	3b04      	subs	r3, #4
 8010472:	2a00      	cmp	r2, #0
 8010474:	d1ef      	bne.n	8010456 <quorem+0xe8>
 8010476:	3c01      	subs	r4, #1
 8010478:	e7ea      	b.n	8010450 <quorem+0xe2>
 801047a:	2000      	movs	r0, #0
 801047c:	e7ee      	b.n	801045c <quorem+0xee>
	...

08010480 <_dtoa_r>:
 8010480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010484:	69c7      	ldr	r7, [r0, #28]
 8010486:	b099      	sub	sp, #100	@ 0x64
 8010488:	ed8d 0b02 	vstr	d0, [sp, #8]
 801048c:	ec55 4b10 	vmov	r4, r5, d0
 8010490:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8010492:	9109      	str	r1, [sp, #36]	@ 0x24
 8010494:	4683      	mov	fp, r0
 8010496:	920e      	str	r2, [sp, #56]	@ 0x38
 8010498:	9313      	str	r3, [sp, #76]	@ 0x4c
 801049a:	b97f      	cbnz	r7, 80104bc <_dtoa_r+0x3c>
 801049c:	2010      	movs	r0, #16
 801049e:	f000 ff55 	bl	801134c <malloc>
 80104a2:	4602      	mov	r2, r0
 80104a4:	f8cb 001c 	str.w	r0, [fp, #28]
 80104a8:	b920      	cbnz	r0, 80104b4 <_dtoa_r+0x34>
 80104aa:	4ba7      	ldr	r3, [pc, #668]	@ (8010748 <_dtoa_r+0x2c8>)
 80104ac:	21ef      	movs	r1, #239	@ 0xef
 80104ae:	48a7      	ldr	r0, [pc, #668]	@ (801074c <_dtoa_r+0x2cc>)
 80104b0:	f001 fd12 	bl	8011ed8 <__assert_func>
 80104b4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80104b8:	6007      	str	r7, [r0, #0]
 80104ba:	60c7      	str	r7, [r0, #12]
 80104bc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80104c0:	6819      	ldr	r1, [r3, #0]
 80104c2:	b159      	cbz	r1, 80104dc <_dtoa_r+0x5c>
 80104c4:	685a      	ldr	r2, [r3, #4]
 80104c6:	604a      	str	r2, [r1, #4]
 80104c8:	2301      	movs	r3, #1
 80104ca:	4093      	lsls	r3, r2
 80104cc:	608b      	str	r3, [r1, #8]
 80104ce:	4658      	mov	r0, fp
 80104d0:	f001 f8de 	bl	8011690 <_Bfree>
 80104d4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80104d8:	2200      	movs	r2, #0
 80104da:	601a      	str	r2, [r3, #0]
 80104dc:	1e2b      	subs	r3, r5, #0
 80104de:	bfb9      	ittee	lt
 80104e0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80104e4:	9303      	strlt	r3, [sp, #12]
 80104e6:	2300      	movge	r3, #0
 80104e8:	6033      	strge	r3, [r6, #0]
 80104ea:	9f03      	ldr	r7, [sp, #12]
 80104ec:	4b98      	ldr	r3, [pc, #608]	@ (8010750 <_dtoa_r+0x2d0>)
 80104ee:	bfbc      	itt	lt
 80104f0:	2201      	movlt	r2, #1
 80104f2:	6032      	strlt	r2, [r6, #0]
 80104f4:	43bb      	bics	r3, r7
 80104f6:	d112      	bne.n	801051e <_dtoa_r+0x9e>
 80104f8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80104fa:	f242 730f 	movw	r3, #9999	@ 0x270f
 80104fe:	6013      	str	r3, [r2, #0]
 8010500:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010504:	4323      	orrs	r3, r4
 8010506:	f000 854d 	beq.w	8010fa4 <_dtoa_r+0xb24>
 801050a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801050c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8010764 <_dtoa_r+0x2e4>
 8010510:	2b00      	cmp	r3, #0
 8010512:	f000 854f 	beq.w	8010fb4 <_dtoa_r+0xb34>
 8010516:	f10a 0303 	add.w	r3, sl, #3
 801051a:	f000 bd49 	b.w	8010fb0 <_dtoa_r+0xb30>
 801051e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010522:	2200      	movs	r2, #0
 8010524:	ec51 0b17 	vmov	r0, r1, d7
 8010528:	2300      	movs	r3, #0
 801052a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 801052e:	f7f0 faf3 	bl	8000b18 <__aeabi_dcmpeq>
 8010532:	4680      	mov	r8, r0
 8010534:	b158      	cbz	r0, 801054e <_dtoa_r+0xce>
 8010536:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8010538:	2301      	movs	r3, #1
 801053a:	6013      	str	r3, [r2, #0]
 801053c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801053e:	b113      	cbz	r3, 8010546 <_dtoa_r+0xc6>
 8010540:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8010542:	4b84      	ldr	r3, [pc, #528]	@ (8010754 <_dtoa_r+0x2d4>)
 8010544:	6013      	str	r3, [r2, #0]
 8010546:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8010768 <_dtoa_r+0x2e8>
 801054a:	f000 bd33 	b.w	8010fb4 <_dtoa_r+0xb34>
 801054e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8010552:	aa16      	add	r2, sp, #88	@ 0x58
 8010554:	a917      	add	r1, sp, #92	@ 0x5c
 8010556:	4658      	mov	r0, fp
 8010558:	f001 fb84 	bl	8011c64 <__d2b>
 801055c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8010560:	4681      	mov	r9, r0
 8010562:	2e00      	cmp	r6, #0
 8010564:	d077      	beq.n	8010656 <_dtoa_r+0x1d6>
 8010566:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010568:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 801056c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010570:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010574:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8010578:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801057c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8010580:	4619      	mov	r1, r3
 8010582:	2200      	movs	r2, #0
 8010584:	4b74      	ldr	r3, [pc, #464]	@ (8010758 <_dtoa_r+0x2d8>)
 8010586:	f7ef fea7 	bl	80002d8 <__aeabi_dsub>
 801058a:	a369      	add	r3, pc, #420	@ (adr r3, 8010730 <_dtoa_r+0x2b0>)
 801058c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010590:	f7f0 f85a 	bl	8000648 <__aeabi_dmul>
 8010594:	a368      	add	r3, pc, #416	@ (adr r3, 8010738 <_dtoa_r+0x2b8>)
 8010596:	e9d3 2300 	ldrd	r2, r3, [r3]
 801059a:	f7ef fe9f 	bl	80002dc <__adddf3>
 801059e:	4604      	mov	r4, r0
 80105a0:	4630      	mov	r0, r6
 80105a2:	460d      	mov	r5, r1
 80105a4:	f7ef ffe6 	bl	8000574 <__aeabi_i2d>
 80105a8:	a365      	add	r3, pc, #404	@ (adr r3, 8010740 <_dtoa_r+0x2c0>)
 80105aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105ae:	f7f0 f84b 	bl	8000648 <__aeabi_dmul>
 80105b2:	4602      	mov	r2, r0
 80105b4:	460b      	mov	r3, r1
 80105b6:	4620      	mov	r0, r4
 80105b8:	4629      	mov	r1, r5
 80105ba:	f7ef fe8f 	bl	80002dc <__adddf3>
 80105be:	4604      	mov	r4, r0
 80105c0:	460d      	mov	r5, r1
 80105c2:	f7f0 faf1 	bl	8000ba8 <__aeabi_d2iz>
 80105c6:	2200      	movs	r2, #0
 80105c8:	4607      	mov	r7, r0
 80105ca:	2300      	movs	r3, #0
 80105cc:	4620      	mov	r0, r4
 80105ce:	4629      	mov	r1, r5
 80105d0:	f7f0 faac 	bl	8000b2c <__aeabi_dcmplt>
 80105d4:	b140      	cbz	r0, 80105e8 <_dtoa_r+0x168>
 80105d6:	4638      	mov	r0, r7
 80105d8:	f7ef ffcc 	bl	8000574 <__aeabi_i2d>
 80105dc:	4622      	mov	r2, r4
 80105de:	462b      	mov	r3, r5
 80105e0:	f7f0 fa9a 	bl	8000b18 <__aeabi_dcmpeq>
 80105e4:	b900      	cbnz	r0, 80105e8 <_dtoa_r+0x168>
 80105e6:	3f01      	subs	r7, #1
 80105e8:	2f16      	cmp	r7, #22
 80105ea:	d851      	bhi.n	8010690 <_dtoa_r+0x210>
 80105ec:	4b5b      	ldr	r3, [pc, #364]	@ (801075c <_dtoa_r+0x2dc>)
 80105ee:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80105f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80105fa:	f7f0 fa97 	bl	8000b2c <__aeabi_dcmplt>
 80105fe:	2800      	cmp	r0, #0
 8010600:	d048      	beq.n	8010694 <_dtoa_r+0x214>
 8010602:	3f01      	subs	r7, #1
 8010604:	2300      	movs	r3, #0
 8010606:	9312      	str	r3, [sp, #72]	@ 0x48
 8010608:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801060a:	1b9b      	subs	r3, r3, r6
 801060c:	1e5a      	subs	r2, r3, #1
 801060e:	bf44      	itt	mi
 8010610:	f1c3 0801 	rsbmi	r8, r3, #1
 8010614:	2300      	movmi	r3, #0
 8010616:	9208      	str	r2, [sp, #32]
 8010618:	bf54      	ite	pl
 801061a:	f04f 0800 	movpl.w	r8, #0
 801061e:	9308      	strmi	r3, [sp, #32]
 8010620:	2f00      	cmp	r7, #0
 8010622:	db39      	blt.n	8010698 <_dtoa_r+0x218>
 8010624:	9b08      	ldr	r3, [sp, #32]
 8010626:	970f      	str	r7, [sp, #60]	@ 0x3c
 8010628:	443b      	add	r3, r7
 801062a:	9308      	str	r3, [sp, #32]
 801062c:	2300      	movs	r3, #0
 801062e:	930a      	str	r3, [sp, #40]	@ 0x28
 8010630:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010632:	2b09      	cmp	r3, #9
 8010634:	d864      	bhi.n	8010700 <_dtoa_r+0x280>
 8010636:	2b05      	cmp	r3, #5
 8010638:	bfc4      	itt	gt
 801063a:	3b04      	subgt	r3, #4
 801063c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 801063e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010640:	f1a3 0302 	sub.w	r3, r3, #2
 8010644:	bfcc      	ite	gt
 8010646:	2400      	movgt	r4, #0
 8010648:	2401      	movle	r4, #1
 801064a:	2b03      	cmp	r3, #3
 801064c:	d863      	bhi.n	8010716 <_dtoa_r+0x296>
 801064e:	e8df f003 	tbb	[pc, r3]
 8010652:	372a      	.short	0x372a
 8010654:	5535      	.short	0x5535
 8010656:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 801065a:	441e      	add	r6, r3
 801065c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8010660:	2b20      	cmp	r3, #32
 8010662:	bfc1      	itttt	gt
 8010664:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8010668:	409f      	lslgt	r7, r3
 801066a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801066e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8010672:	bfd6      	itet	le
 8010674:	f1c3 0320 	rsble	r3, r3, #32
 8010678:	ea47 0003 	orrgt.w	r0, r7, r3
 801067c:	fa04 f003 	lslle.w	r0, r4, r3
 8010680:	f7ef ff68 	bl	8000554 <__aeabi_ui2d>
 8010684:	2201      	movs	r2, #1
 8010686:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801068a:	3e01      	subs	r6, #1
 801068c:	9214      	str	r2, [sp, #80]	@ 0x50
 801068e:	e777      	b.n	8010580 <_dtoa_r+0x100>
 8010690:	2301      	movs	r3, #1
 8010692:	e7b8      	b.n	8010606 <_dtoa_r+0x186>
 8010694:	9012      	str	r0, [sp, #72]	@ 0x48
 8010696:	e7b7      	b.n	8010608 <_dtoa_r+0x188>
 8010698:	427b      	negs	r3, r7
 801069a:	930a      	str	r3, [sp, #40]	@ 0x28
 801069c:	2300      	movs	r3, #0
 801069e:	eba8 0807 	sub.w	r8, r8, r7
 80106a2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80106a4:	e7c4      	b.n	8010630 <_dtoa_r+0x1b0>
 80106a6:	2300      	movs	r3, #0
 80106a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80106aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	dc35      	bgt.n	801071c <_dtoa_r+0x29c>
 80106b0:	2301      	movs	r3, #1
 80106b2:	9300      	str	r3, [sp, #0]
 80106b4:	9307      	str	r3, [sp, #28]
 80106b6:	461a      	mov	r2, r3
 80106b8:	920e      	str	r2, [sp, #56]	@ 0x38
 80106ba:	e00b      	b.n	80106d4 <_dtoa_r+0x254>
 80106bc:	2301      	movs	r3, #1
 80106be:	e7f3      	b.n	80106a8 <_dtoa_r+0x228>
 80106c0:	2300      	movs	r3, #0
 80106c2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80106c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80106c6:	18fb      	adds	r3, r7, r3
 80106c8:	9300      	str	r3, [sp, #0]
 80106ca:	3301      	adds	r3, #1
 80106cc:	2b01      	cmp	r3, #1
 80106ce:	9307      	str	r3, [sp, #28]
 80106d0:	bfb8      	it	lt
 80106d2:	2301      	movlt	r3, #1
 80106d4:	f8db 001c 	ldr.w	r0, [fp, #28]
 80106d8:	2100      	movs	r1, #0
 80106da:	2204      	movs	r2, #4
 80106dc:	f102 0514 	add.w	r5, r2, #20
 80106e0:	429d      	cmp	r5, r3
 80106e2:	d91f      	bls.n	8010724 <_dtoa_r+0x2a4>
 80106e4:	6041      	str	r1, [r0, #4]
 80106e6:	4658      	mov	r0, fp
 80106e8:	f000 ff92 	bl	8011610 <_Balloc>
 80106ec:	4682      	mov	sl, r0
 80106ee:	2800      	cmp	r0, #0
 80106f0:	d13c      	bne.n	801076c <_dtoa_r+0x2ec>
 80106f2:	4b1b      	ldr	r3, [pc, #108]	@ (8010760 <_dtoa_r+0x2e0>)
 80106f4:	4602      	mov	r2, r0
 80106f6:	f240 11af 	movw	r1, #431	@ 0x1af
 80106fa:	e6d8      	b.n	80104ae <_dtoa_r+0x2e>
 80106fc:	2301      	movs	r3, #1
 80106fe:	e7e0      	b.n	80106c2 <_dtoa_r+0x242>
 8010700:	2401      	movs	r4, #1
 8010702:	2300      	movs	r3, #0
 8010704:	9309      	str	r3, [sp, #36]	@ 0x24
 8010706:	940b      	str	r4, [sp, #44]	@ 0x2c
 8010708:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801070c:	9300      	str	r3, [sp, #0]
 801070e:	9307      	str	r3, [sp, #28]
 8010710:	2200      	movs	r2, #0
 8010712:	2312      	movs	r3, #18
 8010714:	e7d0      	b.n	80106b8 <_dtoa_r+0x238>
 8010716:	2301      	movs	r3, #1
 8010718:	930b      	str	r3, [sp, #44]	@ 0x2c
 801071a:	e7f5      	b.n	8010708 <_dtoa_r+0x288>
 801071c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801071e:	9300      	str	r3, [sp, #0]
 8010720:	9307      	str	r3, [sp, #28]
 8010722:	e7d7      	b.n	80106d4 <_dtoa_r+0x254>
 8010724:	3101      	adds	r1, #1
 8010726:	0052      	lsls	r2, r2, #1
 8010728:	e7d8      	b.n	80106dc <_dtoa_r+0x25c>
 801072a:	bf00      	nop
 801072c:	f3af 8000 	nop.w
 8010730:	636f4361 	.word	0x636f4361
 8010734:	3fd287a7 	.word	0x3fd287a7
 8010738:	8b60c8b3 	.word	0x8b60c8b3
 801073c:	3fc68a28 	.word	0x3fc68a28
 8010740:	509f79fb 	.word	0x509f79fb
 8010744:	3fd34413 	.word	0x3fd34413
 8010748:	08013569 	.word	0x08013569
 801074c:	08013580 	.word	0x08013580
 8010750:	7ff00000 	.word	0x7ff00000
 8010754:	08013539 	.word	0x08013539
 8010758:	3ff80000 	.word	0x3ff80000
 801075c:	08013688 	.word	0x08013688
 8010760:	080135d8 	.word	0x080135d8
 8010764:	08013565 	.word	0x08013565
 8010768:	08013538 	.word	0x08013538
 801076c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8010770:	6018      	str	r0, [r3, #0]
 8010772:	9b07      	ldr	r3, [sp, #28]
 8010774:	2b0e      	cmp	r3, #14
 8010776:	f200 80a4 	bhi.w	80108c2 <_dtoa_r+0x442>
 801077a:	2c00      	cmp	r4, #0
 801077c:	f000 80a1 	beq.w	80108c2 <_dtoa_r+0x442>
 8010780:	2f00      	cmp	r7, #0
 8010782:	dd33      	ble.n	80107ec <_dtoa_r+0x36c>
 8010784:	4bad      	ldr	r3, [pc, #692]	@ (8010a3c <_dtoa_r+0x5bc>)
 8010786:	f007 020f 	and.w	r2, r7, #15
 801078a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801078e:	ed93 7b00 	vldr	d7, [r3]
 8010792:	05f8      	lsls	r0, r7, #23
 8010794:	ed8d 7b04 	vstr	d7, [sp, #16]
 8010798:	ea4f 1427 	mov.w	r4, r7, asr #4
 801079c:	d516      	bpl.n	80107cc <_dtoa_r+0x34c>
 801079e:	4ba8      	ldr	r3, [pc, #672]	@ (8010a40 <_dtoa_r+0x5c0>)
 80107a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80107a4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80107a8:	f7f0 f878 	bl	800089c <__aeabi_ddiv>
 80107ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80107b0:	f004 040f 	and.w	r4, r4, #15
 80107b4:	2603      	movs	r6, #3
 80107b6:	4da2      	ldr	r5, [pc, #648]	@ (8010a40 <_dtoa_r+0x5c0>)
 80107b8:	b954      	cbnz	r4, 80107d0 <_dtoa_r+0x350>
 80107ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80107be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80107c2:	f7f0 f86b 	bl	800089c <__aeabi_ddiv>
 80107c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80107ca:	e028      	b.n	801081e <_dtoa_r+0x39e>
 80107cc:	2602      	movs	r6, #2
 80107ce:	e7f2      	b.n	80107b6 <_dtoa_r+0x336>
 80107d0:	07e1      	lsls	r1, r4, #31
 80107d2:	d508      	bpl.n	80107e6 <_dtoa_r+0x366>
 80107d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80107d8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80107dc:	f7ef ff34 	bl	8000648 <__aeabi_dmul>
 80107e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80107e4:	3601      	adds	r6, #1
 80107e6:	1064      	asrs	r4, r4, #1
 80107e8:	3508      	adds	r5, #8
 80107ea:	e7e5      	b.n	80107b8 <_dtoa_r+0x338>
 80107ec:	f000 80d2 	beq.w	8010994 <_dtoa_r+0x514>
 80107f0:	427c      	negs	r4, r7
 80107f2:	4b92      	ldr	r3, [pc, #584]	@ (8010a3c <_dtoa_r+0x5bc>)
 80107f4:	4d92      	ldr	r5, [pc, #584]	@ (8010a40 <_dtoa_r+0x5c0>)
 80107f6:	f004 020f 	and.w	r2, r4, #15
 80107fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80107fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010802:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010806:	f7ef ff1f 	bl	8000648 <__aeabi_dmul>
 801080a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801080e:	1124      	asrs	r4, r4, #4
 8010810:	2300      	movs	r3, #0
 8010812:	2602      	movs	r6, #2
 8010814:	2c00      	cmp	r4, #0
 8010816:	f040 80b2 	bne.w	801097e <_dtoa_r+0x4fe>
 801081a:	2b00      	cmp	r3, #0
 801081c:	d1d3      	bne.n	80107c6 <_dtoa_r+0x346>
 801081e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010820:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8010824:	2b00      	cmp	r3, #0
 8010826:	f000 80b7 	beq.w	8010998 <_dtoa_r+0x518>
 801082a:	4b86      	ldr	r3, [pc, #536]	@ (8010a44 <_dtoa_r+0x5c4>)
 801082c:	2200      	movs	r2, #0
 801082e:	4620      	mov	r0, r4
 8010830:	4629      	mov	r1, r5
 8010832:	f7f0 f97b 	bl	8000b2c <__aeabi_dcmplt>
 8010836:	2800      	cmp	r0, #0
 8010838:	f000 80ae 	beq.w	8010998 <_dtoa_r+0x518>
 801083c:	9b07      	ldr	r3, [sp, #28]
 801083e:	2b00      	cmp	r3, #0
 8010840:	f000 80aa 	beq.w	8010998 <_dtoa_r+0x518>
 8010844:	9b00      	ldr	r3, [sp, #0]
 8010846:	2b00      	cmp	r3, #0
 8010848:	dd37      	ble.n	80108ba <_dtoa_r+0x43a>
 801084a:	1e7b      	subs	r3, r7, #1
 801084c:	9304      	str	r3, [sp, #16]
 801084e:	4620      	mov	r0, r4
 8010850:	4b7d      	ldr	r3, [pc, #500]	@ (8010a48 <_dtoa_r+0x5c8>)
 8010852:	2200      	movs	r2, #0
 8010854:	4629      	mov	r1, r5
 8010856:	f7ef fef7 	bl	8000648 <__aeabi_dmul>
 801085a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801085e:	9c00      	ldr	r4, [sp, #0]
 8010860:	3601      	adds	r6, #1
 8010862:	4630      	mov	r0, r6
 8010864:	f7ef fe86 	bl	8000574 <__aeabi_i2d>
 8010868:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801086c:	f7ef feec 	bl	8000648 <__aeabi_dmul>
 8010870:	4b76      	ldr	r3, [pc, #472]	@ (8010a4c <_dtoa_r+0x5cc>)
 8010872:	2200      	movs	r2, #0
 8010874:	f7ef fd32 	bl	80002dc <__adddf3>
 8010878:	4605      	mov	r5, r0
 801087a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801087e:	2c00      	cmp	r4, #0
 8010880:	f040 808d 	bne.w	801099e <_dtoa_r+0x51e>
 8010884:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010888:	4b71      	ldr	r3, [pc, #452]	@ (8010a50 <_dtoa_r+0x5d0>)
 801088a:	2200      	movs	r2, #0
 801088c:	f7ef fd24 	bl	80002d8 <__aeabi_dsub>
 8010890:	4602      	mov	r2, r0
 8010892:	460b      	mov	r3, r1
 8010894:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010898:	462a      	mov	r2, r5
 801089a:	4633      	mov	r3, r6
 801089c:	f7f0 f964 	bl	8000b68 <__aeabi_dcmpgt>
 80108a0:	2800      	cmp	r0, #0
 80108a2:	f040 828b 	bne.w	8010dbc <_dtoa_r+0x93c>
 80108a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80108aa:	462a      	mov	r2, r5
 80108ac:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80108b0:	f7f0 f93c 	bl	8000b2c <__aeabi_dcmplt>
 80108b4:	2800      	cmp	r0, #0
 80108b6:	f040 8128 	bne.w	8010b0a <_dtoa_r+0x68a>
 80108ba:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80108be:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80108c2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	f2c0 815a 	blt.w	8010b7e <_dtoa_r+0x6fe>
 80108ca:	2f0e      	cmp	r7, #14
 80108cc:	f300 8157 	bgt.w	8010b7e <_dtoa_r+0x6fe>
 80108d0:	4b5a      	ldr	r3, [pc, #360]	@ (8010a3c <_dtoa_r+0x5bc>)
 80108d2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80108d6:	ed93 7b00 	vldr	d7, [r3]
 80108da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80108dc:	2b00      	cmp	r3, #0
 80108de:	ed8d 7b00 	vstr	d7, [sp]
 80108e2:	da03      	bge.n	80108ec <_dtoa_r+0x46c>
 80108e4:	9b07      	ldr	r3, [sp, #28]
 80108e6:	2b00      	cmp	r3, #0
 80108e8:	f340 8101 	ble.w	8010aee <_dtoa_r+0x66e>
 80108ec:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80108f0:	4656      	mov	r6, sl
 80108f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80108f6:	4620      	mov	r0, r4
 80108f8:	4629      	mov	r1, r5
 80108fa:	f7ef ffcf 	bl	800089c <__aeabi_ddiv>
 80108fe:	f7f0 f953 	bl	8000ba8 <__aeabi_d2iz>
 8010902:	4680      	mov	r8, r0
 8010904:	f7ef fe36 	bl	8000574 <__aeabi_i2d>
 8010908:	e9dd 2300 	ldrd	r2, r3, [sp]
 801090c:	f7ef fe9c 	bl	8000648 <__aeabi_dmul>
 8010910:	4602      	mov	r2, r0
 8010912:	460b      	mov	r3, r1
 8010914:	4620      	mov	r0, r4
 8010916:	4629      	mov	r1, r5
 8010918:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801091c:	f7ef fcdc 	bl	80002d8 <__aeabi_dsub>
 8010920:	f806 4b01 	strb.w	r4, [r6], #1
 8010924:	9d07      	ldr	r5, [sp, #28]
 8010926:	eba6 040a 	sub.w	r4, r6, sl
 801092a:	42a5      	cmp	r5, r4
 801092c:	4602      	mov	r2, r0
 801092e:	460b      	mov	r3, r1
 8010930:	f040 8117 	bne.w	8010b62 <_dtoa_r+0x6e2>
 8010934:	f7ef fcd2 	bl	80002dc <__adddf3>
 8010938:	e9dd 2300 	ldrd	r2, r3, [sp]
 801093c:	4604      	mov	r4, r0
 801093e:	460d      	mov	r5, r1
 8010940:	f7f0 f912 	bl	8000b68 <__aeabi_dcmpgt>
 8010944:	2800      	cmp	r0, #0
 8010946:	f040 80f9 	bne.w	8010b3c <_dtoa_r+0x6bc>
 801094a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801094e:	4620      	mov	r0, r4
 8010950:	4629      	mov	r1, r5
 8010952:	f7f0 f8e1 	bl	8000b18 <__aeabi_dcmpeq>
 8010956:	b118      	cbz	r0, 8010960 <_dtoa_r+0x4e0>
 8010958:	f018 0f01 	tst.w	r8, #1
 801095c:	f040 80ee 	bne.w	8010b3c <_dtoa_r+0x6bc>
 8010960:	4649      	mov	r1, r9
 8010962:	4658      	mov	r0, fp
 8010964:	f000 fe94 	bl	8011690 <_Bfree>
 8010968:	2300      	movs	r3, #0
 801096a:	7033      	strb	r3, [r6, #0]
 801096c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801096e:	3701      	adds	r7, #1
 8010970:	601f      	str	r7, [r3, #0]
 8010972:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010974:	2b00      	cmp	r3, #0
 8010976:	f000 831d 	beq.w	8010fb4 <_dtoa_r+0xb34>
 801097a:	601e      	str	r6, [r3, #0]
 801097c:	e31a      	b.n	8010fb4 <_dtoa_r+0xb34>
 801097e:	07e2      	lsls	r2, r4, #31
 8010980:	d505      	bpl.n	801098e <_dtoa_r+0x50e>
 8010982:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010986:	f7ef fe5f 	bl	8000648 <__aeabi_dmul>
 801098a:	3601      	adds	r6, #1
 801098c:	2301      	movs	r3, #1
 801098e:	1064      	asrs	r4, r4, #1
 8010990:	3508      	adds	r5, #8
 8010992:	e73f      	b.n	8010814 <_dtoa_r+0x394>
 8010994:	2602      	movs	r6, #2
 8010996:	e742      	b.n	801081e <_dtoa_r+0x39e>
 8010998:	9c07      	ldr	r4, [sp, #28]
 801099a:	9704      	str	r7, [sp, #16]
 801099c:	e761      	b.n	8010862 <_dtoa_r+0x3e2>
 801099e:	4b27      	ldr	r3, [pc, #156]	@ (8010a3c <_dtoa_r+0x5bc>)
 80109a0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80109a2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80109a6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80109aa:	4454      	add	r4, sl
 80109ac:	2900      	cmp	r1, #0
 80109ae:	d053      	beq.n	8010a58 <_dtoa_r+0x5d8>
 80109b0:	4928      	ldr	r1, [pc, #160]	@ (8010a54 <_dtoa_r+0x5d4>)
 80109b2:	2000      	movs	r0, #0
 80109b4:	f7ef ff72 	bl	800089c <__aeabi_ddiv>
 80109b8:	4633      	mov	r3, r6
 80109ba:	462a      	mov	r2, r5
 80109bc:	f7ef fc8c 	bl	80002d8 <__aeabi_dsub>
 80109c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80109c4:	4656      	mov	r6, sl
 80109c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80109ca:	f7f0 f8ed 	bl	8000ba8 <__aeabi_d2iz>
 80109ce:	4605      	mov	r5, r0
 80109d0:	f7ef fdd0 	bl	8000574 <__aeabi_i2d>
 80109d4:	4602      	mov	r2, r0
 80109d6:	460b      	mov	r3, r1
 80109d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80109dc:	f7ef fc7c 	bl	80002d8 <__aeabi_dsub>
 80109e0:	3530      	adds	r5, #48	@ 0x30
 80109e2:	4602      	mov	r2, r0
 80109e4:	460b      	mov	r3, r1
 80109e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80109ea:	f806 5b01 	strb.w	r5, [r6], #1
 80109ee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80109f2:	f7f0 f89b 	bl	8000b2c <__aeabi_dcmplt>
 80109f6:	2800      	cmp	r0, #0
 80109f8:	d171      	bne.n	8010ade <_dtoa_r+0x65e>
 80109fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80109fe:	4911      	ldr	r1, [pc, #68]	@ (8010a44 <_dtoa_r+0x5c4>)
 8010a00:	2000      	movs	r0, #0
 8010a02:	f7ef fc69 	bl	80002d8 <__aeabi_dsub>
 8010a06:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8010a0a:	f7f0 f88f 	bl	8000b2c <__aeabi_dcmplt>
 8010a0e:	2800      	cmp	r0, #0
 8010a10:	f040 8095 	bne.w	8010b3e <_dtoa_r+0x6be>
 8010a14:	42a6      	cmp	r6, r4
 8010a16:	f43f af50 	beq.w	80108ba <_dtoa_r+0x43a>
 8010a1a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8010a1e:	4b0a      	ldr	r3, [pc, #40]	@ (8010a48 <_dtoa_r+0x5c8>)
 8010a20:	2200      	movs	r2, #0
 8010a22:	f7ef fe11 	bl	8000648 <__aeabi_dmul>
 8010a26:	4b08      	ldr	r3, [pc, #32]	@ (8010a48 <_dtoa_r+0x5c8>)
 8010a28:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8010a2c:	2200      	movs	r2, #0
 8010a2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010a32:	f7ef fe09 	bl	8000648 <__aeabi_dmul>
 8010a36:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010a3a:	e7c4      	b.n	80109c6 <_dtoa_r+0x546>
 8010a3c:	08013688 	.word	0x08013688
 8010a40:	08013660 	.word	0x08013660
 8010a44:	3ff00000 	.word	0x3ff00000
 8010a48:	40240000 	.word	0x40240000
 8010a4c:	401c0000 	.word	0x401c0000
 8010a50:	40140000 	.word	0x40140000
 8010a54:	3fe00000 	.word	0x3fe00000
 8010a58:	4631      	mov	r1, r6
 8010a5a:	4628      	mov	r0, r5
 8010a5c:	f7ef fdf4 	bl	8000648 <__aeabi_dmul>
 8010a60:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8010a64:	9415      	str	r4, [sp, #84]	@ 0x54
 8010a66:	4656      	mov	r6, sl
 8010a68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010a6c:	f7f0 f89c 	bl	8000ba8 <__aeabi_d2iz>
 8010a70:	4605      	mov	r5, r0
 8010a72:	f7ef fd7f 	bl	8000574 <__aeabi_i2d>
 8010a76:	4602      	mov	r2, r0
 8010a78:	460b      	mov	r3, r1
 8010a7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010a7e:	f7ef fc2b 	bl	80002d8 <__aeabi_dsub>
 8010a82:	3530      	adds	r5, #48	@ 0x30
 8010a84:	f806 5b01 	strb.w	r5, [r6], #1
 8010a88:	4602      	mov	r2, r0
 8010a8a:	460b      	mov	r3, r1
 8010a8c:	42a6      	cmp	r6, r4
 8010a8e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010a92:	f04f 0200 	mov.w	r2, #0
 8010a96:	d124      	bne.n	8010ae2 <_dtoa_r+0x662>
 8010a98:	4bac      	ldr	r3, [pc, #688]	@ (8010d4c <_dtoa_r+0x8cc>)
 8010a9a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8010a9e:	f7ef fc1d 	bl	80002dc <__adddf3>
 8010aa2:	4602      	mov	r2, r0
 8010aa4:	460b      	mov	r3, r1
 8010aa6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010aaa:	f7f0 f85d 	bl	8000b68 <__aeabi_dcmpgt>
 8010aae:	2800      	cmp	r0, #0
 8010ab0:	d145      	bne.n	8010b3e <_dtoa_r+0x6be>
 8010ab2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8010ab6:	49a5      	ldr	r1, [pc, #660]	@ (8010d4c <_dtoa_r+0x8cc>)
 8010ab8:	2000      	movs	r0, #0
 8010aba:	f7ef fc0d 	bl	80002d8 <__aeabi_dsub>
 8010abe:	4602      	mov	r2, r0
 8010ac0:	460b      	mov	r3, r1
 8010ac2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010ac6:	f7f0 f831 	bl	8000b2c <__aeabi_dcmplt>
 8010aca:	2800      	cmp	r0, #0
 8010acc:	f43f aef5 	beq.w	80108ba <_dtoa_r+0x43a>
 8010ad0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8010ad2:	1e73      	subs	r3, r6, #1
 8010ad4:	9315      	str	r3, [sp, #84]	@ 0x54
 8010ad6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010ada:	2b30      	cmp	r3, #48	@ 0x30
 8010adc:	d0f8      	beq.n	8010ad0 <_dtoa_r+0x650>
 8010ade:	9f04      	ldr	r7, [sp, #16]
 8010ae0:	e73e      	b.n	8010960 <_dtoa_r+0x4e0>
 8010ae2:	4b9b      	ldr	r3, [pc, #620]	@ (8010d50 <_dtoa_r+0x8d0>)
 8010ae4:	f7ef fdb0 	bl	8000648 <__aeabi_dmul>
 8010ae8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010aec:	e7bc      	b.n	8010a68 <_dtoa_r+0x5e8>
 8010aee:	d10c      	bne.n	8010b0a <_dtoa_r+0x68a>
 8010af0:	4b98      	ldr	r3, [pc, #608]	@ (8010d54 <_dtoa_r+0x8d4>)
 8010af2:	2200      	movs	r2, #0
 8010af4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010af8:	f7ef fda6 	bl	8000648 <__aeabi_dmul>
 8010afc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010b00:	f7f0 f828 	bl	8000b54 <__aeabi_dcmpge>
 8010b04:	2800      	cmp	r0, #0
 8010b06:	f000 8157 	beq.w	8010db8 <_dtoa_r+0x938>
 8010b0a:	2400      	movs	r4, #0
 8010b0c:	4625      	mov	r5, r4
 8010b0e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010b10:	43db      	mvns	r3, r3
 8010b12:	9304      	str	r3, [sp, #16]
 8010b14:	4656      	mov	r6, sl
 8010b16:	2700      	movs	r7, #0
 8010b18:	4621      	mov	r1, r4
 8010b1a:	4658      	mov	r0, fp
 8010b1c:	f000 fdb8 	bl	8011690 <_Bfree>
 8010b20:	2d00      	cmp	r5, #0
 8010b22:	d0dc      	beq.n	8010ade <_dtoa_r+0x65e>
 8010b24:	b12f      	cbz	r7, 8010b32 <_dtoa_r+0x6b2>
 8010b26:	42af      	cmp	r7, r5
 8010b28:	d003      	beq.n	8010b32 <_dtoa_r+0x6b2>
 8010b2a:	4639      	mov	r1, r7
 8010b2c:	4658      	mov	r0, fp
 8010b2e:	f000 fdaf 	bl	8011690 <_Bfree>
 8010b32:	4629      	mov	r1, r5
 8010b34:	4658      	mov	r0, fp
 8010b36:	f000 fdab 	bl	8011690 <_Bfree>
 8010b3a:	e7d0      	b.n	8010ade <_dtoa_r+0x65e>
 8010b3c:	9704      	str	r7, [sp, #16]
 8010b3e:	4633      	mov	r3, r6
 8010b40:	461e      	mov	r6, r3
 8010b42:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010b46:	2a39      	cmp	r2, #57	@ 0x39
 8010b48:	d107      	bne.n	8010b5a <_dtoa_r+0x6da>
 8010b4a:	459a      	cmp	sl, r3
 8010b4c:	d1f8      	bne.n	8010b40 <_dtoa_r+0x6c0>
 8010b4e:	9a04      	ldr	r2, [sp, #16]
 8010b50:	3201      	adds	r2, #1
 8010b52:	9204      	str	r2, [sp, #16]
 8010b54:	2230      	movs	r2, #48	@ 0x30
 8010b56:	f88a 2000 	strb.w	r2, [sl]
 8010b5a:	781a      	ldrb	r2, [r3, #0]
 8010b5c:	3201      	adds	r2, #1
 8010b5e:	701a      	strb	r2, [r3, #0]
 8010b60:	e7bd      	b.n	8010ade <_dtoa_r+0x65e>
 8010b62:	4b7b      	ldr	r3, [pc, #492]	@ (8010d50 <_dtoa_r+0x8d0>)
 8010b64:	2200      	movs	r2, #0
 8010b66:	f7ef fd6f 	bl	8000648 <__aeabi_dmul>
 8010b6a:	2200      	movs	r2, #0
 8010b6c:	2300      	movs	r3, #0
 8010b6e:	4604      	mov	r4, r0
 8010b70:	460d      	mov	r5, r1
 8010b72:	f7ef ffd1 	bl	8000b18 <__aeabi_dcmpeq>
 8010b76:	2800      	cmp	r0, #0
 8010b78:	f43f aebb 	beq.w	80108f2 <_dtoa_r+0x472>
 8010b7c:	e6f0      	b.n	8010960 <_dtoa_r+0x4e0>
 8010b7e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8010b80:	2a00      	cmp	r2, #0
 8010b82:	f000 80db 	beq.w	8010d3c <_dtoa_r+0x8bc>
 8010b86:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010b88:	2a01      	cmp	r2, #1
 8010b8a:	f300 80bf 	bgt.w	8010d0c <_dtoa_r+0x88c>
 8010b8e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8010b90:	2a00      	cmp	r2, #0
 8010b92:	f000 80b7 	beq.w	8010d04 <_dtoa_r+0x884>
 8010b96:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8010b9a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8010b9c:	4646      	mov	r6, r8
 8010b9e:	9a08      	ldr	r2, [sp, #32]
 8010ba0:	2101      	movs	r1, #1
 8010ba2:	441a      	add	r2, r3
 8010ba4:	4658      	mov	r0, fp
 8010ba6:	4498      	add	r8, r3
 8010ba8:	9208      	str	r2, [sp, #32]
 8010baa:	f000 fe25 	bl	80117f8 <__i2b>
 8010bae:	4605      	mov	r5, r0
 8010bb0:	b15e      	cbz	r6, 8010bca <_dtoa_r+0x74a>
 8010bb2:	9b08      	ldr	r3, [sp, #32]
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	dd08      	ble.n	8010bca <_dtoa_r+0x74a>
 8010bb8:	42b3      	cmp	r3, r6
 8010bba:	9a08      	ldr	r2, [sp, #32]
 8010bbc:	bfa8      	it	ge
 8010bbe:	4633      	movge	r3, r6
 8010bc0:	eba8 0803 	sub.w	r8, r8, r3
 8010bc4:	1af6      	subs	r6, r6, r3
 8010bc6:	1ad3      	subs	r3, r2, r3
 8010bc8:	9308      	str	r3, [sp, #32]
 8010bca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010bcc:	b1f3      	cbz	r3, 8010c0c <_dtoa_r+0x78c>
 8010bce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010bd0:	2b00      	cmp	r3, #0
 8010bd2:	f000 80b7 	beq.w	8010d44 <_dtoa_r+0x8c4>
 8010bd6:	b18c      	cbz	r4, 8010bfc <_dtoa_r+0x77c>
 8010bd8:	4629      	mov	r1, r5
 8010bda:	4622      	mov	r2, r4
 8010bdc:	4658      	mov	r0, fp
 8010bde:	f000 fecb 	bl	8011978 <__pow5mult>
 8010be2:	464a      	mov	r2, r9
 8010be4:	4601      	mov	r1, r0
 8010be6:	4605      	mov	r5, r0
 8010be8:	4658      	mov	r0, fp
 8010bea:	f000 fe1b 	bl	8011824 <__multiply>
 8010bee:	4649      	mov	r1, r9
 8010bf0:	9004      	str	r0, [sp, #16]
 8010bf2:	4658      	mov	r0, fp
 8010bf4:	f000 fd4c 	bl	8011690 <_Bfree>
 8010bf8:	9b04      	ldr	r3, [sp, #16]
 8010bfa:	4699      	mov	r9, r3
 8010bfc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010bfe:	1b1a      	subs	r2, r3, r4
 8010c00:	d004      	beq.n	8010c0c <_dtoa_r+0x78c>
 8010c02:	4649      	mov	r1, r9
 8010c04:	4658      	mov	r0, fp
 8010c06:	f000 feb7 	bl	8011978 <__pow5mult>
 8010c0a:	4681      	mov	r9, r0
 8010c0c:	2101      	movs	r1, #1
 8010c0e:	4658      	mov	r0, fp
 8010c10:	f000 fdf2 	bl	80117f8 <__i2b>
 8010c14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010c16:	4604      	mov	r4, r0
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	f000 81cf 	beq.w	8010fbc <_dtoa_r+0xb3c>
 8010c1e:	461a      	mov	r2, r3
 8010c20:	4601      	mov	r1, r0
 8010c22:	4658      	mov	r0, fp
 8010c24:	f000 fea8 	bl	8011978 <__pow5mult>
 8010c28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010c2a:	2b01      	cmp	r3, #1
 8010c2c:	4604      	mov	r4, r0
 8010c2e:	f300 8095 	bgt.w	8010d5c <_dtoa_r+0x8dc>
 8010c32:	9b02      	ldr	r3, [sp, #8]
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	f040 8087 	bne.w	8010d48 <_dtoa_r+0x8c8>
 8010c3a:	9b03      	ldr	r3, [sp, #12]
 8010c3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	f040 8089 	bne.w	8010d58 <_dtoa_r+0x8d8>
 8010c46:	9b03      	ldr	r3, [sp, #12]
 8010c48:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010c4c:	0d1b      	lsrs	r3, r3, #20
 8010c4e:	051b      	lsls	r3, r3, #20
 8010c50:	b12b      	cbz	r3, 8010c5e <_dtoa_r+0x7de>
 8010c52:	9b08      	ldr	r3, [sp, #32]
 8010c54:	3301      	adds	r3, #1
 8010c56:	9308      	str	r3, [sp, #32]
 8010c58:	f108 0801 	add.w	r8, r8, #1
 8010c5c:	2301      	movs	r3, #1
 8010c5e:	930a      	str	r3, [sp, #40]	@ 0x28
 8010c60:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010c62:	2b00      	cmp	r3, #0
 8010c64:	f000 81b0 	beq.w	8010fc8 <_dtoa_r+0xb48>
 8010c68:	6923      	ldr	r3, [r4, #16]
 8010c6a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010c6e:	6918      	ldr	r0, [r3, #16]
 8010c70:	f000 fd76 	bl	8011760 <__hi0bits>
 8010c74:	f1c0 0020 	rsb	r0, r0, #32
 8010c78:	9b08      	ldr	r3, [sp, #32]
 8010c7a:	4418      	add	r0, r3
 8010c7c:	f010 001f 	ands.w	r0, r0, #31
 8010c80:	d077      	beq.n	8010d72 <_dtoa_r+0x8f2>
 8010c82:	f1c0 0320 	rsb	r3, r0, #32
 8010c86:	2b04      	cmp	r3, #4
 8010c88:	dd6b      	ble.n	8010d62 <_dtoa_r+0x8e2>
 8010c8a:	9b08      	ldr	r3, [sp, #32]
 8010c8c:	f1c0 001c 	rsb	r0, r0, #28
 8010c90:	4403      	add	r3, r0
 8010c92:	4480      	add	r8, r0
 8010c94:	4406      	add	r6, r0
 8010c96:	9308      	str	r3, [sp, #32]
 8010c98:	f1b8 0f00 	cmp.w	r8, #0
 8010c9c:	dd05      	ble.n	8010caa <_dtoa_r+0x82a>
 8010c9e:	4649      	mov	r1, r9
 8010ca0:	4642      	mov	r2, r8
 8010ca2:	4658      	mov	r0, fp
 8010ca4:	f000 fec2 	bl	8011a2c <__lshift>
 8010ca8:	4681      	mov	r9, r0
 8010caa:	9b08      	ldr	r3, [sp, #32]
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	dd05      	ble.n	8010cbc <_dtoa_r+0x83c>
 8010cb0:	4621      	mov	r1, r4
 8010cb2:	461a      	mov	r2, r3
 8010cb4:	4658      	mov	r0, fp
 8010cb6:	f000 feb9 	bl	8011a2c <__lshift>
 8010cba:	4604      	mov	r4, r0
 8010cbc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	d059      	beq.n	8010d76 <_dtoa_r+0x8f6>
 8010cc2:	4621      	mov	r1, r4
 8010cc4:	4648      	mov	r0, r9
 8010cc6:	f000 ff1d 	bl	8011b04 <__mcmp>
 8010cca:	2800      	cmp	r0, #0
 8010ccc:	da53      	bge.n	8010d76 <_dtoa_r+0x8f6>
 8010cce:	1e7b      	subs	r3, r7, #1
 8010cd0:	9304      	str	r3, [sp, #16]
 8010cd2:	4649      	mov	r1, r9
 8010cd4:	2300      	movs	r3, #0
 8010cd6:	220a      	movs	r2, #10
 8010cd8:	4658      	mov	r0, fp
 8010cda:	f000 fcfb 	bl	80116d4 <__multadd>
 8010cde:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010ce0:	4681      	mov	r9, r0
 8010ce2:	2b00      	cmp	r3, #0
 8010ce4:	f000 8172 	beq.w	8010fcc <_dtoa_r+0xb4c>
 8010ce8:	2300      	movs	r3, #0
 8010cea:	4629      	mov	r1, r5
 8010cec:	220a      	movs	r2, #10
 8010cee:	4658      	mov	r0, fp
 8010cf0:	f000 fcf0 	bl	80116d4 <__multadd>
 8010cf4:	9b00      	ldr	r3, [sp, #0]
 8010cf6:	2b00      	cmp	r3, #0
 8010cf8:	4605      	mov	r5, r0
 8010cfa:	dc67      	bgt.n	8010dcc <_dtoa_r+0x94c>
 8010cfc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010cfe:	2b02      	cmp	r3, #2
 8010d00:	dc41      	bgt.n	8010d86 <_dtoa_r+0x906>
 8010d02:	e063      	b.n	8010dcc <_dtoa_r+0x94c>
 8010d04:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8010d06:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8010d0a:	e746      	b.n	8010b9a <_dtoa_r+0x71a>
 8010d0c:	9b07      	ldr	r3, [sp, #28]
 8010d0e:	1e5c      	subs	r4, r3, #1
 8010d10:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010d12:	42a3      	cmp	r3, r4
 8010d14:	bfbf      	itttt	lt
 8010d16:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8010d18:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8010d1a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8010d1c:	1ae3      	sublt	r3, r4, r3
 8010d1e:	bfb4      	ite	lt
 8010d20:	18d2      	addlt	r2, r2, r3
 8010d22:	1b1c      	subge	r4, r3, r4
 8010d24:	9b07      	ldr	r3, [sp, #28]
 8010d26:	bfbc      	itt	lt
 8010d28:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8010d2a:	2400      	movlt	r4, #0
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	bfb5      	itete	lt
 8010d30:	eba8 0603 	sublt.w	r6, r8, r3
 8010d34:	9b07      	ldrge	r3, [sp, #28]
 8010d36:	2300      	movlt	r3, #0
 8010d38:	4646      	movge	r6, r8
 8010d3a:	e730      	b.n	8010b9e <_dtoa_r+0x71e>
 8010d3c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8010d3e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8010d40:	4646      	mov	r6, r8
 8010d42:	e735      	b.n	8010bb0 <_dtoa_r+0x730>
 8010d44:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010d46:	e75c      	b.n	8010c02 <_dtoa_r+0x782>
 8010d48:	2300      	movs	r3, #0
 8010d4a:	e788      	b.n	8010c5e <_dtoa_r+0x7de>
 8010d4c:	3fe00000 	.word	0x3fe00000
 8010d50:	40240000 	.word	0x40240000
 8010d54:	40140000 	.word	0x40140000
 8010d58:	9b02      	ldr	r3, [sp, #8]
 8010d5a:	e780      	b.n	8010c5e <_dtoa_r+0x7de>
 8010d5c:	2300      	movs	r3, #0
 8010d5e:	930a      	str	r3, [sp, #40]	@ 0x28
 8010d60:	e782      	b.n	8010c68 <_dtoa_r+0x7e8>
 8010d62:	d099      	beq.n	8010c98 <_dtoa_r+0x818>
 8010d64:	9a08      	ldr	r2, [sp, #32]
 8010d66:	331c      	adds	r3, #28
 8010d68:	441a      	add	r2, r3
 8010d6a:	4498      	add	r8, r3
 8010d6c:	441e      	add	r6, r3
 8010d6e:	9208      	str	r2, [sp, #32]
 8010d70:	e792      	b.n	8010c98 <_dtoa_r+0x818>
 8010d72:	4603      	mov	r3, r0
 8010d74:	e7f6      	b.n	8010d64 <_dtoa_r+0x8e4>
 8010d76:	9b07      	ldr	r3, [sp, #28]
 8010d78:	9704      	str	r7, [sp, #16]
 8010d7a:	2b00      	cmp	r3, #0
 8010d7c:	dc20      	bgt.n	8010dc0 <_dtoa_r+0x940>
 8010d7e:	9300      	str	r3, [sp, #0]
 8010d80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010d82:	2b02      	cmp	r3, #2
 8010d84:	dd1e      	ble.n	8010dc4 <_dtoa_r+0x944>
 8010d86:	9b00      	ldr	r3, [sp, #0]
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	f47f aec0 	bne.w	8010b0e <_dtoa_r+0x68e>
 8010d8e:	4621      	mov	r1, r4
 8010d90:	2205      	movs	r2, #5
 8010d92:	4658      	mov	r0, fp
 8010d94:	f000 fc9e 	bl	80116d4 <__multadd>
 8010d98:	4601      	mov	r1, r0
 8010d9a:	4604      	mov	r4, r0
 8010d9c:	4648      	mov	r0, r9
 8010d9e:	f000 feb1 	bl	8011b04 <__mcmp>
 8010da2:	2800      	cmp	r0, #0
 8010da4:	f77f aeb3 	ble.w	8010b0e <_dtoa_r+0x68e>
 8010da8:	4656      	mov	r6, sl
 8010daa:	2331      	movs	r3, #49	@ 0x31
 8010dac:	f806 3b01 	strb.w	r3, [r6], #1
 8010db0:	9b04      	ldr	r3, [sp, #16]
 8010db2:	3301      	adds	r3, #1
 8010db4:	9304      	str	r3, [sp, #16]
 8010db6:	e6ae      	b.n	8010b16 <_dtoa_r+0x696>
 8010db8:	9c07      	ldr	r4, [sp, #28]
 8010dba:	9704      	str	r7, [sp, #16]
 8010dbc:	4625      	mov	r5, r4
 8010dbe:	e7f3      	b.n	8010da8 <_dtoa_r+0x928>
 8010dc0:	9b07      	ldr	r3, [sp, #28]
 8010dc2:	9300      	str	r3, [sp, #0]
 8010dc4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	f000 8104 	beq.w	8010fd4 <_dtoa_r+0xb54>
 8010dcc:	2e00      	cmp	r6, #0
 8010dce:	dd05      	ble.n	8010ddc <_dtoa_r+0x95c>
 8010dd0:	4629      	mov	r1, r5
 8010dd2:	4632      	mov	r2, r6
 8010dd4:	4658      	mov	r0, fp
 8010dd6:	f000 fe29 	bl	8011a2c <__lshift>
 8010dda:	4605      	mov	r5, r0
 8010ddc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010dde:	2b00      	cmp	r3, #0
 8010de0:	d05a      	beq.n	8010e98 <_dtoa_r+0xa18>
 8010de2:	6869      	ldr	r1, [r5, #4]
 8010de4:	4658      	mov	r0, fp
 8010de6:	f000 fc13 	bl	8011610 <_Balloc>
 8010dea:	4606      	mov	r6, r0
 8010dec:	b928      	cbnz	r0, 8010dfa <_dtoa_r+0x97a>
 8010dee:	4b84      	ldr	r3, [pc, #528]	@ (8011000 <_dtoa_r+0xb80>)
 8010df0:	4602      	mov	r2, r0
 8010df2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8010df6:	f7ff bb5a 	b.w	80104ae <_dtoa_r+0x2e>
 8010dfa:	692a      	ldr	r2, [r5, #16]
 8010dfc:	3202      	adds	r2, #2
 8010dfe:	0092      	lsls	r2, r2, #2
 8010e00:	f105 010c 	add.w	r1, r5, #12
 8010e04:	300c      	adds	r0, #12
 8010e06:	f7ff faa4 	bl	8010352 <memcpy>
 8010e0a:	2201      	movs	r2, #1
 8010e0c:	4631      	mov	r1, r6
 8010e0e:	4658      	mov	r0, fp
 8010e10:	f000 fe0c 	bl	8011a2c <__lshift>
 8010e14:	f10a 0301 	add.w	r3, sl, #1
 8010e18:	9307      	str	r3, [sp, #28]
 8010e1a:	9b00      	ldr	r3, [sp, #0]
 8010e1c:	4453      	add	r3, sl
 8010e1e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010e20:	9b02      	ldr	r3, [sp, #8]
 8010e22:	f003 0301 	and.w	r3, r3, #1
 8010e26:	462f      	mov	r7, r5
 8010e28:	930a      	str	r3, [sp, #40]	@ 0x28
 8010e2a:	4605      	mov	r5, r0
 8010e2c:	9b07      	ldr	r3, [sp, #28]
 8010e2e:	4621      	mov	r1, r4
 8010e30:	3b01      	subs	r3, #1
 8010e32:	4648      	mov	r0, r9
 8010e34:	9300      	str	r3, [sp, #0]
 8010e36:	f7ff fa9a 	bl	801036e <quorem>
 8010e3a:	4639      	mov	r1, r7
 8010e3c:	9002      	str	r0, [sp, #8]
 8010e3e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8010e42:	4648      	mov	r0, r9
 8010e44:	f000 fe5e 	bl	8011b04 <__mcmp>
 8010e48:	462a      	mov	r2, r5
 8010e4a:	9008      	str	r0, [sp, #32]
 8010e4c:	4621      	mov	r1, r4
 8010e4e:	4658      	mov	r0, fp
 8010e50:	f000 fe74 	bl	8011b3c <__mdiff>
 8010e54:	68c2      	ldr	r2, [r0, #12]
 8010e56:	4606      	mov	r6, r0
 8010e58:	bb02      	cbnz	r2, 8010e9c <_dtoa_r+0xa1c>
 8010e5a:	4601      	mov	r1, r0
 8010e5c:	4648      	mov	r0, r9
 8010e5e:	f000 fe51 	bl	8011b04 <__mcmp>
 8010e62:	4602      	mov	r2, r0
 8010e64:	4631      	mov	r1, r6
 8010e66:	4658      	mov	r0, fp
 8010e68:	920e      	str	r2, [sp, #56]	@ 0x38
 8010e6a:	f000 fc11 	bl	8011690 <_Bfree>
 8010e6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010e70:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010e72:	9e07      	ldr	r6, [sp, #28]
 8010e74:	ea43 0102 	orr.w	r1, r3, r2
 8010e78:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010e7a:	4319      	orrs	r1, r3
 8010e7c:	d110      	bne.n	8010ea0 <_dtoa_r+0xa20>
 8010e7e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8010e82:	d029      	beq.n	8010ed8 <_dtoa_r+0xa58>
 8010e84:	9b08      	ldr	r3, [sp, #32]
 8010e86:	2b00      	cmp	r3, #0
 8010e88:	dd02      	ble.n	8010e90 <_dtoa_r+0xa10>
 8010e8a:	9b02      	ldr	r3, [sp, #8]
 8010e8c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8010e90:	9b00      	ldr	r3, [sp, #0]
 8010e92:	f883 8000 	strb.w	r8, [r3]
 8010e96:	e63f      	b.n	8010b18 <_dtoa_r+0x698>
 8010e98:	4628      	mov	r0, r5
 8010e9a:	e7bb      	b.n	8010e14 <_dtoa_r+0x994>
 8010e9c:	2201      	movs	r2, #1
 8010e9e:	e7e1      	b.n	8010e64 <_dtoa_r+0x9e4>
 8010ea0:	9b08      	ldr	r3, [sp, #32]
 8010ea2:	2b00      	cmp	r3, #0
 8010ea4:	db04      	blt.n	8010eb0 <_dtoa_r+0xa30>
 8010ea6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010ea8:	430b      	orrs	r3, r1
 8010eaa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8010eac:	430b      	orrs	r3, r1
 8010eae:	d120      	bne.n	8010ef2 <_dtoa_r+0xa72>
 8010eb0:	2a00      	cmp	r2, #0
 8010eb2:	dded      	ble.n	8010e90 <_dtoa_r+0xa10>
 8010eb4:	4649      	mov	r1, r9
 8010eb6:	2201      	movs	r2, #1
 8010eb8:	4658      	mov	r0, fp
 8010eba:	f000 fdb7 	bl	8011a2c <__lshift>
 8010ebe:	4621      	mov	r1, r4
 8010ec0:	4681      	mov	r9, r0
 8010ec2:	f000 fe1f 	bl	8011b04 <__mcmp>
 8010ec6:	2800      	cmp	r0, #0
 8010ec8:	dc03      	bgt.n	8010ed2 <_dtoa_r+0xa52>
 8010eca:	d1e1      	bne.n	8010e90 <_dtoa_r+0xa10>
 8010ecc:	f018 0f01 	tst.w	r8, #1
 8010ed0:	d0de      	beq.n	8010e90 <_dtoa_r+0xa10>
 8010ed2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8010ed6:	d1d8      	bne.n	8010e8a <_dtoa_r+0xa0a>
 8010ed8:	9a00      	ldr	r2, [sp, #0]
 8010eda:	2339      	movs	r3, #57	@ 0x39
 8010edc:	7013      	strb	r3, [r2, #0]
 8010ede:	4633      	mov	r3, r6
 8010ee0:	461e      	mov	r6, r3
 8010ee2:	3b01      	subs	r3, #1
 8010ee4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8010ee8:	2a39      	cmp	r2, #57	@ 0x39
 8010eea:	d052      	beq.n	8010f92 <_dtoa_r+0xb12>
 8010eec:	3201      	adds	r2, #1
 8010eee:	701a      	strb	r2, [r3, #0]
 8010ef0:	e612      	b.n	8010b18 <_dtoa_r+0x698>
 8010ef2:	2a00      	cmp	r2, #0
 8010ef4:	dd07      	ble.n	8010f06 <_dtoa_r+0xa86>
 8010ef6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8010efa:	d0ed      	beq.n	8010ed8 <_dtoa_r+0xa58>
 8010efc:	9a00      	ldr	r2, [sp, #0]
 8010efe:	f108 0301 	add.w	r3, r8, #1
 8010f02:	7013      	strb	r3, [r2, #0]
 8010f04:	e608      	b.n	8010b18 <_dtoa_r+0x698>
 8010f06:	9b07      	ldr	r3, [sp, #28]
 8010f08:	9a07      	ldr	r2, [sp, #28]
 8010f0a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8010f0e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010f10:	4293      	cmp	r3, r2
 8010f12:	d028      	beq.n	8010f66 <_dtoa_r+0xae6>
 8010f14:	4649      	mov	r1, r9
 8010f16:	2300      	movs	r3, #0
 8010f18:	220a      	movs	r2, #10
 8010f1a:	4658      	mov	r0, fp
 8010f1c:	f000 fbda 	bl	80116d4 <__multadd>
 8010f20:	42af      	cmp	r7, r5
 8010f22:	4681      	mov	r9, r0
 8010f24:	f04f 0300 	mov.w	r3, #0
 8010f28:	f04f 020a 	mov.w	r2, #10
 8010f2c:	4639      	mov	r1, r7
 8010f2e:	4658      	mov	r0, fp
 8010f30:	d107      	bne.n	8010f42 <_dtoa_r+0xac2>
 8010f32:	f000 fbcf 	bl	80116d4 <__multadd>
 8010f36:	4607      	mov	r7, r0
 8010f38:	4605      	mov	r5, r0
 8010f3a:	9b07      	ldr	r3, [sp, #28]
 8010f3c:	3301      	adds	r3, #1
 8010f3e:	9307      	str	r3, [sp, #28]
 8010f40:	e774      	b.n	8010e2c <_dtoa_r+0x9ac>
 8010f42:	f000 fbc7 	bl	80116d4 <__multadd>
 8010f46:	4629      	mov	r1, r5
 8010f48:	4607      	mov	r7, r0
 8010f4a:	2300      	movs	r3, #0
 8010f4c:	220a      	movs	r2, #10
 8010f4e:	4658      	mov	r0, fp
 8010f50:	f000 fbc0 	bl	80116d4 <__multadd>
 8010f54:	4605      	mov	r5, r0
 8010f56:	e7f0      	b.n	8010f3a <_dtoa_r+0xaba>
 8010f58:	9b00      	ldr	r3, [sp, #0]
 8010f5a:	2b00      	cmp	r3, #0
 8010f5c:	bfcc      	ite	gt
 8010f5e:	461e      	movgt	r6, r3
 8010f60:	2601      	movle	r6, #1
 8010f62:	4456      	add	r6, sl
 8010f64:	2700      	movs	r7, #0
 8010f66:	4649      	mov	r1, r9
 8010f68:	2201      	movs	r2, #1
 8010f6a:	4658      	mov	r0, fp
 8010f6c:	f000 fd5e 	bl	8011a2c <__lshift>
 8010f70:	4621      	mov	r1, r4
 8010f72:	4681      	mov	r9, r0
 8010f74:	f000 fdc6 	bl	8011b04 <__mcmp>
 8010f78:	2800      	cmp	r0, #0
 8010f7a:	dcb0      	bgt.n	8010ede <_dtoa_r+0xa5e>
 8010f7c:	d102      	bne.n	8010f84 <_dtoa_r+0xb04>
 8010f7e:	f018 0f01 	tst.w	r8, #1
 8010f82:	d1ac      	bne.n	8010ede <_dtoa_r+0xa5e>
 8010f84:	4633      	mov	r3, r6
 8010f86:	461e      	mov	r6, r3
 8010f88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010f8c:	2a30      	cmp	r2, #48	@ 0x30
 8010f8e:	d0fa      	beq.n	8010f86 <_dtoa_r+0xb06>
 8010f90:	e5c2      	b.n	8010b18 <_dtoa_r+0x698>
 8010f92:	459a      	cmp	sl, r3
 8010f94:	d1a4      	bne.n	8010ee0 <_dtoa_r+0xa60>
 8010f96:	9b04      	ldr	r3, [sp, #16]
 8010f98:	3301      	adds	r3, #1
 8010f9a:	9304      	str	r3, [sp, #16]
 8010f9c:	2331      	movs	r3, #49	@ 0x31
 8010f9e:	f88a 3000 	strb.w	r3, [sl]
 8010fa2:	e5b9      	b.n	8010b18 <_dtoa_r+0x698>
 8010fa4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010fa6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8011004 <_dtoa_r+0xb84>
 8010faa:	b11b      	cbz	r3, 8010fb4 <_dtoa_r+0xb34>
 8010fac:	f10a 0308 	add.w	r3, sl, #8
 8010fb0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8010fb2:	6013      	str	r3, [r2, #0]
 8010fb4:	4650      	mov	r0, sl
 8010fb6:	b019      	add	sp, #100	@ 0x64
 8010fb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010fbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010fbe:	2b01      	cmp	r3, #1
 8010fc0:	f77f ae37 	ble.w	8010c32 <_dtoa_r+0x7b2>
 8010fc4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010fc6:	930a      	str	r3, [sp, #40]	@ 0x28
 8010fc8:	2001      	movs	r0, #1
 8010fca:	e655      	b.n	8010c78 <_dtoa_r+0x7f8>
 8010fcc:	9b00      	ldr	r3, [sp, #0]
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	f77f aed6 	ble.w	8010d80 <_dtoa_r+0x900>
 8010fd4:	4656      	mov	r6, sl
 8010fd6:	4621      	mov	r1, r4
 8010fd8:	4648      	mov	r0, r9
 8010fda:	f7ff f9c8 	bl	801036e <quorem>
 8010fde:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8010fe2:	f806 8b01 	strb.w	r8, [r6], #1
 8010fe6:	9b00      	ldr	r3, [sp, #0]
 8010fe8:	eba6 020a 	sub.w	r2, r6, sl
 8010fec:	4293      	cmp	r3, r2
 8010fee:	ddb3      	ble.n	8010f58 <_dtoa_r+0xad8>
 8010ff0:	4649      	mov	r1, r9
 8010ff2:	2300      	movs	r3, #0
 8010ff4:	220a      	movs	r2, #10
 8010ff6:	4658      	mov	r0, fp
 8010ff8:	f000 fb6c 	bl	80116d4 <__multadd>
 8010ffc:	4681      	mov	r9, r0
 8010ffe:	e7ea      	b.n	8010fd6 <_dtoa_r+0xb56>
 8011000:	080135d8 	.word	0x080135d8
 8011004:	0801355c 	.word	0x0801355c

08011008 <_free_r>:
 8011008:	b538      	push	{r3, r4, r5, lr}
 801100a:	4605      	mov	r5, r0
 801100c:	2900      	cmp	r1, #0
 801100e:	d041      	beq.n	8011094 <_free_r+0x8c>
 8011010:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011014:	1f0c      	subs	r4, r1, #4
 8011016:	2b00      	cmp	r3, #0
 8011018:	bfb8      	it	lt
 801101a:	18e4      	addlt	r4, r4, r3
 801101c:	f000 faec 	bl	80115f8 <__malloc_lock>
 8011020:	4a1d      	ldr	r2, [pc, #116]	@ (8011098 <_free_r+0x90>)
 8011022:	6813      	ldr	r3, [r2, #0]
 8011024:	b933      	cbnz	r3, 8011034 <_free_r+0x2c>
 8011026:	6063      	str	r3, [r4, #4]
 8011028:	6014      	str	r4, [r2, #0]
 801102a:	4628      	mov	r0, r5
 801102c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011030:	f000 bae8 	b.w	8011604 <__malloc_unlock>
 8011034:	42a3      	cmp	r3, r4
 8011036:	d908      	bls.n	801104a <_free_r+0x42>
 8011038:	6820      	ldr	r0, [r4, #0]
 801103a:	1821      	adds	r1, r4, r0
 801103c:	428b      	cmp	r3, r1
 801103e:	bf01      	itttt	eq
 8011040:	6819      	ldreq	r1, [r3, #0]
 8011042:	685b      	ldreq	r3, [r3, #4]
 8011044:	1809      	addeq	r1, r1, r0
 8011046:	6021      	streq	r1, [r4, #0]
 8011048:	e7ed      	b.n	8011026 <_free_r+0x1e>
 801104a:	461a      	mov	r2, r3
 801104c:	685b      	ldr	r3, [r3, #4]
 801104e:	b10b      	cbz	r3, 8011054 <_free_r+0x4c>
 8011050:	42a3      	cmp	r3, r4
 8011052:	d9fa      	bls.n	801104a <_free_r+0x42>
 8011054:	6811      	ldr	r1, [r2, #0]
 8011056:	1850      	adds	r0, r2, r1
 8011058:	42a0      	cmp	r0, r4
 801105a:	d10b      	bne.n	8011074 <_free_r+0x6c>
 801105c:	6820      	ldr	r0, [r4, #0]
 801105e:	4401      	add	r1, r0
 8011060:	1850      	adds	r0, r2, r1
 8011062:	4283      	cmp	r3, r0
 8011064:	6011      	str	r1, [r2, #0]
 8011066:	d1e0      	bne.n	801102a <_free_r+0x22>
 8011068:	6818      	ldr	r0, [r3, #0]
 801106a:	685b      	ldr	r3, [r3, #4]
 801106c:	6053      	str	r3, [r2, #4]
 801106e:	4408      	add	r0, r1
 8011070:	6010      	str	r0, [r2, #0]
 8011072:	e7da      	b.n	801102a <_free_r+0x22>
 8011074:	d902      	bls.n	801107c <_free_r+0x74>
 8011076:	230c      	movs	r3, #12
 8011078:	602b      	str	r3, [r5, #0]
 801107a:	e7d6      	b.n	801102a <_free_r+0x22>
 801107c:	6820      	ldr	r0, [r4, #0]
 801107e:	1821      	adds	r1, r4, r0
 8011080:	428b      	cmp	r3, r1
 8011082:	bf04      	itt	eq
 8011084:	6819      	ldreq	r1, [r3, #0]
 8011086:	685b      	ldreq	r3, [r3, #4]
 8011088:	6063      	str	r3, [r4, #4]
 801108a:	bf04      	itt	eq
 801108c:	1809      	addeq	r1, r1, r0
 801108e:	6021      	streq	r1, [r4, #0]
 8011090:	6054      	str	r4, [r2, #4]
 8011092:	e7ca      	b.n	801102a <_free_r+0x22>
 8011094:	bd38      	pop	{r3, r4, r5, pc}
 8011096:	bf00      	nop
 8011098:	20012940 	.word	0x20012940

0801109c <__ssputs_r>:
 801109c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80110a0:	688e      	ldr	r6, [r1, #8]
 80110a2:	461f      	mov	r7, r3
 80110a4:	42be      	cmp	r6, r7
 80110a6:	680b      	ldr	r3, [r1, #0]
 80110a8:	4682      	mov	sl, r0
 80110aa:	460c      	mov	r4, r1
 80110ac:	4690      	mov	r8, r2
 80110ae:	d82d      	bhi.n	801110c <__ssputs_r+0x70>
 80110b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80110b4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80110b8:	d026      	beq.n	8011108 <__ssputs_r+0x6c>
 80110ba:	6965      	ldr	r5, [r4, #20]
 80110bc:	6909      	ldr	r1, [r1, #16]
 80110be:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80110c2:	eba3 0901 	sub.w	r9, r3, r1
 80110c6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80110ca:	1c7b      	adds	r3, r7, #1
 80110cc:	444b      	add	r3, r9
 80110ce:	106d      	asrs	r5, r5, #1
 80110d0:	429d      	cmp	r5, r3
 80110d2:	bf38      	it	cc
 80110d4:	461d      	movcc	r5, r3
 80110d6:	0553      	lsls	r3, r2, #21
 80110d8:	d527      	bpl.n	801112a <__ssputs_r+0x8e>
 80110da:	4629      	mov	r1, r5
 80110dc:	f000 f960 	bl	80113a0 <_malloc_r>
 80110e0:	4606      	mov	r6, r0
 80110e2:	b360      	cbz	r0, 801113e <__ssputs_r+0xa2>
 80110e4:	6921      	ldr	r1, [r4, #16]
 80110e6:	464a      	mov	r2, r9
 80110e8:	f7ff f933 	bl	8010352 <memcpy>
 80110ec:	89a3      	ldrh	r3, [r4, #12]
 80110ee:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80110f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80110f6:	81a3      	strh	r3, [r4, #12]
 80110f8:	6126      	str	r6, [r4, #16]
 80110fa:	6165      	str	r5, [r4, #20]
 80110fc:	444e      	add	r6, r9
 80110fe:	eba5 0509 	sub.w	r5, r5, r9
 8011102:	6026      	str	r6, [r4, #0]
 8011104:	60a5      	str	r5, [r4, #8]
 8011106:	463e      	mov	r6, r7
 8011108:	42be      	cmp	r6, r7
 801110a:	d900      	bls.n	801110e <__ssputs_r+0x72>
 801110c:	463e      	mov	r6, r7
 801110e:	6820      	ldr	r0, [r4, #0]
 8011110:	4632      	mov	r2, r6
 8011112:	4641      	mov	r1, r8
 8011114:	f000 fe6f 	bl	8011df6 <memmove>
 8011118:	68a3      	ldr	r3, [r4, #8]
 801111a:	1b9b      	subs	r3, r3, r6
 801111c:	60a3      	str	r3, [r4, #8]
 801111e:	6823      	ldr	r3, [r4, #0]
 8011120:	4433      	add	r3, r6
 8011122:	6023      	str	r3, [r4, #0]
 8011124:	2000      	movs	r0, #0
 8011126:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801112a:	462a      	mov	r2, r5
 801112c:	f000 fe35 	bl	8011d9a <_realloc_r>
 8011130:	4606      	mov	r6, r0
 8011132:	2800      	cmp	r0, #0
 8011134:	d1e0      	bne.n	80110f8 <__ssputs_r+0x5c>
 8011136:	6921      	ldr	r1, [r4, #16]
 8011138:	4650      	mov	r0, sl
 801113a:	f7ff ff65 	bl	8011008 <_free_r>
 801113e:	230c      	movs	r3, #12
 8011140:	f8ca 3000 	str.w	r3, [sl]
 8011144:	89a3      	ldrh	r3, [r4, #12]
 8011146:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801114a:	81a3      	strh	r3, [r4, #12]
 801114c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011150:	e7e9      	b.n	8011126 <__ssputs_r+0x8a>
	...

08011154 <_svfiprintf_r>:
 8011154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011158:	4698      	mov	r8, r3
 801115a:	898b      	ldrh	r3, [r1, #12]
 801115c:	061b      	lsls	r3, r3, #24
 801115e:	b09d      	sub	sp, #116	@ 0x74
 8011160:	4607      	mov	r7, r0
 8011162:	460d      	mov	r5, r1
 8011164:	4614      	mov	r4, r2
 8011166:	d510      	bpl.n	801118a <_svfiprintf_r+0x36>
 8011168:	690b      	ldr	r3, [r1, #16]
 801116a:	b973      	cbnz	r3, 801118a <_svfiprintf_r+0x36>
 801116c:	2140      	movs	r1, #64	@ 0x40
 801116e:	f000 f917 	bl	80113a0 <_malloc_r>
 8011172:	6028      	str	r0, [r5, #0]
 8011174:	6128      	str	r0, [r5, #16]
 8011176:	b930      	cbnz	r0, 8011186 <_svfiprintf_r+0x32>
 8011178:	230c      	movs	r3, #12
 801117a:	603b      	str	r3, [r7, #0]
 801117c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011180:	b01d      	add	sp, #116	@ 0x74
 8011182:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011186:	2340      	movs	r3, #64	@ 0x40
 8011188:	616b      	str	r3, [r5, #20]
 801118a:	2300      	movs	r3, #0
 801118c:	9309      	str	r3, [sp, #36]	@ 0x24
 801118e:	2320      	movs	r3, #32
 8011190:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011194:	f8cd 800c 	str.w	r8, [sp, #12]
 8011198:	2330      	movs	r3, #48	@ 0x30
 801119a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8011338 <_svfiprintf_r+0x1e4>
 801119e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80111a2:	f04f 0901 	mov.w	r9, #1
 80111a6:	4623      	mov	r3, r4
 80111a8:	469a      	mov	sl, r3
 80111aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80111ae:	b10a      	cbz	r2, 80111b4 <_svfiprintf_r+0x60>
 80111b0:	2a25      	cmp	r2, #37	@ 0x25
 80111b2:	d1f9      	bne.n	80111a8 <_svfiprintf_r+0x54>
 80111b4:	ebba 0b04 	subs.w	fp, sl, r4
 80111b8:	d00b      	beq.n	80111d2 <_svfiprintf_r+0x7e>
 80111ba:	465b      	mov	r3, fp
 80111bc:	4622      	mov	r2, r4
 80111be:	4629      	mov	r1, r5
 80111c0:	4638      	mov	r0, r7
 80111c2:	f7ff ff6b 	bl	801109c <__ssputs_r>
 80111c6:	3001      	adds	r0, #1
 80111c8:	f000 80a7 	beq.w	801131a <_svfiprintf_r+0x1c6>
 80111cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80111ce:	445a      	add	r2, fp
 80111d0:	9209      	str	r2, [sp, #36]	@ 0x24
 80111d2:	f89a 3000 	ldrb.w	r3, [sl]
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	f000 809f 	beq.w	801131a <_svfiprintf_r+0x1c6>
 80111dc:	2300      	movs	r3, #0
 80111de:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80111e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80111e6:	f10a 0a01 	add.w	sl, sl, #1
 80111ea:	9304      	str	r3, [sp, #16]
 80111ec:	9307      	str	r3, [sp, #28]
 80111ee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80111f2:	931a      	str	r3, [sp, #104]	@ 0x68
 80111f4:	4654      	mov	r4, sl
 80111f6:	2205      	movs	r2, #5
 80111f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80111fc:	484e      	ldr	r0, [pc, #312]	@ (8011338 <_svfiprintf_r+0x1e4>)
 80111fe:	f7ef f80f 	bl	8000220 <memchr>
 8011202:	9a04      	ldr	r2, [sp, #16]
 8011204:	b9d8      	cbnz	r0, 801123e <_svfiprintf_r+0xea>
 8011206:	06d0      	lsls	r0, r2, #27
 8011208:	bf44      	itt	mi
 801120a:	2320      	movmi	r3, #32
 801120c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011210:	0711      	lsls	r1, r2, #28
 8011212:	bf44      	itt	mi
 8011214:	232b      	movmi	r3, #43	@ 0x2b
 8011216:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801121a:	f89a 3000 	ldrb.w	r3, [sl]
 801121e:	2b2a      	cmp	r3, #42	@ 0x2a
 8011220:	d015      	beq.n	801124e <_svfiprintf_r+0xfa>
 8011222:	9a07      	ldr	r2, [sp, #28]
 8011224:	4654      	mov	r4, sl
 8011226:	2000      	movs	r0, #0
 8011228:	f04f 0c0a 	mov.w	ip, #10
 801122c:	4621      	mov	r1, r4
 801122e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011232:	3b30      	subs	r3, #48	@ 0x30
 8011234:	2b09      	cmp	r3, #9
 8011236:	d94b      	bls.n	80112d0 <_svfiprintf_r+0x17c>
 8011238:	b1b0      	cbz	r0, 8011268 <_svfiprintf_r+0x114>
 801123a:	9207      	str	r2, [sp, #28]
 801123c:	e014      	b.n	8011268 <_svfiprintf_r+0x114>
 801123e:	eba0 0308 	sub.w	r3, r0, r8
 8011242:	fa09 f303 	lsl.w	r3, r9, r3
 8011246:	4313      	orrs	r3, r2
 8011248:	9304      	str	r3, [sp, #16]
 801124a:	46a2      	mov	sl, r4
 801124c:	e7d2      	b.n	80111f4 <_svfiprintf_r+0xa0>
 801124e:	9b03      	ldr	r3, [sp, #12]
 8011250:	1d19      	adds	r1, r3, #4
 8011252:	681b      	ldr	r3, [r3, #0]
 8011254:	9103      	str	r1, [sp, #12]
 8011256:	2b00      	cmp	r3, #0
 8011258:	bfbb      	ittet	lt
 801125a:	425b      	neglt	r3, r3
 801125c:	f042 0202 	orrlt.w	r2, r2, #2
 8011260:	9307      	strge	r3, [sp, #28]
 8011262:	9307      	strlt	r3, [sp, #28]
 8011264:	bfb8      	it	lt
 8011266:	9204      	strlt	r2, [sp, #16]
 8011268:	7823      	ldrb	r3, [r4, #0]
 801126a:	2b2e      	cmp	r3, #46	@ 0x2e
 801126c:	d10a      	bne.n	8011284 <_svfiprintf_r+0x130>
 801126e:	7863      	ldrb	r3, [r4, #1]
 8011270:	2b2a      	cmp	r3, #42	@ 0x2a
 8011272:	d132      	bne.n	80112da <_svfiprintf_r+0x186>
 8011274:	9b03      	ldr	r3, [sp, #12]
 8011276:	1d1a      	adds	r2, r3, #4
 8011278:	681b      	ldr	r3, [r3, #0]
 801127a:	9203      	str	r2, [sp, #12]
 801127c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011280:	3402      	adds	r4, #2
 8011282:	9305      	str	r3, [sp, #20]
 8011284:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8011348 <_svfiprintf_r+0x1f4>
 8011288:	7821      	ldrb	r1, [r4, #0]
 801128a:	2203      	movs	r2, #3
 801128c:	4650      	mov	r0, sl
 801128e:	f7ee ffc7 	bl	8000220 <memchr>
 8011292:	b138      	cbz	r0, 80112a4 <_svfiprintf_r+0x150>
 8011294:	9b04      	ldr	r3, [sp, #16]
 8011296:	eba0 000a 	sub.w	r0, r0, sl
 801129a:	2240      	movs	r2, #64	@ 0x40
 801129c:	4082      	lsls	r2, r0
 801129e:	4313      	orrs	r3, r2
 80112a0:	3401      	adds	r4, #1
 80112a2:	9304      	str	r3, [sp, #16]
 80112a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80112a8:	4824      	ldr	r0, [pc, #144]	@ (801133c <_svfiprintf_r+0x1e8>)
 80112aa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80112ae:	2206      	movs	r2, #6
 80112b0:	f7ee ffb6 	bl	8000220 <memchr>
 80112b4:	2800      	cmp	r0, #0
 80112b6:	d036      	beq.n	8011326 <_svfiprintf_r+0x1d2>
 80112b8:	4b21      	ldr	r3, [pc, #132]	@ (8011340 <_svfiprintf_r+0x1ec>)
 80112ba:	bb1b      	cbnz	r3, 8011304 <_svfiprintf_r+0x1b0>
 80112bc:	9b03      	ldr	r3, [sp, #12]
 80112be:	3307      	adds	r3, #7
 80112c0:	f023 0307 	bic.w	r3, r3, #7
 80112c4:	3308      	adds	r3, #8
 80112c6:	9303      	str	r3, [sp, #12]
 80112c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80112ca:	4433      	add	r3, r6
 80112cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80112ce:	e76a      	b.n	80111a6 <_svfiprintf_r+0x52>
 80112d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80112d4:	460c      	mov	r4, r1
 80112d6:	2001      	movs	r0, #1
 80112d8:	e7a8      	b.n	801122c <_svfiprintf_r+0xd8>
 80112da:	2300      	movs	r3, #0
 80112dc:	3401      	adds	r4, #1
 80112de:	9305      	str	r3, [sp, #20]
 80112e0:	4619      	mov	r1, r3
 80112e2:	f04f 0c0a 	mov.w	ip, #10
 80112e6:	4620      	mov	r0, r4
 80112e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80112ec:	3a30      	subs	r2, #48	@ 0x30
 80112ee:	2a09      	cmp	r2, #9
 80112f0:	d903      	bls.n	80112fa <_svfiprintf_r+0x1a6>
 80112f2:	2b00      	cmp	r3, #0
 80112f4:	d0c6      	beq.n	8011284 <_svfiprintf_r+0x130>
 80112f6:	9105      	str	r1, [sp, #20]
 80112f8:	e7c4      	b.n	8011284 <_svfiprintf_r+0x130>
 80112fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80112fe:	4604      	mov	r4, r0
 8011300:	2301      	movs	r3, #1
 8011302:	e7f0      	b.n	80112e6 <_svfiprintf_r+0x192>
 8011304:	ab03      	add	r3, sp, #12
 8011306:	9300      	str	r3, [sp, #0]
 8011308:	462a      	mov	r2, r5
 801130a:	4b0e      	ldr	r3, [pc, #56]	@ (8011344 <_svfiprintf_r+0x1f0>)
 801130c:	a904      	add	r1, sp, #16
 801130e:	4638      	mov	r0, r7
 8011310:	f7fe fadc 	bl	800f8cc <_printf_float>
 8011314:	1c42      	adds	r2, r0, #1
 8011316:	4606      	mov	r6, r0
 8011318:	d1d6      	bne.n	80112c8 <_svfiprintf_r+0x174>
 801131a:	89ab      	ldrh	r3, [r5, #12]
 801131c:	065b      	lsls	r3, r3, #25
 801131e:	f53f af2d 	bmi.w	801117c <_svfiprintf_r+0x28>
 8011322:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011324:	e72c      	b.n	8011180 <_svfiprintf_r+0x2c>
 8011326:	ab03      	add	r3, sp, #12
 8011328:	9300      	str	r3, [sp, #0]
 801132a:	462a      	mov	r2, r5
 801132c:	4b05      	ldr	r3, [pc, #20]	@ (8011344 <_svfiprintf_r+0x1f0>)
 801132e:	a904      	add	r1, sp, #16
 8011330:	4638      	mov	r0, r7
 8011332:	f7fe fd63 	bl	800fdfc <_printf_i>
 8011336:	e7ed      	b.n	8011314 <_svfiprintf_r+0x1c0>
 8011338:	080135e9 	.word	0x080135e9
 801133c:	080135f3 	.word	0x080135f3
 8011340:	0800f8cd 	.word	0x0800f8cd
 8011344:	0801109d 	.word	0x0801109d
 8011348:	080135ef 	.word	0x080135ef

0801134c <malloc>:
 801134c:	4b02      	ldr	r3, [pc, #8]	@ (8011358 <malloc+0xc>)
 801134e:	4601      	mov	r1, r0
 8011350:	6818      	ldr	r0, [r3, #0]
 8011352:	f000 b825 	b.w	80113a0 <_malloc_r>
 8011356:	bf00      	nop
 8011358:	200001b4 	.word	0x200001b4

0801135c <sbrk_aligned>:
 801135c:	b570      	push	{r4, r5, r6, lr}
 801135e:	4e0f      	ldr	r6, [pc, #60]	@ (801139c <sbrk_aligned+0x40>)
 8011360:	460c      	mov	r4, r1
 8011362:	6831      	ldr	r1, [r6, #0]
 8011364:	4605      	mov	r5, r0
 8011366:	b911      	cbnz	r1, 801136e <sbrk_aligned+0x12>
 8011368:	f000 fd94 	bl	8011e94 <_sbrk_r>
 801136c:	6030      	str	r0, [r6, #0]
 801136e:	4621      	mov	r1, r4
 8011370:	4628      	mov	r0, r5
 8011372:	f000 fd8f 	bl	8011e94 <_sbrk_r>
 8011376:	1c43      	adds	r3, r0, #1
 8011378:	d103      	bne.n	8011382 <sbrk_aligned+0x26>
 801137a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801137e:	4620      	mov	r0, r4
 8011380:	bd70      	pop	{r4, r5, r6, pc}
 8011382:	1cc4      	adds	r4, r0, #3
 8011384:	f024 0403 	bic.w	r4, r4, #3
 8011388:	42a0      	cmp	r0, r4
 801138a:	d0f8      	beq.n	801137e <sbrk_aligned+0x22>
 801138c:	1a21      	subs	r1, r4, r0
 801138e:	4628      	mov	r0, r5
 8011390:	f000 fd80 	bl	8011e94 <_sbrk_r>
 8011394:	3001      	adds	r0, #1
 8011396:	d1f2      	bne.n	801137e <sbrk_aligned+0x22>
 8011398:	e7ef      	b.n	801137a <sbrk_aligned+0x1e>
 801139a:	bf00      	nop
 801139c:	2001293c 	.word	0x2001293c

080113a0 <_malloc_r>:
 80113a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80113a4:	1ccd      	adds	r5, r1, #3
 80113a6:	f025 0503 	bic.w	r5, r5, #3
 80113aa:	3508      	adds	r5, #8
 80113ac:	2d0c      	cmp	r5, #12
 80113ae:	bf38      	it	cc
 80113b0:	250c      	movcc	r5, #12
 80113b2:	2d00      	cmp	r5, #0
 80113b4:	4606      	mov	r6, r0
 80113b6:	db01      	blt.n	80113bc <_malloc_r+0x1c>
 80113b8:	42a9      	cmp	r1, r5
 80113ba:	d904      	bls.n	80113c6 <_malloc_r+0x26>
 80113bc:	230c      	movs	r3, #12
 80113be:	6033      	str	r3, [r6, #0]
 80113c0:	2000      	movs	r0, #0
 80113c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80113c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801149c <_malloc_r+0xfc>
 80113ca:	f000 f915 	bl	80115f8 <__malloc_lock>
 80113ce:	f8d8 3000 	ldr.w	r3, [r8]
 80113d2:	461c      	mov	r4, r3
 80113d4:	bb44      	cbnz	r4, 8011428 <_malloc_r+0x88>
 80113d6:	4629      	mov	r1, r5
 80113d8:	4630      	mov	r0, r6
 80113da:	f7ff ffbf 	bl	801135c <sbrk_aligned>
 80113de:	1c43      	adds	r3, r0, #1
 80113e0:	4604      	mov	r4, r0
 80113e2:	d158      	bne.n	8011496 <_malloc_r+0xf6>
 80113e4:	f8d8 4000 	ldr.w	r4, [r8]
 80113e8:	4627      	mov	r7, r4
 80113ea:	2f00      	cmp	r7, #0
 80113ec:	d143      	bne.n	8011476 <_malloc_r+0xd6>
 80113ee:	2c00      	cmp	r4, #0
 80113f0:	d04b      	beq.n	801148a <_malloc_r+0xea>
 80113f2:	6823      	ldr	r3, [r4, #0]
 80113f4:	4639      	mov	r1, r7
 80113f6:	4630      	mov	r0, r6
 80113f8:	eb04 0903 	add.w	r9, r4, r3
 80113fc:	f000 fd4a 	bl	8011e94 <_sbrk_r>
 8011400:	4581      	cmp	r9, r0
 8011402:	d142      	bne.n	801148a <_malloc_r+0xea>
 8011404:	6821      	ldr	r1, [r4, #0]
 8011406:	1a6d      	subs	r5, r5, r1
 8011408:	4629      	mov	r1, r5
 801140a:	4630      	mov	r0, r6
 801140c:	f7ff ffa6 	bl	801135c <sbrk_aligned>
 8011410:	3001      	adds	r0, #1
 8011412:	d03a      	beq.n	801148a <_malloc_r+0xea>
 8011414:	6823      	ldr	r3, [r4, #0]
 8011416:	442b      	add	r3, r5
 8011418:	6023      	str	r3, [r4, #0]
 801141a:	f8d8 3000 	ldr.w	r3, [r8]
 801141e:	685a      	ldr	r2, [r3, #4]
 8011420:	bb62      	cbnz	r2, 801147c <_malloc_r+0xdc>
 8011422:	f8c8 7000 	str.w	r7, [r8]
 8011426:	e00f      	b.n	8011448 <_malloc_r+0xa8>
 8011428:	6822      	ldr	r2, [r4, #0]
 801142a:	1b52      	subs	r2, r2, r5
 801142c:	d420      	bmi.n	8011470 <_malloc_r+0xd0>
 801142e:	2a0b      	cmp	r2, #11
 8011430:	d917      	bls.n	8011462 <_malloc_r+0xc2>
 8011432:	1961      	adds	r1, r4, r5
 8011434:	42a3      	cmp	r3, r4
 8011436:	6025      	str	r5, [r4, #0]
 8011438:	bf18      	it	ne
 801143a:	6059      	strne	r1, [r3, #4]
 801143c:	6863      	ldr	r3, [r4, #4]
 801143e:	bf08      	it	eq
 8011440:	f8c8 1000 	streq.w	r1, [r8]
 8011444:	5162      	str	r2, [r4, r5]
 8011446:	604b      	str	r3, [r1, #4]
 8011448:	4630      	mov	r0, r6
 801144a:	f000 f8db 	bl	8011604 <__malloc_unlock>
 801144e:	f104 000b 	add.w	r0, r4, #11
 8011452:	1d23      	adds	r3, r4, #4
 8011454:	f020 0007 	bic.w	r0, r0, #7
 8011458:	1ac2      	subs	r2, r0, r3
 801145a:	bf1c      	itt	ne
 801145c:	1a1b      	subne	r3, r3, r0
 801145e:	50a3      	strne	r3, [r4, r2]
 8011460:	e7af      	b.n	80113c2 <_malloc_r+0x22>
 8011462:	6862      	ldr	r2, [r4, #4]
 8011464:	42a3      	cmp	r3, r4
 8011466:	bf0c      	ite	eq
 8011468:	f8c8 2000 	streq.w	r2, [r8]
 801146c:	605a      	strne	r2, [r3, #4]
 801146e:	e7eb      	b.n	8011448 <_malloc_r+0xa8>
 8011470:	4623      	mov	r3, r4
 8011472:	6864      	ldr	r4, [r4, #4]
 8011474:	e7ae      	b.n	80113d4 <_malloc_r+0x34>
 8011476:	463c      	mov	r4, r7
 8011478:	687f      	ldr	r7, [r7, #4]
 801147a:	e7b6      	b.n	80113ea <_malloc_r+0x4a>
 801147c:	461a      	mov	r2, r3
 801147e:	685b      	ldr	r3, [r3, #4]
 8011480:	42a3      	cmp	r3, r4
 8011482:	d1fb      	bne.n	801147c <_malloc_r+0xdc>
 8011484:	2300      	movs	r3, #0
 8011486:	6053      	str	r3, [r2, #4]
 8011488:	e7de      	b.n	8011448 <_malloc_r+0xa8>
 801148a:	230c      	movs	r3, #12
 801148c:	6033      	str	r3, [r6, #0]
 801148e:	4630      	mov	r0, r6
 8011490:	f000 f8b8 	bl	8011604 <__malloc_unlock>
 8011494:	e794      	b.n	80113c0 <_malloc_r+0x20>
 8011496:	6005      	str	r5, [r0, #0]
 8011498:	e7d6      	b.n	8011448 <_malloc_r+0xa8>
 801149a:	bf00      	nop
 801149c:	20012940 	.word	0x20012940

080114a0 <__sflush_r>:
 80114a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80114a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80114a8:	0716      	lsls	r6, r2, #28
 80114aa:	4605      	mov	r5, r0
 80114ac:	460c      	mov	r4, r1
 80114ae:	d454      	bmi.n	801155a <__sflush_r+0xba>
 80114b0:	684b      	ldr	r3, [r1, #4]
 80114b2:	2b00      	cmp	r3, #0
 80114b4:	dc02      	bgt.n	80114bc <__sflush_r+0x1c>
 80114b6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80114b8:	2b00      	cmp	r3, #0
 80114ba:	dd48      	ble.n	801154e <__sflush_r+0xae>
 80114bc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80114be:	2e00      	cmp	r6, #0
 80114c0:	d045      	beq.n	801154e <__sflush_r+0xae>
 80114c2:	2300      	movs	r3, #0
 80114c4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80114c8:	682f      	ldr	r7, [r5, #0]
 80114ca:	6a21      	ldr	r1, [r4, #32]
 80114cc:	602b      	str	r3, [r5, #0]
 80114ce:	d030      	beq.n	8011532 <__sflush_r+0x92>
 80114d0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80114d2:	89a3      	ldrh	r3, [r4, #12]
 80114d4:	0759      	lsls	r1, r3, #29
 80114d6:	d505      	bpl.n	80114e4 <__sflush_r+0x44>
 80114d8:	6863      	ldr	r3, [r4, #4]
 80114da:	1ad2      	subs	r2, r2, r3
 80114dc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80114de:	b10b      	cbz	r3, 80114e4 <__sflush_r+0x44>
 80114e0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80114e2:	1ad2      	subs	r2, r2, r3
 80114e4:	2300      	movs	r3, #0
 80114e6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80114e8:	6a21      	ldr	r1, [r4, #32]
 80114ea:	4628      	mov	r0, r5
 80114ec:	47b0      	blx	r6
 80114ee:	1c43      	adds	r3, r0, #1
 80114f0:	89a3      	ldrh	r3, [r4, #12]
 80114f2:	d106      	bne.n	8011502 <__sflush_r+0x62>
 80114f4:	6829      	ldr	r1, [r5, #0]
 80114f6:	291d      	cmp	r1, #29
 80114f8:	d82b      	bhi.n	8011552 <__sflush_r+0xb2>
 80114fa:	4a2a      	ldr	r2, [pc, #168]	@ (80115a4 <__sflush_r+0x104>)
 80114fc:	410a      	asrs	r2, r1
 80114fe:	07d6      	lsls	r6, r2, #31
 8011500:	d427      	bmi.n	8011552 <__sflush_r+0xb2>
 8011502:	2200      	movs	r2, #0
 8011504:	6062      	str	r2, [r4, #4]
 8011506:	04d9      	lsls	r1, r3, #19
 8011508:	6922      	ldr	r2, [r4, #16]
 801150a:	6022      	str	r2, [r4, #0]
 801150c:	d504      	bpl.n	8011518 <__sflush_r+0x78>
 801150e:	1c42      	adds	r2, r0, #1
 8011510:	d101      	bne.n	8011516 <__sflush_r+0x76>
 8011512:	682b      	ldr	r3, [r5, #0]
 8011514:	b903      	cbnz	r3, 8011518 <__sflush_r+0x78>
 8011516:	6560      	str	r0, [r4, #84]	@ 0x54
 8011518:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801151a:	602f      	str	r7, [r5, #0]
 801151c:	b1b9      	cbz	r1, 801154e <__sflush_r+0xae>
 801151e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011522:	4299      	cmp	r1, r3
 8011524:	d002      	beq.n	801152c <__sflush_r+0x8c>
 8011526:	4628      	mov	r0, r5
 8011528:	f7ff fd6e 	bl	8011008 <_free_r>
 801152c:	2300      	movs	r3, #0
 801152e:	6363      	str	r3, [r4, #52]	@ 0x34
 8011530:	e00d      	b.n	801154e <__sflush_r+0xae>
 8011532:	2301      	movs	r3, #1
 8011534:	4628      	mov	r0, r5
 8011536:	47b0      	blx	r6
 8011538:	4602      	mov	r2, r0
 801153a:	1c50      	adds	r0, r2, #1
 801153c:	d1c9      	bne.n	80114d2 <__sflush_r+0x32>
 801153e:	682b      	ldr	r3, [r5, #0]
 8011540:	2b00      	cmp	r3, #0
 8011542:	d0c6      	beq.n	80114d2 <__sflush_r+0x32>
 8011544:	2b1d      	cmp	r3, #29
 8011546:	d001      	beq.n	801154c <__sflush_r+0xac>
 8011548:	2b16      	cmp	r3, #22
 801154a:	d11e      	bne.n	801158a <__sflush_r+0xea>
 801154c:	602f      	str	r7, [r5, #0]
 801154e:	2000      	movs	r0, #0
 8011550:	e022      	b.n	8011598 <__sflush_r+0xf8>
 8011552:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011556:	b21b      	sxth	r3, r3
 8011558:	e01b      	b.n	8011592 <__sflush_r+0xf2>
 801155a:	690f      	ldr	r7, [r1, #16]
 801155c:	2f00      	cmp	r7, #0
 801155e:	d0f6      	beq.n	801154e <__sflush_r+0xae>
 8011560:	0793      	lsls	r3, r2, #30
 8011562:	680e      	ldr	r6, [r1, #0]
 8011564:	bf08      	it	eq
 8011566:	694b      	ldreq	r3, [r1, #20]
 8011568:	600f      	str	r7, [r1, #0]
 801156a:	bf18      	it	ne
 801156c:	2300      	movne	r3, #0
 801156e:	eba6 0807 	sub.w	r8, r6, r7
 8011572:	608b      	str	r3, [r1, #8]
 8011574:	f1b8 0f00 	cmp.w	r8, #0
 8011578:	dde9      	ble.n	801154e <__sflush_r+0xae>
 801157a:	6a21      	ldr	r1, [r4, #32]
 801157c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801157e:	4643      	mov	r3, r8
 8011580:	463a      	mov	r2, r7
 8011582:	4628      	mov	r0, r5
 8011584:	47b0      	blx	r6
 8011586:	2800      	cmp	r0, #0
 8011588:	dc08      	bgt.n	801159c <__sflush_r+0xfc>
 801158a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801158e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011592:	81a3      	strh	r3, [r4, #12]
 8011594:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801159c:	4407      	add	r7, r0
 801159e:	eba8 0800 	sub.w	r8, r8, r0
 80115a2:	e7e7      	b.n	8011574 <__sflush_r+0xd4>
 80115a4:	dfbffffe 	.word	0xdfbffffe

080115a8 <_fflush_r>:
 80115a8:	b538      	push	{r3, r4, r5, lr}
 80115aa:	690b      	ldr	r3, [r1, #16]
 80115ac:	4605      	mov	r5, r0
 80115ae:	460c      	mov	r4, r1
 80115b0:	b913      	cbnz	r3, 80115b8 <_fflush_r+0x10>
 80115b2:	2500      	movs	r5, #0
 80115b4:	4628      	mov	r0, r5
 80115b6:	bd38      	pop	{r3, r4, r5, pc}
 80115b8:	b118      	cbz	r0, 80115c2 <_fflush_r+0x1a>
 80115ba:	6a03      	ldr	r3, [r0, #32]
 80115bc:	b90b      	cbnz	r3, 80115c2 <_fflush_r+0x1a>
 80115be:	f7fe fdc9 	bl	8010154 <__sinit>
 80115c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80115c6:	2b00      	cmp	r3, #0
 80115c8:	d0f3      	beq.n	80115b2 <_fflush_r+0xa>
 80115ca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80115cc:	07d0      	lsls	r0, r2, #31
 80115ce:	d404      	bmi.n	80115da <_fflush_r+0x32>
 80115d0:	0599      	lsls	r1, r3, #22
 80115d2:	d402      	bmi.n	80115da <_fflush_r+0x32>
 80115d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80115d6:	f7fe feba 	bl	801034e <__retarget_lock_acquire_recursive>
 80115da:	4628      	mov	r0, r5
 80115dc:	4621      	mov	r1, r4
 80115de:	f7ff ff5f 	bl	80114a0 <__sflush_r>
 80115e2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80115e4:	07da      	lsls	r2, r3, #31
 80115e6:	4605      	mov	r5, r0
 80115e8:	d4e4      	bmi.n	80115b4 <_fflush_r+0xc>
 80115ea:	89a3      	ldrh	r3, [r4, #12]
 80115ec:	059b      	lsls	r3, r3, #22
 80115ee:	d4e1      	bmi.n	80115b4 <_fflush_r+0xc>
 80115f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80115f2:	f7fe fead 	bl	8010350 <__retarget_lock_release_recursive>
 80115f6:	e7dd      	b.n	80115b4 <_fflush_r+0xc>

080115f8 <__malloc_lock>:
 80115f8:	4801      	ldr	r0, [pc, #4]	@ (8011600 <__malloc_lock+0x8>)
 80115fa:	f7fe bea8 	b.w	801034e <__retarget_lock_acquire_recursive>
 80115fe:	bf00      	nop
 8011600:	20012938 	.word	0x20012938

08011604 <__malloc_unlock>:
 8011604:	4801      	ldr	r0, [pc, #4]	@ (801160c <__malloc_unlock+0x8>)
 8011606:	f7fe bea3 	b.w	8010350 <__retarget_lock_release_recursive>
 801160a:	bf00      	nop
 801160c:	20012938 	.word	0x20012938

08011610 <_Balloc>:
 8011610:	b570      	push	{r4, r5, r6, lr}
 8011612:	69c6      	ldr	r6, [r0, #28]
 8011614:	4604      	mov	r4, r0
 8011616:	460d      	mov	r5, r1
 8011618:	b976      	cbnz	r6, 8011638 <_Balloc+0x28>
 801161a:	2010      	movs	r0, #16
 801161c:	f7ff fe96 	bl	801134c <malloc>
 8011620:	4602      	mov	r2, r0
 8011622:	61e0      	str	r0, [r4, #28]
 8011624:	b920      	cbnz	r0, 8011630 <_Balloc+0x20>
 8011626:	4b18      	ldr	r3, [pc, #96]	@ (8011688 <_Balloc+0x78>)
 8011628:	4818      	ldr	r0, [pc, #96]	@ (801168c <_Balloc+0x7c>)
 801162a:	216b      	movs	r1, #107	@ 0x6b
 801162c:	f000 fc54 	bl	8011ed8 <__assert_func>
 8011630:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011634:	6006      	str	r6, [r0, #0]
 8011636:	60c6      	str	r6, [r0, #12]
 8011638:	69e6      	ldr	r6, [r4, #28]
 801163a:	68f3      	ldr	r3, [r6, #12]
 801163c:	b183      	cbz	r3, 8011660 <_Balloc+0x50>
 801163e:	69e3      	ldr	r3, [r4, #28]
 8011640:	68db      	ldr	r3, [r3, #12]
 8011642:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011646:	b9b8      	cbnz	r0, 8011678 <_Balloc+0x68>
 8011648:	2101      	movs	r1, #1
 801164a:	fa01 f605 	lsl.w	r6, r1, r5
 801164e:	1d72      	adds	r2, r6, #5
 8011650:	0092      	lsls	r2, r2, #2
 8011652:	4620      	mov	r0, r4
 8011654:	f000 fc5e 	bl	8011f14 <_calloc_r>
 8011658:	b160      	cbz	r0, 8011674 <_Balloc+0x64>
 801165a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801165e:	e00e      	b.n	801167e <_Balloc+0x6e>
 8011660:	2221      	movs	r2, #33	@ 0x21
 8011662:	2104      	movs	r1, #4
 8011664:	4620      	mov	r0, r4
 8011666:	f000 fc55 	bl	8011f14 <_calloc_r>
 801166a:	69e3      	ldr	r3, [r4, #28]
 801166c:	60f0      	str	r0, [r6, #12]
 801166e:	68db      	ldr	r3, [r3, #12]
 8011670:	2b00      	cmp	r3, #0
 8011672:	d1e4      	bne.n	801163e <_Balloc+0x2e>
 8011674:	2000      	movs	r0, #0
 8011676:	bd70      	pop	{r4, r5, r6, pc}
 8011678:	6802      	ldr	r2, [r0, #0]
 801167a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801167e:	2300      	movs	r3, #0
 8011680:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011684:	e7f7      	b.n	8011676 <_Balloc+0x66>
 8011686:	bf00      	nop
 8011688:	08013569 	.word	0x08013569
 801168c:	080135fa 	.word	0x080135fa

08011690 <_Bfree>:
 8011690:	b570      	push	{r4, r5, r6, lr}
 8011692:	69c6      	ldr	r6, [r0, #28]
 8011694:	4605      	mov	r5, r0
 8011696:	460c      	mov	r4, r1
 8011698:	b976      	cbnz	r6, 80116b8 <_Bfree+0x28>
 801169a:	2010      	movs	r0, #16
 801169c:	f7ff fe56 	bl	801134c <malloc>
 80116a0:	4602      	mov	r2, r0
 80116a2:	61e8      	str	r0, [r5, #28]
 80116a4:	b920      	cbnz	r0, 80116b0 <_Bfree+0x20>
 80116a6:	4b09      	ldr	r3, [pc, #36]	@ (80116cc <_Bfree+0x3c>)
 80116a8:	4809      	ldr	r0, [pc, #36]	@ (80116d0 <_Bfree+0x40>)
 80116aa:	218f      	movs	r1, #143	@ 0x8f
 80116ac:	f000 fc14 	bl	8011ed8 <__assert_func>
 80116b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80116b4:	6006      	str	r6, [r0, #0]
 80116b6:	60c6      	str	r6, [r0, #12]
 80116b8:	b13c      	cbz	r4, 80116ca <_Bfree+0x3a>
 80116ba:	69eb      	ldr	r3, [r5, #28]
 80116bc:	6862      	ldr	r2, [r4, #4]
 80116be:	68db      	ldr	r3, [r3, #12]
 80116c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80116c4:	6021      	str	r1, [r4, #0]
 80116c6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80116ca:	bd70      	pop	{r4, r5, r6, pc}
 80116cc:	08013569 	.word	0x08013569
 80116d0:	080135fa 	.word	0x080135fa

080116d4 <__multadd>:
 80116d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80116d8:	690d      	ldr	r5, [r1, #16]
 80116da:	4607      	mov	r7, r0
 80116dc:	460c      	mov	r4, r1
 80116de:	461e      	mov	r6, r3
 80116e0:	f101 0c14 	add.w	ip, r1, #20
 80116e4:	2000      	movs	r0, #0
 80116e6:	f8dc 3000 	ldr.w	r3, [ip]
 80116ea:	b299      	uxth	r1, r3
 80116ec:	fb02 6101 	mla	r1, r2, r1, r6
 80116f0:	0c1e      	lsrs	r6, r3, #16
 80116f2:	0c0b      	lsrs	r3, r1, #16
 80116f4:	fb02 3306 	mla	r3, r2, r6, r3
 80116f8:	b289      	uxth	r1, r1
 80116fa:	3001      	adds	r0, #1
 80116fc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011700:	4285      	cmp	r5, r0
 8011702:	f84c 1b04 	str.w	r1, [ip], #4
 8011706:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801170a:	dcec      	bgt.n	80116e6 <__multadd+0x12>
 801170c:	b30e      	cbz	r6, 8011752 <__multadd+0x7e>
 801170e:	68a3      	ldr	r3, [r4, #8]
 8011710:	42ab      	cmp	r3, r5
 8011712:	dc19      	bgt.n	8011748 <__multadd+0x74>
 8011714:	6861      	ldr	r1, [r4, #4]
 8011716:	4638      	mov	r0, r7
 8011718:	3101      	adds	r1, #1
 801171a:	f7ff ff79 	bl	8011610 <_Balloc>
 801171e:	4680      	mov	r8, r0
 8011720:	b928      	cbnz	r0, 801172e <__multadd+0x5a>
 8011722:	4602      	mov	r2, r0
 8011724:	4b0c      	ldr	r3, [pc, #48]	@ (8011758 <__multadd+0x84>)
 8011726:	480d      	ldr	r0, [pc, #52]	@ (801175c <__multadd+0x88>)
 8011728:	21ba      	movs	r1, #186	@ 0xba
 801172a:	f000 fbd5 	bl	8011ed8 <__assert_func>
 801172e:	6922      	ldr	r2, [r4, #16]
 8011730:	3202      	adds	r2, #2
 8011732:	f104 010c 	add.w	r1, r4, #12
 8011736:	0092      	lsls	r2, r2, #2
 8011738:	300c      	adds	r0, #12
 801173a:	f7fe fe0a 	bl	8010352 <memcpy>
 801173e:	4621      	mov	r1, r4
 8011740:	4638      	mov	r0, r7
 8011742:	f7ff ffa5 	bl	8011690 <_Bfree>
 8011746:	4644      	mov	r4, r8
 8011748:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801174c:	3501      	adds	r5, #1
 801174e:	615e      	str	r6, [r3, #20]
 8011750:	6125      	str	r5, [r4, #16]
 8011752:	4620      	mov	r0, r4
 8011754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011758:	080135d8 	.word	0x080135d8
 801175c:	080135fa 	.word	0x080135fa

08011760 <__hi0bits>:
 8011760:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8011764:	4603      	mov	r3, r0
 8011766:	bf36      	itet	cc
 8011768:	0403      	lslcc	r3, r0, #16
 801176a:	2000      	movcs	r0, #0
 801176c:	2010      	movcc	r0, #16
 801176e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8011772:	bf3c      	itt	cc
 8011774:	021b      	lslcc	r3, r3, #8
 8011776:	3008      	addcc	r0, #8
 8011778:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801177c:	bf3c      	itt	cc
 801177e:	011b      	lslcc	r3, r3, #4
 8011780:	3004      	addcc	r0, #4
 8011782:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011786:	bf3c      	itt	cc
 8011788:	009b      	lslcc	r3, r3, #2
 801178a:	3002      	addcc	r0, #2
 801178c:	2b00      	cmp	r3, #0
 801178e:	db05      	blt.n	801179c <__hi0bits+0x3c>
 8011790:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8011794:	f100 0001 	add.w	r0, r0, #1
 8011798:	bf08      	it	eq
 801179a:	2020      	moveq	r0, #32
 801179c:	4770      	bx	lr

0801179e <__lo0bits>:
 801179e:	6803      	ldr	r3, [r0, #0]
 80117a0:	4602      	mov	r2, r0
 80117a2:	f013 0007 	ands.w	r0, r3, #7
 80117a6:	d00b      	beq.n	80117c0 <__lo0bits+0x22>
 80117a8:	07d9      	lsls	r1, r3, #31
 80117aa:	d421      	bmi.n	80117f0 <__lo0bits+0x52>
 80117ac:	0798      	lsls	r0, r3, #30
 80117ae:	bf49      	itett	mi
 80117b0:	085b      	lsrmi	r3, r3, #1
 80117b2:	089b      	lsrpl	r3, r3, #2
 80117b4:	2001      	movmi	r0, #1
 80117b6:	6013      	strmi	r3, [r2, #0]
 80117b8:	bf5c      	itt	pl
 80117ba:	6013      	strpl	r3, [r2, #0]
 80117bc:	2002      	movpl	r0, #2
 80117be:	4770      	bx	lr
 80117c0:	b299      	uxth	r1, r3
 80117c2:	b909      	cbnz	r1, 80117c8 <__lo0bits+0x2a>
 80117c4:	0c1b      	lsrs	r3, r3, #16
 80117c6:	2010      	movs	r0, #16
 80117c8:	b2d9      	uxtb	r1, r3
 80117ca:	b909      	cbnz	r1, 80117d0 <__lo0bits+0x32>
 80117cc:	3008      	adds	r0, #8
 80117ce:	0a1b      	lsrs	r3, r3, #8
 80117d0:	0719      	lsls	r1, r3, #28
 80117d2:	bf04      	itt	eq
 80117d4:	091b      	lsreq	r3, r3, #4
 80117d6:	3004      	addeq	r0, #4
 80117d8:	0799      	lsls	r1, r3, #30
 80117da:	bf04      	itt	eq
 80117dc:	089b      	lsreq	r3, r3, #2
 80117de:	3002      	addeq	r0, #2
 80117e0:	07d9      	lsls	r1, r3, #31
 80117e2:	d403      	bmi.n	80117ec <__lo0bits+0x4e>
 80117e4:	085b      	lsrs	r3, r3, #1
 80117e6:	f100 0001 	add.w	r0, r0, #1
 80117ea:	d003      	beq.n	80117f4 <__lo0bits+0x56>
 80117ec:	6013      	str	r3, [r2, #0]
 80117ee:	4770      	bx	lr
 80117f0:	2000      	movs	r0, #0
 80117f2:	4770      	bx	lr
 80117f4:	2020      	movs	r0, #32
 80117f6:	4770      	bx	lr

080117f8 <__i2b>:
 80117f8:	b510      	push	{r4, lr}
 80117fa:	460c      	mov	r4, r1
 80117fc:	2101      	movs	r1, #1
 80117fe:	f7ff ff07 	bl	8011610 <_Balloc>
 8011802:	4602      	mov	r2, r0
 8011804:	b928      	cbnz	r0, 8011812 <__i2b+0x1a>
 8011806:	4b05      	ldr	r3, [pc, #20]	@ (801181c <__i2b+0x24>)
 8011808:	4805      	ldr	r0, [pc, #20]	@ (8011820 <__i2b+0x28>)
 801180a:	f240 1145 	movw	r1, #325	@ 0x145
 801180e:	f000 fb63 	bl	8011ed8 <__assert_func>
 8011812:	2301      	movs	r3, #1
 8011814:	6144      	str	r4, [r0, #20]
 8011816:	6103      	str	r3, [r0, #16]
 8011818:	bd10      	pop	{r4, pc}
 801181a:	bf00      	nop
 801181c:	080135d8 	.word	0x080135d8
 8011820:	080135fa 	.word	0x080135fa

08011824 <__multiply>:
 8011824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011828:	4614      	mov	r4, r2
 801182a:	690a      	ldr	r2, [r1, #16]
 801182c:	6923      	ldr	r3, [r4, #16]
 801182e:	429a      	cmp	r2, r3
 8011830:	bfa8      	it	ge
 8011832:	4623      	movge	r3, r4
 8011834:	460f      	mov	r7, r1
 8011836:	bfa4      	itt	ge
 8011838:	460c      	movge	r4, r1
 801183a:	461f      	movge	r7, r3
 801183c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8011840:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8011844:	68a3      	ldr	r3, [r4, #8]
 8011846:	6861      	ldr	r1, [r4, #4]
 8011848:	eb0a 0609 	add.w	r6, sl, r9
 801184c:	42b3      	cmp	r3, r6
 801184e:	b085      	sub	sp, #20
 8011850:	bfb8      	it	lt
 8011852:	3101      	addlt	r1, #1
 8011854:	f7ff fedc 	bl	8011610 <_Balloc>
 8011858:	b930      	cbnz	r0, 8011868 <__multiply+0x44>
 801185a:	4602      	mov	r2, r0
 801185c:	4b44      	ldr	r3, [pc, #272]	@ (8011970 <__multiply+0x14c>)
 801185e:	4845      	ldr	r0, [pc, #276]	@ (8011974 <__multiply+0x150>)
 8011860:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8011864:	f000 fb38 	bl	8011ed8 <__assert_func>
 8011868:	f100 0514 	add.w	r5, r0, #20
 801186c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011870:	462b      	mov	r3, r5
 8011872:	2200      	movs	r2, #0
 8011874:	4543      	cmp	r3, r8
 8011876:	d321      	bcc.n	80118bc <__multiply+0x98>
 8011878:	f107 0114 	add.w	r1, r7, #20
 801187c:	f104 0214 	add.w	r2, r4, #20
 8011880:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8011884:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8011888:	9302      	str	r3, [sp, #8]
 801188a:	1b13      	subs	r3, r2, r4
 801188c:	3b15      	subs	r3, #21
 801188e:	f023 0303 	bic.w	r3, r3, #3
 8011892:	3304      	adds	r3, #4
 8011894:	f104 0715 	add.w	r7, r4, #21
 8011898:	42ba      	cmp	r2, r7
 801189a:	bf38      	it	cc
 801189c:	2304      	movcc	r3, #4
 801189e:	9301      	str	r3, [sp, #4]
 80118a0:	9b02      	ldr	r3, [sp, #8]
 80118a2:	9103      	str	r1, [sp, #12]
 80118a4:	428b      	cmp	r3, r1
 80118a6:	d80c      	bhi.n	80118c2 <__multiply+0x9e>
 80118a8:	2e00      	cmp	r6, #0
 80118aa:	dd03      	ble.n	80118b4 <__multiply+0x90>
 80118ac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80118b0:	2b00      	cmp	r3, #0
 80118b2:	d05b      	beq.n	801196c <__multiply+0x148>
 80118b4:	6106      	str	r6, [r0, #16]
 80118b6:	b005      	add	sp, #20
 80118b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80118bc:	f843 2b04 	str.w	r2, [r3], #4
 80118c0:	e7d8      	b.n	8011874 <__multiply+0x50>
 80118c2:	f8b1 a000 	ldrh.w	sl, [r1]
 80118c6:	f1ba 0f00 	cmp.w	sl, #0
 80118ca:	d024      	beq.n	8011916 <__multiply+0xf2>
 80118cc:	f104 0e14 	add.w	lr, r4, #20
 80118d0:	46a9      	mov	r9, r5
 80118d2:	f04f 0c00 	mov.w	ip, #0
 80118d6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80118da:	f8d9 3000 	ldr.w	r3, [r9]
 80118de:	fa1f fb87 	uxth.w	fp, r7
 80118e2:	b29b      	uxth	r3, r3
 80118e4:	fb0a 330b 	mla	r3, sl, fp, r3
 80118e8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80118ec:	f8d9 7000 	ldr.w	r7, [r9]
 80118f0:	4463      	add	r3, ip
 80118f2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80118f6:	fb0a c70b 	mla	r7, sl, fp, ip
 80118fa:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80118fe:	b29b      	uxth	r3, r3
 8011900:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8011904:	4572      	cmp	r2, lr
 8011906:	f849 3b04 	str.w	r3, [r9], #4
 801190a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801190e:	d8e2      	bhi.n	80118d6 <__multiply+0xb2>
 8011910:	9b01      	ldr	r3, [sp, #4]
 8011912:	f845 c003 	str.w	ip, [r5, r3]
 8011916:	9b03      	ldr	r3, [sp, #12]
 8011918:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801191c:	3104      	adds	r1, #4
 801191e:	f1b9 0f00 	cmp.w	r9, #0
 8011922:	d021      	beq.n	8011968 <__multiply+0x144>
 8011924:	682b      	ldr	r3, [r5, #0]
 8011926:	f104 0c14 	add.w	ip, r4, #20
 801192a:	46ae      	mov	lr, r5
 801192c:	f04f 0a00 	mov.w	sl, #0
 8011930:	f8bc b000 	ldrh.w	fp, [ip]
 8011934:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8011938:	fb09 770b 	mla	r7, r9, fp, r7
 801193c:	4457      	add	r7, sl
 801193e:	b29b      	uxth	r3, r3
 8011940:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8011944:	f84e 3b04 	str.w	r3, [lr], #4
 8011948:	f85c 3b04 	ldr.w	r3, [ip], #4
 801194c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011950:	f8be 3000 	ldrh.w	r3, [lr]
 8011954:	fb09 330a 	mla	r3, r9, sl, r3
 8011958:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801195c:	4562      	cmp	r2, ip
 801195e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011962:	d8e5      	bhi.n	8011930 <__multiply+0x10c>
 8011964:	9f01      	ldr	r7, [sp, #4]
 8011966:	51eb      	str	r3, [r5, r7]
 8011968:	3504      	adds	r5, #4
 801196a:	e799      	b.n	80118a0 <__multiply+0x7c>
 801196c:	3e01      	subs	r6, #1
 801196e:	e79b      	b.n	80118a8 <__multiply+0x84>
 8011970:	080135d8 	.word	0x080135d8
 8011974:	080135fa 	.word	0x080135fa

08011978 <__pow5mult>:
 8011978:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801197c:	4615      	mov	r5, r2
 801197e:	f012 0203 	ands.w	r2, r2, #3
 8011982:	4607      	mov	r7, r0
 8011984:	460e      	mov	r6, r1
 8011986:	d007      	beq.n	8011998 <__pow5mult+0x20>
 8011988:	4c25      	ldr	r4, [pc, #148]	@ (8011a20 <__pow5mult+0xa8>)
 801198a:	3a01      	subs	r2, #1
 801198c:	2300      	movs	r3, #0
 801198e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011992:	f7ff fe9f 	bl	80116d4 <__multadd>
 8011996:	4606      	mov	r6, r0
 8011998:	10ad      	asrs	r5, r5, #2
 801199a:	d03d      	beq.n	8011a18 <__pow5mult+0xa0>
 801199c:	69fc      	ldr	r4, [r7, #28]
 801199e:	b97c      	cbnz	r4, 80119c0 <__pow5mult+0x48>
 80119a0:	2010      	movs	r0, #16
 80119a2:	f7ff fcd3 	bl	801134c <malloc>
 80119a6:	4602      	mov	r2, r0
 80119a8:	61f8      	str	r0, [r7, #28]
 80119aa:	b928      	cbnz	r0, 80119b8 <__pow5mult+0x40>
 80119ac:	4b1d      	ldr	r3, [pc, #116]	@ (8011a24 <__pow5mult+0xac>)
 80119ae:	481e      	ldr	r0, [pc, #120]	@ (8011a28 <__pow5mult+0xb0>)
 80119b0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80119b4:	f000 fa90 	bl	8011ed8 <__assert_func>
 80119b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80119bc:	6004      	str	r4, [r0, #0]
 80119be:	60c4      	str	r4, [r0, #12]
 80119c0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80119c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80119c8:	b94c      	cbnz	r4, 80119de <__pow5mult+0x66>
 80119ca:	f240 2171 	movw	r1, #625	@ 0x271
 80119ce:	4638      	mov	r0, r7
 80119d0:	f7ff ff12 	bl	80117f8 <__i2b>
 80119d4:	2300      	movs	r3, #0
 80119d6:	f8c8 0008 	str.w	r0, [r8, #8]
 80119da:	4604      	mov	r4, r0
 80119dc:	6003      	str	r3, [r0, #0]
 80119de:	f04f 0900 	mov.w	r9, #0
 80119e2:	07eb      	lsls	r3, r5, #31
 80119e4:	d50a      	bpl.n	80119fc <__pow5mult+0x84>
 80119e6:	4631      	mov	r1, r6
 80119e8:	4622      	mov	r2, r4
 80119ea:	4638      	mov	r0, r7
 80119ec:	f7ff ff1a 	bl	8011824 <__multiply>
 80119f0:	4631      	mov	r1, r6
 80119f2:	4680      	mov	r8, r0
 80119f4:	4638      	mov	r0, r7
 80119f6:	f7ff fe4b 	bl	8011690 <_Bfree>
 80119fa:	4646      	mov	r6, r8
 80119fc:	106d      	asrs	r5, r5, #1
 80119fe:	d00b      	beq.n	8011a18 <__pow5mult+0xa0>
 8011a00:	6820      	ldr	r0, [r4, #0]
 8011a02:	b938      	cbnz	r0, 8011a14 <__pow5mult+0x9c>
 8011a04:	4622      	mov	r2, r4
 8011a06:	4621      	mov	r1, r4
 8011a08:	4638      	mov	r0, r7
 8011a0a:	f7ff ff0b 	bl	8011824 <__multiply>
 8011a0e:	6020      	str	r0, [r4, #0]
 8011a10:	f8c0 9000 	str.w	r9, [r0]
 8011a14:	4604      	mov	r4, r0
 8011a16:	e7e4      	b.n	80119e2 <__pow5mult+0x6a>
 8011a18:	4630      	mov	r0, r6
 8011a1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011a1e:	bf00      	nop
 8011a20:	08013654 	.word	0x08013654
 8011a24:	08013569 	.word	0x08013569
 8011a28:	080135fa 	.word	0x080135fa

08011a2c <__lshift>:
 8011a2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011a30:	460c      	mov	r4, r1
 8011a32:	6849      	ldr	r1, [r1, #4]
 8011a34:	6923      	ldr	r3, [r4, #16]
 8011a36:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011a3a:	68a3      	ldr	r3, [r4, #8]
 8011a3c:	4607      	mov	r7, r0
 8011a3e:	4691      	mov	r9, r2
 8011a40:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011a44:	f108 0601 	add.w	r6, r8, #1
 8011a48:	42b3      	cmp	r3, r6
 8011a4a:	db0b      	blt.n	8011a64 <__lshift+0x38>
 8011a4c:	4638      	mov	r0, r7
 8011a4e:	f7ff fddf 	bl	8011610 <_Balloc>
 8011a52:	4605      	mov	r5, r0
 8011a54:	b948      	cbnz	r0, 8011a6a <__lshift+0x3e>
 8011a56:	4602      	mov	r2, r0
 8011a58:	4b28      	ldr	r3, [pc, #160]	@ (8011afc <__lshift+0xd0>)
 8011a5a:	4829      	ldr	r0, [pc, #164]	@ (8011b00 <__lshift+0xd4>)
 8011a5c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8011a60:	f000 fa3a 	bl	8011ed8 <__assert_func>
 8011a64:	3101      	adds	r1, #1
 8011a66:	005b      	lsls	r3, r3, #1
 8011a68:	e7ee      	b.n	8011a48 <__lshift+0x1c>
 8011a6a:	2300      	movs	r3, #0
 8011a6c:	f100 0114 	add.w	r1, r0, #20
 8011a70:	f100 0210 	add.w	r2, r0, #16
 8011a74:	4618      	mov	r0, r3
 8011a76:	4553      	cmp	r3, sl
 8011a78:	db33      	blt.n	8011ae2 <__lshift+0xb6>
 8011a7a:	6920      	ldr	r0, [r4, #16]
 8011a7c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011a80:	f104 0314 	add.w	r3, r4, #20
 8011a84:	f019 091f 	ands.w	r9, r9, #31
 8011a88:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011a8c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011a90:	d02b      	beq.n	8011aea <__lshift+0xbe>
 8011a92:	f1c9 0e20 	rsb	lr, r9, #32
 8011a96:	468a      	mov	sl, r1
 8011a98:	2200      	movs	r2, #0
 8011a9a:	6818      	ldr	r0, [r3, #0]
 8011a9c:	fa00 f009 	lsl.w	r0, r0, r9
 8011aa0:	4310      	orrs	r0, r2
 8011aa2:	f84a 0b04 	str.w	r0, [sl], #4
 8011aa6:	f853 2b04 	ldr.w	r2, [r3], #4
 8011aaa:	459c      	cmp	ip, r3
 8011aac:	fa22 f20e 	lsr.w	r2, r2, lr
 8011ab0:	d8f3      	bhi.n	8011a9a <__lshift+0x6e>
 8011ab2:	ebac 0304 	sub.w	r3, ip, r4
 8011ab6:	3b15      	subs	r3, #21
 8011ab8:	f023 0303 	bic.w	r3, r3, #3
 8011abc:	3304      	adds	r3, #4
 8011abe:	f104 0015 	add.w	r0, r4, #21
 8011ac2:	4584      	cmp	ip, r0
 8011ac4:	bf38      	it	cc
 8011ac6:	2304      	movcc	r3, #4
 8011ac8:	50ca      	str	r2, [r1, r3]
 8011aca:	b10a      	cbz	r2, 8011ad0 <__lshift+0xa4>
 8011acc:	f108 0602 	add.w	r6, r8, #2
 8011ad0:	3e01      	subs	r6, #1
 8011ad2:	4638      	mov	r0, r7
 8011ad4:	612e      	str	r6, [r5, #16]
 8011ad6:	4621      	mov	r1, r4
 8011ad8:	f7ff fdda 	bl	8011690 <_Bfree>
 8011adc:	4628      	mov	r0, r5
 8011ade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ae2:	f842 0f04 	str.w	r0, [r2, #4]!
 8011ae6:	3301      	adds	r3, #1
 8011ae8:	e7c5      	b.n	8011a76 <__lshift+0x4a>
 8011aea:	3904      	subs	r1, #4
 8011aec:	f853 2b04 	ldr.w	r2, [r3], #4
 8011af0:	f841 2f04 	str.w	r2, [r1, #4]!
 8011af4:	459c      	cmp	ip, r3
 8011af6:	d8f9      	bhi.n	8011aec <__lshift+0xc0>
 8011af8:	e7ea      	b.n	8011ad0 <__lshift+0xa4>
 8011afa:	bf00      	nop
 8011afc:	080135d8 	.word	0x080135d8
 8011b00:	080135fa 	.word	0x080135fa

08011b04 <__mcmp>:
 8011b04:	690a      	ldr	r2, [r1, #16]
 8011b06:	4603      	mov	r3, r0
 8011b08:	6900      	ldr	r0, [r0, #16]
 8011b0a:	1a80      	subs	r0, r0, r2
 8011b0c:	b530      	push	{r4, r5, lr}
 8011b0e:	d10e      	bne.n	8011b2e <__mcmp+0x2a>
 8011b10:	3314      	adds	r3, #20
 8011b12:	3114      	adds	r1, #20
 8011b14:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8011b18:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8011b1c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011b20:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8011b24:	4295      	cmp	r5, r2
 8011b26:	d003      	beq.n	8011b30 <__mcmp+0x2c>
 8011b28:	d205      	bcs.n	8011b36 <__mcmp+0x32>
 8011b2a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011b2e:	bd30      	pop	{r4, r5, pc}
 8011b30:	42a3      	cmp	r3, r4
 8011b32:	d3f3      	bcc.n	8011b1c <__mcmp+0x18>
 8011b34:	e7fb      	b.n	8011b2e <__mcmp+0x2a>
 8011b36:	2001      	movs	r0, #1
 8011b38:	e7f9      	b.n	8011b2e <__mcmp+0x2a>
	...

08011b3c <__mdiff>:
 8011b3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b40:	4689      	mov	r9, r1
 8011b42:	4606      	mov	r6, r0
 8011b44:	4611      	mov	r1, r2
 8011b46:	4648      	mov	r0, r9
 8011b48:	4614      	mov	r4, r2
 8011b4a:	f7ff ffdb 	bl	8011b04 <__mcmp>
 8011b4e:	1e05      	subs	r5, r0, #0
 8011b50:	d112      	bne.n	8011b78 <__mdiff+0x3c>
 8011b52:	4629      	mov	r1, r5
 8011b54:	4630      	mov	r0, r6
 8011b56:	f7ff fd5b 	bl	8011610 <_Balloc>
 8011b5a:	4602      	mov	r2, r0
 8011b5c:	b928      	cbnz	r0, 8011b6a <__mdiff+0x2e>
 8011b5e:	4b3f      	ldr	r3, [pc, #252]	@ (8011c5c <__mdiff+0x120>)
 8011b60:	f240 2137 	movw	r1, #567	@ 0x237
 8011b64:	483e      	ldr	r0, [pc, #248]	@ (8011c60 <__mdiff+0x124>)
 8011b66:	f000 f9b7 	bl	8011ed8 <__assert_func>
 8011b6a:	2301      	movs	r3, #1
 8011b6c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011b70:	4610      	mov	r0, r2
 8011b72:	b003      	add	sp, #12
 8011b74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b78:	bfbc      	itt	lt
 8011b7a:	464b      	movlt	r3, r9
 8011b7c:	46a1      	movlt	r9, r4
 8011b7e:	4630      	mov	r0, r6
 8011b80:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8011b84:	bfba      	itte	lt
 8011b86:	461c      	movlt	r4, r3
 8011b88:	2501      	movlt	r5, #1
 8011b8a:	2500      	movge	r5, #0
 8011b8c:	f7ff fd40 	bl	8011610 <_Balloc>
 8011b90:	4602      	mov	r2, r0
 8011b92:	b918      	cbnz	r0, 8011b9c <__mdiff+0x60>
 8011b94:	4b31      	ldr	r3, [pc, #196]	@ (8011c5c <__mdiff+0x120>)
 8011b96:	f240 2145 	movw	r1, #581	@ 0x245
 8011b9a:	e7e3      	b.n	8011b64 <__mdiff+0x28>
 8011b9c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8011ba0:	6926      	ldr	r6, [r4, #16]
 8011ba2:	60c5      	str	r5, [r0, #12]
 8011ba4:	f109 0310 	add.w	r3, r9, #16
 8011ba8:	f109 0514 	add.w	r5, r9, #20
 8011bac:	f104 0e14 	add.w	lr, r4, #20
 8011bb0:	f100 0b14 	add.w	fp, r0, #20
 8011bb4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8011bb8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8011bbc:	9301      	str	r3, [sp, #4]
 8011bbe:	46d9      	mov	r9, fp
 8011bc0:	f04f 0c00 	mov.w	ip, #0
 8011bc4:	9b01      	ldr	r3, [sp, #4]
 8011bc6:	f85e 0b04 	ldr.w	r0, [lr], #4
 8011bca:	f853 af04 	ldr.w	sl, [r3, #4]!
 8011bce:	9301      	str	r3, [sp, #4]
 8011bd0:	fa1f f38a 	uxth.w	r3, sl
 8011bd4:	4619      	mov	r1, r3
 8011bd6:	b283      	uxth	r3, r0
 8011bd8:	1acb      	subs	r3, r1, r3
 8011bda:	0c00      	lsrs	r0, r0, #16
 8011bdc:	4463      	add	r3, ip
 8011bde:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8011be2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8011be6:	b29b      	uxth	r3, r3
 8011be8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8011bec:	4576      	cmp	r6, lr
 8011bee:	f849 3b04 	str.w	r3, [r9], #4
 8011bf2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011bf6:	d8e5      	bhi.n	8011bc4 <__mdiff+0x88>
 8011bf8:	1b33      	subs	r3, r6, r4
 8011bfa:	3b15      	subs	r3, #21
 8011bfc:	f023 0303 	bic.w	r3, r3, #3
 8011c00:	3415      	adds	r4, #21
 8011c02:	3304      	adds	r3, #4
 8011c04:	42a6      	cmp	r6, r4
 8011c06:	bf38      	it	cc
 8011c08:	2304      	movcc	r3, #4
 8011c0a:	441d      	add	r5, r3
 8011c0c:	445b      	add	r3, fp
 8011c0e:	461e      	mov	r6, r3
 8011c10:	462c      	mov	r4, r5
 8011c12:	4544      	cmp	r4, r8
 8011c14:	d30e      	bcc.n	8011c34 <__mdiff+0xf8>
 8011c16:	f108 0103 	add.w	r1, r8, #3
 8011c1a:	1b49      	subs	r1, r1, r5
 8011c1c:	f021 0103 	bic.w	r1, r1, #3
 8011c20:	3d03      	subs	r5, #3
 8011c22:	45a8      	cmp	r8, r5
 8011c24:	bf38      	it	cc
 8011c26:	2100      	movcc	r1, #0
 8011c28:	440b      	add	r3, r1
 8011c2a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011c2e:	b191      	cbz	r1, 8011c56 <__mdiff+0x11a>
 8011c30:	6117      	str	r7, [r2, #16]
 8011c32:	e79d      	b.n	8011b70 <__mdiff+0x34>
 8011c34:	f854 1b04 	ldr.w	r1, [r4], #4
 8011c38:	46e6      	mov	lr, ip
 8011c3a:	0c08      	lsrs	r0, r1, #16
 8011c3c:	fa1c fc81 	uxtah	ip, ip, r1
 8011c40:	4471      	add	r1, lr
 8011c42:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8011c46:	b289      	uxth	r1, r1
 8011c48:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8011c4c:	f846 1b04 	str.w	r1, [r6], #4
 8011c50:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011c54:	e7dd      	b.n	8011c12 <__mdiff+0xd6>
 8011c56:	3f01      	subs	r7, #1
 8011c58:	e7e7      	b.n	8011c2a <__mdiff+0xee>
 8011c5a:	bf00      	nop
 8011c5c:	080135d8 	.word	0x080135d8
 8011c60:	080135fa 	.word	0x080135fa

08011c64 <__d2b>:
 8011c64:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011c68:	460f      	mov	r7, r1
 8011c6a:	2101      	movs	r1, #1
 8011c6c:	ec59 8b10 	vmov	r8, r9, d0
 8011c70:	4616      	mov	r6, r2
 8011c72:	f7ff fccd 	bl	8011610 <_Balloc>
 8011c76:	4604      	mov	r4, r0
 8011c78:	b930      	cbnz	r0, 8011c88 <__d2b+0x24>
 8011c7a:	4602      	mov	r2, r0
 8011c7c:	4b23      	ldr	r3, [pc, #140]	@ (8011d0c <__d2b+0xa8>)
 8011c7e:	4824      	ldr	r0, [pc, #144]	@ (8011d10 <__d2b+0xac>)
 8011c80:	f240 310f 	movw	r1, #783	@ 0x30f
 8011c84:	f000 f928 	bl	8011ed8 <__assert_func>
 8011c88:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011c8c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011c90:	b10d      	cbz	r5, 8011c96 <__d2b+0x32>
 8011c92:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8011c96:	9301      	str	r3, [sp, #4]
 8011c98:	f1b8 0300 	subs.w	r3, r8, #0
 8011c9c:	d023      	beq.n	8011ce6 <__d2b+0x82>
 8011c9e:	4668      	mov	r0, sp
 8011ca0:	9300      	str	r3, [sp, #0]
 8011ca2:	f7ff fd7c 	bl	801179e <__lo0bits>
 8011ca6:	e9dd 1200 	ldrd	r1, r2, [sp]
 8011caa:	b1d0      	cbz	r0, 8011ce2 <__d2b+0x7e>
 8011cac:	f1c0 0320 	rsb	r3, r0, #32
 8011cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8011cb4:	430b      	orrs	r3, r1
 8011cb6:	40c2      	lsrs	r2, r0
 8011cb8:	6163      	str	r3, [r4, #20]
 8011cba:	9201      	str	r2, [sp, #4]
 8011cbc:	9b01      	ldr	r3, [sp, #4]
 8011cbe:	61a3      	str	r3, [r4, #24]
 8011cc0:	2b00      	cmp	r3, #0
 8011cc2:	bf0c      	ite	eq
 8011cc4:	2201      	moveq	r2, #1
 8011cc6:	2202      	movne	r2, #2
 8011cc8:	6122      	str	r2, [r4, #16]
 8011cca:	b1a5      	cbz	r5, 8011cf6 <__d2b+0x92>
 8011ccc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8011cd0:	4405      	add	r5, r0
 8011cd2:	603d      	str	r5, [r7, #0]
 8011cd4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8011cd8:	6030      	str	r0, [r6, #0]
 8011cda:	4620      	mov	r0, r4
 8011cdc:	b003      	add	sp, #12
 8011cde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011ce2:	6161      	str	r1, [r4, #20]
 8011ce4:	e7ea      	b.n	8011cbc <__d2b+0x58>
 8011ce6:	a801      	add	r0, sp, #4
 8011ce8:	f7ff fd59 	bl	801179e <__lo0bits>
 8011cec:	9b01      	ldr	r3, [sp, #4]
 8011cee:	6163      	str	r3, [r4, #20]
 8011cf0:	3020      	adds	r0, #32
 8011cf2:	2201      	movs	r2, #1
 8011cf4:	e7e8      	b.n	8011cc8 <__d2b+0x64>
 8011cf6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011cfa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8011cfe:	6038      	str	r0, [r7, #0]
 8011d00:	6918      	ldr	r0, [r3, #16]
 8011d02:	f7ff fd2d 	bl	8011760 <__hi0bits>
 8011d06:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011d0a:	e7e5      	b.n	8011cd8 <__d2b+0x74>
 8011d0c:	080135d8 	.word	0x080135d8
 8011d10:	080135fa 	.word	0x080135fa

08011d14 <__sread>:
 8011d14:	b510      	push	{r4, lr}
 8011d16:	460c      	mov	r4, r1
 8011d18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011d1c:	f000 f8a8 	bl	8011e70 <_read_r>
 8011d20:	2800      	cmp	r0, #0
 8011d22:	bfab      	itete	ge
 8011d24:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8011d26:	89a3      	ldrhlt	r3, [r4, #12]
 8011d28:	181b      	addge	r3, r3, r0
 8011d2a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8011d2e:	bfac      	ite	ge
 8011d30:	6563      	strge	r3, [r4, #84]	@ 0x54
 8011d32:	81a3      	strhlt	r3, [r4, #12]
 8011d34:	bd10      	pop	{r4, pc}

08011d36 <__swrite>:
 8011d36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d3a:	461f      	mov	r7, r3
 8011d3c:	898b      	ldrh	r3, [r1, #12]
 8011d3e:	05db      	lsls	r3, r3, #23
 8011d40:	4605      	mov	r5, r0
 8011d42:	460c      	mov	r4, r1
 8011d44:	4616      	mov	r6, r2
 8011d46:	d505      	bpl.n	8011d54 <__swrite+0x1e>
 8011d48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011d4c:	2302      	movs	r3, #2
 8011d4e:	2200      	movs	r2, #0
 8011d50:	f000 f87c 	bl	8011e4c <_lseek_r>
 8011d54:	89a3      	ldrh	r3, [r4, #12]
 8011d56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011d5a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8011d5e:	81a3      	strh	r3, [r4, #12]
 8011d60:	4632      	mov	r2, r6
 8011d62:	463b      	mov	r3, r7
 8011d64:	4628      	mov	r0, r5
 8011d66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011d6a:	f000 b8a3 	b.w	8011eb4 <_write_r>

08011d6e <__sseek>:
 8011d6e:	b510      	push	{r4, lr}
 8011d70:	460c      	mov	r4, r1
 8011d72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011d76:	f000 f869 	bl	8011e4c <_lseek_r>
 8011d7a:	1c43      	adds	r3, r0, #1
 8011d7c:	89a3      	ldrh	r3, [r4, #12]
 8011d7e:	bf15      	itete	ne
 8011d80:	6560      	strne	r0, [r4, #84]	@ 0x54
 8011d82:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8011d86:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8011d8a:	81a3      	strheq	r3, [r4, #12]
 8011d8c:	bf18      	it	ne
 8011d8e:	81a3      	strhne	r3, [r4, #12]
 8011d90:	bd10      	pop	{r4, pc}

08011d92 <__sclose>:
 8011d92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011d96:	f000 b849 	b.w	8011e2c <_close_r>

08011d9a <_realloc_r>:
 8011d9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d9e:	4680      	mov	r8, r0
 8011da0:	4615      	mov	r5, r2
 8011da2:	460c      	mov	r4, r1
 8011da4:	b921      	cbnz	r1, 8011db0 <_realloc_r+0x16>
 8011da6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011daa:	4611      	mov	r1, r2
 8011dac:	f7ff baf8 	b.w	80113a0 <_malloc_r>
 8011db0:	b92a      	cbnz	r2, 8011dbe <_realloc_r+0x24>
 8011db2:	f7ff f929 	bl	8011008 <_free_r>
 8011db6:	2400      	movs	r4, #0
 8011db8:	4620      	mov	r0, r4
 8011dba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011dbe:	f000 f8cf 	bl	8011f60 <_malloc_usable_size_r>
 8011dc2:	4285      	cmp	r5, r0
 8011dc4:	4606      	mov	r6, r0
 8011dc6:	d802      	bhi.n	8011dce <_realloc_r+0x34>
 8011dc8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8011dcc:	d8f4      	bhi.n	8011db8 <_realloc_r+0x1e>
 8011dce:	4629      	mov	r1, r5
 8011dd0:	4640      	mov	r0, r8
 8011dd2:	f7ff fae5 	bl	80113a0 <_malloc_r>
 8011dd6:	4607      	mov	r7, r0
 8011dd8:	2800      	cmp	r0, #0
 8011dda:	d0ec      	beq.n	8011db6 <_realloc_r+0x1c>
 8011ddc:	42b5      	cmp	r5, r6
 8011dde:	462a      	mov	r2, r5
 8011de0:	4621      	mov	r1, r4
 8011de2:	bf28      	it	cs
 8011de4:	4632      	movcs	r2, r6
 8011de6:	f7fe fab4 	bl	8010352 <memcpy>
 8011dea:	4621      	mov	r1, r4
 8011dec:	4640      	mov	r0, r8
 8011dee:	f7ff f90b 	bl	8011008 <_free_r>
 8011df2:	463c      	mov	r4, r7
 8011df4:	e7e0      	b.n	8011db8 <_realloc_r+0x1e>

08011df6 <memmove>:
 8011df6:	4288      	cmp	r0, r1
 8011df8:	b510      	push	{r4, lr}
 8011dfa:	eb01 0402 	add.w	r4, r1, r2
 8011dfe:	d902      	bls.n	8011e06 <memmove+0x10>
 8011e00:	4284      	cmp	r4, r0
 8011e02:	4623      	mov	r3, r4
 8011e04:	d807      	bhi.n	8011e16 <memmove+0x20>
 8011e06:	1e43      	subs	r3, r0, #1
 8011e08:	42a1      	cmp	r1, r4
 8011e0a:	d008      	beq.n	8011e1e <memmove+0x28>
 8011e0c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011e10:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011e14:	e7f8      	b.n	8011e08 <memmove+0x12>
 8011e16:	4402      	add	r2, r0
 8011e18:	4601      	mov	r1, r0
 8011e1a:	428a      	cmp	r2, r1
 8011e1c:	d100      	bne.n	8011e20 <memmove+0x2a>
 8011e1e:	bd10      	pop	{r4, pc}
 8011e20:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011e24:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011e28:	e7f7      	b.n	8011e1a <memmove+0x24>
	...

08011e2c <_close_r>:
 8011e2c:	b538      	push	{r3, r4, r5, lr}
 8011e2e:	4d06      	ldr	r5, [pc, #24]	@ (8011e48 <_close_r+0x1c>)
 8011e30:	2300      	movs	r3, #0
 8011e32:	4604      	mov	r4, r0
 8011e34:	4608      	mov	r0, r1
 8011e36:	602b      	str	r3, [r5, #0]
 8011e38:	f7f1 faee 	bl	8003418 <_close>
 8011e3c:	1c43      	adds	r3, r0, #1
 8011e3e:	d102      	bne.n	8011e46 <_close_r+0x1a>
 8011e40:	682b      	ldr	r3, [r5, #0]
 8011e42:	b103      	cbz	r3, 8011e46 <_close_r+0x1a>
 8011e44:	6023      	str	r3, [r4, #0]
 8011e46:	bd38      	pop	{r3, r4, r5, pc}
 8011e48:	20012934 	.word	0x20012934

08011e4c <_lseek_r>:
 8011e4c:	b538      	push	{r3, r4, r5, lr}
 8011e4e:	4d07      	ldr	r5, [pc, #28]	@ (8011e6c <_lseek_r+0x20>)
 8011e50:	4604      	mov	r4, r0
 8011e52:	4608      	mov	r0, r1
 8011e54:	4611      	mov	r1, r2
 8011e56:	2200      	movs	r2, #0
 8011e58:	602a      	str	r2, [r5, #0]
 8011e5a:	461a      	mov	r2, r3
 8011e5c:	f7f1 fb03 	bl	8003466 <_lseek>
 8011e60:	1c43      	adds	r3, r0, #1
 8011e62:	d102      	bne.n	8011e6a <_lseek_r+0x1e>
 8011e64:	682b      	ldr	r3, [r5, #0]
 8011e66:	b103      	cbz	r3, 8011e6a <_lseek_r+0x1e>
 8011e68:	6023      	str	r3, [r4, #0]
 8011e6a:	bd38      	pop	{r3, r4, r5, pc}
 8011e6c:	20012934 	.word	0x20012934

08011e70 <_read_r>:
 8011e70:	b538      	push	{r3, r4, r5, lr}
 8011e72:	4d07      	ldr	r5, [pc, #28]	@ (8011e90 <_read_r+0x20>)
 8011e74:	4604      	mov	r4, r0
 8011e76:	4608      	mov	r0, r1
 8011e78:	4611      	mov	r1, r2
 8011e7a:	2200      	movs	r2, #0
 8011e7c:	602a      	str	r2, [r5, #0]
 8011e7e:	461a      	mov	r2, r3
 8011e80:	f7f1 fa91 	bl	80033a6 <_read>
 8011e84:	1c43      	adds	r3, r0, #1
 8011e86:	d102      	bne.n	8011e8e <_read_r+0x1e>
 8011e88:	682b      	ldr	r3, [r5, #0]
 8011e8a:	b103      	cbz	r3, 8011e8e <_read_r+0x1e>
 8011e8c:	6023      	str	r3, [r4, #0]
 8011e8e:	bd38      	pop	{r3, r4, r5, pc}
 8011e90:	20012934 	.word	0x20012934

08011e94 <_sbrk_r>:
 8011e94:	b538      	push	{r3, r4, r5, lr}
 8011e96:	4d06      	ldr	r5, [pc, #24]	@ (8011eb0 <_sbrk_r+0x1c>)
 8011e98:	2300      	movs	r3, #0
 8011e9a:	4604      	mov	r4, r0
 8011e9c:	4608      	mov	r0, r1
 8011e9e:	602b      	str	r3, [r5, #0]
 8011ea0:	f7f1 faee 	bl	8003480 <_sbrk>
 8011ea4:	1c43      	adds	r3, r0, #1
 8011ea6:	d102      	bne.n	8011eae <_sbrk_r+0x1a>
 8011ea8:	682b      	ldr	r3, [r5, #0]
 8011eaa:	b103      	cbz	r3, 8011eae <_sbrk_r+0x1a>
 8011eac:	6023      	str	r3, [r4, #0]
 8011eae:	bd38      	pop	{r3, r4, r5, pc}
 8011eb0:	20012934 	.word	0x20012934

08011eb4 <_write_r>:
 8011eb4:	b538      	push	{r3, r4, r5, lr}
 8011eb6:	4d07      	ldr	r5, [pc, #28]	@ (8011ed4 <_write_r+0x20>)
 8011eb8:	4604      	mov	r4, r0
 8011eba:	4608      	mov	r0, r1
 8011ebc:	4611      	mov	r1, r2
 8011ebe:	2200      	movs	r2, #0
 8011ec0:	602a      	str	r2, [r5, #0]
 8011ec2:	461a      	mov	r2, r3
 8011ec4:	f7f1 fa8c 	bl	80033e0 <_write>
 8011ec8:	1c43      	adds	r3, r0, #1
 8011eca:	d102      	bne.n	8011ed2 <_write_r+0x1e>
 8011ecc:	682b      	ldr	r3, [r5, #0]
 8011ece:	b103      	cbz	r3, 8011ed2 <_write_r+0x1e>
 8011ed0:	6023      	str	r3, [r4, #0]
 8011ed2:	bd38      	pop	{r3, r4, r5, pc}
 8011ed4:	20012934 	.word	0x20012934

08011ed8 <__assert_func>:
 8011ed8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011eda:	4614      	mov	r4, r2
 8011edc:	461a      	mov	r2, r3
 8011ede:	4b09      	ldr	r3, [pc, #36]	@ (8011f04 <__assert_func+0x2c>)
 8011ee0:	681b      	ldr	r3, [r3, #0]
 8011ee2:	4605      	mov	r5, r0
 8011ee4:	68d8      	ldr	r0, [r3, #12]
 8011ee6:	b954      	cbnz	r4, 8011efe <__assert_func+0x26>
 8011ee8:	4b07      	ldr	r3, [pc, #28]	@ (8011f08 <__assert_func+0x30>)
 8011eea:	461c      	mov	r4, r3
 8011eec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011ef0:	9100      	str	r1, [sp, #0]
 8011ef2:	462b      	mov	r3, r5
 8011ef4:	4905      	ldr	r1, [pc, #20]	@ (8011f0c <__assert_func+0x34>)
 8011ef6:	f000 f83b 	bl	8011f70 <fiprintf>
 8011efa:	f000 f858 	bl	8011fae <abort>
 8011efe:	4b04      	ldr	r3, [pc, #16]	@ (8011f10 <__assert_func+0x38>)
 8011f00:	e7f4      	b.n	8011eec <__assert_func+0x14>
 8011f02:	bf00      	nop
 8011f04:	200001b4 	.word	0x200001b4
 8011f08:	08013896 	.word	0x08013896
 8011f0c:	08013868 	.word	0x08013868
 8011f10:	0801385b 	.word	0x0801385b

08011f14 <_calloc_r>:
 8011f14:	b570      	push	{r4, r5, r6, lr}
 8011f16:	fba1 5402 	umull	r5, r4, r1, r2
 8011f1a:	b93c      	cbnz	r4, 8011f2c <_calloc_r+0x18>
 8011f1c:	4629      	mov	r1, r5
 8011f1e:	f7ff fa3f 	bl	80113a0 <_malloc_r>
 8011f22:	4606      	mov	r6, r0
 8011f24:	b928      	cbnz	r0, 8011f32 <_calloc_r+0x1e>
 8011f26:	2600      	movs	r6, #0
 8011f28:	4630      	mov	r0, r6
 8011f2a:	bd70      	pop	{r4, r5, r6, pc}
 8011f2c:	220c      	movs	r2, #12
 8011f2e:	6002      	str	r2, [r0, #0]
 8011f30:	e7f9      	b.n	8011f26 <_calloc_r+0x12>
 8011f32:	462a      	mov	r2, r5
 8011f34:	4621      	mov	r1, r4
 8011f36:	f7fe f97d 	bl	8010234 <memset>
 8011f3a:	e7f5      	b.n	8011f28 <_calloc_r+0x14>

08011f3c <__ascii_mbtowc>:
 8011f3c:	b082      	sub	sp, #8
 8011f3e:	b901      	cbnz	r1, 8011f42 <__ascii_mbtowc+0x6>
 8011f40:	a901      	add	r1, sp, #4
 8011f42:	b142      	cbz	r2, 8011f56 <__ascii_mbtowc+0x1a>
 8011f44:	b14b      	cbz	r3, 8011f5a <__ascii_mbtowc+0x1e>
 8011f46:	7813      	ldrb	r3, [r2, #0]
 8011f48:	600b      	str	r3, [r1, #0]
 8011f4a:	7812      	ldrb	r2, [r2, #0]
 8011f4c:	1e10      	subs	r0, r2, #0
 8011f4e:	bf18      	it	ne
 8011f50:	2001      	movne	r0, #1
 8011f52:	b002      	add	sp, #8
 8011f54:	4770      	bx	lr
 8011f56:	4610      	mov	r0, r2
 8011f58:	e7fb      	b.n	8011f52 <__ascii_mbtowc+0x16>
 8011f5a:	f06f 0001 	mvn.w	r0, #1
 8011f5e:	e7f8      	b.n	8011f52 <__ascii_mbtowc+0x16>

08011f60 <_malloc_usable_size_r>:
 8011f60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011f64:	1f18      	subs	r0, r3, #4
 8011f66:	2b00      	cmp	r3, #0
 8011f68:	bfbc      	itt	lt
 8011f6a:	580b      	ldrlt	r3, [r1, r0]
 8011f6c:	18c0      	addlt	r0, r0, r3
 8011f6e:	4770      	bx	lr

08011f70 <fiprintf>:
 8011f70:	b40e      	push	{r1, r2, r3}
 8011f72:	b503      	push	{r0, r1, lr}
 8011f74:	4601      	mov	r1, r0
 8011f76:	ab03      	add	r3, sp, #12
 8011f78:	4805      	ldr	r0, [pc, #20]	@ (8011f90 <fiprintf+0x20>)
 8011f7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8011f7e:	6800      	ldr	r0, [r0, #0]
 8011f80:	9301      	str	r3, [sp, #4]
 8011f82:	f000 f845 	bl	8012010 <_vfiprintf_r>
 8011f86:	b002      	add	sp, #8
 8011f88:	f85d eb04 	ldr.w	lr, [sp], #4
 8011f8c:	b003      	add	sp, #12
 8011f8e:	4770      	bx	lr
 8011f90:	200001b4 	.word	0x200001b4

08011f94 <__ascii_wctomb>:
 8011f94:	4603      	mov	r3, r0
 8011f96:	4608      	mov	r0, r1
 8011f98:	b141      	cbz	r1, 8011fac <__ascii_wctomb+0x18>
 8011f9a:	2aff      	cmp	r2, #255	@ 0xff
 8011f9c:	d904      	bls.n	8011fa8 <__ascii_wctomb+0x14>
 8011f9e:	228a      	movs	r2, #138	@ 0x8a
 8011fa0:	601a      	str	r2, [r3, #0]
 8011fa2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011fa6:	4770      	bx	lr
 8011fa8:	700a      	strb	r2, [r1, #0]
 8011faa:	2001      	movs	r0, #1
 8011fac:	4770      	bx	lr

08011fae <abort>:
 8011fae:	b508      	push	{r3, lr}
 8011fb0:	2006      	movs	r0, #6
 8011fb2:	f000 fa85 	bl	80124c0 <raise>
 8011fb6:	2001      	movs	r0, #1
 8011fb8:	f7f1 f9ea 	bl	8003390 <_exit>

08011fbc <__sfputc_r>:
 8011fbc:	6893      	ldr	r3, [r2, #8]
 8011fbe:	3b01      	subs	r3, #1
 8011fc0:	2b00      	cmp	r3, #0
 8011fc2:	b410      	push	{r4}
 8011fc4:	6093      	str	r3, [r2, #8]
 8011fc6:	da08      	bge.n	8011fda <__sfputc_r+0x1e>
 8011fc8:	6994      	ldr	r4, [r2, #24]
 8011fca:	42a3      	cmp	r3, r4
 8011fcc:	db01      	blt.n	8011fd2 <__sfputc_r+0x16>
 8011fce:	290a      	cmp	r1, #10
 8011fd0:	d103      	bne.n	8011fda <__sfputc_r+0x1e>
 8011fd2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011fd6:	f000 b933 	b.w	8012240 <__swbuf_r>
 8011fda:	6813      	ldr	r3, [r2, #0]
 8011fdc:	1c58      	adds	r0, r3, #1
 8011fde:	6010      	str	r0, [r2, #0]
 8011fe0:	7019      	strb	r1, [r3, #0]
 8011fe2:	4608      	mov	r0, r1
 8011fe4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011fe8:	4770      	bx	lr

08011fea <__sfputs_r>:
 8011fea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011fec:	4606      	mov	r6, r0
 8011fee:	460f      	mov	r7, r1
 8011ff0:	4614      	mov	r4, r2
 8011ff2:	18d5      	adds	r5, r2, r3
 8011ff4:	42ac      	cmp	r4, r5
 8011ff6:	d101      	bne.n	8011ffc <__sfputs_r+0x12>
 8011ff8:	2000      	movs	r0, #0
 8011ffa:	e007      	b.n	801200c <__sfputs_r+0x22>
 8011ffc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012000:	463a      	mov	r2, r7
 8012002:	4630      	mov	r0, r6
 8012004:	f7ff ffda 	bl	8011fbc <__sfputc_r>
 8012008:	1c43      	adds	r3, r0, #1
 801200a:	d1f3      	bne.n	8011ff4 <__sfputs_r+0xa>
 801200c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012010 <_vfiprintf_r>:
 8012010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012014:	460d      	mov	r5, r1
 8012016:	b09d      	sub	sp, #116	@ 0x74
 8012018:	4614      	mov	r4, r2
 801201a:	4698      	mov	r8, r3
 801201c:	4606      	mov	r6, r0
 801201e:	b118      	cbz	r0, 8012028 <_vfiprintf_r+0x18>
 8012020:	6a03      	ldr	r3, [r0, #32]
 8012022:	b90b      	cbnz	r3, 8012028 <_vfiprintf_r+0x18>
 8012024:	f7fe f896 	bl	8010154 <__sinit>
 8012028:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801202a:	07d9      	lsls	r1, r3, #31
 801202c:	d405      	bmi.n	801203a <_vfiprintf_r+0x2a>
 801202e:	89ab      	ldrh	r3, [r5, #12]
 8012030:	059a      	lsls	r2, r3, #22
 8012032:	d402      	bmi.n	801203a <_vfiprintf_r+0x2a>
 8012034:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012036:	f7fe f98a 	bl	801034e <__retarget_lock_acquire_recursive>
 801203a:	89ab      	ldrh	r3, [r5, #12]
 801203c:	071b      	lsls	r3, r3, #28
 801203e:	d501      	bpl.n	8012044 <_vfiprintf_r+0x34>
 8012040:	692b      	ldr	r3, [r5, #16]
 8012042:	b99b      	cbnz	r3, 801206c <_vfiprintf_r+0x5c>
 8012044:	4629      	mov	r1, r5
 8012046:	4630      	mov	r0, r6
 8012048:	f000 f938 	bl	80122bc <__swsetup_r>
 801204c:	b170      	cbz	r0, 801206c <_vfiprintf_r+0x5c>
 801204e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012050:	07dc      	lsls	r4, r3, #31
 8012052:	d504      	bpl.n	801205e <_vfiprintf_r+0x4e>
 8012054:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012058:	b01d      	add	sp, #116	@ 0x74
 801205a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801205e:	89ab      	ldrh	r3, [r5, #12]
 8012060:	0598      	lsls	r0, r3, #22
 8012062:	d4f7      	bmi.n	8012054 <_vfiprintf_r+0x44>
 8012064:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012066:	f7fe f973 	bl	8010350 <__retarget_lock_release_recursive>
 801206a:	e7f3      	b.n	8012054 <_vfiprintf_r+0x44>
 801206c:	2300      	movs	r3, #0
 801206e:	9309      	str	r3, [sp, #36]	@ 0x24
 8012070:	2320      	movs	r3, #32
 8012072:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012076:	f8cd 800c 	str.w	r8, [sp, #12]
 801207a:	2330      	movs	r3, #48	@ 0x30
 801207c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801222c <_vfiprintf_r+0x21c>
 8012080:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012084:	f04f 0901 	mov.w	r9, #1
 8012088:	4623      	mov	r3, r4
 801208a:	469a      	mov	sl, r3
 801208c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012090:	b10a      	cbz	r2, 8012096 <_vfiprintf_r+0x86>
 8012092:	2a25      	cmp	r2, #37	@ 0x25
 8012094:	d1f9      	bne.n	801208a <_vfiprintf_r+0x7a>
 8012096:	ebba 0b04 	subs.w	fp, sl, r4
 801209a:	d00b      	beq.n	80120b4 <_vfiprintf_r+0xa4>
 801209c:	465b      	mov	r3, fp
 801209e:	4622      	mov	r2, r4
 80120a0:	4629      	mov	r1, r5
 80120a2:	4630      	mov	r0, r6
 80120a4:	f7ff ffa1 	bl	8011fea <__sfputs_r>
 80120a8:	3001      	adds	r0, #1
 80120aa:	f000 80a7 	beq.w	80121fc <_vfiprintf_r+0x1ec>
 80120ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80120b0:	445a      	add	r2, fp
 80120b2:	9209      	str	r2, [sp, #36]	@ 0x24
 80120b4:	f89a 3000 	ldrb.w	r3, [sl]
 80120b8:	2b00      	cmp	r3, #0
 80120ba:	f000 809f 	beq.w	80121fc <_vfiprintf_r+0x1ec>
 80120be:	2300      	movs	r3, #0
 80120c0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80120c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80120c8:	f10a 0a01 	add.w	sl, sl, #1
 80120cc:	9304      	str	r3, [sp, #16]
 80120ce:	9307      	str	r3, [sp, #28]
 80120d0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80120d4:	931a      	str	r3, [sp, #104]	@ 0x68
 80120d6:	4654      	mov	r4, sl
 80120d8:	2205      	movs	r2, #5
 80120da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80120de:	4853      	ldr	r0, [pc, #332]	@ (801222c <_vfiprintf_r+0x21c>)
 80120e0:	f7ee f89e 	bl	8000220 <memchr>
 80120e4:	9a04      	ldr	r2, [sp, #16]
 80120e6:	b9d8      	cbnz	r0, 8012120 <_vfiprintf_r+0x110>
 80120e8:	06d1      	lsls	r1, r2, #27
 80120ea:	bf44      	itt	mi
 80120ec:	2320      	movmi	r3, #32
 80120ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80120f2:	0713      	lsls	r3, r2, #28
 80120f4:	bf44      	itt	mi
 80120f6:	232b      	movmi	r3, #43	@ 0x2b
 80120f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80120fc:	f89a 3000 	ldrb.w	r3, [sl]
 8012100:	2b2a      	cmp	r3, #42	@ 0x2a
 8012102:	d015      	beq.n	8012130 <_vfiprintf_r+0x120>
 8012104:	9a07      	ldr	r2, [sp, #28]
 8012106:	4654      	mov	r4, sl
 8012108:	2000      	movs	r0, #0
 801210a:	f04f 0c0a 	mov.w	ip, #10
 801210e:	4621      	mov	r1, r4
 8012110:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012114:	3b30      	subs	r3, #48	@ 0x30
 8012116:	2b09      	cmp	r3, #9
 8012118:	d94b      	bls.n	80121b2 <_vfiprintf_r+0x1a2>
 801211a:	b1b0      	cbz	r0, 801214a <_vfiprintf_r+0x13a>
 801211c:	9207      	str	r2, [sp, #28]
 801211e:	e014      	b.n	801214a <_vfiprintf_r+0x13a>
 8012120:	eba0 0308 	sub.w	r3, r0, r8
 8012124:	fa09 f303 	lsl.w	r3, r9, r3
 8012128:	4313      	orrs	r3, r2
 801212a:	9304      	str	r3, [sp, #16]
 801212c:	46a2      	mov	sl, r4
 801212e:	e7d2      	b.n	80120d6 <_vfiprintf_r+0xc6>
 8012130:	9b03      	ldr	r3, [sp, #12]
 8012132:	1d19      	adds	r1, r3, #4
 8012134:	681b      	ldr	r3, [r3, #0]
 8012136:	9103      	str	r1, [sp, #12]
 8012138:	2b00      	cmp	r3, #0
 801213a:	bfbb      	ittet	lt
 801213c:	425b      	neglt	r3, r3
 801213e:	f042 0202 	orrlt.w	r2, r2, #2
 8012142:	9307      	strge	r3, [sp, #28]
 8012144:	9307      	strlt	r3, [sp, #28]
 8012146:	bfb8      	it	lt
 8012148:	9204      	strlt	r2, [sp, #16]
 801214a:	7823      	ldrb	r3, [r4, #0]
 801214c:	2b2e      	cmp	r3, #46	@ 0x2e
 801214e:	d10a      	bne.n	8012166 <_vfiprintf_r+0x156>
 8012150:	7863      	ldrb	r3, [r4, #1]
 8012152:	2b2a      	cmp	r3, #42	@ 0x2a
 8012154:	d132      	bne.n	80121bc <_vfiprintf_r+0x1ac>
 8012156:	9b03      	ldr	r3, [sp, #12]
 8012158:	1d1a      	adds	r2, r3, #4
 801215a:	681b      	ldr	r3, [r3, #0]
 801215c:	9203      	str	r2, [sp, #12]
 801215e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012162:	3402      	adds	r4, #2
 8012164:	9305      	str	r3, [sp, #20]
 8012166:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801223c <_vfiprintf_r+0x22c>
 801216a:	7821      	ldrb	r1, [r4, #0]
 801216c:	2203      	movs	r2, #3
 801216e:	4650      	mov	r0, sl
 8012170:	f7ee f856 	bl	8000220 <memchr>
 8012174:	b138      	cbz	r0, 8012186 <_vfiprintf_r+0x176>
 8012176:	9b04      	ldr	r3, [sp, #16]
 8012178:	eba0 000a 	sub.w	r0, r0, sl
 801217c:	2240      	movs	r2, #64	@ 0x40
 801217e:	4082      	lsls	r2, r0
 8012180:	4313      	orrs	r3, r2
 8012182:	3401      	adds	r4, #1
 8012184:	9304      	str	r3, [sp, #16]
 8012186:	f814 1b01 	ldrb.w	r1, [r4], #1
 801218a:	4829      	ldr	r0, [pc, #164]	@ (8012230 <_vfiprintf_r+0x220>)
 801218c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012190:	2206      	movs	r2, #6
 8012192:	f7ee f845 	bl	8000220 <memchr>
 8012196:	2800      	cmp	r0, #0
 8012198:	d03f      	beq.n	801221a <_vfiprintf_r+0x20a>
 801219a:	4b26      	ldr	r3, [pc, #152]	@ (8012234 <_vfiprintf_r+0x224>)
 801219c:	bb1b      	cbnz	r3, 80121e6 <_vfiprintf_r+0x1d6>
 801219e:	9b03      	ldr	r3, [sp, #12]
 80121a0:	3307      	adds	r3, #7
 80121a2:	f023 0307 	bic.w	r3, r3, #7
 80121a6:	3308      	adds	r3, #8
 80121a8:	9303      	str	r3, [sp, #12]
 80121aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80121ac:	443b      	add	r3, r7
 80121ae:	9309      	str	r3, [sp, #36]	@ 0x24
 80121b0:	e76a      	b.n	8012088 <_vfiprintf_r+0x78>
 80121b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80121b6:	460c      	mov	r4, r1
 80121b8:	2001      	movs	r0, #1
 80121ba:	e7a8      	b.n	801210e <_vfiprintf_r+0xfe>
 80121bc:	2300      	movs	r3, #0
 80121be:	3401      	adds	r4, #1
 80121c0:	9305      	str	r3, [sp, #20]
 80121c2:	4619      	mov	r1, r3
 80121c4:	f04f 0c0a 	mov.w	ip, #10
 80121c8:	4620      	mov	r0, r4
 80121ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80121ce:	3a30      	subs	r2, #48	@ 0x30
 80121d0:	2a09      	cmp	r2, #9
 80121d2:	d903      	bls.n	80121dc <_vfiprintf_r+0x1cc>
 80121d4:	2b00      	cmp	r3, #0
 80121d6:	d0c6      	beq.n	8012166 <_vfiprintf_r+0x156>
 80121d8:	9105      	str	r1, [sp, #20]
 80121da:	e7c4      	b.n	8012166 <_vfiprintf_r+0x156>
 80121dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80121e0:	4604      	mov	r4, r0
 80121e2:	2301      	movs	r3, #1
 80121e4:	e7f0      	b.n	80121c8 <_vfiprintf_r+0x1b8>
 80121e6:	ab03      	add	r3, sp, #12
 80121e8:	9300      	str	r3, [sp, #0]
 80121ea:	462a      	mov	r2, r5
 80121ec:	4b12      	ldr	r3, [pc, #72]	@ (8012238 <_vfiprintf_r+0x228>)
 80121ee:	a904      	add	r1, sp, #16
 80121f0:	4630      	mov	r0, r6
 80121f2:	f7fd fb6b 	bl	800f8cc <_printf_float>
 80121f6:	4607      	mov	r7, r0
 80121f8:	1c78      	adds	r0, r7, #1
 80121fa:	d1d6      	bne.n	80121aa <_vfiprintf_r+0x19a>
 80121fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80121fe:	07d9      	lsls	r1, r3, #31
 8012200:	d405      	bmi.n	801220e <_vfiprintf_r+0x1fe>
 8012202:	89ab      	ldrh	r3, [r5, #12]
 8012204:	059a      	lsls	r2, r3, #22
 8012206:	d402      	bmi.n	801220e <_vfiprintf_r+0x1fe>
 8012208:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801220a:	f7fe f8a1 	bl	8010350 <__retarget_lock_release_recursive>
 801220e:	89ab      	ldrh	r3, [r5, #12]
 8012210:	065b      	lsls	r3, r3, #25
 8012212:	f53f af1f 	bmi.w	8012054 <_vfiprintf_r+0x44>
 8012216:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012218:	e71e      	b.n	8012058 <_vfiprintf_r+0x48>
 801221a:	ab03      	add	r3, sp, #12
 801221c:	9300      	str	r3, [sp, #0]
 801221e:	462a      	mov	r2, r5
 8012220:	4b05      	ldr	r3, [pc, #20]	@ (8012238 <_vfiprintf_r+0x228>)
 8012222:	a904      	add	r1, sp, #16
 8012224:	4630      	mov	r0, r6
 8012226:	f7fd fde9 	bl	800fdfc <_printf_i>
 801222a:	e7e4      	b.n	80121f6 <_vfiprintf_r+0x1e6>
 801222c:	080135e9 	.word	0x080135e9
 8012230:	080135f3 	.word	0x080135f3
 8012234:	0800f8cd 	.word	0x0800f8cd
 8012238:	08011feb 	.word	0x08011feb
 801223c:	080135ef 	.word	0x080135ef

08012240 <__swbuf_r>:
 8012240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012242:	460e      	mov	r6, r1
 8012244:	4614      	mov	r4, r2
 8012246:	4605      	mov	r5, r0
 8012248:	b118      	cbz	r0, 8012252 <__swbuf_r+0x12>
 801224a:	6a03      	ldr	r3, [r0, #32]
 801224c:	b90b      	cbnz	r3, 8012252 <__swbuf_r+0x12>
 801224e:	f7fd ff81 	bl	8010154 <__sinit>
 8012252:	69a3      	ldr	r3, [r4, #24]
 8012254:	60a3      	str	r3, [r4, #8]
 8012256:	89a3      	ldrh	r3, [r4, #12]
 8012258:	071a      	lsls	r2, r3, #28
 801225a:	d501      	bpl.n	8012260 <__swbuf_r+0x20>
 801225c:	6923      	ldr	r3, [r4, #16]
 801225e:	b943      	cbnz	r3, 8012272 <__swbuf_r+0x32>
 8012260:	4621      	mov	r1, r4
 8012262:	4628      	mov	r0, r5
 8012264:	f000 f82a 	bl	80122bc <__swsetup_r>
 8012268:	b118      	cbz	r0, 8012272 <__swbuf_r+0x32>
 801226a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801226e:	4638      	mov	r0, r7
 8012270:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012272:	6823      	ldr	r3, [r4, #0]
 8012274:	6922      	ldr	r2, [r4, #16]
 8012276:	1a98      	subs	r0, r3, r2
 8012278:	6963      	ldr	r3, [r4, #20]
 801227a:	b2f6      	uxtb	r6, r6
 801227c:	4283      	cmp	r3, r0
 801227e:	4637      	mov	r7, r6
 8012280:	dc05      	bgt.n	801228e <__swbuf_r+0x4e>
 8012282:	4621      	mov	r1, r4
 8012284:	4628      	mov	r0, r5
 8012286:	f7ff f98f 	bl	80115a8 <_fflush_r>
 801228a:	2800      	cmp	r0, #0
 801228c:	d1ed      	bne.n	801226a <__swbuf_r+0x2a>
 801228e:	68a3      	ldr	r3, [r4, #8]
 8012290:	3b01      	subs	r3, #1
 8012292:	60a3      	str	r3, [r4, #8]
 8012294:	6823      	ldr	r3, [r4, #0]
 8012296:	1c5a      	adds	r2, r3, #1
 8012298:	6022      	str	r2, [r4, #0]
 801229a:	701e      	strb	r6, [r3, #0]
 801229c:	6962      	ldr	r2, [r4, #20]
 801229e:	1c43      	adds	r3, r0, #1
 80122a0:	429a      	cmp	r2, r3
 80122a2:	d004      	beq.n	80122ae <__swbuf_r+0x6e>
 80122a4:	89a3      	ldrh	r3, [r4, #12]
 80122a6:	07db      	lsls	r3, r3, #31
 80122a8:	d5e1      	bpl.n	801226e <__swbuf_r+0x2e>
 80122aa:	2e0a      	cmp	r6, #10
 80122ac:	d1df      	bne.n	801226e <__swbuf_r+0x2e>
 80122ae:	4621      	mov	r1, r4
 80122b0:	4628      	mov	r0, r5
 80122b2:	f7ff f979 	bl	80115a8 <_fflush_r>
 80122b6:	2800      	cmp	r0, #0
 80122b8:	d0d9      	beq.n	801226e <__swbuf_r+0x2e>
 80122ba:	e7d6      	b.n	801226a <__swbuf_r+0x2a>

080122bc <__swsetup_r>:
 80122bc:	b538      	push	{r3, r4, r5, lr}
 80122be:	4b29      	ldr	r3, [pc, #164]	@ (8012364 <__swsetup_r+0xa8>)
 80122c0:	4605      	mov	r5, r0
 80122c2:	6818      	ldr	r0, [r3, #0]
 80122c4:	460c      	mov	r4, r1
 80122c6:	b118      	cbz	r0, 80122d0 <__swsetup_r+0x14>
 80122c8:	6a03      	ldr	r3, [r0, #32]
 80122ca:	b90b      	cbnz	r3, 80122d0 <__swsetup_r+0x14>
 80122cc:	f7fd ff42 	bl	8010154 <__sinit>
 80122d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80122d4:	0719      	lsls	r1, r3, #28
 80122d6:	d422      	bmi.n	801231e <__swsetup_r+0x62>
 80122d8:	06da      	lsls	r2, r3, #27
 80122da:	d407      	bmi.n	80122ec <__swsetup_r+0x30>
 80122dc:	2209      	movs	r2, #9
 80122de:	602a      	str	r2, [r5, #0]
 80122e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80122e4:	81a3      	strh	r3, [r4, #12]
 80122e6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80122ea:	e033      	b.n	8012354 <__swsetup_r+0x98>
 80122ec:	0758      	lsls	r0, r3, #29
 80122ee:	d512      	bpl.n	8012316 <__swsetup_r+0x5a>
 80122f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80122f2:	b141      	cbz	r1, 8012306 <__swsetup_r+0x4a>
 80122f4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80122f8:	4299      	cmp	r1, r3
 80122fa:	d002      	beq.n	8012302 <__swsetup_r+0x46>
 80122fc:	4628      	mov	r0, r5
 80122fe:	f7fe fe83 	bl	8011008 <_free_r>
 8012302:	2300      	movs	r3, #0
 8012304:	6363      	str	r3, [r4, #52]	@ 0x34
 8012306:	89a3      	ldrh	r3, [r4, #12]
 8012308:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801230c:	81a3      	strh	r3, [r4, #12]
 801230e:	2300      	movs	r3, #0
 8012310:	6063      	str	r3, [r4, #4]
 8012312:	6923      	ldr	r3, [r4, #16]
 8012314:	6023      	str	r3, [r4, #0]
 8012316:	89a3      	ldrh	r3, [r4, #12]
 8012318:	f043 0308 	orr.w	r3, r3, #8
 801231c:	81a3      	strh	r3, [r4, #12]
 801231e:	6923      	ldr	r3, [r4, #16]
 8012320:	b94b      	cbnz	r3, 8012336 <__swsetup_r+0x7a>
 8012322:	89a3      	ldrh	r3, [r4, #12]
 8012324:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8012328:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801232c:	d003      	beq.n	8012336 <__swsetup_r+0x7a>
 801232e:	4621      	mov	r1, r4
 8012330:	4628      	mov	r0, r5
 8012332:	f000 f83f 	bl	80123b4 <__smakebuf_r>
 8012336:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801233a:	f013 0201 	ands.w	r2, r3, #1
 801233e:	d00a      	beq.n	8012356 <__swsetup_r+0x9a>
 8012340:	2200      	movs	r2, #0
 8012342:	60a2      	str	r2, [r4, #8]
 8012344:	6962      	ldr	r2, [r4, #20]
 8012346:	4252      	negs	r2, r2
 8012348:	61a2      	str	r2, [r4, #24]
 801234a:	6922      	ldr	r2, [r4, #16]
 801234c:	b942      	cbnz	r2, 8012360 <__swsetup_r+0xa4>
 801234e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8012352:	d1c5      	bne.n	80122e0 <__swsetup_r+0x24>
 8012354:	bd38      	pop	{r3, r4, r5, pc}
 8012356:	0799      	lsls	r1, r3, #30
 8012358:	bf58      	it	pl
 801235a:	6962      	ldrpl	r2, [r4, #20]
 801235c:	60a2      	str	r2, [r4, #8]
 801235e:	e7f4      	b.n	801234a <__swsetup_r+0x8e>
 8012360:	2000      	movs	r0, #0
 8012362:	e7f7      	b.n	8012354 <__swsetup_r+0x98>
 8012364:	200001b4 	.word	0x200001b4

08012368 <__swhatbuf_r>:
 8012368:	b570      	push	{r4, r5, r6, lr}
 801236a:	460c      	mov	r4, r1
 801236c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012370:	2900      	cmp	r1, #0
 8012372:	b096      	sub	sp, #88	@ 0x58
 8012374:	4615      	mov	r5, r2
 8012376:	461e      	mov	r6, r3
 8012378:	da0d      	bge.n	8012396 <__swhatbuf_r+0x2e>
 801237a:	89a3      	ldrh	r3, [r4, #12]
 801237c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8012380:	f04f 0100 	mov.w	r1, #0
 8012384:	bf14      	ite	ne
 8012386:	2340      	movne	r3, #64	@ 0x40
 8012388:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801238c:	2000      	movs	r0, #0
 801238e:	6031      	str	r1, [r6, #0]
 8012390:	602b      	str	r3, [r5, #0]
 8012392:	b016      	add	sp, #88	@ 0x58
 8012394:	bd70      	pop	{r4, r5, r6, pc}
 8012396:	466a      	mov	r2, sp
 8012398:	f000 f848 	bl	801242c <_fstat_r>
 801239c:	2800      	cmp	r0, #0
 801239e:	dbec      	blt.n	801237a <__swhatbuf_r+0x12>
 80123a0:	9901      	ldr	r1, [sp, #4]
 80123a2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80123a6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80123aa:	4259      	negs	r1, r3
 80123ac:	4159      	adcs	r1, r3
 80123ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80123b2:	e7eb      	b.n	801238c <__swhatbuf_r+0x24>

080123b4 <__smakebuf_r>:
 80123b4:	898b      	ldrh	r3, [r1, #12]
 80123b6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80123b8:	079d      	lsls	r5, r3, #30
 80123ba:	4606      	mov	r6, r0
 80123bc:	460c      	mov	r4, r1
 80123be:	d507      	bpl.n	80123d0 <__smakebuf_r+0x1c>
 80123c0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80123c4:	6023      	str	r3, [r4, #0]
 80123c6:	6123      	str	r3, [r4, #16]
 80123c8:	2301      	movs	r3, #1
 80123ca:	6163      	str	r3, [r4, #20]
 80123cc:	b003      	add	sp, #12
 80123ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80123d0:	ab01      	add	r3, sp, #4
 80123d2:	466a      	mov	r2, sp
 80123d4:	f7ff ffc8 	bl	8012368 <__swhatbuf_r>
 80123d8:	9f00      	ldr	r7, [sp, #0]
 80123da:	4605      	mov	r5, r0
 80123dc:	4639      	mov	r1, r7
 80123de:	4630      	mov	r0, r6
 80123e0:	f7fe ffde 	bl	80113a0 <_malloc_r>
 80123e4:	b948      	cbnz	r0, 80123fa <__smakebuf_r+0x46>
 80123e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80123ea:	059a      	lsls	r2, r3, #22
 80123ec:	d4ee      	bmi.n	80123cc <__smakebuf_r+0x18>
 80123ee:	f023 0303 	bic.w	r3, r3, #3
 80123f2:	f043 0302 	orr.w	r3, r3, #2
 80123f6:	81a3      	strh	r3, [r4, #12]
 80123f8:	e7e2      	b.n	80123c0 <__smakebuf_r+0xc>
 80123fa:	89a3      	ldrh	r3, [r4, #12]
 80123fc:	6020      	str	r0, [r4, #0]
 80123fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012402:	81a3      	strh	r3, [r4, #12]
 8012404:	9b01      	ldr	r3, [sp, #4]
 8012406:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801240a:	b15b      	cbz	r3, 8012424 <__smakebuf_r+0x70>
 801240c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012410:	4630      	mov	r0, r6
 8012412:	f000 f81d 	bl	8012450 <_isatty_r>
 8012416:	b128      	cbz	r0, 8012424 <__smakebuf_r+0x70>
 8012418:	89a3      	ldrh	r3, [r4, #12]
 801241a:	f023 0303 	bic.w	r3, r3, #3
 801241e:	f043 0301 	orr.w	r3, r3, #1
 8012422:	81a3      	strh	r3, [r4, #12]
 8012424:	89a3      	ldrh	r3, [r4, #12]
 8012426:	431d      	orrs	r5, r3
 8012428:	81a5      	strh	r5, [r4, #12]
 801242a:	e7cf      	b.n	80123cc <__smakebuf_r+0x18>

0801242c <_fstat_r>:
 801242c:	b538      	push	{r3, r4, r5, lr}
 801242e:	4d07      	ldr	r5, [pc, #28]	@ (801244c <_fstat_r+0x20>)
 8012430:	2300      	movs	r3, #0
 8012432:	4604      	mov	r4, r0
 8012434:	4608      	mov	r0, r1
 8012436:	4611      	mov	r1, r2
 8012438:	602b      	str	r3, [r5, #0]
 801243a:	f7f0 fff9 	bl	8003430 <_fstat>
 801243e:	1c43      	adds	r3, r0, #1
 8012440:	d102      	bne.n	8012448 <_fstat_r+0x1c>
 8012442:	682b      	ldr	r3, [r5, #0]
 8012444:	b103      	cbz	r3, 8012448 <_fstat_r+0x1c>
 8012446:	6023      	str	r3, [r4, #0]
 8012448:	bd38      	pop	{r3, r4, r5, pc}
 801244a:	bf00      	nop
 801244c:	20012934 	.word	0x20012934

08012450 <_isatty_r>:
 8012450:	b538      	push	{r3, r4, r5, lr}
 8012452:	4d06      	ldr	r5, [pc, #24]	@ (801246c <_isatty_r+0x1c>)
 8012454:	2300      	movs	r3, #0
 8012456:	4604      	mov	r4, r0
 8012458:	4608      	mov	r0, r1
 801245a:	602b      	str	r3, [r5, #0]
 801245c:	f7f0 fff8 	bl	8003450 <_isatty>
 8012460:	1c43      	adds	r3, r0, #1
 8012462:	d102      	bne.n	801246a <_isatty_r+0x1a>
 8012464:	682b      	ldr	r3, [r5, #0]
 8012466:	b103      	cbz	r3, 801246a <_isatty_r+0x1a>
 8012468:	6023      	str	r3, [r4, #0]
 801246a:	bd38      	pop	{r3, r4, r5, pc}
 801246c:	20012934 	.word	0x20012934

08012470 <_raise_r>:
 8012470:	291f      	cmp	r1, #31
 8012472:	b538      	push	{r3, r4, r5, lr}
 8012474:	4605      	mov	r5, r0
 8012476:	460c      	mov	r4, r1
 8012478:	d904      	bls.n	8012484 <_raise_r+0x14>
 801247a:	2316      	movs	r3, #22
 801247c:	6003      	str	r3, [r0, #0]
 801247e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012482:	bd38      	pop	{r3, r4, r5, pc}
 8012484:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8012486:	b112      	cbz	r2, 801248e <_raise_r+0x1e>
 8012488:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801248c:	b94b      	cbnz	r3, 80124a2 <_raise_r+0x32>
 801248e:	4628      	mov	r0, r5
 8012490:	f000 f830 	bl	80124f4 <_getpid_r>
 8012494:	4622      	mov	r2, r4
 8012496:	4601      	mov	r1, r0
 8012498:	4628      	mov	r0, r5
 801249a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801249e:	f000 b817 	b.w	80124d0 <_kill_r>
 80124a2:	2b01      	cmp	r3, #1
 80124a4:	d00a      	beq.n	80124bc <_raise_r+0x4c>
 80124a6:	1c59      	adds	r1, r3, #1
 80124a8:	d103      	bne.n	80124b2 <_raise_r+0x42>
 80124aa:	2316      	movs	r3, #22
 80124ac:	6003      	str	r3, [r0, #0]
 80124ae:	2001      	movs	r0, #1
 80124b0:	e7e7      	b.n	8012482 <_raise_r+0x12>
 80124b2:	2100      	movs	r1, #0
 80124b4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80124b8:	4620      	mov	r0, r4
 80124ba:	4798      	blx	r3
 80124bc:	2000      	movs	r0, #0
 80124be:	e7e0      	b.n	8012482 <_raise_r+0x12>

080124c0 <raise>:
 80124c0:	4b02      	ldr	r3, [pc, #8]	@ (80124cc <raise+0xc>)
 80124c2:	4601      	mov	r1, r0
 80124c4:	6818      	ldr	r0, [r3, #0]
 80124c6:	f7ff bfd3 	b.w	8012470 <_raise_r>
 80124ca:	bf00      	nop
 80124cc:	200001b4 	.word	0x200001b4

080124d0 <_kill_r>:
 80124d0:	b538      	push	{r3, r4, r5, lr}
 80124d2:	4d07      	ldr	r5, [pc, #28]	@ (80124f0 <_kill_r+0x20>)
 80124d4:	2300      	movs	r3, #0
 80124d6:	4604      	mov	r4, r0
 80124d8:	4608      	mov	r0, r1
 80124da:	4611      	mov	r1, r2
 80124dc:	602b      	str	r3, [r5, #0]
 80124de:	f7f0 ff47 	bl	8003370 <_kill>
 80124e2:	1c43      	adds	r3, r0, #1
 80124e4:	d102      	bne.n	80124ec <_kill_r+0x1c>
 80124e6:	682b      	ldr	r3, [r5, #0]
 80124e8:	b103      	cbz	r3, 80124ec <_kill_r+0x1c>
 80124ea:	6023      	str	r3, [r4, #0]
 80124ec:	bd38      	pop	{r3, r4, r5, pc}
 80124ee:	bf00      	nop
 80124f0:	20012934 	.word	0x20012934

080124f4 <_getpid_r>:
 80124f4:	f7f0 bf34 	b.w	8003360 <_getpid>

080124f8 <powf>:
 80124f8:	b508      	push	{r3, lr}
 80124fa:	ed2d 8b04 	vpush	{d8-d9}
 80124fe:	eeb0 8a60 	vmov.f32	s16, s1
 8012502:	eeb0 9a40 	vmov.f32	s18, s0
 8012506:	f000 f87b 	bl	8012600 <__ieee754_powf>
 801250a:	eeb4 8a48 	vcmp.f32	s16, s16
 801250e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012512:	eef0 8a40 	vmov.f32	s17, s0
 8012516:	d63e      	bvs.n	8012596 <powf+0x9e>
 8012518:	eeb5 9a40 	vcmp.f32	s18, #0.0
 801251c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012520:	d112      	bne.n	8012548 <powf+0x50>
 8012522:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8012526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801252a:	d039      	beq.n	80125a0 <powf+0xa8>
 801252c:	eeb0 0a48 	vmov.f32	s0, s16
 8012530:	f000 f858 	bl	80125e4 <finitef>
 8012534:	b378      	cbz	r0, 8012596 <powf+0x9e>
 8012536:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801253a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801253e:	d52a      	bpl.n	8012596 <powf+0x9e>
 8012540:	f7fd feda 	bl	80102f8 <__errno>
 8012544:	2322      	movs	r3, #34	@ 0x22
 8012546:	e014      	b.n	8012572 <powf+0x7a>
 8012548:	f000 f84c 	bl	80125e4 <finitef>
 801254c:	b998      	cbnz	r0, 8012576 <powf+0x7e>
 801254e:	eeb0 0a49 	vmov.f32	s0, s18
 8012552:	f000 f847 	bl	80125e4 <finitef>
 8012556:	b170      	cbz	r0, 8012576 <powf+0x7e>
 8012558:	eeb0 0a48 	vmov.f32	s0, s16
 801255c:	f000 f842 	bl	80125e4 <finitef>
 8012560:	b148      	cbz	r0, 8012576 <powf+0x7e>
 8012562:	eef4 8a68 	vcmp.f32	s17, s17
 8012566:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801256a:	d7e9      	bvc.n	8012540 <powf+0x48>
 801256c:	f7fd fec4 	bl	80102f8 <__errno>
 8012570:	2321      	movs	r3, #33	@ 0x21
 8012572:	6003      	str	r3, [r0, #0]
 8012574:	e00f      	b.n	8012596 <powf+0x9e>
 8012576:	eef5 8a40 	vcmp.f32	s17, #0.0
 801257a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801257e:	d10a      	bne.n	8012596 <powf+0x9e>
 8012580:	eeb0 0a49 	vmov.f32	s0, s18
 8012584:	f000 f82e 	bl	80125e4 <finitef>
 8012588:	b128      	cbz	r0, 8012596 <powf+0x9e>
 801258a:	eeb0 0a48 	vmov.f32	s0, s16
 801258e:	f000 f829 	bl	80125e4 <finitef>
 8012592:	2800      	cmp	r0, #0
 8012594:	d1d4      	bne.n	8012540 <powf+0x48>
 8012596:	eeb0 0a68 	vmov.f32	s0, s17
 801259a:	ecbd 8b04 	vpop	{d8-d9}
 801259e:	bd08      	pop	{r3, pc}
 80125a0:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 80125a4:	e7f7      	b.n	8012596 <powf+0x9e>
	...

080125a8 <sqrtf>:
 80125a8:	b508      	push	{r3, lr}
 80125aa:	ed2d 8b02 	vpush	{d8}
 80125ae:	eeb0 8a40 	vmov.f32	s16, s0
 80125b2:	f000 f821 	bl	80125f8 <__ieee754_sqrtf>
 80125b6:	eeb4 8a48 	vcmp.f32	s16, s16
 80125ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125be:	d60c      	bvs.n	80125da <sqrtf+0x32>
 80125c0:	eddf 8a07 	vldr	s17, [pc, #28]	@ 80125e0 <sqrtf+0x38>
 80125c4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80125c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125cc:	d505      	bpl.n	80125da <sqrtf+0x32>
 80125ce:	f7fd fe93 	bl	80102f8 <__errno>
 80125d2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80125d6:	2321      	movs	r3, #33	@ 0x21
 80125d8:	6003      	str	r3, [r0, #0]
 80125da:	ecbd 8b02 	vpop	{d8}
 80125de:	bd08      	pop	{r3, pc}
 80125e0:	00000000 	.word	0x00000000

080125e4 <finitef>:
 80125e4:	ee10 3a10 	vmov	r3, s0
 80125e8:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 80125ec:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 80125f0:	bfac      	ite	ge
 80125f2:	2000      	movge	r0, #0
 80125f4:	2001      	movlt	r0, #1
 80125f6:	4770      	bx	lr

080125f8 <__ieee754_sqrtf>:
 80125f8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80125fc:	4770      	bx	lr
	...

08012600 <__ieee754_powf>:
 8012600:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012604:	ee10 4a90 	vmov	r4, s1
 8012608:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 801260c:	ed2d 8b02 	vpush	{d8}
 8012610:	ee10 6a10 	vmov	r6, s0
 8012614:	eeb0 8a40 	vmov.f32	s16, s0
 8012618:	eef0 8a60 	vmov.f32	s17, s1
 801261c:	d10c      	bne.n	8012638 <__ieee754_powf+0x38>
 801261e:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 8012622:	0076      	lsls	r6, r6, #1
 8012624:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 8012628:	f240 829c 	bls.w	8012b64 <__ieee754_powf+0x564>
 801262c:	ee38 0a28 	vadd.f32	s0, s16, s17
 8012630:	ecbd 8b02 	vpop	{d8}
 8012634:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012638:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 801263c:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 8012640:	d802      	bhi.n	8012648 <__ieee754_powf+0x48>
 8012642:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8012646:	d908      	bls.n	801265a <__ieee754_powf+0x5a>
 8012648:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 801264c:	d1ee      	bne.n	801262c <__ieee754_powf+0x2c>
 801264e:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 8012652:	0064      	lsls	r4, r4, #1
 8012654:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 8012658:	e7e6      	b.n	8012628 <__ieee754_powf+0x28>
 801265a:	2e00      	cmp	r6, #0
 801265c:	da1e      	bge.n	801269c <__ieee754_powf+0x9c>
 801265e:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 8012662:	d22b      	bcs.n	80126bc <__ieee754_powf+0xbc>
 8012664:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8012668:	d332      	bcc.n	80126d0 <__ieee754_powf+0xd0>
 801266a:	ea4f 53e9 	mov.w	r3, r9, asr #23
 801266e:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 8012672:	fa49 f503 	asr.w	r5, r9, r3
 8012676:	fa05 f303 	lsl.w	r3, r5, r3
 801267a:	454b      	cmp	r3, r9
 801267c:	d126      	bne.n	80126cc <__ieee754_powf+0xcc>
 801267e:	f005 0501 	and.w	r5, r5, #1
 8012682:	f1c5 0502 	rsb	r5, r5, #2
 8012686:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 801268a:	d122      	bne.n	80126d2 <__ieee754_powf+0xd2>
 801268c:	2c00      	cmp	r4, #0
 801268e:	f280 826f 	bge.w	8012b70 <__ieee754_powf+0x570>
 8012692:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8012696:	ee87 0a88 	vdiv.f32	s0, s15, s16
 801269a:	e7c9      	b.n	8012630 <__ieee754_powf+0x30>
 801269c:	2500      	movs	r5, #0
 801269e:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 80126a2:	d1f0      	bne.n	8012686 <__ieee754_powf+0x86>
 80126a4:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 80126a8:	f000 825c 	beq.w	8012b64 <__ieee754_powf+0x564>
 80126ac:	d908      	bls.n	80126c0 <__ieee754_powf+0xc0>
 80126ae:	ed9f 0ad8 	vldr	s0, [pc, #864]	@ 8012a10 <__ieee754_powf+0x410>
 80126b2:	2c00      	cmp	r4, #0
 80126b4:	bfa8      	it	ge
 80126b6:	eeb0 0a68 	vmovge.f32	s0, s17
 80126ba:	e7b9      	b.n	8012630 <__ieee754_powf+0x30>
 80126bc:	2502      	movs	r5, #2
 80126be:	e7ee      	b.n	801269e <__ieee754_powf+0x9e>
 80126c0:	2c00      	cmp	r4, #0
 80126c2:	f280 8252 	bge.w	8012b6a <__ieee754_powf+0x56a>
 80126c6:	eeb1 0a68 	vneg.f32	s0, s17
 80126ca:	e7b1      	b.n	8012630 <__ieee754_powf+0x30>
 80126cc:	2500      	movs	r5, #0
 80126ce:	e7da      	b.n	8012686 <__ieee754_powf+0x86>
 80126d0:	2500      	movs	r5, #0
 80126d2:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 80126d6:	d102      	bne.n	80126de <__ieee754_powf+0xde>
 80126d8:	ee28 0a08 	vmul.f32	s0, s16, s16
 80126dc:	e7a8      	b.n	8012630 <__ieee754_powf+0x30>
 80126de:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 80126e2:	d109      	bne.n	80126f8 <__ieee754_powf+0xf8>
 80126e4:	2e00      	cmp	r6, #0
 80126e6:	db07      	blt.n	80126f8 <__ieee754_powf+0xf8>
 80126e8:	eeb0 0a48 	vmov.f32	s0, s16
 80126ec:	ecbd 8b02 	vpop	{d8}
 80126f0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80126f4:	f7ff bf80 	b.w	80125f8 <__ieee754_sqrtf>
 80126f8:	eeb0 0a48 	vmov.f32	s0, s16
 80126fc:	f000 fadc 	bl	8012cb8 <fabsf>
 8012700:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 8012704:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 8012708:	4647      	mov	r7, r8
 801270a:	d002      	beq.n	8012712 <__ieee754_powf+0x112>
 801270c:	f1b8 0f00 	cmp.w	r8, #0
 8012710:	d117      	bne.n	8012742 <__ieee754_powf+0x142>
 8012712:	2c00      	cmp	r4, #0
 8012714:	bfbc      	itt	lt
 8012716:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 801271a:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 801271e:	2e00      	cmp	r6, #0
 8012720:	da86      	bge.n	8012630 <__ieee754_powf+0x30>
 8012722:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 8012726:	ea58 0805 	orrs.w	r8, r8, r5
 801272a:	d104      	bne.n	8012736 <__ieee754_powf+0x136>
 801272c:	ee70 7a40 	vsub.f32	s15, s0, s0
 8012730:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8012734:	e77c      	b.n	8012630 <__ieee754_powf+0x30>
 8012736:	2d01      	cmp	r5, #1
 8012738:	f47f af7a 	bne.w	8012630 <__ieee754_powf+0x30>
 801273c:	eeb1 0a40 	vneg.f32	s0, s0
 8012740:	e776      	b.n	8012630 <__ieee754_powf+0x30>
 8012742:	0ff0      	lsrs	r0, r6, #31
 8012744:	3801      	subs	r0, #1
 8012746:	ea55 0300 	orrs.w	r3, r5, r0
 801274a:	d104      	bne.n	8012756 <__ieee754_powf+0x156>
 801274c:	ee38 8a48 	vsub.f32	s16, s16, s16
 8012750:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8012754:	e76c      	b.n	8012630 <__ieee754_powf+0x30>
 8012756:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 801275a:	d973      	bls.n	8012844 <__ieee754_powf+0x244>
 801275c:	4bad      	ldr	r3, [pc, #692]	@ (8012a14 <__ieee754_powf+0x414>)
 801275e:	4598      	cmp	r8, r3
 8012760:	d808      	bhi.n	8012774 <__ieee754_powf+0x174>
 8012762:	2c00      	cmp	r4, #0
 8012764:	da0b      	bge.n	801277e <__ieee754_powf+0x17e>
 8012766:	2000      	movs	r0, #0
 8012768:	ecbd 8b02 	vpop	{d8}
 801276c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012770:	f000 ba36 	b.w	8012be0 <__math_oflowf>
 8012774:	4ba8      	ldr	r3, [pc, #672]	@ (8012a18 <__ieee754_powf+0x418>)
 8012776:	4598      	cmp	r8, r3
 8012778:	d908      	bls.n	801278c <__ieee754_powf+0x18c>
 801277a:	2c00      	cmp	r4, #0
 801277c:	dcf3      	bgt.n	8012766 <__ieee754_powf+0x166>
 801277e:	2000      	movs	r0, #0
 8012780:	ecbd 8b02 	vpop	{d8}
 8012784:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012788:	f000 ba24 	b.w	8012bd4 <__math_uflowf>
 801278c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8012790:	ee30 0a67 	vsub.f32	s0, s0, s15
 8012794:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 8012a1c <__ieee754_powf+0x41c>
 8012798:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 801279c:	eee0 6a67 	vfms.f32	s13, s0, s15
 80127a0:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80127a4:	eee6 7ac0 	vfms.f32	s15, s13, s0
 80127a8:	ee20 7a00 	vmul.f32	s14, s0, s0
 80127ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80127b0:	eddf 7a9b 	vldr	s15, [pc, #620]	@ 8012a20 <__ieee754_powf+0x420>
 80127b4:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 80127b8:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 8012a24 <__ieee754_powf+0x424>
 80127bc:	eee0 7a07 	vfma.f32	s15, s0, s14
 80127c0:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 8012a28 <__ieee754_powf+0x428>
 80127c4:	eef0 6a67 	vmov.f32	s13, s15
 80127c8:	eee0 6a07 	vfma.f32	s13, s0, s14
 80127cc:	ee16 3a90 	vmov	r3, s13
 80127d0:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80127d4:	f023 030f 	bic.w	r3, r3, #15
 80127d8:	ee06 3a90 	vmov	s13, r3
 80127dc:	eee0 6a47 	vfms.f32	s13, s0, s14
 80127e0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80127e4:	3d01      	subs	r5, #1
 80127e6:	f424 647f 	bic.w	r4, r4, #4080	@ 0xff0
 80127ea:	4305      	orrs	r5, r0
 80127ec:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80127f0:	f024 040f 	bic.w	r4, r4, #15
 80127f4:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 80127f8:	bf18      	it	ne
 80127fa:	eeb0 8a47 	vmovne.f32	s16, s14
 80127fe:	ee07 4a10 	vmov	s14, r4
 8012802:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8012806:	ee38 7ac7 	vsub.f32	s14, s17, s14
 801280a:	ee07 3a90 	vmov	s15, r3
 801280e:	eee7 0a27 	vfma.f32	s1, s14, s15
 8012812:	ee07 4a10 	vmov	s14, r4
 8012816:	ee67 7a87 	vmul.f32	s15, s15, s14
 801281a:	ee30 7aa7 	vadd.f32	s14, s1, s15
 801281e:	ee17 1a10 	vmov	r1, s14
 8012822:	2900      	cmp	r1, #0
 8012824:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8012828:	f340 80dd 	ble.w	80129e6 <__ieee754_powf+0x3e6>
 801282c:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 8012830:	f240 80ca 	bls.w	80129c8 <__ieee754_powf+0x3c8>
 8012834:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8012838:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801283c:	bf4c      	ite	mi
 801283e:	2001      	movmi	r0, #1
 8012840:	2000      	movpl	r0, #0
 8012842:	e791      	b.n	8012768 <__ieee754_powf+0x168>
 8012844:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 8012848:	bf01      	itttt	eq
 801284a:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 8012a2c <__ieee754_powf+0x42c>
 801284e:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8012852:	f06f 0317 	mvneq.w	r3, #23
 8012856:	ee17 7a90 	vmoveq	r7, s15
 801285a:	ea4f 52e7 	mov.w	r2, r7, asr #23
 801285e:	bf18      	it	ne
 8012860:	2300      	movne	r3, #0
 8012862:	3a7f      	subs	r2, #127	@ 0x7f
 8012864:	441a      	add	r2, r3
 8012866:	4b72      	ldr	r3, [pc, #456]	@ (8012a30 <__ieee754_powf+0x430>)
 8012868:	f3c7 0716 	ubfx	r7, r7, #0, #23
 801286c:	429f      	cmp	r7, r3
 801286e:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 8012872:	dd06      	ble.n	8012882 <__ieee754_powf+0x282>
 8012874:	4b6f      	ldr	r3, [pc, #444]	@ (8012a34 <__ieee754_powf+0x434>)
 8012876:	429f      	cmp	r7, r3
 8012878:	f340 80a4 	ble.w	80129c4 <__ieee754_powf+0x3c4>
 801287c:	3201      	adds	r2, #1
 801287e:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 8012882:	2600      	movs	r6, #0
 8012884:	4b6c      	ldr	r3, [pc, #432]	@ (8012a38 <__ieee754_powf+0x438>)
 8012886:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 801288a:	ee07 1a10 	vmov	s14, r1
 801288e:	edd3 5a00 	vldr	s11, [r3]
 8012892:	4b6a      	ldr	r3, [pc, #424]	@ (8012a3c <__ieee754_powf+0x43c>)
 8012894:	ee75 7a87 	vadd.f32	s15, s11, s14
 8012898:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801289c:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 80128a0:	1049      	asrs	r1, r1, #1
 80128a2:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 80128a6:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 80128aa:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 80128ae:	ee37 6a65 	vsub.f32	s12, s14, s11
 80128b2:	ee07 1a90 	vmov	s15, r1
 80128b6:	ee26 5a24 	vmul.f32	s10, s12, s9
 80128ba:	ee77 5ae5 	vsub.f32	s11, s15, s11
 80128be:	ee15 7a10 	vmov	r7, s10
 80128c2:	401f      	ands	r7, r3
 80128c4:	ee06 7a90 	vmov	s13, r7
 80128c8:	eea6 6ae7 	vfms.f32	s12, s13, s15
 80128cc:	ee37 7a65 	vsub.f32	s14, s14, s11
 80128d0:	ee65 7a05 	vmul.f32	s15, s10, s10
 80128d4:	eea6 6ac7 	vfms.f32	s12, s13, s14
 80128d8:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8012a40 <__ieee754_powf+0x440>
 80128dc:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8012a44 <__ieee754_powf+0x444>
 80128e0:	eee7 5a87 	vfma.f32	s11, s15, s14
 80128e4:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8012a48 <__ieee754_powf+0x448>
 80128e8:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80128ec:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 8012a1c <__ieee754_powf+0x41c>
 80128f0:	eee7 5a27 	vfma.f32	s11, s14, s15
 80128f4:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8012a4c <__ieee754_powf+0x44c>
 80128f8:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80128fc:	eddf 5a54 	vldr	s11, [pc, #336]	@ 8012a50 <__ieee754_powf+0x450>
 8012900:	ee26 6a24 	vmul.f32	s12, s12, s9
 8012904:	eee7 5a27 	vfma.f32	s11, s14, s15
 8012908:	ee35 7a26 	vadd.f32	s14, s10, s13
 801290c:	ee67 4aa7 	vmul.f32	s9, s15, s15
 8012910:	ee27 7a06 	vmul.f32	s14, s14, s12
 8012914:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 8012918:	eea4 7aa5 	vfma.f32	s14, s9, s11
 801291c:	eef0 5a67 	vmov.f32	s11, s15
 8012920:	eee6 5aa6 	vfma.f32	s11, s13, s13
 8012924:	ee75 5a87 	vadd.f32	s11, s11, s14
 8012928:	ee15 1a90 	vmov	r1, s11
 801292c:	4019      	ands	r1, r3
 801292e:	ee05 1a90 	vmov	s11, r1
 8012932:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8012936:	eee6 7ae6 	vfms.f32	s15, s13, s13
 801293a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801293e:	ee67 7a85 	vmul.f32	s15, s15, s10
 8012942:	eee6 7a25 	vfma.f32	s15, s12, s11
 8012946:	eeb0 6a67 	vmov.f32	s12, s15
 801294a:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801294e:	ee16 1a10 	vmov	r1, s12
 8012952:	4019      	ands	r1, r3
 8012954:	ee06 1a10 	vmov	s12, r1
 8012958:	eeb0 7a46 	vmov.f32	s14, s12
 801295c:	eea6 7ae5 	vfms.f32	s14, s13, s11
 8012960:	493c      	ldr	r1, [pc, #240]	@ (8012a54 <__ieee754_powf+0x454>)
 8012962:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 8012966:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801296a:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8012a58 <__ieee754_powf+0x458>
 801296e:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 8012a5c <__ieee754_powf+0x45c>
 8012972:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012976:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8012a60 <__ieee754_powf+0x460>
 801297a:	eee6 7a07 	vfma.f32	s15, s12, s14
 801297e:	ed91 7a00 	vldr	s14, [r1]
 8012982:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012986:	ee07 2a10 	vmov	s14, r2
 801298a:	eef0 6a67 	vmov.f32	s13, s15
 801298e:	4a35      	ldr	r2, [pc, #212]	@ (8012a64 <__ieee754_powf+0x464>)
 8012990:	eee6 6a25 	vfma.f32	s13, s12, s11
 8012994:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 8012998:	ed92 5a00 	vldr	s10, [r2]
 801299c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80129a0:	ee76 6a85 	vadd.f32	s13, s13, s10
 80129a4:	ee76 6a87 	vadd.f32	s13, s13, s14
 80129a8:	ee16 2a90 	vmov	r2, s13
 80129ac:	4013      	ands	r3, r2
 80129ae:	ee06 3a90 	vmov	s13, r3
 80129b2:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80129b6:	ee37 7a45 	vsub.f32	s14, s14, s10
 80129ba:	eea6 7a65 	vfms.f32	s14, s12, s11
 80129be:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80129c2:	e70f      	b.n	80127e4 <__ieee754_powf+0x1e4>
 80129c4:	2601      	movs	r6, #1
 80129c6:	e75d      	b.n	8012884 <__ieee754_powf+0x284>
 80129c8:	d152      	bne.n	8012a70 <__ieee754_powf+0x470>
 80129ca:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8012a68 <__ieee754_powf+0x468>
 80129ce:	ee37 7a67 	vsub.f32	s14, s14, s15
 80129d2:	ee70 6aa6 	vadd.f32	s13, s1, s13
 80129d6:	eef4 6ac7 	vcmpe.f32	s13, s14
 80129da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129de:	f73f af29 	bgt.w	8012834 <__ieee754_powf+0x234>
 80129e2:	2386      	movs	r3, #134	@ 0x86
 80129e4:	e048      	b.n	8012a78 <__ieee754_powf+0x478>
 80129e6:	4a21      	ldr	r2, [pc, #132]	@ (8012a6c <__ieee754_powf+0x46c>)
 80129e8:	4293      	cmp	r3, r2
 80129ea:	d907      	bls.n	80129fc <__ieee754_powf+0x3fc>
 80129ec:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80129f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129f4:	bf4c      	ite	mi
 80129f6:	2001      	movmi	r0, #1
 80129f8:	2000      	movpl	r0, #0
 80129fa:	e6c1      	b.n	8012780 <__ieee754_powf+0x180>
 80129fc:	d138      	bne.n	8012a70 <__ieee754_powf+0x470>
 80129fe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012a02:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8012a06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a0a:	dbea      	blt.n	80129e2 <__ieee754_powf+0x3e2>
 8012a0c:	e7ee      	b.n	80129ec <__ieee754_powf+0x3ec>
 8012a0e:	bf00      	nop
 8012a10:	00000000 	.word	0x00000000
 8012a14:	3f7ffff3 	.word	0x3f7ffff3
 8012a18:	3f800007 	.word	0x3f800007
 8012a1c:	3eaaaaab 	.word	0x3eaaaaab
 8012a20:	3fb8aa3b 	.word	0x3fb8aa3b
 8012a24:	36eca570 	.word	0x36eca570
 8012a28:	3fb8aa00 	.word	0x3fb8aa00
 8012a2c:	4b800000 	.word	0x4b800000
 8012a30:	001cc471 	.word	0x001cc471
 8012a34:	005db3d6 	.word	0x005db3d6
 8012a38:	080138a8 	.word	0x080138a8
 8012a3c:	fffff000 	.word	0xfffff000
 8012a40:	3e6c3255 	.word	0x3e6c3255
 8012a44:	3e53f142 	.word	0x3e53f142
 8012a48:	3e8ba305 	.word	0x3e8ba305
 8012a4c:	3edb6db7 	.word	0x3edb6db7
 8012a50:	3f19999a 	.word	0x3f19999a
 8012a54:	08013898 	.word	0x08013898
 8012a58:	3f76384f 	.word	0x3f76384f
 8012a5c:	3f763800 	.word	0x3f763800
 8012a60:	369dc3a0 	.word	0x369dc3a0
 8012a64:	080138a0 	.word	0x080138a0
 8012a68:	3338aa3c 	.word	0x3338aa3c
 8012a6c:	43160000 	.word	0x43160000
 8012a70:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 8012a74:	d971      	bls.n	8012b5a <__ieee754_powf+0x55a>
 8012a76:	15db      	asrs	r3, r3, #23
 8012a78:	3b7e      	subs	r3, #126	@ 0x7e
 8012a7a:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8012a7e:	4118      	asrs	r0, r3
 8012a80:	4408      	add	r0, r1
 8012a82:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8012a86:	4a3c      	ldr	r2, [pc, #240]	@ (8012b78 <__ieee754_powf+0x578>)
 8012a88:	3b7f      	subs	r3, #127	@ 0x7f
 8012a8a:	411a      	asrs	r2, r3
 8012a8c:	4002      	ands	r2, r0
 8012a8e:	ee07 2a10 	vmov	s14, r2
 8012a92:	f3c0 0016 	ubfx	r0, r0, #0, #23
 8012a96:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8012a9a:	f1c3 0317 	rsb	r3, r3, #23
 8012a9e:	4118      	asrs	r0, r3
 8012aa0:	2900      	cmp	r1, #0
 8012aa2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012aa6:	bfb8      	it	lt
 8012aa8:	4240      	neglt	r0, r0
 8012aaa:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8012aae:	eddf 6a33 	vldr	s13, [pc, #204]	@ 8012b7c <__ieee754_powf+0x57c>
 8012ab2:	ed9f 6a33 	vldr	s12, [pc, #204]	@ 8012b80 <__ieee754_powf+0x580>
 8012ab6:	ee17 3a10 	vmov	r3, s14
 8012aba:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8012abe:	f023 030f 	bic.w	r3, r3, #15
 8012ac2:	ee07 3a10 	vmov	s14, r3
 8012ac6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012aca:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8012ace:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8012ad2:	eddf 7a2c 	vldr	s15, [pc, #176]	@ 8012b84 <__ieee754_powf+0x584>
 8012ad6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012ada:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8012ade:	eef0 6a67 	vmov.f32	s13, s15
 8012ae2:	eee7 6a06 	vfma.f32	s13, s14, s12
 8012ae6:	eef0 5a66 	vmov.f32	s11, s13
 8012aea:	eee7 5a46 	vfms.f32	s11, s14, s12
 8012aee:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8012af2:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8012af6:	ed9f 6a24 	vldr	s12, [pc, #144]	@ 8012b88 <__ieee754_powf+0x588>
 8012afa:	eddf 5a24 	vldr	s11, [pc, #144]	@ 8012b8c <__ieee754_powf+0x58c>
 8012afe:	eea7 6a25 	vfma.f32	s12, s14, s11
 8012b02:	eddf 5a23 	vldr	s11, [pc, #140]	@ 8012b90 <__ieee754_powf+0x590>
 8012b06:	eee6 5a07 	vfma.f32	s11, s12, s14
 8012b0a:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 8012b94 <__ieee754_powf+0x594>
 8012b0e:	eea5 6a87 	vfma.f32	s12, s11, s14
 8012b12:	eddf 5a21 	vldr	s11, [pc, #132]	@ 8012b98 <__ieee754_powf+0x598>
 8012b16:	eee6 5a07 	vfma.f32	s11, s12, s14
 8012b1a:	eeb0 6a66 	vmov.f32	s12, s13
 8012b1e:	eea5 6ac7 	vfms.f32	s12, s11, s14
 8012b22:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8012b26:	ee66 5a86 	vmul.f32	s11, s13, s12
 8012b2a:	ee36 6a47 	vsub.f32	s12, s12, s14
 8012b2e:	eee6 7aa7 	vfma.f32	s15, s13, s15
 8012b32:	ee85 7a86 	vdiv.f32	s14, s11, s12
 8012b36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012b3a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8012b3e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8012b42:	ee10 3a10 	vmov	r3, s0
 8012b46:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8012b4a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8012b4e:	da06      	bge.n	8012b5e <__ieee754_powf+0x55e>
 8012b50:	f000 f84c 	bl	8012bec <scalbnf>
 8012b54:	ee20 0a08 	vmul.f32	s0, s0, s16
 8012b58:	e56a      	b.n	8012630 <__ieee754_powf+0x30>
 8012b5a:	2000      	movs	r0, #0
 8012b5c:	e7a5      	b.n	8012aaa <__ieee754_powf+0x4aa>
 8012b5e:	ee00 3a10 	vmov	s0, r3
 8012b62:	e7f7      	b.n	8012b54 <__ieee754_powf+0x554>
 8012b64:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8012b68:	e562      	b.n	8012630 <__ieee754_powf+0x30>
 8012b6a:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 8012b9c <__ieee754_powf+0x59c>
 8012b6e:	e55f      	b.n	8012630 <__ieee754_powf+0x30>
 8012b70:	eeb0 0a48 	vmov.f32	s0, s16
 8012b74:	e55c      	b.n	8012630 <__ieee754_powf+0x30>
 8012b76:	bf00      	nop
 8012b78:	ff800000 	.word	0xff800000
 8012b7c:	3f317218 	.word	0x3f317218
 8012b80:	3f317200 	.word	0x3f317200
 8012b84:	35bfbe8c 	.word	0x35bfbe8c
 8012b88:	b5ddea0e 	.word	0xb5ddea0e
 8012b8c:	3331bb4c 	.word	0x3331bb4c
 8012b90:	388ab355 	.word	0x388ab355
 8012b94:	bb360b61 	.word	0xbb360b61
 8012b98:	3e2aaaab 	.word	0x3e2aaaab
 8012b9c:	00000000 	.word	0x00000000

08012ba0 <with_errnof>:
 8012ba0:	b510      	push	{r4, lr}
 8012ba2:	ed2d 8b02 	vpush	{d8}
 8012ba6:	eeb0 8a40 	vmov.f32	s16, s0
 8012baa:	4604      	mov	r4, r0
 8012bac:	f7fd fba4 	bl	80102f8 <__errno>
 8012bb0:	eeb0 0a48 	vmov.f32	s0, s16
 8012bb4:	ecbd 8b02 	vpop	{d8}
 8012bb8:	6004      	str	r4, [r0, #0]
 8012bba:	bd10      	pop	{r4, pc}

08012bbc <xflowf>:
 8012bbc:	b130      	cbz	r0, 8012bcc <xflowf+0x10>
 8012bbe:	eef1 7a40 	vneg.f32	s15, s0
 8012bc2:	ee27 0a80 	vmul.f32	s0, s15, s0
 8012bc6:	2022      	movs	r0, #34	@ 0x22
 8012bc8:	f7ff bfea 	b.w	8012ba0 <with_errnof>
 8012bcc:	eef0 7a40 	vmov.f32	s15, s0
 8012bd0:	e7f7      	b.n	8012bc2 <xflowf+0x6>
	...

08012bd4 <__math_uflowf>:
 8012bd4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8012bdc <__math_uflowf+0x8>
 8012bd8:	f7ff bff0 	b.w	8012bbc <xflowf>
 8012bdc:	10000000 	.word	0x10000000

08012be0 <__math_oflowf>:
 8012be0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8012be8 <__math_oflowf+0x8>
 8012be4:	f7ff bfea 	b.w	8012bbc <xflowf>
 8012be8:	70000000 	.word	0x70000000

08012bec <scalbnf>:
 8012bec:	ee10 3a10 	vmov	r3, s0
 8012bf0:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8012bf4:	d02b      	beq.n	8012c4e <scalbnf+0x62>
 8012bf6:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8012bfa:	d302      	bcc.n	8012c02 <scalbnf+0x16>
 8012bfc:	ee30 0a00 	vadd.f32	s0, s0, s0
 8012c00:	4770      	bx	lr
 8012c02:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8012c06:	d123      	bne.n	8012c50 <scalbnf+0x64>
 8012c08:	4b24      	ldr	r3, [pc, #144]	@ (8012c9c <scalbnf+0xb0>)
 8012c0a:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8012ca0 <scalbnf+0xb4>
 8012c0e:	4298      	cmp	r0, r3
 8012c10:	ee20 0a27 	vmul.f32	s0, s0, s15
 8012c14:	db17      	blt.n	8012c46 <scalbnf+0x5a>
 8012c16:	ee10 3a10 	vmov	r3, s0
 8012c1a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8012c1e:	3a19      	subs	r2, #25
 8012c20:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8012c24:	4288      	cmp	r0, r1
 8012c26:	dd15      	ble.n	8012c54 <scalbnf+0x68>
 8012c28:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8012ca4 <scalbnf+0xb8>
 8012c2c:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8012ca8 <scalbnf+0xbc>
 8012c30:	ee10 3a10 	vmov	r3, s0
 8012c34:	eeb0 7a67 	vmov.f32	s14, s15
 8012c38:	2b00      	cmp	r3, #0
 8012c3a:	bfb8      	it	lt
 8012c3c:	eef0 7a66 	vmovlt.f32	s15, s13
 8012c40:	ee27 0a87 	vmul.f32	s0, s15, s14
 8012c44:	4770      	bx	lr
 8012c46:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8012cac <scalbnf+0xc0>
 8012c4a:	ee27 0a80 	vmul.f32	s0, s15, s0
 8012c4e:	4770      	bx	lr
 8012c50:	0dd2      	lsrs	r2, r2, #23
 8012c52:	e7e5      	b.n	8012c20 <scalbnf+0x34>
 8012c54:	4410      	add	r0, r2
 8012c56:	28fe      	cmp	r0, #254	@ 0xfe
 8012c58:	dce6      	bgt.n	8012c28 <scalbnf+0x3c>
 8012c5a:	2800      	cmp	r0, #0
 8012c5c:	dd06      	ble.n	8012c6c <scalbnf+0x80>
 8012c5e:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8012c62:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8012c66:	ee00 3a10 	vmov	s0, r3
 8012c6a:	4770      	bx	lr
 8012c6c:	f110 0f16 	cmn.w	r0, #22
 8012c70:	da09      	bge.n	8012c86 <scalbnf+0x9a>
 8012c72:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8012cac <scalbnf+0xc0>
 8012c76:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8012cb0 <scalbnf+0xc4>
 8012c7a:	ee10 3a10 	vmov	r3, s0
 8012c7e:	eeb0 7a67 	vmov.f32	s14, s15
 8012c82:	2b00      	cmp	r3, #0
 8012c84:	e7d9      	b.n	8012c3a <scalbnf+0x4e>
 8012c86:	3019      	adds	r0, #25
 8012c88:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8012c8c:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8012c90:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8012cb4 <scalbnf+0xc8>
 8012c94:	ee07 3a90 	vmov	s15, r3
 8012c98:	e7d7      	b.n	8012c4a <scalbnf+0x5e>
 8012c9a:	bf00      	nop
 8012c9c:	ffff3cb0 	.word	0xffff3cb0
 8012ca0:	4c000000 	.word	0x4c000000
 8012ca4:	7149f2ca 	.word	0x7149f2ca
 8012ca8:	f149f2ca 	.word	0xf149f2ca
 8012cac:	0da24260 	.word	0x0da24260
 8012cb0:	8da24260 	.word	0x8da24260
 8012cb4:	33000000 	.word	0x33000000

08012cb8 <fabsf>:
 8012cb8:	ee10 3a10 	vmov	r3, s0
 8012cbc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8012cc0:	ee00 3a10 	vmov	s0, r3
 8012cc4:	4770      	bx	lr
	...

08012cc8 <_init>:
 8012cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012cca:	bf00      	nop
 8012ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012cce:	bc08      	pop	{r3}
 8012cd0:	469e      	mov	lr, r3
 8012cd2:	4770      	bx	lr

08012cd4 <_fini>:
 8012cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012cd6:	bf00      	nop
 8012cd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012cda:	bc08      	pop	{r3}
 8012cdc:	469e      	mov	lr, r3
 8012cde:	4770      	bx	lr
