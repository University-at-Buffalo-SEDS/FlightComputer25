
FlightComputer25.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012b10  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bd0  08012cf0  08012cf0  00013cf0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080138c0  080138c0  00015370  2**0
                  CONTENTS
  4 .ARM          00000008  080138c0  080138c0  000148c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080138c8  080138c8  00015370  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080138c8  080138c8  000148c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080138cc  080138cc  000148cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000370  20000000  080138d0  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000125d4  20000370  08013c40  00015370  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20012944  08013c40  00015944  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00015370  2**0
                  CONTENTS, READONLY
 12 .debug_info   000284c7  00000000  00000000  000153a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005c72  00000000  00000000  0003d867  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002178  00000000  00000000  000434e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001981  00000000  00000000  00045658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002552d  00000000  00000000  00046fd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000262b9  00000000  00000000  0006c506  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1724  00000000  00000000  000927bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00173ee3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009f74  00000000  00000000  00173f28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  0017de9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000370 	.word	0x20000370
 80001fc:	00000000 	.word	0x00000000
 8000200:	08012cd8 	.word	0x08012cd8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000374 	.word	0x20000374
 800021c:	08012cd8 	.word	0x08012cd8

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <accel_read_reg>:
#include <Drivers/bmi088.h>

void accel_read_reg(BMI088 *imu, uint8_t regAddr, uint8_t *data) {
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b088      	sub	sp, #32
 8000bfc:	af02      	add	r7, sp, #8
 8000bfe:	60f8      	str	r0, [r7, #12]
 8000c00:	460b      	mov	r3, r1
 8000c02:	607a      	str	r2, [r7, #4]
 8000c04:	72fb      	strb	r3, [r7, #11]
	uint8_t tx[3] = {regAddr | 0x80, 0x00, 0x00};
 8000c06:	7afb      	ldrb	r3, [r7, #11]
 8000c08:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000c0c:	b2db      	uxtb	r3, r3
 8000c0e:	753b      	strb	r3, [r7, #20]
 8000c10:	2300      	movs	r3, #0
 8000c12:	757b      	strb	r3, [r7, #21]
 8000c14:	2300      	movs	r3, #0
 8000c16:	75bb      	strb	r3, [r7, #22]
	uint8_t rx[3];

	HAL_GPIO_WritePin(imu->csAccelPinBank, imu->accelCSPin, GPIO_PIN_RESET);
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	6858      	ldr	r0, [r3, #4]
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	899b      	ldrh	r3, [r3, #12]
 8000c20:	2200      	movs	r2, #0
 8000c22:	4619      	mov	r1, r3
 8000c24:	f003 fad4 	bl	80041d0 <HAL_GPIO_WritePin>
	HAL_StatusTypeDef status = HAL_SPI_TransmitReceive(imu->hspi, tx, rx, 3, HAL_MAX_DELAY);
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	6818      	ldr	r0, [r3, #0]
 8000c2c:	f107 0210 	add.w	r2, r7, #16
 8000c30:	f107 0114 	add.w	r1, r7, #20
 8000c34:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000c38:	9300      	str	r3, [sp, #0]
 8000c3a:	2303      	movs	r3, #3
 8000c3c:	f006 fa57 	bl	80070ee <HAL_SPI_TransmitReceive>
 8000c40:	4603      	mov	r3, r0
 8000c42:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(imu->csAccelPinBank, imu->accelCSPin, GPIO_PIN_SET);
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	6858      	ldr	r0, [r3, #4]
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	899b      	ldrh	r3, [r3, #12]
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	4619      	mov	r1, r3
 8000c50:	f003 fabe 	bl	80041d0 <HAL_GPIO_WritePin>
	if (status == HAL_OK) {
 8000c54:	7dfb      	ldrb	r3, [r7, #23]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d103      	bne.n	8000c62 <accel_read_reg+0x6a>
		*data = rx[2];
 8000c5a:	7cba      	ldrb	r2, [r7, #18]
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	701a      	strb	r2, [r3, #0]
	} else {
		debug_print("Error: 0x%02X\r\n", status);
	}
}
 8000c60:	e004      	b.n	8000c6c <accel_read_reg+0x74>
		debug_print("Error: 0x%02X\r\n", status);
 8000c62:	7dfb      	ldrb	r3, [r7, #23]
 8000c64:	4619      	mov	r1, r3
 8000c66:	4803      	ldr	r0, [pc, #12]	@ (8000c74 <accel_read_reg+0x7c>)
 8000c68:	f001 fbf4 	bl	8002454 <debug_print>
}
 8000c6c:	bf00      	nop
 8000c6e:	3718      	adds	r7, #24
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	08012cf0 	.word	0x08012cf0

08000c78 <gyro_read_reg>:

void gyro_read_reg(BMI088 *imu, uint8_t regAddr, uint8_t *data) {
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b088      	sub	sp, #32
 8000c7c:	af02      	add	r7, sp, #8
 8000c7e:	60f8      	str	r0, [r7, #12]
 8000c80:	460b      	mov	r3, r1
 8000c82:	607a      	str	r2, [r7, #4]
 8000c84:	72fb      	strb	r3, [r7, #11]
	uint8_t tx[2] = {regAddr | 0x80, 0x00};
 8000c86:	7afb      	ldrb	r3, [r7, #11]
 8000c88:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	753b      	strb	r3, [r7, #20]
 8000c90:	2300      	movs	r3, #0
 8000c92:	757b      	strb	r3, [r7, #21]
	uint8_t rx[2];

	HAL_GPIO_WritePin(imu->csGyroPinBank, imu->gyroCSPin, GPIO_PIN_RESET);
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	6898      	ldr	r0, [r3, #8]
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	89db      	ldrh	r3, [r3, #14]
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	f003 fa96 	bl	80041d0 <HAL_GPIO_WritePin>
	HAL_StatusTypeDef status = HAL_SPI_TransmitReceive(imu->hspi, tx, rx, 2, HAL_MAX_DELAY);
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	6818      	ldr	r0, [r3, #0]
 8000ca8:	f107 0210 	add.w	r2, r7, #16
 8000cac:	f107 0114 	add.w	r1, r7, #20
 8000cb0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000cb4:	9300      	str	r3, [sp, #0]
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	f006 fa19 	bl	80070ee <HAL_SPI_TransmitReceive>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(imu->csGyroPinBank, imu->gyroCSPin, GPIO_PIN_SET);
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	6898      	ldr	r0, [r3, #8]
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	89db      	ldrh	r3, [r3, #14]
 8000cc8:	2201      	movs	r2, #1
 8000cca:	4619      	mov	r1, r3
 8000ccc:	f003 fa80 	bl	80041d0 <HAL_GPIO_WritePin>
	if (status == HAL_OK) {
 8000cd0:	7dfb      	ldrb	r3, [r7, #23]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d103      	bne.n	8000cde <gyro_read_reg+0x66>
		*data = rx[1];
 8000cd6:	7c7a      	ldrb	r2, [r7, #17]
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	701a      	strb	r2, [r3, #0]
	} else {
		debug_print("Error: 0x%02X\r\n", status);
	}
}
 8000cdc:	e004      	b.n	8000ce8 <gyro_read_reg+0x70>
		debug_print("Error: 0x%02X\r\n", status);
 8000cde:	7dfb      	ldrb	r3, [r7, #23]
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	4803      	ldr	r0, [pc, #12]	@ (8000cf0 <gyro_read_reg+0x78>)
 8000ce4:	f001 fbb6 	bl	8002454 <debug_print>
}
 8000ce8:	bf00      	nop
 8000cea:	3718      	adds	r7, #24
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	08012cf0 	.word	0x08012cf0

08000cf4 <accel_write_reg>:

void accel_write_reg(BMI088 *imu, uint8_t regAddr, uint8_t data) {
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
 8000cfc:	460b      	mov	r3, r1
 8000cfe:	70fb      	strb	r3, [r7, #3]
 8000d00:	4613      	mov	r3, r2
 8000d02:	70bb      	strb	r3, [r7, #2]
	uint8_t tx[2] = {regAddr, data};
 8000d04:	78fb      	ldrb	r3, [r7, #3]
 8000d06:	733b      	strb	r3, [r7, #12]
 8000d08:	78bb      	ldrb	r3, [r7, #2]
 8000d0a:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(imu->csAccelPinBank, imu->accelCSPin, GPIO_PIN_RESET);
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	6858      	ldr	r0, [r3, #4]
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	899b      	ldrh	r3, [r3, #12]
 8000d14:	2200      	movs	r2, #0
 8000d16:	4619      	mov	r1, r3
 8000d18:	f003 fa5a 	bl	80041d0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(imu->hspi, tx, 2, HAL_MAX_DELAY);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	6818      	ldr	r0, [r3, #0]
 8000d20:	f107 010c 	add.w	r1, r7, #12
 8000d24:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d28:	2202      	movs	r2, #2
 8000d2a:	f006 f86a 	bl	8006e02 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(imu->csAccelPinBank, imu->accelCSPin, GPIO_PIN_SET);
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	6858      	ldr	r0, [r3, #4]
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	899b      	ldrh	r3, [r3, #12]
 8000d36:	2201      	movs	r2, #1
 8000d38:	4619      	mov	r1, r3
 8000d3a:	f003 fa49 	bl	80041d0 <HAL_GPIO_WritePin>
}
 8000d3e:	bf00      	nop
 8000d40:	3710      	adds	r7, #16
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}

08000d46 <gyro_write_reg>:

void gyro_write_reg(BMI088 *imu, uint8_t regAddr, uint8_t data) {
 8000d46:	b580      	push	{r7, lr}
 8000d48:	b084      	sub	sp, #16
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	6078      	str	r0, [r7, #4]
 8000d4e:	460b      	mov	r3, r1
 8000d50:	70fb      	strb	r3, [r7, #3]
 8000d52:	4613      	mov	r3, r2
 8000d54:	70bb      	strb	r3, [r7, #2]
	uint8_t tx[2] = {regAddr, data};
 8000d56:	78fb      	ldrb	r3, [r7, #3]
 8000d58:	733b      	strb	r3, [r7, #12]
 8000d5a:	78bb      	ldrb	r3, [r7, #2]
 8000d5c:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(imu->csGyroPinBank, imu->gyroCSPin, GPIO_PIN_RESET);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	6898      	ldr	r0, [r3, #8]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	89db      	ldrh	r3, [r3, #14]
 8000d66:	2200      	movs	r2, #0
 8000d68:	4619      	mov	r1, r3
 8000d6a:	f003 fa31 	bl	80041d0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(imu->hspi, tx, 2, HAL_MAX_DELAY);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	6818      	ldr	r0, [r3, #0]
 8000d72:	f107 010c 	add.w	r1, r7, #12
 8000d76:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d7a:	2202      	movs	r2, #2
 8000d7c:	f006 f841 	bl	8006e02 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(imu->csGyroPinBank, imu->gyroCSPin, GPIO_PIN_SET);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	6898      	ldr	r0, [r3, #8]
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	89db      	ldrh	r3, [r3, #14]
 8000d88:	2201      	movs	r2, #1
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	f003 fa20 	bl	80041d0 <HAL_GPIO_WritePin>
}
 8000d90:	bf00      	nop
 8000d92:	3710      	adds	r7, #16
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <bmi088_init>:
void bmi088_init(BMI088 *imu,
		SPI_HandleTypeDef *spi,
		GPIO_TypeDef *csAccelPinBank,
		GPIO_TypeDef *csGyroPinBank,
		uint16_t accelCSPin,
		uint16_t gyroCSPin) {
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b088      	sub	sp, #32
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	60f8      	str	r0, [r7, #12]
 8000da0:	60b9      	str	r1, [r7, #8]
 8000da2:	607a      	str	r2, [r7, #4]
 8000da4:	603b      	str	r3, [r7, #0]

	imu->hspi = spi;
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	68ba      	ldr	r2, [r7, #8]
 8000daa:	601a      	str	r2, [r3, #0]
	imu->csAccelPinBank = csAccelPinBank;
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	687a      	ldr	r2, [r7, #4]
 8000db0:	605a      	str	r2, [r3, #4]
	imu->csGyroPinBank = csGyroPinBank;
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	683a      	ldr	r2, [r7, #0]
 8000db6:	609a      	str	r2, [r3, #8]

	imu->accelCSPin = accelCSPin;
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8000dbc:	819a      	strh	r2, [r3, #12]
	imu->gyroCSPin = gyroCSPin;
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8000dc2:	81da      	strh	r2, [r3, #14]

	float accel_multipilier = 1.0f/(1<<15) * (1<<(BMI088_ACC_24G_RANGE + 1)) * 1.5f;
 8000dc4:	f04f 5369 	mov.w	r3, #977272832	@ 0x3a400000
 8000dc8:	61fb      	str	r3, [r7, #28]
	imu->accelConversion = 9.80665f * accel_multipilier; // data sheet page 27
 8000dca:	edd7 7a07 	vldr	s15, [r7, #28]
 8000dce:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 8000f80 <bmi088_init+0x1e8>
 8000dd2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
	imu->gyroConversion = 0.01745329251f * 1000.0f / 16384.0f; // data sheet page 39 (rad/s)
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	4a69      	ldr	r2, [pc, #420]	@ (8000f84 <bmi088_init+0x1ec>)
 8000de0:	62da      	str	r2, [r3, #44]	@ 0x2c

	// accel setup
	HAL_GPIO_WritePin(imu->csAccelPinBank, imu->accelCSPin, GPIO_PIN_RESET);
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	6858      	ldr	r0, [r3, #4]
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	899b      	ldrh	r3, [r3, #12]
 8000dea:	2200      	movs	r2, #0
 8000dec:	4619      	mov	r1, r3
 8000dee:	f003 f9ef 	bl	80041d0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000df2:	2001      	movs	r0, #1
 8000df4:	f002 fcc4 	bl	8003780 <HAL_Delay>
	HAL_GPIO_WritePin(imu->csAccelPinBank, imu->accelCSPin, GPIO_PIN_SET);
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	6858      	ldr	r0, [r3, #4]
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	899b      	ldrh	r3, [r3, #12]
 8000e00:	2201      	movs	r2, #1
 8000e02:	4619      	mov	r1, r3
 8000e04:	f003 f9e4 	bl	80041d0 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8000e08:	2032      	movs	r0, #50	@ 0x32
 8000e0a:	f002 fcb9 	bl	8003780 <HAL_Delay>

	//soft reset the accelerometer
	accel_write_reg(imu, BMI088_ACC_REG_SOFTRESET, 0xB6);
 8000e0e:	22b6      	movs	r2, #182	@ 0xb6
 8000e10:	217e      	movs	r1, #126	@ 0x7e
 8000e12:	68f8      	ldr	r0, [r7, #12]
 8000e14:	f7ff ff6e 	bl	8000cf4 <accel_write_reg>
	HAL_Delay(50);
 8000e18:	2032      	movs	r0, #50	@ 0x32
 8000e1a:	f002 fcb1 	bl	8003780 <HAL_Delay>

	uint8_t dummy;
	accel_read_reg(imu, BMI088_ACC_REG_CHIP_ID, &dummy);
 8000e1e:	f107 031b 	add.w	r3, r7, #27
 8000e22:	461a      	mov	r2, r3
 8000e24:	2100      	movs	r1, #0
 8000e26:	68f8      	ldr	r0, [r7, #12]
 8000e28:	f7ff fee6 	bl	8000bf8 <accel_read_reg>

	uint8_t chipID;
	accel_read_reg(imu, BMI088_ACC_REG_CHIP_ID, &chipID);
 8000e2c:	f107 031a 	add.w	r3, r7, #26
 8000e30:	461a      	mov	r2, r3
 8000e32:	2100      	movs	r1, #0
 8000e34:	68f8      	ldr	r0, [r7, #12]
 8000e36:	f7ff fedf 	bl	8000bf8 <accel_read_reg>
	if (chipID != 0x1E) {
 8000e3a:	7ebb      	ldrb	r3, [r7, #26]
 8000e3c:	2b1e      	cmp	r3, #30
 8000e3e:	d004      	beq.n	8000e4a <bmi088_init+0xb2>
		debug_print("Chip ID Reg Address: 0x%02X\r\n", chipID);
 8000e40:	7ebb      	ldrb	r3, [r7, #26]
 8000e42:	4619      	mov	r1, r3
 8000e44:	4850      	ldr	r0, [pc, #320]	@ (8000f88 <bmi088_init+0x1f0>)
 8000e46:	f001 fb05 	bl	8002454 <debug_print>
	}
	HAL_Delay(10);
 8000e4a:	200a      	movs	r0, #10
 8000e4c:	f002 fc98 	bl	8003780 <HAL_Delay>

	gyro_read_reg(imu, BMI088_GYR_REG_CHIP_ID, &chipID);
 8000e50:	f107 031a 	add.w	r3, r7, #26
 8000e54:	461a      	mov	r2, r3
 8000e56:	2100      	movs	r1, #0
 8000e58:	68f8      	ldr	r0, [r7, #12]
 8000e5a:	f7ff ff0d 	bl	8000c78 <gyro_read_reg>
	if (chipID != 0x0F) {
 8000e5e:	7ebb      	ldrb	r3, [r7, #26]
 8000e60:	2b0f      	cmp	r3, #15
 8000e62:	d004      	beq.n	8000e6e <bmi088_init+0xd6>
		debug_print("fuck fuck 0x%02X\r\n", chipID);
 8000e64:	7ebb      	ldrb	r3, [r7, #26]
 8000e66:	4619      	mov	r1, r3
 8000e68:	4848      	ldr	r0, [pc, #288]	@ (8000f8c <bmi088_init+0x1f4>)
 8000e6a:	f001 faf3 	bl	8002454 <debug_print>
	}
	HAL_Delay(10);
 8000e6e:	200a      	movs	r0, #10
 8000e70:	f002 fc86 	bl	8003780 <HAL_Delay>

	accel_write_reg(imu, BMI088_ACC_REG_PWR_CONF, 0x00);
 8000e74:	2200      	movs	r2, #0
 8000e76:	217c      	movs	r1, #124	@ 0x7c
 8000e78:	68f8      	ldr	r0, [r7, #12]
 8000e7a:	f7ff ff3b 	bl	8000cf4 <accel_write_reg>
	HAL_Delay(10);
 8000e7e:	200a      	movs	r0, #10
 8000e80:	f002 fc7e 	bl	8003780 <HAL_Delay>

	accel_write_reg(imu, BMI088_ACC_REG_RANGE, BMI088_ACC_24G_RANGE);
 8000e84:	2203      	movs	r2, #3
 8000e86:	2141      	movs	r1, #65	@ 0x41
 8000e88:	68f8      	ldr	r0, [r7, #12]
 8000e8a:	f7ff ff33 	bl	8000cf4 <accel_write_reg>
	HAL_Delay(10);
 8000e8e:	200a      	movs	r0, #10
 8000e90:	f002 fc76 	bl	8003780 <HAL_Delay>

	accel_write_reg(imu, BMI088_ACC_REG_CONF, BMI088_ACC_ODR_200Hz | BMI088_ACC_BWP_OSR4);
 8000e94:	2289      	movs	r2, #137	@ 0x89
 8000e96:	2140      	movs	r1, #64	@ 0x40
 8000e98:	68f8      	ldr	r0, [r7, #12]
 8000e9a:	f7ff ff2b 	bl	8000cf4 <accel_write_reg>
	HAL_Delay(10);
 8000e9e:	200a      	movs	r0, #10
 8000ea0:	f002 fc6e 	bl	8003780 <HAL_Delay>


	accel_write_reg(imu, BMI088_ACC_REG_PWR_CTRL, 0x04);
 8000ea4:	2204      	movs	r2, #4
 8000ea6:	217d      	movs	r1, #125	@ 0x7d
 8000ea8:	68f8      	ldr	r0, [r7, #12]
 8000eaa:	f7ff ff23 	bl	8000cf4 <accel_write_reg>
	HAL_Delay(10);
 8000eae:	200a      	movs	r0, #10
 8000eb0:	f002 fc66 	bl	8003780 <HAL_Delay>

	uint8_t range;
	accel_read_reg(imu, BMI088_ACC_REG_RANGE, &range);
 8000eb4:	f107 0319 	add.w	r3, r7, #25
 8000eb8:	461a      	mov	r2, r3
 8000eba:	2141      	movs	r1, #65	@ 0x41
 8000ebc:	68f8      	ldr	r0, [r7, #12]
 8000ebe:	f7ff fe9b 	bl	8000bf8 <accel_read_reg>
	if ((range & 0x03) != BMI088_ACC_24G_RANGE) {
 8000ec2:	7e7b      	ldrb	r3, [r7, #25]
 8000ec4:	f003 0303 	and.w	r3, r3, #3
 8000ec8:	2b03      	cmp	r3, #3
 8000eca:	d005      	beq.n	8000ed8 <bmi088_init+0x140>
		debug_print("Wrong accel range set! 0x%02X\r\n", range);
 8000ecc:	7e7b      	ldrb	r3, [r7, #25]
 8000ece:	4619      	mov	r1, r3
 8000ed0:	482f      	ldr	r0, [pc, #188]	@ (8000f90 <bmi088_init+0x1f8>)
 8000ed2:	f001 fabf 	bl	8002454 <debug_print>
 8000ed6:	e004      	b.n	8000ee2 <bmi088_init+0x14a>
	} else {
		debug_print("Correct accel range set! 0x%02X\r\n", range);
 8000ed8:	7e7b      	ldrb	r3, [r7, #25]
 8000eda:	4619      	mov	r1, r3
 8000edc:	482d      	ldr	r0, [pc, #180]	@ (8000f94 <bmi088_init+0x1fc>)
 8000ede:	f001 fab9 	bl	8002454 <debug_print>
	}

	uint8_t sampling;
	accel_read_reg(imu, BMI088_ACC_REG_CONF, &sampling);
 8000ee2:	f107 0318 	add.w	r3, r7, #24
 8000ee6:	461a      	mov	r2, r3
 8000ee8:	2140      	movs	r1, #64	@ 0x40
 8000eea:	68f8      	ldr	r0, [r7, #12]
 8000eec:	f7ff fe84 	bl	8000bf8 <accel_read_reg>
	if (sampling != (BMI088_ACC_ODR_200Hz | BMI088_ACC_BWP_OSR4)) {
 8000ef0:	7e3b      	ldrb	r3, [r7, #24]
 8000ef2:	2b89      	cmp	r3, #137	@ 0x89
 8000ef4:	d005      	beq.n	8000f02 <bmi088_init+0x16a>
		debug_print("Wrong accel sampling set! 0x%02X\r\n", sampling);
 8000ef6:	7e3b      	ldrb	r3, [r7, #24]
 8000ef8:	4619      	mov	r1, r3
 8000efa:	4827      	ldr	r0, [pc, #156]	@ (8000f98 <bmi088_init+0x200>)
 8000efc:	f001 faaa 	bl	8002454 <debug_print>
 8000f00:	e004      	b.n	8000f0c <bmi088_init+0x174>
	} else {
		debug_print("Correct accel sampling set! 0x%02X\r\n", sampling);
 8000f02:	7e3b      	ldrb	r3, [r7, #24]
 8000f04:	4619      	mov	r1, r3
 8000f06:	4825      	ldr	r0, [pc, #148]	@ (8000f9c <bmi088_init+0x204>)
 8000f08:	f001 faa4 	bl	8002454 <debug_print>
	}

	uint8_t isOn;
	accel_read_reg(imu, BMI088_ACC_REG_PWR_CTRL, &isOn);
 8000f0c:	f107 0317 	add.w	r3, r7, #23
 8000f10:	461a      	mov	r2, r3
 8000f12:	217d      	movs	r1, #125	@ 0x7d
 8000f14:	68f8      	ldr	r0, [r7, #12]
 8000f16:	f7ff fe6f 	bl	8000bf8 <accel_read_reg>
	if (isOn != 0x04) {
 8000f1a:	7dfb      	ldrb	r3, [r7, #23]
 8000f1c:	2b04      	cmp	r3, #4
 8000f1e:	d005      	beq.n	8000f2c <bmi088_init+0x194>
		debug_print("Accel not turned on! 0x%02X\r\n", isOn);
 8000f20:	7dfb      	ldrb	r3, [r7, #23]
 8000f22:	4619      	mov	r1, r3
 8000f24:	481e      	ldr	r0, [pc, #120]	@ (8000fa0 <bmi088_init+0x208>)
 8000f26:	f001 fa95 	bl	8002454 <debug_print>
 8000f2a:	e004      	b.n	8000f36 <bmi088_init+0x19e>
	} else {
		debug_print("Accel turned on! 0x%02X\r\n", isOn);
 8000f2c:	7dfb      	ldrb	r3, [r7, #23]
 8000f2e:	4619      	mov	r1, r3
 8000f30:	481c      	ldr	r0, [pc, #112]	@ (8000fa4 <bmi088_init+0x20c>)
 8000f32:	f001 fa8f 	bl	8002454 <debug_print>
	}

	// gyro setup
	HAL_GPIO_WritePin(imu->csGyroPinBank, imu->gyroCSPin, GPIO_PIN_SET);
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	6898      	ldr	r0, [r3, #8]
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	89db      	ldrh	r3, [r3, #14]
 8000f3e:	2201      	movs	r2, #1
 8000f40:	4619      	mov	r1, r3
 8000f42:	f003 f945 	bl	80041d0 <HAL_GPIO_WritePin>

	gyro_write_reg(imu, BMI088_GYR_REG_SOFTRESET, 0xB6);
 8000f46:	22b6      	movs	r2, #182	@ 0xb6
 8000f48:	2114      	movs	r1, #20
 8000f4a:	68f8      	ldr	r0, [r7, #12]
 8000f4c:	f7ff fefb 	bl	8000d46 <gyro_write_reg>
	HAL_Delay(250);
 8000f50:	20fa      	movs	r0, #250	@ 0xfa
 8000f52:	f002 fc15 	bl	8003780 <HAL_Delay>

	gyro_write_reg(imu, BMI088_GYR_REG_RANGE, BMI088_GYR_2000DPS_RANGE);
 8000f56:	2200      	movs	r2, #0
 8000f58:	210f      	movs	r1, #15
 8000f5a:	68f8      	ldr	r0, [r7, #12]
 8000f5c:	f7ff fef3 	bl	8000d46 <gyro_write_reg>
	HAL_Delay(10);
 8000f60:	200a      	movs	r0, #10
 8000f62:	f002 fc0d 	bl	8003780 <HAL_Delay>

	gyro_write_reg(imu, BMI088_GYR_REG_BANDWIDTH, BMI088_GYR_ODR_100Hz_BW_32Hz);
 8000f66:	2207      	movs	r2, #7
 8000f68:	2110      	movs	r1, #16
 8000f6a:	68f8      	ldr	r0, [r7, #12]
 8000f6c:	f7ff feeb 	bl	8000d46 <gyro_write_reg>
	HAL_Delay(10);
 8000f70:	200a      	movs	r0, #10
 8000f72:	f002 fc05 	bl	8003780 <HAL_Delay>
}
 8000f76:	bf00      	nop
 8000f78:	3720      	adds	r7, #32
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	411ce80a 	.word	0x411ce80a
 8000f84:	3a8ba058 	.word	0x3a8ba058
 8000f88:	08012d00 	.word	0x08012d00
 8000f8c:	08012d20 	.word	0x08012d20
 8000f90:	08012d34 	.word	0x08012d34
 8000f94:	08012d54 	.word	0x08012d54
 8000f98:	08012d78 	.word	0x08012d78
 8000f9c:	08012d9c 	.word	0x08012d9c
 8000fa0:	08012dc4 	.word	0x08012dc4
 8000fa4:	08012de4 	.word	0x08012de4

08000fa8 <accel_step>:

void accel_step(BMI088 *imu) {
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b08a      	sub	sp, #40	@ 0x28
 8000fac:	af02      	add	r7, sp, #8
 8000fae:	6078      	str	r0, [r7, #4]
	uint8_t tx[8] = {(BMI088_ACC_REG_DATA | 0x80), 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8000fb0:	4a32      	ldr	r2, [pc, #200]	@ (800107c <accel_step+0xd4>)
 8000fb2:	f107 0310 	add.w	r3, r7, #16
 8000fb6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fba:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t rx[8];

	HAL_GPIO_WritePin(imu->csAccelPinBank, imu->accelCSPin, GPIO_PIN_RESET);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6858      	ldr	r0, [r3, #4]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	899b      	ldrh	r3, [r3, #12]
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	4619      	mov	r1, r3
 8000fca:	f003 f901 	bl	80041d0 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(imu->hspi, tx, rx, 8, HAL_MAX_DELAY);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6818      	ldr	r0, [r3, #0]
 8000fd2:	f107 0208 	add.w	r2, r7, #8
 8000fd6:	f107 0110 	add.w	r1, r7, #16
 8000fda:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000fde:	9300      	str	r3, [sp, #0]
 8000fe0:	2308      	movs	r3, #8
 8000fe2:	f006 f884 	bl	80070ee <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(imu->csAccelPinBank, imu->accelCSPin, GPIO_PIN_SET);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6858      	ldr	r0, [r3, #4]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	899b      	ldrh	r3, [r3, #12]
 8000fee:	2201      	movs	r2, #1
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	f003 f8ed 	bl	80041d0 <HAL_GPIO_WritePin>

	int16_t raw_x = (int16_t) ((rx[3] << 8) | rx[2]);
 8000ff6:	7afb      	ldrb	r3, [r7, #11]
 8000ff8:	021b      	lsls	r3, r3, #8
 8000ffa:	b21a      	sxth	r2, r3
 8000ffc:	7abb      	ldrb	r3, [r7, #10]
 8000ffe:	b21b      	sxth	r3, r3
 8001000:	4313      	orrs	r3, r2
 8001002:	83fb      	strh	r3, [r7, #30]
	int16_t raw_y = (int16_t) ((rx[5] << 8) | rx[4]);
 8001004:	7b7b      	ldrb	r3, [r7, #13]
 8001006:	021b      	lsls	r3, r3, #8
 8001008:	b21a      	sxth	r2, r3
 800100a:	7b3b      	ldrb	r3, [r7, #12]
 800100c:	b21b      	sxth	r3, r3
 800100e:	4313      	orrs	r3, r2
 8001010:	83bb      	strh	r3, [r7, #28]
	int16_t raw_z = (int16_t) ((rx[7] << 8) | rx[6]);
 8001012:	7bfb      	ldrb	r3, [r7, #15]
 8001014:	021b      	lsls	r3, r3, #8
 8001016:	b21a      	sxth	r2, r3
 8001018:	7bbb      	ldrb	r3, [r7, #14]
 800101a:	b21b      	sxth	r3, r3
 800101c:	4313      	orrs	r3, r2
 800101e:	837b      	strh	r3, [r7, #26]

	imu->lastAccel[0] = raw_x * imu->accelConversion;
 8001020:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001024:	ee07 3a90 	vmov	s15, r3
 8001028:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001032:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	edc3 7a04 	vstr	s15, [r3, #16]
	imu->lastAccel[1] = raw_y * imu->accelConversion;
 800103c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001040:	ee07 3a90 	vmov	s15, r3
 8001044:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800104e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	edc3 7a05 	vstr	s15, [r3, #20]
	imu->lastAccel[2] = raw_z * imu->accelConversion;
 8001058:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800105c:	ee07 3a90 	vmov	s15, r3
 8001060:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800106a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	edc3 7a06 	vstr	s15, [r3, #24]
}
 8001074:	bf00      	nop
 8001076:	3720      	adds	r7, #32
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	08012e00 	.word	0x08012e00

08001080 <gyro_step>:

void gyro_step(BMI088 *imu) {
 8001080:	b580      	push	{r7, lr}
 8001082:	b08a      	sub	sp, #40	@ 0x28
 8001084:	af02      	add	r7, sp, #8
 8001086:	6078      	str	r0, [r7, #4]
	uint8_t tx[7] = {(BMI088_GYR_REG_DATA | 0x80), 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8001088:	4a34      	ldr	r2, [pc, #208]	@ (800115c <gyro_step+0xdc>)
 800108a:	f107 0310 	add.w	r3, r7, #16
 800108e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001092:	6018      	str	r0, [r3, #0]
 8001094:	3304      	adds	r3, #4
 8001096:	8019      	strh	r1, [r3, #0]
 8001098:	3302      	adds	r3, #2
 800109a:	0c0a      	lsrs	r2, r1, #16
 800109c:	701a      	strb	r2, [r3, #0]
	uint8_t rx[7];

	HAL_GPIO_WritePin(imu->csGyroPinBank, imu->gyroCSPin, GPIO_PIN_RESET);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6898      	ldr	r0, [r3, #8]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	89db      	ldrh	r3, [r3, #14]
 80010a6:	2200      	movs	r2, #0
 80010a8:	4619      	mov	r1, r3
 80010aa:	f003 f891 	bl	80041d0 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(imu->hspi, tx, rx, 7, HAL_MAX_DELAY);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6818      	ldr	r0, [r3, #0]
 80010b2:	f107 0208 	add.w	r2, r7, #8
 80010b6:	f107 0110 	add.w	r1, r7, #16
 80010ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80010be:	9300      	str	r3, [sp, #0]
 80010c0:	2307      	movs	r3, #7
 80010c2:	f006 f814 	bl	80070ee <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(imu->csGyroPinBank, imu->gyroCSPin, GPIO_PIN_SET);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6898      	ldr	r0, [r3, #8]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	89db      	ldrh	r3, [r3, #14]
 80010ce:	2201      	movs	r2, #1
 80010d0:	4619      	mov	r1, r3
 80010d2:	f003 f87d 	bl	80041d0 <HAL_GPIO_WritePin>

	int16_t raw_x = (int16_t) ((rx[2] << 8) | rx[1]);
 80010d6:	7abb      	ldrb	r3, [r7, #10]
 80010d8:	021b      	lsls	r3, r3, #8
 80010da:	b21a      	sxth	r2, r3
 80010dc:	7a7b      	ldrb	r3, [r7, #9]
 80010de:	b21b      	sxth	r3, r3
 80010e0:	4313      	orrs	r3, r2
 80010e2:	83fb      	strh	r3, [r7, #30]
	int16_t raw_y = (int16_t) ((rx[4] << 8) | rx[3]);
 80010e4:	7b3b      	ldrb	r3, [r7, #12]
 80010e6:	021b      	lsls	r3, r3, #8
 80010e8:	b21a      	sxth	r2, r3
 80010ea:	7afb      	ldrb	r3, [r7, #11]
 80010ec:	b21b      	sxth	r3, r3
 80010ee:	4313      	orrs	r3, r2
 80010f0:	83bb      	strh	r3, [r7, #28]
	int16_t raw_z = (int16_t) ((rx[6] << 8) | rx[5]);
 80010f2:	7bbb      	ldrb	r3, [r7, #14]
 80010f4:	021b      	lsls	r3, r3, #8
 80010f6:	b21a      	sxth	r2, r3
 80010f8:	7b7b      	ldrb	r3, [r7, #13]
 80010fa:	b21b      	sxth	r3, r3
 80010fc:	4313      	orrs	r3, r2
 80010fe:	837b      	strh	r3, [r7, #26]

	imu->lastGyro[0] = raw_x * imu->gyroConversion;
 8001100:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001104:	ee07 3a90 	vmov	s15, r3
 8001108:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001112:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	edc3 7a07 	vstr	s15, [r3, #28]
	imu->lastGyro[1] = raw_y * imu->gyroConversion;
 800111c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001120:	ee07 3a90 	vmov	s15, r3
 8001124:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800112e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	edc3 7a08 	vstr	s15, [r3, #32]
	imu->lastGyro[2] = raw_z * imu->gyroConversion;
 8001138:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800113c:	ee07 3a90 	vmov	s15, r3
 8001140:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800114a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
}
 8001154:	bf00      	nop
 8001156:	3720      	adds	r7, #32
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	08012e08 	.word	0x08012e08

08001160 <accel_get>:

float *accel_get(BMI088 *imu) {
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
	return imu->lastAccel;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	3310      	adds	r3, #16
}
 800116c:	4618      	mov	r0, r3
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr

08001178 <gyro_get>:

float *gyro_get(BMI088 *imu) {
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
	return imu->lastGyro;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	331c      	adds	r3, #28
}
 8001184:	4618      	mov	r0, r3
 8001186:	370c      	adds	r7, #12
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr

08001190 <bmp_read_reg>:
#define BMP390_STATUS_DRDY_PRES (1 << 5) // Data ready pressure bit
#define BMP390_STATUS_DRDY_TEMP (1 << 6) // Data ready temperature bit
#define BMP390_SPI_TIMEOUT      (100)


static bool bmp_read_reg(BMP390 *baro, uint8_t reg, uint8_t *data) {
 8001190:	b580      	push	{r7, lr}
 8001192:	b088      	sub	sp, #32
 8001194:	af02      	add	r7, sp, #8
 8001196:	60f8      	str	r0, [r7, #12]
 8001198:	460b      	mov	r3, r1
 800119a:	607a      	str	r2, [r7, #4]
 800119c:	72fb      	strb	r3, [r7, #11]
    uint8_t tx[3] = { reg | 0x80, 0x00, 0x00 };
 800119e:	7afb      	ldrb	r3, [r7, #11]
 80011a0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	753b      	strb	r3, [r7, #20]
 80011a8:	2300      	movs	r3, #0
 80011aa:	757b      	strb	r3, [r7, #21]
 80011ac:	2300      	movs	r3, #0
 80011ae:	75bb      	strb	r3, [r7, #22]
    uint8_t rx[3] = {0};
 80011b0:	4b1a      	ldr	r3, [pc, #104]	@ (800121c <bmp_read_reg+0x8c>)
 80011b2:	881b      	ldrh	r3, [r3, #0]
 80011b4:	823b      	strh	r3, [r7, #16]
 80011b6:	2300      	movs	r3, #0
 80011b8:	74bb      	strb	r3, [r7, #18]
    HAL_StatusTypeDef status;

    HAL_GPIO_WritePin(baro->csPort, baro->csPin, GPIO_PIN_RESET);
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	6858      	ldr	r0, [r3, #4]
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	891b      	ldrh	r3, [r3, #8]
 80011c2:	2200      	movs	r2, #0
 80011c4:	4619      	mov	r1, r3
 80011c6:	f003 f803 	bl	80041d0 <HAL_GPIO_WritePin>
    status = HAL_SPI_TransmitReceive(baro->hspi, tx, rx, 3, BMP390_SPI_TIMEOUT);
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	6818      	ldr	r0, [r3, #0]
 80011ce:	f107 0210 	add.w	r2, r7, #16
 80011d2:	f107 0114 	add.w	r1, r7, #20
 80011d6:	2364      	movs	r3, #100	@ 0x64
 80011d8:	9300      	str	r3, [sp, #0]
 80011da:	2303      	movs	r3, #3
 80011dc:	f005 ff87 	bl	80070ee <HAL_SPI_TransmitReceive>
 80011e0:	4603      	mov	r3, r0
 80011e2:	75fb      	strb	r3, [r7, #23]
    HAL_GPIO_WritePin(baro->csPort, baro->csPin, GPIO_PIN_SET);
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	6858      	ldr	r0, [r3, #4]
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	891b      	ldrh	r3, [r3, #8]
 80011ec:	2201      	movs	r2, #1
 80011ee:	4619      	mov	r1, r3
 80011f0:	f002 ffee 	bl	80041d0 <HAL_GPIO_WritePin>

    if (status != HAL_OK) {
 80011f4:	7dfb      	ldrb	r3, [r7, #23]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d007      	beq.n	800120a <bmp_read_reg+0x7a>
        debug_print("BMP390 SPI Error (Read Reg 0x%02X): %d\r\n", reg, status);
 80011fa:	7afb      	ldrb	r3, [r7, #11]
 80011fc:	7dfa      	ldrb	r2, [r7, #23]
 80011fe:	4619      	mov	r1, r3
 8001200:	4807      	ldr	r0, [pc, #28]	@ (8001220 <bmp_read_reg+0x90>)
 8001202:	f001 f927 	bl	8002454 <debug_print>
        return false;
 8001206:	2300      	movs	r3, #0
 8001208:	e003      	b.n	8001212 <bmp_read_reg+0x82>
    }

    *data = rx[2];
 800120a:	7cba      	ldrb	r2, [r7, #18]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	701a      	strb	r2, [r3, #0]
    return true;
 8001210:	2301      	movs	r3, #1
}
 8001212:	4618      	mov	r0, r3
 8001214:	3718      	adds	r7, #24
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	08012e3c 	.word	0x08012e3c
 8001220:	08012e10 	.word	0x08012e10

08001224 <bmp_write_reg>:

static bool bmp_write_reg(BMP390 *baro, uint8_t reg, uint8_t data) {
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	460b      	mov	r3, r1
 800122e:	70fb      	strb	r3, [r7, #3]
 8001230:	4613      	mov	r3, r2
 8001232:	70bb      	strb	r3, [r7, #2]
    uint8_t tx[2] = { reg & ~0x80, data };
 8001234:	78fb      	ldrb	r3, [r7, #3]
 8001236:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800123a:	b2db      	uxtb	r3, r3
 800123c:	733b      	strb	r3, [r7, #12]
 800123e:	78bb      	ldrb	r3, [r7, #2]
 8001240:	737b      	strb	r3, [r7, #13]
    HAL_StatusTypeDef status;

    HAL_GPIO_WritePin(baro->csPort, baro->csPin, GPIO_PIN_RESET);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6858      	ldr	r0, [r3, #4]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	891b      	ldrh	r3, [r3, #8]
 800124a:	2200      	movs	r2, #0
 800124c:	4619      	mov	r1, r3
 800124e:	f002 ffbf 	bl	80041d0 <HAL_GPIO_WritePin>
    status = HAL_SPI_Transmit(baro->hspi, tx, 2, BMP390_SPI_TIMEOUT);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6818      	ldr	r0, [r3, #0]
 8001256:	f107 010c 	add.w	r1, r7, #12
 800125a:	2364      	movs	r3, #100	@ 0x64
 800125c:	2202      	movs	r2, #2
 800125e:	f005 fdd0 	bl	8006e02 <HAL_SPI_Transmit>
 8001262:	4603      	mov	r3, r0
 8001264:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(baro->csPort, baro->csPin, GPIO_PIN_SET);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6858      	ldr	r0, [r3, #4]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	891b      	ldrh	r3, [r3, #8]
 800126e:	2201      	movs	r2, #1
 8001270:	4619      	mov	r1, r3
 8001272:	f002 ffad 	bl	80041d0 <HAL_GPIO_WritePin>

    if (status != HAL_OK) {
 8001276:	7bfb      	ldrb	r3, [r7, #15]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d007      	beq.n	800128c <bmp_write_reg+0x68>
        debug_print("BMP390 SPI Error (Write Reg 0x%02X): %d\r\n", reg, status);
 800127c:	78fb      	ldrb	r3, [r7, #3]
 800127e:	7bfa      	ldrb	r2, [r7, #15]
 8001280:	4619      	mov	r1, r3
 8001282:	4805      	ldr	r0, [pc, #20]	@ (8001298 <bmp_write_reg+0x74>)
 8001284:	f001 f8e6 	bl	8002454 <debug_print>
        return false;
 8001288:	2300      	movs	r3, #0
 800128a:	e000      	b.n	800128e <bmp_write_reg+0x6a>
    }
    return true;
 800128c:	2301      	movs	r3, #1
}
 800128e:	4618      	mov	r0, r3
 8001290:	3710      	adds	r7, #16
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	08012e40 	.word	0x08012e40

0800129c <bmp_read_buf>:

static bool bmp_read_buf(BMP390 *baro, uint8_t reg, uint8_t *data, uint8_t len) {
 800129c:	b590      	push	{r4, r7, lr}
 800129e:	b099      	sub	sp, #100	@ 0x64
 80012a0:	af02      	add	r7, sp, #8
 80012a2:	60f8      	str	r0, [r7, #12]
 80012a4:	607a      	str	r2, [r7, #4]
 80012a6:	461a      	mov	r2, r3
 80012a8:	460b      	mov	r3, r1
 80012aa:	72fb      	strb	r3, [r7, #11]
 80012ac:	4613      	mov	r3, r2
 80012ae:	72bb      	strb	r3, [r7, #10]
    if (len == 0) return true;
 80012b0:	7abb      	ldrb	r3, [r7, #10]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d101      	bne.n	80012ba <bmp_read_buf+0x1e>
 80012b6:	2301      	movs	r3, #1
 80012b8:	e061      	b.n	800137e <bmp_read_buf+0xe2>

    #define MAX_SPI_BUF_LEN 32
    if (len > MAX_SPI_BUF_LEN - 2) {
 80012ba:	7abb      	ldrb	r3, [r7, #10]
 80012bc:	2b1e      	cmp	r3, #30
 80012be:	d906      	bls.n	80012ce <bmp_read_buf+0x32>
         debug_print("BMP390 Read Buf Error: len %d too large\r\n", len);
 80012c0:	7abb      	ldrb	r3, [r7, #10]
 80012c2:	4619      	mov	r1, r3
 80012c4:	4830      	ldr	r0, [pc, #192]	@ (8001388 <bmp_read_buf+0xec>)
 80012c6:	f001 f8c5 	bl	8002454 <debug_print>
         return false;
 80012ca:	2300      	movs	r3, #0
 80012cc:	e057      	b.n	800137e <bmp_read_buf+0xe2>
    }

    uint8_t total = 2 + len;
 80012ce:	7abb      	ldrb	r3, [r7, #10]
 80012d0:	3302      	adds	r3, #2
 80012d2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    uint8_t tx[MAX_SPI_BUF_LEN] = {0};
 80012d6:	2300      	movs	r3, #0
 80012d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80012da:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80012de:	2200      	movs	r2, #0
 80012e0:	601a      	str	r2, [r3, #0]
 80012e2:	605a      	str	r2, [r3, #4]
 80012e4:	609a      	str	r2, [r3, #8]
 80012e6:	60da      	str	r2, [r3, #12]
 80012e8:	611a      	str	r2, [r3, #16]
 80012ea:	615a      	str	r2, [r3, #20]
 80012ec:	619a      	str	r2, [r3, #24]
    uint8_t rx[MAX_SPI_BUF_LEN] = {0};
 80012ee:	2300      	movs	r3, #0
 80012f0:	617b      	str	r3, [r7, #20]
 80012f2:	f107 0318 	add.w	r3, r7, #24
 80012f6:	2200      	movs	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]
 80012fa:	605a      	str	r2, [r3, #4]
 80012fc:	609a      	str	r2, [r3, #8]
 80012fe:	60da      	str	r2, [r3, #12]
 8001300:	611a      	str	r2, [r3, #16]
 8001302:	615a      	str	r2, [r3, #20]
 8001304:	619a      	str	r2, [r3, #24]
    HAL_StatusTypeDef status;

    tx[0] = reg | 0x80;
 8001306:	7afb      	ldrb	r3, [r7, #11]
 8001308:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800130c:	b2db      	uxtb	r3, r3
 800130e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    HAL_GPIO_WritePin(baro->csPort, baro->csPin, GPIO_PIN_RESET);
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	6858      	ldr	r0, [r3, #4]
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	891b      	ldrh	r3, [r3, #8]
 800131a:	2200      	movs	r2, #0
 800131c:	4619      	mov	r1, r3
 800131e:	f002 ff57 	bl	80041d0 <HAL_GPIO_WritePin>
    status = HAL_SPI_TransmitReceive(baro->hspi, tx, rx, total, BMP390_SPI_TIMEOUT);
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	6818      	ldr	r0, [r3, #0]
 8001326:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800132a:	b29b      	uxth	r3, r3
 800132c:	f107 0214 	add.w	r2, r7, #20
 8001330:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8001334:	2464      	movs	r4, #100	@ 0x64
 8001336:	9400      	str	r4, [sp, #0]
 8001338:	f005 fed9 	bl	80070ee <HAL_SPI_TransmitReceive>
 800133c:	4603      	mov	r3, r0
 800133e:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
    HAL_GPIO_WritePin(baro->csPort, baro->csPin, GPIO_PIN_SET);
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	6858      	ldr	r0, [r3, #4]
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	891b      	ldrh	r3, [r3, #8]
 800134a:	2201      	movs	r2, #1
 800134c:	4619      	mov	r1, r3
 800134e:	f002 ff3f 	bl	80041d0 <HAL_GPIO_WritePin>

    if (status != HAL_OK) {
 8001352:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8001356:	2b00      	cmp	r3, #0
 8001358:	d008      	beq.n	800136c <bmp_read_buf+0xd0>
        debug_print("BMP390 SPI Error (Read Buf 0x%02X, len %d): %d\r\n", reg, len, status);
 800135a:	7af9      	ldrb	r1, [r7, #11]
 800135c:	7aba      	ldrb	r2, [r7, #10]
 800135e:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8001362:	480a      	ldr	r0, [pc, #40]	@ (800138c <bmp_read_buf+0xf0>)
 8001364:	f001 f876 	bl	8002454 <debug_print>
        return false;
 8001368:	2300      	movs	r3, #0
 800136a:	e008      	b.n	800137e <bmp_read_buf+0xe2>
    }

    memcpy(data, rx + 2, len);
 800136c:	f107 0314 	add.w	r3, r7, #20
 8001370:	3302      	adds	r3, #2
 8001372:	7aba      	ldrb	r2, [r7, #10]
 8001374:	4619      	mov	r1, r3
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	f00e fff3 	bl	8010362 <memcpy>
    return true;
 800137c:	2301      	movs	r3, #1
}
 800137e:	4618      	mov	r0, r3
 8001380:	375c      	adds	r7, #92	@ 0x5c
 8001382:	46bd      	mov	sp, r7
 8001384:	bd90      	pop	{r4, r7, pc}
 8001386:	bf00      	nop
 8001388:	08012e6c 	.word	0x08012e6c
 800138c:	08012e98 	.word	0x08012e98

08001390 <bmp_parse_calib>:

static void bmp_parse_calib(BMP390 *baro, uint8_t *raw) {
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	6039      	str	r1, [r7, #0]
    baro->raw_calib.nvm_par_t1 = BMP390_CONCAT2BYTES(raw[1], raw[0]);
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	3301      	adds	r3, #1
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	021b      	lsls	r3, r3, #8
 80013a2:	b21a      	sxth	r2, r3
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	b21b      	sxth	r3, r3
 80013aa:	4313      	orrs	r3, r2
 80013ac:	b21b      	sxth	r3, r3
 80013ae:	b29a      	uxth	r2, r3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	82da      	strh	r2, [r3, #22]
    baro->calib.par_t1 = (float)baro->raw_calib.nvm_par_t1 / powf(2, -8);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	8adb      	ldrh	r3, [r3, #22]
 80013b8:	ee07 3a90 	vmov	s15, r3
 80013bc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80013c0:	eddf 6aa4 	vldr	s13, [pc, #656]	@ 8001654 <bmp_parse_calib+0x2c4>
 80013c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

    baro->raw_calib.nvm_par_t2 = BMP390_CONCAT2BYTES(raw[3], raw[2]);
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	3303      	adds	r3, #3
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	021b      	lsls	r3, r3, #8
 80013d6:	b21a      	sxth	r2, r3
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	3302      	adds	r3, #2
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	b21b      	sxth	r3, r3
 80013e0:	4313      	orrs	r3, r2
 80013e2:	b21b      	sxth	r3, r3
 80013e4:	b29a      	uxth	r2, r3
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	831a      	strh	r2, [r3, #24]
    baro->calib.par_t2 = (float)baro->raw_calib.nvm_par_t2 / powf(2, 30);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	8b1b      	ldrh	r3, [r3, #24]
 80013ee:	ee07 3a90 	vmov	s15, r3
 80013f2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80013f6:	eddf 6a98 	vldr	s13, [pc, #608]	@ 8001658 <bmp_parse_calib+0x2c8>
 80013fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30

    baro->raw_calib.nvm_par_t3 = (int8_t)raw[4];
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	3304      	adds	r3, #4
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	b25a      	sxtb	r2, r3
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	769a      	strb	r2, [r3, #26]
    baro->calib.par_t3 = (float)baro->raw_calib.nvm_par_t3 / powf(2, 48);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	f993 301a 	ldrsb.w	r3, [r3, #26]
 8001416:	ee07 3a90 	vmov	s15, r3
 800141a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800141e:	eddf 6a8f 	vldr	s13, [pc, #572]	@ 800165c <bmp_parse_calib+0x2cc>
 8001422:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34

    baro->raw_calib.nvm_par_p1 = (int16_t)BMP390_CONCAT2BYTES(raw[6], raw[5]);
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	3306      	adds	r3, #6
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	021b      	lsls	r3, r3, #8
 8001434:	b21a      	sxth	r2, r3
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	3305      	adds	r3, #5
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	b21b      	sxth	r3, r3
 800143e:	4313      	orrs	r3, r2
 8001440:	b21a      	sxth	r2, r3
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	839a      	strh	r2, [r3, #28]
    baro->calib.par_p1 = (((float)baro->raw_calib.nvm_par_p1) - powf(2,14)) / powf(2,20);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800144c:	ee07 3a90 	vmov	s15, r3
 8001450:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001454:	ed9f 7a82 	vldr	s14, [pc, #520]	@ 8001660 <bmp_parse_calib+0x2d0>
 8001458:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800145c:	eddf 6a81 	vldr	s13, [pc, #516]	@ 8001664 <bmp_parse_calib+0x2d4>
 8001460:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38

    baro->raw_calib.nvm_par_p2 = (int16_t)BMP390_CONCAT2BYTES(raw[8], raw[7]);
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	3308      	adds	r3, #8
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	021b      	lsls	r3, r3, #8
 8001472:	b21a      	sxth	r2, r3
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	3307      	adds	r3, #7
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	b21b      	sxth	r3, r3
 800147c:	4313      	orrs	r3, r2
 800147e:	b21a      	sxth	r2, r3
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	83da      	strh	r2, [r3, #30]
    baro->calib.par_p2 = (((float)baro->raw_calib.nvm_par_p2) - powf(2,14)) / powf(2,29);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 800148a:	ee07 3a90 	vmov	s15, r3
 800148e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001492:	ed9f 7a73 	vldr	s14, [pc, #460]	@ 8001660 <bmp_parse_calib+0x2d0>
 8001496:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800149a:	eddf 6a73 	vldr	s13, [pc, #460]	@ 8001668 <bmp_parse_calib+0x2d8>
 800149e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c

    baro->raw_calib.nvm_par_p3 = (int8_t)raw[9];
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	3309      	adds	r3, #9
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	b25a      	sxtb	r2, r3
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	f883 2020 	strb.w	r2, [r3, #32]
    baro->calib.par_p3 = (float)baro->raw_calib.nvm_par_p3 / powf(2,32);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	f993 3020 	ldrsb.w	r3, [r3, #32]
 80014bc:	ee07 3a90 	vmov	s15, r3
 80014c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014c4:	eddf 6a69 	vldr	s13, [pc, #420]	@ 800166c <bmp_parse_calib+0x2dc>
 80014c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40

    baro->raw_calib.nvm_par_p4 = (int8_t)raw[10];
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	330a      	adds	r3, #10
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	b25a      	sxtb	r2, r3
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    baro->calib.par_p4 = (float)baro->raw_calib.nvm_par_p4 / powf(2,37);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	f993 3021 	ldrsb.w	r3, [r3, #33]	@ 0x21
 80014e6:	ee07 3a90 	vmov	s15, r3
 80014ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014ee:	eddf 6a60 	vldr	s13, [pc, #384]	@ 8001670 <bmp_parse_calib+0x2e0>
 80014f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44

    baro->raw_calib.nvm_par_p5 = BMP390_CONCAT2BYTES(raw[12], raw[11]);
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	330c      	adds	r3, #12
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	021b      	lsls	r3, r3, #8
 8001504:	b21a      	sxth	r2, r3
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	330b      	adds	r3, #11
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	b21b      	sxth	r3, r3
 800150e:	4313      	orrs	r3, r2
 8001510:	b21b      	sxth	r3, r3
 8001512:	b29a      	uxth	r2, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	845a      	strh	r2, [r3, #34]	@ 0x22
    baro->calib.par_p5 = (float)baro->raw_calib.nvm_par_p5 / powf(2, -3);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 800151c:	ee07 3a90 	vmov	s15, r3
 8001520:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001524:	eef4 6a00 	vmov.f32	s13, #64	@ 0x3e000000  0.125
 8001528:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48

    baro->raw_calib.nvm_par_p6 = BMP390_CONCAT2BYTES(raw[14], raw[13]);
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	330e      	adds	r3, #14
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	021b      	lsls	r3, r3, #8
 800153a:	b21a      	sxth	r2, r3
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	330d      	adds	r3, #13
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	b21b      	sxth	r3, r3
 8001544:	4313      	orrs	r3, r2
 8001546:	b21b      	sxth	r3, r3
 8001548:	b29a      	uxth	r2, r3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	849a      	strh	r2, [r3, #36]	@ 0x24
    baro->calib.par_p6 = (float)baro->raw_calib.nvm_par_p6 / powf(2,6);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001552:	ee07 3a90 	vmov	s15, r3
 8001556:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800155a:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8001674 <bmp_parse_calib+0x2e4>
 800155e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c

    baro->raw_calib.nvm_par_p7 = (int8_t)raw[15];
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	330f      	adds	r3, #15
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	b25a      	sxtb	r2, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
    baro->calib.par_p7 = (float)baro->raw_calib.nvm_par_p7 / powf(2,8);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	f993 3026 	ldrsb.w	r3, [r3, #38]	@ 0x26
 800157c:	ee07 3a90 	vmov	s15, r3
 8001580:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001584:	eddf 6a3c 	vldr	s13, [pc, #240]	@ 8001678 <bmp_parse_calib+0x2e8>
 8001588:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50

    baro->raw_calib.nvm_par_p8 = (int8_t)raw[16];
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	3310      	adds	r3, #16
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	b25a      	sxtb	r2, r3
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
    baro->calib.par_p8 = (float)baro->raw_calib.nvm_par_p8 / powf(2,15);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	f993 3027 	ldrsb.w	r3, [r3, #39]	@ 0x27
 80015a6:	ee07 3a90 	vmov	s15, r3
 80015aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015ae:	eddf 6a33 	vldr	s13, [pc, #204]	@ 800167c <bmp_parse_calib+0x2ec>
 80015b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	edc3 7a15 	vstr	s15, [r3, #84]	@ 0x54

    baro->raw_calib.nvm_par_p9 = (int16_t)BMP390_CONCAT2BYTES(raw[18], raw[17]);
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	3312      	adds	r3, #18
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	021b      	lsls	r3, r3, #8
 80015c4:	b21a      	sxth	r2, r3
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	3311      	adds	r3, #17
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	b21b      	sxth	r3, r3
 80015ce:	4313      	orrs	r3, r2
 80015d0:	b21a      	sxth	r2, r3
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	851a      	strh	r2, [r3, #40]	@ 0x28
    baro->calib.par_p9 = (float)baro->raw_calib.nvm_par_p9 / powf(2,48);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	@ 0x28
 80015dc:	ee07 3a90 	vmov	s15, r3
 80015e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015e4:	eddf 6a1d 	vldr	s13, [pc, #116]	@ 800165c <bmp_parse_calib+0x2cc>
 80015e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	edc3 7a16 	vstr	s15, [r3, #88]	@ 0x58

    baro->raw_calib.nvm_par_p10 = (int8_t)raw[19];
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	3313      	adds	r3, #19
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	b25a      	sxtb	r2, r3
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
    baro->calib.par_p10 = (float)baro->raw_calib.nvm_par_p10 / powf(2,48);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	f993 302a 	ldrsb.w	r3, [r3, #42]	@ 0x2a
 8001606:	ee07 3a90 	vmov	s15, r3
 800160a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800160e:	eddf 6a13 	vldr	s13, [pc, #76]	@ 800165c <bmp_parse_calib+0x2cc>
 8001612:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	edc3 7a17 	vstr	s15, [r3, #92]	@ 0x5c

    baro->raw_calib.nvm_par_p11 = (int8_t)raw[20];
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	3314      	adds	r3, #20
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	b25a      	sxtb	r2, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
    baro->calib.par_p11 = (float)baro->raw_calib.nvm_par_p11 / powf(2,65);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	f993 302b 	ldrsb.w	r3, [r3, #43]	@ 0x2b
 8001630:	ee07 3a90 	vmov	s15, r3
 8001634:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001638:	eddf 6a11 	vldr	s13, [pc, #68]	@ 8001680 <bmp_parse_calib+0x2f0>
 800163c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	edc3 7a18 	vstr	s15, [r3, #96]	@ 0x60
}
 8001646:	bf00      	nop
 8001648:	370c      	adds	r7, #12
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	3b800000 	.word	0x3b800000
 8001658:	4e800000 	.word	0x4e800000
 800165c:	57800000 	.word	0x57800000
 8001660:	46800000 	.word	0x46800000
 8001664:	49800000 	.word	0x49800000
 8001668:	4e000000 	.word	0x4e000000
 800166c:	4f800000 	.word	0x4f800000
 8001670:	52000000 	.word	0x52000000
 8001674:	42800000 	.word	0x42800000
 8001678:	43800000 	.word	0x43800000
 800167c:	47000000 	.word	0x47000000
 8001680:	60000000 	.word	0x60000000

08001684 <bmp_compensate_temperature>:

static float bmp_compensate_temperature(BMP390 *baro, uint32_t uncomp_temp) {
 8001684:	b480      	push	{r7}
 8001686:	b085      	sub	sp, #20
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
 800168c:	6039      	str	r1, [r7, #0]
    float partial1 = (float)uncomp_temp - baro->calib.par_t1;
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	ee07 3a90 	vmov	s15, r3
 8001694:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800169e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016a2:	edc7 7a03 	vstr	s15, [r7, #12]
    float partial2 = partial1 * baro->calib.par_t2;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80016ac:	ed97 7a03 	vldr	s14, [r7, #12]
 80016b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016b4:	edc7 7a02 	vstr	s15, [r7, #8]
    baro->calib.t_lin = partial2 + (partial1 * partial1) * baro->calib.par_t3;
 80016b8:	edd7 7a03 	vldr	s15, [r7, #12]
 80016bc:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80016c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016ca:	edd7 7a02 	vldr	s15, [r7, #8]
 80016ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	edc3 7a19 	vstr	s15, [r3, #100]	@ 0x64
    return baro->calib.t_lin;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80016dc:	ee07 3a90 	vmov	s15, r3
}
 80016e0:	eeb0 0a67 	vmov.f32	s0, s15
 80016e4:	3714      	adds	r7, #20
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr

080016ee <bmp_compensate_pressure>:

static float bmp_compensate_pressure(BMP390 *baro, uint32_t uncomp_press) {
 80016ee:	b480      	push	{r7}
 80016f0:	b091      	sub	sp, #68	@ 0x44
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]
 80016f6:	6039      	str	r1, [r7, #0]
    float partial_data1 = baro->calib.par_p6 * baro->calib.t_lin;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	ed93 7a13 	vldr	s14, [r3, #76]	@ 0x4c
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 8001704:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001708:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    float partial_data2 = baro->calib.par_p7 * (baro->calib.t_lin * baro->calib.t_lin);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	ed93 7a14 	vldr	s14, [r3, #80]	@ 0x50
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	edd3 6a19 	vldr	s13, [r3, #100]	@ 0x64
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 800171e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001722:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001726:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
    float partial_data3 = baro->calib.par_p8 * (baro->calib.t_lin * baro->calib.t_lin * baro->calib.t_lin);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	ed93 7a15 	vldr	s14, [r3, #84]	@ 0x54
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	edd3 6a19 	vldr	s13, [r3, #100]	@ 0x64
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 800173c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 8001746:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800174a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800174e:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    float partial_out1 = baro->calib.par_p5 + partial_data1 + partial_data2 + partial_data3;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 8001758:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800175c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001760:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001764:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001768:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800176c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001770:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

    float flt_uncomp_press = (float)uncomp_press;
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	ee07 3a90 	vmov	s15, r3
 800177a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800177e:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

    float partial_data1_p = baro->calib.par_p2 * baro->calib.t_lin;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 800178e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001792:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    float partial_data2_p = baro->calib.par_p3 * (baro->calib.t_lin * baro->calib.t_lin);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	edd3 6a19 	vldr	s13, [r3, #100]	@ 0x64
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 80017a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017b0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    float partial_data3_p = baro->calib.par_p4 * (baro->calib.t_lin * baro->calib.t_lin * baro->calib.t_lin);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	edd3 6a19 	vldr	s13, [r3, #100]	@ 0x64
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 80017c6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 80017d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017d8:	edc7 7a08 	vstr	s15, [r7, #32]
    float partial_out2 = flt_uncomp_press * (baro->calib.par_p1 + partial_data1_p + partial_data2_p + partial_data3_p);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 80017e2:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80017e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017ea:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80017ee:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017f2:	edd7 7a08 	vldr	s15, [r7, #32]
 80017f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017fa:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80017fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001802:	edc7 7a07 	vstr	s15, [r7, #28]


    float partial_data1_p2 = flt_uncomp_press * flt_uncomp_press;
 8001806:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800180a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800180e:	edc7 7a06 	vstr	s15, [r7, #24]
    float partial_data2_p2 = baro->calib.par_p9 + baro->calib.par_p10 * baro->calib.t_lin;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	ed93 7a16 	vldr	s14, [r3, #88]	@ 0x58
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	edd3 6a17 	vldr	s13, [r3, #92]	@ 0x5c
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 8001824:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001828:	ee77 7a27 	vadd.f32	s15, s14, s15
 800182c:	edc7 7a05 	vstr	s15, [r7, #20]
    float partial_data3_p2 = partial_data1_p2 * partial_data2_p2;
 8001830:	ed97 7a06 	vldr	s14, [r7, #24]
 8001834:	edd7 7a05 	vldr	s15, [r7, #20]
 8001838:	ee67 7a27 	vmul.f32	s15, s14, s15
 800183c:	edc7 7a04 	vstr	s15, [r7, #16]
    float partial_data4_p2 = partial_data3_p2 + (flt_uncomp_press * flt_uncomp_press * flt_uncomp_press) * baro->calib.par_p11;
 8001840:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001844:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001848:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800184c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 8001856:	ee67 7a27 	vmul.f32	s15, s14, s15
 800185a:	ed97 7a04 	vldr	s14, [r7, #16]
 800185e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001862:	edc7 7a03 	vstr	s15, [r7, #12]

    float comp_press = partial_out1 + partial_out2 + partial_data4_p2;
 8001866:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 800186a:	edd7 7a07 	vldr	s15, [r7, #28]
 800186e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001872:	ed97 7a03 	vldr	s14, [r7, #12]
 8001876:	ee77 7a27 	vadd.f32	s15, s14, s15
 800187a:	edc7 7a02 	vstr	s15, [r7, #8]

    return comp_press;
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	ee07 3a90 	vmov	s15, r3
}
 8001884:	eeb0 0a67 	vmov.f32	s0, s15
 8001888:	3744      	adds	r7, #68	@ 0x44
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
	...

08001894 <bmp_init>:

bool bmp_init(BMP390 *baro, SPI_HandleTypeDef *hspi, GPIO_TypeDef *csPort, uint16_t csPin) {
 8001894:	b5b0      	push	{r4, r5, r7, lr}
 8001896:	b090      	sub	sp, #64	@ 0x40
 8001898:	af04      	add	r7, sp, #16
 800189a:	60f8      	str	r0, [r7, #12]
 800189c:	60b9      	str	r1, [r7, #8]
 800189e:	607a      	str	r2, [r7, #4]
 80018a0:	807b      	strh	r3, [r7, #2]
    baro->hspi = hspi;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	68ba      	ldr	r2, [r7, #8]
 80018a6:	601a      	str	r2, [r3, #0]
    baro->csPort = csPort;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	605a      	str	r2, [r3, #4]
    baro->csPin = csPin;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	887a      	ldrh	r2, [r7, #2]
 80018b2:	811a      	strh	r2, [r3, #8]
    baro->last_press = NAN;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	4aa6      	ldr	r2, [pc, #664]	@ (8001b50 <bmp_init+0x2bc>)
 80018b8:	60da      	str	r2, [r3, #12]
    baro->last_alt   = NAN;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	4aa4      	ldr	r2, [pc, #656]	@ (8001b50 <bmp_init+0x2bc>)
 80018be:	611a      	str	r2, [r3, #16]
    baro->last_temp  = INT16_MIN;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80018c6:	829a      	strh	r2, [r3, #20]

    HAL_GPIO_WritePin(baro->csPort, baro->csPin, GPIO_PIN_SET);
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	6858      	ldr	r0, [r3, #4]
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	891b      	ldrh	r3, [r3, #8]
 80018d0:	2201      	movs	r2, #1
 80018d2:	4619      	mov	r1, r3
 80018d4:	f002 fc7c 	bl	80041d0 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 80018d8:	200a      	movs	r0, #10
 80018da:	f001 ff51 	bl	8003780 <HAL_Delay>

    uint8_t chip_id = 0;
 80018de:	2300      	movs	r3, #0
 80018e0:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    debug_print("BMP390 Init: Reading Chip ID...\r\n");
 80018e4:	489b      	ldr	r0, [pc, #620]	@ (8001b54 <bmp_init+0x2c0>)
 80018e6:	f000 fdb5 	bl	8002454 <debug_print>
    if (!bmp_read_reg(baro, BMP390_REG_CHIP_ID, &chip_id)) {
 80018ea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80018ee:	461a      	mov	r2, r3
 80018f0:	2100      	movs	r1, #0
 80018f2:	68f8      	ldr	r0, [r7, #12]
 80018f4:	f7ff fc4c 	bl	8001190 <bmp_read_reg>
 80018f8:	4603      	mov	r3, r0
 80018fa:	f083 0301 	eor.w	r3, r3, #1
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	2b00      	cmp	r3, #0
 8001902:	d004      	beq.n	800190e <bmp_init+0x7a>
        debug_print("BMP390 Init ERROR: Failed SPI read for Chip ID\r\n");
 8001904:	4894      	ldr	r0, [pc, #592]	@ (8001b58 <bmp_init+0x2c4>)
 8001906:	f000 fda5 	bl	8002454 <debug_print>
        return false;
 800190a:	2300      	movs	r3, #0
 800190c:	e11c      	b.n	8001b48 <bmp_init+0x2b4>
    }
    if (chip_id != BMP390_CHIP_ID) {
 800190e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001912:	2b60      	cmp	r3, #96	@ 0x60
 8001914:	d008      	beq.n	8001928 <bmp_init+0x94>
        debug_print("BMP390 Init ERROR: Chip ID Mismatch! Read: 0x%02X Expected: 0x%02X\r\n", chip_id, BMP390_CHIP_ID);
 8001916:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800191a:	2260      	movs	r2, #96	@ 0x60
 800191c:	4619      	mov	r1, r3
 800191e:	488f      	ldr	r0, [pc, #572]	@ (8001b5c <bmp_init+0x2c8>)
 8001920:	f000 fd98 	bl	8002454 <debug_print>
        return false;
 8001924:	2300      	movs	r3, #0
 8001926:	e10f      	b.n	8001b48 <bmp_init+0x2b4>
    }
    debug_print("BMP390 Init: Chip ID OK (0x%02X).\r\n", chip_id);
 8001928:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800192c:	4619      	mov	r1, r3
 800192e:	488c      	ldr	r0, [pc, #560]	@ (8001b60 <bmp_init+0x2cc>)
 8001930:	f000 fd90 	bl	8002454 <debug_print>


    debug_print("BMP390 Init: Sending Soft Reset...\r\n");
 8001934:	488b      	ldr	r0, [pc, #556]	@ (8001b64 <bmp_init+0x2d0>)
 8001936:	f000 fd8d 	bl	8002454 <debug_print>
    if (!bmp_write_reg(baro, BMP390_REG_CMD, SOFT_RESET)) {
 800193a:	22b6      	movs	r2, #182	@ 0xb6
 800193c:	217e      	movs	r1, #126	@ 0x7e
 800193e:	68f8      	ldr	r0, [r7, #12]
 8001940:	f7ff fc70 	bl	8001224 <bmp_write_reg>
 8001944:	4603      	mov	r3, r0
 8001946:	f083 0301 	eor.w	r3, r3, #1
 800194a:	b2db      	uxtb	r3, r3
 800194c:	2b00      	cmp	r3, #0
 800194e:	d004      	beq.n	800195a <bmp_init+0xc6>
         debug_print("BMP390 Init ERROR: Failed SPI write for Soft Reset\r\n");
 8001950:	4885      	ldr	r0, [pc, #532]	@ (8001b68 <bmp_init+0x2d4>)
 8001952:	f000 fd7f 	bl	8002454 <debug_print>
         return false;
 8001956:	2300      	movs	r3, #0
 8001958:	e0f6      	b.n	8001b48 <bmp_init+0x2b4>
    }
    HAL_Delay(50);
 800195a:	2032      	movs	r0, #50	@ 0x32
 800195c:	f001 ff10 	bl	8003780 <HAL_Delay>

    uint8_t power_conf = ENABLE_PRESSURE | ENABLE_TEMP | ENABLE_SENSOR; // 0x33
 8001960:	2333      	movs	r3, #51	@ 0x33
 8001962:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    debug_print("BMP390 Init: Writing PWR_CTRL = 0x%02X...\r\n", power_conf);
 8001966:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800196a:	4619      	mov	r1, r3
 800196c:	487f      	ldr	r0, [pc, #508]	@ (8001b6c <bmp_init+0x2d8>)
 800196e:	f000 fd71 	bl	8002454 <debug_print>
    if (!bmp_write_reg(baro, BMP390_REG_PWR_CTRL, power_conf)) {
 8001972:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001976:	461a      	mov	r2, r3
 8001978:	211b      	movs	r1, #27
 800197a:	68f8      	ldr	r0, [r7, #12]
 800197c:	f7ff fc52 	bl	8001224 <bmp_write_reg>
 8001980:	4603      	mov	r3, r0
 8001982:	f083 0301 	eor.w	r3, r3, #1
 8001986:	b2db      	uxtb	r3, r3
 8001988:	2b00      	cmp	r3, #0
 800198a:	d004      	beq.n	8001996 <bmp_init+0x102>
         debug_print("BMP390 Init ERROR: Failed SPI write for PWR_CTRL\r\n");
 800198c:	4878      	ldr	r0, [pc, #480]	@ (8001b70 <bmp_init+0x2dc>)
 800198e:	f000 fd61 	bl	8002454 <debug_print>
         return false;
 8001992:	2300      	movs	r3, #0
 8001994:	e0d8      	b.n	8001b48 <bmp_init+0x2b4>
    }
    HAL_Delay(5);
 8001996:	2005      	movs	r0, #5
 8001998:	f001 fef2 	bl	8003780 <HAL_Delay>

    uint8_t osr_conf = (OSR_TEMP_X2 << 3) | OSR_PRESSURE_X32; // 0x0D
 800199c:	230d      	movs	r3, #13
 800199e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    debug_print("BMP390 Init: Writing OSR = 0x%02X...\r\n", osr_conf);
 80019a2:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80019a6:	4619      	mov	r1, r3
 80019a8:	4872      	ldr	r0, [pc, #456]	@ (8001b74 <bmp_init+0x2e0>)
 80019aa:	f000 fd53 	bl	8002454 <debug_print>
    if (!bmp_write_reg(baro, BMP390_REG_OSR, osr_conf)) {
 80019ae:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80019b2:	461a      	mov	r2, r3
 80019b4:	211c      	movs	r1, #28
 80019b6:	68f8      	ldr	r0, [r7, #12]
 80019b8:	f7ff fc34 	bl	8001224 <bmp_write_reg>
 80019bc:	4603      	mov	r3, r0
 80019be:	f083 0301 	eor.w	r3, r3, #1
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d004      	beq.n	80019d2 <bmp_init+0x13e>
        debug_print("BMP390 Init ERROR: Failed SPI write for OSR\r\n");
 80019c8:	486b      	ldr	r0, [pc, #428]	@ (8001b78 <bmp_init+0x2e4>)
 80019ca:	f000 fd43 	bl	8002454 <debug_print>
        return false;
 80019ce:	2300      	movs	r3, #0
 80019d0:	e0ba      	b.n	8001b48 <bmp_init+0x2b4>
    }

    debug_print("BMP390 Init: Writing ODR = 0x%02X...\r\n", ODR_12p5_HZ); // 0x04
 80019d2:	2104      	movs	r1, #4
 80019d4:	4869      	ldr	r0, [pc, #420]	@ (8001b7c <bmp_init+0x2e8>)
 80019d6:	f000 fd3d 	bl	8002454 <debug_print>
    if (!bmp_write_reg(baro, BMP390_REG_ODR, ODR_12p5_HZ)) {
 80019da:	2204      	movs	r2, #4
 80019dc:	211d      	movs	r1, #29
 80019de:	68f8      	ldr	r0, [r7, #12]
 80019e0:	f7ff fc20 	bl	8001224 <bmp_write_reg>
 80019e4:	4603      	mov	r3, r0
 80019e6:	f083 0301 	eor.w	r3, r3, #1
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d004      	beq.n	80019fa <bmp_init+0x166>
        debug_print("BMP390 Init ERROR: Failed SPI write for ODR\r\n");
 80019f0:	4863      	ldr	r0, [pc, #396]	@ (8001b80 <bmp_init+0x2ec>)
 80019f2:	f000 fd2f 	bl	8002454 <debug_print>
        return false;
 80019f6:	2300      	movs	r3, #0
 80019f8:	e0a6      	b.n	8001b48 <bmp_init+0x2b4>
    }
    HAL_Delay(5);
 80019fa:	2005      	movs	r0, #5
 80019fc:	f001 fec0 	bl	8003780 <HAL_Delay>

    uint8_t read_pwr = 0, read_osr = 0, read_odr = 0;
 8001a00:	2300      	movs	r3, #0
 8001a02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001a06:	2300      	movs	r3, #0
 8001a08:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
    bool readback_ok = true;
 8001a12:	2301      	movs	r3, #1
 8001a14:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    debug_print("BMP390 Init: Reading back configuration...\r\n");
 8001a18:	485a      	ldr	r0, [pc, #360]	@ (8001b84 <bmp_init+0x2f0>)
 8001a1a:	f000 fd1b 	bl	8002454 <debug_print>
    if (!bmp_read_reg(baro, BMP390_REG_PWR_CTRL, &read_pwr)) readback_ok = false;
 8001a1e:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 8001a22:	461a      	mov	r2, r3
 8001a24:	211b      	movs	r1, #27
 8001a26:	68f8      	ldr	r0, [r7, #12]
 8001a28:	f7ff fbb2 	bl	8001190 <bmp_read_reg>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	f083 0301 	eor.w	r3, r3, #1
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d002      	beq.n	8001a3e <bmp_init+0x1aa>
 8001a38:	2300      	movs	r3, #0
 8001a3a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (!bmp_read_reg(baro, BMP390_REG_OSR, &read_osr)) readback_ok = false;
 8001a3e:	f107 032a 	add.w	r3, r7, #42	@ 0x2a
 8001a42:	461a      	mov	r2, r3
 8001a44:	211c      	movs	r1, #28
 8001a46:	68f8      	ldr	r0, [r7, #12]
 8001a48:	f7ff fba2 	bl	8001190 <bmp_read_reg>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	f083 0301 	eor.w	r3, r3, #1
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d002      	beq.n	8001a5e <bmp_init+0x1ca>
 8001a58:	2300      	movs	r3, #0
 8001a5a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (!bmp_read_reg(baro, BMP390_REG_ODR, &read_odr)) readback_ok = false;
 8001a5e:	f107 0329 	add.w	r3, r7, #41	@ 0x29
 8001a62:	461a      	mov	r2, r3
 8001a64:	211d      	movs	r1, #29
 8001a66:	68f8      	ldr	r0, [r7, #12]
 8001a68:	f7ff fb92 	bl	8001190 <bmp_read_reg>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	f083 0301 	eor.w	r3, r3, #1
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d002      	beq.n	8001a7e <bmp_init+0x1ea>
 8001a78:	2300      	movs	r3, #0
 8001a7a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    if (!readback_ok) {
 8001a7e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001a82:	f083 0301 	eor.w	r3, r3, #1
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d004      	beq.n	8001a96 <bmp_init+0x202>
        debug_print("BMP390 Init ERROR: Failed SPI read during configuration readback!\r\n");
 8001a8c:	483e      	ldr	r0, [pc, #248]	@ (8001b88 <bmp_init+0x2f4>)
 8001a8e:	f000 fce1 	bl	8002454 <debug_print>
        return false;
 8001a92:	2300      	movs	r3, #0
 8001a94:	e058      	b.n	8001b48 <bmp_init+0x2b4>
    }

    debug_print("BMP390 Init Readback: PWR_CTRL=0x%02X (W:0x%02X), OSR=0x%02X (W:0x%02X), ODR=0x%02X (W:0x%02X)\r\n",
 8001a96:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001a9a:	461c      	mov	r4, r3
 8001a9c:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8001aa0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8001aa4:	461d      	mov	r5, r3
 8001aa6:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001aaa:	f897 1029 	ldrb.w	r1, [r7, #41]	@ 0x29
 8001aae:	4608      	mov	r0, r1
 8001ab0:	2104      	movs	r1, #4
 8001ab2:	9102      	str	r1, [sp, #8]
 8001ab4:	9001      	str	r0, [sp, #4]
 8001ab6:	9300      	str	r3, [sp, #0]
 8001ab8:	462b      	mov	r3, r5
 8001aba:	4621      	mov	r1, r4
 8001abc:	4833      	ldr	r0, [pc, #204]	@ (8001b8c <bmp_init+0x2f8>)
 8001abe:	f000 fcc9 	bl	8002454 <debug_print>
                read_pwr, power_conf, read_osr, osr_conf, read_odr, ODR_12p5_HZ);

    if (read_pwr != power_conf || read_osr != osr_conf || read_odr != ODR_12p5_HZ) {
 8001ac2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001ac6:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8001aca:	429a      	cmp	r2, r3
 8001acc:	d109      	bne.n	8001ae2 <bmp_init+0x24e>
 8001ace:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8001ad2:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d103      	bne.n	8001ae2 <bmp_init+0x24e>
 8001ada:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8001ade:	2b04      	cmp	r3, #4
 8001ae0:	d003      	beq.n	8001aea <bmp_init+0x256>
        debug_print("BMP390 Init WARNING: Configuration Readback Mismatch! Sensor may not operate as expected.\r\n");
 8001ae2:	482b      	ldr	r0, [pc, #172]	@ (8001b90 <bmp_init+0x2fc>)
 8001ae4:	f000 fcb6 	bl	8002454 <debug_print>
 8001ae8:	e002      	b.n	8001af0 <bmp_init+0x25c>
    } else {
        debug_print("BMP390 Init: Configuration Readback OK.\r\n");
 8001aea:	482a      	ldr	r0, [pc, #168]	@ (8001b94 <bmp_init+0x300>)
 8001aec:	f000 fcb2 	bl	8002454 <debug_print>
    }

    uint8_t calib_raw[21] = {0};
 8001af0:	2300      	movs	r3, #0
 8001af2:	617b      	str	r3, [r7, #20]
 8001af4:	f107 0318 	add.w	r3, r7, #24
 8001af8:	2200      	movs	r2, #0
 8001afa:	601a      	str	r2, [r3, #0]
 8001afc:	605a      	str	r2, [r3, #4]
 8001afe:	609a      	str	r2, [r3, #8]
 8001b00:	60da      	str	r2, [r3, #12]
 8001b02:	741a      	strb	r2, [r3, #16]
    debug_print("BMP390 Init: Reading Calibration Data...\r\n");
 8001b04:	4824      	ldr	r0, [pc, #144]	@ (8001b98 <bmp_init+0x304>)
 8001b06:	f000 fca5 	bl	8002454 <debug_print>
    if (!bmp_read_buf(baro, BMP390_REG_CAL, calib_raw, 21)) {
 8001b0a:	f107 0214 	add.w	r2, r7, #20
 8001b0e:	2315      	movs	r3, #21
 8001b10:	2131      	movs	r1, #49	@ 0x31
 8001b12:	68f8      	ldr	r0, [r7, #12]
 8001b14:	f7ff fbc2 	bl	800129c <bmp_read_buf>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	f083 0301 	eor.w	r3, r3, #1
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d004      	beq.n	8001b2e <bmp_init+0x29a>
        debug_print("BMP390 Init ERROR: Failed SPI read for Calibration Data\r\n");
 8001b24:	481d      	ldr	r0, [pc, #116]	@ (8001b9c <bmp_init+0x308>)
 8001b26:	f000 fc95 	bl	8002454 <debug_print>
        return false;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	e00c      	b.n	8001b48 <bmp_init+0x2b4>
    }
    bmp_parse_calib(baro, calib_raw);
 8001b2e:	f107 0314 	add.w	r3, r7, #20
 8001b32:	4619      	mov	r1, r3
 8001b34:	68f8      	ldr	r0, [r7, #12]
 8001b36:	f7ff fc2b 	bl	8001390 <bmp_parse_calib>

    HAL_Delay(100);
 8001b3a:	2064      	movs	r0, #100	@ 0x64
 8001b3c:	f001 fe20 	bl	8003780 <HAL_Delay>

    baro_step(baro);
 8001b40:	68f8      	ldr	r0, [r7, #12]
 8001b42:	f000 f82d 	bl	8001ba0 <baro_step>

    return true;
 8001b46:	2301      	movs	r3, #1
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3730      	adds	r7, #48	@ 0x30
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bdb0      	pop	{r4, r5, r7, pc}
 8001b50:	7fc00000 	.word	0x7fc00000
 8001b54:	08012ecc 	.word	0x08012ecc
 8001b58:	08012ef0 	.word	0x08012ef0
 8001b5c:	08012f24 	.word	0x08012f24
 8001b60:	08012f6c 	.word	0x08012f6c
 8001b64:	08012f90 	.word	0x08012f90
 8001b68:	08012fb8 	.word	0x08012fb8
 8001b6c:	08012ff0 	.word	0x08012ff0
 8001b70:	0801301c 	.word	0x0801301c
 8001b74:	08013050 	.word	0x08013050
 8001b78:	08013078 	.word	0x08013078
 8001b7c:	080130a8 	.word	0x080130a8
 8001b80:	080130d0 	.word	0x080130d0
 8001b84:	08013100 	.word	0x08013100
 8001b88:	08013130 	.word	0x08013130
 8001b8c:	08013174 	.word	0x08013174
 8001b90:	080131d8 	.word	0x080131d8
 8001b94:	08013234 	.word	0x08013234
 8001b98:	08013260 	.word	0x08013260
 8001b9c:	0801328c 	.word	0x0801328c

08001ba0 <baro_step>:

void baro_step(BMP390 *baro) {
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b088      	sub	sp, #32
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
    uint8_t status_reg = 0;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	73fb      	strb	r3, [r7, #15]
    uint8_t data[6] = {0};
 8001bac:	2300      	movs	r3, #0
 8001bae:	60bb      	str	r3, [r7, #8]
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	81bb      	strh	r3, [r7, #12]

    if (!bmp_read_reg(baro, BMP390_REG_STATUS, &status_reg)) {
 8001bb4:	f107 030f 	add.w	r3, r7, #15
 8001bb8:	461a      	mov	r2, r3
 8001bba:	2103      	movs	r1, #3
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f7ff fae7 	bl	8001190 <bmp_read_reg>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	f083 0301 	eor.w	r3, r3, #1
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d003      	beq.n	8001bd6 <baro_step+0x36>
        debug_print("baro_step ERROR: Failed to read STATUS register.\r\n");
 8001bce:	483a      	ldr	r0, [pc, #232]	@ (8001cb8 <baro_step+0x118>)
 8001bd0:	f000 fc40 	bl	8002454 <debug_print>
        return;
 8001bd4:	e06c      	b.n	8001cb0 <baro_step+0x110>
    }

    if (!(status_reg & BMP390_STATUS_DRDY_PRES) || !(status_reg & BMP390_STATUS_DRDY_TEMP)) {
 8001bd6:	7bfb      	ldrb	r3, [r7, #15]
 8001bd8:	f003 0320 	and.w	r3, r3, #32
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d066      	beq.n	8001cae <baro_step+0x10e>
 8001be0:	7bfb      	ldrb	r3, [r7, #15]
 8001be2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d061      	beq.n	8001cae <baro_step+0x10e>
        return;
    }

    if (!bmp_read_buf(baro, BMP390_REG_DATA, data, 6)) {
 8001bea:	f107 0208 	add.w	r2, r7, #8
 8001bee:	2306      	movs	r3, #6
 8001bf0:	2104      	movs	r1, #4
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f7ff fb52 	bl	800129c <bmp_read_buf>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	f083 0301 	eor.w	r3, r3, #1
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d003      	beq.n	8001c0c <baro_step+0x6c>
        debug_print("baro_step ERROR: Failed to read DATA registers after DRDY set!\r\n");
 8001c04:	482d      	ldr	r0, [pc, #180]	@ (8001cbc <baro_step+0x11c>)
 8001c06:	f000 fc25 	bl	8002454 <debug_print>
        return;
 8001c0a:	e051      	b.n	8001cb0 <baro_step+0x110>
    }

    uint32_t uncomp_press = BMP390_CONCAT3BYTES(data[2], data[1], data[0]);
 8001c0c:	7abb      	ldrb	r3, [r7, #10]
 8001c0e:	041a      	lsls	r2, r3, #16
 8001c10:	7a7b      	ldrb	r3, [r7, #9]
 8001c12:	021b      	lsls	r3, r3, #8
 8001c14:	4313      	orrs	r3, r2
 8001c16:	7a3a      	ldrb	r2, [r7, #8]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	61fb      	str	r3, [r7, #28]
    uint32_t uncomp_temp  = BMP390_CONCAT3BYTES(data[5], data[4], data[3]);
 8001c1c:	7b7b      	ldrb	r3, [r7, #13]
 8001c1e:	041a      	lsls	r2, r3, #16
 8001c20:	7b3b      	ldrb	r3, [r7, #12]
 8001c22:	021b      	lsls	r3, r3, #8
 8001c24:	4313      	orrs	r3, r2
 8001c26:	7afa      	ldrb	r2, [r7, #11]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	61bb      	str	r3, [r7, #24]

    if (uncomp_press == 8388608 || uncomp_temp == 8388608) {
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001c32:	d003      	beq.n	8001c3c <baro_step+0x9c>
 8001c34:	69bb      	ldr	r3, [r7, #24]
 8001c36:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001c3a:	d102      	bne.n	8001c42 <baro_step+0xa2>
         debug_print("BMP390 WARN: Read reset value (8388608) despite DRDY flags being set!\r\n");
 8001c3c:	4820      	ldr	r0, [pc, #128]	@ (8001cc0 <baro_step+0x120>)
 8001c3e:	f000 fc09 	bl	8002454 <debug_print>
    }

    float t_lin = bmp_compensate_temperature(baro, uncomp_temp);
 8001c42:	69b9      	ldr	r1, [r7, #24]
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f7ff fd1d 	bl	8001684 <bmp_compensate_temperature>
 8001c4a:	ed87 0a05 	vstr	s0, [r7, #20]
    baro->last_temp = (int16_t)(t_lin * 100.0f);
 8001c4e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c52:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8001cc4 <baro_step+0x124>
 8001c56:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c5a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c5e:	ee17 3a90 	vmov	r3, s15
 8001c62:	b21a      	sxth	r2, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	829a      	strh	r2, [r3, #20]

    float comp_press = bmp_compensate_pressure(baro, uncomp_press);
 8001c68:	69f9      	ldr	r1, [r7, #28]
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f7ff fd3f 	bl	80016ee <bmp_compensate_pressure>
 8001c70:	ed87 0a04 	vstr	s0, [r7, #16]
    baro->last_press = comp_press;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	693a      	ldr	r2, [r7, #16]
 8001c78:	60da      	str	r2, [r3, #12]

    baro->last_alt = 44330.0f * (1.0f - powf(comp_press / 101325.0f, 1.0f / 5.255f));
 8001c7a:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c7e:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8001cc8 <baro_step+0x128>
 8001c82:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001c86:	eddf 0a11 	vldr	s1, [pc, #68]	@ 8001ccc <baro_step+0x12c>
 8001c8a:	eeb0 0a47 	vmov.f32	s0, s14
 8001c8e:	f010 fc3b 	bl	8012508 <powf>
 8001c92:	eef0 7a40 	vmov.f32	s15, s0
 8001c96:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001c9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c9e:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8001cd0 <baro_step+0x130>
 8001ca2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	edc3 7a04 	vstr	s15, [r3, #16]
 8001cac:	e000      	b.n	8001cb0 <baro_step+0x110>
        return;
 8001cae:	bf00      	nop
}
 8001cb0:	3720      	adds	r7, #32
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	080132c8 	.word	0x080132c8
 8001cbc:	080132fc 	.word	0x080132fc
 8001cc0:	08013340 	.word	0x08013340
 8001cc4:	42c80000 	.word	0x42c80000
 8001cc8:	47c5e680 	.word	0x47c5e680
 8001ccc:	3e42dcae 	.word	0x3e42dcae
 8001cd0:	472d2a00 	.word	0x472d2a00

08001cd4 <baro_get_altitude>:

float baro_get_altitude(BMP390 *baro) {
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
    return baro->last_alt;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	691b      	ldr	r3, [r3, #16]
 8001ce0:	ee07 3a90 	vmov	s15, r3
}
 8001ce4:	eeb0 0a67 	vmov.f32	s0, s15
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr

08001cf2 <baro_get_temp>:

int16_t baro_get_temp(BMP390 *baro) {
 8001cf2:	b480      	push	{r7}
 8001cf4:	b083      	sub	sp, #12
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
    return baro->last_temp;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	370c      	adds	r7, #12
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr

08001d0c <baro_get_pressure>:

float baro_get_pressure(BMP390 *baro) {
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
    return baro->last_press;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	ee07 3a90 	vmov	s15, r3
}
 8001d1c:	eeb0 0a67 	vmov.f32	s0, s15
 8001d20:	370c      	adds	r7, #12
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
	...

08001d2c <calculate_gain>:
 8001d2c:	b5b0      	push	{r4, r5, r7, lr}
 8001d2e:	b0c0      	sub	sp, #256	@ 0x100
 8001d30:	af02      	add	r7, sp, #8
 8001d32:	60f8      	str	r0, [r7, #12]
 8001d34:	ed87 0a02 	vstr	s0, [r7, #8]
 8001d38:	edc7 0a01 	vstr	s1, [r7, #4]
 8001d3c:	ed87 1a00 	vstr	s2, [r7]
 8001d40:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d44:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001d48:	edc7 7a39 	vstr	s15, [r7, #228]	@ 0xe4
 8001d4c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d50:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001d54:	edc7 7a38 	vstr	s15, [r7, #224]	@ 0xe0
 8001d58:	edd7 7a00 	vldr	s15, [r7]
 8001d5c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001d60:	edc7 7a37 	vstr	s15, [r7, #220]	@ 0xdc
 8001d64:	68f8      	ldr	r0, [r7, #12]
 8001d66:	f107 01ac 	add.w	r1, r7, #172	@ 0xac
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	2203      	movs	r2, #3
 8001d6e:	f001 fc3d 	bl	80035ec <matrix_transpose>
 8001d72:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001d76:	2200      	movs	r2, #0
 8001d78:	601a      	str	r2, [r3, #0]
 8001d7a:	605a      	str	r2, [r3, #4]
 8001d7c:	609a      	str	r2, [r3, #8]
 8001d7e:	60da      	str	r2, [r3, #12]
 8001d80:	611a      	str	r2, [r3, #16]
 8001d82:	615a      	str	r2, [r3, #20]
 8001d84:	2300      	movs	r3, #0
 8001d86:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8001d8a:	e013      	b.n	8001db4 <calculate_gain+0x88>
 8001d8c:	68fa      	ldr	r2, [r7, #12]
 8001d8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d92:	3308      	adds	r3, #8
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	4413      	add	r3, r2
 8001d98:	3304      	adds	r3, #4
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	33f8      	adds	r3, #248	@ 0xf8
 8001da4:	443b      	add	r3, r7
 8001da6:	3b64      	subs	r3, #100	@ 0x64
 8001da8:	601a      	str	r2, [r3, #0]
 8001daa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001dae:	3301      	adds	r3, #1
 8001db0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8001db4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001db8:	2b05      	cmp	r3, #5
 8001dba:	dde7      	ble.n	8001d8c <calculate_gain+0x60>
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8001dc2:	4bdd      	ldr	r3, [pc, #884]	@ (8002138 <calculate_gain+0x40c>)
 8001dc4:	f107 0470 	add.w	r4, r7, #112	@ 0x70
 8001dc8:	461d      	mov	r5, r3
 8001dca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001dcc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001dd0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dd2:	682b      	ldr	r3, [r5, #0]
 8001dd4:	6023      	str	r3, [r4, #0]
 8001dd6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001dda:	2224      	movs	r2, #36	@ 0x24
 8001ddc:	2100      	movs	r1, #0
 8001dde:	4618      	mov	r0, r3
 8001de0:	f00e fa30 	bl	8010244 <memset>
 8001de4:	68f8      	ldr	r0, [r7, #12]
 8001de6:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8001dea:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 8001dee:	2303      	movs	r3, #3
 8001df0:	9301      	str	r3, [sp, #4]
 8001df2:	2303      	movs	r3, #3
 8001df4:	9300      	str	r3, [sp, #0]
 8001df6:	2303      	movs	r3, #3
 8001df8:	f001 fb90 	bl	800351c <matrix_multiply>
 8001dfc:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8001e00:	f107 01ac 	add.w	r1, r7, #172	@ 0xac
 8001e04:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8001e08:	2303      	movs	r3, #3
 8001e0a:	9301      	str	r3, [sp, #4]
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	9300      	str	r3, [sp, #0]
 8001e10:	2303      	movs	r3, #3
 8001e12:	f001 fb83 	bl	800351c <matrix_multiply>
 8001e16:	ed97 7a1b 	vldr	s14, [r7, #108]	@ 0x6c
 8001e1a:	edd7 7a37 	vldr	s15, [r7, #220]	@ 0xdc
 8001e1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e22:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
 8001e26:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001e2a:	edd7 7a39 	vldr	s15, [r7, #228]	@ 0xe4
 8001e2e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e32:	edd7 6a1b 	vldr	s13, [r7, #108]	@ 0x6c
 8001e36:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8001e3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001e3e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e42:	edd7 6a19 	vldr	s13, [r7, #100]	@ 0x64
 8001e46:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8001e4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e52:	edc7 7a36 	vstr	s15, [r7, #216]	@ 0xd8
 8001e56:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001e5a:	edd7 6a1b 	vldr	s13, [r7, #108]	@ 0x6c
 8001e5e:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8001e62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001e66:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e6a:	edd7 6a15 	vldr	s13, [r7, #84]	@ 0x54
 8001e6e:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8001e72:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e76:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001e7a:	ed97 7a36 	vldr	s14, [r7, #216]	@ 0xd8
 8001e7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
 8001e88:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001e8c:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8001e90:	eef1 7a67 	vneg.f32	s15, s15
 8001e94:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e98:	edd7 6a15 	vldr	s13, [r7, #84]	@ 0x54
 8001e9c:	ed97 6a13 	vldr	s12, [r7, #76]	@ 0x4c
 8001ea0:	edd7 7a39 	vldr	s15, [r7, #228]	@ 0xe4
 8001ea4:	ee76 7a27 	vadd.f32	s15, s12, s15
 8001ea8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001eac:	ee77 6a27 	vadd.f32	s13, s14, s15
 8001eb0:	ed97 7a36 	vldr	s14, [r7, #216]	@ 0xd8
 8001eb4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
 8001ebe:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8001ec2:	edd7 6a1b 	vldr	s13, [r7, #108]	@ 0x6c
 8001ec6:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8001eca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001ece:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ed2:	edd7 6a18 	vldr	s13, [r7, #96]	@ 0x60
 8001ed6:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8001eda:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ede:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001ee2:	ed97 7a36 	vldr	s14, [r7, #216]	@ 0xd8
 8001ee6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
 8001ef0:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8001ef4:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8001ef8:	eef1 7a67 	vneg.f32	s15, s15
 8001efc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f00:	edd7 6a18 	vldr	s13, [r7, #96]	@ 0x60
 8001f04:	ed97 6a13 	vldr	s12, [r7, #76]	@ 0x4c
 8001f08:	edd7 7a39 	vldr	s15, [r7, #228]	@ 0xe4
 8001f0c:	ee76 7a27 	vadd.f32	s15, s12, s15
 8001f10:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f14:	ee77 6a27 	vadd.f32	s13, s14, s15
 8001f18:	ed97 7a36 	vldr	s14, [r7, #216]	@ 0xd8
 8001f1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
 8001f26:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 8001f2a:	edd7 6a1b 	vldr	s13, [r7, #108]	@ 0x6c
 8001f2e:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8001f32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f36:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f3a:	edd7 6a1b 	vldr	s13, [r7, #108]	@ 0x6c
 8001f3e:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8001f42:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f46:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001f4a:	ed97 7a36 	vldr	s14, [r7, #216]	@ 0xd8
 8001f4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
 8001f58:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 8001f5c:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8001f60:	eef1 7a67 	vneg.f32	s15, s15
 8001f64:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f68:	edd7 6a1b 	vldr	s13, [r7, #108]	@ 0x6c
 8001f6c:	ed97 6a13 	vldr	s12, [r7, #76]	@ 0x4c
 8001f70:	edd7 7a39 	vldr	s15, [r7, #228]	@ 0xe4
 8001f74:	ee76 7a27 	vadd.f32	s15, s12, s15
 8001f78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f7c:	ee77 6a27 	vadd.f32	s13, s14, s15
 8001f80:	ed97 7a36 	vldr	s14, [r7, #216]	@ 0xd8
 8001f84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
 8001f8e:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001f98:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001f9c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001fa0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 8001faa:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8001fae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fb2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fb6:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
 8001fba:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001fc4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001fc8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001fcc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 8001fd6:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8001fda:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fde:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fe2:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
 8001fe6:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001ff0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001ff4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001ff8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 8002002:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8002006:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800200a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800200e:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
 8002012:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800201c:	eef1 7a67 	vneg.f32	s15, s15
 8002020:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002024:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8002028:	ee37 7a27 	vadd.f32	s14, s14, s15
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 8002032:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8002036:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800203a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800203e:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
 8002042:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800204c:	eef1 7a67 	vneg.f32	s15, s15
 8002050:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002054:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8002058:	ee37 7a27 	vadd.f32	s14, s14, s15
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 8002062:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8002066:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800206a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800206e:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
 8002072:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800207c:	eef1 7a67 	vneg.f32	s15, s15
 8002080:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002084:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8002088:	ee37 7a27 	vadd.f32	s14, s14, s15
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 8002092:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8002096:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800209a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800209e:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80020a8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80020ac:	ee37 7a67 	vsub.f32	s14, s14, s15
 80020b0:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 80020b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	edd3 6a0d 	vldr	s13, [r3, #52]	@ 0x34
 80020be:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 80020c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020ca:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80020d4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80020d8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80020dc:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 80020e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	edd3 6a0d 	vldr	s13, [r3, #52]	@ 0x34
 80020ea:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 80020ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020f6:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8002100:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002104:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002108:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 800210c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	edd3 6a0d 	vldr	s13, [r3, #52]	@ 0x34
 8002116:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 800211a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800211e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002122:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
 8002126:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800212a:	3301      	adds	r3, #1
 800212c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8002130:	2300      	movs	r3, #0
 8002132:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8002136:	e023      	b.n	8002180 <calculate_gain+0x454>
 8002138:	08013388 	.word	0x08013388
 800213c:	2b8cbccc 	.word	0x2b8cbccc
 8002140:	68fa      	ldr	r2, [r7, #12]
 8002142:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8002146:	3308      	adds	r3, #8
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	4413      	add	r3, r2
 800214c:	3304      	adds	r3, #4
 800214e:	ed93 7a00 	vldr	s14, [r3]
 8002152:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	33f8      	adds	r3, #248	@ 0xf8
 800215a:	443b      	add	r3, r7
 800215c:	3b64      	subs	r3, #100	@ 0x64
 800215e:	edd3 7a00 	vldr	s15, [r3]
 8002162:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002166:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	33f8      	adds	r3, #248	@ 0xf8
 800216e:	443b      	add	r3, r7
 8002170:	3be8      	subs	r3, #232	@ 0xe8
 8002172:	edc3 7a00 	vstr	s15, [r3]
 8002176:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800217a:	3301      	adds	r3, #1
 800217c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8002180:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8002184:	2b05      	cmp	r3, #5
 8002186:	dddb      	ble.n	8002140 <calculate_gain+0x414>
 8002188:	f107 0310 	add.w	r3, r7, #16
 800218c:	2206      	movs	r2, #6
 800218e:	2101      	movs	r1, #1
 8002190:	4618      	mov	r0, r3
 8002192:	f001 fa61 	bl	8003658 <matrix_norm_sq>
 8002196:	ed87 0a35 	vstr	s0, [r7, #212]	@ 0xd4
 800219a:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800219e:	2206      	movs	r2, #6
 80021a0:	2101      	movs	r1, #1
 80021a2:	4618      	mov	r0, r3
 80021a4:	f001 fa58 	bl	8003658 <matrix_norm_sq>
 80021a8:	ed87 0a34 	vstr	s0, [r7, #208]	@ 0xd0
 80021ac:	edd7 7a34 	vldr	s15, [r7, #208]	@ 0xd0
 80021b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80021b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021b8:	dd0c      	ble.n	80021d4 <calculate_gain+0x4a8>
 80021ba:	edd7 6a35 	vldr	s13, [r7, #212]	@ 0xd4
 80021be:	ed97 7a34 	vldr	s14, [r7, #208]	@ 0xd0
 80021c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021c6:	ed1f 7a23 	vldr	s14, [pc, #-140]	@ 800213c <calculate_gain+0x410>
 80021ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021d2:	d41c      	bmi.n	800220e <calculate_gain+0x4e2>
 80021d4:	2300      	movs	r3, #0
 80021d6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80021da:	e013      	b.n	8002204 <calculate_gain+0x4d8>
 80021dc:	68fa      	ldr	r2, [r7, #12]
 80021de:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80021e2:	3308      	adds	r3, #8
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	4413      	add	r3, r2
 80021e8:	3304      	adds	r3, #4
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	33f8      	adds	r3, #248	@ 0xf8
 80021f4:	443b      	add	r3, r7
 80021f6:	3b64      	subs	r3, #100	@ 0x64
 80021f8:	601a      	str	r2, [r3, #0]
 80021fa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80021fe:	3301      	adds	r3, #1
 8002200:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002204:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8002208:	2b05      	cmp	r3, #5
 800220a:	dde7      	ble.n	80021dc <calculate_gain+0x4b0>
 800220c:	e5ea      	b.n	8001de4 <calculate_gain+0xb8>
 800220e:	bf00      	nop
 8002210:	37f8      	adds	r7, #248	@ 0xf8
 8002212:	46bd      	mov	sp, r7
 8002214:	bdb0      	pop	{r4, r5, r7, pc}
 8002216:	bf00      	nop

08002218 <KalmanFilter_init>:
 8002218:	b580      	push	{r7, lr}
 800221a:	b088      	sub	sp, #32
 800221c:	af00      	add	r7, sp, #0
 800221e:	6178      	str	r0, [r7, #20]
 8002220:	ed87 0a04 	vstr	s0, [r7, #16]
 8002224:	edc7 0a03 	vstr	s1, [r7, #12]
 8002228:	ed87 1a02 	vstr	s2, [r7, #8]
 800222c:	edc7 1a01 	vstr	s3, [r7, #4]
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002236:	601a      	str	r2, [r3, #0]
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	693a      	ldr	r2, [r7, #16]
 800223c:	605a      	str	r2, [r3, #4]
 800223e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002242:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002246:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800224a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	edc3 7a02 	vstr	s15, [r3, #8]
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	f04f 0200 	mov.w	r2, #0
 800225a:	60da      	str	r2, [r3, #12]
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002262:	611a      	str	r2, [r3, #16]
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	693a      	ldr	r2, [r7, #16]
 8002268:	615a      	str	r2, [r3, #20]
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	f04f 0200 	mov.w	r2, #0
 8002270:	619a      	str	r2, [r3, #24]
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	f04f 0200 	mov.w	r2, #0
 8002278:	61da      	str	r2, [r3, #28]
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002280:	621a      	str	r2, [r3, #32]
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	2201      	movs	r2, #1
 8002286:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 800228a:	2300      	movs	r3, #0
 800228c:	61fb      	str	r3, [r7, #28]
 800228e:	e013      	b.n	80022b8 <KalmanFilter_init+0xa0>
 8002290:	697a      	ldr	r2, [r7, #20]
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	3312      	adds	r3, #18
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	4413      	add	r3, r2
 800229a:	f04f 0200 	mov.w	r2, #0
 800229e:	601a      	str	r2, [r3, #0]
 80022a0:	697a      	ldr	r2, [r7, #20]
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	330e      	adds	r3, #14
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	4413      	add	r3, r2
 80022aa:	3304      	adds	r3, #4
 80022ac:	f04f 0200 	mov.w	r2, #0
 80022b0:	601a      	str	r2, [r3, #0]
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	3301      	adds	r3, #1
 80022b6:	61fb      	str	r3, [r7, #28]
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	dde8      	ble.n	8002290 <KalmanFilter_init+0x78>
 80022be:	2300      	movs	r3, #0
 80022c0:	61bb      	str	r3, [r7, #24]
 80022c2:	e00b      	b.n	80022dc <KalmanFilter_init+0xc4>
 80022c4:	697a      	ldr	r2, [r7, #20]
 80022c6:	69bb      	ldr	r3, [r7, #24]
 80022c8:	3308      	adds	r3, #8
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	4413      	add	r3, r2
 80022ce:	3304      	adds	r3, #4
 80022d0:	f04f 0200 	mov.w	r2, #0
 80022d4:	601a      	str	r2, [r3, #0]
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	3301      	adds	r3, #1
 80022da:	61bb      	str	r3, [r7, #24]
 80022dc:	69bb      	ldr	r3, [r7, #24]
 80022de:	2b05      	cmp	r3, #5
 80022e0:	ddf0      	ble.n	80022c4 <KalmanFilter_init+0xac>
 80022e2:	ed97 1a01 	vldr	s2, [r7, #4]
 80022e6:	edd7 0a02 	vldr	s1, [r7, #8]
 80022ea:	ed97 0a03 	vldr	s0, [r7, #12]
 80022ee:	6978      	ldr	r0, [r7, #20]
 80022f0:	f7ff fd1c 	bl	8001d2c <calculate_gain>
 80022f4:	bf00      	nop
 80022f6:	3720      	adds	r7, #32
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}

080022fc <KalmanFilter_step>:
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b08e      	sub	sp, #56	@ 0x38
 8002300:	af02      	add	r7, sp, #8
 8002302:	60f8      	str	r0, [r7, #12]
 8002304:	ed87 0a02 	vstr	s0, [r7, #8]
 8002308:	edc7 0a01 	vstr	s1, [r7, #4]
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002312:	2b00      	cmp	r3, #0
 8002314:	d006      	beq.n	8002324 <KalmanFilter_step+0x28>
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2200      	movs	r2, #0
 800231a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	649a      	str	r2, [r3, #72]	@ 0x48
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 800232a:	ed97 7a01 	vldr	s14, [r7, #4]
 800232e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002332:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 800233c:	ed97 7a02 	vldr	s14, [r7, #8]
 8002340:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002344:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
 8002348:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800234c:	eef0 7ae7 	vabs.f32	s15, s15
 8002350:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002354:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002358:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800235c:	dd21      	ble.n	80023a2 <KalmanFilter_step+0xa6>
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8002364:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8002448 <KalmanFilter_step+0x14c>
 8002368:	eef4 7ac7 	vcmpe.f32	s15, s14
 800236c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002370:	dd17      	ble.n	80023a2 <KalmanFilter_step+0xa6>
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8002378:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800244c <KalmanFilter_step+0x150>
 800237c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002384:	d50d      	bpl.n	80023a2 <KalmanFilter_step+0xa6>
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 800238c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002394:	d505      	bpl.n	80023a2 <KalmanFilter_step+0xa6>
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	687a      	ldr	r2, [r7, #4]
 800239a:	649a      	str	r2, [r3, #72]	@ 0x48
 800239c:	f04f 0300 	mov.w	r3, #0
 80023a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80023a2:	edd7 7a01 	vldr	s15, [r7, #4]
 80023a6:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8002450 <KalmanFilter_step+0x154>
 80023aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023b2:	dd02      	ble.n	80023ba <KalmanFilter_step+0xbe>
 80023b4:	f04f 0300 	mov.w	r3, #0
 80023b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80023ba:	68f8      	ldr	r0, [r7, #12]
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 80023c8:	2301      	movs	r3, #1
 80023ca:	9301      	str	r3, [sp, #4]
 80023cc:	2303      	movs	r3, #3
 80023ce:	9300      	str	r3, [sp, #0]
 80023d0:	2303      	movs	r3, #3
 80023d2:	f001 f8a3 	bl	800351c <matrix_multiply>
 80023d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023d8:	61fb      	str	r3, [r7, #28]
 80023da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023dc:	623b      	str	r3, [r7, #32]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 80023e4:	f107 0210 	add.w	r2, r7, #16
 80023e8:	f107 011c 	add.w	r1, r7, #28
 80023ec:	2301      	movs	r3, #1
 80023ee:	9301      	str	r3, [sp, #4]
 80023f0:	2302      	movs	r3, #2
 80023f2:	9300      	str	r3, [sp, #0]
 80023f4:	2303      	movs	r3, #3
 80023f6:	f001 f891 	bl	800351c <matrix_multiply>
 80023fa:	2300      	movs	r3, #0
 80023fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80023fe:	e01a      	b.n	8002436 <KalmanFilter_step+0x13a>
 8002400:	68fa      	ldr	r2, [r7, #12]
 8002402:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002404:	330e      	adds	r3, #14
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	4413      	add	r3, r2
 800240a:	3304      	adds	r3, #4
 800240c:	ed93 7a00 	vldr	s14, [r3]
 8002410:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	3330      	adds	r3, #48	@ 0x30
 8002416:	443b      	add	r3, r7
 8002418:	3b20      	subs	r3, #32
 800241a:	edd3 7a00 	vldr	s15, [r3]
 800241e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002422:	68fa      	ldr	r2, [r7, #12]
 8002424:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002426:	3312      	adds	r3, #18
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	4413      	add	r3, r2
 800242c:	edc3 7a00 	vstr	s15, [r3]
 8002430:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002432:	3301      	adds	r3, #1
 8002434:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002436:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002438:	2b02      	cmp	r3, #2
 800243a:	dde1      	ble.n	8002400 <KalmanFilter_step+0x104>
 800243c:	bf00      	nop
 800243e:	bf00      	nop
 8002440:	3730      	adds	r7, #48	@ 0x30
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	43960000 	.word	0x43960000
 800244c:	43c80000 	.word	0x43c80000
 8002450:	463b8000 	.word	0x463b8000

08002454 <debug_print>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
extern void debug_print(const char *format, ...) {
 8002454:	b40f      	push	{r0, r1, r2, r3}
 8002456:	b580      	push	{r7, lr}
 8002458:	b0c2      	sub	sp, #264	@ 0x108
 800245a:	af00      	add	r7, sp, #0
    char buf[PRINT_BUFFER_SIZE];
    va_list  args;
    va_start(args, format);
 800245c:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 8002460:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002464:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002468:	601a      	str	r2, [r3, #0]
    int len = vsnprintf(buf, sizeof(buf), format, args);
 800246a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800246e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002472:	1d38      	adds	r0, r7, #4
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 800247a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800247e:	f00d fed3 	bl	8010228 <vsniprintf>
 8002482:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
    va_end(args);
    if (len <= 0) {
 8002486:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800248a:	2b00      	cmp	r3, #0
 800248c:	dd0f      	ble.n	80024ae <debug_print+0x5a>
        return;
    }
    if (len > (PRINT_BUFFER_SIZE - 1)) {
 800248e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002492:	2bff      	cmp	r3, #255	@ 0xff
 8002494:	dd02      	ble.n	800249c <debug_print+0x48>
        len = PRINT_BUFFER_SIZE - 1;
 8002496:	23ff      	movs	r3, #255	@ 0xff
 8002498:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }
    CDC_Transmit_FS((uint8_t*)buf, (uint16_t)len);
 800249c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80024a0:	b29a      	uxth	r2, r3
 80024a2:	1d3b      	adds	r3, r7, #4
 80024a4:	4611      	mov	r1, r2
 80024a6:	4618      	mov	r0, r3
 80024a8:	f00c fd2c 	bl	800ef04 <CDC_Transmit_FS>
 80024ac:	e000      	b.n	80024b0 <debug_print+0x5c>
        return;
 80024ae:	bf00      	nop
}
 80024b0:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80024b4:	46bd      	mov	sp, r7
 80024b6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80024ba:	b004      	add	sp, #16
 80024bc:	4770      	bx	lr
	...

080024c0 <channel_fire>:

void channel_fire(uint8_t index) {
 80024c0:	b590      	push	{r4, r7, lr}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	4603      	mov	r3, r0
 80024c8:	71fb      	strb	r3, [r7, #7]
	if (index >= CHANNEL_COUNT) return;
 80024ca:	79fb      	ldrb	r3, [r7, #7]
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d81f      	bhi.n	8002510 <channel_fire+0x50>
	pyros[index].firing = true;
 80024d0:	79fb      	ldrb	r3, [r7, #7]
 80024d2:	4a11      	ldr	r2, [pc, #68]	@ (8002518 <channel_fire+0x58>)
 80024d4:	011b      	lsls	r3, r3, #4
 80024d6:	4413      	add	r3, r2
 80024d8:	330c      	adds	r3, #12
 80024da:	2201      	movs	r2, #1
 80024dc:	701a      	strb	r2, [r3, #0]
	pyros[index].fire_time = HAL_GetTick();
 80024de:	79fc      	ldrb	r4, [r7, #7]
 80024e0:	f001 f942 	bl	8003768 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	490c      	ldr	r1, [pc, #48]	@ (8002518 <channel_fire+0x58>)
 80024e8:	0123      	lsls	r3, r4, #4
 80024ea:	440b      	add	r3, r1
 80024ec:	3308      	adds	r3, #8
 80024ee:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(pyros[index].port, pyros[index].pin, GPIO_PIN_SET);
 80024f0:	79fb      	ldrb	r3, [r7, #7]
 80024f2:	4a09      	ldr	r2, [pc, #36]	@ (8002518 <channel_fire+0x58>)
 80024f4:	011b      	lsls	r3, r3, #4
 80024f6:	4413      	add	r3, r2
 80024f8:	6818      	ldr	r0, [r3, #0]
 80024fa:	79fb      	ldrb	r3, [r7, #7]
 80024fc:	4a06      	ldr	r2, [pc, #24]	@ (8002518 <channel_fire+0x58>)
 80024fe:	011b      	lsls	r3, r3, #4
 8002500:	4413      	add	r3, r2
 8002502:	3304      	adds	r3, #4
 8002504:	881b      	ldrh	r3, [r3, #0]
 8002506:	2201      	movs	r2, #1
 8002508:	4619      	mov	r1, r3
 800250a:	f001 fe61 	bl	80041d0 <HAL_GPIO_WritePin>
 800250e:	e000      	b.n	8002512 <channel_fire+0x52>
	if (index >= CHANNEL_COUNT) return;
 8002510:	bf00      	nop
}
 8002512:	370c      	adds	r7, #12
 8002514:	46bd      	mov	sp, r7
 8002516:	bd90      	pop	{r4, r7, pc}
 8002518:	20000000 	.word	0x20000000

0800251c <channel_update>:

void channel_update(void) {
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
	uint32_t now = HAL_GetTick();
 8002522:	f001 f921 	bl	8003768 <HAL_GetTick>
 8002526:	6038      	str	r0, [r7, #0]
	for (uint8_t i = 0; i < CHANNEL_COUNT; i++) {
 8002528:	2300      	movs	r3, #0
 800252a:	71fb      	strb	r3, [r7, #7]
 800252c:	e02b      	b.n	8002586 <channel_update+0x6a>
		if (pyros[i].firing && (now - pyros[i].fire_time >= CHANNEL_FIRE_TIME)) {
 800252e:	79fb      	ldrb	r3, [r7, #7]
 8002530:	4a19      	ldr	r2, [pc, #100]	@ (8002598 <channel_update+0x7c>)
 8002532:	011b      	lsls	r3, r3, #4
 8002534:	4413      	add	r3, r2
 8002536:	330c      	adds	r3, #12
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d020      	beq.n	8002580 <channel_update+0x64>
 800253e:	79fb      	ldrb	r3, [r7, #7]
 8002540:	4a15      	ldr	r2, [pc, #84]	@ (8002598 <channel_update+0x7c>)
 8002542:	011b      	lsls	r3, r3, #4
 8002544:	4413      	add	r3, r2
 8002546:	3308      	adds	r3, #8
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	683a      	ldr	r2, [r7, #0]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002552:	d315      	bcc.n	8002580 <channel_update+0x64>
			pyros[i].firing = false;
 8002554:	79fb      	ldrb	r3, [r7, #7]
 8002556:	4a10      	ldr	r2, [pc, #64]	@ (8002598 <channel_update+0x7c>)
 8002558:	011b      	lsls	r3, r3, #4
 800255a:	4413      	add	r3, r2
 800255c:	330c      	adds	r3, #12
 800255e:	2200      	movs	r2, #0
 8002560:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(pyros[i].port, pyros[i].pin, GPIO_PIN_RESET);
 8002562:	79fb      	ldrb	r3, [r7, #7]
 8002564:	4a0c      	ldr	r2, [pc, #48]	@ (8002598 <channel_update+0x7c>)
 8002566:	011b      	lsls	r3, r3, #4
 8002568:	4413      	add	r3, r2
 800256a:	6818      	ldr	r0, [r3, #0]
 800256c:	79fb      	ldrb	r3, [r7, #7]
 800256e:	4a0a      	ldr	r2, [pc, #40]	@ (8002598 <channel_update+0x7c>)
 8002570:	011b      	lsls	r3, r3, #4
 8002572:	4413      	add	r3, r2
 8002574:	3304      	adds	r3, #4
 8002576:	881b      	ldrh	r3, [r3, #0]
 8002578:	2200      	movs	r2, #0
 800257a:	4619      	mov	r1, r3
 800257c:	f001 fe28 	bl	80041d0 <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i < CHANNEL_COUNT; i++) {
 8002580:	79fb      	ldrb	r3, [r7, #7]
 8002582:	3301      	adds	r3, #1
 8002584:	71fb      	strb	r3, [r7, #7]
 8002586:	79fb      	ldrb	r3, [r7, #7]
 8002588:	2b01      	cmp	r3, #1
 800258a:	d9d0      	bls.n	800252e <channel_update+0x12>

		}
	}
}
 800258c:	bf00      	nop
 800258e:	bf00      	nop
 8002590:	3708      	adds	r7, #8
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	20000000 	.word	0x20000000

0800259c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80025a2:	f001 f8b6 	bl	8003712 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80025a6:	f000 f8a7 	bl	80026f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025aa:	f000 f96d 	bl	8002888 <MX_GPIO_Init>
  MX_FDCAN2_Init();
 80025ae:	f000 f8e5 	bl	800277c <MX_FDCAN2_Init>
  MX_SPI1_Init();
 80025b2:	f000 f92b 	bl	800280c <MX_SPI1_Init>
  MX_USB_Device_Init();
 80025b6:	f00c fbe7 	bl	800ed88 <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(ACCEL_nCS_GPIO_Port, ACCEL_nCS_Pin, GPIO_PIN_SET);
 80025ba:	2201      	movs	r2, #1
 80025bc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80025c0:	4839      	ldr	r0, [pc, #228]	@ (80026a8 <main+0x10c>)
 80025c2:	f001 fe05 	bl	80041d0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GYRO_nCS_GPIO_Port, GYRO_nCS_Pin, GPIO_PIN_SET);
 80025c6:	2201      	movs	r2, #1
 80025c8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80025cc:	4836      	ldr	r0, [pc, #216]	@ (80026a8 <main+0x10c>)
 80025ce:	f001 fdff 	bl	80041d0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(FLASH_nCS_GPIO_Port, FLASH_nCS_Pin, GPIO_PIN_SET);
 80025d2:	2201      	movs	r2, #1
 80025d4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80025d8:	4833      	ldr	r0, [pc, #204]	@ (80026a8 <main+0x10c>)
 80025da:	f001 fdf9 	bl	80041d0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BARO_nCS_GPIO_Port, BARO_nCS_Pin, GPIO_PIN_SET);
 80025de:	2201      	movs	r2, #1
 80025e0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80025e4:	4830      	ldr	r0, [pc, #192]	@ (80026a8 <main+0x10c>)
 80025e6:	f001 fdf3 	bl	80041d0 <HAL_GPIO_WritePin>
  HAL_Delay(4000);
 80025ea:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 80025ee:	f001 f8c7 	bl	8003780 <HAL_Delay>
  HAL_GPIO_WritePin(Backlight_GPIO_Port, Backlight_Pin, GPIO_PIN_SET);
 80025f2:	2201      	movs	r2, #1
 80025f4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80025f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80025fc:	f001 fde8 	bl	80041d0 <HAL_GPIO_WritePin>

  HAL_Delay(15000);
 8002600:	f643 2098 	movw	r0, #15000	@ 0x3a98
 8002604:	f001 f8bc 	bl	8003780 <HAL_Delay>
  channel_fire(SEPARATION_INDEX);
 8002608:	2000      	movs	r0, #0
 800260a:	f7ff ff59 	bl	80024c0 <channel_fire>

  bmi088_init(&imu, &hspi1, ACCEL_nCS_GPIO_Port, GYRO_nCS_GPIO_Port, ACCEL_nCS_Pin, GYRO_nCS_Pin);
 800260e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002612:	9301      	str	r3, [sp, #4]
 8002614:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002618:	9300      	str	r3, [sp, #0]
 800261a:	4b23      	ldr	r3, [pc, #140]	@ (80026a8 <main+0x10c>)
 800261c:	4a22      	ldr	r2, [pc, #136]	@ (80026a8 <main+0x10c>)
 800261e:	4923      	ldr	r1, [pc, #140]	@ (80026ac <main+0x110>)
 8002620:	4823      	ldr	r0, [pc, #140]	@ (80026b0 <main+0x114>)
 8002622:	f7fe fbb9 	bl	8000d98 <bmi088_init>
  bmp_init(&baro, &hspi1, BARO_nCS_GPIO_Port, BARO_nCS_Pin);
 8002626:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800262a:	4a1f      	ldr	r2, [pc, #124]	@ (80026a8 <main+0x10c>)
 800262c:	491f      	ldr	r1, [pc, #124]	@ (80026ac <main+0x110>)
 800262e:	4821      	ldr	r0, [pc, #132]	@ (80026b4 <main+0x118>)
 8002630:	f7ff f930 	bl	8001894 <bmp_init>
  KalmanFilter_init(&kf, KALMAN_PERIOD, ALTITUDE_SIGMA, ACCELERATION_SIGMA, MODEL_SIGMA);
 8002634:	eef7 1a00 	vmov.f32	s3, #112	@ 0x3f800000  1.0
 8002638:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 800263c:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8002640:	ed9f 0a1d 	vldr	s0, [pc, #116]	@ 80026b8 <main+0x11c>
 8002644:	481d      	ldr	r0, [pc, #116]	@ (80026bc <main+0x120>)
 8002646:	f7ff fde7 	bl	8002218 <KalmanFilter_init>
  HAL_FDCAN_Start(&hfdcan2);
 800264a:	481d      	ldr	r0, [pc, #116]	@ (80026c0 <main+0x124>)
 800264c:	f001 faf4 	bl	8003c38 <HAL_FDCAN_Start>
//  log_setup();
//  log_start();
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002650:	f008 ff28 	bl	800b4a4 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of sensorData */
  sensorDataHandle = osMutexNew(&sensorData_attributes);
 8002654:	481b      	ldr	r0, [pc, #108]	@ (80026c4 <main+0x128>)
 8002656:	f009 f85e 	bl	800b716 <osMutexNew>
 800265a:	4603      	mov	r3, r0
 800265c:	4a1a      	ldr	r2, [pc, #104]	@ (80026c8 <main+0x12c>)
 800265e:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of messageQueue */
  messageQueueHandle = osMessageQueueNew (16, sizeof(LogMessage), &messageQueue_attributes);
 8002660:	4a1a      	ldr	r2, [pc, #104]	@ (80026cc <main+0x130>)
 8002662:	2138      	movs	r1, #56	@ 0x38
 8002664:	2010      	movs	r0, #16
 8002666:	f009 f964 	bl	800b932 <osMessageQueueNew>
 800266a:	4603      	mov	r3, r0
 800266c:	4a18      	ldr	r2, [pc, #96]	@ (80026d0 <main+0x134>)
 800266e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of sendMessage */
  sendMessageHandle = osThreadNew(StartSendMessage, NULL, &sendMessage_attributes);
 8002670:	4a18      	ldr	r2, [pc, #96]	@ (80026d4 <main+0x138>)
 8002672:	2100      	movs	r1, #0
 8002674:	4818      	ldr	r0, [pc, #96]	@ (80026d8 <main+0x13c>)
 8002676:	f008 ff74 	bl	800b562 <osThreadNew>
 800267a:	4603      	mov	r3, r0
 800267c:	4a17      	ldr	r2, [pc, #92]	@ (80026dc <main+0x140>)
 800267e:	6013      	str	r3, [r2, #0]

  /* creation of deploymentTask */
  deploymentTaskHandle = osThreadNew(StartDeployment, NULL, &deploymentTask_attributes);
 8002680:	4a17      	ldr	r2, [pc, #92]	@ (80026e0 <main+0x144>)
 8002682:	2100      	movs	r1, #0
 8002684:	4817      	ldr	r0, [pc, #92]	@ (80026e4 <main+0x148>)
 8002686:	f008 ff6c 	bl	800b562 <osThreadNew>
 800268a:	4603      	mov	r3, r0
 800268c:	4a16      	ldr	r2, [pc, #88]	@ (80026e8 <main+0x14c>)
 800268e:	6013      	str	r3, [r2, #0]

  /* creation of readSensors */
  readSensorsHandle = osThreadNew(StartReadSensors, NULL, &readSensors_attributes);
 8002690:	4a16      	ldr	r2, [pc, #88]	@ (80026ec <main+0x150>)
 8002692:	2100      	movs	r1, #0
 8002694:	4816      	ldr	r0, [pc, #88]	@ (80026f0 <main+0x154>)
 8002696:	f008 ff64 	bl	800b562 <osThreadNew>
 800269a:	4603      	mov	r3, r0
 800269c:	4a15      	ldr	r2, [pc, #84]	@ (80026f4 <main+0x158>)
 800269e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80026a0:	f008 ff24 	bl	800b4ec <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80026a4:	bf00      	nop
 80026a6:	e7fd      	b.n	80026a4 <main+0x108>
 80026a8:	48000400 	.word	0x48000400
 80026ac:	200003f0 	.word	0x200003f0
 80026b0:	20000468 	.word	0x20000468
 80026b4:	200004b0 	.word	0x200004b0
 80026b8:	3dcccccd 	.word	0x3dcccccd
 80026bc:	20000524 	.word	0x20000524
 80026c0:	2000038c 	.word	0x2000038c
 80026c4:	08013500 	.word	0x08013500
 80026c8:	20000464 	.word	0x20000464
 80026cc:	080134e8 	.word	0x080134e8
 80026d0:	20000460 	.word	0x20000460
 80026d4:	0801347c 	.word	0x0801347c
 80026d8:	08002969 	.word	0x08002969
 80026dc:	20000454 	.word	0x20000454
 80026e0:	080134a0 	.word	0x080134a0
 80026e4:	080029e1 	.word	0x080029e1
 80026e8:	20000458 	.word	0x20000458
 80026ec:	080134c4 	.word	0x080134c4
 80026f0:	08002fad 	.word	0x08002fad
 80026f4:	2000045c 	.word	0x2000045c

080026f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b094      	sub	sp, #80	@ 0x50
 80026fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026fe:	f107 0318 	add.w	r3, r7, #24
 8002702:	2238      	movs	r2, #56	@ 0x38
 8002704:	2100      	movs	r1, #0
 8002706:	4618      	mov	r0, r3
 8002708:	f00d fd9c 	bl	8010244 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800270c:	1d3b      	adds	r3, r7, #4
 800270e:	2200      	movs	r2, #0
 8002710:	601a      	str	r2, [r3, #0]
 8002712:	605a      	str	r2, [r3, #4]
 8002714:	609a      	str	r2, [r3, #8]
 8002716:	60da      	str	r2, [r3, #12]
 8002718:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800271a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800271e:	f003 fa8b 	bl	8005c38 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8002722:	2322      	movs	r3, #34	@ 0x22
 8002724:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002726:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800272a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800272c:	2340      	movs	r3, #64	@ 0x40
 800272e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002730:	2301      	movs	r3, #1
 8002732:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002734:	2300      	movs	r3, #0
 8002736:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002738:	f107 0318 	add.w	r3, r7, #24
 800273c:	4618      	mov	r0, r3
 800273e:	f003 fb2f 	bl	8005da0 <HAL_RCC_OscConfig>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d001      	beq.n	800274c <SystemClock_Config+0x54>
  {
    Error_Handler();
 8002748:	f000 fca8 	bl	800309c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800274c:	230f      	movs	r3, #15
 800274e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002750:	2301      	movs	r3, #1
 8002752:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002754:	2300      	movs	r3, #0
 8002756:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002758:	2300      	movs	r3, #0
 800275a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800275c:	2300      	movs	r3, #0
 800275e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002760:	1d3b      	adds	r3, r7, #4
 8002762:	2100      	movs	r1, #0
 8002764:	4618      	mov	r0, r3
 8002766:	f003 fe2d 	bl	80063c4 <HAL_RCC_ClockConfig>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d001      	beq.n	8002774 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8002770:	f000 fc94 	bl	800309c <Error_Handler>
  }
}
 8002774:	bf00      	nop
 8002776:	3750      	adds	r7, #80	@ 0x50
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}

0800277c <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8002780:	4b20      	ldr	r3, [pc, #128]	@ (8002804 <MX_FDCAN2_Init+0x88>)
 8002782:	4a21      	ldr	r2, [pc, #132]	@ (8002808 <MX_FDCAN2_Init+0x8c>)
 8002784:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8002786:	4b1f      	ldr	r3, [pc, #124]	@ (8002804 <MX_FDCAN2_Init+0x88>)
 8002788:	2200      	movs	r2, #0
 800278a:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 800278c:	4b1d      	ldr	r3, [pc, #116]	@ (8002804 <MX_FDCAN2_Init+0x88>)
 800278e:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8002792:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8002794:	4b1b      	ldr	r3, [pc, #108]	@ (8002804 <MX_FDCAN2_Init+0x88>)
 8002796:	2200      	movs	r2, #0
 8002798:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 800279a:	4b1a      	ldr	r3, [pc, #104]	@ (8002804 <MX_FDCAN2_Init+0x88>)
 800279c:	2200      	movs	r2, #0
 800279e:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 80027a0:	4b18      	ldr	r3, [pc, #96]	@ (8002804 <MX_FDCAN2_Init+0x88>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 80027a6:	4b17      	ldr	r3, [pc, #92]	@ (8002804 <MX_FDCAN2_Init+0x88>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 80027ac:	4b15      	ldr	r3, [pc, #84]	@ (8002804 <MX_FDCAN2_Init+0x88>)
 80027ae:	2201      	movs	r2, #1
 80027b0:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 16;
 80027b2:	4b14      	ldr	r3, [pc, #80]	@ (8002804 <MX_FDCAN2_Init+0x88>)
 80027b4:	2210      	movs	r2, #16
 80027b6:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 63;
 80027b8:	4b12      	ldr	r3, [pc, #72]	@ (8002804 <MX_FDCAN2_Init+0x88>)
 80027ba:	223f      	movs	r2, #63	@ 0x3f
 80027bc:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 16;
 80027be:	4b11      	ldr	r3, [pc, #68]	@ (8002804 <MX_FDCAN2_Init+0x88>)
 80027c0:	2210      	movs	r2, #16
 80027c2:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 80027c4:	4b0f      	ldr	r3, [pc, #60]	@ (8002804 <MX_FDCAN2_Init+0x88>)
 80027c6:	2201      	movs	r2, #1
 80027c8:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 4;
 80027ca:	4b0e      	ldr	r3, [pc, #56]	@ (8002804 <MX_FDCAN2_Init+0x88>)
 80027cc:	2204      	movs	r2, #4
 80027ce:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 13;
 80027d0:	4b0c      	ldr	r3, [pc, #48]	@ (8002804 <MX_FDCAN2_Init+0x88>)
 80027d2:	220d      	movs	r2, #13
 80027d4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 2;
 80027d6:	4b0b      	ldr	r3, [pc, #44]	@ (8002804 <MX_FDCAN2_Init+0x88>)
 80027d8:	2202      	movs	r2, #2
 80027da:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.StdFiltersNbr = 1;
 80027dc:	4b09      	ldr	r3, [pc, #36]	@ (8002804 <MX_FDCAN2_Init+0x88>)
 80027de:	2201      	movs	r2, #1
 80027e0:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.ExtFiltersNbr = 1;
 80027e2:	4b08      	ldr	r3, [pc, #32]	@ (8002804 <MX_FDCAN2_Init+0x88>)
 80027e4:	2201      	movs	r2, #1
 80027e6:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80027e8:	4b06      	ldr	r3, [pc, #24]	@ (8002804 <MX_FDCAN2_Init+0x88>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 80027ee:	4805      	ldr	r0, [pc, #20]	@ (8002804 <MX_FDCAN2_Init+0x88>)
 80027f0:	f001 f8c8 	bl	8003984 <HAL_FDCAN_Init>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d001      	beq.n	80027fe <MX_FDCAN2_Init+0x82>
  {
    Error_Handler();
 80027fa:	f000 fc4f 	bl	800309c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 80027fe:	bf00      	nop
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	2000038c 	.word	0x2000038c
 8002808:	40006800 	.word	0x40006800

0800280c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002810:	4b1b      	ldr	r3, [pc, #108]	@ (8002880 <MX_SPI1_Init+0x74>)
 8002812:	4a1c      	ldr	r2, [pc, #112]	@ (8002884 <MX_SPI1_Init+0x78>)
 8002814:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002816:	4b1a      	ldr	r3, [pc, #104]	@ (8002880 <MX_SPI1_Init+0x74>)
 8002818:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800281c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800281e:	4b18      	ldr	r3, [pc, #96]	@ (8002880 <MX_SPI1_Init+0x74>)
 8002820:	2200      	movs	r2, #0
 8002822:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002824:	4b16      	ldr	r3, [pc, #88]	@ (8002880 <MX_SPI1_Init+0x74>)
 8002826:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800282a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800282c:	4b14      	ldr	r3, [pc, #80]	@ (8002880 <MX_SPI1_Init+0x74>)
 800282e:	2200      	movs	r2, #0
 8002830:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002832:	4b13      	ldr	r3, [pc, #76]	@ (8002880 <MX_SPI1_Init+0x74>)
 8002834:	2200      	movs	r2, #0
 8002836:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002838:	4b11      	ldr	r3, [pc, #68]	@ (8002880 <MX_SPI1_Init+0x74>)
 800283a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800283e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002840:	4b0f      	ldr	r3, [pc, #60]	@ (8002880 <MX_SPI1_Init+0x74>)
 8002842:	2220      	movs	r2, #32
 8002844:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002846:	4b0e      	ldr	r3, [pc, #56]	@ (8002880 <MX_SPI1_Init+0x74>)
 8002848:	2200      	movs	r2, #0
 800284a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800284c:	4b0c      	ldr	r3, [pc, #48]	@ (8002880 <MX_SPI1_Init+0x74>)
 800284e:	2200      	movs	r2, #0
 8002850:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002852:	4b0b      	ldr	r3, [pc, #44]	@ (8002880 <MX_SPI1_Init+0x74>)
 8002854:	2200      	movs	r2, #0
 8002856:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002858:	4b09      	ldr	r3, [pc, #36]	@ (8002880 <MX_SPI1_Init+0x74>)
 800285a:	2207      	movs	r2, #7
 800285c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800285e:	4b08      	ldr	r3, [pc, #32]	@ (8002880 <MX_SPI1_Init+0x74>)
 8002860:	2200      	movs	r2, #0
 8002862:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002864:	4b06      	ldr	r3, [pc, #24]	@ (8002880 <MX_SPI1_Init+0x74>)
 8002866:	2208      	movs	r2, #8
 8002868:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800286a:	4805      	ldr	r0, [pc, #20]	@ (8002880 <MX_SPI1_Init+0x74>)
 800286c:	f004 fa1e 	bl	8006cac <HAL_SPI_Init>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d001      	beq.n	800287a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002876:	f000 fc11 	bl	800309c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800287a:	bf00      	nop
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	200003f0 	.word	0x200003f0
 8002884:	40013000 	.word	0x40013000

08002888 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b08a      	sub	sp, #40	@ 0x28
 800288c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800288e:	f107 0314 	add.w	r3, r7, #20
 8002892:	2200      	movs	r2, #0
 8002894:	601a      	str	r2, [r3, #0]
 8002896:	605a      	str	r2, [r3, #4]
 8002898:	609a      	str	r2, [r3, #8]
 800289a:	60da      	str	r2, [r3, #12]
 800289c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800289e:	4b30      	ldr	r3, [pc, #192]	@ (8002960 <MX_GPIO_Init+0xd8>)
 80028a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028a2:	4a2f      	ldr	r2, [pc, #188]	@ (8002960 <MX_GPIO_Init+0xd8>)
 80028a4:	f043 0304 	orr.w	r3, r3, #4
 80028a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80028aa:	4b2d      	ldr	r3, [pc, #180]	@ (8002960 <MX_GPIO_Init+0xd8>)
 80028ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028ae:	f003 0304 	and.w	r3, r3, #4
 80028b2:	613b      	str	r3, [r7, #16]
 80028b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80028b6:	4b2a      	ldr	r3, [pc, #168]	@ (8002960 <MX_GPIO_Init+0xd8>)
 80028b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028ba:	4a29      	ldr	r2, [pc, #164]	@ (8002960 <MX_GPIO_Init+0xd8>)
 80028bc:	f043 0320 	orr.w	r3, r3, #32
 80028c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80028c2:	4b27      	ldr	r3, [pc, #156]	@ (8002960 <MX_GPIO_Init+0xd8>)
 80028c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028c6:	f003 0320 	and.w	r3, r3, #32
 80028ca:	60fb      	str	r3, [r7, #12]
 80028cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028ce:	4b24      	ldr	r3, [pc, #144]	@ (8002960 <MX_GPIO_Init+0xd8>)
 80028d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028d2:	4a23      	ldr	r2, [pc, #140]	@ (8002960 <MX_GPIO_Init+0xd8>)
 80028d4:	f043 0301 	orr.w	r3, r3, #1
 80028d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80028da:	4b21      	ldr	r3, [pc, #132]	@ (8002960 <MX_GPIO_Init+0xd8>)
 80028dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028de:	f003 0301 	and.w	r3, r3, #1
 80028e2:	60bb      	str	r3, [r7, #8]
 80028e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80028e6:	4b1e      	ldr	r3, [pc, #120]	@ (8002960 <MX_GPIO_Init+0xd8>)
 80028e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028ea:	4a1d      	ldr	r2, [pc, #116]	@ (8002960 <MX_GPIO_Init+0xd8>)
 80028ec:	f043 0302 	orr.w	r3, r3, #2
 80028f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80028f2:	4b1b      	ldr	r3, [pc, #108]	@ (8002960 <MX_GPIO_Init+0xd8>)
 80028f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028f6:	f003 0302 	and.w	r3, r3, #2
 80028fa:	607b      	str	r3, [r7, #4]
 80028fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ACCEL_nCS_Pin|GYRO_nCS_Pin|BARO_nCS_Pin|FLASH_nCS_Pin
 80028fe:	2200      	movs	r2, #0
 8002900:	f64f 0180 	movw	r1, #63616	@ 0xf880
 8002904:	4817      	ldr	r0, [pc, #92]	@ (8002964 <MX_GPIO_Init+0xdc>)
 8002906:	f001 fc63 	bl	80041d0 <HAL_GPIO_WritePin>
                          |PIRANHA_Pin|RAPTOR_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, STATUS_LED_Pin|Backlight_Pin, GPIO_PIN_RESET);
 800290a:	2200      	movs	r2, #0
 800290c:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8002910:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002914:	f001 fc5c 	bl	80041d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ACCEL_nCS_Pin GYRO_nCS_Pin BARO_nCS_Pin FLASH_nCS_Pin
                           PIRANHA_Pin RAPTOR_Pin */
  GPIO_InitStruct.Pin = ACCEL_nCS_Pin|GYRO_nCS_Pin|BARO_nCS_Pin|FLASH_nCS_Pin
 8002918:	f64f 0380 	movw	r3, #63616	@ 0xf880
 800291c:	617b      	str	r3, [r7, #20]
                          |PIRANHA_Pin|RAPTOR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800291e:	2301      	movs	r3, #1
 8002920:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002922:	2300      	movs	r3, #0
 8002924:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002926:	2300      	movs	r3, #0
 8002928:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800292a:	f107 0314 	add.w	r3, r7, #20
 800292e:	4619      	mov	r1, r3
 8002930:	480c      	ldr	r0, [pc, #48]	@ (8002964 <MX_GPIO_Init+0xdc>)
 8002932:	f001 facb 	bl	8003ecc <HAL_GPIO_Init>

  /*Configure GPIO pins : STATUS_LED_Pin Backlight_Pin */
  GPIO_InitStruct.Pin = STATUS_LED_Pin|Backlight_Pin;
 8002936:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800293a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800293c:	2301      	movs	r3, #1
 800293e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002940:	2300      	movs	r3, #0
 8002942:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002944:	2300      	movs	r3, #0
 8002946:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002948:	f107 0314 	add.w	r3, r7, #20
 800294c:	4619      	mov	r1, r3
 800294e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002952:	f001 fabb 	bl	8003ecc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002956:	bf00      	nop
 8002958:	3728      	adds	r7, #40	@ 0x28
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	40021000 	.word	0x40021000
 8002964:	48000400 	.word	0x48000400

08002968 <StartSendMessage>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartSendMessage */
void StartSendMessage(void *argument)
{
 8002968:	b5b0      	push	{r4, r5, r7, lr}
 800296a:	b0aa      	sub	sp, #168	@ 0xa8
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
    // Prepare a CAN-FD Tx header
    FDCAN_TxHeaderTypeDef txHeader = {
 8002970:	4b18      	ldr	r3, [pc, #96]	@ (80029d4 <StartSendMessage+0x6c>)
 8002972:	f107 0484 	add.w	r4, r7, #132	@ 0x84
 8002976:	461d      	mov	r5, r3
 8002978:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800297a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800297c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800297e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002980:	682b      	ldr	r3, [r5, #0]
 8002982:	6023      	str	r3, [r4, #0]

    for (;;)
    {
        LogMessage msg;
        // wait forever for one LogMessage to arrive
        if (osMessageQueueGet(messageQueueHandle, &msg, NULL, osWaitForever) == osOK)
 8002984:	4b14      	ldr	r3, [pc, #80]	@ (80029d8 <StartSendMessage+0x70>)
 8002986:	6818      	ldr	r0, [r3, #0]
 8002988:	f107 010c 	add.w	r1, r7, #12
 800298c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002990:	2200      	movs	r2, #0
 8002992:	f009 f8a1 	bl	800bad8 <osMessageQueueGet>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d116      	bne.n	80029ca <StartSendMessage+0x62>
        {
            // zero the buffer & copy in the packed struct
            memset(txBuf, 0, sizeof(txBuf));
 800299c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80029a0:	2240      	movs	r2, #64	@ 0x40
 80029a2:	2100      	movs	r1, #0
 80029a4:	4618      	mov	r0, r3
 80029a6:	f00d fc4d 	bl	8010244 <memset>
            memcpy(txBuf, &msg, sizeof(msg));
 80029aa:	f107 010c 	add.w	r1, r7, #12
 80029ae:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80029b2:	2238      	movs	r2, #56	@ 0x38
 80029b4:	4618      	mov	r0, r3
 80029b6:	f00d fcd4 	bl	8010362 <memcpy>

            // attempt to enqueue onto the TX FIFO
            HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &txHeader, txBuf);
 80029ba:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 80029be:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80029c2:	4619      	mov	r1, r3
 80029c4:	4805      	ldr	r0, [pc, #20]	@ (80029dc <StartSendMessage+0x74>)
 80029c6:	f001 f95f 	bl	8003c88 <HAL_FDCAN_AddMessageToTxFifoQ>
        }

        osDelay(100);
 80029ca:	2064      	movs	r0, #100	@ 0x64
 80029cc:	f008 fe5b 	bl	800b686 <osDelay>
    {
 80029d0:	e7d8      	b.n	8002984 <StartSendMessage+0x1c>
 80029d2:	bf00      	nop
 80029d4:	080133f8 	.word	0x080133f8
 80029d8:	20000460 	.word	0x20000460
 80029dc:	2000038c 	.word	0x2000038c

080029e0 <StartDeployment>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDeployment */
void StartDeployment(void *argument)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b0ae      	sub	sp, #184	@ 0xb8
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDeployment */

	FlightPhase phase = Startup;
 80029e8:	2300      	movs	r3, #0
 80029ea:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
	uint32_t land_time = 0;
 80029ee:	2300      	movs	r3, #0
 80029f0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
	bool send_now = true;
 80029f4:	2301      	movs	r3, #1
 80029f6:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
	static int    alt_idx    = 0, alt_cnt    = 0;
	static bool   alt_ready  = false;
	static float  alt_zero   = 0.0f;

	// for fixed 100 ms period
	uint32_t next_wake = osKernelGetTickCount() + 100;
 80029fa:	f008 fd9d 	bl	800b538 <osKernelGetTickCount>
 80029fe:	4603      	mov	r3, r0
 8002a00:	3364      	adds	r3, #100	@ 0x64
 8002a02:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
	  /* Infinite loop */
	for(;;) {
		uint32_t now = HAL_GetTick();
 8002a06:	f000 feaf 	bl	8003768 <HAL_GetTick>
 8002a0a:	67f8      	str	r0, [r7, #124]	@ 0x7c
        float raw_altitude;
        float current_pressure;
        int16_t current_temp;

        // grab sensors
        if (osMutexAcquire(sensorDataHandle, osWaitForever) == osOK) {
 8002a0c:	4bb7      	ldr	r3, [pc, #732]	@ (8002cec <StartDeployment+0x30c>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002a14:	4618      	mov	r0, r3
 8002a16:	f008 ff04 	bl	800b822 <osMutexAcquire>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d13e      	bne.n	8002a9e <StartDeployment+0xbe>
            memcpy(currentAccel, accelData, sizeof(accelData));
 8002a20:	4ab3      	ldr	r2, [pc, #716]	@ (8002cf0 <StartDeployment+0x310>)
 8002a22:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002a26:	ca07      	ldmia	r2, {r0, r1, r2}
 8002a28:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            memcpy(currentGyro, gyroData, sizeof(gyroData));
 8002a2c:	4ab1      	ldr	r2, [pc, #708]	@ (8002cf4 <StartDeployment+0x314>)
 8002a2e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002a32:	ca07      	ldmia	r2, {r0, r1, r2}
 8002a34:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            raw_altitude = baro_altitude;
 8002a38:	4baf      	ldr	r3, [pc, #700]	@ (8002cf8 <StartDeployment+0x318>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	67bb      	str	r3, [r7, #120]	@ 0x78
            current_pressure = pressure;
 8002a3e:	4baf      	ldr	r3, [pc, #700]	@ (8002cfc <StartDeployment+0x31c>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	677b      	str	r3, [r7, #116]	@ 0x74
            current_temp = temp;
 8002a44:	4bae      	ldr	r3, [pc, #696]	@ (8002d00 <StartDeployment+0x320>)
 8002a46:	881b      	ldrh	r3, [r3, #0]
 8002a48:	f8a7 3072 	strh.w	r3, [r7, #114]	@ 0x72
            osMutexRelease(sensorDataHandle);
 8002a4c:	4ba7      	ldr	r3, [pc, #668]	@ (8002cec <StartDeployment+0x30c>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4618      	mov	r0, r3
 8002a52:	f008 ff31 	bl	800b8b8 <osMutexRelease>
            continue;
        }

        // compute accel magnitude
        float accel_mag = sqrtf(
            currentAccel[0]*currentAccel[0] +
 8002a56:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8002a5a:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8002a5e:	ee27 7a27 	vmul.f32	s14, s14, s15
            currentAccel[1]*currentAccel[1] +
 8002a62:	edd7 6a15 	vldr	s13, [r7, #84]	@ 0x54
 8002a66:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8002a6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
            currentAccel[0]*currentAccel[0] +
 8002a6e:	ee37 7a27 	vadd.f32	s14, s14, s15
            currentAccel[2]*currentAccel[2]
 8002a72:	edd7 6a16 	vldr	s13, [r7, #88]	@ 0x58
 8002a76:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8002a7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
        float accel_mag = sqrtf(
 8002a7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a82:	eeb0 0a67 	vmov.f32	s0, s15
 8002a86:	f00f fd97 	bl	80125b8 <sqrtf>
 8002a8a:	ed87 0a1b 	vstr	s0, [r7, #108]	@ 0x6c
        );

        // —— update trimmed-mean baselines ——
        if (!grav_ready) {
 8002a8e:	4b9d      	ldr	r3, [pc, #628]	@ (8002d04 <StartDeployment+0x324>)
 8002a90:	781b      	ldrb	r3, [r3, #0]
 8002a92:	f083 0301 	eor.w	r3, r3, #1
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d078      	beq.n	8002b8e <StartDeployment+0x1ae>
 8002a9c:	e009      	b.n	8002ab2 <StartDeployment+0xd2>
            osDelayUntil(next_wake);
 8002a9e:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 8002aa2:	f008 fe0b 	bl	800b6bc <osDelayUntil>
            next_wake += 100;
 8002aa6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002aaa:	3364      	adds	r3, #100	@ 0x64
 8002aac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
            continue;
 8002ab0:	e270      	b.n	8002f94 <StartDeployment+0x5b4>
            grav_buf[grav_idx++] = accel_mag;
 8002ab2:	4b95      	ldr	r3, [pc, #596]	@ (8002d08 <StartDeployment+0x328>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	1c5a      	adds	r2, r3, #1
 8002ab8:	4993      	ldr	r1, [pc, #588]	@ (8002d08 <StartDeployment+0x328>)
 8002aba:	600a      	str	r2, [r1, #0]
 8002abc:	4a93      	ldr	r2, [pc, #588]	@ (8002d0c <StartDeployment+0x32c>)
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	4413      	add	r3, r2
 8002ac2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002ac4:	601a      	str	r2, [r3, #0]
            if (grav_idx >= BASELINE_SAMPLES) grav_idx = 0;
 8002ac6:	4b90      	ldr	r3, [pc, #576]	@ (8002d08 <StartDeployment+0x328>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	2b09      	cmp	r3, #9
 8002acc:	dd02      	ble.n	8002ad4 <StartDeployment+0xf4>
 8002ace:	4b8e      	ldr	r3, [pc, #568]	@ (8002d08 <StartDeployment+0x328>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	601a      	str	r2, [r3, #0]
            if (++grav_cnt >= BASELINE_SAMPLES) {
 8002ad4:	4b8e      	ldr	r3, [pc, #568]	@ (8002d10 <StartDeployment+0x330>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	3301      	adds	r3, #1
 8002ada:	4a8d      	ldr	r2, [pc, #564]	@ (8002d10 <StartDeployment+0x330>)
 8002adc:	6013      	str	r3, [r2, #0]
 8002ade:	4b8c      	ldr	r3, [pc, #560]	@ (8002d10 <StartDeployment+0x330>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	2b09      	cmp	r3, #9
 8002ae4:	dd53      	ble.n	8002b8e <StartDeployment+0x1ae>
                // compute trimmed mean
                float sum = 0, mn = grav_buf[0], mx = grav_buf[0];
 8002ae6:	f04f 0300 	mov.w	r3, #0
 8002aea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8002aee:	4b87      	ldr	r3, [pc, #540]	@ (8002d0c <StartDeployment+0x32c>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002af6:	4b85      	ldr	r3, [pc, #532]	@ (8002d0c <StartDeployment+0x32c>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
                for (int i = 0; i < BASELINE_SAMPLES; i++) {
 8002afe:	2300      	movs	r3, #0
 8002b00:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002b04:	e02b      	b.n	8002b5e <StartDeployment+0x17e>
                    float v = grav_buf[i];
 8002b06:	4a81      	ldr	r2, [pc, #516]	@ (8002d0c <StartDeployment+0x32c>)
 8002b08:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	4413      	add	r3, r2
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	66bb      	str	r3, [r7, #104]	@ 0x68
                    sum += v;
 8002b14:	ed97 7a29 	vldr	s14, [r7, #164]	@ 0xa4
 8002b18:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8002b1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b20:	edc7 7a29 	vstr	s15, [r7, #164]	@ 0xa4
                    if (v < mn) mn = v;
 8002b24:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 8002b28:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 8002b2c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b34:	d502      	bpl.n	8002b3c <StartDeployment+0x15c>
 8002b36:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002b38:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
                    if (v > mx) mx = v;
 8002b3c:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 8002b40:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8002b44:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b4c:	dd02      	ble.n	8002b54 <StartDeployment+0x174>
 8002b4e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002b50:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
                for (int i = 0; i < BASELINE_SAMPLES; i++) {
 8002b54:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002b58:	3301      	adds	r3, #1
 8002b5a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002b5e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002b62:	2b09      	cmp	r3, #9
 8002b64:	ddcf      	ble.n	8002b06 <StartDeployment+0x126>
                }
                grav_zero  = (sum - mn - mx) / (BASELINE_SAMPLES - 2);
 8002b66:	ed97 7a29 	vldr	s14, [r7, #164]	@ 0xa4
 8002b6a:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 8002b6e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b72:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8002b76:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b7a:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 8002b7e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b82:	4b64      	ldr	r3, [pc, #400]	@ (8002d14 <StartDeployment+0x334>)
 8002b84:	edc3 7a00 	vstr	s15, [r3]
                grav_ready = true;
 8002b88:	4b5e      	ldr	r3, [pc, #376]	@ (8002d04 <StartDeployment+0x324>)
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	701a      	strb	r2, [r3, #0]
            }
        }
        if (!alt_ready) {
 8002b8e:	4b62      	ldr	r3, [pc, #392]	@ (8002d18 <StartDeployment+0x338>)
 8002b90:	781b      	ldrb	r3, [r3, #0]
 8002b92:	f083 0301 	eor.w	r3, r3, #1
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d06d      	beq.n	8002c78 <StartDeployment+0x298>
            alt_buf[alt_idx++] = raw_altitude;
 8002b9c:	4b5f      	ldr	r3, [pc, #380]	@ (8002d1c <StartDeployment+0x33c>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	1c5a      	adds	r2, r3, #1
 8002ba2:	495e      	ldr	r1, [pc, #376]	@ (8002d1c <StartDeployment+0x33c>)
 8002ba4:	600a      	str	r2, [r1, #0]
 8002ba6:	4a5e      	ldr	r2, [pc, #376]	@ (8002d20 <StartDeployment+0x340>)
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	4413      	add	r3, r2
 8002bac:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8002bae:	601a      	str	r2, [r3, #0]
            if (alt_idx >= BASELINE_SAMPLES) alt_idx = 0;
 8002bb0:	4b5a      	ldr	r3, [pc, #360]	@ (8002d1c <StartDeployment+0x33c>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2b09      	cmp	r3, #9
 8002bb6:	dd02      	ble.n	8002bbe <StartDeployment+0x1de>
 8002bb8:	4b58      	ldr	r3, [pc, #352]	@ (8002d1c <StartDeployment+0x33c>)
 8002bba:	2200      	movs	r2, #0
 8002bbc:	601a      	str	r2, [r3, #0]
            if (++alt_cnt >= BASELINE_SAMPLES) {
 8002bbe:	4b59      	ldr	r3, [pc, #356]	@ (8002d24 <StartDeployment+0x344>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	4a57      	ldr	r2, [pc, #348]	@ (8002d24 <StartDeployment+0x344>)
 8002bc6:	6013      	str	r3, [r2, #0]
 8002bc8:	4b56      	ldr	r3, [pc, #344]	@ (8002d24 <StartDeployment+0x344>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	2b09      	cmp	r3, #9
 8002bce:	dd53      	ble.n	8002c78 <StartDeployment+0x298>
                float sum = 0, mn = alt_buf[0], mx = alt_buf[0];
 8002bd0:	f04f 0300 	mov.w	r3, #0
 8002bd4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002bd8:	4b51      	ldr	r3, [pc, #324]	@ (8002d20 <StartDeployment+0x340>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002be0:	4b4f      	ldr	r3, [pc, #316]	@ (8002d20 <StartDeployment+0x340>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
                for (int i = 0; i < BASELINE_SAMPLES; i++) {
 8002be8:	2300      	movs	r3, #0
 8002bea:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002bee:	e02b      	b.n	8002c48 <StartDeployment+0x268>
                    float v = alt_buf[i];
 8002bf0:	4a4b      	ldr	r2, [pc, #300]	@ (8002d20 <StartDeployment+0x340>)
 8002bf2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	4413      	add	r3, r2
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	667b      	str	r3, [r7, #100]	@ 0x64
                    sum += v;
 8002bfe:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 8002c02:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8002c06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c0a:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
                    if (v < mn) mn = v;
 8002c0e:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 8002c12:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8002c16:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c1e:	d502      	bpl.n	8002c26 <StartDeployment+0x246>
 8002c20:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002c22:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
                    if (v > mx) mx = v;
 8002c26:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 8002c2a:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8002c2e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c36:	dd02      	ble.n	8002c3e <StartDeployment+0x25e>
 8002c38:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002c3a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
                for (int i = 0; i < BASELINE_SAMPLES; i++) {
 8002c3e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002c42:	3301      	adds	r3, #1
 8002c44:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002c48:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002c4c:	2b09      	cmp	r3, #9
 8002c4e:	ddcf      	ble.n	8002bf0 <StartDeployment+0x210>
                }
                alt_zero  = (sum - mn - mx) / (BASELINE_SAMPLES - 2);
 8002c50:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 8002c54:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8002c58:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002c5c:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8002c60:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002c64:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 8002c68:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c6c:	4b2e      	ldr	r3, [pc, #184]	@ (8002d28 <StartDeployment+0x348>)
 8002c6e:	edc3 7a00 	vstr	s15, [r3]
                alt_ready = true;
 8002c72:	4b29      	ldr	r3, [pc, #164]	@ (8002d18 <StartDeployment+0x338>)
 8002c74:	2201      	movs	r2, #1
 8002c76:	701a      	strb	r2, [r3, #0]
            }
        }

        // don’t proceed until both baselines are locked in
        if (!grav_ready || !alt_ready) {
 8002c78:	4b22      	ldr	r3, [pc, #136]	@ (8002d04 <StartDeployment+0x324>)
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	f083 0301 	eor.w	r3, r3, #1
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d106      	bne.n	8002c94 <StartDeployment+0x2b4>
 8002c86:	4b24      	ldr	r3, [pc, #144]	@ (8002d18 <StartDeployment+0x338>)
 8002c88:	781b      	ldrb	r3, [r3, #0]
 8002c8a:	f083 0301 	eor.w	r3, r3, #1
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d009      	beq.n	8002ca8 <StartDeployment+0x2c8>
            osDelayUntil(next_wake);
 8002c94:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 8002c98:	f008 fd10 	bl	800b6bc <osDelayUntil>
            next_wake += 100;
 8002c9c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002ca0:	3364      	adds	r3, #100	@ 0x64
 8002ca2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
            continue;
 8002ca6:	e175      	b.n	8002f94 <StartDeployment+0x5b4>
        }

        // once baselines ready, transition to Idle (first time only)
        if (phase == Startup) {
 8002ca8:	f897 30b7 	ldrb.w	r3, [r7, #183]	@ 0xb7
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d102      	bne.n	8002cb6 <StartDeployment+0x2d6>
            phase = Idle;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
        }

        // subtract baselines to get net accel & relative alt
        float net_accel = accel_mag - grav_zero;
 8002cb6:	4b17      	ldr	r3, [pc, #92]	@ (8002d14 <StartDeployment+0x334>)
 8002cb8:	edd3 7a00 	vldr	s15, [r3]
 8002cbc:	ed97 7a1b 	vldr	s14, [r7, #108]	@ 0x6c
 8002cc0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cc4:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
        float rel_alt   = raw_altitude - alt_zero;
 8002cc8:	4b17      	ldr	r3, [pc, #92]	@ (8002d28 <StartDeployment+0x348>)
 8002cca:	edd3 7a00 	vldr	s15, [r3]
 8002cce:	ed97 7a1e 	vldr	s14, [r7, #120]	@ 0x78
 8002cd2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cd6:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c

        channel_update();
 8002cda:	f7ff fc1f 	bl	800251c <channel_update>

        // check pyro channels
        bool any_channel_firing = false;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
        for (int i = 0; i < CHANNEL_COUNT; i++) {
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002cea:	e031      	b.n	8002d50 <StartDeployment+0x370>
 8002cec:	20000464 	.word	0x20000464
 8002cf0:	20000498 	.word	0x20000498
 8002cf4:	200004a4 	.word	0x200004a4
 8002cf8:	2000051c 	.word	0x2000051c
 8002cfc:	20000518 	.word	0x20000518
 8002d00:	20000520 	.word	0x20000520
 8002d04:	2000057c 	.word	0x2000057c
 8002d08:	20000580 	.word	0x20000580
 8002d0c:	20000584 	.word	0x20000584
 8002d10:	200005ac 	.word	0x200005ac
 8002d14:	200005b0 	.word	0x200005b0
 8002d18:	200005b4 	.word	0x200005b4
 8002d1c:	200005b8 	.word	0x200005b8
 8002d20:	200005bc 	.word	0x200005bc
 8002d24:	200005e4 	.word	0x200005e4
 8002d28:	200005e8 	.word	0x200005e8
            if (pyros[i].firing) { any_channel_firing = true; break; }
 8002d2c:	4a9a      	ldr	r2, [pc, #616]	@ (8002f98 <StartDeployment+0x5b8>)
 8002d2e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002d32:	011b      	lsls	r3, r3, #4
 8002d34:	4413      	add	r3, r2
 8002d36:	330c      	adds	r3, #12
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d003      	beq.n	8002d46 <StartDeployment+0x366>
 8002d3e:	2301      	movs	r3, #1
 8002d40:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8002d44:	e008      	b.n	8002d58 <StartDeployment+0x378>
        for (int i = 0; i < CHANNEL_COUNT; i++) {
 8002d46:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002d4a:	3301      	adds	r3, #1
 8002d4c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002d50:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	dde9      	ble.n	8002d2c <StartDeployment+0x34c>
        }

        // feed Kalman
        if (isfinite(net_accel) && isfinite(rel_alt) && !any_channel_firing) {
 8002d58:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8002d5c:	eef0 7ae7 	vabs.f32	s15, s15
 8002d60:	ed9f 7a8e 	vldr	s14, [pc, #568]	@ 8002f9c <StartDeployment+0x5bc>
 8002d64:	eef4 7a47 	vcmp.f32	s15, s14
 8002d68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d6c:	bf8c      	ite	hi
 8002d6e:	2301      	movhi	r3, #1
 8002d70:	2300      	movls	r3, #0
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	f083 0301 	eor.w	r3, r3, #1
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d020      	beq.n	8002dc0 <StartDeployment+0x3e0>
 8002d7e:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8002d82:	eef0 7ae7 	vabs.f32	s15, s15
 8002d86:	ed9f 7a85 	vldr	s14, [pc, #532]	@ 8002f9c <StartDeployment+0x5bc>
 8002d8a:	eef4 7a47 	vcmp.f32	s15, s14
 8002d8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d92:	bf8c      	ite	hi
 8002d94:	2301      	movhi	r3, #1
 8002d96:	2300      	movls	r3, #0
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	f083 0301 	eor.w	r3, r3, #1
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d00d      	beq.n	8002dc0 <StartDeployment+0x3e0>
 8002da4:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8002da8:	f083 0301 	eor.w	r3, r3, #1
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d006      	beq.n	8002dc0 <StartDeployment+0x3e0>
            KalmanFilter_step(&kf, net_accel, rel_alt);
 8002db2:	edd7 0a17 	vldr	s1, [r7, #92]	@ 0x5c
 8002db6:	ed97 0a18 	vldr	s0, [r7, #96]	@ 0x60
 8002dba:	4879      	ldr	r0, [pc, #484]	@ (8002fa0 <StartDeployment+0x5c0>)
 8002dbc:	f7ff fa9e 	bl	80022fc <KalmanFilter_step>
        }

        // flight‐phase state machine
        switch (phase) {
 8002dc0:	f897 30b7 	ldrb.w	r3, [r7, #183]	@ 0xb7
 8002dc4:	3b01      	subs	r3, #1
 8002dc6:	2b03      	cmp	r3, #3
 8002dc8:	f200 809d 	bhi.w	8002f06 <StartDeployment+0x526>
 8002dcc:	a201      	add	r2, pc, #4	@ (adr r2, 8002dd4 <StartDeployment+0x3f4>)
 8002dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dd2:	bf00      	nop
 8002dd4:	08002de5 	.word	0x08002de5
 8002dd8:	08002e1f 	.word	0x08002e1f
 8002ddc:	08002e45 	.word	0x08002e45
 8002de0:	08002e7f 	.word	0x08002e7f
            case Idle:
                if (kf.est[1] > LAUNCH_VELOCITY && kf.est[2] > LAUNCH_ACCEL) {
 8002de4:	4b6e      	ldr	r3, [pc, #440]	@ (8002fa0 <StartDeployment+0x5c0>)
 8002de6:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8002dea:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 8002dee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002df2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002df6:	dc00      	bgt.n	8002dfa <StartDeployment+0x41a>
                    phase         = Launched;
//                    log_start();
                    send_now      = true;
                }
                break;
 8002df8:	e088      	b.n	8002f0c <StartDeployment+0x52c>
                if (kf.est[1] > LAUNCH_VELOCITY && kf.est[2] > LAUNCH_ACCEL) {
 8002dfa:	4b69      	ldr	r3, [pc, #420]	@ (8002fa0 <StartDeployment+0x5c0>)
 8002dfc:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 8002e00:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8002e04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e0c:	dc00      	bgt.n	8002e10 <StartDeployment+0x430>
                break;
 8002e0e:	e07d      	b.n	8002f0c <StartDeployment+0x52c>
                    phase         = Launched;
 8002e10:	2302      	movs	r3, #2
 8002e12:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
                    send_now      = true;
 8002e16:	2301      	movs	r3, #1
 8002e18:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
                break;
 8002e1c:	e076      	b.n	8002f0c <StartDeployment+0x52c>
            case Launched:
                if (kf.est[1] < 0) {
 8002e1e:	4b60      	ldr	r3, [pc, #384]	@ (8002fa0 <StartDeployment+0x5c0>)
 8002e20:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8002e24:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002e28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e2c:	d400      	bmi.n	8002e30 <StartDeployment+0x450>
                    channel_fire(SEPARATION_INDEX);
                    phase        = DescendingAfterSeparation;
                    send_now     = true;
                }
                break;
 8002e2e:	e06d      	b.n	8002f0c <StartDeployment+0x52c>
                    channel_fire(SEPARATION_INDEX);
 8002e30:	2000      	movs	r0, #0
 8002e32:	f7ff fb45 	bl	80024c0 <channel_fire>
                    phase        = DescendingAfterSeparation;
 8002e36:	2303      	movs	r3, #3
 8002e38:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
                    send_now     = true;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
                break;
 8002e42:	e063      	b.n	8002f0c <StartDeployment+0x52c>
            case DescendingAfterSeparation:
                if (kf.est[0] < REEFING_ALTITUDE &&
 8002e44:	4b56      	ldr	r3, [pc, #344]	@ (8002fa0 <StartDeployment+0x5c0>)
 8002e46:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8002e4a:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 8002fa4 <StartDeployment+0x5c4>
 8002e4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e56:	d400      	bmi.n	8002e5a <StartDeployment+0x47a>
                    (now - pyros[SEPARATION_INDEX].fire_time) > 3000) {
                    channel_fire(REEFING_INDEX);
                    phase    = DescendingAfterReefing;
                    send_now = true;
                }
                break;
 8002e58:	e057      	b.n	8002f0a <StartDeployment+0x52a>
                    (now - pyros[SEPARATION_INDEX].fire_time) > 3000) {
 8002e5a:	4b4f      	ldr	r3, [pc, #316]	@ (8002f98 <StartDeployment+0x5b8>)
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8002e60:	1ad3      	subs	r3, r2, r3
                if (kf.est[0] < REEFING_ALTITUDE &&
 8002e62:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d94f      	bls.n	8002f0a <StartDeployment+0x52a>
                    channel_fire(REEFING_INDEX);
 8002e6a:	2001      	movs	r0, #1
 8002e6c:	f7ff fb28 	bl	80024c0 <channel_fire>
                    phase    = DescendingAfterReefing;
 8002e70:	2304      	movs	r3, #4
 8002e72:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
                    send_now = true;
 8002e76:	2301      	movs	r3, #1
 8002e78:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
                break;
 8002e7c:	e045      	b.n	8002f0a <StartDeployment+0x52a>
            case DescendingAfterReefing:
                if (kf.est[0] < LANDED_ALTITUDE &&
 8002e7e:	4b48      	ldr	r3, [pc, #288]	@ (8002fa0 <StartDeployment+0x5c0>)
 8002e80:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8002e84:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002e88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e90:	d533      	bpl.n	8002efa <StartDeployment+0x51a>
                    fabsf(kf.est[1]) < LANDED_VELOCITY &&
 8002e92:	4b43      	ldr	r3, [pc, #268]	@ (8002fa0 <StartDeployment+0x5c0>)
 8002e94:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8002e98:	eef0 7ae7 	vabs.f32	s15, s15
                if (kf.est[0] < LANDED_ALTITUDE &&
 8002e9c:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8002ea0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ea4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ea8:	d527      	bpl.n	8002efa <StartDeployment+0x51a>
                    fabsf(kf.est[2]) < LANDED_ACCEL) {
 8002eaa:	4b3d      	ldr	r3, [pc, #244]	@ (8002fa0 <StartDeployment+0x5c0>)
 8002eac:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 8002eb0:	eef0 7ae7 	vabs.f32	s15, s15
                    fabsf(kf.est[1]) < LANDED_VELOCITY &&
 8002eb4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002eb8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ebc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ec0:	d51b      	bpl.n	8002efa <StartDeployment+0x51a>
                    if (land_time == 0) {
 8002ec2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d108      	bne.n	8002edc <StartDeployment+0x4fc>
                        land_time = now ? now : 1;
 8002eca:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d001      	beq.n	8002ed4 <StartDeployment+0x4f4>
 8002ed0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002ed2:	e000      	b.n	8002ed6 <StartDeployment+0x4f6>
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
                    if (land_time == 0) {
 8002eda:	e012      	b.n	8002f02 <StartDeployment+0x522>
                    }
                    else if ((now - land_time) >= LANDED_TIME) {
 8002edc:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8002ede:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d90a      	bls.n	8002f02 <StartDeployment+0x522>
                        phase    = Landed;
 8002eec:	2305      	movs	r3, #5
 8002eee:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
//                        log_stop();
                        send_now = true;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
                    if (land_time == 0) {
 8002ef8:	e003      	b.n	8002f02 <StartDeployment+0x522>
                    }
                } else {
                    land_time = 0;
 8002efa:	2300      	movs	r3, #0
 8002efc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
                }
                break;
 8002f00:	e004      	b.n	8002f0c <StartDeployment+0x52c>
                    if (land_time == 0) {
 8002f02:	bf00      	nop
                break;
 8002f04:	e002      	b.n	8002f0c <StartDeployment+0x52c>
            default:
                break;
 8002f06:	bf00      	nop
 8002f08:	e000      	b.n	8002f0c <StartDeployment+0x52c>
                break;
 8002f0a:	bf00      	nop
        }

        HAL_GPIO_TogglePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin);
 8002f0c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002f10:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002f14:	f001 f974 	bl	8004200 <HAL_GPIO_TogglePin>

        LogMessage data;
        data.time_ms = now;
 8002f18:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002f1a:	60fb      	str	r3, [r7, #12]
        data.phase = phase;
 8002f1c:	f897 30b7 	ldrb.w	r3, [r7, #183]	@ 0xb7
 8002f20:	743b      	strb	r3, [r7, #16]
        data.accel_x = currentAccel[0];
 8002f22:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002f24:	627b      	str	r3, [r7, #36]	@ 0x24
        data.accel_y = currentAccel[1];
 8002f26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f28:	62bb      	str	r3, [r7, #40]	@ 0x28
        data.accel_z = currentAccel[2];
 8002f2a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002f2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        data.gyro_x = currentGyro[0];
 8002f2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f30:	633b      	str	r3, [r7, #48]	@ 0x30
        data.gyro_y = currentGyro[1];
 8002f32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002f34:	637b      	str	r3, [r7, #52]	@ 0x34
        data.gyro_z = currentGyro[2];
 8002f36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002f38:	63bb      	str	r3, [r7, #56]	@ 0x38
        data.altitude = raw_altitude;
 8002f3a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002f3c:	623b      	str	r3, [r7, #32]
        data.pressure = current_pressure;
 8002f3e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        data.temp = current_temp;
 8002f42:	f8b7 3072 	ldrh.w	r3, [r7, #114]	@ 0x72
 8002f46:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
        data.kf_pos = kf.est[0];
 8002f4a:	4b15      	ldr	r3, [pc, #84]	@ (8002fa0 <StartDeployment+0x5c0>)
 8002f4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f4e:	617b      	str	r3, [r7, #20]
        data.kf_vel = kf.est[1];
 8002f50:	4b13      	ldr	r3, [pc, #76]	@ (8002fa0 <StartDeployment+0x5c0>)
 8002f52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f54:	61bb      	str	r3, [r7, #24]
        data.kf_accel = kf.est[2];
 8002f56:	4b12      	ldr	r3, [pc, #72]	@ (8002fa0 <StartDeployment+0x5c0>)
 8002f58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f5a:	61fb      	str	r3, [r7, #28]

//        log_add(&data);

        // throttle amount of data being sent
        if (send_now) {
 8002f5c:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d00b      	beq.n	8002f7c <StartDeployment+0x59c>
            osMessageQueuePut(messageQueueHandle, &data, 0, 0);
 8002f64:	4b10      	ldr	r3, [pc, #64]	@ (8002fa8 <StartDeployment+0x5c8>)
 8002f66:	6818      	ldr	r0, [r3, #0]
 8002f68:	f107 010c 	add.w	r1, r7, #12
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f008 fd52 	bl	800ba18 <osMessageQueuePut>
            send_now = false;
 8002f74:	2300      	movs	r3, #0
 8002f76:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
 8002f7a:	e002      	b.n	8002f82 <StartDeployment+0x5a2>
        } else {
            send_now = true;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
        }

        // wait until next 100 ms tick
        osDelayUntil(next_wake);
 8002f82:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 8002f86:	f008 fb99 	bl	800b6bc <osDelayUntil>
        next_wake += 100;
 8002f8a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002f8e:	3364      	adds	r3, #100	@ 0x64
 8002f90:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
	for(;;) {
 8002f94:	e537      	b.n	8002a06 <StartDeployment+0x26>
 8002f96:	bf00      	nop
 8002f98:	20000000 	.word	0x20000000
 8002f9c:	7f7fffff 	.word	0x7f7fffff
 8002fa0:	20000524 	.word	0x20000524
 8002fa4:	449c4000 	.word	0x449c4000
 8002fa8:	20000460 	.word	0x20000460

08002fac <StartReadSensors>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadSensors */
void StartReadSensors(void *argument)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b088      	sub	sp, #32
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReadSensors */
  /* Infinite loop */
	for(;;) {
         accel_step(&imu);
 8002fb4:	4828      	ldr	r0, [pc, #160]	@ (8003058 <StartReadSensors+0xac>)
 8002fb6:	f7fd fff7 	bl	8000fa8 <accel_step>
         gyro_step(&imu);
 8002fba:	4827      	ldr	r0, [pc, #156]	@ (8003058 <StartReadSensors+0xac>)
 8002fbc:	f7fe f860 	bl	8001080 <gyro_step>
		 baro_step(&baro);
 8002fc0:	4826      	ldr	r0, [pc, #152]	@ (800305c <StartReadSensors+0xb0>)
 8002fc2:	f7fe fded 	bl	8001ba0 <baro_step>

		 float *accel = accel_get(&imu);
 8002fc6:	4824      	ldr	r0, [pc, #144]	@ (8003058 <StartReadSensors+0xac>)
 8002fc8:	f7fe f8ca 	bl	8001160 <accel_get>
 8002fcc:	61f8      	str	r0, [r7, #28]
		 float *gyro = gyro_get(&imu);
 8002fce:	4822      	ldr	r0, [pc, #136]	@ (8003058 <StartReadSensors+0xac>)
 8002fd0:	f7fe f8d2 	bl	8001178 <gyro_get>
 8002fd4:	61b8      	str	r0, [r7, #24]
		 float local_pressure = baro_get_pressure(&baro);
 8002fd6:	4821      	ldr	r0, [pc, #132]	@ (800305c <StartReadSensors+0xb0>)
 8002fd8:	f7fe fe98 	bl	8001d0c <baro_get_pressure>
 8002fdc:	ed87 0a05 	vstr	s0, [r7, #20]
		 float local_altitude = baro_get_altitude(&baro);
 8002fe0:	481e      	ldr	r0, [pc, #120]	@ (800305c <StartReadSensors+0xb0>)
 8002fe2:	f7fe fe77 	bl	8001cd4 <baro_get_altitude>
 8002fe6:	ed87 0a04 	vstr	s0, [r7, #16]
		 int16_t local_temp = baro_get_temp(&baro);
 8002fea:	481c      	ldr	r0, [pc, #112]	@ (800305c <StartReadSensors+0xb0>)
 8002fec:	f7fe fe81 	bl	8001cf2 <baro_get_temp>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	81fb      	strh	r3, [r7, #14]

		 osMutexAcquire(sensorDataHandle, osWaitForever);
 8002ff4:	4b1a      	ldr	r3, [pc, #104]	@ (8003060 <StartReadSensors+0xb4>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f008 fc10 	bl	800b822 <osMutexAcquire>

		 accelData[0] = accel[0];
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a17      	ldr	r2, [pc, #92]	@ (8003064 <StartReadSensors+0xb8>)
 8003008:	6013      	str	r3, [r2, #0]
		 accelData[1] = accel[1];
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	4a15      	ldr	r2, [pc, #84]	@ (8003064 <StartReadSensors+0xb8>)
 8003010:	6053      	str	r3, [r2, #4]
		 accelData[2] = accel[2];
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	4a13      	ldr	r2, [pc, #76]	@ (8003064 <StartReadSensors+0xb8>)
 8003018:	6093      	str	r3, [r2, #8]

		 gyroData[0] = gyro[0];
 800301a:	69bb      	ldr	r3, [r7, #24]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a12      	ldr	r2, [pc, #72]	@ (8003068 <StartReadSensors+0xbc>)
 8003020:	6013      	str	r3, [r2, #0]
		 gyroData[1] = gyro[1];
 8003022:	69bb      	ldr	r3, [r7, #24]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	4a10      	ldr	r2, [pc, #64]	@ (8003068 <StartReadSensors+0xbc>)
 8003028:	6053      	str	r3, [r2, #4]
		 gyroData[2] = gyro[2];
 800302a:	69bb      	ldr	r3, [r7, #24]
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	4a0e      	ldr	r2, [pc, #56]	@ (8003068 <StartReadSensors+0xbc>)
 8003030:	6093      	str	r3, [r2, #8]

		 pressure = local_pressure;
 8003032:	4a0e      	ldr	r2, [pc, #56]	@ (800306c <StartReadSensors+0xc0>)
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	6013      	str	r3, [r2, #0]
		 baro_altitude = local_altitude;
 8003038:	4a0d      	ldr	r2, [pc, #52]	@ (8003070 <StartReadSensors+0xc4>)
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	6013      	str	r3, [r2, #0]
		 temp = local_temp;
 800303e:	4a0d      	ldr	r2, [pc, #52]	@ (8003074 <StartReadSensors+0xc8>)
 8003040:	89fb      	ldrh	r3, [r7, #14]
 8003042:	8013      	strh	r3, [r2, #0]

		 osMutexRelease(sensorDataHandle);
 8003044:	4b06      	ldr	r3, [pc, #24]	@ (8003060 <StartReadSensors+0xb4>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4618      	mov	r0, r3
 800304a:	f008 fc35 	bl	800b8b8 <osMutexRelease>

		 osDelay(100);
 800304e:	2064      	movs	r0, #100	@ 0x64
 8003050:	f008 fb19 	bl	800b686 <osDelay>
	for(;;) {
 8003054:	bf00      	nop
 8003056:	e7ad      	b.n	8002fb4 <StartReadSensors+0x8>
 8003058:	20000468 	.word	0x20000468
 800305c:	200004b0 	.word	0x200004b0
 8003060:	20000464 	.word	0x20000464
 8003064:	20000498 	.word	0x20000498
 8003068:	200004a4 	.word	0x200004a4
 800306c:	20000518 	.word	0x20000518
 8003070:	2000051c 	.word	0x2000051c
 8003074:	20000520 	.word	0x20000520

08003078 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b082      	sub	sp, #8
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a04      	ldr	r2, [pc, #16]	@ (8003098 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d101      	bne.n	800308e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800308a:	f000 fb5b 	bl	8003744 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800308e:	bf00      	nop
 8003090:	3708      	adds	r7, #8
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	40012c00 	.word	0x40012c00

0800309c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800309c:	b480      	push	{r7}
 800309e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80030a0:	b672      	cpsid	i
}
 80030a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80030a4:	bf00      	nop
 80030a6:	e7fd      	b.n	80030a4 <Error_Handler+0x8>

080030a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b082      	sub	sp, #8
 80030ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030ae:	4b12      	ldr	r3, [pc, #72]	@ (80030f8 <HAL_MspInit+0x50>)
 80030b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030b2:	4a11      	ldr	r2, [pc, #68]	@ (80030f8 <HAL_MspInit+0x50>)
 80030b4:	f043 0301 	orr.w	r3, r3, #1
 80030b8:	6613      	str	r3, [r2, #96]	@ 0x60
 80030ba:	4b0f      	ldr	r3, [pc, #60]	@ (80030f8 <HAL_MspInit+0x50>)
 80030bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030be:	f003 0301 	and.w	r3, r3, #1
 80030c2:	607b      	str	r3, [r7, #4]
 80030c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80030c6:	4b0c      	ldr	r3, [pc, #48]	@ (80030f8 <HAL_MspInit+0x50>)
 80030c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030ca:	4a0b      	ldr	r2, [pc, #44]	@ (80030f8 <HAL_MspInit+0x50>)
 80030cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80030d2:	4b09      	ldr	r3, [pc, #36]	@ (80030f8 <HAL_MspInit+0x50>)
 80030d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030da:	603b      	str	r3, [r7, #0]
 80030dc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80030de:	2200      	movs	r2, #0
 80030e0:	210f      	movs	r1, #15
 80030e2:	f06f 0001 	mvn.w	r0, #1
 80030e6:	f000 fc25 	bl	8003934 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80030ea:	f002 fe49 	bl	8005d80 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80030ee:	bf00      	nop
 80030f0:	3708      	adds	r7, #8
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	40021000 	.word	0x40021000

080030fc <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b09e      	sub	sp, #120	@ 0x78
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003104:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003108:	2200      	movs	r2, #0
 800310a:	601a      	str	r2, [r3, #0]
 800310c:	605a      	str	r2, [r3, #4]
 800310e:	609a      	str	r2, [r3, #8]
 8003110:	60da      	str	r2, [r3, #12]
 8003112:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003114:	f107 0314 	add.w	r3, r7, #20
 8003118:	2250      	movs	r2, #80	@ 0x50
 800311a:	2100      	movs	r1, #0
 800311c:	4618      	mov	r0, r3
 800311e:	f00d f891 	bl	8010244 <memset>
  if(hfdcan->Instance==FDCAN2)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a1f      	ldr	r2, [pc, #124]	@ (80031a4 <HAL_FDCAN_MspInit+0xa8>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d137      	bne.n	800319c <HAL_FDCAN_MspInit+0xa0>

  /* USER CODE END FDCAN2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800312c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003130:	617b      	str	r3, [r7, #20]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8003132:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003136:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003138:	f107 0314 	add.w	r3, r7, #20
 800313c:	4618      	mov	r0, r3
 800313e:	f003 fb79 	bl	8006834 <HAL_RCCEx_PeriphCLKConfig>
 8003142:	4603      	mov	r3, r0
 8003144:	2b00      	cmp	r3, #0
 8003146:	d001      	beq.n	800314c <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8003148:	f7ff ffa8 	bl	800309c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800314c:	4b16      	ldr	r3, [pc, #88]	@ (80031a8 <HAL_FDCAN_MspInit+0xac>)
 800314e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003150:	4a15      	ldr	r2, [pc, #84]	@ (80031a8 <HAL_FDCAN_MspInit+0xac>)
 8003152:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003156:	6593      	str	r3, [r2, #88]	@ 0x58
 8003158:	4b13      	ldr	r3, [pc, #76]	@ (80031a8 <HAL_FDCAN_MspInit+0xac>)
 800315a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800315c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003160:	613b      	str	r3, [r7, #16]
 8003162:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003164:	4b10      	ldr	r3, [pc, #64]	@ (80031a8 <HAL_FDCAN_MspInit+0xac>)
 8003166:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003168:	4a0f      	ldr	r2, [pc, #60]	@ (80031a8 <HAL_FDCAN_MspInit+0xac>)
 800316a:	f043 0302 	orr.w	r3, r3, #2
 800316e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003170:	4b0d      	ldr	r3, [pc, #52]	@ (80031a8 <HAL_FDCAN_MspInit+0xac>)
 8003172:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003174:	f003 0302 	and.w	r3, r3, #2
 8003178:	60fb      	str	r3, [r7, #12]
 800317a:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN2 GPIO Configuration
    PB5     ------> FDCAN2_RX
    PB6     ------> FDCAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800317c:	2360      	movs	r3, #96	@ 0x60
 800317e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003180:	2302      	movs	r3, #2
 8003182:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003184:	2300      	movs	r3, #0
 8003186:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003188:	2300      	movs	r3, #0
 800318a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 800318c:	2309      	movs	r3, #9
 800318e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003190:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003194:	4619      	mov	r1, r3
 8003196:	4805      	ldr	r0, [pc, #20]	@ (80031ac <HAL_FDCAN_MspInit+0xb0>)
 8003198:	f000 fe98 	bl	8003ecc <HAL_GPIO_Init>

  /* USER CODE END FDCAN2_MspInit 1 */

  }

}
 800319c:	bf00      	nop
 800319e:	3778      	adds	r7, #120	@ 0x78
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	40006800 	.word	0x40006800
 80031a8:	40021000 	.word	0x40021000
 80031ac:	48000400 	.word	0x48000400

080031b0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b08a      	sub	sp, #40	@ 0x28
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031b8:	f107 0314 	add.w	r3, r7, #20
 80031bc:	2200      	movs	r2, #0
 80031be:	601a      	str	r2, [r3, #0]
 80031c0:	605a      	str	r2, [r3, #4]
 80031c2:	609a      	str	r2, [r3, #8]
 80031c4:	60da      	str	r2, [r3, #12]
 80031c6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a17      	ldr	r2, [pc, #92]	@ (800322c <HAL_SPI_MspInit+0x7c>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d128      	bne.n	8003224 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80031d2:	4b17      	ldr	r3, [pc, #92]	@ (8003230 <HAL_SPI_MspInit+0x80>)
 80031d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031d6:	4a16      	ldr	r2, [pc, #88]	@ (8003230 <HAL_SPI_MspInit+0x80>)
 80031d8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80031dc:	6613      	str	r3, [r2, #96]	@ 0x60
 80031de:	4b14      	ldr	r3, [pc, #80]	@ (8003230 <HAL_SPI_MspInit+0x80>)
 80031e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031e2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80031e6:	613b      	str	r3, [r7, #16]
 80031e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031ea:	4b11      	ldr	r3, [pc, #68]	@ (8003230 <HAL_SPI_MspInit+0x80>)
 80031ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031ee:	4a10      	ldr	r2, [pc, #64]	@ (8003230 <HAL_SPI_MspInit+0x80>)
 80031f0:	f043 0301 	orr.w	r3, r3, #1
 80031f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80031f6:	4b0e      	ldr	r3, [pc, #56]	@ (8003230 <HAL_SPI_MspInit+0x80>)
 80031f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031fa:	f003 0301 	and.w	r3, r3, #1
 80031fe:	60fb      	str	r3, [r7, #12]
 8003200:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003202:	23e0      	movs	r3, #224	@ 0xe0
 8003204:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003206:	2302      	movs	r3, #2
 8003208:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800320a:	2300      	movs	r3, #0
 800320c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800320e:	2300      	movs	r3, #0
 8003210:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003212:	2305      	movs	r3, #5
 8003214:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003216:	f107 0314 	add.w	r3, r7, #20
 800321a:	4619      	mov	r1, r3
 800321c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003220:	f000 fe54 	bl	8003ecc <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8003224:	bf00      	nop
 8003226:	3728      	adds	r7, #40	@ 0x28
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}
 800322c:	40013000 	.word	0x40013000
 8003230:	40021000 	.word	0x40021000

08003234 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b08c      	sub	sp, #48	@ 0x30
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800323c:	2300      	movs	r3, #0
 800323e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8003240:	2300      	movs	r3, #0
 8003242:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003244:	4b2c      	ldr	r3, [pc, #176]	@ (80032f8 <HAL_InitTick+0xc4>)
 8003246:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003248:	4a2b      	ldr	r2, [pc, #172]	@ (80032f8 <HAL_InitTick+0xc4>)
 800324a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800324e:	6613      	str	r3, [r2, #96]	@ 0x60
 8003250:	4b29      	ldr	r3, [pc, #164]	@ (80032f8 <HAL_InitTick+0xc4>)
 8003252:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003254:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003258:	60bb      	str	r3, [r7, #8]
 800325a:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800325c:	f107 020c 	add.w	r2, r7, #12
 8003260:	f107 0310 	add.w	r3, r7, #16
 8003264:	4611      	mov	r1, r2
 8003266:	4618      	mov	r0, r3
 8003268:	f003 fa6c 	bl	8006744 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800326c:	f003 fa54 	bl	8006718 <HAL_RCC_GetPCLK2Freq>
 8003270:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003272:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003274:	4a21      	ldr	r2, [pc, #132]	@ (80032fc <HAL_InitTick+0xc8>)
 8003276:	fba2 2303 	umull	r2, r3, r2, r3
 800327a:	0c9b      	lsrs	r3, r3, #18
 800327c:	3b01      	subs	r3, #1
 800327e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8003280:	4b1f      	ldr	r3, [pc, #124]	@ (8003300 <HAL_InitTick+0xcc>)
 8003282:	4a20      	ldr	r2, [pc, #128]	@ (8003304 <HAL_InitTick+0xd0>)
 8003284:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8003286:	4b1e      	ldr	r3, [pc, #120]	@ (8003300 <HAL_InitTick+0xcc>)
 8003288:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800328c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800328e:	4a1c      	ldr	r2, [pc, #112]	@ (8003300 <HAL_InitTick+0xcc>)
 8003290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003292:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8003294:	4b1a      	ldr	r3, [pc, #104]	@ (8003300 <HAL_InitTick+0xcc>)
 8003296:	2200      	movs	r2, #0
 8003298:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800329a:	4b19      	ldr	r3, [pc, #100]	@ (8003300 <HAL_InitTick+0xcc>)
 800329c:	2200      	movs	r2, #0
 800329e:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 80032a0:	4817      	ldr	r0, [pc, #92]	@ (8003300 <HAL_InitTick+0xcc>)
 80032a2:	f004 faa7 	bl	80077f4 <HAL_TIM_Base_Init>
 80032a6:	4603      	mov	r3, r0
 80032a8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80032ac:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d11b      	bne.n	80032ec <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80032b4:	4812      	ldr	r0, [pc, #72]	@ (8003300 <HAL_InitTick+0xcc>)
 80032b6:	f004 faff 	bl	80078b8 <HAL_TIM_Base_Start_IT>
 80032ba:	4603      	mov	r3, r0
 80032bc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80032c0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d111      	bne.n	80032ec <HAL_InitTick+0xb8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80032c8:	2019      	movs	r0, #25
 80032ca:	f000 fb4d 	bl	8003968 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2b0f      	cmp	r3, #15
 80032d2:	d808      	bhi.n	80032e6 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 80032d4:	2200      	movs	r2, #0
 80032d6:	6879      	ldr	r1, [r7, #4]
 80032d8:	2019      	movs	r0, #25
 80032da:	f000 fb2b 	bl	8003934 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80032de:	4a0a      	ldr	r2, [pc, #40]	@ (8003308 <HAL_InitTick+0xd4>)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6013      	str	r3, [r2, #0]
 80032e4:	e002      	b.n	80032ec <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80032ec:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3730      	adds	r7, #48	@ 0x30
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	40021000 	.word	0x40021000
 80032fc:	431bde83 	.word	0x431bde83
 8003300:	200005ec 	.word	0x200005ec
 8003304:	40012c00 	.word	0x40012c00
 8003308:	20000024 	.word	0x20000024

0800330c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800330c:	b480      	push	{r7}
 800330e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003310:	bf00      	nop
 8003312:	e7fd      	b.n	8003310 <NMI_Handler+0x4>

08003314 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003314:	b480      	push	{r7}
 8003316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003318:	bf00      	nop
 800331a:	e7fd      	b.n	8003318 <HardFault_Handler+0x4>

0800331c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800331c:	b480      	push	{r7}
 800331e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003320:	bf00      	nop
 8003322:	e7fd      	b.n	8003320 <MemManage_Handler+0x4>

08003324 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003324:	b480      	push	{r7}
 8003326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003328:	bf00      	nop
 800332a:	e7fd      	b.n	8003328 <BusFault_Handler+0x4>

0800332c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800332c:	b480      	push	{r7}
 800332e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003330:	bf00      	nop
 8003332:	e7fd      	b.n	8003330 <UsageFault_Handler+0x4>

08003334 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003334:	b480      	push	{r7}
 8003336:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003338:	bf00      	nop
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr
	...

08003344 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8003348:	4802      	ldr	r0, [pc, #8]	@ (8003354 <USB_LP_IRQHandler+0x10>)
 800334a:	f001 f863 	bl	8004414 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800334e:	bf00      	nop
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	200122fc 	.word	0x200122fc

08003358 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800335c:	4802      	ldr	r0, [pc, #8]	@ (8003368 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800335e:	f004 fb1b 	bl	8007998 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8003362:	bf00      	nop
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	200005ec 	.word	0x200005ec

0800336c <_getpid>:
 800336c:	b480      	push	{r7}
 800336e:	af00      	add	r7, sp, #0
 8003370:	2301      	movs	r3, #1
 8003372:	4618      	mov	r0, r3
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr

0800337c <_kill>:
 800337c:	b580      	push	{r7, lr}
 800337e:	b082      	sub	sp, #8
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	6039      	str	r1, [r7, #0]
 8003386:	f00c ffbf 	bl	8010308 <__errno>
 800338a:	4603      	mov	r3, r0
 800338c:	2216      	movs	r2, #22
 800338e:	601a      	str	r2, [r3, #0]
 8003390:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003394:	4618      	mov	r0, r3
 8003396:	3708      	adds	r7, #8
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}

0800339c <_exit>:
 800339c:	b580      	push	{r7, lr}
 800339e:	b082      	sub	sp, #8
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	f7ff ffe7 	bl	800337c <_kill>
 80033ae:	bf00      	nop
 80033b0:	e7fd      	b.n	80033ae <_exit+0x12>

080033b2 <_read>:
 80033b2:	b580      	push	{r7, lr}
 80033b4:	b086      	sub	sp, #24
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	60f8      	str	r0, [r7, #12]
 80033ba:	60b9      	str	r1, [r7, #8]
 80033bc:	607a      	str	r2, [r7, #4]
 80033be:	2300      	movs	r3, #0
 80033c0:	617b      	str	r3, [r7, #20]
 80033c2:	e00a      	b.n	80033da <_read+0x28>
 80033c4:	f3af 8000 	nop.w
 80033c8:	4601      	mov	r1, r0
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	1c5a      	adds	r2, r3, #1
 80033ce:	60ba      	str	r2, [r7, #8]
 80033d0:	b2ca      	uxtb	r2, r1
 80033d2:	701a      	strb	r2, [r3, #0]
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	3301      	adds	r3, #1
 80033d8:	617b      	str	r3, [r7, #20]
 80033da:	697a      	ldr	r2, [r7, #20]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	429a      	cmp	r2, r3
 80033e0:	dbf0      	blt.n	80033c4 <_read+0x12>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4618      	mov	r0, r3
 80033e6:	3718      	adds	r7, #24
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}

080033ec <_write>:
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b086      	sub	sp, #24
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	60f8      	str	r0, [r7, #12]
 80033f4:	60b9      	str	r1, [r7, #8]
 80033f6:	607a      	str	r2, [r7, #4]
 80033f8:	2300      	movs	r3, #0
 80033fa:	617b      	str	r3, [r7, #20]
 80033fc:	e009      	b.n	8003412 <_write+0x26>
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	1c5a      	adds	r2, r3, #1
 8003402:	60ba      	str	r2, [r7, #8]
 8003404:	781b      	ldrb	r3, [r3, #0]
 8003406:	4618      	mov	r0, r3
 8003408:	f3af 8000 	nop.w
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	3301      	adds	r3, #1
 8003410:	617b      	str	r3, [r7, #20]
 8003412:	697a      	ldr	r2, [r7, #20]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	429a      	cmp	r2, r3
 8003418:	dbf1      	blt.n	80033fe <_write+0x12>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4618      	mov	r0, r3
 800341e:	3718      	adds	r7, #24
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}

08003424 <_close>:
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003430:	4618      	mov	r0, r3
 8003432:	370c      	adds	r7, #12
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr

0800343c <_fstat>:
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	6039      	str	r1, [r7, #0]
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800344c:	605a      	str	r2, [r3, #4]
 800344e:	2300      	movs	r3, #0
 8003450:	4618      	mov	r0, r3
 8003452:	370c      	adds	r7, #12
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr

0800345c <_isatty>:
 800345c:	b480      	push	{r7}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	2301      	movs	r3, #1
 8003466:	4618      	mov	r0, r3
 8003468:	370c      	adds	r7, #12
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr

08003472 <_lseek>:
 8003472:	b480      	push	{r7}
 8003474:	b085      	sub	sp, #20
 8003476:	af00      	add	r7, sp, #0
 8003478:	60f8      	str	r0, [r7, #12]
 800347a:	60b9      	str	r1, [r7, #8]
 800347c:	607a      	str	r2, [r7, #4]
 800347e:	2300      	movs	r3, #0
 8003480:	4618      	mov	r0, r3
 8003482:	3714      	adds	r7, #20
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr

0800348c <_sbrk>:
 800348c:	b580      	push	{r7, lr}
 800348e:	b086      	sub	sp, #24
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	4a14      	ldr	r2, [pc, #80]	@ (80034e8 <_sbrk+0x5c>)
 8003496:	4b15      	ldr	r3, [pc, #84]	@ (80034ec <_sbrk+0x60>)
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	617b      	str	r3, [r7, #20]
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	613b      	str	r3, [r7, #16]
 80034a0:	4b13      	ldr	r3, [pc, #76]	@ (80034f0 <_sbrk+0x64>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d102      	bne.n	80034ae <_sbrk+0x22>
 80034a8:	4b11      	ldr	r3, [pc, #68]	@ (80034f0 <_sbrk+0x64>)
 80034aa:	4a12      	ldr	r2, [pc, #72]	@ (80034f4 <_sbrk+0x68>)
 80034ac:	601a      	str	r2, [r3, #0]
 80034ae:	4b10      	ldr	r3, [pc, #64]	@ (80034f0 <_sbrk+0x64>)
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4413      	add	r3, r2
 80034b6:	693a      	ldr	r2, [r7, #16]
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d207      	bcs.n	80034cc <_sbrk+0x40>
 80034bc:	f00c ff24 	bl	8010308 <__errno>
 80034c0:	4603      	mov	r3, r0
 80034c2:	220c      	movs	r2, #12
 80034c4:	601a      	str	r2, [r3, #0]
 80034c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80034ca:	e009      	b.n	80034e0 <_sbrk+0x54>
 80034cc:	4b08      	ldr	r3, [pc, #32]	@ (80034f0 <_sbrk+0x64>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	60fb      	str	r3, [r7, #12]
 80034d2:	4b07      	ldr	r3, [pc, #28]	@ (80034f0 <_sbrk+0x64>)
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	4413      	add	r3, r2
 80034da:	4a05      	ldr	r2, [pc, #20]	@ (80034f0 <_sbrk+0x64>)
 80034dc:	6013      	str	r3, [r2, #0]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	4618      	mov	r0, r3
 80034e2:	3718      	adds	r7, #24
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}
 80034e8:	2001c000 	.word	0x2001c000
 80034ec:	00000400 	.word	0x00000400
 80034f0:	20000638 	.word	0x20000638
 80034f4:	20012948 	.word	0x20012948

080034f8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80034f8:	b480      	push	{r7}
 80034fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80034fc:	4b06      	ldr	r3, [pc, #24]	@ (8003518 <SystemInit+0x20>)
 80034fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003502:	4a05      	ldr	r2, [pc, #20]	@ (8003518 <SystemInit+0x20>)
 8003504:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003508:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800350c:	bf00      	nop
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr
 8003516:	bf00      	nop
 8003518:	e000ed00 	.word	0xe000ed00

0800351c <matrix_multiply>:
 800351c:	b480      	push	{r7}
 800351e:	b089      	sub	sp, #36	@ 0x24
 8003520:	af00      	add	r7, sp, #0
 8003522:	60f8      	str	r0, [r7, #12]
 8003524:	60b9      	str	r1, [r7, #8]
 8003526:	607a      	str	r2, [r7, #4]
 8003528:	603b      	str	r3, [r7, #0]
 800352a:	2300      	movs	r3, #0
 800352c:	61fb      	str	r3, [r7, #28]
 800352e:	e052      	b.n	80035d6 <matrix_multiply+0xba>
 8003530:	2300      	movs	r3, #0
 8003532:	61bb      	str	r3, [r7, #24]
 8003534:	e048      	b.n	80035c8 <matrix_multiply+0xac>
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800353a:	fb03 f202 	mul.w	r2, r3, r2
 800353e:	69bb      	ldr	r3, [r7, #24]
 8003540:	4413      	add	r3, r2
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	687a      	ldr	r2, [r7, #4]
 8003546:	4413      	add	r3, r2
 8003548:	f04f 0200 	mov.w	r2, #0
 800354c:	601a      	str	r2, [r3, #0]
 800354e:	2300      	movs	r3, #0
 8003550:	617b      	str	r3, [r7, #20]
 8003552:	e032      	b.n	80035ba <matrix_multiply+0x9e>
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003558:	fb03 f202 	mul.w	r2, r3, r2
 800355c:	69bb      	ldr	r3, [r7, #24]
 800355e:	4413      	add	r3, r2
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	4413      	add	r3, r2
 8003566:	ed93 7a00 	vldr	s14, [r3]
 800356a:	69fb      	ldr	r3, [r7, #28]
 800356c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800356e:	fb03 f202 	mul.w	r2, r3, r2
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	4413      	add	r3, r2
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	68fa      	ldr	r2, [r7, #12]
 800357a:	4413      	add	r3, r2
 800357c:	edd3 6a00 	vldr	s13, [r3]
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003584:	fb03 f202 	mul.w	r2, r3, r2
 8003588:	69bb      	ldr	r3, [r7, #24]
 800358a:	4413      	add	r3, r2
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	68ba      	ldr	r2, [r7, #8]
 8003590:	4413      	add	r3, r2
 8003592:	edd3 7a00 	vldr	s15, [r3]
 8003596:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800359e:	fb03 f202 	mul.w	r2, r3, r2
 80035a2:	69bb      	ldr	r3, [r7, #24]
 80035a4:	4413      	add	r3, r2
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	687a      	ldr	r2, [r7, #4]
 80035aa:	4413      	add	r3, r2
 80035ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035b0:	edc3 7a00 	vstr	s15, [r3]
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	3301      	adds	r3, #1
 80035b8:	617b      	str	r3, [r7, #20]
 80035ba:	697a      	ldr	r2, [r7, #20]
 80035bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035be:	429a      	cmp	r2, r3
 80035c0:	d3c8      	bcc.n	8003554 <matrix_multiply+0x38>
 80035c2:	69bb      	ldr	r3, [r7, #24]
 80035c4:	3301      	adds	r3, #1
 80035c6:	61bb      	str	r3, [r7, #24]
 80035c8:	69ba      	ldr	r2, [r7, #24]
 80035ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d3b2      	bcc.n	8003536 <matrix_multiply+0x1a>
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	3301      	adds	r3, #1
 80035d4:	61fb      	str	r3, [r7, #28]
 80035d6:	69fa      	ldr	r2, [r7, #28]
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	429a      	cmp	r2, r3
 80035dc:	d3a8      	bcc.n	8003530 <matrix_multiply+0x14>
 80035de:	bf00      	nop
 80035e0:	bf00      	nop
 80035e2:	3724      	adds	r7, #36	@ 0x24
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr

080035ec <matrix_transpose>:
 80035ec:	b480      	push	{r7}
 80035ee:	b087      	sub	sp, #28
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	60f8      	str	r0, [r7, #12]
 80035f4:	60b9      	str	r1, [r7, #8]
 80035f6:	607a      	str	r2, [r7, #4]
 80035f8:	603b      	str	r3, [r7, #0]
 80035fa:	2300      	movs	r3, #0
 80035fc:	617b      	str	r3, [r7, #20]
 80035fe:	e020      	b.n	8003642 <matrix_transpose+0x56>
 8003600:	2300      	movs	r3, #0
 8003602:	613b      	str	r3, [r7, #16]
 8003604:	e016      	b.n	8003634 <matrix_transpose+0x48>
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	683a      	ldr	r2, [r7, #0]
 800360a:	fb03 f202 	mul.w	r2, r3, r2
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	4413      	add	r3, r2
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	68fa      	ldr	r2, [r7, #12]
 8003616:	441a      	add	r2, r3
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	6879      	ldr	r1, [r7, #4]
 800361c:	fb03 f101 	mul.w	r1, r3, r1
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	440b      	add	r3, r1
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	68b9      	ldr	r1, [r7, #8]
 8003628:	440b      	add	r3, r1
 800362a:	6812      	ldr	r2, [r2, #0]
 800362c:	601a      	str	r2, [r3, #0]
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	3301      	adds	r3, #1
 8003632:	613b      	str	r3, [r7, #16]
 8003634:	693a      	ldr	r2, [r7, #16]
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	429a      	cmp	r2, r3
 800363a:	d3e4      	bcc.n	8003606 <matrix_transpose+0x1a>
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	3301      	adds	r3, #1
 8003640:	617b      	str	r3, [r7, #20]
 8003642:	697a      	ldr	r2, [r7, #20]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	429a      	cmp	r2, r3
 8003648:	d3da      	bcc.n	8003600 <matrix_transpose+0x14>
 800364a:	bf00      	nop
 800364c:	bf00      	nop
 800364e:	371c      	adds	r7, #28
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr

08003658 <matrix_norm_sq>:
 8003658:	b480      	push	{r7}
 800365a:	b087      	sub	sp, #28
 800365c:	af00      	add	r7, sp, #0
 800365e:	60f8      	str	r0, [r7, #12]
 8003660:	60b9      	str	r1, [r7, #8]
 8003662:	607a      	str	r2, [r7, #4]
 8003664:	f04f 0300 	mov.w	r3, #0
 8003668:	617b      	str	r3, [r7, #20]
 800366a:	2300      	movs	r3, #0
 800366c:	613b      	str	r3, [r7, #16]
 800366e:	e016      	b.n	800369e <matrix_norm_sq+0x46>
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	68fa      	ldr	r2, [r7, #12]
 8003676:	4413      	add	r3, r2
 8003678:	ed93 7a00 	vldr	s14, [r3]
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	68fa      	ldr	r2, [r7, #12]
 8003682:	4413      	add	r3, r2
 8003684:	edd3 7a00 	vldr	s15, [r3]
 8003688:	ee67 7a27 	vmul.f32	s15, s14, s15
 800368c:	ed97 7a05 	vldr	s14, [r7, #20]
 8003690:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003694:	edc7 7a05 	vstr	s15, [r7, #20]
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	3301      	adds	r3, #1
 800369c:	613b      	str	r3, [r7, #16]
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	687a      	ldr	r2, [r7, #4]
 80036a2:	fb02 f303 	mul.w	r3, r2, r3
 80036a6:	693a      	ldr	r2, [r7, #16]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d3e1      	bcc.n	8003670 <matrix_norm_sq+0x18>
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	ee07 3a90 	vmov	s15, r3
 80036b2:	eeb0 0a67 	vmov.f32	s0, s15
 80036b6:	371c      	adds	r7, #28
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr

080036c0 <Reset_Handler>:
 80036c0:	480d      	ldr	r0, [pc, #52]	@ (80036f8 <LoopForever+0x2>)
 80036c2:	4685      	mov	sp, r0
 80036c4:	f7ff ff18 	bl	80034f8 <SystemInit>
 80036c8:	480c      	ldr	r0, [pc, #48]	@ (80036fc <LoopForever+0x6>)
 80036ca:	490d      	ldr	r1, [pc, #52]	@ (8003700 <LoopForever+0xa>)
 80036cc:	4a0d      	ldr	r2, [pc, #52]	@ (8003704 <LoopForever+0xe>)
 80036ce:	2300      	movs	r3, #0
 80036d0:	e002      	b.n	80036d8 <LoopCopyDataInit>

080036d2 <CopyDataInit>:
 80036d2:	58d4      	ldr	r4, [r2, r3]
 80036d4:	50c4      	str	r4, [r0, r3]
 80036d6:	3304      	adds	r3, #4

080036d8 <LoopCopyDataInit>:
 80036d8:	18c4      	adds	r4, r0, r3
 80036da:	428c      	cmp	r4, r1
 80036dc:	d3f9      	bcc.n	80036d2 <CopyDataInit>
 80036de:	4a0a      	ldr	r2, [pc, #40]	@ (8003708 <LoopForever+0x12>)
 80036e0:	4c0a      	ldr	r4, [pc, #40]	@ (800370c <LoopForever+0x16>)
 80036e2:	2300      	movs	r3, #0
 80036e4:	e001      	b.n	80036ea <LoopFillZerobss>

080036e6 <FillZerobss>:
 80036e6:	6013      	str	r3, [r2, #0]
 80036e8:	3204      	adds	r2, #4

080036ea <LoopFillZerobss>:
 80036ea:	42a2      	cmp	r2, r4
 80036ec:	d3fb      	bcc.n	80036e6 <FillZerobss>
 80036ee:	f00c fe11 	bl	8010314 <__libc_init_array>
 80036f2:	f7fe ff53 	bl	800259c <main>

080036f6 <LoopForever>:
 80036f6:	e7fe      	b.n	80036f6 <LoopForever>
 80036f8:	2001c000 	.word	0x2001c000
 80036fc:	20000000 	.word	0x20000000
 8003700:	20000370 	.word	0x20000370
 8003704:	080138d0 	.word	0x080138d0
 8003708:	20000370 	.word	0x20000370
 800370c:	20012944 	.word	0x20012944

08003710 <ADC1_2_IRQHandler>:
 8003710:	e7fe      	b.n	8003710 <ADC1_2_IRQHandler>

08003712 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003712:	b580      	push	{r7, lr}
 8003714:	b082      	sub	sp, #8
 8003716:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003718:	2300      	movs	r3, #0
 800371a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800371c:	2003      	movs	r0, #3
 800371e:	f000 f8fe 	bl	800391e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003722:	200f      	movs	r0, #15
 8003724:	f7ff fd86 	bl	8003234 <HAL_InitTick>
 8003728:	4603      	mov	r3, r0
 800372a:	2b00      	cmp	r3, #0
 800372c:	d002      	beq.n	8003734 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	71fb      	strb	r3, [r7, #7]
 8003732:	e001      	b.n	8003738 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003734:	f7ff fcb8 	bl	80030a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003738:	79fb      	ldrb	r3, [r7, #7]

}
 800373a:	4618      	mov	r0, r3
 800373c:	3708      	adds	r7, #8
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
	...

08003744 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003744:	b480      	push	{r7}
 8003746:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003748:	4b05      	ldr	r3, [pc, #20]	@ (8003760 <HAL_IncTick+0x1c>)
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	4b05      	ldr	r3, [pc, #20]	@ (8003764 <HAL_IncTick+0x20>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4413      	add	r3, r2
 8003752:	4a03      	ldr	r2, [pc, #12]	@ (8003760 <HAL_IncTick+0x1c>)
 8003754:	6013      	str	r3, [r2, #0]
}
 8003756:	bf00      	nop
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr
 8003760:	2000063c 	.word	0x2000063c
 8003764:	20000028 	.word	0x20000028

08003768 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003768:	b480      	push	{r7}
 800376a:	af00      	add	r7, sp, #0
  return uwTick;
 800376c:	4b03      	ldr	r3, [pc, #12]	@ (800377c <HAL_GetTick+0x14>)
 800376e:	681b      	ldr	r3, [r3, #0]
}
 8003770:	4618      	mov	r0, r3
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr
 800377a:	bf00      	nop
 800377c:	2000063c 	.word	0x2000063c

08003780 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b084      	sub	sp, #16
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003788:	f7ff ffee 	bl	8003768 <HAL_GetTick>
 800378c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003798:	d004      	beq.n	80037a4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800379a:	4b09      	ldr	r3, [pc, #36]	@ (80037c0 <HAL_Delay+0x40>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	68fa      	ldr	r2, [r7, #12]
 80037a0:	4413      	add	r3, r2
 80037a2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80037a4:	bf00      	nop
 80037a6:	f7ff ffdf 	bl	8003768 <HAL_GetTick>
 80037aa:	4602      	mov	r2, r0
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	1ad3      	subs	r3, r2, r3
 80037b0:	68fa      	ldr	r2, [r7, #12]
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d8f7      	bhi.n	80037a6 <HAL_Delay+0x26>
  {
  }
}
 80037b6:	bf00      	nop
 80037b8:	bf00      	nop
 80037ba:	3710      	adds	r7, #16
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	20000028 	.word	0x20000028

080037c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b085      	sub	sp, #20
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	f003 0307 	and.w	r3, r3, #7
 80037d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037d4:	4b0c      	ldr	r3, [pc, #48]	@ (8003808 <__NVIC_SetPriorityGrouping+0x44>)
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037da:	68ba      	ldr	r2, [r7, #8]
 80037dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80037e0:	4013      	ands	r3, r2
 80037e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80037f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037f6:	4a04      	ldr	r2, [pc, #16]	@ (8003808 <__NVIC_SetPriorityGrouping+0x44>)
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	60d3      	str	r3, [r2, #12]
}
 80037fc:	bf00      	nop
 80037fe:	3714      	adds	r7, #20
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr
 8003808:	e000ed00 	.word	0xe000ed00

0800380c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800380c:	b480      	push	{r7}
 800380e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003810:	4b04      	ldr	r3, [pc, #16]	@ (8003824 <__NVIC_GetPriorityGrouping+0x18>)
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	0a1b      	lsrs	r3, r3, #8
 8003816:	f003 0307 	and.w	r3, r3, #7
}
 800381a:	4618      	mov	r0, r3
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr
 8003824:	e000ed00 	.word	0xe000ed00

08003828 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	4603      	mov	r3, r0
 8003830:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003836:	2b00      	cmp	r3, #0
 8003838:	db0b      	blt.n	8003852 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800383a:	79fb      	ldrb	r3, [r7, #7]
 800383c:	f003 021f 	and.w	r2, r3, #31
 8003840:	4907      	ldr	r1, [pc, #28]	@ (8003860 <__NVIC_EnableIRQ+0x38>)
 8003842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003846:	095b      	lsrs	r3, r3, #5
 8003848:	2001      	movs	r0, #1
 800384a:	fa00 f202 	lsl.w	r2, r0, r2
 800384e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003852:	bf00      	nop
 8003854:	370c      	adds	r7, #12
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr
 800385e:	bf00      	nop
 8003860:	e000e100 	.word	0xe000e100

08003864 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003864:	b480      	push	{r7}
 8003866:	b083      	sub	sp, #12
 8003868:	af00      	add	r7, sp, #0
 800386a:	4603      	mov	r3, r0
 800386c:	6039      	str	r1, [r7, #0]
 800386e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003870:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003874:	2b00      	cmp	r3, #0
 8003876:	db0a      	blt.n	800388e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	b2da      	uxtb	r2, r3
 800387c:	490c      	ldr	r1, [pc, #48]	@ (80038b0 <__NVIC_SetPriority+0x4c>)
 800387e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003882:	0112      	lsls	r2, r2, #4
 8003884:	b2d2      	uxtb	r2, r2
 8003886:	440b      	add	r3, r1
 8003888:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800388c:	e00a      	b.n	80038a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	b2da      	uxtb	r2, r3
 8003892:	4908      	ldr	r1, [pc, #32]	@ (80038b4 <__NVIC_SetPriority+0x50>)
 8003894:	79fb      	ldrb	r3, [r7, #7]
 8003896:	f003 030f 	and.w	r3, r3, #15
 800389a:	3b04      	subs	r3, #4
 800389c:	0112      	lsls	r2, r2, #4
 800389e:	b2d2      	uxtb	r2, r2
 80038a0:	440b      	add	r3, r1
 80038a2:	761a      	strb	r2, [r3, #24]
}
 80038a4:	bf00      	nop
 80038a6:	370c      	adds	r7, #12
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr
 80038b0:	e000e100 	.word	0xe000e100
 80038b4:	e000ed00 	.word	0xe000ed00

080038b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b089      	sub	sp, #36	@ 0x24
 80038bc:	af00      	add	r7, sp, #0
 80038be:	60f8      	str	r0, [r7, #12]
 80038c0:	60b9      	str	r1, [r7, #8]
 80038c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f003 0307 	and.w	r3, r3, #7
 80038ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	f1c3 0307 	rsb	r3, r3, #7
 80038d2:	2b04      	cmp	r3, #4
 80038d4:	bf28      	it	cs
 80038d6:	2304      	movcs	r3, #4
 80038d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038da:	69fb      	ldr	r3, [r7, #28]
 80038dc:	3304      	adds	r3, #4
 80038de:	2b06      	cmp	r3, #6
 80038e0:	d902      	bls.n	80038e8 <NVIC_EncodePriority+0x30>
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	3b03      	subs	r3, #3
 80038e6:	e000      	b.n	80038ea <NVIC_EncodePriority+0x32>
 80038e8:	2300      	movs	r3, #0
 80038ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038ec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80038f0:	69bb      	ldr	r3, [r7, #24]
 80038f2:	fa02 f303 	lsl.w	r3, r2, r3
 80038f6:	43da      	mvns	r2, r3
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	401a      	ands	r2, r3
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003900:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	fa01 f303 	lsl.w	r3, r1, r3
 800390a:	43d9      	mvns	r1, r3
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003910:	4313      	orrs	r3, r2
         );
}
 8003912:	4618      	mov	r0, r3
 8003914:	3724      	adds	r7, #36	@ 0x24
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr

0800391e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800391e:	b580      	push	{r7, lr}
 8003920:	b082      	sub	sp, #8
 8003922:	af00      	add	r7, sp, #0
 8003924:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f7ff ff4c 	bl	80037c4 <__NVIC_SetPriorityGrouping>
}
 800392c:	bf00      	nop
 800392e:	3708      	adds	r7, #8
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}

08003934 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b086      	sub	sp, #24
 8003938:	af00      	add	r7, sp, #0
 800393a:	4603      	mov	r3, r0
 800393c:	60b9      	str	r1, [r7, #8]
 800393e:	607a      	str	r2, [r7, #4]
 8003940:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003942:	f7ff ff63 	bl	800380c <__NVIC_GetPriorityGrouping>
 8003946:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	68b9      	ldr	r1, [r7, #8]
 800394c:	6978      	ldr	r0, [r7, #20]
 800394e:	f7ff ffb3 	bl	80038b8 <NVIC_EncodePriority>
 8003952:	4602      	mov	r2, r0
 8003954:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003958:	4611      	mov	r1, r2
 800395a:	4618      	mov	r0, r3
 800395c:	f7ff ff82 	bl	8003864 <__NVIC_SetPriority>
}
 8003960:	bf00      	nop
 8003962:	3718      	adds	r7, #24
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}

08003968 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b082      	sub	sp, #8
 800396c:	af00      	add	r7, sp, #0
 800396e:	4603      	mov	r3, r0
 8003970:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003976:	4618      	mov	r0, r3
 8003978:	f7ff ff56 	bl	8003828 <__NVIC_EnableIRQ>
}
 800397c:	bf00      	nop
 800397e:	3708      	adds	r7, #8
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}

08003984 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b084      	sub	sp, #16
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d101      	bne.n	8003996 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e147      	b.n	8003c26 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800399c:	b2db      	uxtb	r3, r3
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d106      	bne.n	80039b0 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2200      	movs	r2, #0
 80039a6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f7ff fba6 	bl	80030fc <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	699a      	ldr	r2, [r3, #24]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f022 0210 	bic.w	r2, r2, #16
 80039be:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80039c0:	f7ff fed2 	bl	8003768 <HAL_GetTick>
 80039c4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80039c6:	e012      	b.n	80039ee <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80039c8:	f7ff fece 	bl	8003768 <HAL_GetTick>
 80039cc:	4602      	mov	r2, r0
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	2b0a      	cmp	r3, #10
 80039d4:	d90b      	bls.n	80039ee <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039da:	f043 0201 	orr.w	r2, r3, #1
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2203      	movs	r2, #3
 80039e6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e11b      	b.n	8003c26 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	699b      	ldr	r3, [r3, #24]
 80039f4:	f003 0308 	and.w	r3, r3, #8
 80039f8:	2b08      	cmp	r3, #8
 80039fa:	d0e5      	beq.n	80039c8 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	699a      	ldr	r2, [r3, #24]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f042 0201 	orr.w	r2, r2, #1
 8003a0a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a0c:	f7ff feac 	bl	8003768 <HAL_GetTick>
 8003a10:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003a12:	e012      	b.n	8003a3a <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003a14:	f7ff fea8 	bl	8003768 <HAL_GetTick>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	2b0a      	cmp	r3, #10
 8003a20:	d90b      	bls.n	8003a3a <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a26:	f043 0201 	orr.w	r2, r3, #1
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2203      	movs	r2, #3
 8003a32:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e0f5      	b.n	8003c26 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	699b      	ldr	r3, [r3, #24]
 8003a40:	f003 0301 	and.w	r3, r3, #1
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d0e5      	beq.n	8003a14 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	699a      	ldr	r2, [r3, #24]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f042 0202 	orr.w	r2, r2, #2
 8003a56:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a74      	ldr	r2, [pc, #464]	@ (8003c30 <HAL_FDCAN_Init+0x2ac>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d103      	bne.n	8003a6a <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8003a62:	4a74      	ldr	r2, [pc, #464]	@ (8003c34 <HAL_FDCAN_Init+0x2b0>)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	7c1b      	ldrb	r3, [r3, #16]
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d108      	bne.n	8003a84 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	699a      	ldr	r2, [r3, #24]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003a80:	619a      	str	r2, [r3, #24]
 8003a82:	e007      	b.n	8003a94 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	699a      	ldr	r2, [r3, #24]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003a92:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	7c5b      	ldrb	r3, [r3, #17]
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d108      	bne.n	8003aae <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	699a      	ldr	r2, [r3, #24]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003aaa:	619a      	str	r2, [r3, #24]
 8003aac:	e007      	b.n	8003abe <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	699a      	ldr	r2, [r3, #24]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003abc:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	7c9b      	ldrb	r3, [r3, #18]
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d108      	bne.n	8003ad8 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	699a      	ldr	r2, [r3, #24]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003ad4:	619a      	str	r2, [r3, #24]
 8003ad6:	e007      	b.n	8003ae8 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	699a      	ldr	r2, [r3, #24]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003ae6:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	699b      	ldr	r3, [r3, #24]
 8003aee:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	689a      	ldr	r2, [r3, #8]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	430a      	orrs	r2, r1
 8003afc:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	699a      	ldr	r2, [r3, #24]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8003b0c:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	691a      	ldr	r2, [r3, #16]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f022 0210 	bic.w	r2, r2, #16
 8003b1c:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d108      	bne.n	8003b38 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	699a      	ldr	r2, [r3, #24]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f042 0204 	orr.w	r2, r2, #4
 8003b34:	619a      	str	r2, [r3, #24]
 8003b36:	e02c      	b.n	8003b92 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d028      	beq.n	8003b92 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	2b02      	cmp	r3, #2
 8003b46:	d01c      	beq.n	8003b82 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	699a      	ldr	r2, [r3, #24]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003b56:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	691a      	ldr	r2, [r3, #16]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f042 0210 	orr.w	r2, r2, #16
 8003b66:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	2b03      	cmp	r3, #3
 8003b6e:	d110      	bne.n	8003b92 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	699a      	ldr	r2, [r3, #24]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f042 0220 	orr.w	r2, r2, #32
 8003b7e:	619a      	str	r2, [r3, #24]
 8003b80:	e007      	b.n	8003b92 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	699a      	ldr	r2, [r3, #24]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f042 0220 	orr.w	r2, r2, #32
 8003b90:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	699b      	ldr	r3, [r3, #24]
 8003b96:	3b01      	subs	r3, #1
 8003b98:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	69db      	ldr	r3, [r3, #28]
 8003b9e:	3b01      	subs	r3, #1
 8003ba0:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003ba2:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6a1b      	ldr	r3, [r3, #32]
 8003ba8:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003baa:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	695b      	ldr	r3, [r3, #20]
 8003bb2:	3b01      	subs	r3, #1
 8003bb4:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003bba:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003bbc:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003bc6:	d115      	bne.n	8003bf4 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bcc:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bd2:	3b01      	subs	r3, #1
 8003bd4:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003bd6:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bdc:	3b01      	subs	r3, #1
 8003bde:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003be0:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003be8:	3b01      	subs	r3, #1
 8003bea:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003bf0:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003bf2:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	430a      	orrs	r2, r1
 8003c06:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f000 f880 	bl	8003d10 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8003c24:	2300      	movs	r3, #0
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3710      	adds	r7, #16
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	40006400 	.word	0x40006400
 8003c34:	40006500 	.word	0x40006500

08003c38 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b083      	sub	sp, #12
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d110      	bne.n	8003c6e <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2202      	movs	r2, #2
 8003c50:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	699a      	ldr	r2, [r3, #24]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f022 0201 	bic.w	r2, r2, #1
 8003c62:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	e006      	b.n	8003c7c <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c72:	f043 0204 	orr.w	r2, r3, #4
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
  }
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	370c      	adds	r7, #12
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr

08003c88 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b086      	sub	sp, #24
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	60f8      	str	r0, [r7, #12]
 8003c90:	60b9      	str	r1, [r7, #8]
 8003c92:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	2b02      	cmp	r3, #2
 8003c9e:	d12c      	bne.n	8003cfa <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003ca8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d007      	beq.n	8003cc0 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cb4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e023      	b.n	8003d08 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003cc8:	0c1b      	lsrs	r3, r3, #16
 8003cca:	f003 0303 	and.w	r3, r3, #3
 8003cce:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	687a      	ldr	r2, [r7, #4]
 8003cd4:	68b9      	ldr	r1, [r7, #8]
 8003cd6:	68f8      	ldr	r0, [r7, #12]
 8003cd8:	f000 f87c 	bl	8003dd4 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	2101      	movs	r1, #1
 8003ce2:	697a      	ldr	r2, [r7, #20]
 8003ce4:	fa01 f202 	lsl.w	r2, r1, r2
 8003ce8:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8003cec:	2201      	movs	r2, #1
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	409a      	lsls	r2, r3
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	e006      	b.n	8003d08 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cfe:	f043 0208 	orr.w	r2, r3, #8
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
  }
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3718      	adds	r7, #24
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}

08003d10 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b085      	sub	sp, #20
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8003d18:	4b2c      	ldr	r3, [pc, #176]	@ (8003dcc <FDCAN_CalcultateRamBlockAddresses+0xbc>)
 8003d1a:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a2b      	ldr	r2, [pc, #172]	@ (8003dd0 <FDCAN_CalcultateRamBlockAddresses+0xc0>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d103      	bne.n	8003d2e <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8003d2c:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	68ba      	ldr	r2, [r7, #8]
 8003d32:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d3c:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d44:	041a      	lsls	r2, r3, #16
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	430a      	orrs	r2, r1
 8003d4c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d62:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d6a:	061a      	lsls	r2, r3, #24
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	430a      	orrs	r2, r1
 8003d72:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	60fb      	str	r3, [r7, #12]
 8003da2:	e005      	b.n	8003db0 <FDCAN_CalcultateRamBlockAddresses+0xa0>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2200      	movs	r2, #0
 8003da8:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	3304      	adds	r3, #4
 8003dae:	60fb      	str	r3, [r7, #12]
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8003db6:	68fa      	ldr	r2, [r7, #12]
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d3f3      	bcc.n	8003da4 <FDCAN_CalcultateRamBlockAddresses+0x94>
  }
}
 8003dbc:	bf00      	nop
 8003dbe:	bf00      	nop
 8003dc0:	3714      	adds	r7, #20
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr
 8003dca:	bf00      	nop
 8003dcc:	4000a400 	.word	0x4000a400
 8003dd0:	40006800 	.word	0x40006800

08003dd4 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b089      	sub	sp, #36	@ 0x24
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	60f8      	str	r0, [r7, #12]
 8003ddc:	60b9      	str	r1, [r7, #8]
 8003dde:	607a      	str	r2, [r7, #4]
 8003de0:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d10a      	bne.n	8003e00 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8003df2:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	61fb      	str	r3, [r7, #28]
 8003dfe:	e00a      	b.n	8003e16 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8003e08:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8003e0e:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003e10:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003e14:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	6a1b      	ldr	r3, [r3, #32]
 8003e1a:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8003e20:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8003e26:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8003e2c:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	68db      	ldr	r3, [r3, #12]
 8003e32:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8003e34:	4313      	orrs	r3, r2
 8003e36:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003e3c:	683a      	ldr	r2, [r7, #0]
 8003e3e:	4613      	mov	r3, r2
 8003e40:	00db      	lsls	r3, r3, #3
 8003e42:	4413      	add	r3, r2
 8003e44:	00db      	lsls	r3, r3, #3
 8003e46:	440b      	add	r3, r1
 8003e48:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8003e4a:	69bb      	ldr	r3, [r7, #24]
 8003e4c:	69fa      	ldr	r2, [r7, #28]
 8003e4e:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8003e50:	69bb      	ldr	r3, [r7, #24]
 8003e52:	3304      	adds	r3, #4
 8003e54:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8003e56:	69bb      	ldr	r3, [r7, #24]
 8003e58:	693a      	ldr	r2, [r7, #16]
 8003e5a:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8003e5c:	69bb      	ldr	r3, [r7, #24]
 8003e5e:	3304      	adds	r3, #4
 8003e60:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8003e62:	2300      	movs	r3, #0
 8003e64:	617b      	str	r3, [r7, #20]
 8003e66:	e020      	b.n	8003eaa <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	3303      	adds	r3, #3
 8003e6c:	687a      	ldr	r2, [r7, #4]
 8003e6e:	4413      	add	r3, r2
 8003e70:	781b      	ldrb	r3, [r3, #0]
 8003e72:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	3302      	adds	r3, #2
 8003e78:	6879      	ldr	r1, [r7, #4]
 8003e7a:	440b      	add	r3, r1
 8003e7c:	781b      	ldrb	r3, [r3, #0]
 8003e7e:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8003e80:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	3301      	adds	r3, #1
 8003e86:	6879      	ldr	r1, [r7, #4]
 8003e88:	440b      	add	r3, r1
 8003e8a:	781b      	ldrb	r3, [r3, #0]
 8003e8c:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8003e8e:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8003e90:	6879      	ldr	r1, [r7, #4]
 8003e92:	697a      	ldr	r2, [r7, #20]
 8003e94:	440a      	add	r2, r1
 8003e96:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8003e98:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8003e9a:	69bb      	ldr	r3, [r7, #24]
 8003e9c:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8003e9e:	69bb      	ldr	r3, [r7, #24]
 8003ea0:	3304      	adds	r3, #4
 8003ea2:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	3304      	adds	r3, #4
 8003ea8:	617b      	str	r3, [r7, #20]
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	68db      	ldr	r3, [r3, #12]
 8003eae:	4a06      	ldr	r2, [pc, #24]	@ (8003ec8 <FDCAN_CopyMessageToRAM+0xf4>)
 8003eb0:	5cd3      	ldrb	r3, [r2, r3]
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d3d6      	bcc.n	8003e68 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 8003eba:	bf00      	nop
 8003ebc:	bf00      	nop
 8003ebe:	3724      	adds	r7, #36	@ 0x24
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr
 8003ec8:	08013528 	.word	0x08013528

08003ecc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b087      	sub	sp, #28
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
 8003ed4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003eda:	e15a      	b.n	8004192 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	2101      	movs	r1, #1
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ee8:	4013      	ands	r3, r2
 8003eea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	f000 814c 	beq.w	800418c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	f003 0303 	and.w	r3, r3, #3
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d005      	beq.n	8003f0c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003f08:	2b02      	cmp	r3, #2
 8003f0a:	d130      	bne.n	8003f6e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	005b      	lsls	r3, r3, #1
 8003f16:	2203      	movs	r2, #3
 8003f18:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1c:	43db      	mvns	r3, r3
 8003f1e:	693a      	ldr	r2, [r7, #16]
 8003f20:	4013      	ands	r3, r2
 8003f22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	68da      	ldr	r2, [r3, #12]
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	005b      	lsls	r3, r3, #1
 8003f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f30:	693a      	ldr	r2, [r7, #16]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	693a      	ldr	r2, [r7, #16]
 8003f3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003f42:	2201      	movs	r2, #1
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	fa02 f303 	lsl.w	r3, r2, r3
 8003f4a:	43db      	mvns	r3, r3
 8003f4c:	693a      	ldr	r2, [r7, #16]
 8003f4e:	4013      	ands	r3, r2
 8003f50:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	091b      	lsrs	r3, r3, #4
 8003f58:	f003 0201 	and.w	r2, r3, #1
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f62:	693a      	ldr	r2, [r7, #16]
 8003f64:	4313      	orrs	r3, r2
 8003f66:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	693a      	ldr	r2, [r7, #16]
 8003f6c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	f003 0303 	and.w	r3, r3, #3
 8003f76:	2b03      	cmp	r3, #3
 8003f78:	d017      	beq.n	8003faa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	68db      	ldr	r3, [r3, #12]
 8003f7e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	005b      	lsls	r3, r3, #1
 8003f84:	2203      	movs	r2, #3
 8003f86:	fa02 f303 	lsl.w	r3, r2, r3
 8003f8a:	43db      	mvns	r3, r3
 8003f8c:	693a      	ldr	r2, [r7, #16]
 8003f8e:	4013      	ands	r3, r2
 8003f90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	689a      	ldr	r2, [r3, #8]
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	005b      	lsls	r3, r3, #1
 8003f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f9e:	693a      	ldr	r2, [r7, #16]
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	693a      	ldr	r2, [r7, #16]
 8003fa8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	f003 0303 	and.w	r3, r3, #3
 8003fb2:	2b02      	cmp	r3, #2
 8003fb4:	d123      	bne.n	8003ffe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	08da      	lsrs	r2, r3, #3
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	3208      	adds	r2, #8
 8003fbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fc2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	f003 0307 	and.w	r3, r3, #7
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	220f      	movs	r2, #15
 8003fce:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd2:	43db      	mvns	r3, r3
 8003fd4:	693a      	ldr	r2, [r7, #16]
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	691a      	ldr	r2, [r3, #16]
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	f003 0307 	and.w	r3, r3, #7
 8003fe4:	009b      	lsls	r3, r3, #2
 8003fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fea:	693a      	ldr	r2, [r7, #16]
 8003fec:	4313      	orrs	r3, r2
 8003fee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	08da      	lsrs	r2, r3, #3
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	3208      	adds	r2, #8
 8003ff8:	6939      	ldr	r1, [r7, #16]
 8003ffa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	005b      	lsls	r3, r3, #1
 8004008:	2203      	movs	r2, #3
 800400a:	fa02 f303 	lsl.w	r3, r2, r3
 800400e:	43db      	mvns	r3, r3
 8004010:	693a      	ldr	r2, [r7, #16]
 8004012:	4013      	ands	r3, r2
 8004014:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	f003 0203 	and.w	r2, r3, #3
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	005b      	lsls	r3, r3, #1
 8004022:	fa02 f303 	lsl.w	r3, r2, r3
 8004026:	693a      	ldr	r2, [r7, #16]
 8004028:	4313      	orrs	r3, r2
 800402a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	693a      	ldr	r2, [r7, #16]
 8004030:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800403a:	2b00      	cmp	r3, #0
 800403c:	f000 80a6 	beq.w	800418c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004040:	4b5b      	ldr	r3, [pc, #364]	@ (80041b0 <HAL_GPIO_Init+0x2e4>)
 8004042:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004044:	4a5a      	ldr	r2, [pc, #360]	@ (80041b0 <HAL_GPIO_Init+0x2e4>)
 8004046:	f043 0301 	orr.w	r3, r3, #1
 800404a:	6613      	str	r3, [r2, #96]	@ 0x60
 800404c:	4b58      	ldr	r3, [pc, #352]	@ (80041b0 <HAL_GPIO_Init+0x2e4>)
 800404e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004050:	f003 0301 	and.w	r3, r3, #1
 8004054:	60bb      	str	r3, [r7, #8]
 8004056:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004058:	4a56      	ldr	r2, [pc, #344]	@ (80041b4 <HAL_GPIO_Init+0x2e8>)
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	089b      	lsrs	r3, r3, #2
 800405e:	3302      	adds	r3, #2
 8004060:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004064:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	f003 0303 	and.w	r3, r3, #3
 800406c:	009b      	lsls	r3, r3, #2
 800406e:	220f      	movs	r2, #15
 8004070:	fa02 f303 	lsl.w	r3, r2, r3
 8004074:	43db      	mvns	r3, r3
 8004076:	693a      	ldr	r2, [r7, #16]
 8004078:	4013      	ands	r3, r2
 800407a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004082:	d01f      	beq.n	80040c4 <HAL_GPIO_Init+0x1f8>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	4a4c      	ldr	r2, [pc, #304]	@ (80041b8 <HAL_GPIO_Init+0x2ec>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d019      	beq.n	80040c0 <HAL_GPIO_Init+0x1f4>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	4a4b      	ldr	r2, [pc, #300]	@ (80041bc <HAL_GPIO_Init+0x2f0>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d013      	beq.n	80040bc <HAL_GPIO_Init+0x1f0>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	4a4a      	ldr	r2, [pc, #296]	@ (80041c0 <HAL_GPIO_Init+0x2f4>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d00d      	beq.n	80040b8 <HAL_GPIO_Init+0x1ec>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	4a49      	ldr	r2, [pc, #292]	@ (80041c4 <HAL_GPIO_Init+0x2f8>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d007      	beq.n	80040b4 <HAL_GPIO_Init+0x1e8>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	4a48      	ldr	r2, [pc, #288]	@ (80041c8 <HAL_GPIO_Init+0x2fc>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d101      	bne.n	80040b0 <HAL_GPIO_Init+0x1e4>
 80040ac:	2305      	movs	r3, #5
 80040ae:	e00a      	b.n	80040c6 <HAL_GPIO_Init+0x1fa>
 80040b0:	2306      	movs	r3, #6
 80040b2:	e008      	b.n	80040c6 <HAL_GPIO_Init+0x1fa>
 80040b4:	2304      	movs	r3, #4
 80040b6:	e006      	b.n	80040c6 <HAL_GPIO_Init+0x1fa>
 80040b8:	2303      	movs	r3, #3
 80040ba:	e004      	b.n	80040c6 <HAL_GPIO_Init+0x1fa>
 80040bc:	2302      	movs	r3, #2
 80040be:	e002      	b.n	80040c6 <HAL_GPIO_Init+0x1fa>
 80040c0:	2301      	movs	r3, #1
 80040c2:	e000      	b.n	80040c6 <HAL_GPIO_Init+0x1fa>
 80040c4:	2300      	movs	r3, #0
 80040c6:	697a      	ldr	r2, [r7, #20]
 80040c8:	f002 0203 	and.w	r2, r2, #3
 80040cc:	0092      	lsls	r2, r2, #2
 80040ce:	4093      	lsls	r3, r2
 80040d0:	693a      	ldr	r2, [r7, #16]
 80040d2:	4313      	orrs	r3, r2
 80040d4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80040d6:	4937      	ldr	r1, [pc, #220]	@ (80041b4 <HAL_GPIO_Init+0x2e8>)
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	089b      	lsrs	r3, r3, #2
 80040dc:	3302      	adds	r3, #2
 80040de:	693a      	ldr	r2, [r7, #16]
 80040e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80040e4:	4b39      	ldr	r3, [pc, #228]	@ (80041cc <HAL_GPIO_Init+0x300>)
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	43db      	mvns	r3, r3
 80040ee:	693a      	ldr	r2, [r7, #16]
 80040f0:	4013      	ands	r3, r2
 80040f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d003      	beq.n	8004108 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004100:	693a      	ldr	r2, [r7, #16]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	4313      	orrs	r3, r2
 8004106:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004108:	4a30      	ldr	r2, [pc, #192]	@ (80041cc <HAL_GPIO_Init+0x300>)
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800410e:	4b2f      	ldr	r3, [pc, #188]	@ (80041cc <HAL_GPIO_Init+0x300>)
 8004110:	68db      	ldr	r3, [r3, #12]
 8004112:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	43db      	mvns	r3, r3
 8004118:	693a      	ldr	r2, [r7, #16]
 800411a:	4013      	ands	r3, r2
 800411c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d003      	beq.n	8004132 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800412a:	693a      	ldr	r2, [r7, #16]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	4313      	orrs	r3, r2
 8004130:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004132:	4a26      	ldr	r2, [pc, #152]	@ (80041cc <HAL_GPIO_Init+0x300>)
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004138:	4b24      	ldr	r3, [pc, #144]	@ (80041cc <HAL_GPIO_Init+0x300>)
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	43db      	mvns	r3, r3
 8004142:	693a      	ldr	r2, [r7, #16]
 8004144:	4013      	ands	r3, r2
 8004146:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004150:	2b00      	cmp	r3, #0
 8004152:	d003      	beq.n	800415c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004154:	693a      	ldr	r2, [r7, #16]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	4313      	orrs	r3, r2
 800415a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800415c:	4a1b      	ldr	r2, [pc, #108]	@ (80041cc <HAL_GPIO_Init+0x300>)
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004162:	4b1a      	ldr	r3, [pc, #104]	@ (80041cc <HAL_GPIO_Init+0x300>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	43db      	mvns	r3, r3
 800416c:	693a      	ldr	r2, [r7, #16]
 800416e:	4013      	ands	r3, r2
 8004170:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800417a:	2b00      	cmp	r3, #0
 800417c:	d003      	beq.n	8004186 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800417e:	693a      	ldr	r2, [r7, #16]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	4313      	orrs	r3, r2
 8004184:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004186:	4a11      	ldr	r2, [pc, #68]	@ (80041cc <HAL_GPIO_Init+0x300>)
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	3301      	adds	r3, #1
 8004190:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	fa22 f303 	lsr.w	r3, r2, r3
 800419c:	2b00      	cmp	r3, #0
 800419e:	f47f ae9d 	bne.w	8003edc <HAL_GPIO_Init+0x10>
  }
}
 80041a2:	bf00      	nop
 80041a4:	bf00      	nop
 80041a6:	371c      	adds	r7, #28
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr
 80041b0:	40021000 	.word	0x40021000
 80041b4:	40010000 	.word	0x40010000
 80041b8:	48000400 	.word	0x48000400
 80041bc:	48000800 	.word	0x48000800
 80041c0:	48000c00 	.word	0x48000c00
 80041c4:	48001000 	.word	0x48001000
 80041c8:	48001400 	.word	0x48001400
 80041cc:	40010400 	.word	0x40010400

080041d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b083      	sub	sp, #12
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
 80041d8:	460b      	mov	r3, r1
 80041da:	807b      	strh	r3, [r7, #2]
 80041dc:	4613      	mov	r3, r2
 80041de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80041e0:	787b      	ldrb	r3, [r7, #1]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d003      	beq.n	80041ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80041e6:	887a      	ldrh	r2, [r7, #2]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80041ec:	e002      	b.n	80041f4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80041ee:	887a      	ldrh	r2, [r7, #2]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80041f4:	bf00      	nop
 80041f6:	370c      	adds	r7, #12
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr

08004200 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004200:	b480      	push	{r7}
 8004202:	b085      	sub	sp, #20
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
 8004208:	460b      	mov	r3, r1
 800420a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	695b      	ldr	r3, [r3, #20]
 8004210:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004212:	887a      	ldrh	r2, [r7, #2]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	4013      	ands	r3, r2
 8004218:	041a      	lsls	r2, r3, #16
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	43d9      	mvns	r1, r3
 800421e:	887b      	ldrh	r3, [r7, #2]
 8004220:	400b      	ands	r3, r1
 8004222:	431a      	orrs	r2, r3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	619a      	str	r2, [r3, #24]
}
 8004228:	bf00      	nop
 800422a:	3714      	adds	r7, #20
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr

08004234 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b084      	sub	sp, #16
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d101      	bne.n	8004246 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e0c0      	b.n	80043c8 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 800424c:	b2db      	uxtb	r3, r3
 800424e:	2b00      	cmp	r3, #0
 8004250:	d106      	bne.n	8004260 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2200      	movs	r2, #0
 8004256:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f00a ff9a 	bl	800f194 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2203      	movs	r2, #3
 8004264:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4618      	mov	r0, r3
 800426e:	f003 fe12 	bl	8007e96 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004272:	2300      	movs	r3, #0
 8004274:	73fb      	strb	r3, [r7, #15]
 8004276:	e03e      	b.n	80042f6 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004278:	7bfa      	ldrb	r2, [r7, #15]
 800427a:	6879      	ldr	r1, [r7, #4]
 800427c:	4613      	mov	r3, r2
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	4413      	add	r3, r2
 8004282:	00db      	lsls	r3, r3, #3
 8004284:	440b      	add	r3, r1
 8004286:	3311      	adds	r3, #17
 8004288:	2201      	movs	r2, #1
 800428a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800428c:	7bfa      	ldrb	r2, [r7, #15]
 800428e:	6879      	ldr	r1, [r7, #4]
 8004290:	4613      	mov	r3, r2
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	4413      	add	r3, r2
 8004296:	00db      	lsls	r3, r3, #3
 8004298:	440b      	add	r3, r1
 800429a:	3310      	adds	r3, #16
 800429c:	7bfa      	ldrb	r2, [r7, #15]
 800429e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80042a0:	7bfa      	ldrb	r2, [r7, #15]
 80042a2:	6879      	ldr	r1, [r7, #4]
 80042a4:	4613      	mov	r3, r2
 80042a6:	009b      	lsls	r3, r3, #2
 80042a8:	4413      	add	r3, r2
 80042aa:	00db      	lsls	r3, r3, #3
 80042ac:	440b      	add	r3, r1
 80042ae:	3313      	adds	r3, #19
 80042b0:	2200      	movs	r2, #0
 80042b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80042b4:	7bfa      	ldrb	r2, [r7, #15]
 80042b6:	6879      	ldr	r1, [r7, #4]
 80042b8:	4613      	mov	r3, r2
 80042ba:	009b      	lsls	r3, r3, #2
 80042bc:	4413      	add	r3, r2
 80042be:	00db      	lsls	r3, r3, #3
 80042c0:	440b      	add	r3, r1
 80042c2:	3320      	adds	r3, #32
 80042c4:	2200      	movs	r2, #0
 80042c6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80042c8:	7bfa      	ldrb	r2, [r7, #15]
 80042ca:	6879      	ldr	r1, [r7, #4]
 80042cc:	4613      	mov	r3, r2
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	4413      	add	r3, r2
 80042d2:	00db      	lsls	r3, r3, #3
 80042d4:	440b      	add	r3, r1
 80042d6:	3324      	adds	r3, #36	@ 0x24
 80042d8:	2200      	movs	r2, #0
 80042da:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80042dc:	7bfb      	ldrb	r3, [r7, #15]
 80042de:	6879      	ldr	r1, [r7, #4]
 80042e0:	1c5a      	adds	r2, r3, #1
 80042e2:	4613      	mov	r3, r2
 80042e4:	009b      	lsls	r3, r3, #2
 80042e6:	4413      	add	r3, r2
 80042e8:	00db      	lsls	r3, r3, #3
 80042ea:	440b      	add	r3, r1
 80042ec:	2200      	movs	r2, #0
 80042ee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042f0:	7bfb      	ldrb	r3, [r7, #15]
 80042f2:	3301      	adds	r3, #1
 80042f4:	73fb      	strb	r3, [r7, #15]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	791b      	ldrb	r3, [r3, #4]
 80042fa:	7bfa      	ldrb	r2, [r7, #15]
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d3bb      	bcc.n	8004278 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004300:	2300      	movs	r3, #0
 8004302:	73fb      	strb	r3, [r7, #15]
 8004304:	e044      	b.n	8004390 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004306:	7bfa      	ldrb	r2, [r7, #15]
 8004308:	6879      	ldr	r1, [r7, #4]
 800430a:	4613      	mov	r3, r2
 800430c:	009b      	lsls	r3, r3, #2
 800430e:	4413      	add	r3, r2
 8004310:	00db      	lsls	r3, r3, #3
 8004312:	440b      	add	r3, r1
 8004314:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8004318:	2200      	movs	r2, #0
 800431a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800431c:	7bfa      	ldrb	r2, [r7, #15]
 800431e:	6879      	ldr	r1, [r7, #4]
 8004320:	4613      	mov	r3, r2
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	4413      	add	r3, r2
 8004326:	00db      	lsls	r3, r3, #3
 8004328:	440b      	add	r3, r1
 800432a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800432e:	7bfa      	ldrb	r2, [r7, #15]
 8004330:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004332:	7bfa      	ldrb	r2, [r7, #15]
 8004334:	6879      	ldr	r1, [r7, #4]
 8004336:	4613      	mov	r3, r2
 8004338:	009b      	lsls	r3, r3, #2
 800433a:	4413      	add	r3, r2
 800433c:	00db      	lsls	r3, r3, #3
 800433e:	440b      	add	r3, r1
 8004340:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8004344:	2200      	movs	r2, #0
 8004346:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004348:	7bfa      	ldrb	r2, [r7, #15]
 800434a:	6879      	ldr	r1, [r7, #4]
 800434c:	4613      	mov	r3, r2
 800434e:	009b      	lsls	r3, r3, #2
 8004350:	4413      	add	r3, r2
 8004352:	00db      	lsls	r3, r3, #3
 8004354:	440b      	add	r3, r1
 8004356:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800435a:	2200      	movs	r2, #0
 800435c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800435e:	7bfa      	ldrb	r2, [r7, #15]
 8004360:	6879      	ldr	r1, [r7, #4]
 8004362:	4613      	mov	r3, r2
 8004364:	009b      	lsls	r3, r3, #2
 8004366:	4413      	add	r3, r2
 8004368:	00db      	lsls	r3, r3, #3
 800436a:	440b      	add	r3, r1
 800436c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8004370:	2200      	movs	r2, #0
 8004372:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004374:	7bfa      	ldrb	r2, [r7, #15]
 8004376:	6879      	ldr	r1, [r7, #4]
 8004378:	4613      	mov	r3, r2
 800437a:	009b      	lsls	r3, r3, #2
 800437c:	4413      	add	r3, r2
 800437e:	00db      	lsls	r3, r3, #3
 8004380:	440b      	add	r3, r1
 8004382:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8004386:	2200      	movs	r2, #0
 8004388:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800438a:	7bfb      	ldrb	r3, [r7, #15]
 800438c:	3301      	adds	r3, #1
 800438e:	73fb      	strb	r3, [r7, #15]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	791b      	ldrb	r3, [r3, #4]
 8004394:	7bfa      	ldrb	r2, [r7, #15]
 8004396:	429a      	cmp	r2, r3
 8004398:	d3b5      	bcc.n	8004306 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6818      	ldr	r0, [r3, #0]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	3304      	adds	r3, #4
 80043a2:	e893 0006 	ldmia.w	r3, {r1, r2}
 80043a6:	f003 fd91 	bl	8007ecc <USB_DevInit>

  hpcd->USB_Address = 0U;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	7a9b      	ldrb	r3, [r3, #10]
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d102      	bne.n	80043c6 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	f001 fc0e 	bl	8005be2 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80043c6:	2300      	movs	r3, #0
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3710      	adds	r7, #16
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}

080043d0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b082      	sub	sp, #8
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d101      	bne.n	80043e6 <HAL_PCD_Start+0x16>
 80043e2:	2302      	movs	r3, #2
 80043e4:	e012      	b.n	800440c <HAL_PCD_Start+0x3c>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2201      	movs	r2, #1
 80043ea:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4618      	mov	r0, r3
 80043f4:	f003 fd38 	bl	8007e68 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4618      	mov	r0, r3
 80043fe:	f005 fb15 	bl	8009a2c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800440a:	2300      	movs	r3, #0
}
 800440c:	4618      	mov	r0, r3
 800440e:	3708      	adds	r7, #8
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}

08004414 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b084      	sub	sp, #16
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4618      	mov	r0, r3
 8004422:	f005 fb1a 	bl	8009a5a <USB_ReadInterrupts>
 8004426:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800442e:	2b00      	cmp	r3, #0
 8004430:	d003      	beq.n	800443a <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f000 fb06 	bl	8004a44 <PCD_EP_ISR_Handler>

    return;
 8004438:	e110      	b.n	800465c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004440:	2b00      	cmp	r3, #0
 8004442:	d013      	beq.n	800446c <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800444c:	b29a      	uxth	r2, r3
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004456:	b292      	uxth	r2, r2
 8004458:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f00a ff2a 	bl	800f2b6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004462:	2100      	movs	r1, #0
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f000 f8fc 	bl	8004662 <HAL_PCD_SetAddress>

    return;
 800446a:	e0f7      	b.n	800465c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004472:	2b00      	cmp	r3, #0
 8004474:	d00c      	beq.n	8004490 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800447e:	b29a      	uxth	r2, r3
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004488:	b292      	uxth	r2, r2
 800448a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800448e:	e0e5      	b.n	800465c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004496:	2b00      	cmp	r3, #0
 8004498:	d00c      	beq.n	80044b4 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80044a2:	b29a      	uxth	r2, r3
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80044ac:	b292      	uxth	r2, r2
 80044ae:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80044b2:	e0d3      	b.n	800465c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d034      	beq.n	8004528 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80044c6:	b29a      	uxth	r2, r3
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f022 0204 	bic.w	r2, r2, #4
 80044d0:	b292      	uxth	r2, r2
 80044d2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80044de:	b29a      	uxth	r2, r3
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f022 0208 	bic.w	r2, r2, #8
 80044e8:	b292      	uxth	r2, r2
 80044ea:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d107      	bne.n	8004508 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2200      	movs	r2, #0
 80044fc:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004500:	2100      	movs	r1, #0
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f00b f8ca 	bl	800f69c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f00a ff0d 	bl	800f328 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004516:	b29a      	uxth	r2, r3
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004520:	b292      	uxth	r2, r2
 8004522:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004526:	e099      	b.n	800465c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800452e:	2b00      	cmp	r3, #0
 8004530:	d027      	beq.n	8004582 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800453a:	b29a      	uxth	r2, r3
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f042 0208 	orr.w	r2, r2, #8
 8004544:	b292      	uxth	r2, r2
 8004546:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004552:	b29a      	uxth	r2, r3
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800455c:	b292      	uxth	r2, r2
 800455e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800456a:	b29a      	uxth	r2, r3
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f042 0204 	orr.w	r2, r2, #4
 8004574:	b292      	uxth	r2, r2
 8004576:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f00a feba 	bl	800f2f4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004580:	e06c      	b.n	800465c <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004588:	2b00      	cmp	r3, #0
 800458a:	d040      	beq.n	800460e <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004594:	b29a      	uxth	r2, r3
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800459e:	b292      	uxth	r2, r2
 80045a0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d12b      	bne.n	8004606 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80045b6:	b29a      	uxth	r2, r3
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f042 0204 	orr.w	r2, r2, #4
 80045c0:	b292      	uxth	r2, r2
 80045c2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80045ce:	b29a      	uxth	r2, r3
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f042 0208 	orr.w	r2, r2, #8
 80045d8:	b292      	uxth	r2, r2
 80045da:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2201      	movs	r2, #1
 80045e2:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80045ee:	b29b      	uxth	r3, r3
 80045f0:	089b      	lsrs	r3, r3, #2
 80045f2:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80045fc:	2101      	movs	r1, #1
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f00b f84c 	bl	800f69c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8004604:	e02a      	b.n	800465c <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f00a fe74 	bl	800f2f4 <HAL_PCD_SuspendCallback>
    return;
 800460c:	e026      	b.n	800465c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004614:	2b00      	cmp	r3, #0
 8004616:	d00f      	beq.n	8004638 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004620:	b29a      	uxth	r2, r3
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800462a:	b292      	uxth	r2, r2
 800462c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f00a fe32 	bl	800f29a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004636:	e011      	b.n	800465c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800463e:	2b00      	cmp	r3, #0
 8004640:	d00c      	beq.n	800465c <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800464a:	b29a      	uxth	r2, r3
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004654:	b292      	uxth	r2, r2
 8004656:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800465a:	bf00      	nop
  }
}
 800465c:	3710      	adds	r7, #16
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}

08004662 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004662:	b580      	push	{r7, lr}
 8004664:	b082      	sub	sp, #8
 8004666:	af00      	add	r7, sp, #0
 8004668:	6078      	str	r0, [r7, #4]
 800466a:	460b      	mov	r3, r1
 800466c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004674:	2b01      	cmp	r3, #1
 8004676:	d101      	bne.n	800467c <HAL_PCD_SetAddress+0x1a>
 8004678:	2302      	movs	r3, #2
 800467a:	e012      	b.n	80046a2 <HAL_PCD_SetAddress+0x40>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2201      	movs	r2, #1
 8004680:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	78fa      	ldrb	r2, [r7, #3]
 8004688:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	78fa      	ldrb	r2, [r7, #3]
 8004690:	4611      	mov	r1, r2
 8004692:	4618      	mov	r0, r3
 8004694:	f005 f9b6 	bl	8009a04 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2200      	movs	r2, #0
 800469c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80046a0:	2300      	movs	r3, #0
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3708      	adds	r7, #8
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}

080046aa <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80046aa:	b580      	push	{r7, lr}
 80046ac:	b084      	sub	sp, #16
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	6078      	str	r0, [r7, #4]
 80046b2:	4608      	mov	r0, r1
 80046b4:	4611      	mov	r1, r2
 80046b6:	461a      	mov	r2, r3
 80046b8:	4603      	mov	r3, r0
 80046ba:	70fb      	strb	r3, [r7, #3]
 80046bc:	460b      	mov	r3, r1
 80046be:	803b      	strh	r3, [r7, #0]
 80046c0:	4613      	mov	r3, r2
 80046c2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80046c4:	2300      	movs	r3, #0
 80046c6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80046c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	da0e      	bge.n	80046ee <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80046d0:	78fb      	ldrb	r3, [r7, #3]
 80046d2:	f003 0207 	and.w	r2, r3, #7
 80046d6:	4613      	mov	r3, r2
 80046d8:	009b      	lsls	r3, r3, #2
 80046da:	4413      	add	r3, r2
 80046dc:	00db      	lsls	r3, r3, #3
 80046de:	3310      	adds	r3, #16
 80046e0:	687a      	ldr	r2, [r7, #4]
 80046e2:	4413      	add	r3, r2
 80046e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2201      	movs	r2, #1
 80046ea:	705a      	strb	r2, [r3, #1]
 80046ec:	e00e      	b.n	800470c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80046ee:	78fb      	ldrb	r3, [r7, #3]
 80046f0:	f003 0207 	and.w	r2, r3, #7
 80046f4:	4613      	mov	r3, r2
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	4413      	add	r3, r2
 80046fa:	00db      	lsls	r3, r3, #3
 80046fc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	4413      	add	r3, r2
 8004704:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2200      	movs	r2, #0
 800470a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800470c:	78fb      	ldrb	r3, [r7, #3]
 800470e:	f003 0307 	and.w	r3, r3, #7
 8004712:	b2da      	uxtb	r2, r3
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8004718:	883b      	ldrh	r3, [r7, #0]
 800471a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	78ba      	ldrb	r2, [r7, #2]
 8004726:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004728:	78bb      	ldrb	r3, [r7, #2]
 800472a:	2b02      	cmp	r3, #2
 800472c:	d102      	bne.n	8004734 <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2200      	movs	r2, #0
 8004732:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800473a:	2b01      	cmp	r3, #1
 800473c:	d101      	bne.n	8004742 <HAL_PCD_EP_Open+0x98>
 800473e:	2302      	movs	r3, #2
 8004740:	e00e      	b.n	8004760 <HAL_PCD_EP_Open+0xb6>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2201      	movs	r2, #1
 8004746:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	68f9      	ldr	r1, [r7, #12]
 8004750:	4618      	mov	r0, r3
 8004752:	f003 fbd9 	bl	8007f08 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2200      	movs	r2, #0
 800475a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 800475e:	7afb      	ldrb	r3, [r7, #11]
}
 8004760:	4618      	mov	r0, r3
 8004762:	3710      	adds	r7, #16
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}

08004768 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b084      	sub	sp, #16
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
 8004770:	460b      	mov	r3, r1
 8004772:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004774:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004778:	2b00      	cmp	r3, #0
 800477a:	da0e      	bge.n	800479a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800477c:	78fb      	ldrb	r3, [r7, #3]
 800477e:	f003 0207 	and.w	r2, r3, #7
 8004782:	4613      	mov	r3, r2
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	4413      	add	r3, r2
 8004788:	00db      	lsls	r3, r3, #3
 800478a:	3310      	adds	r3, #16
 800478c:	687a      	ldr	r2, [r7, #4]
 800478e:	4413      	add	r3, r2
 8004790:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2201      	movs	r2, #1
 8004796:	705a      	strb	r2, [r3, #1]
 8004798:	e00e      	b.n	80047b8 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800479a:	78fb      	ldrb	r3, [r7, #3]
 800479c:	f003 0207 	and.w	r2, r3, #7
 80047a0:	4613      	mov	r3, r2
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	4413      	add	r3, r2
 80047a6:	00db      	lsls	r3, r3, #3
 80047a8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80047ac:	687a      	ldr	r2, [r7, #4]
 80047ae:	4413      	add	r3, r2
 80047b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2200      	movs	r2, #0
 80047b6:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80047b8:	78fb      	ldrb	r3, [r7, #3]
 80047ba:	f003 0307 	and.w	r3, r3, #7
 80047be:	b2da      	uxtb	r2, r3
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80047ca:	2b01      	cmp	r3, #1
 80047cc:	d101      	bne.n	80047d2 <HAL_PCD_EP_Close+0x6a>
 80047ce:	2302      	movs	r3, #2
 80047d0:	e00e      	b.n	80047f0 <HAL_PCD_EP_Close+0x88>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2201      	movs	r2, #1
 80047d6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	68f9      	ldr	r1, [r7, #12]
 80047e0:	4618      	mov	r0, r3
 80047e2:	f004 f879 	bl	80088d8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2200      	movs	r2, #0
 80047ea:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 80047ee:	2300      	movs	r3, #0
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	3710      	adds	r7, #16
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}

080047f8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b086      	sub	sp, #24
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	60f8      	str	r0, [r7, #12]
 8004800:	607a      	str	r2, [r7, #4]
 8004802:	603b      	str	r3, [r7, #0]
 8004804:	460b      	mov	r3, r1
 8004806:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004808:	7afb      	ldrb	r3, [r7, #11]
 800480a:	f003 0207 	and.w	r2, r3, #7
 800480e:	4613      	mov	r3, r2
 8004810:	009b      	lsls	r3, r3, #2
 8004812:	4413      	add	r3, r2
 8004814:	00db      	lsls	r3, r3, #3
 8004816:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800481a:	68fa      	ldr	r2, [r7, #12]
 800481c:	4413      	add	r3, r2
 800481e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	687a      	ldr	r2, [r7, #4]
 8004824:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	683a      	ldr	r2, [r7, #0]
 800482a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	2200      	movs	r2, #0
 8004830:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	2200      	movs	r2, #0
 8004836:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004838:	7afb      	ldrb	r3, [r7, #11]
 800483a:	f003 0307 	and.w	r3, r3, #7
 800483e:	b2da      	uxtb	r2, r3
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	6979      	ldr	r1, [r7, #20]
 800484a:	4618      	mov	r0, r3
 800484c:	f004 fa31 	bl	8008cb2 <USB_EPStartXfer>

  return HAL_OK;
 8004850:	2300      	movs	r3, #0
}
 8004852:	4618      	mov	r0, r3
 8004854:	3718      	adds	r7, #24
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}

0800485a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800485a:	b480      	push	{r7}
 800485c:	b083      	sub	sp, #12
 800485e:	af00      	add	r7, sp, #0
 8004860:	6078      	str	r0, [r7, #4]
 8004862:	460b      	mov	r3, r1
 8004864:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004866:	78fb      	ldrb	r3, [r7, #3]
 8004868:	f003 0207 	and.w	r2, r3, #7
 800486c:	6879      	ldr	r1, [r7, #4]
 800486e:	4613      	mov	r3, r2
 8004870:	009b      	lsls	r3, r3, #2
 8004872:	4413      	add	r3, r2
 8004874:	00db      	lsls	r3, r3, #3
 8004876:	440b      	add	r3, r1
 8004878:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 800487c:	681b      	ldr	r3, [r3, #0]
}
 800487e:	4618      	mov	r0, r3
 8004880:	370c      	adds	r7, #12
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr

0800488a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800488a:	b580      	push	{r7, lr}
 800488c:	b086      	sub	sp, #24
 800488e:	af00      	add	r7, sp, #0
 8004890:	60f8      	str	r0, [r7, #12]
 8004892:	607a      	str	r2, [r7, #4]
 8004894:	603b      	str	r3, [r7, #0]
 8004896:	460b      	mov	r3, r1
 8004898:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800489a:	7afb      	ldrb	r3, [r7, #11]
 800489c:	f003 0207 	and.w	r2, r3, #7
 80048a0:	4613      	mov	r3, r2
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	4413      	add	r3, r2
 80048a6:	00db      	lsls	r3, r3, #3
 80048a8:	3310      	adds	r3, #16
 80048aa:	68fa      	ldr	r2, [r7, #12]
 80048ac:	4413      	add	r3, r2
 80048ae:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	687a      	ldr	r2, [r7, #4]
 80048b4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	683a      	ldr	r2, [r7, #0]
 80048ba:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	2201      	movs	r2, #1
 80048c0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	683a      	ldr	r2, [r7, #0]
 80048c8:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	2200      	movs	r2, #0
 80048ce:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	2201      	movs	r2, #1
 80048d4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80048d6:	7afb      	ldrb	r3, [r7, #11]
 80048d8:	f003 0307 	and.w	r3, r3, #7
 80048dc:	b2da      	uxtb	r2, r3
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	6979      	ldr	r1, [r7, #20]
 80048e8:	4618      	mov	r0, r3
 80048ea:	f004 f9e2 	bl	8008cb2 <USB_EPStartXfer>

  return HAL_OK;
 80048ee:	2300      	movs	r3, #0
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3718      	adds	r7, #24
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}

080048f8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b084      	sub	sp, #16
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
 8004900:	460b      	mov	r3, r1
 8004902:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004904:	78fb      	ldrb	r3, [r7, #3]
 8004906:	f003 0307 	and.w	r3, r3, #7
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	7912      	ldrb	r2, [r2, #4]
 800490e:	4293      	cmp	r3, r2
 8004910:	d901      	bls.n	8004916 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	e03e      	b.n	8004994 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004916:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800491a:	2b00      	cmp	r3, #0
 800491c:	da0e      	bge.n	800493c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800491e:	78fb      	ldrb	r3, [r7, #3]
 8004920:	f003 0207 	and.w	r2, r3, #7
 8004924:	4613      	mov	r3, r2
 8004926:	009b      	lsls	r3, r3, #2
 8004928:	4413      	add	r3, r2
 800492a:	00db      	lsls	r3, r3, #3
 800492c:	3310      	adds	r3, #16
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	4413      	add	r3, r2
 8004932:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2201      	movs	r2, #1
 8004938:	705a      	strb	r2, [r3, #1]
 800493a:	e00c      	b.n	8004956 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800493c:	78fa      	ldrb	r2, [r7, #3]
 800493e:	4613      	mov	r3, r2
 8004940:	009b      	lsls	r3, r3, #2
 8004942:	4413      	add	r3, r2
 8004944:	00db      	lsls	r3, r3, #3
 8004946:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	4413      	add	r3, r2
 800494e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2200      	movs	r2, #0
 8004954:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2201      	movs	r2, #1
 800495a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800495c:	78fb      	ldrb	r3, [r7, #3]
 800495e:	f003 0307 	and.w	r3, r3, #7
 8004962:	b2da      	uxtb	r2, r3
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800496e:	2b01      	cmp	r3, #1
 8004970:	d101      	bne.n	8004976 <HAL_PCD_EP_SetStall+0x7e>
 8004972:	2302      	movs	r3, #2
 8004974:	e00e      	b.n	8004994 <HAL_PCD_EP_SetStall+0x9c>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2201      	movs	r2, #1
 800497a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	68f9      	ldr	r1, [r7, #12]
 8004984:	4618      	mov	r0, r3
 8004986:	f004 ff43 	bl	8009810 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2200      	movs	r2, #0
 800498e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8004992:	2300      	movs	r3, #0
}
 8004994:	4618      	mov	r0, r3
 8004996:	3710      	adds	r7, #16
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}

0800499c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b084      	sub	sp, #16
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
 80049a4:	460b      	mov	r3, r1
 80049a6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80049a8:	78fb      	ldrb	r3, [r7, #3]
 80049aa:	f003 030f 	and.w	r3, r3, #15
 80049ae:	687a      	ldr	r2, [r7, #4]
 80049b0:	7912      	ldrb	r2, [r2, #4]
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d901      	bls.n	80049ba <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e040      	b.n	8004a3c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80049ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	da0e      	bge.n	80049e0 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80049c2:	78fb      	ldrb	r3, [r7, #3]
 80049c4:	f003 0207 	and.w	r2, r3, #7
 80049c8:	4613      	mov	r3, r2
 80049ca:	009b      	lsls	r3, r3, #2
 80049cc:	4413      	add	r3, r2
 80049ce:	00db      	lsls	r3, r3, #3
 80049d0:	3310      	adds	r3, #16
 80049d2:	687a      	ldr	r2, [r7, #4]
 80049d4:	4413      	add	r3, r2
 80049d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2201      	movs	r2, #1
 80049dc:	705a      	strb	r2, [r3, #1]
 80049de:	e00e      	b.n	80049fe <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80049e0:	78fb      	ldrb	r3, [r7, #3]
 80049e2:	f003 0207 	and.w	r2, r3, #7
 80049e6:	4613      	mov	r3, r2
 80049e8:	009b      	lsls	r3, r3, #2
 80049ea:	4413      	add	r3, r2
 80049ec:	00db      	lsls	r3, r3, #3
 80049ee:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	4413      	add	r3, r2
 80049f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2200      	movs	r2, #0
 80049fc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2200      	movs	r2, #0
 8004a02:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004a04:	78fb      	ldrb	r3, [r7, #3]
 8004a06:	f003 0307 	and.w	r3, r3, #7
 8004a0a:	b2da      	uxtb	r2, r3
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d101      	bne.n	8004a1e <HAL_PCD_EP_ClrStall+0x82>
 8004a1a:	2302      	movs	r3, #2
 8004a1c:	e00e      	b.n	8004a3c <HAL_PCD_EP_ClrStall+0xa0>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2201      	movs	r2, #1
 8004a22:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	68f9      	ldr	r1, [r7, #12]
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f004 ff40 	bl	80098b2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2200      	movs	r2, #0
 8004a36:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8004a3a:	2300      	movs	r3, #0
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3710      	adds	r7, #16
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}

08004a44 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b092      	sub	sp, #72	@ 0x48
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004a4c:	e333      	b.n	80050b6 <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004a56:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004a58:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8004a5a:	b2db      	uxtb	r3, r3
 8004a5c:	f003 030f 	and.w	r3, r3, #15
 8004a60:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 8004a64:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	f040 8108 	bne.w	8004c7e <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004a6e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8004a70:	f003 0310 	and.w	r3, r3, #16
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d14c      	bne.n	8004b12 <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	881b      	ldrh	r3, [r3, #0]
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8004a84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a88:	813b      	strh	r3, [r7, #8]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	893b      	ldrh	r3, [r7, #8]
 8004a90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a98:	b29b      	uxth	r3, r3
 8004a9a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	3310      	adds	r3, #16
 8004aa0:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	461a      	mov	r2, r3
 8004aae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ab0:	781b      	ldrb	r3, [r3, #0]
 8004ab2:	00db      	lsls	r3, r3, #3
 8004ab4:	4413      	add	r3, r2
 8004ab6:	687a      	ldr	r2, [r7, #4]
 8004ab8:	6812      	ldr	r2, [r2, #0]
 8004aba:	4413      	add	r3, r2
 8004abc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004ac0:	881b      	ldrh	r3, [r3, #0]
 8004ac2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004ac6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ac8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004aca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004acc:	695a      	ldr	r2, [r3, #20]
 8004ace:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ad0:	69db      	ldr	r3, [r3, #28]
 8004ad2:	441a      	add	r2, r3
 8004ad4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ad6:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004ad8:	2100      	movs	r1, #0
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f00a fbc3 	bl	800f266 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	7b1b      	ldrb	r3, [r3, #12]
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	f000 82e5 	beq.w	80050b6 <PCD_EP_ISR_Handler+0x672>
 8004aec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004aee:	699b      	ldr	r3, [r3, #24]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	f040 82e0 	bne.w	80050b6 <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	7b1b      	ldrb	r3, [r3, #12]
 8004afa:	b2db      	uxtb	r3, r3
 8004afc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004b00:	b2da      	uxtb	r2, r3
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	731a      	strb	r2, [r3, #12]
 8004b10:	e2d1      	b.n	80050b6 <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004b18:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	881b      	ldrh	r3, [r3, #0]
 8004b20:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004b22:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004b24:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d032      	beq.n	8004b92 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b34:	b29b      	uxth	r3, r3
 8004b36:	461a      	mov	r2, r3
 8004b38:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b3a:	781b      	ldrb	r3, [r3, #0]
 8004b3c:	00db      	lsls	r3, r3, #3
 8004b3e:	4413      	add	r3, r2
 8004b40:	687a      	ldr	r2, [r7, #4]
 8004b42:	6812      	ldr	r2, [r2, #0]
 8004b44:	4413      	add	r3, r2
 8004b46:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004b4a:	881b      	ldrh	r3, [r3, #0]
 8004b4c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004b50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b52:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6818      	ldr	r0, [r3, #0]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8004b5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b60:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004b62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b64:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	f004 ffc9 	bl	8009afe <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	881b      	ldrh	r3, [r3, #0]
 8004b72:	b29a      	uxth	r2, r3
 8004b74:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8004b78:	4013      	ands	r3, r2
 8004b7a:	817b      	strh	r3, [r7, #10]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	897a      	ldrh	r2, [r7, #10]
 8004b82:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004b86:	b292      	uxth	r2, r2
 8004b88:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f00a fb3e 	bl	800f20c <HAL_PCD_SetupStageCallback>
 8004b90:	e291      	b.n	80050b6 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004b92:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	f280 828d 	bge.w	80050b6 <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	881b      	ldrh	r3, [r3, #0]
 8004ba2:	b29a      	uxth	r2, r3
 8004ba4:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8004ba8:	4013      	ands	r3, r2
 8004baa:	81fb      	strh	r3, [r7, #14]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	89fa      	ldrh	r2, [r7, #14]
 8004bb2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004bb6:	b292      	uxth	r2, r2
 8004bb8:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	461a      	mov	r2, r3
 8004bc6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004bc8:	781b      	ldrb	r3, [r3, #0]
 8004bca:	00db      	lsls	r3, r3, #3
 8004bcc:	4413      	add	r3, r2
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	6812      	ldr	r2, [r2, #0]
 8004bd2:	4413      	add	r3, r2
 8004bd4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004bd8:	881b      	ldrh	r3, [r3, #0]
 8004bda:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004bde:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004be0:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004be2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004be4:	69db      	ldr	r3, [r3, #28]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d019      	beq.n	8004c1e <PCD_EP_ISR_Handler+0x1da>
 8004bea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004bec:	695b      	ldr	r3, [r3, #20]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d015      	beq.n	8004c1e <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6818      	ldr	r0, [r3, #0]
 8004bf6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004bf8:	6959      	ldr	r1, [r3, #20]
 8004bfa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004bfc:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004bfe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c00:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004c02:	b29b      	uxth	r3, r3
 8004c04:	f004 ff7b 	bl	8009afe <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004c08:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c0a:	695a      	ldr	r2, [r3, #20]
 8004c0c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c0e:	69db      	ldr	r3, [r3, #28]
 8004c10:	441a      	add	r2, r3
 8004c12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c14:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004c16:	2100      	movs	r1, #0
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	f00a fb09 	bl	800f230 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	881b      	ldrh	r3, [r3, #0]
 8004c24:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8004c26:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004c28:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	f040 8242 	bne.w	80050b6 <PCD_EP_ISR_Handler+0x672>
 8004c32:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004c34:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004c38:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004c3c:	f000 823b 	beq.w	80050b6 <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	881b      	ldrh	r3, [r3, #0]
 8004c46:	b29b      	uxth	r3, r3
 8004c48:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004c4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c50:	81bb      	strh	r3, [r7, #12]
 8004c52:	89bb      	ldrh	r3, [r7, #12]
 8004c54:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004c58:	81bb      	strh	r3, [r7, #12]
 8004c5a:	89bb      	ldrh	r3, [r7, #12]
 8004c5c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004c60:	81bb      	strh	r3, [r7, #12]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	89bb      	ldrh	r3, [r7, #12]
 8004c68:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c6c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c70:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c78:	b29b      	uxth	r3, r3
 8004c7a:	8013      	strh	r3, [r2, #0]
 8004c7c:	e21b      	b.n	80050b6 <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	461a      	mov	r2, r3
 8004c84:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8004c88:	009b      	lsls	r3, r3, #2
 8004c8a:	4413      	add	r3, r2
 8004c8c:	881b      	ldrh	r3, [r3, #0]
 8004c8e:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004c90:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	f280 80f1 	bge.w	8004e7c <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	461a      	mov	r2, r3
 8004ca0:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8004ca4:	009b      	lsls	r3, r3, #2
 8004ca6:	4413      	add	r3, r2
 8004ca8:	881b      	ldrh	r3, [r3, #0]
 8004caa:	b29a      	uxth	r2, r3
 8004cac:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8004cb0:	4013      	ands	r3, r2
 8004cb2:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	461a      	mov	r2, r3
 8004cba:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	4413      	add	r3, r2
 8004cc2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004cc4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004cc8:	b292      	uxth	r2, r2
 8004cca:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004ccc:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8004cd0:	4613      	mov	r3, r2
 8004cd2:	009b      	lsls	r3, r3, #2
 8004cd4:	4413      	add	r3, r2
 8004cd6:	00db      	lsls	r3, r3, #3
 8004cd8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004cdc:	687a      	ldr	r2, [r7, #4]
 8004cde:	4413      	add	r3, r2
 8004ce0:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004ce2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ce4:	7b1b      	ldrb	r3, [r3, #12]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d123      	bne.n	8004d32 <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004cf2:	b29b      	uxth	r3, r3
 8004cf4:	461a      	mov	r2, r3
 8004cf6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004cf8:	781b      	ldrb	r3, [r3, #0]
 8004cfa:	00db      	lsls	r3, r3, #3
 8004cfc:	4413      	add	r3, r2
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	6812      	ldr	r2, [r2, #0]
 8004d02:	4413      	add	r3, r2
 8004d04:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004d08:	881b      	ldrh	r3, [r3, #0]
 8004d0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d0e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 8004d12:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	f000 808b 	beq.w	8004e32 <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6818      	ldr	r0, [r3, #0]
 8004d20:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d22:	6959      	ldr	r1, [r3, #20]
 8004d24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d26:	88da      	ldrh	r2, [r3, #6]
 8004d28:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004d2c:	f004 fee7 	bl	8009afe <USB_ReadPMA>
 8004d30:	e07f      	b.n	8004e32 <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004d32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d34:	78db      	ldrb	r3, [r3, #3]
 8004d36:	2b02      	cmp	r3, #2
 8004d38:	d109      	bne.n	8004d4e <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004d3a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004d3c:	461a      	mov	r2, r3
 8004d3e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	f000 f9c6 	bl	80050d2 <HAL_PCD_EP_DB_Receive>
 8004d46:	4603      	mov	r3, r0
 8004d48:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8004d4c:	e071      	b.n	8004e32 <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	461a      	mov	r2, r3
 8004d54:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d56:	781b      	ldrb	r3, [r3, #0]
 8004d58:	009b      	lsls	r3, r3, #2
 8004d5a:	4413      	add	r3, r2
 8004d5c:	881b      	ldrh	r3, [r3, #0]
 8004d5e:	b29b      	uxth	r3, r3
 8004d60:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d68:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	461a      	mov	r2, r3
 8004d70:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d72:	781b      	ldrb	r3, [r3, #0]
 8004d74:	009b      	lsls	r3, r3, #2
 8004d76:	441a      	add	r2, r3
 8004d78:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8004d7a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d7e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d86:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004d8a:	b29b      	uxth	r3, r3
 8004d8c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	461a      	mov	r2, r3
 8004d94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d96:	781b      	ldrb	r3, [r3, #0]
 8004d98:	009b      	lsls	r3, r3, #2
 8004d9a:	4413      	add	r3, r2
 8004d9c:	881b      	ldrh	r3, [r3, #0]
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d022      	beq.n	8004dee <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004db0:	b29b      	uxth	r3, r3
 8004db2:	461a      	mov	r2, r3
 8004db4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004db6:	781b      	ldrb	r3, [r3, #0]
 8004db8:	00db      	lsls	r3, r3, #3
 8004dba:	4413      	add	r3, r2
 8004dbc:	687a      	ldr	r2, [r7, #4]
 8004dbe:	6812      	ldr	r2, [r2, #0]
 8004dc0:	4413      	add	r3, r2
 8004dc2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004dc6:	881b      	ldrh	r3, [r3, #0]
 8004dc8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004dcc:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8004dd0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d02c      	beq.n	8004e32 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6818      	ldr	r0, [r3, #0]
 8004ddc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004dde:	6959      	ldr	r1, [r3, #20]
 8004de0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004de2:	891a      	ldrh	r2, [r3, #8]
 8004de4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004de8:	f004 fe89 	bl	8009afe <USB_ReadPMA>
 8004dec:	e021      	b.n	8004e32 <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	461a      	mov	r2, r3
 8004dfa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004dfc:	781b      	ldrb	r3, [r3, #0]
 8004dfe:	00db      	lsls	r3, r3, #3
 8004e00:	4413      	add	r3, r2
 8004e02:	687a      	ldr	r2, [r7, #4]
 8004e04:	6812      	ldr	r2, [r2, #0]
 8004e06:	4413      	add	r3, r2
 8004e08:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004e0c:	881b      	ldrh	r3, [r3, #0]
 8004e0e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e12:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8004e16:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d009      	beq.n	8004e32 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6818      	ldr	r0, [r3, #0]
 8004e22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e24:	6959      	ldr	r1, [r3, #20]
 8004e26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e28:	895a      	ldrh	r2, [r3, #10]
 8004e2a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004e2e:	f004 fe66 	bl	8009afe <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004e32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e34:	69da      	ldr	r2, [r3, #28]
 8004e36:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004e3a:	441a      	add	r2, r3
 8004e3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e3e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004e40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e42:	695a      	ldr	r2, [r3, #20]
 8004e44:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004e48:	441a      	add	r2, r3
 8004e4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e4c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004e4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e50:	699b      	ldr	r3, [r3, #24]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d005      	beq.n	8004e62 <PCD_EP_ISR_Handler+0x41e>
 8004e56:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8004e5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e5c:	691b      	ldr	r3, [r3, #16]
 8004e5e:	429a      	cmp	r2, r3
 8004e60:	d206      	bcs.n	8004e70 <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004e62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e64:	781b      	ldrb	r3, [r3, #0]
 8004e66:	4619      	mov	r1, r3
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f00a f9e1 	bl	800f230 <HAL_PCD_DataOutStageCallback>
 8004e6e:	e005      	b.n	8004e7c <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004e76:	4618      	mov	r0, r3
 8004e78:	f003 ff1b 	bl	8008cb2 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004e7c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004e7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	f000 8117 	beq.w	80050b6 <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 8004e88:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8004e8c:	4613      	mov	r3, r2
 8004e8e:	009b      	lsls	r3, r3, #2
 8004e90:	4413      	add	r3, r2
 8004e92:	00db      	lsls	r3, r3, #3
 8004e94:	3310      	adds	r3, #16
 8004e96:	687a      	ldr	r2, [r7, #4]
 8004e98:	4413      	add	r3, r2
 8004e9a:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	461a      	mov	r2, r3
 8004ea2:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8004ea6:	009b      	lsls	r3, r3, #2
 8004ea8:	4413      	add	r3, r2
 8004eaa:	881b      	ldrh	r3, [r3, #0]
 8004eac:	b29b      	uxth	r3, r3
 8004eae:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8004eb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004eb6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	461a      	mov	r2, r3
 8004ebe:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8004ec2:	009b      	lsls	r3, r3, #2
 8004ec4:	441a      	add	r2, r3
 8004ec6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8004ec8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ecc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ed0:	b29b      	uxth	r3, r3
 8004ed2:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8004ed4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ed6:	78db      	ldrb	r3, [r3, #3]
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	f040 80a1 	bne.w	8005020 <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 8004ede:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8004ee4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ee6:	7b1b      	ldrb	r3, [r3, #12]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	f000 8092 	beq.w	8005012 <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004eee:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004ef0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d046      	beq.n	8004f86 <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004ef8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004efa:	785b      	ldrb	r3, [r3, #1]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d126      	bne.n	8004f4e <PCD_EP_ISR_Handler+0x50a>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	617b      	str	r3, [r7, #20]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	461a      	mov	r2, r3
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	4413      	add	r3, r2
 8004f16:	617b      	str	r3, [r7, #20]
 8004f18:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f1a:	781b      	ldrb	r3, [r3, #0]
 8004f1c:	00da      	lsls	r2, r3, #3
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	4413      	add	r3, r2
 8004f22:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004f26:	613b      	str	r3, [r7, #16]
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	881b      	ldrh	r3, [r3, #0]
 8004f2c:	b29b      	uxth	r3, r3
 8004f2e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f32:	b29a      	uxth	r2, r3
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	801a      	strh	r2, [r3, #0]
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	881b      	ldrh	r3, [r3, #0]
 8004f3c:	b29b      	uxth	r3, r3
 8004f3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f46:	b29a      	uxth	r2, r3
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	801a      	strh	r2, [r3, #0]
 8004f4c:	e061      	b.n	8005012 <PCD_EP_ISR_Handler+0x5ce>
 8004f4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f50:	785b      	ldrb	r3, [r3, #1]
 8004f52:	2b01      	cmp	r3, #1
 8004f54:	d15d      	bne.n	8005012 <PCD_EP_ISR_Handler+0x5ce>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	61fb      	str	r3, [r7, #28]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004f64:	b29b      	uxth	r3, r3
 8004f66:	461a      	mov	r2, r3
 8004f68:	69fb      	ldr	r3, [r7, #28]
 8004f6a:	4413      	add	r3, r2
 8004f6c:	61fb      	str	r3, [r7, #28]
 8004f6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f70:	781b      	ldrb	r3, [r3, #0]
 8004f72:	00da      	lsls	r2, r3, #3
 8004f74:	69fb      	ldr	r3, [r7, #28]
 8004f76:	4413      	add	r3, r2
 8004f78:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004f7c:	61bb      	str	r3, [r7, #24]
 8004f7e:	69bb      	ldr	r3, [r7, #24]
 8004f80:	2200      	movs	r2, #0
 8004f82:	801a      	strh	r2, [r3, #0]
 8004f84:	e045      	b.n	8005012 <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f8c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f8e:	785b      	ldrb	r3, [r3, #1]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d126      	bne.n	8004fe2 <PCD_EP_ISR_Handler+0x59e>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fa8:	4413      	add	r3, r2
 8004faa:	627b      	str	r3, [r7, #36]	@ 0x24
 8004fac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004fae:	781b      	ldrb	r3, [r3, #0]
 8004fb0:	00da      	lsls	r2, r3, #3
 8004fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fb4:	4413      	add	r3, r2
 8004fb6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004fba:	623b      	str	r3, [r7, #32]
 8004fbc:	6a3b      	ldr	r3, [r7, #32]
 8004fbe:	881b      	ldrh	r3, [r3, #0]
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004fc6:	b29a      	uxth	r2, r3
 8004fc8:	6a3b      	ldr	r3, [r7, #32]
 8004fca:	801a      	strh	r2, [r3, #0]
 8004fcc:	6a3b      	ldr	r3, [r7, #32]
 8004fce:	881b      	ldrh	r3, [r3, #0]
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fd6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fda:	b29a      	uxth	r2, r3
 8004fdc:	6a3b      	ldr	r3, [r7, #32]
 8004fde:	801a      	strh	r2, [r3, #0]
 8004fe0:	e017      	b.n	8005012 <PCD_EP_ISR_Handler+0x5ce>
 8004fe2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004fe4:	785b      	ldrb	r3, [r3, #1]
 8004fe6:	2b01      	cmp	r3, #1
 8004fe8:	d113      	bne.n	8005012 <PCD_EP_ISR_Handler+0x5ce>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004ff2:	b29b      	uxth	r3, r3
 8004ff4:	461a      	mov	r2, r3
 8004ff6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ff8:	4413      	add	r3, r2
 8004ffa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ffc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ffe:	781b      	ldrb	r3, [r3, #0]
 8005000:	00da      	lsls	r2, r3, #3
 8005002:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005004:	4413      	add	r3, r2
 8005006:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800500a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800500c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800500e:	2200      	movs	r2, #0
 8005010:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005012:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005014:	781b      	ldrb	r3, [r3, #0]
 8005016:	4619      	mov	r1, r3
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	f00a f924 	bl	800f266 <HAL_PCD_DataInStageCallback>
 800501e:	e04a      	b.n	80050b6 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8005020:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005022:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005026:	2b00      	cmp	r3, #0
 8005028:	d13f      	bne.n	80050aa <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005032:	b29b      	uxth	r3, r3
 8005034:	461a      	mov	r2, r3
 8005036:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005038:	781b      	ldrb	r3, [r3, #0]
 800503a:	00db      	lsls	r3, r3, #3
 800503c:	4413      	add	r3, r2
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	6812      	ldr	r2, [r2, #0]
 8005042:	4413      	add	r3, r2
 8005044:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005048:	881b      	ldrh	r3, [r3, #0]
 800504a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800504e:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 8005050:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005052:	699a      	ldr	r2, [r3, #24]
 8005054:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8005056:	429a      	cmp	r2, r3
 8005058:	d906      	bls.n	8005068 <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 800505a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800505c:	699a      	ldr	r2, [r3, #24]
 800505e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8005060:	1ad2      	subs	r2, r2, r3
 8005062:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005064:	619a      	str	r2, [r3, #24]
 8005066:	e002      	b.n	800506e <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 8005068:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800506a:	2200      	movs	r2, #0
 800506c:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800506e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005070:	699b      	ldr	r3, [r3, #24]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d106      	bne.n	8005084 <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005076:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005078:	781b      	ldrb	r3, [r3, #0]
 800507a:	4619      	mov	r1, r3
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	f00a f8f2 	bl	800f266 <HAL_PCD_DataInStageCallback>
 8005082:	e018      	b.n	80050b6 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8005084:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005086:	695a      	ldr	r2, [r3, #20]
 8005088:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800508a:	441a      	add	r2, r3
 800508c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800508e:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8005090:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005092:	69da      	ldr	r2, [r3, #28]
 8005094:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8005096:	441a      	add	r2, r3
 8005098:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800509a:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80050a2:	4618      	mov	r0, r3
 80050a4:	f003 fe05 	bl	8008cb2 <USB_EPStartXfer>
 80050a8:	e005      	b.n	80050b6 <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80050aa:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80050ac:	461a      	mov	r2, r3
 80050ae:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	f000 f917 	bl	80052e4 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80050be:	b29b      	uxth	r3, r3
 80050c0:	b21b      	sxth	r3, r3
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	f6ff acc3 	blt.w	8004a4e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80050c8:	2300      	movs	r3, #0
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	3748      	adds	r7, #72	@ 0x48
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}

080050d2 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80050d2:	b580      	push	{r7, lr}
 80050d4:	b088      	sub	sp, #32
 80050d6:	af00      	add	r7, sp, #0
 80050d8:	60f8      	str	r0, [r7, #12]
 80050da:	60b9      	str	r1, [r7, #8]
 80050dc:	4613      	mov	r3, r2
 80050de:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80050e0:	88fb      	ldrh	r3, [r7, #6]
 80050e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d07c      	beq.n	80051e4 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80050f2:	b29b      	uxth	r3, r3
 80050f4:	461a      	mov	r2, r3
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	781b      	ldrb	r3, [r3, #0]
 80050fa:	00db      	lsls	r3, r3, #3
 80050fc:	4413      	add	r3, r2
 80050fe:	68fa      	ldr	r2, [r7, #12]
 8005100:	6812      	ldr	r2, [r2, #0]
 8005102:	4413      	add	r3, r2
 8005104:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005108:	881b      	ldrh	r3, [r3, #0]
 800510a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800510e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	699a      	ldr	r2, [r3, #24]
 8005114:	8b7b      	ldrh	r3, [r7, #26]
 8005116:	429a      	cmp	r2, r3
 8005118:	d306      	bcc.n	8005128 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	699a      	ldr	r2, [r3, #24]
 800511e:	8b7b      	ldrh	r3, [r7, #26]
 8005120:	1ad2      	subs	r2, r2, r3
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	619a      	str	r2, [r3, #24]
 8005126:	e002      	b.n	800512e <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	2200      	movs	r2, #0
 800512c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	699b      	ldr	r3, [r3, #24]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d123      	bne.n	800517e <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	461a      	mov	r2, r3
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	781b      	ldrb	r3, [r3, #0]
 8005140:	009b      	lsls	r3, r3, #2
 8005142:	4413      	add	r3, r2
 8005144:	881b      	ldrh	r3, [r3, #0]
 8005146:	b29b      	uxth	r3, r3
 8005148:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800514c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005150:	833b      	strh	r3, [r7, #24]
 8005152:	8b3b      	ldrh	r3, [r7, #24]
 8005154:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005158:	833b      	strh	r3, [r7, #24]
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	461a      	mov	r2, r3
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	781b      	ldrb	r3, [r3, #0]
 8005164:	009b      	lsls	r3, r3, #2
 8005166:	441a      	add	r2, r3
 8005168:	8b3b      	ldrh	r3, [r7, #24]
 800516a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800516e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005172:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005176:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800517a:	b29b      	uxth	r3, r3
 800517c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800517e:	88fb      	ldrh	r3, [r7, #6]
 8005180:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005184:	2b00      	cmp	r3, #0
 8005186:	d01f      	beq.n	80051c8 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	461a      	mov	r2, r3
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	781b      	ldrb	r3, [r3, #0]
 8005192:	009b      	lsls	r3, r3, #2
 8005194:	4413      	add	r3, r2
 8005196:	881b      	ldrh	r3, [r3, #0]
 8005198:	b29b      	uxth	r3, r3
 800519a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800519e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051a2:	82fb      	strh	r3, [r7, #22]
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	461a      	mov	r2, r3
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	781b      	ldrb	r3, [r3, #0]
 80051ae:	009b      	lsls	r3, r3, #2
 80051b0:	441a      	add	r2, r3
 80051b2:	8afb      	ldrh	r3, [r7, #22]
 80051b4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80051b8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80051bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80051c0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80051c4:	b29b      	uxth	r3, r3
 80051c6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80051c8:	8b7b      	ldrh	r3, [r7, #26]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	f000 8085 	beq.w	80052da <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	6818      	ldr	r0, [r3, #0]
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	6959      	ldr	r1, [r3, #20]
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	891a      	ldrh	r2, [r3, #8]
 80051dc:	8b7b      	ldrh	r3, [r7, #26]
 80051de:	f004 fc8e 	bl	8009afe <USB_ReadPMA>
 80051e2:	e07a      	b.n	80052da <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80051ec:	b29b      	uxth	r3, r3
 80051ee:	461a      	mov	r2, r3
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	781b      	ldrb	r3, [r3, #0]
 80051f4:	00db      	lsls	r3, r3, #3
 80051f6:	4413      	add	r3, r2
 80051f8:	68fa      	ldr	r2, [r7, #12]
 80051fa:	6812      	ldr	r2, [r2, #0]
 80051fc:	4413      	add	r3, r2
 80051fe:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005202:	881b      	ldrh	r3, [r3, #0]
 8005204:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005208:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	699a      	ldr	r2, [r3, #24]
 800520e:	8b7b      	ldrh	r3, [r7, #26]
 8005210:	429a      	cmp	r2, r3
 8005212:	d306      	bcc.n	8005222 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	699a      	ldr	r2, [r3, #24]
 8005218:	8b7b      	ldrh	r3, [r7, #26]
 800521a:	1ad2      	subs	r2, r2, r3
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	619a      	str	r2, [r3, #24]
 8005220:	e002      	b.n	8005228 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	2200      	movs	r2, #0
 8005226:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	699b      	ldr	r3, [r3, #24]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d123      	bne.n	8005278 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	461a      	mov	r2, r3
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	781b      	ldrb	r3, [r3, #0]
 800523a:	009b      	lsls	r3, r3, #2
 800523c:	4413      	add	r3, r2
 800523e:	881b      	ldrh	r3, [r3, #0]
 8005240:	b29b      	uxth	r3, r3
 8005242:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005246:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800524a:	83fb      	strh	r3, [r7, #30]
 800524c:	8bfb      	ldrh	r3, [r7, #30]
 800524e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005252:	83fb      	strh	r3, [r7, #30]
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	461a      	mov	r2, r3
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	781b      	ldrb	r3, [r3, #0]
 800525e:	009b      	lsls	r3, r3, #2
 8005260:	441a      	add	r2, r3
 8005262:	8bfb      	ldrh	r3, [r7, #30]
 8005264:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005268:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800526c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005270:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005274:	b29b      	uxth	r3, r3
 8005276:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8005278:	88fb      	ldrh	r3, [r7, #6]
 800527a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800527e:	2b00      	cmp	r3, #0
 8005280:	d11f      	bne.n	80052c2 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	461a      	mov	r2, r3
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	781b      	ldrb	r3, [r3, #0]
 800528c:	009b      	lsls	r3, r3, #2
 800528e:	4413      	add	r3, r2
 8005290:	881b      	ldrh	r3, [r3, #0]
 8005292:	b29b      	uxth	r3, r3
 8005294:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005298:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800529c:	83bb      	strh	r3, [r7, #28]
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	461a      	mov	r2, r3
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	781b      	ldrb	r3, [r3, #0]
 80052a8:	009b      	lsls	r3, r3, #2
 80052aa:	441a      	add	r2, r3
 80052ac:	8bbb      	ldrh	r3, [r7, #28]
 80052ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80052b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80052b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80052ba:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80052be:	b29b      	uxth	r3, r3
 80052c0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80052c2:	8b7b      	ldrh	r3, [r7, #26]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d008      	beq.n	80052da <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	6818      	ldr	r0, [r3, #0]
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	6959      	ldr	r1, [r3, #20]
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	895a      	ldrh	r2, [r3, #10]
 80052d4:	8b7b      	ldrh	r3, [r7, #26]
 80052d6:	f004 fc12 	bl	8009afe <USB_ReadPMA>
    }
  }

  return count;
 80052da:	8b7b      	ldrh	r3, [r7, #26]
}
 80052dc:	4618      	mov	r0, r3
 80052de:	3720      	adds	r7, #32
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}

080052e4 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b0a6      	sub	sp, #152	@ 0x98
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	60f8      	str	r0, [r7, #12]
 80052ec:	60b9      	str	r1, [r7, #8]
 80052ee:	4613      	mov	r3, r2
 80052f0:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80052f2:	88fb      	ldrh	r3, [r7, #6]
 80052f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	f000 81f7 	beq.w	80056ec <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005306:	b29b      	uxth	r3, r3
 8005308:	461a      	mov	r2, r3
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	781b      	ldrb	r3, [r3, #0]
 800530e:	00db      	lsls	r3, r3, #3
 8005310:	4413      	add	r3, r2
 8005312:	68fa      	ldr	r2, [r7, #12]
 8005314:	6812      	ldr	r2, [r2, #0]
 8005316:	4413      	add	r3, r2
 8005318:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800531c:	881b      	ldrh	r3, [r3, #0]
 800531e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005322:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	699a      	ldr	r2, [r3, #24]
 800532a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800532e:	429a      	cmp	r2, r3
 8005330:	d907      	bls.n	8005342 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	699a      	ldr	r2, [r3, #24]
 8005336:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800533a:	1ad2      	subs	r2, r2, r3
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	619a      	str	r2, [r3, #24]
 8005340:	e002      	b.n	8005348 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	2200      	movs	r2, #0
 8005346:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	699b      	ldr	r3, [r3, #24]
 800534c:	2b00      	cmp	r3, #0
 800534e:	f040 80e1 	bne.w	8005514 <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	785b      	ldrb	r3, [r3, #1]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d126      	bne.n	80053a8 <HAL_PCD_EP_DB_Transmit+0xc4>
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005368:	b29b      	uxth	r3, r3
 800536a:	461a      	mov	r2, r3
 800536c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800536e:	4413      	add	r3, r2
 8005370:	633b      	str	r3, [r7, #48]	@ 0x30
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	781b      	ldrb	r3, [r3, #0]
 8005376:	00da      	lsls	r2, r3, #3
 8005378:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800537a:	4413      	add	r3, r2
 800537c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005380:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005382:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005384:	881b      	ldrh	r3, [r3, #0]
 8005386:	b29b      	uxth	r3, r3
 8005388:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800538c:	b29a      	uxth	r2, r3
 800538e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005390:	801a      	strh	r2, [r3, #0]
 8005392:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005394:	881b      	ldrh	r3, [r3, #0]
 8005396:	b29b      	uxth	r3, r3
 8005398:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800539c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053a0:	b29a      	uxth	r2, r3
 80053a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053a4:	801a      	strh	r2, [r3, #0]
 80053a6:	e01a      	b.n	80053de <HAL_PCD_EP_DB_Transmit+0xfa>
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	785b      	ldrb	r3, [r3, #1]
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d116      	bne.n	80053de <HAL_PCD_EP_DB_Transmit+0xfa>
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80053be:	b29b      	uxth	r3, r3
 80053c0:	461a      	mov	r2, r3
 80053c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053c4:	4413      	add	r3, r2
 80053c6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	781b      	ldrb	r3, [r3, #0]
 80053cc:	00da      	lsls	r2, r3, #3
 80053ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053d0:	4413      	add	r3, r2
 80053d2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80053d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80053d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053da:	2200      	movs	r2, #0
 80053dc:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	785b      	ldrb	r3, [r3, #1]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d126      	bne.n	800543a <HAL_PCD_EP_DB_Transmit+0x156>
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	623b      	str	r3, [r7, #32]
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80053fa:	b29b      	uxth	r3, r3
 80053fc:	461a      	mov	r2, r3
 80053fe:	6a3b      	ldr	r3, [r7, #32]
 8005400:	4413      	add	r3, r2
 8005402:	623b      	str	r3, [r7, #32]
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	781b      	ldrb	r3, [r3, #0]
 8005408:	00da      	lsls	r2, r3, #3
 800540a:	6a3b      	ldr	r3, [r7, #32]
 800540c:	4413      	add	r3, r2
 800540e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005412:	61fb      	str	r3, [r7, #28]
 8005414:	69fb      	ldr	r3, [r7, #28]
 8005416:	881b      	ldrh	r3, [r3, #0]
 8005418:	b29b      	uxth	r3, r3
 800541a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800541e:	b29a      	uxth	r2, r3
 8005420:	69fb      	ldr	r3, [r7, #28]
 8005422:	801a      	strh	r2, [r3, #0]
 8005424:	69fb      	ldr	r3, [r7, #28]
 8005426:	881b      	ldrh	r3, [r3, #0]
 8005428:	b29b      	uxth	r3, r3
 800542a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800542e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005432:	b29a      	uxth	r2, r3
 8005434:	69fb      	ldr	r3, [r7, #28]
 8005436:	801a      	strh	r2, [r3, #0]
 8005438:	e017      	b.n	800546a <HAL_PCD_EP_DB_Transmit+0x186>
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	785b      	ldrb	r3, [r3, #1]
 800543e:	2b01      	cmp	r3, #1
 8005440:	d113      	bne.n	800546a <HAL_PCD_EP_DB_Transmit+0x186>
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800544a:	b29b      	uxth	r3, r3
 800544c:	461a      	mov	r2, r3
 800544e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005450:	4413      	add	r3, r2
 8005452:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	781b      	ldrb	r3, [r3, #0]
 8005458:	00da      	lsls	r2, r3, #3
 800545a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800545c:	4413      	add	r3, r2
 800545e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005462:	627b      	str	r3, [r7, #36]	@ 0x24
 8005464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005466:	2200      	movs	r2, #0
 8005468:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	78db      	ldrb	r3, [r3, #3]
 800546e:	2b02      	cmp	r3, #2
 8005470:	d123      	bne.n	80054ba <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	461a      	mov	r2, r3
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	781b      	ldrb	r3, [r3, #0]
 800547c:	009b      	lsls	r3, r3, #2
 800547e:	4413      	add	r3, r2
 8005480:	881b      	ldrh	r3, [r3, #0]
 8005482:	b29b      	uxth	r3, r3
 8005484:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005488:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800548c:	837b      	strh	r3, [r7, #26]
 800548e:	8b7b      	ldrh	r3, [r7, #26]
 8005490:	f083 0320 	eor.w	r3, r3, #32
 8005494:	837b      	strh	r3, [r7, #26]
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	461a      	mov	r2, r3
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	781b      	ldrb	r3, [r3, #0]
 80054a0:	009b      	lsls	r3, r3, #2
 80054a2:	441a      	add	r2, r3
 80054a4:	8b7b      	ldrh	r3, [r7, #26]
 80054a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80054aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80054ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80054b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80054b6:	b29b      	uxth	r3, r3
 80054b8:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	781b      	ldrb	r3, [r3, #0]
 80054be:	4619      	mov	r1, r3
 80054c0:	68f8      	ldr	r0, [r7, #12]
 80054c2:	f009 fed0 	bl	800f266 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80054c6:	88fb      	ldrh	r3, [r7, #6]
 80054c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d01f      	beq.n	8005510 <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	461a      	mov	r2, r3
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	781b      	ldrb	r3, [r3, #0]
 80054da:	009b      	lsls	r3, r3, #2
 80054dc:	4413      	add	r3, r2
 80054de:	881b      	ldrh	r3, [r3, #0]
 80054e0:	b29b      	uxth	r3, r3
 80054e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80054e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054ea:	833b      	strh	r3, [r7, #24]
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	461a      	mov	r2, r3
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	781b      	ldrb	r3, [r3, #0]
 80054f6:	009b      	lsls	r3, r3, #2
 80054f8:	441a      	add	r2, r3
 80054fa:	8b3b      	ldrh	r3, [r7, #24]
 80054fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005500:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005504:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005508:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800550c:	b29b      	uxth	r3, r3
 800550e:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8005510:	2300      	movs	r3, #0
 8005512:	e31f      	b.n	8005b54 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005514:	88fb      	ldrh	r3, [r7, #6]
 8005516:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800551a:	2b00      	cmp	r3, #0
 800551c:	d021      	beq.n	8005562 <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	461a      	mov	r2, r3
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	781b      	ldrb	r3, [r3, #0]
 8005528:	009b      	lsls	r3, r3, #2
 800552a:	4413      	add	r3, r2
 800552c:	881b      	ldrh	r3, [r3, #0]
 800552e:	b29b      	uxth	r3, r3
 8005530:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005534:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005538:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	461a      	mov	r2, r3
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	781b      	ldrb	r3, [r3, #0]
 8005546:	009b      	lsls	r3, r3, #2
 8005548:	441a      	add	r2, r3
 800554a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800554e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005552:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005556:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800555a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800555e:	b29b      	uxth	r3, r3
 8005560:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005568:	2b01      	cmp	r3, #1
 800556a:	f040 82ca 	bne.w	8005b02 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	695a      	ldr	r2, [r3, #20]
 8005572:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005576:	441a      	add	r2, r3
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	69da      	ldr	r2, [r3, #28]
 8005580:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005584:	441a      	add	r2, r3
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	6a1a      	ldr	r2, [r3, #32]
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	691b      	ldr	r3, [r3, #16]
 8005592:	429a      	cmp	r2, r3
 8005594:	d309      	bcc.n	80055aa <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	691b      	ldr	r3, [r3, #16]
 800559a:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	6a1a      	ldr	r2, [r3, #32]
 80055a0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80055a2:	1ad2      	subs	r2, r2, r3
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	621a      	str	r2, [r3, #32]
 80055a8:	e015      	b.n	80055d6 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	6a1b      	ldr	r3, [r3, #32]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d107      	bne.n	80055c2 <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 80055b2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80055b6:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	2200      	movs	r2, #0
 80055bc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80055c0:	e009      	b.n	80055d6 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	2200      	movs	r2, #0
 80055c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	6a1b      	ldr	r3, [r3, #32]
 80055ce:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	2200      	movs	r2, #0
 80055d4:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	785b      	ldrb	r3, [r3, #1]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d15f      	bne.n	800569e <HAL_PCD_EP_DB_Transmit+0x3ba>
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	643b      	str	r3, [r7, #64]	@ 0x40
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80055ec:	b29b      	uxth	r3, r3
 80055ee:	461a      	mov	r2, r3
 80055f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80055f2:	4413      	add	r3, r2
 80055f4:	643b      	str	r3, [r7, #64]	@ 0x40
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	781b      	ldrb	r3, [r3, #0]
 80055fa:	00da      	lsls	r2, r3, #3
 80055fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80055fe:	4413      	add	r3, r2
 8005600:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005604:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005606:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005608:	881b      	ldrh	r3, [r3, #0]
 800560a:	b29b      	uxth	r3, r3
 800560c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005610:	b29a      	uxth	r2, r3
 8005612:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005614:	801a      	strh	r2, [r3, #0]
 8005616:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005618:	2b00      	cmp	r3, #0
 800561a:	d10a      	bne.n	8005632 <HAL_PCD_EP_DB_Transmit+0x34e>
 800561c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800561e:	881b      	ldrh	r3, [r3, #0]
 8005620:	b29b      	uxth	r3, r3
 8005622:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005626:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800562a:	b29a      	uxth	r2, r3
 800562c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800562e:	801a      	strh	r2, [r3, #0]
 8005630:	e051      	b.n	80056d6 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8005632:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005634:	2b3e      	cmp	r3, #62	@ 0x3e
 8005636:	d816      	bhi.n	8005666 <HAL_PCD_EP_DB_Transmit+0x382>
 8005638:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800563a:	085b      	lsrs	r3, r3, #1
 800563c:	653b      	str	r3, [r7, #80]	@ 0x50
 800563e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005640:	f003 0301 	and.w	r3, r3, #1
 8005644:	2b00      	cmp	r3, #0
 8005646:	d002      	beq.n	800564e <HAL_PCD_EP_DB_Transmit+0x36a>
 8005648:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800564a:	3301      	adds	r3, #1
 800564c:	653b      	str	r3, [r7, #80]	@ 0x50
 800564e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005650:	881b      	ldrh	r3, [r3, #0]
 8005652:	b29a      	uxth	r2, r3
 8005654:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005656:	b29b      	uxth	r3, r3
 8005658:	029b      	lsls	r3, r3, #10
 800565a:	b29b      	uxth	r3, r3
 800565c:	4313      	orrs	r3, r2
 800565e:	b29a      	uxth	r2, r3
 8005660:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005662:	801a      	strh	r2, [r3, #0]
 8005664:	e037      	b.n	80056d6 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8005666:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005668:	095b      	lsrs	r3, r3, #5
 800566a:	653b      	str	r3, [r7, #80]	@ 0x50
 800566c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800566e:	f003 031f 	and.w	r3, r3, #31
 8005672:	2b00      	cmp	r3, #0
 8005674:	d102      	bne.n	800567c <HAL_PCD_EP_DB_Transmit+0x398>
 8005676:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005678:	3b01      	subs	r3, #1
 800567a:	653b      	str	r3, [r7, #80]	@ 0x50
 800567c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800567e:	881b      	ldrh	r3, [r3, #0]
 8005680:	b29a      	uxth	r2, r3
 8005682:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005684:	b29b      	uxth	r3, r3
 8005686:	029b      	lsls	r3, r3, #10
 8005688:	b29b      	uxth	r3, r3
 800568a:	4313      	orrs	r3, r2
 800568c:	b29b      	uxth	r3, r3
 800568e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005692:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005696:	b29a      	uxth	r2, r3
 8005698:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800569a:	801a      	strh	r2, [r3, #0]
 800569c:	e01b      	b.n	80056d6 <HAL_PCD_EP_DB_Transmit+0x3f2>
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	785b      	ldrb	r3, [r3, #1]
 80056a2:	2b01      	cmp	r3, #1
 80056a4:	d117      	bne.n	80056d6 <HAL_PCD_EP_DB_Transmit+0x3f2>
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80056b4:	b29b      	uxth	r3, r3
 80056b6:	461a      	mov	r2, r3
 80056b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80056ba:	4413      	add	r3, r2
 80056bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	781b      	ldrb	r3, [r3, #0]
 80056c2:	00da      	lsls	r2, r3, #3
 80056c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80056c6:	4413      	add	r3, r2
 80056c8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80056cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80056ce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80056d0:	b29a      	uxth	r2, r3
 80056d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80056d4:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	6818      	ldr	r0, [r3, #0]
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	6959      	ldr	r1, [r3, #20]
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	891a      	ldrh	r2, [r3, #8]
 80056e2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80056e4:	b29b      	uxth	r3, r3
 80056e6:	f004 f9c8 	bl	8009a7a <USB_WritePMA>
 80056ea:	e20a      	b.n	8005b02 <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	461a      	mov	r2, r3
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	781b      	ldrb	r3, [r3, #0]
 80056fc:	00db      	lsls	r3, r3, #3
 80056fe:	4413      	add	r3, r2
 8005700:	68fa      	ldr	r2, [r7, #12]
 8005702:	6812      	ldr	r2, [r2, #0]
 8005704:	4413      	add	r3, r2
 8005706:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800570a:	881b      	ldrh	r3, [r3, #0]
 800570c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005710:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	699a      	ldr	r2, [r3, #24]
 8005718:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800571c:	429a      	cmp	r2, r3
 800571e:	d307      	bcc.n	8005730 <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	699a      	ldr	r2, [r3, #24]
 8005724:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005728:	1ad2      	subs	r2, r2, r3
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	619a      	str	r2, [r3, #24]
 800572e:	e002      	b.n	8005736 <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	2200      	movs	r2, #0
 8005734:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	699b      	ldr	r3, [r3, #24]
 800573a:	2b00      	cmp	r3, #0
 800573c:	f040 80f6 	bne.w	800592c <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	785b      	ldrb	r3, [r3, #1]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d126      	bne.n	8005796 <HAL_PCD_EP_DB_Transmit+0x4b2>
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	677b      	str	r3, [r7, #116]	@ 0x74
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005756:	b29b      	uxth	r3, r3
 8005758:	461a      	mov	r2, r3
 800575a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800575c:	4413      	add	r3, r2
 800575e:	677b      	str	r3, [r7, #116]	@ 0x74
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	781b      	ldrb	r3, [r3, #0]
 8005764:	00da      	lsls	r2, r3, #3
 8005766:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005768:	4413      	add	r3, r2
 800576a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800576e:	673b      	str	r3, [r7, #112]	@ 0x70
 8005770:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005772:	881b      	ldrh	r3, [r3, #0]
 8005774:	b29b      	uxth	r3, r3
 8005776:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800577a:	b29a      	uxth	r2, r3
 800577c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800577e:	801a      	strh	r2, [r3, #0]
 8005780:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005782:	881b      	ldrh	r3, [r3, #0]
 8005784:	b29b      	uxth	r3, r3
 8005786:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800578a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800578e:	b29a      	uxth	r2, r3
 8005790:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005792:	801a      	strh	r2, [r3, #0]
 8005794:	e01a      	b.n	80057cc <HAL_PCD_EP_DB_Transmit+0x4e8>
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	785b      	ldrb	r3, [r3, #1]
 800579a:	2b01      	cmp	r3, #1
 800579c:	d116      	bne.n	80057cc <HAL_PCD_EP_DB_Transmit+0x4e8>
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80057ac:	b29b      	uxth	r3, r3
 80057ae:	461a      	mov	r2, r3
 80057b0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80057b2:	4413      	add	r3, r2
 80057b4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	781b      	ldrb	r3, [r3, #0]
 80057ba:	00da      	lsls	r2, r3, #3
 80057bc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80057be:	4413      	add	r3, r2
 80057c0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80057c4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80057c6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80057c8:	2200      	movs	r2, #0
 80057ca:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	785b      	ldrb	r3, [r3, #1]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d12f      	bne.n	800583c <HAL_PCD_EP_DB_Transmit+0x558>
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80057ec:	b29b      	uxth	r3, r3
 80057ee:	461a      	mov	r2, r3
 80057f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80057f4:	4413      	add	r3, r2
 80057f6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	781b      	ldrb	r3, [r3, #0]
 80057fe:	00da      	lsls	r2, r3, #3
 8005800:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005804:	4413      	add	r3, r2
 8005806:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800580a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800580e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005812:	881b      	ldrh	r3, [r3, #0]
 8005814:	b29b      	uxth	r3, r3
 8005816:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800581a:	b29a      	uxth	r2, r3
 800581c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005820:	801a      	strh	r2, [r3, #0]
 8005822:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005826:	881b      	ldrh	r3, [r3, #0]
 8005828:	b29b      	uxth	r3, r3
 800582a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800582e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005832:	b29a      	uxth	r2, r3
 8005834:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005838:	801a      	strh	r2, [r3, #0]
 800583a:	e01c      	b.n	8005876 <HAL_PCD_EP_DB_Transmit+0x592>
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	785b      	ldrb	r3, [r3, #1]
 8005840:	2b01      	cmp	r3, #1
 8005842:	d118      	bne.n	8005876 <HAL_PCD_EP_DB_Transmit+0x592>
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800584c:	b29b      	uxth	r3, r3
 800584e:	461a      	mov	r2, r3
 8005850:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005854:	4413      	add	r3, r2
 8005856:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	781b      	ldrb	r3, [r3, #0]
 800585e:	00da      	lsls	r2, r3, #3
 8005860:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005864:	4413      	add	r3, r2
 8005866:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800586a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800586e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005872:	2200      	movs	r2, #0
 8005874:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	78db      	ldrb	r3, [r3, #3]
 800587a:	2b02      	cmp	r3, #2
 800587c:	d127      	bne.n	80058ce <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	461a      	mov	r2, r3
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	781b      	ldrb	r3, [r3, #0]
 8005888:	009b      	lsls	r3, r3, #2
 800588a:	4413      	add	r3, r2
 800588c:	881b      	ldrh	r3, [r3, #0]
 800588e:	b29b      	uxth	r3, r3
 8005890:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005894:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005898:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800589c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80058a0:	f083 0320 	eor.w	r3, r3, #32
 80058a4:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	461a      	mov	r2, r3
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	781b      	ldrb	r3, [r3, #0]
 80058b2:	009b      	lsls	r3, r3, #2
 80058b4:	441a      	add	r2, r3
 80058b6:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80058ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80058be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80058c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80058c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80058ca:	b29b      	uxth	r3, r3
 80058cc:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	781b      	ldrb	r3, [r3, #0]
 80058d2:	4619      	mov	r1, r3
 80058d4:	68f8      	ldr	r0, [r7, #12]
 80058d6:	f009 fcc6 	bl	800f266 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80058da:	88fb      	ldrh	r3, [r7, #6]
 80058dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d121      	bne.n	8005928 <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	461a      	mov	r2, r3
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	781b      	ldrb	r3, [r3, #0]
 80058ee:	009b      	lsls	r3, r3, #2
 80058f0:	4413      	add	r3, r2
 80058f2:	881b      	ldrh	r3, [r3, #0]
 80058f4:	b29b      	uxth	r3, r3
 80058f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80058fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058fe:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	461a      	mov	r2, r3
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	781b      	ldrb	r3, [r3, #0]
 800590c:	009b      	lsls	r3, r3, #2
 800590e:	441a      	add	r2, r3
 8005910:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8005914:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005918:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800591c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005920:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005924:	b29b      	uxth	r3, r3
 8005926:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8005928:	2300      	movs	r3, #0
 800592a:	e113      	b.n	8005b54 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800592c:	88fb      	ldrh	r3, [r7, #6]
 800592e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005932:	2b00      	cmp	r3, #0
 8005934:	d121      	bne.n	800597a <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	461a      	mov	r2, r3
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	781b      	ldrb	r3, [r3, #0]
 8005940:	009b      	lsls	r3, r3, #2
 8005942:	4413      	add	r3, r2
 8005944:	881b      	ldrh	r3, [r3, #0]
 8005946:	b29b      	uxth	r3, r3
 8005948:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800594c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005950:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	461a      	mov	r2, r3
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	781b      	ldrb	r3, [r3, #0]
 800595e:	009b      	lsls	r3, r3, #2
 8005960:	441a      	add	r2, r3
 8005962:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8005966:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800596a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800596e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005972:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005976:	b29b      	uxth	r3, r3
 8005978:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005980:	2b01      	cmp	r3, #1
 8005982:	f040 80be 	bne.w	8005b02 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	695a      	ldr	r2, [r3, #20]
 800598a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800598e:	441a      	add	r2, r3
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	69da      	ldr	r2, [r3, #28]
 8005998:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800599c:	441a      	add	r2, r3
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	6a1a      	ldr	r2, [r3, #32]
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	691b      	ldr	r3, [r3, #16]
 80059aa:	429a      	cmp	r2, r3
 80059ac:	d309      	bcc.n	80059c2 <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	691b      	ldr	r3, [r3, #16]
 80059b2:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	6a1a      	ldr	r2, [r3, #32]
 80059b8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80059ba:	1ad2      	subs	r2, r2, r3
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	621a      	str	r2, [r3, #32]
 80059c0:	e015      	b.n	80059ee <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	6a1b      	ldr	r3, [r3, #32]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d107      	bne.n	80059da <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 80059ca:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80059ce:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	2200      	movs	r2, #0
 80059d4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80059d8:	e009      	b.n	80059ee <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	6a1b      	ldr	r3, [r3, #32]
 80059de:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	2200      	movs	r2, #0
 80059e4:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	2200      	movs	r2, #0
 80059ea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	785b      	ldrb	r3, [r3, #1]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d15f      	bne.n	8005abc <HAL_PCD_EP_DB_Transmit+0x7d8>
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a0a:	b29b      	uxth	r3, r3
 8005a0c:	461a      	mov	r2, r3
 8005a0e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005a10:	4413      	add	r3, r2
 8005a12:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	781b      	ldrb	r3, [r3, #0]
 8005a18:	00da      	lsls	r2, r3, #3
 8005a1a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005a1c:	4413      	add	r3, r2
 8005a1e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005a22:	667b      	str	r3, [r7, #100]	@ 0x64
 8005a24:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005a26:	881b      	ldrh	r3, [r3, #0]
 8005a28:	b29b      	uxth	r3, r3
 8005a2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a2e:	b29a      	uxth	r2, r3
 8005a30:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005a32:	801a      	strh	r2, [r3, #0]
 8005a34:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d10a      	bne.n	8005a50 <HAL_PCD_EP_DB_Transmit+0x76c>
 8005a3a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005a3c:	881b      	ldrh	r3, [r3, #0]
 8005a3e:	b29b      	uxth	r3, r3
 8005a40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a48:	b29a      	uxth	r2, r3
 8005a4a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005a4c:	801a      	strh	r2, [r3, #0]
 8005a4e:	e04e      	b.n	8005aee <HAL_PCD_EP_DB_Transmit+0x80a>
 8005a50:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005a52:	2b3e      	cmp	r3, #62	@ 0x3e
 8005a54:	d816      	bhi.n	8005a84 <HAL_PCD_EP_DB_Transmit+0x7a0>
 8005a56:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005a58:	085b      	lsrs	r3, r3, #1
 8005a5a:	663b      	str	r3, [r7, #96]	@ 0x60
 8005a5c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005a5e:	f003 0301 	and.w	r3, r3, #1
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d002      	beq.n	8005a6c <HAL_PCD_EP_DB_Transmit+0x788>
 8005a66:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005a68:	3301      	adds	r3, #1
 8005a6a:	663b      	str	r3, [r7, #96]	@ 0x60
 8005a6c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005a6e:	881b      	ldrh	r3, [r3, #0]
 8005a70:	b29a      	uxth	r2, r3
 8005a72:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005a74:	b29b      	uxth	r3, r3
 8005a76:	029b      	lsls	r3, r3, #10
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	b29a      	uxth	r2, r3
 8005a7e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005a80:	801a      	strh	r2, [r3, #0]
 8005a82:	e034      	b.n	8005aee <HAL_PCD_EP_DB_Transmit+0x80a>
 8005a84:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005a86:	095b      	lsrs	r3, r3, #5
 8005a88:	663b      	str	r3, [r7, #96]	@ 0x60
 8005a8a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005a8c:	f003 031f 	and.w	r3, r3, #31
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d102      	bne.n	8005a9a <HAL_PCD_EP_DB_Transmit+0x7b6>
 8005a94:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005a96:	3b01      	subs	r3, #1
 8005a98:	663b      	str	r3, [r7, #96]	@ 0x60
 8005a9a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005a9c:	881b      	ldrh	r3, [r3, #0]
 8005a9e:	b29a      	uxth	r2, r3
 8005aa0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005aa2:	b29b      	uxth	r3, r3
 8005aa4:	029b      	lsls	r3, r3, #10
 8005aa6:	b29b      	uxth	r3, r3
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	b29b      	uxth	r3, r3
 8005aac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ab0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ab4:	b29a      	uxth	r2, r3
 8005ab6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005ab8:	801a      	strh	r2, [r3, #0]
 8005aba:	e018      	b.n	8005aee <HAL_PCD_EP_DB_Transmit+0x80a>
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	785b      	ldrb	r3, [r3, #1]
 8005ac0:	2b01      	cmp	r3, #1
 8005ac2:	d114      	bne.n	8005aee <HAL_PCD_EP_DB_Transmit+0x80a>
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005acc:	b29b      	uxth	r3, r3
 8005ace:	461a      	mov	r2, r3
 8005ad0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005ad2:	4413      	add	r3, r2
 8005ad4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	781b      	ldrb	r3, [r3, #0]
 8005ada:	00da      	lsls	r2, r3, #3
 8005adc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005ade:	4413      	add	r3, r2
 8005ae0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005ae4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005ae6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005ae8:	b29a      	uxth	r2, r3
 8005aea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005aec:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	6818      	ldr	r0, [r3, #0]
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	6959      	ldr	r1, [r3, #20]
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	895a      	ldrh	r2, [r3, #10]
 8005afa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005afc:	b29b      	uxth	r3, r3
 8005afe:	f003 ffbc 	bl	8009a7a <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	461a      	mov	r2, r3
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	781b      	ldrb	r3, [r3, #0]
 8005b0c:	009b      	lsls	r3, r3, #2
 8005b0e:	4413      	add	r3, r2
 8005b10:	881b      	ldrh	r3, [r3, #0]
 8005b12:	b29b      	uxth	r3, r3
 8005b14:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b18:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b1c:	82fb      	strh	r3, [r7, #22]
 8005b1e:	8afb      	ldrh	r3, [r7, #22]
 8005b20:	f083 0310 	eor.w	r3, r3, #16
 8005b24:	82fb      	strh	r3, [r7, #22]
 8005b26:	8afb      	ldrh	r3, [r7, #22]
 8005b28:	f083 0320 	eor.w	r3, r3, #32
 8005b2c:	82fb      	strh	r3, [r7, #22]
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	461a      	mov	r2, r3
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	781b      	ldrb	r3, [r3, #0]
 8005b38:	009b      	lsls	r3, r3, #2
 8005b3a:	441a      	add	r2, r3
 8005b3c:	8afb      	ldrh	r3, [r7, #22]
 8005b3e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b42:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b4e:	b29b      	uxth	r3, r3
 8005b50:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8005b52:	2300      	movs	r3, #0
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	3798      	adds	r7, #152	@ 0x98
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd80      	pop	{r7, pc}

08005b5c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b087      	sub	sp, #28
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	60f8      	str	r0, [r7, #12]
 8005b64:	607b      	str	r3, [r7, #4]
 8005b66:	460b      	mov	r3, r1
 8005b68:	817b      	strh	r3, [r7, #10]
 8005b6a:	4613      	mov	r3, r2
 8005b6c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005b6e:	897b      	ldrh	r3, [r7, #10]
 8005b70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b74:	b29b      	uxth	r3, r3
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d00b      	beq.n	8005b92 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005b7a:	897b      	ldrh	r3, [r7, #10]
 8005b7c:	f003 0207 	and.w	r2, r3, #7
 8005b80:	4613      	mov	r3, r2
 8005b82:	009b      	lsls	r3, r3, #2
 8005b84:	4413      	add	r3, r2
 8005b86:	00db      	lsls	r3, r3, #3
 8005b88:	3310      	adds	r3, #16
 8005b8a:	68fa      	ldr	r2, [r7, #12]
 8005b8c:	4413      	add	r3, r2
 8005b8e:	617b      	str	r3, [r7, #20]
 8005b90:	e009      	b.n	8005ba6 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005b92:	897a      	ldrh	r2, [r7, #10]
 8005b94:	4613      	mov	r3, r2
 8005b96:	009b      	lsls	r3, r3, #2
 8005b98:	4413      	add	r3, r2
 8005b9a:	00db      	lsls	r3, r3, #3
 8005b9c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005ba0:	68fa      	ldr	r2, [r7, #12]
 8005ba2:	4413      	add	r3, r2
 8005ba4:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005ba6:	893b      	ldrh	r3, [r7, #8]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d107      	bne.n	8005bbc <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	b29a      	uxth	r2, r3
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	80da      	strh	r2, [r3, #6]
 8005bba:	e00b      	b.n	8005bd4 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	b29a      	uxth	r2, r3
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	0c1b      	lsrs	r3, r3, #16
 8005bce:	b29a      	uxth	r2, r3
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005bd4:	2300      	movs	r3, #0
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	371c      	adds	r7, #28
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be0:	4770      	bx	lr

08005be2 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005be2:	b480      	push	{r7}
 8005be4:	b085      	sub	sp, #20
 8005be6:	af00      	add	r7, sp, #0
 8005be8:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8005c06:	b29b      	uxth	r3, r3
 8005c08:	f043 0301 	orr.w	r3, r3, #1
 8005c0c:	b29a      	uxth	r2, r3
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8005c1a:	b29b      	uxth	r3, r3
 8005c1c:	f043 0302 	orr.w	r3, r3, #2
 8005c20:	b29a      	uxth	r2, r3
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8005c28:	2300      	movs	r3, #0
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3714      	adds	r7, #20
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c34:	4770      	bx	lr
	...

08005c38 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b085      	sub	sp, #20
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d141      	bne.n	8005cca <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005c46:	4b4b      	ldr	r3, [pc, #300]	@ (8005d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005c4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c52:	d131      	bne.n	8005cb8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005c54:	4b47      	ldr	r3, [pc, #284]	@ (8005d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c5a:	4a46      	ldr	r2, [pc, #280]	@ (8005d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c5c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005c60:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005c64:	4b43      	ldr	r3, [pc, #268]	@ (8005d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005c6c:	4a41      	ldr	r2, [pc, #260]	@ (8005d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c6e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005c72:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005c74:	4b40      	ldr	r3, [pc, #256]	@ (8005d78 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	2232      	movs	r2, #50	@ 0x32
 8005c7a:	fb02 f303 	mul.w	r3, r2, r3
 8005c7e:	4a3f      	ldr	r2, [pc, #252]	@ (8005d7c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005c80:	fba2 2303 	umull	r2, r3, r2, r3
 8005c84:	0c9b      	lsrs	r3, r3, #18
 8005c86:	3301      	adds	r3, #1
 8005c88:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005c8a:	e002      	b.n	8005c92 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	3b01      	subs	r3, #1
 8005c90:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005c92:	4b38      	ldr	r3, [pc, #224]	@ (8005d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c94:	695b      	ldr	r3, [r3, #20]
 8005c96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c9e:	d102      	bne.n	8005ca6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d1f2      	bne.n	8005c8c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005ca6:	4b33      	ldr	r3, [pc, #204]	@ (8005d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ca8:	695b      	ldr	r3, [r3, #20]
 8005caa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005cae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005cb2:	d158      	bne.n	8005d66 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005cb4:	2303      	movs	r3, #3
 8005cb6:	e057      	b.n	8005d68 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005cb8:	4b2e      	ldr	r3, [pc, #184]	@ (8005d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005cbe:	4a2d      	ldr	r2, [pc, #180]	@ (8005d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cc0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005cc4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005cc8:	e04d      	b.n	8005d66 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005cd0:	d141      	bne.n	8005d56 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005cd2:	4b28      	ldr	r3, [pc, #160]	@ (8005d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005cda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005cde:	d131      	bne.n	8005d44 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005ce0:	4b24      	ldr	r3, [pc, #144]	@ (8005d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ce2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ce6:	4a23      	ldr	r2, [pc, #140]	@ (8005d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ce8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005cec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005cf0:	4b20      	ldr	r3, [pc, #128]	@ (8005d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005cf8:	4a1e      	ldr	r2, [pc, #120]	@ (8005d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cfa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005cfe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005d00:	4b1d      	ldr	r3, [pc, #116]	@ (8005d78 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	2232      	movs	r2, #50	@ 0x32
 8005d06:	fb02 f303 	mul.w	r3, r2, r3
 8005d0a:	4a1c      	ldr	r2, [pc, #112]	@ (8005d7c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8005d10:	0c9b      	lsrs	r3, r3, #18
 8005d12:	3301      	adds	r3, #1
 8005d14:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005d16:	e002      	b.n	8005d1e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	3b01      	subs	r3, #1
 8005d1c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005d1e:	4b15      	ldr	r3, [pc, #84]	@ (8005d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d20:	695b      	ldr	r3, [r3, #20]
 8005d22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d2a:	d102      	bne.n	8005d32 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d1f2      	bne.n	8005d18 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005d32:	4b10      	ldr	r3, [pc, #64]	@ (8005d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d34:	695b      	ldr	r3, [r3, #20]
 8005d36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d3e:	d112      	bne.n	8005d66 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005d40:	2303      	movs	r3, #3
 8005d42:	e011      	b.n	8005d68 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005d44:	4b0b      	ldr	r3, [pc, #44]	@ (8005d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d4a:	4a0a      	ldr	r2, [pc, #40]	@ (8005d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d50:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005d54:	e007      	b.n	8005d66 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005d56:	4b07      	ldr	r3, [pc, #28]	@ (8005d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005d5e:	4a05      	ldr	r2, [pc, #20]	@ (8005d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d60:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005d64:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005d66:	2300      	movs	r3, #0
}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	3714      	adds	r7, #20
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr
 8005d74:	40007000 	.word	0x40007000
 8005d78:	20000020 	.word	0x20000020
 8005d7c:	431bde83 	.word	0x431bde83

08005d80 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005d80:	b480      	push	{r7}
 8005d82:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005d84:	4b05      	ldr	r3, [pc, #20]	@ (8005d9c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005d86:	689b      	ldr	r3, [r3, #8]
 8005d88:	4a04      	ldr	r2, [pc, #16]	@ (8005d9c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005d8a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005d8e:	6093      	str	r3, [r2, #8]
}
 8005d90:	bf00      	nop
 8005d92:	46bd      	mov	sp, r7
 8005d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d98:	4770      	bx	lr
 8005d9a:	bf00      	nop
 8005d9c:	40007000 	.word	0x40007000

08005da0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b088      	sub	sp, #32
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d101      	bne.n	8005db2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005dae:	2301      	movs	r3, #1
 8005db0:	e2fe      	b.n	80063b0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f003 0301 	and.w	r3, r3, #1
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d075      	beq.n	8005eaa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005dbe:	4b97      	ldr	r3, [pc, #604]	@ (800601c <HAL_RCC_OscConfig+0x27c>)
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	f003 030c 	and.w	r3, r3, #12
 8005dc6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005dc8:	4b94      	ldr	r3, [pc, #592]	@ (800601c <HAL_RCC_OscConfig+0x27c>)
 8005dca:	68db      	ldr	r3, [r3, #12]
 8005dcc:	f003 0303 	and.w	r3, r3, #3
 8005dd0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005dd2:	69bb      	ldr	r3, [r7, #24]
 8005dd4:	2b0c      	cmp	r3, #12
 8005dd6:	d102      	bne.n	8005dde <HAL_RCC_OscConfig+0x3e>
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	2b03      	cmp	r3, #3
 8005ddc:	d002      	beq.n	8005de4 <HAL_RCC_OscConfig+0x44>
 8005dde:	69bb      	ldr	r3, [r7, #24]
 8005de0:	2b08      	cmp	r3, #8
 8005de2:	d10b      	bne.n	8005dfc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005de4:	4b8d      	ldr	r3, [pc, #564]	@ (800601c <HAL_RCC_OscConfig+0x27c>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d05b      	beq.n	8005ea8 <HAL_RCC_OscConfig+0x108>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d157      	bne.n	8005ea8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	e2d9      	b.n	80063b0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e04:	d106      	bne.n	8005e14 <HAL_RCC_OscConfig+0x74>
 8005e06:	4b85      	ldr	r3, [pc, #532]	@ (800601c <HAL_RCC_OscConfig+0x27c>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a84      	ldr	r2, [pc, #528]	@ (800601c <HAL_RCC_OscConfig+0x27c>)
 8005e0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e10:	6013      	str	r3, [r2, #0]
 8005e12:	e01d      	b.n	8005e50 <HAL_RCC_OscConfig+0xb0>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005e1c:	d10c      	bne.n	8005e38 <HAL_RCC_OscConfig+0x98>
 8005e1e:	4b7f      	ldr	r3, [pc, #508]	@ (800601c <HAL_RCC_OscConfig+0x27c>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a7e      	ldr	r2, [pc, #504]	@ (800601c <HAL_RCC_OscConfig+0x27c>)
 8005e24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005e28:	6013      	str	r3, [r2, #0]
 8005e2a:	4b7c      	ldr	r3, [pc, #496]	@ (800601c <HAL_RCC_OscConfig+0x27c>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a7b      	ldr	r2, [pc, #492]	@ (800601c <HAL_RCC_OscConfig+0x27c>)
 8005e30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e34:	6013      	str	r3, [r2, #0]
 8005e36:	e00b      	b.n	8005e50 <HAL_RCC_OscConfig+0xb0>
 8005e38:	4b78      	ldr	r3, [pc, #480]	@ (800601c <HAL_RCC_OscConfig+0x27c>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a77      	ldr	r2, [pc, #476]	@ (800601c <HAL_RCC_OscConfig+0x27c>)
 8005e3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e42:	6013      	str	r3, [r2, #0]
 8005e44:	4b75      	ldr	r3, [pc, #468]	@ (800601c <HAL_RCC_OscConfig+0x27c>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a74      	ldr	r2, [pc, #464]	@ (800601c <HAL_RCC_OscConfig+0x27c>)
 8005e4a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005e4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d013      	beq.n	8005e80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e58:	f7fd fc86 	bl	8003768 <HAL_GetTick>
 8005e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005e5e:	e008      	b.n	8005e72 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e60:	f7fd fc82 	bl	8003768 <HAL_GetTick>
 8005e64:	4602      	mov	r2, r0
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	1ad3      	subs	r3, r2, r3
 8005e6a:	2b64      	cmp	r3, #100	@ 0x64
 8005e6c:	d901      	bls.n	8005e72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005e6e:	2303      	movs	r3, #3
 8005e70:	e29e      	b.n	80063b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005e72:	4b6a      	ldr	r3, [pc, #424]	@ (800601c <HAL_RCC_OscConfig+0x27c>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d0f0      	beq.n	8005e60 <HAL_RCC_OscConfig+0xc0>
 8005e7e:	e014      	b.n	8005eaa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e80:	f7fd fc72 	bl	8003768 <HAL_GetTick>
 8005e84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005e86:	e008      	b.n	8005e9a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e88:	f7fd fc6e 	bl	8003768 <HAL_GetTick>
 8005e8c:	4602      	mov	r2, r0
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	1ad3      	subs	r3, r2, r3
 8005e92:	2b64      	cmp	r3, #100	@ 0x64
 8005e94:	d901      	bls.n	8005e9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005e96:	2303      	movs	r3, #3
 8005e98:	e28a      	b.n	80063b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005e9a:	4b60      	ldr	r3, [pc, #384]	@ (800601c <HAL_RCC_OscConfig+0x27c>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d1f0      	bne.n	8005e88 <HAL_RCC_OscConfig+0xe8>
 8005ea6:	e000      	b.n	8005eaa <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ea8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f003 0302 	and.w	r3, r3, #2
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d075      	beq.n	8005fa2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005eb6:	4b59      	ldr	r3, [pc, #356]	@ (800601c <HAL_RCC_OscConfig+0x27c>)
 8005eb8:	689b      	ldr	r3, [r3, #8]
 8005eba:	f003 030c 	and.w	r3, r3, #12
 8005ebe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005ec0:	4b56      	ldr	r3, [pc, #344]	@ (800601c <HAL_RCC_OscConfig+0x27c>)
 8005ec2:	68db      	ldr	r3, [r3, #12]
 8005ec4:	f003 0303 	and.w	r3, r3, #3
 8005ec8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005eca:	69bb      	ldr	r3, [r7, #24]
 8005ecc:	2b0c      	cmp	r3, #12
 8005ece:	d102      	bne.n	8005ed6 <HAL_RCC_OscConfig+0x136>
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	2b02      	cmp	r3, #2
 8005ed4:	d002      	beq.n	8005edc <HAL_RCC_OscConfig+0x13c>
 8005ed6:	69bb      	ldr	r3, [r7, #24]
 8005ed8:	2b04      	cmp	r3, #4
 8005eda:	d11f      	bne.n	8005f1c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005edc:	4b4f      	ldr	r3, [pc, #316]	@ (800601c <HAL_RCC_OscConfig+0x27c>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d005      	beq.n	8005ef4 <HAL_RCC_OscConfig+0x154>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	68db      	ldr	r3, [r3, #12]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d101      	bne.n	8005ef4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	e25d      	b.n	80063b0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ef4:	4b49      	ldr	r3, [pc, #292]	@ (800601c <HAL_RCC_OscConfig+0x27c>)
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	691b      	ldr	r3, [r3, #16]
 8005f00:	061b      	lsls	r3, r3, #24
 8005f02:	4946      	ldr	r1, [pc, #280]	@ (800601c <HAL_RCC_OscConfig+0x27c>)
 8005f04:	4313      	orrs	r3, r2
 8005f06:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005f08:	4b45      	ldr	r3, [pc, #276]	@ (8006020 <HAL_RCC_OscConfig+0x280>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	f7fd f991 	bl	8003234 <HAL_InitTick>
 8005f12:	4603      	mov	r3, r0
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d043      	beq.n	8005fa0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005f18:	2301      	movs	r3, #1
 8005f1a:	e249      	b.n	80063b0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	68db      	ldr	r3, [r3, #12]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d023      	beq.n	8005f6c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f24:	4b3d      	ldr	r3, [pc, #244]	@ (800601c <HAL_RCC_OscConfig+0x27c>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a3c      	ldr	r2, [pc, #240]	@ (800601c <HAL_RCC_OscConfig+0x27c>)
 8005f2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f30:	f7fd fc1a 	bl	8003768 <HAL_GetTick>
 8005f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005f36:	e008      	b.n	8005f4a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f38:	f7fd fc16 	bl	8003768 <HAL_GetTick>
 8005f3c:	4602      	mov	r2, r0
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	1ad3      	subs	r3, r2, r3
 8005f42:	2b02      	cmp	r3, #2
 8005f44:	d901      	bls.n	8005f4a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005f46:	2303      	movs	r3, #3
 8005f48:	e232      	b.n	80063b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005f4a:	4b34      	ldr	r3, [pc, #208]	@ (800601c <HAL_RCC_OscConfig+0x27c>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d0f0      	beq.n	8005f38 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f56:	4b31      	ldr	r3, [pc, #196]	@ (800601c <HAL_RCC_OscConfig+0x27c>)
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	691b      	ldr	r3, [r3, #16]
 8005f62:	061b      	lsls	r3, r3, #24
 8005f64:	492d      	ldr	r1, [pc, #180]	@ (800601c <HAL_RCC_OscConfig+0x27c>)
 8005f66:	4313      	orrs	r3, r2
 8005f68:	604b      	str	r3, [r1, #4]
 8005f6a:	e01a      	b.n	8005fa2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f6c:	4b2b      	ldr	r3, [pc, #172]	@ (800601c <HAL_RCC_OscConfig+0x27c>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a2a      	ldr	r2, [pc, #168]	@ (800601c <HAL_RCC_OscConfig+0x27c>)
 8005f72:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005f76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f78:	f7fd fbf6 	bl	8003768 <HAL_GetTick>
 8005f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005f7e:	e008      	b.n	8005f92 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f80:	f7fd fbf2 	bl	8003768 <HAL_GetTick>
 8005f84:	4602      	mov	r2, r0
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	1ad3      	subs	r3, r2, r3
 8005f8a:	2b02      	cmp	r3, #2
 8005f8c:	d901      	bls.n	8005f92 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005f8e:	2303      	movs	r3, #3
 8005f90:	e20e      	b.n	80063b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005f92:	4b22      	ldr	r3, [pc, #136]	@ (800601c <HAL_RCC_OscConfig+0x27c>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d1f0      	bne.n	8005f80 <HAL_RCC_OscConfig+0x1e0>
 8005f9e:	e000      	b.n	8005fa2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005fa0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f003 0308 	and.w	r3, r3, #8
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d041      	beq.n	8006032 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	695b      	ldr	r3, [r3, #20]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d01c      	beq.n	8005ff0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005fb6:	4b19      	ldr	r3, [pc, #100]	@ (800601c <HAL_RCC_OscConfig+0x27c>)
 8005fb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005fbc:	4a17      	ldr	r2, [pc, #92]	@ (800601c <HAL_RCC_OscConfig+0x27c>)
 8005fbe:	f043 0301 	orr.w	r3, r3, #1
 8005fc2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fc6:	f7fd fbcf 	bl	8003768 <HAL_GetTick>
 8005fca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005fcc:	e008      	b.n	8005fe0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005fce:	f7fd fbcb 	bl	8003768 <HAL_GetTick>
 8005fd2:	4602      	mov	r2, r0
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	1ad3      	subs	r3, r2, r3
 8005fd8:	2b02      	cmp	r3, #2
 8005fda:	d901      	bls.n	8005fe0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005fdc:	2303      	movs	r3, #3
 8005fde:	e1e7      	b.n	80063b0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005fe0:	4b0e      	ldr	r3, [pc, #56]	@ (800601c <HAL_RCC_OscConfig+0x27c>)
 8005fe2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005fe6:	f003 0302 	and.w	r3, r3, #2
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d0ef      	beq.n	8005fce <HAL_RCC_OscConfig+0x22e>
 8005fee:	e020      	b.n	8006032 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ff0:	4b0a      	ldr	r3, [pc, #40]	@ (800601c <HAL_RCC_OscConfig+0x27c>)
 8005ff2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005ff6:	4a09      	ldr	r2, [pc, #36]	@ (800601c <HAL_RCC_OscConfig+0x27c>)
 8005ff8:	f023 0301 	bic.w	r3, r3, #1
 8005ffc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006000:	f7fd fbb2 	bl	8003768 <HAL_GetTick>
 8006004:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006006:	e00d      	b.n	8006024 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006008:	f7fd fbae 	bl	8003768 <HAL_GetTick>
 800600c:	4602      	mov	r2, r0
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	1ad3      	subs	r3, r2, r3
 8006012:	2b02      	cmp	r3, #2
 8006014:	d906      	bls.n	8006024 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006016:	2303      	movs	r3, #3
 8006018:	e1ca      	b.n	80063b0 <HAL_RCC_OscConfig+0x610>
 800601a:	bf00      	nop
 800601c:	40021000 	.word	0x40021000
 8006020:	20000024 	.word	0x20000024
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006024:	4b8c      	ldr	r3, [pc, #560]	@ (8006258 <HAL_RCC_OscConfig+0x4b8>)
 8006026:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800602a:	f003 0302 	and.w	r3, r3, #2
 800602e:	2b00      	cmp	r3, #0
 8006030:	d1ea      	bne.n	8006008 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f003 0304 	and.w	r3, r3, #4
 800603a:	2b00      	cmp	r3, #0
 800603c:	f000 80a6 	beq.w	800618c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006040:	2300      	movs	r3, #0
 8006042:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006044:	4b84      	ldr	r3, [pc, #528]	@ (8006258 <HAL_RCC_OscConfig+0x4b8>)
 8006046:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006048:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800604c:	2b00      	cmp	r3, #0
 800604e:	d101      	bne.n	8006054 <HAL_RCC_OscConfig+0x2b4>
 8006050:	2301      	movs	r3, #1
 8006052:	e000      	b.n	8006056 <HAL_RCC_OscConfig+0x2b6>
 8006054:	2300      	movs	r3, #0
 8006056:	2b00      	cmp	r3, #0
 8006058:	d00d      	beq.n	8006076 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800605a:	4b7f      	ldr	r3, [pc, #508]	@ (8006258 <HAL_RCC_OscConfig+0x4b8>)
 800605c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800605e:	4a7e      	ldr	r2, [pc, #504]	@ (8006258 <HAL_RCC_OscConfig+0x4b8>)
 8006060:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006064:	6593      	str	r3, [r2, #88]	@ 0x58
 8006066:	4b7c      	ldr	r3, [pc, #496]	@ (8006258 <HAL_RCC_OscConfig+0x4b8>)
 8006068:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800606a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800606e:	60fb      	str	r3, [r7, #12]
 8006070:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006072:	2301      	movs	r3, #1
 8006074:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006076:	4b79      	ldr	r3, [pc, #484]	@ (800625c <HAL_RCC_OscConfig+0x4bc>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800607e:	2b00      	cmp	r3, #0
 8006080:	d118      	bne.n	80060b4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006082:	4b76      	ldr	r3, [pc, #472]	@ (800625c <HAL_RCC_OscConfig+0x4bc>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a75      	ldr	r2, [pc, #468]	@ (800625c <HAL_RCC_OscConfig+0x4bc>)
 8006088:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800608c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800608e:	f7fd fb6b 	bl	8003768 <HAL_GetTick>
 8006092:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006094:	e008      	b.n	80060a8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006096:	f7fd fb67 	bl	8003768 <HAL_GetTick>
 800609a:	4602      	mov	r2, r0
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	1ad3      	subs	r3, r2, r3
 80060a0:	2b02      	cmp	r3, #2
 80060a2:	d901      	bls.n	80060a8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80060a4:	2303      	movs	r3, #3
 80060a6:	e183      	b.n	80063b0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80060a8:	4b6c      	ldr	r3, [pc, #432]	@ (800625c <HAL_RCC_OscConfig+0x4bc>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d0f0      	beq.n	8006096 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	689b      	ldr	r3, [r3, #8]
 80060b8:	2b01      	cmp	r3, #1
 80060ba:	d108      	bne.n	80060ce <HAL_RCC_OscConfig+0x32e>
 80060bc:	4b66      	ldr	r3, [pc, #408]	@ (8006258 <HAL_RCC_OscConfig+0x4b8>)
 80060be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060c2:	4a65      	ldr	r2, [pc, #404]	@ (8006258 <HAL_RCC_OscConfig+0x4b8>)
 80060c4:	f043 0301 	orr.w	r3, r3, #1
 80060c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80060cc:	e024      	b.n	8006118 <HAL_RCC_OscConfig+0x378>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	689b      	ldr	r3, [r3, #8]
 80060d2:	2b05      	cmp	r3, #5
 80060d4:	d110      	bne.n	80060f8 <HAL_RCC_OscConfig+0x358>
 80060d6:	4b60      	ldr	r3, [pc, #384]	@ (8006258 <HAL_RCC_OscConfig+0x4b8>)
 80060d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060dc:	4a5e      	ldr	r2, [pc, #376]	@ (8006258 <HAL_RCC_OscConfig+0x4b8>)
 80060de:	f043 0304 	orr.w	r3, r3, #4
 80060e2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80060e6:	4b5c      	ldr	r3, [pc, #368]	@ (8006258 <HAL_RCC_OscConfig+0x4b8>)
 80060e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060ec:	4a5a      	ldr	r2, [pc, #360]	@ (8006258 <HAL_RCC_OscConfig+0x4b8>)
 80060ee:	f043 0301 	orr.w	r3, r3, #1
 80060f2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80060f6:	e00f      	b.n	8006118 <HAL_RCC_OscConfig+0x378>
 80060f8:	4b57      	ldr	r3, [pc, #348]	@ (8006258 <HAL_RCC_OscConfig+0x4b8>)
 80060fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060fe:	4a56      	ldr	r2, [pc, #344]	@ (8006258 <HAL_RCC_OscConfig+0x4b8>)
 8006100:	f023 0301 	bic.w	r3, r3, #1
 8006104:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006108:	4b53      	ldr	r3, [pc, #332]	@ (8006258 <HAL_RCC_OscConfig+0x4b8>)
 800610a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800610e:	4a52      	ldr	r2, [pc, #328]	@ (8006258 <HAL_RCC_OscConfig+0x4b8>)
 8006110:	f023 0304 	bic.w	r3, r3, #4
 8006114:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	689b      	ldr	r3, [r3, #8]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d016      	beq.n	800614e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006120:	f7fd fb22 	bl	8003768 <HAL_GetTick>
 8006124:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006126:	e00a      	b.n	800613e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006128:	f7fd fb1e 	bl	8003768 <HAL_GetTick>
 800612c:	4602      	mov	r2, r0
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	1ad3      	subs	r3, r2, r3
 8006132:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006136:	4293      	cmp	r3, r2
 8006138:	d901      	bls.n	800613e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800613a:	2303      	movs	r3, #3
 800613c:	e138      	b.n	80063b0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800613e:	4b46      	ldr	r3, [pc, #280]	@ (8006258 <HAL_RCC_OscConfig+0x4b8>)
 8006140:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006144:	f003 0302 	and.w	r3, r3, #2
 8006148:	2b00      	cmp	r3, #0
 800614a:	d0ed      	beq.n	8006128 <HAL_RCC_OscConfig+0x388>
 800614c:	e015      	b.n	800617a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800614e:	f7fd fb0b 	bl	8003768 <HAL_GetTick>
 8006152:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006154:	e00a      	b.n	800616c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006156:	f7fd fb07 	bl	8003768 <HAL_GetTick>
 800615a:	4602      	mov	r2, r0
 800615c:	693b      	ldr	r3, [r7, #16]
 800615e:	1ad3      	subs	r3, r2, r3
 8006160:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006164:	4293      	cmp	r3, r2
 8006166:	d901      	bls.n	800616c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006168:	2303      	movs	r3, #3
 800616a:	e121      	b.n	80063b0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800616c:	4b3a      	ldr	r3, [pc, #232]	@ (8006258 <HAL_RCC_OscConfig+0x4b8>)
 800616e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006172:	f003 0302 	and.w	r3, r3, #2
 8006176:	2b00      	cmp	r3, #0
 8006178:	d1ed      	bne.n	8006156 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800617a:	7ffb      	ldrb	r3, [r7, #31]
 800617c:	2b01      	cmp	r3, #1
 800617e:	d105      	bne.n	800618c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006180:	4b35      	ldr	r3, [pc, #212]	@ (8006258 <HAL_RCC_OscConfig+0x4b8>)
 8006182:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006184:	4a34      	ldr	r2, [pc, #208]	@ (8006258 <HAL_RCC_OscConfig+0x4b8>)
 8006186:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800618a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f003 0320 	and.w	r3, r3, #32
 8006194:	2b00      	cmp	r3, #0
 8006196:	d03c      	beq.n	8006212 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	699b      	ldr	r3, [r3, #24]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d01c      	beq.n	80061da <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80061a0:	4b2d      	ldr	r3, [pc, #180]	@ (8006258 <HAL_RCC_OscConfig+0x4b8>)
 80061a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80061a6:	4a2c      	ldr	r2, [pc, #176]	@ (8006258 <HAL_RCC_OscConfig+0x4b8>)
 80061a8:	f043 0301 	orr.w	r3, r3, #1
 80061ac:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061b0:	f7fd fada 	bl	8003768 <HAL_GetTick>
 80061b4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80061b6:	e008      	b.n	80061ca <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80061b8:	f7fd fad6 	bl	8003768 <HAL_GetTick>
 80061bc:	4602      	mov	r2, r0
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	1ad3      	subs	r3, r2, r3
 80061c2:	2b02      	cmp	r3, #2
 80061c4:	d901      	bls.n	80061ca <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80061c6:	2303      	movs	r3, #3
 80061c8:	e0f2      	b.n	80063b0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80061ca:	4b23      	ldr	r3, [pc, #140]	@ (8006258 <HAL_RCC_OscConfig+0x4b8>)
 80061cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80061d0:	f003 0302 	and.w	r3, r3, #2
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d0ef      	beq.n	80061b8 <HAL_RCC_OscConfig+0x418>
 80061d8:	e01b      	b.n	8006212 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80061da:	4b1f      	ldr	r3, [pc, #124]	@ (8006258 <HAL_RCC_OscConfig+0x4b8>)
 80061dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80061e0:	4a1d      	ldr	r2, [pc, #116]	@ (8006258 <HAL_RCC_OscConfig+0x4b8>)
 80061e2:	f023 0301 	bic.w	r3, r3, #1
 80061e6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061ea:	f7fd fabd 	bl	8003768 <HAL_GetTick>
 80061ee:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80061f0:	e008      	b.n	8006204 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80061f2:	f7fd fab9 	bl	8003768 <HAL_GetTick>
 80061f6:	4602      	mov	r2, r0
 80061f8:	693b      	ldr	r3, [r7, #16]
 80061fa:	1ad3      	subs	r3, r2, r3
 80061fc:	2b02      	cmp	r3, #2
 80061fe:	d901      	bls.n	8006204 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006200:	2303      	movs	r3, #3
 8006202:	e0d5      	b.n	80063b0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006204:	4b14      	ldr	r3, [pc, #80]	@ (8006258 <HAL_RCC_OscConfig+0x4b8>)
 8006206:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800620a:	f003 0302 	and.w	r3, r3, #2
 800620e:	2b00      	cmp	r3, #0
 8006210:	d1ef      	bne.n	80061f2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	69db      	ldr	r3, [r3, #28]
 8006216:	2b00      	cmp	r3, #0
 8006218:	f000 80c9 	beq.w	80063ae <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800621c:	4b0e      	ldr	r3, [pc, #56]	@ (8006258 <HAL_RCC_OscConfig+0x4b8>)
 800621e:	689b      	ldr	r3, [r3, #8]
 8006220:	f003 030c 	and.w	r3, r3, #12
 8006224:	2b0c      	cmp	r3, #12
 8006226:	f000 8083 	beq.w	8006330 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	69db      	ldr	r3, [r3, #28]
 800622e:	2b02      	cmp	r3, #2
 8006230:	d15e      	bne.n	80062f0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006232:	4b09      	ldr	r3, [pc, #36]	@ (8006258 <HAL_RCC_OscConfig+0x4b8>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a08      	ldr	r2, [pc, #32]	@ (8006258 <HAL_RCC_OscConfig+0x4b8>)
 8006238:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800623c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800623e:	f7fd fa93 	bl	8003768 <HAL_GetTick>
 8006242:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006244:	e00c      	b.n	8006260 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006246:	f7fd fa8f 	bl	8003768 <HAL_GetTick>
 800624a:	4602      	mov	r2, r0
 800624c:	693b      	ldr	r3, [r7, #16]
 800624e:	1ad3      	subs	r3, r2, r3
 8006250:	2b02      	cmp	r3, #2
 8006252:	d905      	bls.n	8006260 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006254:	2303      	movs	r3, #3
 8006256:	e0ab      	b.n	80063b0 <HAL_RCC_OscConfig+0x610>
 8006258:	40021000 	.word	0x40021000
 800625c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006260:	4b55      	ldr	r3, [pc, #340]	@ (80063b8 <HAL_RCC_OscConfig+0x618>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006268:	2b00      	cmp	r3, #0
 800626a:	d1ec      	bne.n	8006246 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800626c:	4b52      	ldr	r3, [pc, #328]	@ (80063b8 <HAL_RCC_OscConfig+0x618>)
 800626e:	68da      	ldr	r2, [r3, #12]
 8006270:	4b52      	ldr	r3, [pc, #328]	@ (80063bc <HAL_RCC_OscConfig+0x61c>)
 8006272:	4013      	ands	r3, r2
 8006274:	687a      	ldr	r2, [r7, #4]
 8006276:	6a11      	ldr	r1, [r2, #32]
 8006278:	687a      	ldr	r2, [r7, #4]
 800627a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800627c:	3a01      	subs	r2, #1
 800627e:	0112      	lsls	r2, r2, #4
 8006280:	4311      	orrs	r1, r2
 8006282:	687a      	ldr	r2, [r7, #4]
 8006284:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8006286:	0212      	lsls	r2, r2, #8
 8006288:	4311      	orrs	r1, r2
 800628a:	687a      	ldr	r2, [r7, #4]
 800628c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800628e:	0852      	lsrs	r2, r2, #1
 8006290:	3a01      	subs	r2, #1
 8006292:	0552      	lsls	r2, r2, #21
 8006294:	4311      	orrs	r1, r2
 8006296:	687a      	ldr	r2, [r7, #4]
 8006298:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800629a:	0852      	lsrs	r2, r2, #1
 800629c:	3a01      	subs	r2, #1
 800629e:	0652      	lsls	r2, r2, #25
 80062a0:	4311      	orrs	r1, r2
 80062a2:	687a      	ldr	r2, [r7, #4]
 80062a4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80062a6:	06d2      	lsls	r2, r2, #27
 80062a8:	430a      	orrs	r2, r1
 80062aa:	4943      	ldr	r1, [pc, #268]	@ (80063b8 <HAL_RCC_OscConfig+0x618>)
 80062ac:	4313      	orrs	r3, r2
 80062ae:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80062b0:	4b41      	ldr	r3, [pc, #260]	@ (80063b8 <HAL_RCC_OscConfig+0x618>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a40      	ldr	r2, [pc, #256]	@ (80063b8 <HAL_RCC_OscConfig+0x618>)
 80062b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80062ba:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80062bc:	4b3e      	ldr	r3, [pc, #248]	@ (80063b8 <HAL_RCC_OscConfig+0x618>)
 80062be:	68db      	ldr	r3, [r3, #12]
 80062c0:	4a3d      	ldr	r2, [pc, #244]	@ (80063b8 <HAL_RCC_OscConfig+0x618>)
 80062c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80062c6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062c8:	f7fd fa4e 	bl	8003768 <HAL_GetTick>
 80062cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80062ce:	e008      	b.n	80062e2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062d0:	f7fd fa4a 	bl	8003768 <HAL_GetTick>
 80062d4:	4602      	mov	r2, r0
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	1ad3      	subs	r3, r2, r3
 80062da:	2b02      	cmp	r3, #2
 80062dc:	d901      	bls.n	80062e2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80062de:	2303      	movs	r3, #3
 80062e0:	e066      	b.n	80063b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80062e2:	4b35      	ldr	r3, [pc, #212]	@ (80063b8 <HAL_RCC_OscConfig+0x618>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d0f0      	beq.n	80062d0 <HAL_RCC_OscConfig+0x530>
 80062ee:	e05e      	b.n	80063ae <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062f0:	4b31      	ldr	r3, [pc, #196]	@ (80063b8 <HAL_RCC_OscConfig+0x618>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a30      	ldr	r2, [pc, #192]	@ (80063b8 <HAL_RCC_OscConfig+0x618>)
 80062f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80062fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062fc:	f7fd fa34 	bl	8003768 <HAL_GetTick>
 8006300:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006302:	e008      	b.n	8006316 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006304:	f7fd fa30 	bl	8003768 <HAL_GetTick>
 8006308:	4602      	mov	r2, r0
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	1ad3      	subs	r3, r2, r3
 800630e:	2b02      	cmp	r3, #2
 8006310:	d901      	bls.n	8006316 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8006312:	2303      	movs	r3, #3
 8006314:	e04c      	b.n	80063b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006316:	4b28      	ldr	r3, [pc, #160]	@ (80063b8 <HAL_RCC_OscConfig+0x618>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800631e:	2b00      	cmp	r3, #0
 8006320:	d1f0      	bne.n	8006304 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006322:	4b25      	ldr	r3, [pc, #148]	@ (80063b8 <HAL_RCC_OscConfig+0x618>)
 8006324:	68da      	ldr	r2, [r3, #12]
 8006326:	4924      	ldr	r1, [pc, #144]	@ (80063b8 <HAL_RCC_OscConfig+0x618>)
 8006328:	4b25      	ldr	r3, [pc, #148]	@ (80063c0 <HAL_RCC_OscConfig+0x620>)
 800632a:	4013      	ands	r3, r2
 800632c:	60cb      	str	r3, [r1, #12]
 800632e:	e03e      	b.n	80063ae <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	69db      	ldr	r3, [r3, #28]
 8006334:	2b01      	cmp	r3, #1
 8006336:	d101      	bne.n	800633c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8006338:	2301      	movs	r3, #1
 800633a:	e039      	b.n	80063b0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800633c:	4b1e      	ldr	r3, [pc, #120]	@ (80063b8 <HAL_RCC_OscConfig+0x618>)
 800633e:	68db      	ldr	r3, [r3, #12]
 8006340:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	f003 0203 	and.w	r2, r3, #3
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6a1b      	ldr	r3, [r3, #32]
 800634c:	429a      	cmp	r2, r3
 800634e:	d12c      	bne.n	80063aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800635a:	3b01      	subs	r3, #1
 800635c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800635e:	429a      	cmp	r2, r3
 8006360:	d123      	bne.n	80063aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800636c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800636e:	429a      	cmp	r2, r3
 8006370:	d11b      	bne.n	80063aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800637c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800637e:	429a      	cmp	r2, r3
 8006380:	d113      	bne.n	80063aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800638c:	085b      	lsrs	r3, r3, #1
 800638e:	3b01      	subs	r3, #1
 8006390:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006392:	429a      	cmp	r2, r3
 8006394:	d109      	bne.n	80063aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063a0:	085b      	lsrs	r3, r3, #1
 80063a2:	3b01      	subs	r3, #1
 80063a4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80063a6:	429a      	cmp	r2, r3
 80063a8:	d001      	beq.n	80063ae <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80063aa:	2301      	movs	r3, #1
 80063ac:	e000      	b.n	80063b0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80063ae:	2300      	movs	r3, #0
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	3720      	adds	r7, #32
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}
 80063b8:	40021000 	.word	0x40021000
 80063bc:	019f800c 	.word	0x019f800c
 80063c0:	feeefffc 	.word	0xfeeefffc

080063c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b086      	sub	sp, #24
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
 80063cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80063ce:	2300      	movs	r3, #0
 80063d0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d101      	bne.n	80063dc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80063d8:	2301      	movs	r3, #1
 80063da:	e11e      	b.n	800661a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80063dc:	4b91      	ldr	r3, [pc, #580]	@ (8006624 <HAL_RCC_ClockConfig+0x260>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f003 030f 	and.w	r3, r3, #15
 80063e4:	683a      	ldr	r2, [r7, #0]
 80063e6:	429a      	cmp	r2, r3
 80063e8:	d910      	bls.n	800640c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063ea:	4b8e      	ldr	r3, [pc, #568]	@ (8006624 <HAL_RCC_ClockConfig+0x260>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f023 020f 	bic.w	r2, r3, #15
 80063f2:	498c      	ldr	r1, [pc, #560]	@ (8006624 <HAL_RCC_ClockConfig+0x260>)
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	4313      	orrs	r3, r2
 80063f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80063fa:	4b8a      	ldr	r3, [pc, #552]	@ (8006624 <HAL_RCC_ClockConfig+0x260>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f003 030f 	and.w	r3, r3, #15
 8006402:	683a      	ldr	r2, [r7, #0]
 8006404:	429a      	cmp	r2, r3
 8006406:	d001      	beq.n	800640c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006408:	2301      	movs	r3, #1
 800640a:	e106      	b.n	800661a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f003 0301 	and.w	r3, r3, #1
 8006414:	2b00      	cmp	r3, #0
 8006416:	d073      	beq.n	8006500 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	2b03      	cmp	r3, #3
 800641e:	d129      	bne.n	8006474 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006420:	4b81      	ldr	r3, [pc, #516]	@ (8006628 <HAL_RCC_ClockConfig+0x264>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006428:	2b00      	cmp	r3, #0
 800642a:	d101      	bne.n	8006430 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800642c:	2301      	movs	r3, #1
 800642e:	e0f4      	b.n	800661a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006430:	f000 f9ba 	bl	80067a8 <RCC_GetSysClockFreqFromPLLSource>
 8006434:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8006436:	693b      	ldr	r3, [r7, #16]
 8006438:	4a7c      	ldr	r2, [pc, #496]	@ (800662c <HAL_RCC_ClockConfig+0x268>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d93f      	bls.n	80064be <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800643e:	4b7a      	ldr	r3, [pc, #488]	@ (8006628 <HAL_RCC_ClockConfig+0x264>)
 8006440:	689b      	ldr	r3, [r3, #8]
 8006442:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006446:	2b00      	cmp	r3, #0
 8006448:	d009      	beq.n	800645e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006452:	2b00      	cmp	r3, #0
 8006454:	d033      	beq.n	80064be <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800645a:	2b00      	cmp	r3, #0
 800645c:	d12f      	bne.n	80064be <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800645e:	4b72      	ldr	r3, [pc, #456]	@ (8006628 <HAL_RCC_ClockConfig+0x264>)
 8006460:	689b      	ldr	r3, [r3, #8]
 8006462:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006466:	4a70      	ldr	r2, [pc, #448]	@ (8006628 <HAL_RCC_ClockConfig+0x264>)
 8006468:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800646c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800646e:	2380      	movs	r3, #128	@ 0x80
 8006470:	617b      	str	r3, [r7, #20]
 8006472:	e024      	b.n	80064be <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	2b02      	cmp	r3, #2
 800647a:	d107      	bne.n	800648c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800647c:	4b6a      	ldr	r3, [pc, #424]	@ (8006628 <HAL_RCC_ClockConfig+0x264>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006484:	2b00      	cmp	r3, #0
 8006486:	d109      	bne.n	800649c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006488:	2301      	movs	r3, #1
 800648a:	e0c6      	b.n	800661a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800648c:	4b66      	ldr	r3, [pc, #408]	@ (8006628 <HAL_RCC_ClockConfig+0x264>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006494:	2b00      	cmp	r3, #0
 8006496:	d101      	bne.n	800649c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006498:	2301      	movs	r3, #1
 800649a:	e0be      	b.n	800661a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800649c:	f000 f8ce 	bl	800663c <HAL_RCC_GetSysClockFreq>
 80064a0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	4a61      	ldr	r2, [pc, #388]	@ (800662c <HAL_RCC_ClockConfig+0x268>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d909      	bls.n	80064be <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80064aa:	4b5f      	ldr	r3, [pc, #380]	@ (8006628 <HAL_RCC_ClockConfig+0x264>)
 80064ac:	689b      	ldr	r3, [r3, #8]
 80064ae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80064b2:	4a5d      	ldr	r2, [pc, #372]	@ (8006628 <HAL_RCC_ClockConfig+0x264>)
 80064b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064b8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80064ba:	2380      	movs	r3, #128	@ 0x80
 80064bc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80064be:	4b5a      	ldr	r3, [pc, #360]	@ (8006628 <HAL_RCC_ClockConfig+0x264>)
 80064c0:	689b      	ldr	r3, [r3, #8]
 80064c2:	f023 0203 	bic.w	r2, r3, #3
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	685b      	ldr	r3, [r3, #4]
 80064ca:	4957      	ldr	r1, [pc, #348]	@ (8006628 <HAL_RCC_ClockConfig+0x264>)
 80064cc:	4313      	orrs	r3, r2
 80064ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064d0:	f7fd f94a 	bl	8003768 <HAL_GetTick>
 80064d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064d6:	e00a      	b.n	80064ee <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80064d8:	f7fd f946 	bl	8003768 <HAL_GetTick>
 80064dc:	4602      	mov	r2, r0
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	1ad3      	subs	r3, r2, r3
 80064e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d901      	bls.n	80064ee <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80064ea:	2303      	movs	r3, #3
 80064ec:	e095      	b.n	800661a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064ee:	4b4e      	ldr	r3, [pc, #312]	@ (8006628 <HAL_RCC_ClockConfig+0x264>)
 80064f0:	689b      	ldr	r3, [r3, #8]
 80064f2:	f003 020c 	and.w	r2, r3, #12
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	009b      	lsls	r3, r3, #2
 80064fc:	429a      	cmp	r2, r3
 80064fe:	d1eb      	bne.n	80064d8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f003 0302 	and.w	r3, r3, #2
 8006508:	2b00      	cmp	r3, #0
 800650a:	d023      	beq.n	8006554 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f003 0304 	and.w	r3, r3, #4
 8006514:	2b00      	cmp	r3, #0
 8006516:	d005      	beq.n	8006524 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006518:	4b43      	ldr	r3, [pc, #268]	@ (8006628 <HAL_RCC_ClockConfig+0x264>)
 800651a:	689b      	ldr	r3, [r3, #8]
 800651c:	4a42      	ldr	r2, [pc, #264]	@ (8006628 <HAL_RCC_ClockConfig+0x264>)
 800651e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006522:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f003 0308 	and.w	r3, r3, #8
 800652c:	2b00      	cmp	r3, #0
 800652e:	d007      	beq.n	8006540 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006530:	4b3d      	ldr	r3, [pc, #244]	@ (8006628 <HAL_RCC_ClockConfig+0x264>)
 8006532:	689b      	ldr	r3, [r3, #8]
 8006534:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006538:	4a3b      	ldr	r2, [pc, #236]	@ (8006628 <HAL_RCC_ClockConfig+0x264>)
 800653a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800653e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006540:	4b39      	ldr	r3, [pc, #228]	@ (8006628 <HAL_RCC_ClockConfig+0x264>)
 8006542:	689b      	ldr	r3, [r3, #8]
 8006544:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	689b      	ldr	r3, [r3, #8]
 800654c:	4936      	ldr	r1, [pc, #216]	@ (8006628 <HAL_RCC_ClockConfig+0x264>)
 800654e:	4313      	orrs	r3, r2
 8006550:	608b      	str	r3, [r1, #8]
 8006552:	e008      	b.n	8006566 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	2b80      	cmp	r3, #128	@ 0x80
 8006558:	d105      	bne.n	8006566 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800655a:	4b33      	ldr	r3, [pc, #204]	@ (8006628 <HAL_RCC_ClockConfig+0x264>)
 800655c:	689b      	ldr	r3, [r3, #8]
 800655e:	4a32      	ldr	r2, [pc, #200]	@ (8006628 <HAL_RCC_ClockConfig+0x264>)
 8006560:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006564:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006566:	4b2f      	ldr	r3, [pc, #188]	@ (8006624 <HAL_RCC_ClockConfig+0x260>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f003 030f 	and.w	r3, r3, #15
 800656e:	683a      	ldr	r2, [r7, #0]
 8006570:	429a      	cmp	r2, r3
 8006572:	d21d      	bcs.n	80065b0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006574:	4b2b      	ldr	r3, [pc, #172]	@ (8006624 <HAL_RCC_ClockConfig+0x260>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f023 020f 	bic.w	r2, r3, #15
 800657c:	4929      	ldr	r1, [pc, #164]	@ (8006624 <HAL_RCC_ClockConfig+0x260>)
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	4313      	orrs	r3, r2
 8006582:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006584:	f7fd f8f0 	bl	8003768 <HAL_GetTick>
 8006588:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800658a:	e00a      	b.n	80065a2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800658c:	f7fd f8ec 	bl	8003768 <HAL_GetTick>
 8006590:	4602      	mov	r2, r0
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	1ad3      	subs	r3, r2, r3
 8006596:	f241 3288 	movw	r2, #5000	@ 0x1388
 800659a:	4293      	cmp	r3, r2
 800659c:	d901      	bls.n	80065a2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800659e:	2303      	movs	r3, #3
 80065a0:	e03b      	b.n	800661a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80065a2:	4b20      	ldr	r3, [pc, #128]	@ (8006624 <HAL_RCC_ClockConfig+0x260>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f003 030f 	and.w	r3, r3, #15
 80065aa:	683a      	ldr	r2, [r7, #0]
 80065ac:	429a      	cmp	r2, r3
 80065ae:	d1ed      	bne.n	800658c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f003 0304 	and.w	r3, r3, #4
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d008      	beq.n	80065ce <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80065bc:	4b1a      	ldr	r3, [pc, #104]	@ (8006628 <HAL_RCC_ClockConfig+0x264>)
 80065be:	689b      	ldr	r3, [r3, #8]
 80065c0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	68db      	ldr	r3, [r3, #12]
 80065c8:	4917      	ldr	r1, [pc, #92]	@ (8006628 <HAL_RCC_ClockConfig+0x264>)
 80065ca:	4313      	orrs	r3, r2
 80065cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f003 0308 	and.w	r3, r3, #8
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d009      	beq.n	80065ee <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80065da:	4b13      	ldr	r3, [pc, #76]	@ (8006628 <HAL_RCC_ClockConfig+0x264>)
 80065dc:	689b      	ldr	r3, [r3, #8]
 80065de:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	691b      	ldr	r3, [r3, #16]
 80065e6:	00db      	lsls	r3, r3, #3
 80065e8:	490f      	ldr	r1, [pc, #60]	@ (8006628 <HAL_RCC_ClockConfig+0x264>)
 80065ea:	4313      	orrs	r3, r2
 80065ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80065ee:	f000 f825 	bl	800663c <HAL_RCC_GetSysClockFreq>
 80065f2:	4602      	mov	r2, r0
 80065f4:	4b0c      	ldr	r3, [pc, #48]	@ (8006628 <HAL_RCC_ClockConfig+0x264>)
 80065f6:	689b      	ldr	r3, [r3, #8]
 80065f8:	091b      	lsrs	r3, r3, #4
 80065fa:	f003 030f 	and.w	r3, r3, #15
 80065fe:	490c      	ldr	r1, [pc, #48]	@ (8006630 <HAL_RCC_ClockConfig+0x26c>)
 8006600:	5ccb      	ldrb	r3, [r1, r3]
 8006602:	f003 031f 	and.w	r3, r3, #31
 8006606:	fa22 f303 	lsr.w	r3, r2, r3
 800660a:	4a0a      	ldr	r2, [pc, #40]	@ (8006634 <HAL_RCC_ClockConfig+0x270>)
 800660c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800660e:	4b0a      	ldr	r3, [pc, #40]	@ (8006638 <HAL_RCC_ClockConfig+0x274>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4618      	mov	r0, r3
 8006614:	f7fc fe0e 	bl	8003234 <HAL_InitTick>
 8006618:	4603      	mov	r3, r0
}
 800661a:	4618      	mov	r0, r3
 800661c:	3718      	adds	r7, #24
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}
 8006622:	bf00      	nop
 8006624:	40022000 	.word	0x40022000
 8006628:	40021000 	.word	0x40021000
 800662c:	04c4b400 	.word	0x04c4b400
 8006630:	08013510 	.word	0x08013510
 8006634:	20000020 	.word	0x20000020
 8006638:	20000024 	.word	0x20000024

0800663c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800663c:	b480      	push	{r7}
 800663e:	b087      	sub	sp, #28
 8006640:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006642:	4b2c      	ldr	r3, [pc, #176]	@ (80066f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006644:	689b      	ldr	r3, [r3, #8]
 8006646:	f003 030c 	and.w	r3, r3, #12
 800664a:	2b04      	cmp	r3, #4
 800664c:	d102      	bne.n	8006654 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800664e:	4b2a      	ldr	r3, [pc, #168]	@ (80066f8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006650:	613b      	str	r3, [r7, #16]
 8006652:	e047      	b.n	80066e4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006654:	4b27      	ldr	r3, [pc, #156]	@ (80066f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006656:	689b      	ldr	r3, [r3, #8]
 8006658:	f003 030c 	and.w	r3, r3, #12
 800665c:	2b08      	cmp	r3, #8
 800665e:	d102      	bne.n	8006666 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006660:	4b26      	ldr	r3, [pc, #152]	@ (80066fc <HAL_RCC_GetSysClockFreq+0xc0>)
 8006662:	613b      	str	r3, [r7, #16]
 8006664:	e03e      	b.n	80066e4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006666:	4b23      	ldr	r3, [pc, #140]	@ (80066f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006668:	689b      	ldr	r3, [r3, #8]
 800666a:	f003 030c 	and.w	r3, r3, #12
 800666e:	2b0c      	cmp	r3, #12
 8006670:	d136      	bne.n	80066e0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006672:	4b20      	ldr	r3, [pc, #128]	@ (80066f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006674:	68db      	ldr	r3, [r3, #12]
 8006676:	f003 0303 	and.w	r3, r3, #3
 800667a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800667c:	4b1d      	ldr	r3, [pc, #116]	@ (80066f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800667e:	68db      	ldr	r3, [r3, #12]
 8006680:	091b      	lsrs	r3, r3, #4
 8006682:	f003 030f 	and.w	r3, r3, #15
 8006686:	3301      	adds	r3, #1
 8006688:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	2b03      	cmp	r3, #3
 800668e:	d10c      	bne.n	80066aa <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006690:	4a1a      	ldr	r2, [pc, #104]	@ (80066fc <HAL_RCC_GetSysClockFreq+0xc0>)
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	fbb2 f3f3 	udiv	r3, r2, r3
 8006698:	4a16      	ldr	r2, [pc, #88]	@ (80066f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800669a:	68d2      	ldr	r2, [r2, #12]
 800669c:	0a12      	lsrs	r2, r2, #8
 800669e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80066a2:	fb02 f303 	mul.w	r3, r2, r3
 80066a6:	617b      	str	r3, [r7, #20]
      break;
 80066a8:	e00c      	b.n	80066c4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80066aa:	4a13      	ldr	r2, [pc, #76]	@ (80066f8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80066b2:	4a10      	ldr	r2, [pc, #64]	@ (80066f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80066b4:	68d2      	ldr	r2, [r2, #12]
 80066b6:	0a12      	lsrs	r2, r2, #8
 80066b8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80066bc:	fb02 f303 	mul.w	r3, r2, r3
 80066c0:	617b      	str	r3, [r7, #20]
      break;
 80066c2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80066c4:	4b0b      	ldr	r3, [pc, #44]	@ (80066f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80066c6:	68db      	ldr	r3, [r3, #12]
 80066c8:	0e5b      	lsrs	r3, r3, #25
 80066ca:	f003 0303 	and.w	r3, r3, #3
 80066ce:	3301      	adds	r3, #1
 80066d0:	005b      	lsls	r3, r3, #1
 80066d2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80066d4:	697a      	ldr	r2, [r7, #20]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80066dc:	613b      	str	r3, [r7, #16]
 80066de:	e001      	b.n	80066e4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80066e0:	2300      	movs	r3, #0
 80066e2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80066e4:	693b      	ldr	r3, [r7, #16]
}
 80066e6:	4618      	mov	r0, r3
 80066e8:	371c      	adds	r7, #28
 80066ea:	46bd      	mov	sp, r7
 80066ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f0:	4770      	bx	lr
 80066f2:	bf00      	nop
 80066f4:	40021000 	.word	0x40021000
 80066f8:	00f42400 	.word	0x00f42400
 80066fc:	007a1200 	.word	0x007a1200

08006700 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006700:	b480      	push	{r7}
 8006702:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006704:	4b03      	ldr	r3, [pc, #12]	@ (8006714 <HAL_RCC_GetHCLKFreq+0x14>)
 8006706:	681b      	ldr	r3, [r3, #0]
}
 8006708:	4618      	mov	r0, r3
 800670a:	46bd      	mov	sp, r7
 800670c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006710:	4770      	bx	lr
 8006712:	bf00      	nop
 8006714:	20000020 	.word	0x20000020

08006718 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800671c:	f7ff fff0 	bl	8006700 <HAL_RCC_GetHCLKFreq>
 8006720:	4602      	mov	r2, r0
 8006722:	4b06      	ldr	r3, [pc, #24]	@ (800673c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006724:	689b      	ldr	r3, [r3, #8]
 8006726:	0adb      	lsrs	r3, r3, #11
 8006728:	f003 0307 	and.w	r3, r3, #7
 800672c:	4904      	ldr	r1, [pc, #16]	@ (8006740 <HAL_RCC_GetPCLK2Freq+0x28>)
 800672e:	5ccb      	ldrb	r3, [r1, r3]
 8006730:	f003 031f 	and.w	r3, r3, #31
 8006734:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006738:	4618      	mov	r0, r3
 800673a:	bd80      	pop	{r7, pc}
 800673c:	40021000 	.word	0x40021000
 8006740:	08013520 	.word	0x08013520

08006744 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006744:	b480      	push	{r7}
 8006746:	b083      	sub	sp, #12
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
 800674c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	220f      	movs	r2, #15
 8006752:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8006754:	4b12      	ldr	r3, [pc, #72]	@ (80067a0 <HAL_RCC_GetClockConfig+0x5c>)
 8006756:	689b      	ldr	r3, [r3, #8]
 8006758:	f003 0203 	and.w	r2, r3, #3
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8006760:	4b0f      	ldr	r3, [pc, #60]	@ (80067a0 <HAL_RCC_GetClockConfig+0x5c>)
 8006762:	689b      	ldr	r3, [r3, #8]
 8006764:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800676c:	4b0c      	ldr	r3, [pc, #48]	@ (80067a0 <HAL_RCC_GetClockConfig+0x5c>)
 800676e:	689b      	ldr	r3, [r3, #8]
 8006770:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8006778:	4b09      	ldr	r3, [pc, #36]	@ (80067a0 <HAL_RCC_GetClockConfig+0x5c>)
 800677a:	689b      	ldr	r3, [r3, #8]
 800677c:	08db      	lsrs	r3, r3, #3
 800677e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8006786:	4b07      	ldr	r3, [pc, #28]	@ (80067a4 <HAL_RCC_GetClockConfig+0x60>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f003 020f 	and.w	r2, r3, #15
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	601a      	str	r2, [r3, #0]
}
 8006792:	bf00      	nop
 8006794:	370c      	adds	r7, #12
 8006796:	46bd      	mov	sp, r7
 8006798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679c:	4770      	bx	lr
 800679e:	bf00      	nop
 80067a0:	40021000 	.word	0x40021000
 80067a4:	40022000 	.word	0x40022000

080067a8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b087      	sub	sp, #28
 80067ac:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80067ae:	4b1e      	ldr	r3, [pc, #120]	@ (8006828 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80067b0:	68db      	ldr	r3, [r3, #12]
 80067b2:	f003 0303 	and.w	r3, r3, #3
 80067b6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80067b8:	4b1b      	ldr	r3, [pc, #108]	@ (8006828 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80067ba:	68db      	ldr	r3, [r3, #12]
 80067bc:	091b      	lsrs	r3, r3, #4
 80067be:	f003 030f 	and.w	r3, r3, #15
 80067c2:	3301      	adds	r3, #1
 80067c4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	2b03      	cmp	r3, #3
 80067ca:	d10c      	bne.n	80067e6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80067cc:	4a17      	ldr	r2, [pc, #92]	@ (800682c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80067d4:	4a14      	ldr	r2, [pc, #80]	@ (8006828 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80067d6:	68d2      	ldr	r2, [r2, #12]
 80067d8:	0a12      	lsrs	r2, r2, #8
 80067da:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80067de:	fb02 f303 	mul.w	r3, r2, r3
 80067e2:	617b      	str	r3, [r7, #20]
    break;
 80067e4:	e00c      	b.n	8006800 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80067e6:	4a12      	ldr	r2, [pc, #72]	@ (8006830 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80067ee:	4a0e      	ldr	r2, [pc, #56]	@ (8006828 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80067f0:	68d2      	ldr	r2, [r2, #12]
 80067f2:	0a12      	lsrs	r2, r2, #8
 80067f4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80067f8:	fb02 f303 	mul.w	r3, r2, r3
 80067fc:	617b      	str	r3, [r7, #20]
    break;
 80067fe:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006800:	4b09      	ldr	r3, [pc, #36]	@ (8006828 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006802:	68db      	ldr	r3, [r3, #12]
 8006804:	0e5b      	lsrs	r3, r3, #25
 8006806:	f003 0303 	and.w	r3, r3, #3
 800680a:	3301      	adds	r3, #1
 800680c:	005b      	lsls	r3, r3, #1
 800680e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006810:	697a      	ldr	r2, [r7, #20]
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	fbb2 f3f3 	udiv	r3, r2, r3
 8006818:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800681a:	687b      	ldr	r3, [r7, #4]
}
 800681c:	4618      	mov	r0, r3
 800681e:	371c      	adds	r7, #28
 8006820:	46bd      	mov	sp, r7
 8006822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006826:	4770      	bx	lr
 8006828:	40021000 	.word	0x40021000
 800682c:	007a1200 	.word	0x007a1200
 8006830:	00f42400 	.word	0x00f42400

08006834 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b086      	sub	sp, #24
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800683c:	2300      	movs	r3, #0
 800683e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006840:	2300      	movs	r3, #0
 8006842:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800684c:	2b00      	cmp	r3, #0
 800684e:	f000 8098 	beq.w	8006982 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006852:	2300      	movs	r3, #0
 8006854:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006856:	4b43      	ldr	r3, [pc, #268]	@ (8006964 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006858:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800685a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800685e:	2b00      	cmp	r3, #0
 8006860:	d10d      	bne.n	800687e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006862:	4b40      	ldr	r3, [pc, #256]	@ (8006964 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006864:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006866:	4a3f      	ldr	r2, [pc, #252]	@ (8006964 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006868:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800686c:	6593      	str	r3, [r2, #88]	@ 0x58
 800686e:	4b3d      	ldr	r3, [pc, #244]	@ (8006964 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006870:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006872:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006876:	60bb      	str	r3, [r7, #8]
 8006878:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800687a:	2301      	movs	r3, #1
 800687c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800687e:	4b3a      	ldr	r3, [pc, #232]	@ (8006968 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4a39      	ldr	r2, [pc, #228]	@ (8006968 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006884:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006888:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800688a:	f7fc ff6d 	bl	8003768 <HAL_GetTick>
 800688e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006890:	e009      	b.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006892:	f7fc ff69 	bl	8003768 <HAL_GetTick>
 8006896:	4602      	mov	r2, r0
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	1ad3      	subs	r3, r2, r3
 800689c:	2b02      	cmp	r3, #2
 800689e:	d902      	bls.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80068a0:	2303      	movs	r3, #3
 80068a2:	74fb      	strb	r3, [r7, #19]
        break;
 80068a4:	e005      	b.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80068a6:	4b30      	ldr	r3, [pc, #192]	@ (8006968 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d0ef      	beq.n	8006892 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80068b2:	7cfb      	ldrb	r3, [r7, #19]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d159      	bne.n	800696c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80068b8:	4b2a      	ldr	r3, [pc, #168]	@ (8006964 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80068ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80068c2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d01e      	beq.n	8006908 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80068ce:	697a      	ldr	r2, [r7, #20]
 80068d0:	429a      	cmp	r2, r3
 80068d2:	d019      	beq.n	8006908 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80068d4:	4b23      	ldr	r3, [pc, #140]	@ (8006964 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80068d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80068de:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80068e0:	4b20      	ldr	r3, [pc, #128]	@ (8006964 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80068e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068e6:	4a1f      	ldr	r2, [pc, #124]	@ (8006964 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80068e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80068ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80068f0:	4b1c      	ldr	r3, [pc, #112]	@ (8006964 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80068f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068f6:	4a1b      	ldr	r2, [pc, #108]	@ (8006964 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80068f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80068fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006900:	4a18      	ldr	r2, [pc, #96]	@ (8006964 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	f003 0301 	and.w	r3, r3, #1
 800690e:	2b00      	cmp	r3, #0
 8006910:	d016      	beq.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006912:	f7fc ff29 	bl	8003768 <HAL_GetTick>
 8006916:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006918:	e00b      	b.n	8006932 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800691a:	f7fc ff25 	bl	8003768 <HAL_GetTick>
 800691e:	4602      	mov	r2, r0
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	1ad3      	subs	r3, r2, r3
 8006924:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006928:	4293      	cmp	r3, r2
 800692a:	d902      	bls.n	8006932 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800692c:	2303      	movs	r3, #3
 800692e:	74fb      	strb	r3, [r7, #19]
            break;
 8006930:	e006      	b.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006932:	4b0c      	ldr	r3, [pc, #48]	@ (8006964 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006934:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006938:	f003 0302 	and.w	r3, r3, #2
 800693c:	2b00      	cmp	r3, #0
 800693e:	d0ec      	beq.n	800691a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006940:	7cfb      	ldrb	r3, [r7, #19]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d10b      	bne.n	800695e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006946:	4b07      	ldr	r3, [pc, #28]	@ (8006964 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006948:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800694c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006954:	4903      	ldr	r1, [pc, #12]	@ (8006964 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006956:	4313      	orrs	r3, r2
 8006958:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800695c:	e008      	b.n	8006970 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800695e:	7cfb      	ldrb	r3, [r7, #19]
 8006960:	74bb      	strb	r3, [r7, #18]
 8006962:	e005      	b.n	8006970 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006964:	40021000 	.word	0x40021000
 8006968:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800696c:	7cfb      	ldrb	r3, [r7, #19]
 800696e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006970:	7c7b      	ldrb	r3, [r7, #17]
 8006972:	2b01      	cmp	r3, #1
 8006974:	d105      	bne.n	8006982 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006976:	4ba7      	ldr	r3, [pc, #668]	@ (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006978:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800697a:	4aa6      	ldr	r2, [pc, #664]	@ (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800697c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006980:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f003 0301 	and.w	r3, r3, #1
 800698a:	2b00      	cmp	r3, #0
 800698c:	d00a      	beq.n	80069a4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800698e:	4ba1      	ldr	r3, [pc, #644]	@ (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006990:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006994:	f023 0203 	bic.w	r2, r3, #3
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	499d      	ldr	r1, [pc, #628]	@ (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800699e:	4313      	orrs	r3, r2
 80069a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f003 0302 	and.w	r3, r3, #2
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d00a      	beq.n	80069c6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80069b0:	4b98      	ldr	r3, [pc, #608]	@ (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069b6:	f023 020c 	bic.w	r2, r3, #12
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	689b      	ldr	r3, [r3, #8]
 80069be:	4995      	ldr	r1, [pc, #596]	@ (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069c0:	4313      	orrs	r3, r2
 80069c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f003 0304 	and.w	r3, r3, #4
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d00a      	beq.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80069d2:	4b90      	ldr	r3, [pc, #576]	@ (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069d8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	68db      	ldr	r3, [r3, #12]
 80069e0:	498c      	ldr	r1, [pc, #560]	@ (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069e2:	4313      	orrs	r3, r2
 80069e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f003 0308 	and.w	r3, r3, #8
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d00a      	beq.n	8006a0a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80069f4:	4b87      	ldr	r3, [pc, #540]	@ (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069fa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	691b      	ldr	r3, [r3, #16]
 8006a02:	4984      	ldr	r1, [pc, #528]	@ (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a04:	4313      	orrs	r3, r2
 8006a06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f003 0310 	and.w	r3, r3, #16
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d00a      	beq.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006a16:	4b7f      	ldr	r3, [pc, #508]	@ (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a1c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	695b      	ldr	r3, [r3, #20]
 8006a24:	497b      	ldr	r1, [pc, #492]	@ (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a26:	4313      	orrs	r3, r2
 8006a28:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f003 0320 	and.w	r3, r3, #32
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d00a      	beq.n	8006a4e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006a38:	4b76      	ldr	r3, [pc, #472]	@ (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a3e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	699b      	ldr	r3, [r3, #24]
 8006a46:	4973      	ldr	r1, [pc, #460]	@ (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d00a      	beq.n	8006a70 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006a5a:	4b6e      	ldr	r3, [pc, #440]	@ (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a60:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	69db      	ldr	r3, [r3, #28]
 8006a68:	496a      	ldr	r1, [pc, #424]	@ (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d00a      	beq.n	8006a92 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006a7c:	4b65      	ldr	r3, [pc, #404]	@ (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a82:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6a1b      	ldr	r3, [r3, #32]
 8006a8a:	4962      	ldr	r1, [pc, #392]	@ (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a8c:	4313      	orrs	r3, r2
 8006a8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d00a      	beq.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006a9e:	4b5d      	ldr	r3, [pc, #372]	@ (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006aa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006aa4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aac:	4959      	ldr	r1, [pc, #356]	@ (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006aae:	4313      	orrs	r3, r2
 8006ab0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d00a      	beq.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006ac0:	4b54      	ldr	r3, [pc, #336]	@ (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ac6:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ace:	4951      	ldr	r1, [pc, #324]	@ (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d015      	beq.n	8006b0e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006ae2:	4b4c      	ldr	r3, [pc, #304]	@ (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ae8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006af0:	4948      	ldr	r1, [pc, #288]	@ (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006af2:	4313      	orrs	r3, r2
 8006af4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006afc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006b00:	d105      	bne.n	8006b0e <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006b02:	4b44      	ldr	r3, [pc, #272]	@ (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b04:	68db      	ldr	r3, [r3, #12]
 8006b06:	4a43      	ldr	r2, [pc, #268]	@ (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b08:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006b0c:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d015      	beq.n	8006b46 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006b1a:	4b3e      	ldr	r3, [pc, #248]	@ (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b20:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b28:	493a      	ldr	r1, [pc, #232]	@ (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b34:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006b38:	d105      	bne.n	8006b46 <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006b3a:	4b36      	ldr	r3, [pc, #216]	@ (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b3c:	68db      	ldr	r3, [r3, #12]
 8006b3e:	4a35      	ldr	r2, [pc, #212]	@ (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b40:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006b44:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d015      	beq.n	8006b7e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006b52:	4b30      	ldr	r3, [pc, #192]	@ (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b58:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b60:	492c      	ldr	r1, [pc, #176]	@ (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b62:	4313      	orrs	r3, r2
 8006b64:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b6c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006b70:	d105      	bne.n	8006b7e <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006b72:	4b28      	ldr	r3, [pc, #160]	@ (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b74:	68db      	ldr	r3, [r3, #12]
 8006b76:	4a27      	ldr	r2, [pc, #156]	@ (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b78:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006b7c:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d015      	beq.n	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006b8a:	4b22      	ldr	r3, [pc, #136]	@ (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b90:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b98:	491e      	ldr	r1, [pc, #120]	@ (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ba4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006ba8:	d105      	bne.n	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006baa:	4b1a      	ldr	r3, [pc, #104]	@ (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bac:	68db      	ldr	r3, [r3, #12]
 8006bae:	4a19      	ldr	r2, [pc, #100]	@ (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bb0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006bb4:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d015      	beq.n	8006bee <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006bc2:	4b14      	ldr	r3, [pc, #80]	@ (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bc8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bd0:	4910      	ldr	r1, [pc, #64]	@ (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bdc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006be0:	d105      	bne.n	8006bee <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006be2:	4b0c      	ldr	r3, [pc, #48]	@ (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006be4:	68db      	ldr	r3, [r3, #12]
 8006be6:	4a0b      	ldr	r2, [pc, #44]	@ (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006be8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006bec:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d018      	beq.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006bfa:	4b06      	ldr	r3, [pc, #24]	@ (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c00:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c08:	4902      	ldr	r1, [pc, #8]	@ (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	e001      	b.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8006c14:	40021000 	.word	0x40021000
 8006c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c1a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006c1e:	d105      	bne.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006c20:	4b21      	ldr	r3, [pc, #132]	@ (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006c22:	68db      	ldr	r3, [r3, #12]
 8006c24:	4a20      	ldr	r2, [pc, #128]	@ (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006c26:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c2a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d015      	beq.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006c38:	4b1b      	ldr	r3, [pc, #108]	@ (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c3e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c46:	4918      	ldr	r1, [pc, #96]	@ (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c56:	d105      	bne.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006c58:	4b13      	ldr	r3, [pc, #76]	@ (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006c5a:	68db      	ldr	r3, [r3, #12]
 8006c5c:	4a12      	ldr	r2, [pc, #72]	@ (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006c5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c62:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d015      	beq.n	8006c9c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006c70:	4b0d      	ldr	r3, [pc, #52]	@ (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006c72:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006c76:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c7e:	490a      	ldr	r1, [pc, #40]	@ (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006c80:	4313      	orrs	r3, r2
 8006c82:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c8a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006c8e:	d105      	bne.n	8006c9c <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006c90:	4b05      	ldr	r3, [pc, #20]	@ (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006c92:	68db      	ldr	r3, [r3, #12]
 8006c94:	4a04      	ldr	r2, [pc, #16]	@ (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006c96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006c9a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006c9c:	7cbb      	ldrb	r3, [r7, #18]
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	3718      	adds	r7, #24
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}
 8006ca6:	bf00      	nop
 8006ca8:	40021000 	.word	0x40021000

08006cac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b084      	sub	sp, #16
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d101      	bne.n	8006cbe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006cba:	2301      	movs	r3, #1
 8006cbc:	e09d      	b.n	8006dfa <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d108      	bne.n	8006cd8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	685b      	ldr	r3, [r3, #4]
 8006cca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006cce:	d009      	beq.n	8006ce4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	61da      	str	r2, [r3, #28]
 8006cd6:	e005      	b.n	8006ce4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006cf0:	b2db      	uxtb	r3, r3
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d106      	bne.n	8006d04 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f7fc fa56 	bl	80031b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2202      	movs	r2, #2
 8006d08:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	681a      	ldr	r2, [r3, #0]
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006d1a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	68db      	ldr	r3, [r3, #12]
 8006d20:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006d24:	d902      	bls.n	8006d2c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006d26:	2300      	movs	r3, #0
 8006d28:	60fb      	str	r3, [r7, #12]
 8006d2a:	e002      	b.n	8006d32 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006d2c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006d30:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	68db      	ldr	r3, [r3, #12]
 8006d36:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8006d3a:	d007      	beq.n	8006d4c <HAL_SPI_Init+0xa0>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	68db      	ldr	r3, [r3, #12]
 8006d40:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006d44:	d002      	beq.n	8006d4c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	685b      	ldr	r3, [r3, #4]
 8006d50:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	689b      	ldr	r3, [r3, #8]
 8006d58:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006d5c:	431a      	orrs	r2, r3
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	691b      	ldr	r3, [r3, #16]
 8006d62:	f003 0302 	and.w	r3, r3, #2
 8006d66:	431a      	orrs	r2, r3
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	695b      	ldr	r3, [r3, #20]
 8006d6c:	f003 0301 	and.w	r3, r3, #1
 8006d70:	431a      	orrs	r2, r3
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	699b      	ldr	r3, [r3, #24]
 8006d76:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006d7a:	431a      	orrs	r2, r3
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	69db      	ldr	r3, [r3, #28]
 8006d80:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006d84:	431a      	orrs	r2, r3
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6a1b      	ldr	r3, [r3, #32]
 8006d8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d8e:	ea42 0103 	orr.w	r1, r2, r3
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d96:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	430a      	orrs	r2, r1
 8006da0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	699b      	ldr	r3, [r3, #24]
 8006da6:	0c1b      	lsrs	r3, r3, #16
 8006da8:	f003 0204 	and.w	r2, r3, #4
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006db0:	f003 0310 	and.w	r3, r3, #16
 8006db4:	431a      	orrs	r2, r3
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006dba:	f003 0308 	and.w	r3, r3, #8
 8006dbe:	431a      	orrs	r2, r3
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	68db      	ldr	r3, [r3, #12]
 8006dc4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006dc8:	ea42 0103 	orr.w	r1, r2, r3
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	430a      	orrs	r2, r1
 8006dd8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	69da      	ldr	r2, [r3, #28]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006de8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2200      	movs	r2, #0
 8006dee:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2201      	movs	r2, #1
 8006df4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8006df8:	2300      	movs	r3, #0
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	3710      	adds	r7, #16
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd80      	pop	{r7, pc}

08006e02 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e02:	b580      	push	{r7, lr}
 8006e04:	b088      	sub	sp, #32
 8006e06:	af00      	add	r7, sp, #0
 8006e08:	60f8      	str	r0, [r7, #12]
 8006e0a:	60b9      	str	r1, [r7, #8]
 8006e0c:	603b      	str	r3, [r7, #0]
 8006e0e:	4613      	mov	r3, r2
 8006e10:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006e12:	f7fc fca9 	bl	8003768 <HAL_GetTick>
 8006e16:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8006e18:	88fb      	ldrh	r3, [r7, #6]
 8006e1a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006e22:	b2db      	uxtb	r3, r3
 8006e24:	2b01      	cmp	r3, #1
 8006e26:	d001      	beq.n	8006e2c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8006e28:	2302      	movs	r3, #2
 8006e2a:	e15c      	b.n	80070e6 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d002      	beq.n	8006e38 <HAL_SPI_Transmit+0x36>
 8006e32:	88fb      	ldrh	r3, [r7, #6]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d101      	bne.n	8006e3c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8006e38:	2301      	movs	r3, #1
 8006e3a:	e154      	b.n	80070e6 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006e42:	2b01      	cmp	r3, #1
 8006e44:	d101      	bne.n	8006e4a <HAL_SPI_Transmit+0x48>
 8006e46:	2302      	movs	r3, #2
 8006e48:	e14d      	b.n	80070e6 <HAL_SPI_Transmit+0x2e4>
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	2201      	movs	r2, #1
 8006e4e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	2203      	movs	r2, #3
 8006e56:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	68ba      	ldr	r2, [r7, #8]
 8006e64:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	88fa      	ldrh	r2, [r7, #6]
 8006e6a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	88fa      	ldrh	r2, [r7, #6]
 8006e70:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	2200      	movs	r2, #0
 8006e76:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	2200      	movs	r2, #0
 8006e84:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	2200      	movs	r2, #0
 8006e92:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	689b      	ldr	r3, [r3, #8]
 8006e98:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006e9c:	d10f      	bne.n	8006ebe <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	681a      	ldr	r2, [r3, #0]
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006eac:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	681a      	ldr	r2, [r3, #0]
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006ebc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ec8:	2b40      	cmp	r3, #64	@ 0x40
 8006eca:	d007      	beq.n	8006edc <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	681a      	ldr	r2, [r3, #0]
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006eda:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	68db      	ldr	r3, [r3, #12]
 8006ee0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006ee4:	d952      	bls.n	8006f8c <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	685b      	ldr	r3, [r3, #4]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d002      	beq.n	8006ef4 <HAL_SPI_Transmit+0xf2>
 8006eee:	8b7b      	ldrh	r3, [r7, #26]
 8006ef0:	2b01      	cmp	r3, #1
 8006ef2:	d145      	bne.n	8006f80 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ef8:	881a      	ldrh	r2, [r3, #0]
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f04:	1c9a      	adds	r2, r3, #2
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f0e:	b29b      	uxth	r3, r3
 8006f10:	3b01      	subs	r3, #1
 8006f12:	b29a      	uxth	r2, r3
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006f18:	e032      	b.n	8006f80 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	689b      	ldr	r3, [r3, #8]
 8006f20:	f003 0302 	and.w	r3, r3, #2
 8006f24:	2b02      	cmp	r3, #2
 8006f26:	d112      	bne.n	8006f4e <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f2c:	881a      	ldrh	r2, [r3, #0]
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f38:	1c9a      	adds	r2, r3, #2
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f42:	b29b      	uxth	r3, r3
 8006f44:	3b01      	subs	r3, #1
 8006f46:	b29a      	uxth	r2, r3
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006f4c:	e018      	b.n	8006f80 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006f4e:	f7fc fc0b 	bl	8003768 <HAL_GetTick>
 8006f52:	4602      	mov	r2, r0
 8006f54:	69fb      	ldr	r3, [r7, #28]
 8006f56:	1ad3      	subs	r3, r2, r3
 8006f58:	683a      	ldr	r2, [r7, #0]
 8006f5a:	429a      	cmp	r2, r3
 8006f5c:	d803      	bhi.n	8006f66 <HAL_SPI_Transmit+0x164>
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006f64:	d102      	bne.n	8006f6c <HAL_SPI_Transmit+0x16a>
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d109      	bne.n	8006f80 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	2201      	movs	r2, #1
 8006f70:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	2200      	movs	r2, #0
 8006f78:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8006f7c:	2303      	movs	r3, #3
 8006f7e:	e0b2      	b.n	80070e6 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f84:	b29b      	uxth	r3, r3
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d1c7      	bne.n	8006f1a <HAL_SPI_Transmit+0x118>
 8006f8a:	e083      	b.n	8007094 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	685b      	ldr	r3, [r3, #4]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d002      	beq.n	8006f9a <HAL_SPI_Transmit+0x198>
 8006f94:	8b7b      	ldrh	r3, [r7, #26]
 8006f96:	2b01      	cmp	r3, #1
 8006f98:	d177      	bne.n	800708a <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f9e:	b29b      	uxth	r3, r3
 8006fa0:	2b01      	cmp	r3, #1
 8006fa2:	d912      	bls.n	8006fca <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fa8:	881a      	ldrh	r2, [r3, #0]
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fb4:	1c9a      	adds	r2, r3, #2
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006fbe:	b29b      	uxth	r3, r3
 8006fc0:	3b02      	subs	r3, #2
 8006fc2:	b29a      	uxth	r2, r3
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006fc8:	e05f      	b.n	800708a <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	330c      	adds	r3, #12
 8006fd4:	7812      	ldrb	r2, [r2, #0]
 8006fd6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fdc:	1c5a      	adds	r2, r3, #1
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006fe6:	b29b      	uxth	r3, r3
 8006fe8:	3b01      	subs	r3, #1
 8006fea:	b29a      	uxth	r2, r3
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006ff0:	e04b      	b.n	800708a <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	689b      	ldr	r3, [r3, #8]
 8006ff8:	f003 0302 	and.w	r3, r3, #2
 8006ffc:	2b02      	cmp	r3, #2
 8006ffe:	d12b      	bne.n	8007058 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007004:	b29b      	uxth	r3, r3
 8007006:	2b01      	cmp	r3, #1
 8007008:	d912      	bls.n	8007030 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800700e:	881a      	ldrh	r2, [r3, #0]
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800701a:	1c9a      	adds	r2, r3, #2
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007024:	b29b      	uxth	r3, r3
 8007026:	3b02      	subs	r3, #2
 8007028:	b29a      	uxth	r2, r3
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800702e:	e02c      	b.n	800708a <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	330c      	adds	r3, #12
 800703a:	7812      	ldrb	r2, [r2, #0]
 800703c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007042:	1c5a      	adds	r2, r3, #1
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800704c:	b29b      	uxth	r3, r3
 800704e:	3b01      	subs	r3, #1
 8007050:	b29a      	uxth	r2, r3
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007056:	e018      	b.n	800708a <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007058:	f7fc fb86 	bl	8003768 <HAL_GetTick>
 800705c:	4602      	mov	r2, r0
 800705e:	69fb      	ldr	r3, [r7, #28]
 8007060:	1ad3      	subs	r3, r2, r3
 8007062:	683a      	ldr	r2, [r7, #0]
 8007064:	429a      	cmp	r2, r3
 8007066:	d803      	bhi.n	8007070 <HAL_SPI_Transmit+0x26e>
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800706e:	d102      	bne.n	8007076 <HAL_SPI_Transmit+0x274>
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d109      	bne.n	800708a <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	2201      	movs	r2, #1
 800707a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	2200      	movs	r2, #0
 8007082:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8007086:	2303      	movs	r3, #3
 8007088:	e02d      	b.n	80070e6 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800708e:	b29b      	uxth	r3, r3
 8007090:	2b00      	cmp	r3, #0
 8007092:	d1ae      	bne.n	8006ff2 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007094:	69fa      	ldr	r2, [r7, #28]
 8007096:	6839      	ldr	r1, [r7, #0]
 8007098:	68f8      	ldr	r0, [r7, #12]
 800709a:	f000 fb65 	bl	8007768 <SPI_EndRxTxTransaction>
 800709e:	4603      	mov	r3, r0
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d002      	beq.n	80070aa <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	2220      	movs	r2, #32
 80070a8:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	689b      	ldr	r3, [r3, #8]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d10a      	bne.n	80070c8 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80070b2:	2300      	movs	r3, #0
 80070b4:	617b      	str	r3, [r7, #20]
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	68db      	ldr	r3, [r3, #12]
 80070bc:	617b      	str	r3, [r7, #20]
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	689b      	ldr	r3, [r3, #8]
 80070c4:	617b      	str	r3, [r7, #20]
 80070c6:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	2201      	movs	r2, #1
 80070cc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	2200      	movs	r2, #0
 80070d4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d001      	beq.n	80070e4 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 80070e0:	2301      	movs	r3, #1
 80070e2:	e000      	b.n	80070e6 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 80070e4:	2300      	movs	r3, #0
  }
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	3720      	adds	r7, #32
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}

080070ee <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80070ee:	b580      	push	{r7, lr}
 80070f0:	b08a      	sub	sp, #40	@ 0x28
 80070f2:	af00      	add	r7, sp, #0
 80070f4:	60f8      	str	r0, [r7, #12]
 80070f6:	60b9      	str	r1, [r7, #8]
 80070f8:	607a      	str	r2, [r7, #4]
 80070fa:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80070fc:	2301      	movs	r3, #1
 80070fe:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007100:	f7fc fb32 	bl	8003768 <HAL_GetTick>
 8007104:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800710c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	685b      	ldr	r3, [r3, #4]
 8007112:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8007114:	887b      	ldrh	r3, [r7, #2]
 8007116:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8007118:	887b      	ldrh	r3, [r7, #2]
 800711a:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800711c:	7ffb      	ldrb	r3, [r7, #31]
 800711e:	2b01      	cmp	r3, #1
 8007120:	d00c      	beq.n	800713c <HAL_SPI_TransmitReceive+0x4e>
 8007122:	69bb      	ldr	r3, [r7, #24]
 8007124:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007128:	d106      	bne.n	8007138 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	689b      	ldr	r3, [r3, #8]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d102      	bne.n	8007138 <HAL_SPI_TransmitReceive+0x4a>
 8007132:	7ffb      	ldrb	r3, [r7, #31]
 8007134:	2b04      	cmp	r3, #4
 8007136:	d001      	beq.n	800713c <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8007138:	2302      	movs	r3, #2
 800713a:	e1f3      	b.n	8007524 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d005      	beq.n	800714e <HAL_SPI_TransmitReceive+0x60>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d002      	beq.n	800714e <HAL_SPI_TransmitReceive+0x60>
 8007148:	887b      	ldrh	r3, [r7, #2]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d101      	bne.n	8007152 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 800714e:	2301      	movs	r3, #1
 8007150:	e1e8      	b.n	8007524 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007158:	2b01      	cmp	r3, #1
 800715a:	d101      	bne.n	8007160 <HAL_SPI_TransmitReceive+0x72>
 800715c:	2302      	movs	r3, #2
 800715e:	e1e1      	b.n	8007524 <HAL_SPI_TransmitReceive+0x436>
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	2201      	movs	r2, #1
 8007164:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800716e:	b2db      	uxtb	r3, r3
 8007170:	2b04      	cmp	r3, #4
 8007172:	d003      	beq.n	800717c <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	2205      	movs	r2, #5
 8007178:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	2200      	movs	r2, #0
 8007180:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	687a      	ldr	r2, [r7, #4]
 8007186:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	887a      	ldrh	r2, [r7, #2]
 800718c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	887a      	ldrh	r2, [r7, #2]
 8007194:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	68ba      	ldr	r2, [r7, #8]
 800719c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	887a      	ldrh	r2, [r7, #2]
 80071a2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	887a      	ldrh	r2, [r7, #2]
 80071a8:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	2200      	movs	r2, #0
 80071ae:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	2200      	movs	r2, #0
 80071b4:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	68db      	ldr	r3, [r3, #12]
 80071ba:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80071be:	d802      	bhi.n	80071c6 <HAL_SPI_TransmitReceive+0xd8>
 80071c0:	8abb      	ldrh	r3, [r7, #20]
 80071c2:	2b01      	cmp	r3, #1
 80071c4:	d908      	bls.n	80071d8 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	685a      	ldr	r2, [r3, #4]
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80071d4:	605a      	str	r2, [r3, #4]
 80071d6:	e007      	b.n	80071e8 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	685a      	ldr	r2, [r3, #4]
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80071e6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071f2:	2b40      	cmp	r3, #64	@ 0x40
 80071f4:	d007      	beq.n	8007206 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	681a      	ldr	r2, [r3, #0]
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007204:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	68db      	ldr	r3, [r3, #12]
 800720a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800720e:	f240 8083 	bls.w	8007318 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	685b      	ldr	r3, [r3, #4]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d002      	beq.n	8007220 <HAL_SPI_TransmitReceive+0x132>
 800721a:	8afb      	ldrh	r3, [r7, #22]
 800721c:	2b01      	cmp	r3, #1
 800721e:	d16f      	bne.n	8007300 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007224:	881a      	ldrh	r2, [r3, #0]
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007230:	1c9a      	adds	r2, r3, #2
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800723a:	b29b      	uxth	r3, r3
 800723c:	3b01      	subs	r3, #1
 800723e:	b29a      	uxth	r2, r3
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007244:	e05c      	b.n	8007300 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	689b      	ldr	r3, [r3, #8]
 800724c:	f003 0302 	and.w	r3, r3, #2
 8007250:	2b02      	cmp	r3, #2
 8007252:	d11b      	bne.n	800728c <HAL_SPI_TransmitReceive+0x19e>
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007258:	b29b      	uxth	r3, r3
 800725a:	2b00      	cmp	r3, #0
 800725c:	d016      	beq.n	800728c <HAL_SPI_TransmitReceive+0x19e>
 800725e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007260:	2b01      	cmp	r3, #1
 8007262:	d113      	bne.n	800728c <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007268:	881a      	ldrh	r2, [r3, #0]
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007274:	1c9a      	adds	r2, r3, #2
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800727e:	b29b      	uxth	r3, r3
 8007280:	3b01      	subs	r3, #1
 8007282:	b29a      	uxth	r2, r3
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007288:	2300      	movs	r3, #0
 800728a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	689b      	ldr	r3, [r3, #8]
 8007292:	f003 0301 	and.w	r3, r3, #1
 8007296:	2b01      	cmp	r3, #1
 8007298:	d11c      	bne.n	80072d4 <HAL_SPI_TransmitReceive+0x1e6>
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80072a0:	b29b      	uxth	r3, r3
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d016      	beq.n	80072d4 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	68da      	ldr	r2, [r3, #12]
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072b0:	b292      	uxth	r2, r2
 80072b2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072b8:	1c9a      	adds	r2, r3, #2
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80072c4:	b29b      	uxth	r3, r3
 80072c6:	3b01      	subs	r3, #1
 80072c8:	b29a      	uxth	r2, r3
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80072d0:	2301      	movs	r3, #1
 80072d2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80072d4:	f7fc fa48 	bl	8003768 <HAL_GetTick>
 80072d8:	4602      	mov	r2, r0
 80072da:	6a3b      	ldr	r3, [r7, #32]
 80072dc:	1ad3      	subs	r3, r2, r3
 80072de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80072e0:	429a      	cmp	r2, r3
 80072e2:	d80d      	bhi.n	8007300 <HAL_SPI_TransmitReceive+0x212>
 80072e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072e6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80072ea:	d009      	beq.n	8007300 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	2201      	movs	r2, #1
 80072f0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	2200      	movs	r2, #0
 80072f8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80072fc:	2303      	movs	r3, #3
 80072fe:	e111      	b.n	8007524 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007304:	b29b      	uxth	r3, r3
 8007306:	2b00      	cmp	r3, #0
 8007308:	d19d      	bne.n	8007246 <HAL_SPI_TransmitReceive+0x158>
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007310:	b29b      	uxth	r3, r3
 8007312:	2b00      	cmp	r3, #0
 8007314:	d197      	bne.n	8007246 <HAL_SPI_TransmitReceive+0x158>
 8007316:	e0e5      	b.n	80074e4 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d003      	beq.n	8007328 <HAL_SPI_TransmitReceive+0x23a>
 8007320:	8afb      	ldrh	r3, [r7, #22]
 8007322:	2b01      	cmp	r3, #1
 8007324:	f040 80d1 	bne.w	80074ca <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800732c:	b29b      	uxth	r3, r3
 800732e:	2b01      	cmp	r3, #1
 8007330:	d912      	bls.n	8007358 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007336:	881a      	ldrh	r2, [r3, #0]
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007342:	1c9a      	adds	r2, r3, #2
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800734c:	b29b      	uxth	r3, r3
 800734e:	3b02      	subs	r3, #2
 8007350:	b29a      	uxth	r2, r3
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007356:	e0b8      	b.n	80074ca <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	330c      	adds	r3, #12
 8007362:	7812      	ldrb	r2, [r2, #0]
 8007364:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800736a:	1c5a      	adds	r2, r3, #1
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007374:	b29b      	uxth	r3, r3
 8007376:	3b01      	subs	r3, #1
 8007378:	b29a      	uxth	r2, r3
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800737e:	e0a4      	b.n	80074ca <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	689b      	ldr	r3, [r3, #8]
 8007386:	f003 0302 	and.w	r3, r3, #2
 800738a:	2b02      	cmp	r3, #2
 800738c:	d134      	bne.n	80073f8 <HAL_SPI_TransmitReceive+0x30a>
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007392:	b29b      	uxth	r3, r3
 8007394:	2b00      	cmp	r3, #0
 8007396:	d02f      	beq.n	80073f8 <HAL_SPI_TransmitReceive+0x30a>
 8007398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800739a:	2b01      	cmp	r3, #1
 800739c:	d12c      	bne.n	80073f8 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80073a2:	b29b      	uxth	r3, r3
 80073a4:	2b01      	cmp	r3, #1
 80073a6:	d912      	bls.n	80073ce <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073ac:	881a      	ldrh	r2, [r3, #0]
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073b8:	1c9a      	adds	r2, r3, #2
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80073c2:	b29b      	uxth	r3, r3
 80073c4:	3b02      	subs	r3, #2
 80073c6:	b29a      	uxth	r2, r3
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80073cc:	e012      	b.n	80073f4 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	330c      	adds	r3, #12
 80073d8:	7812      	ldrb	r2, [r2, #0]
 80073da:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073e0:	1c5a      	adds	r2, r3, #1
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80073ea:	b29b      	uxth	r3, r3
 80073ec:	3b01      	subs	r3, #1
 80073ee:	b29a      	uxth	r2, r3
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80073f4:	2300      	movs	r3, #0
 80073f6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	689b      	ldr	r3, [r3, #8]
 80073fe:	f003 0301 	and.w	r3, r3, #1
 8007402:	2b01      	cmp	r3, #1
 8007404:	d148      	bne.n	8007498 <HAL_SPI_TransmitReceive+0x3aa>
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800740c:	b29b      	uxth	r3, r3
 800740e:	2b00      	cmp	r3, #0
 8007410:	d042      	beq.n	8007498 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007418:	b29b      	uxth	r3, r3
 800741a:	2b01      	cmp	r3, #1
 800741c:	d923      	bls.n	8007466 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	68da      	ldr	r2, [r3, #12]
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007428:	b292      	uxth	r2, r2
 800742a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007430:	1c9a      	adds	r2, r3, #2
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800743c:	b29b      	uxth	r3, r3
 800743e:	3b02      	subs	r3, #2
 8007440:	b29a      	uxth	r2, r3
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800744e:	b29b      	uxth	r3, r3
 8007450:	2b01      	cmp	r3, #1
 8007452:	d81f      	bhi.n	8007494 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	685a      	ldr	r2, [r3, #4]
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007462:	605a      	str	r2, [r3, #4]
 8007464:	e016      	b.n	8007494 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f103 020c 	add.w	r2, r3, #12
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007472:	7812      	ldrb	r2, [r2, #0]
 8007474:	b2d2      	uxtb	r2, r2
 8007476:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800747c:	1c5a      	adds	r2, r3, #1
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007488:	b29b      	uxth	r3, r3
 800748a:	3b01      	subs	r3, #1
 800748c:	b29a      	uxth	r2, r3
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007494:	2301      	movs	r3, #1
 8007496:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007498:	f7fc f966 	bl	8003768 <HAL_GetTick>
 800749c:	4602      	mov	r2, r0
 800749e:	6a3b      	ldr	r3, [r7, #32]
 80074a0:	1ad3      	subs	r3, r2, r3
 80074a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80074a4:	429a      	cmp	r2, r3
 80074a6:	d803      	bhi.n	80074b0 <HAL_SPI_TransmitReceive+0x3c2>
 80074a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074aa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80074ae:	d102      	bne.n	80074b6 <HAL_SPI_TransmitReceive+0x3c8>
 80074b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d109      	bne.n	80074ca <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	2201      	movs	r2, #1
 80074ba:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	2200      	movs	r2, #0
 80074c2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80074c6:	2303      	movs	r3, #3
 80074c8:	e02c      	b.n	8007524 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80074ce:	b29b      	uxth	r3, r3
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	f47f af55 	bne.w	8007380 <HAL_SPI_TransmitReceive+0x292>
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80074dc:	b29b      	uxth	r3, r3
 80074de:	2b00      	cmp	r3, #0
 80074e0:	f47f af4e 	bne.w	8007380 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80074e4:	6a3a      	ldr	r2, [r7, #32]
 80074e6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80074e8:	68f8      	ldr	r0, [r7, #12]
 80074ea:	f000 f93d 	bl	8007768 <SPI_EndRxTxTransaction>
 80074ee:	4603      	mov	r3, r0
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d008      	beq.n	8007506 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	2220      	movs	r2, #32
 80074f8:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	2200      	movs	r2, #0
 80074fe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8007502:	2301      	movs	r3, #1
 8007504:	e00e      	b.n	8007524 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	2201      	movs	r2, #1
 800750a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	2200      	movs	r2, #0
 8007512:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800751a:	2b00      	cmp	r3, #0
 800751c:	d001      	beq.n	8007522 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 800751e:	2301      	movs	r3, #1
 8007520:	e000      	b.n	8007524 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8007522:	2300      	movs	r3, #0
  }
}
 8007524:	4618      	mov	r0, r3
 8007526:	3728      	adds	r7, #40	@ 0x28
 8007528:	46bd      	mov	sp, r7
 800752a:	bd80      	pop	{r7, pc}

0800752c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b088      	sub	sp, #32
 8007530:	af00      	add	r7, sp, #0
 8007532:	60f8      	str	r0, [r7, #12]
 8007534:	60b9      	str	r1, [r7, #8]
 8007536:	603b      	str	r3, [r7, #0]
 8007538:	4613      	mov	r3, r2
 800753a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800753c:	f7fc f914 	bl	8003768 <HAL_GetTick>
 8007540:	4602      	mov	r2, r0
 8007542:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007544:	1a9b      	subs	r3, r3, r2
 8007546:	683a      	ldr	r2, [r7, #0]
 8007548:	4413      	add	r3, r2
 800754a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800754c:	f7fc f90c 	bl	8003768 <HAL_GetTick>
 8007550:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007552:	4b39      	ldr	r3, [pc, #228]	@ (8007638 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	015b      	lsls	r3, r3, #5
 8007558:	0d1b      	lsrs	r3, r3, #20
 800755a:	69fa      	ldr	r2, [r7, #28]
 800755c:	fb02 f303 	mul.w	r3, r2, r3
 8007560:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007562:	e054      	b.n	800760e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800756a:	d050      	beq.n	800760e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800756c:	f7fc f8fc 	bl	8003768 <HAL_GetTick>
 8007570:	4602      	mov	r2, r0
 8007572:	69bb      	ldr	r3, [r7, #24]
 8007574:	1ad3      	subs	r3, r2, r3
 8007576:	69fa      	ldr	r2, [r7, #28]
 8007578:	429a      	cmp	r2, r3
 800757a:	d902      	bls.n	8007582 <SPI_WaitFlagStateUntilTimeout+0x56>
 800757c:	69fb      	ldr	r3, [r7, #28]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d13d      	bne.n	80075fe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	685a      	ldr	r2, [r3, #4]
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007590:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	685b      	ldr	r3, [r3, #4]
 8007596:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800759a:	d111      	bne.n	80075c0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	689b      	ldr	r3, [r3, #8]
 80075a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80075a4:	d004      	beq.n	80075b0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	689b      	ldr	r3, [r3, #8]
 80075aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80075ae:	d107      	bne.n	80075c0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	681a      	ldr	r2, [r3, #0]
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80075be:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80075c8:	d10f      	bne.n	80075ea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	681a      	ldr	r2, [r3, #0]
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80075d8:	601a      	str	r2, [r3, #0]
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	681a      	ldr	r2, [r3, #0]
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80075e8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	2201      	movs	r2, #1
 80075ee:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	2200      	movs	r2, #0
 80075f6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80075fa:	2303      	movs	r3, #3
 80075fc:	e017      	b.n	800762e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80075fe:	697b      	ldr	r3, [r7, #20]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d101      	bne.n	8007608 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007604:	2300      	movs	r3, #0
 8007606:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	3b01      	subs	r3, #1
 800760c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	689a      	ldr	r2, [r3, #8]
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	4013      	ands	r3, r2
 8007618:	68ba      	ldr	r2, [r7, #8]
 800761a:	429a      	cmp	r2, r3
 800761c:	bf0c      	ite	eq
 800761e:	2301      	moveq	r3, #1
 8007620:	2300      	movne	r3, #0
 8007622:	b2db      	uxtb	r3, r3
 8007624:	461a      	mov	r2, r3
 8007626:	79fb      	ldrb	r3, [r7, #7]
 8007628:	429a      	cmp	r2, r3
 800762a:	d19b      	bne.n	8007564 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800762c:	2300      	movs	r3, #0
}
 800762e:	4618      	mov	r0, r3
 8007630:	3720      	adds	r7, #32
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}
 8007636:	bf00      	nop
 8007638:	20000020 	.word	0x20000020

0800763c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b08a      	sub	sp, #40	@ 0x28
 8007640:	af00      	add	r7, sp, #0
 8007642:	60f8      	str	r0, [r7, #12]
 8007644:	60b9      	str	r1, [r7, #8]
 8007646:	607a      	str	r2, [r7, #4]
 8007648:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800764a:	2300      	movs	r3, #0
 800764c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800764e:	f7fc f88b 	bl	8003768 <HAL_GetTick>
 8007652:	4602      	mov	r2, r0
 8007654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007656:	1a9b      	subs	r3, r3, r2
 8007658:	683a      	ldr	r2, [r7, #0]
 800765a:	4413      	add	r3, r2
 800765c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800765e:	f7fc f883 	bl	8003768 <HAL_GetTick>
 8007662:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	330c      	adds	r3, #12
 800766a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800766c:	4b3d      	ldr	r3, [pc, #244]	@ (8007764 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800766e:	681a      	ldr	r2, [r3, #0]
 8007670:	4613      	mov	r3, r2
 8007672:	009b      	lsls	r3, r3, #2
 8007674:	4413      	add	r3, r2
 8007676:	00da      	lsls	r2, r3, #3
 8007678:	1ad3      	subs	r3, r2, r3
 800767a:	0d1b      	lsrs	r3, r3, #20
 800767c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800767e:	fb02 f303 	mul.w	r3, r2, r3
 8007682:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007684:	e060      	b.n	8007748 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800768c:	d107      	bne.n	800769e <SPI_WaitFifoStateUntilTimeout+0x62>
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d104      	bne.n	800769e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007694:	69fb      	ldr	r3, [r7, #28]
 8007696:	781b      	ldrb	r3, [r3, #0]
 8007698:	b2db      	uxtb	r3, r3
 800769a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800769c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80076a4:	d050      	beq.n	8007748 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80076a6:	f7fc f85f 	bl	8003768 <HAL_GetTick>
 80076aa:	4602      	mov	r2, r0
 80076ac:	6a3b      	ldr	r3, [r7, #32]
 80076ae:	1ad3      	subs	r3, r2, r3
 80076b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80076b2:	429a      	cmp	r2, r3
 80076b4:	d902      	bls.n	80076bc <SPI_WaitFifoStateUntilTimeout+0x80>
 80076b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d13d      	bne.n	8007738 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	685a      	ldr	r2, [r3, #4]
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80076ca:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	685b      	ldr	r3, [r3, #4]
 80076d0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80076d4:	d111      	bne.n	80076fa <SPI_WaitFifoStateUntilTimeout+0xbe>
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	689b      	ldr	r3, [r3, #8]
 80076da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80076de:	d004      	beq.n	80076ea <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	689b      	ldr	r3, [r3, #8]
 80076e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80076e8:	d107      	bne.n	80076fa <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	681a      	ldr	r2, [r3, #0]
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80076f8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007702:	d10f      	bne.n	8007724 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	681a      	ldr	r2, [r3, #0]
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007712:	601a      	str	r2, [r3, #0]
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	681a      	ldr	r2, [r3, #0]
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007722:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	2201      	movs	r2, #1
 8007728:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	2200      	movs	r2, #0
 8007730:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007734:	2303      	movs	r3, #3
 8007736:	e010      	b.n	800775a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007738:	69bb      	ldr	r3, [r7, #24]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d101      	bne.n	8007742 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800773e:	2300      	movs	r3, #0
 8007740:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8007742:	69bb      	ldr	r3, [r7, #24]
 8007744:	3b01      	subs	r3, #1
 8007746:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	689a      	ldr	r2, [r3, #8]
 800774e:	68bb      	ldr	r3, [r7, #8]
 8007750:	4013      	ands	r3, r2
 8007752:	687a      	ldr	r2, [r7, #4]
 8007754:	429a      	cmp	r2, r3
 8007756:	d196      	bne.n	8007686 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007758:	2300      	movs	r3, #0
}
 800775a:	4618      	mov	r0, r3
 800775c:	3728      	adds	r7, #40	@ 0x28
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}
 8007762:	bf00      	nop
 8007764:	20000020 	.word	0x20000020

08007768 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b086      	sub	sp, #24
 800776c:	af02      	add	r7, sp, #8
 800776e:	60f8      	str	r0, [r7, #12]
 8007770:	60b9      	str	r1, [r7, #8]
 8007772:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	9300      	str	r3, [sp, #0]
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	2200      	movs	r2, #0
 800777c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8007780:	68f8      	ldr	r0, [r7, #12]
 8007782:	f7ff ff5b 	bl	800763c <SPI_WaitFifoStateUntilTimeout>
 8007786:	4603      	mov	r3, r0
 8007788:	2b00      	cmp	r3, #0
 800778a:	d007      	beq.n	800779c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007790:	f043 0220 	orr.w	r2, r3, #32
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007798:	2303      	movs	r3, #3
 800779a:	e027      	b.n	80077ec <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	9300      	str	r3, [sp, #0]
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	2200      	movs	r2, #0
 80077a4:	2180      	movs	r1, #128	@ 0x80
 80077a6:	68f8      	ldr	r0, [r7, #12]
 80077a8:	f7ff fec0 	bl	800752c <SPI_WaitFlagStateUntilTimeout>
 80077ac:	4603      	mov	r3, r0
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d007      	beq.n	80077c2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80077b6:	f043 0220 	orr.w	r2, r3, #32
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80077be:	2303      	movs	r3, #3
 80077c0:	e014      	b.n	80077ec <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	9300      	str	r3, [sp, #0]
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	2200      	movs	r2, #0
 80077ca:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80077ce:	68f8      	ldr	r0, [r7, #12]
 80077d0:	f7ff ff34 	bl	800763c <SPI_WaitFifoStateUntilTimeout>
 80077d4:	4603      	mov	r3, r0
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d007      	beq.n	80077ea <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80077de:	f043 0220 	orr.w	r2, r3, #32
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80077e6:	2303      	movs	r3, #3
 80077e8:	e000      	b.n	80077ec <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80077ea:	2300      	movs	r3, #0
}
 80077ec:	4618      	mov	r0, r3
 80077ee:	3710      	adds	r7, #16
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bd80      	pop	{r7, pc}

080077f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b082      	sub	sp, #8
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d101      	bne.n	8007806 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007802:	2301      	movs	r3, #1
 8007804:	e049      	b.n	800789a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800780c:	b2db      	uxtb	r3, r3
 800780e:	2b00      	cmp	r3, #0
 8007810:	d106      	bne.n	8007820 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2200      	movs	r2, #0
 8007816:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f000 f841 	bl	80078a2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2202      	movs	r2, #2
 8007824:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681a      	ldr	r2, [r3, #0]
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	3304      	adds	r3, #4
 8007830:	4619      	mov	r1, r3
 8007832:	4610      	mov	r0, r2
 8007834:	f000 fa28 	bl	8007c88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2201      	movs	r2, #1
 800783c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2201      	movs	r2, #1
 8007844:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2201      	movs	r2, #1
 800784c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2201      	movs	r2, #1
 8007854:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2201      	movs	r2, #1
 800785c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2201      	movs	r2, #1
 8007864:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2201      	movs	r2, #1
 800786c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2201      	movs	r2, #1
 8007874:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2201      	movs	r2, #1
 800787c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2201      	movs	r2, #1
 8007884:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2201      	movs	r2, #1
 800788c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2201      	movs	r2, #1
 8007894:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007898:	2300      	movs	r3, #0
}
 800789a:	4618      	mov	r0, r3
 800789c:	3708      	adds	r7, #8
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}

080078a2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80078a2:	b480      	push	{r7}
 80078a4:	b083      	sub	sp, #12
 80078a6:	af00      	add	r7, sp, #0
 80078a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80078aa:	bf00      	nop
 80078ac:	370c      	adds	r7, #12
 80078ae:	46bd      	mov	sp, r7
 80078b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b4:	4770      	bx	lr
	...

080078b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80078b8:	b480      	push	{r7}
 80078ba:	b085      	sub	sp, #20
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80078c6:	b2db      	uxtb	r3, r3
 80078c8:	2b01      	cmp	r3, #1
 80078ca:	d001      	beq.n	80078d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80078cc:	2301      	movs	r3, #1
 80078ce:	e04f      	b.n	8007970 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2202      	movs	r2, #2
 80078d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	68da      	ldr	r2, [r3, #12]
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f042 0201 	orr.w	r2, r2, #1
 80078e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	4a23      	ldr	r2, [pc, #140]	@ (800797c <HAL_TIM_Base_Start_IT+0xc4>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d01d      	beq.n	800792e <HAL_TIM_Base_Start_IT+0x76>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80078fa:	d018      	beq.n	800792e <HAL_TIM_Base_Start_IT+0x76>
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4a1f      	ldr	r2, [pc, #124]	@ (8007980 <HAL_TIM_Base_Start_IT+0xc8>)
 8007902:	4293      	cmp	r3, r2
 8007904:	d013      	beq.n	800792e <HAL_TIM_Base_Start_IT+0x76>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	4a1e      	ldr	r2, [pc, #120]	@ (8007984 <HAL_TIM_Base_Start_IT+0xcc>)
 800790c:	4293      	cmp	r3, r2
 800790e:	d00e      	beq.n	800792e <HAL_TIM_Base_Start_IT+0x76>
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	4a1c      	ldr	r2, [pc, #112]	@ (8007988 <HAL_TIM_Base_Start_IT+0xd0>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d009      	beq.n	800792e <HAL_TIM_Base_Start_IT+0x76>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	4a1b      	ldr	r2, [pc, #108]	@ (800798c <HAL_TIM_Base_Start_IT+0xd4>)
 8007920:	4293      	cmp	r3, r2
 8007922:	d004      	beq.n	800792e <HAL_TIM_Base_Start_IT+0x76>
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	4a19      	ldr	r2, [pc, #100]	@ (8007990 <HAL_TIM_Base_Start_IT+0xd8>)
 800792a:	4293      	cmp	r3, r2
 800792c:	d115      	bne.n	800795a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	689a      	ldr	r2, [r3, #8]
 8007934:	4b17      	ldr	r3, [pc, #92]	@ (8007994 <HAL_TIM_Base_Start_IT+0xdc>)
 8007936:	4013      	ands	r3, r2
 8007938:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	2b06      	cmp	r3, #6
 800793e:	d015      	beq.n	800796c <HAL_TIM_Base_Start_IT+0xb4>
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007946:	d011      	beq.n	800796c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	681a      	ldr	r2, [r3, #0]
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f042 0201 	orr.w	r2, r2, #1
 8007956:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007958:	e008      	b.n	800796c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	681a      	ldr	r2, [r3, #0]
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f042 0201 	orr.w	r2, r2, #1
 8007968:	601a      	str	r2, [r3, #0]
 800796a:	e000      	b.n	800796e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800796c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800796e:	2300      	movs	r3, #0
}
 8007970:	4618      	mov	r0, r3
 8007972:	3714      	adds	r7, #20
 8007974:	46bd      	mov	sp, r7
 8007976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797a:	4770      	bx	lr
 800797c:	40012c00 	.word	0x40012c00
 8007980:	40000400 	.word	0x40000400
 8007984:	40000800 	.word	0x40000800
 8007988:	40013400 	.word	0x40013400
 800798c:	40014000 	.word	0x40014000
 8007990:	40015000 	.word	0x40015000
 8007994:	00010007 	.word	0x00010007

08007998 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b084      	sub	sp, #16
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	68db      	ldr	r3, [r3, #12]
 80079a6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	691b      	ldr	r3, [r3, #16]
 80079ae:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	f003 0302 	and.w	r3, r3, #2
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d020      	beq.n	80079fc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	f003 0302 	and.w	r3, r3, #2
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d01b      	beq.n	80079fc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f06f 0202 	mvn.w	r2, #2
 80079cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2201      	movs	r2, #1
 80079d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	699b      	ldr	r3, [r3, #24]
 80079da:	f003 0303 	and.w	r3, r3, #3
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d003      	beq.n	80079ea <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	f000 f931 	bl	8007c4a <HAL_TIM_IC_CaptureCallback>
 80079e8:	e005      	b.n	80079f6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f000 f923 	bl	8007c36 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	f000 f934 	bl	8007c5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2200      	movs	r2, #0
 80079fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	f003 0304 	and.w	r3, r3, #4
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d020      	beq.n	8007a48 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	f003 0304 	and.w	r3, r3, #4
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d01b      	beq.n	8007a48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f06f 0204 	mvn.w	r2, #4
 8007a18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2202      	movs	r2, #2
 8007a1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	699b      	ldr	r3, [r3, #24]
 8007a26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d003      	beq.n	8007a36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f000 f90b 	bl	8007c4a <HAL_TIM_IC_CaptureCallback>
 8007a34:	e005      	b.n	8007a42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f000 f8fd 	bl	8007c36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f000 f90e 	bl	8007c5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2200      	movs	r2, #0
 8007a46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	f003 0308 	and.w	r3, r3, #8
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d020      	beq.n	8007a94 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	f003 0308 	and.w	r3, r3, #8
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d01b      	beq.n	8007a94 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f06f 0208 	mvn.w	r2, #8
 8007a64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2204      	movs	r2, #4
 8007a6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	69db      	ldr	r3, [r3, #28]
 8007a72:	f003 0303 	and.w	r3, r3, #3
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d003      	beq.n	8007a82 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f000 f8e5 	bl	8007c4a <HAL_TIM_IC_CaptureCallback>
 8007a80:	e005      	b.n	8007a8e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	f000 f8d7 	bl	8007c36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f000 f8e8 	bl	8007c5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2200      	movs	r2, #0
 8007a92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	f003 0310 	and.w	r3, r3, #16
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d020      	beq.n	8007ae0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	f003 0310 	and.w	r3, r3, #16
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d01b      	beq.n	8007ae0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f06f 0210 	mvn.w	r2, #16
 8007ab0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2208      	movs	r2, #8
 8007ab6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	69db      	ldr	r3, [r3, #28]
 8007abe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d003      	beq.n	8007ace <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f000 f8bf 	bl	8007c4a <HAL_TIM_IC_CaptureCallback>
 8007acc:	e005      	b.n	8007ada <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f000 f8b1 	bl	8007c36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f000 f8c2 	bl	8007c5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2200      	movs	r2, #0
 8007ade:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	f003 0301 	and.w	r3, r3, #1
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d00c      	beq.n	8007b04 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	f003 0301 	and.w	r3, r3, #1
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d007      	beq.n	8007b04 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f06f 0201 	mvn.w	r2, #1
 8007afc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f7fb faba 	bl	8003078 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d104      	bne.n	8007b18 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007b0e:	68bb      	ldr	r3, [r7, #8]
 8007b10:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d00c      	beq.n	8007b32 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d007      	beq.n	8007b32 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007b2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f000 f95f 	bl	8007df0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d00c      	beq.n	8007b56 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d007      	beq.n	8007b56 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007b4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f000 f957 	bl	8007e04 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d00c      	beq.n	8007b7a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d007      	beq.n	8007b7a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007b72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f000 f87c 	bl	8007c72 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	f003 0320 	and.w	r3, r3, #32
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d00c      	beq.n	8007b9e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	f003 0320 	and.w	r3, r3, #32
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d007      	beq.n	8007b9e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f06f 0220 	mvn.w	r2, #32
 8007b96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007b98:	6878      	ldr	r0, [r7, #4]
 8007b9a:	f000 f91f 	bl	8007ddc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d00c      	beq.n	8007bc2 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d007      	beq.n	8007bc2 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8007bba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f000 f92b 	bl	8007e18 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8007bc2:	68bb      	ldr	r3, [r7, #8]
 8007bc4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d00c      	beq.n	8007be6 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d007      	beq.n	8007be6 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8007bde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	f000 f923 	bl	8007e2c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8007be6:	68bb      	ldr	r3, [r7, #8]
 8007be8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d00c      	beq.n	8007c0a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d007      	beq.n	8007c0a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8007c02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	f000 f91b 	bl	8007e40 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8007c0a:	68bb      	ldr	r3, [r7, #8]
 8007c0c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d00c      	beq.n	8007c2e <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d007      	beq.n	8007c2e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8007c26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	f000 f913 	bl	8007e54 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007c2e:	bf00      	nop
 8007c30:	3710      	adds	r7, #16
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bd80      	pop	{r7, pc}

08007c36 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007c36:	b480      	push	{r7}
 8007c38:	b083      	sub	sp, #12
 8007c3a:	af00      	add	r7, sp, #0
 8007c3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007c3e:	bf00      	nop
 8007c40:	370c      	adds	r7, #12
 8007c42:	46bd      	mov	sp, r7
 8007c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c48:	4770      	bx	lr

08007c4a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007c4a:	b480      	push	{r7}
 8007c4c:	b083      	sub	sp, #12
 8007c4e:	af00      	add	r7, sp, #0
 8007c50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007c52:	bf00      	nop
 8007c54:	370c      	adds	r7, #12
 8007c56:	46bd      	mov	sp, r7
 8007c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5c:	4770      	bx	lr

08007c5e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007c5e:	b480      	push	{r7}
 8007c60:	b083      	sub	sp, #12
 8007c62:	af00      	add	r7, sp, #0
 8007c64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007c66:	bf00      	nop
 8007c68:	370c      	adds	r7, #12
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c70:	4770      	bx	lr

08007c72 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007c72:	b480      	push	{r7}
 8007c74:	b083      	sub	sp, #12
 8007c76:	af00      	add	r7, sp, #0
 8007c78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007c7a:	bf00      	nop
 8007c7c:	370c      	adds	r7, #12
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c84:	4770      	bx	lr
	...

08007c88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007c88:	b480      	push	{r7}
 8007c8a:	b085      	sub	sp, #20
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
 8007c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	4a48      	ldr	r2, [pc, #288]	@ (8007dbc <TIM_Base_SetConfig+0x134>)
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d013      	beq.n	8007cc8 <TIM_Base_SetConfig+0x40>
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ca6:	d00f      	beq.n	8007cc8 <TIM_Base_SetConfig+0x40>
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	4a45      	ldr	r2, [pc, #276]	@ (8007dc0 <TIM_Base_SetConfig+0x138>)
 8007cac:	4293      	cmp	r3, r2
 8007cae:	d00b      	beq.n	8007cc8 <TIM_Base_SetConfig+0x40>
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	4a44      	ldr	r2, [pc, #272]	@ (8007dc4 <TIM_Base_SetConfig+0x13c>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d007      	beq.n	8007cc8 <TIM_Base_SetConfig+0x40>
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	4a43      	ldr	r2, [pc, #268]	@ (8007dc8 <TIM_Base_SetConfig+0x140>)
 8007cbc:	4293      	cmp	r3, r2
 8007cbe:	d003      	beq.n	8007cc8 <TIM_Base_SetConfig+0x40>
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	4a42      	ldr	r2, [pc, #264]	@ (8007dcc <TIM_Base_SetConfig+0x144>)
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	d108      	bne.n	8007cda <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007cce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	685b      	ldr	r3, [r3, #4]
 8007cd4:	68fa      	ldr	r2, [r7, #12]
 8007cd6:	4313      	orrs	r3, r2
 8007cd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	4a37      	ldr	r2, [pc, #220]	@ (8007dbc <TIM_Base_SetConfig+0x134>)
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d01f      	beq.n	8007d22 <TIM_Base_SetConfig+0x9a>
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ce8:	d01b      	beq.n	8007d22 <TIM_Base_SetConfig+0x9a>
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	4a34      	ldr	r2, [pc, #208]	@ (8007dc0 <TIM_Base_SetConfig+0x138>)
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d017      	beq.n	8007d22 <TIM_Base_SetConfig+0x9a>
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	4a33      	ldr	r2, [pc, #204]	@ (8007dc4 <TIM_Base_SetConfig+0x13c>)
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d013      	beq.n	8007d22 <TIM_Base_SetConfig+0x9a>
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	4a32      	ldr	r2, [pc, #200]	@ (8007dc8 <TIM_Base_SetConfig+0x140>)
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	d00f      	beq.n	8007d22 <TIM_Base_SetConfig+0x9a>
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	4a32      	ldr	r2, [pc, #200]	@ (8007dd0 <TIM_Base_SetConfig+0x148>)
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d00b      	beq.n	8007d22 <TIM_Base_SetConfig+0x9a>
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	4a31      	ldr	r2, [pc, #196]	@ (8007dd4 <TIM_Base_SetConfig+0x14c>)
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	d007      	beq.n	8007d22 <TIM_Base_SetConfig+0x9a>
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	4a30      	ldr	r2, [pc, #192]	@ (8007dd8 <TIM_Base_SetConfig+0x150>)
 8007d16:	4293      	cmp	r3, r2
 8007d18:	d003      	beq.n	8007d22 <TIM_Base_SetConfig+0x9a>
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	4a2b      	ldr	r2, [pc, #172]	@ (8007dcc <TIM_Base_SetConfig+0x144>)
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d108      	bne.n	8007d34 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007d28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	68db      	ldr	r3, [r3, #12]
 8007d2e:	68fa      	ldr	r2, [r7, #12]
 8007d30:	4313      	orrs	r3, r2
 8007d32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	695b      	ldr	r3, [r3, #20]
 8007d3e:	4313      	orrs	r3, r2
 8007d40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	68fa      	ldr	r2, [r7, #12]
 8007d46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	689a      	ldr	r2, [r3, #8]
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	681a      	ldr	r2, [r3, #0]
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	4a18      	ldr	r2, [pc, #96]	@ (8007dbc <TIM_Base_SetConfig+0x134>)
 8007d5c:	4293      	cmp	r3, r2
 8007d5e:	d013      	beq.n	8007d88 <TIM_Base_SetConfig+0x100>
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	4a19      	ldr	r2, [pc, #100]	@ (8007dc8 <TIM_Base_SetConfig+0x140>)
 8007d64:	4293      	cmp	r3, r2
 8007d66:	d00f      	beq.n	8007d88 <TIM_Base_SetConfig+0x100>
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	4a19      	ldr	r2, [pc, #100]	@ (8007dd0 <TIM_Base_SetConfig+0x148>)
 8007d6c:	4293      	cmp	r3, r2
 8007d6e:	d00b      	beq.n	8007d88 <TIM_Base_SetConfig+0x100>
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	4a18      	ldr	r2, [pc, #96]	@ (8007dd4 <TIM_Base_SetConfig+0x14c>)
 8007d74:	4293      	cmp	r3, r2
 8007d76:	d007      	beq.n	8007d88 <TIM_Base_SetConfig+0x100>
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	4a17      	ldr	r2, [pc, #92]	@ (8007dd8 <TIM_Base_SetConfig+0x150>)
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d003      	beq.n	8007d88 <TIM_Base_SetConfig+0x100>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	4a12      	ldr	r2, [pc, #72]	@ (8007dcc <TIM_Base_SetConfig+0x144>)
 8007d84:	4293      	cmp	r3, r2
 8007d86:	d103      	bne.n	8007d90 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	691a      	ldr	r2, [r3, #16]
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2201      	movs	r2, #1
 8007d94:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	691b      	ldr	r3, [r3, #16]
 8007d9a:	f003 0301 	and.w	r3, r3, #1
 8007d9e:	2b01      	cmp	r3, #1
 8007da0:	d105      	bne.n	8007dae <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	691b      	ldr	r3, [r3, #16]
 8007da6:	f023 0201 	bic.w	r2, r3, #1
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	611a      	str	r2, [r3, #16]
  }
}
 8007dae:	bf00      	nop
 8007db0:	3714      	adds	r7, #20
 8007db2:	46bd      	mov	sp, r7
 8007db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db8:	4770      	bx	lr
 8007dba:	bf00      	nop
 8007dbc:	40012c00 	.word	0x40012c00
 8007dc0:	40000400 	.word	0x40000400
 8007dc4:	40000800 	.word	0x40000800
 8007dc8:	40013400 	.word	0x40013400
 8007dcc:	40015000 	.word	0x40015000
 8007dd0:	40014000 	.word	0x40014000
 8007dd4:	40014400 	.word	0x40014400
 8007dd8:	40014800 	.word	0x40014800

08007ddc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007ddc:	b480      	push	{r7}
 8007dde:	b083      	sub	sp, #12
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007de4:	bf00      	nop
 8007de6:	370c      	adds	r7, #12
 8007de8:	46bd      	mov	sp, r7
 8007dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dee:	4770      	bx	lr

08007df0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007df0:	b480      	push	{r7}
 8007df2:	b083      	sub	sp, #12
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007df8:	bf00      	nop
 8007dfa:	370c      	adds	r7, #12
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e02:	4770      	bx	lr

08007e04 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007e04:	b480      	push	{r7}
 8007e06:	b083      	sub	sp, #12
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007e0c:	bf00      	nop
 8007e0e:	370c      	adds	r7, #12
 8007e10:	46bd      	mov	sp, r7
 8007e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e16:	4770      	bx	lr

08007e18 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007e18:	b480      	push	{r7}
 8007e1a:	b083      	sub	sp, #12
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007e20:	bf00      	nop
 8007e22:	370c      	adds	r7, #12
 8007e24:	46bd      	mov	sp, r7
 8007e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2a:	4770      	bx	lr

08007e2c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007e2c:	b480      	push	{r7}
 8007e2e:	b083      	sub	sp, #12
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007e34:	bf00      	nop
 8007e36:	370c      	adds	r7, #12
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3e:	4770      	bx	lr

08007e40 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007e40:	b480      	push	{r7}
 8007e42:	b083      	sub	sp, #12
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007e48:	bf00      	nop
 8007e4a:	370c      	adds	r7, #12
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e52:	4770      	bx	lr

08007e54 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007e54:	b480      	push	{r7}
 8007e56:	b083      	sub	sp, #12
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007e5c:	bf00      	nop
 8007e5e:	370c      	adds	r7, #12
 8007e60:	46bd      	mov	sp, r7
 8007e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e66:	4770      	bx	lr

08007e68 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8007e68:	b480      	push	{r7}
 8007e6a:	b085      	sub	sp, #20
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2200      	movs	r2, #0
 8007e74:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007e78:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8007e7c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	b29a      	uxth	r2, r3
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007e88:	2300      	movs	r3, #0
}
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	3714      	adds	r7, #20
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e94:	4770      	bx	lr

08007e96 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007e96:	b480      	push	{r7}
 8007e98:	b085      	sub	sp, #20
 8007e9a:	af00      	add	r7, sp, #0
 8007e9c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007e9e:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8007ea2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8007eaa:	b29a      	uxth	r2, r3
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	b29b      	uxth	r3, r3
 8007eb0:	43db      	mvns	r3, r3
 8007eb2:	b29b      	uxth	r3, r3
 8007eb4:	4013      	ands	r3, r2
 8007eb6:	b29a      	uxth	r2, r3
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007ebe:	2300      	movs	r3, #0
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	3714      	adds	r7, #20
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eca:	4770      	bx	lr

08007ecc <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007ecc:	b480      	push	{r7}
 8007ece:	b085      	sub	sp, #20
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	60f8      	str	r0, [r7, #12]
 8007ed4:	1d3b      	adds	r3, r7, #4
 8007ed6:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	2201      	movs	r2, #1
 8007ede:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	2200      	movs	r2, #0
 8007eee:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8007efa:	2300      	movs	r3, #0
}
 8007efc:	4618      	mov	r0, r3
 8007efe:	3714      	adds	r7, #20
 8007f00:	46bd      	mov	sp, r7
 8007f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f06:	4770      	bx	lr

08007f08 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007f08:	b480      	push	{r7}
 8007f0a:	b0a7      	sub	sp, #156	@ 0x9c
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
 8007f10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8007f12:	2300      	movs	r3, #0
 8007f14:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007f18:	687a      	ldr	r2, [r7, #4]
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	781b      	ldrb	r3, [r3, #0]
 8007f1e:	009b      	lsls	r3, r3, #2
 8007f20:	4413      	add	r3, r2
 8007f22:	881b      	ldrh	r3, [r3, #0]
 8007f24:	b29b      	uxth	r3, r3
 8007f26:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8007f2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f2e:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	78db      	ldrb	r3, [r3, #3]
 8007f36:	2b03      	cmp	r3, #3
 8007f38:	d81f      	bhi.n	8007f7a <USB_ActivateEndpoint+0x72>
 8007f3a:	a201      	add	r2, pc, #4	@ (adr r2, 8007f40 <USB_ActivateEndpoint+0x38>)
 8007f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f40:	08007f51 	.word	0x08007f51
 8007f44:	08007f6d 	.word	0x08007f6d
 8007f48:	08007f83 	.word	0x08007f83
 8007f4c:	08007f5f 	.word	0x08007f5f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8007f50:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8007f54:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007f58:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8007f5c:	e012      	b.n	8007f84 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8007f5e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8007f62:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8007f66:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8007f6a:	e00b      	b.n	8007f84 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8007f6c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8007f70:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007f74:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8007f78:	e004      	b.n	8007f84 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 8007f80:	e000      	b.n	8007f84 <USB_ActivateEndpoint+0x7c>
      break;
 8007f82:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8007f84:	687a      	ldr	r2, [r7, #4]
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	781b      	ldrb	r3, [r3, #0]
 8007f8a:	009b      	lsls	r3, r3, #2
 8007f8c:	441a      	add	r2, r3
 8007f8e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8007f92:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f96:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007f9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007fa2:	b29b      	uxth	r3, r3
 8007fa4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8007fa6:	687a      	ldr	r2, [r7, #4]
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	781b      	ldrb	r3, [r3, #0]
 8007fac:	009b      	lsls	r3, r3, #2
 8007fae:	4413      	add	r3, r2
 8007fb0:	881b      	ldrh	r3, [r3, #0]
 8007fb2:	b29b      	uxth	r3, r3
 8007fb4:	b21b      	sxth	r3, r3
 8007fb6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007fba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007fbe:	b21a      	sxth	r2, r3
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	781b      	ldrb	r3, [r3, #0]
 8007fc4:	b21b      	sxth	r3, r3
 8007fc6:	4313      	orrs	r3, r2
 8007fc8:	b21b      	sxth	r3, r3
 8007fca:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 8007fce:	687a      	ldr	r2, [r7, #4]
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	781b      	ldrb	r3, [r3, #0]
 8007fd4:	009b      	lsls	r3, r3, #2
 8007fd6:	441a      	add	r2, r3
 8007fd8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8007fdc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007fe0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007fe4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007fe8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007fec:	b29b      	uxth	r3, r3
 8007fee:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	7b1b      	ldrb	r3, [r3, #12]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	f040 8180 	bne.w	80082fa <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	785b      	ldrb	r3, [r3, #1]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	f000 8084 	beq.w	800810c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	61bb      	str	r3, [r7, #24]
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800800e:	b29b      	uxth	r3, r3
 8008010:	461a      	mov	r2, r3
 8008012:	69bb      	ldr	r3, [r7, #24]
 8008014:	4413      	add	r3, r2
 8008016:	61bb      	str	r3, [r7, #24]
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	781b      	ldrb	r3, [r3, #0]
 800801c:	00da      	lsls	r2, r3, #3
 800801e:	69bb      	ldr	r3, [r7, #24]
 8008020:	4413      	add	r3, r2
 8008022:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008026:	617b      	str	r3, [r7, #20]
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	88db      	ldrh	r3, [r3, #6]
 800802c:	085b      	lsrs	r3, r3, #1
 800802e:	b29b      	uxth	r3, r3
 8008030:	005b      	lsls	r3, r3, #1
 8008032:	b29a      	uxth	r2, r3
 8008034:	697b      	ldr	r3, [r7, #20]
 8008036:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008038:	687a      	ldr	r2, [r7, #4]
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	781b      	ldrb	r3, [r3, #0]
 800803e:	009b      	lsls	r3, r3, #2
 8008040:	4413      	add	r3, r2
 8008042:	881b      	ldrh	r3, [r3, #0]
 8008044:	827b      	strh	r3, [r7, #18]
 8008046:	8a7b      	ldrh	r3, [r7, #18]
 8008048:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800804c:	2b00      	cmp	r3, #0
 800804e:	d01b      	beq.n	8008088 <USB_ActivateEndpoint+0x180>
 8008050:	687a      	ldr	r2, [r7, #4]
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	781b      	ldrb	r3, [r3, #0]
 8008056:	009b      	lsls	r3, r3, #2
 8008058:	4413      	add	r3, r2
 800805a:	881b      	ldrh	r3, [r3, #0]
 800805c:	b29b      	uxth	r3, r3
 800805e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008062:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008066:	823b      	strh	r3, [r7, #16]
 8008068:	687a      	ldr	r2, [r7, #4]
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	781b      	ldrb	r3, [r3, #0]
 800806e:	009b      	lsls	r3, r3, #2
 8008070:	441a      	add	r2, r3
 8008072:	8a3b      	ldrh	r3, [r7, #16]
 8008074:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008078:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800807c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008080:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008084:	b29b      	uxth	r3, r3
 8008086:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	78db      	ldrb	r3, [r3, #3]
 800808c:	2b01      	cmp	r3, #1
 800808e:	d020      	beq.n	80080d2 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008090:	687a      	ldr	r2, [r7, #4]
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	781b      	ldrb	r3, [r3, #0]
 8008096:	009b      	lsls	r3, r3, #2
 8008098:	4413      	add	r3, r2
 800809a:	881b      	ldrh	r3, [r3, #0]
 800809c:	b29b      	uxth	r3, r3
 800809e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80080a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80080a6:	81bb      	strh	r3, [r7, #12]
 80080a8:	89bb      	ldrh	r3, [r7, #12]
 80080aa:	f083 0320 	eor.w	r3, r3, #32
 80080ae:	81bb      	strh	r3, [r7, #12]
 80080b0:	687a      	ldr	r2, [r7, #4]
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	781b      	ldrb	r3, [r3, #0]
 80080b6:	009b      	lsls	r3, r3, #2
 80080b8:	441a      	add	r2, r3
 80080ba:	89bb      	ldrh	r3, [r7, #12]
 80080bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80080c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80080c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80080c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80080cc:	b29b      	uxth	r3, r3
 80080ce:	8013      	strh	r3, [r2, #0]
 80080d0:	e3f9      	b.n	80088c6 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80080d2:	687a      	ldr	r2, [r7, #4]
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	781b      	ldrb	r3, [r3, #0]
 80080d8:	009b      	lsls	r3, r3, #2
 80080da:	4413      	add	r3, r2
 80080dc:	881b      	ldrh	r3, [r3, #0]
 80080de:	b29b      	uxth	r3, r3
 80080e0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80080e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80080e8:	81fb      	strh	r3, [r7, #14]
 80080ea:	687a      	ldr	r2, [r7, #4]
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	781b      	ldrb	r3, [r3, #0]
 80080f0:	009b      	lsls	r3, r3, #2
 80080f2:	441a      	add	r2, r3
 80080f4:	89fb      	ldrh	r3, [r7, #14]
 80080f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80080fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80080fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008102:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008106:	b29b      	uxth	r3, r3
 8008108:	8013      	strh	r3, [r2, #0]
 800810a:	e3dc      	b.n	80088c6 <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008116:	b29b      	uxth	r3, r3
 8008118:	461a      	mov	r2, r3
 800811a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800811c:	4413      	add	r3, r2
 800811e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	781b      	ldrb	r3, [r3, #0]
 8008124:	00da      	lsls	r2, r3, #3
 8008126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008128:	4413      	add	r3, r2
 800812a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800812e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	88db      	ldrh	r3, [r3, #6]
 8008134:	085b      	lsrs	r3, r3, #1
 8008136:	b29b      	uxth	r3, r3
 8008138:	005b      	lsls	r3, r3, #1
 800813a:	b29a      	uxth	r2, r3
 800813c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800813e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800814a:	b29b      	uxth	r3, r3
 800814c:	461a      	mov	r2, r3
 800814e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008150:	4413      	add	r3, r2
 8008152:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	781b      	ldrb	r3, [r3, #0]
 8008158:	00da      	lsls	r2, r3, #3
 800815a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800815c:	4413      	add	r3, r2
 800815e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008162:	627b      	str	r3, [r7, #36]	@ 0x24
 8008164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008166:	881b      	ldrh	r3, [r3, #0]
 8008168:	b29b      	uxth	r3, r3
 800816a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800816e:	b29a      	uxth	r2, r3
 8008170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008172:	801a      	strh	r2, [r3, #0]
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	691b      	ldr	r3, [r3, #16]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d10a      	bne.n	8008192 <USB_ActivateEndpoint+0x28a>
 800817c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800817e:	881b      	ldrh	r3, [r3, #0]
 8008180:	b29b      	uxth	r3, r3
 8008182:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008186:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800818a:	b29a      	uxth	r2, r3
 800818c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800818e:	801a      	strh	r2, [r3, #0]
 8008190:	e041      	b.n	8008216 <USB_ActivateEndpoint+0x30e>
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	691b      	ldr	r3, [r3, #16]
 8008196:	2b3e      	cmp	r3, #62	@ 0x3e
 8008198:	d81c      	bhi.n	80081d4 <USB_ActivateEndpoint+0x2cc>
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	691b      	ldr	r3, [r3, #16]
 800819e:	085b      	lsrs	r3, r3, #1
 80081a0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	691b      	ldr	r3, [r3, #16]
 80081a8:	f003 0301 	and.w	r3, r3, #1
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d004      	beq.n	80081ba <USB_ActivateEndpoint+0x2b2>
 80081b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80081b4:	3301      	adds	r3, #1
 80081b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80081ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081bc:	881b      	ldrh	r3, [r3, #0]
 80081be:	b29a      	uxth	r2, r3
 80081c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80081c4:	b29b      	uxth	r3, r3
 80081c6:	029b      	lsls	r3, r3, #10
 80081c8:	b29b      	uxth	r3, r3
 80081ca:	4313      	orrs	r3, r2
 80081cc:	b29a      	uxth	r2, r3
 80081ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081d0:	801a      	strh	r2, [r3, #0]
 80081d2:	e020      	b.n	8008216 <USB_ActivateEndpoint+0x30e>
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	691b      	ldr	r3, [r3, #16]
 80081d8:	095b      	lsrs	r3, r3, #5
 80081da:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	691b      	ldr	r3, [r3, #16]
 80081e2:	f003 031f 	and.w	r3, r3, #31
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d104      	bne.n	80081f4 <USB_ActivateEndpoint+0x2ec>
 80081ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80081ee:	3b01      	subs	r3, #1
 80081f0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80081f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081f6:	881b      	ldrh	r3, [r3, #0]
 80081f8:	b29a      	uxth	r2, r3
 80081fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80081fe:	b29b      	uxth	r3, r3
 8008200:	029b      	lsls	r3, r3, #10
 8008202:	b29b      	uxth	r3, r3
 8008204:	4313      	orrs	r3, r2
 8008206:	b29b      	uxth	r3, r3
 8008208:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800820c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008210:	b29a      	uxth	r2, r3
 8008212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008214:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008216:	687a      	ldr	r2, [r7, #4]
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	781b      	ldrb	r3, [r3, #0]
 800821c:	009b      	lsls	r3, r3, #2
 800821e:	4413      	add	r3, r2
 8008220:	881b      	ldrh	r3, [r3, #0]
 8008222:	847b      	strh	r3, [r7, #34]	@ 0x22
 8008224:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008226:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800822a:	2b00      	cmp	r3, #0
 800822c:	d01b      	beq.n	8008266 <USB_ActivateEndpoint+0x35e>
 800822e:	687a      	ldr	r2, [r7, #4]
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	781b      	ldrb	r3, [r3, #0]
 8008234:	009b      	lsls	r3, r3, #2
 8008236:	4413      	add	r3, r2
 8008238:	881b      	ldrh	r3, [r3, #0]
 800823a:	b29b      	uxth	r3, r3
 800823c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008240:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008244:	843b      	strh	r3, [r7, #32]
 8008246:	687a      	ldr	r2, [r7, #4]
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	781b      	ldrb	r3, [r3, #0]
 800824c:	009b      	lsls	r3, r3, #2
 800824e:	441a      	add	r2, r3
 8008250:	8c3b      	ldrh	r3, [r7, #32]
 8008252:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008256:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800825a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800825e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008262:	b29b      	uxth	r3, r3
 8008264:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	781b      	ldrb	r3, [r3, #0]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d124      	bne.n	80082b8 <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800826e:	687a      	ldr	r2, [r7, #4]
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	781b      	ldrb	r3, [r3, #0]
 8008274:	009b      	lsls	r3, r3, #2
 8008276:	4413      	add	r3, r2
 8008278:	881b      	ldrh	r3, [r3, #0]
 800827a:	b29b      	uxth	r3, r3
 800827c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008280:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008284:	83bb      	strh	r3, [r7, #28]
 8008286:	8bbb      	ldrh	r3, [r7, #28]
 8008288:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800828c:	83bb      	strh	r3, [r7, #28]
 800828e:	8bbb      	ldrh	r3, [r7, #28]
 8008290:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008294:	83bb      	strh	r3, [r7, #28]
 8008296:	687a      	ldr	r2, [r7, #4]
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	781b      	ldrb	r3, [r3, #0]
 800829c:	009b      	lsls	r3, r3, #2
 800829e:	441a      	add	r2, r3
 80082a0:	8bbb      	ldrh	r3, [r7, #28]
 80082a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80082a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80082aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80082ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082b2:	b29b      	uxth	r3, r3
 80082b4:	8013      	strh	r3, [r2, #0]
 80082b6:	e306      	b.n	80088c6 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80082b8:	687a      	ldr	r2, [r7, #4]
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	781b      	ldrb	r3, [r3, #0]
 80082be:	009b      	lsls	r3, r3, #2
 80082c0:	4413      	add	r3, r2
 80082c2:	881b      	ldrh	r3, [r3, #0]
 80082c4:	b29b      	uxth	r3, r3
 80082c6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80082ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80082ce:	83fb      	strh	r3, [r7, #30]
 80082d0:	8bfb      	ldrh	r3, [r7, #30]
 80082d2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80082d6:	83fb      	strh	r3, [r7, #30]
 80082d8:	687a      	ldr	r2, [r7, #4]
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	781b      	ldrb	r3, [r3, #0]
 80082de:	009b      	lsls	r3, r3, #2
 80082e0:	441a      	add	r2, r3
 80082e2:	8bfb      	ldrh	r3, [r7, #30]
 80082e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80082e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80082ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80082f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082f4:	b29b      	uxth	r3, r3
 80082f6:	8013      	strh	r3, [r2, #0]
 80082f8:	e2e5      	b.n	80088c6 <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	78db      	ldrb	r3, [r3, #3]
 80082fe:	2b02      	cmp	r3, #2
 8008300:	d11e      	bne.n	8008340 <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008302:	687a      	ldr	r2, [r7, #4]
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	781b      	ldrb	r3, [r3, #0]
 8008308:	009b      	lsls	r3, r3, #2
 800830a:	4413      	add	r3, r2
 800830c:	881b      	ldrh	r3, [r3, #0]
 800830e:	b29b      	uxth	r3, r3
 8008310:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008314:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008318:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 800831c:	687a      	ldr	r2, [r7, #4]
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	781b      	ldrb	r3, [r3, #0]
 8008322:	009b      	lsls	r3, r3, #2
 8008324:	441a      	add	r2, r3
 8008326:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800832a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800832e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008332:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8008336:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800833a:	b29b      	uxth	r3, r3
 800833c:	8013      	strh	r3, [r2, #0]
 800833e:	e01d      	b.n	800837c <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8008340:	687a      	ldr	r2, [r7, #4]
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	781b      	ldrb	r3, [r3, #0]
 8008346:	009b      	lsls	r3, r3, #2
 8008348:	4413      	add	r3, r2
 800834a:	881b      	ldrh	r3, [r3, #0]
 800834c:	b29b      	uxth	r3, r3
 800834e:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8008352:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008356:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 800835a:	687a      	ldr	r2, [r7, #4]
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	781b      	ldrb	r3, [r3, #0]
 8008360:	009b      	lsls	r3, r3, #2
 8008362:	441a      	add	r2, r3
 8008364:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 8008368:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800836c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008370:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008374:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008378:	b29b      	uxth	r3, r3
 800837a:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008386:	b29b      	uxth	r3, r3
 8008388:	461a      	mov	r2, r3
 800838a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800838c:	4413      	add	r3, r2
 800838e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	781b      	ldrb	r3, [r3, #0]
 8008394:	00da      	lsls	r2, r3, #3
 8008396:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008398:	4413      	add	r3, r2
 800839a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800839e:	67bb      	str	r3, [r7, #120]	@ 0x78
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	891b      	ldrh	r3, [r3, #8]
 80083a4:	085b      	lsrs	r3, r3, #1
 80083a6:	b29b      	uxth	r3, r3
 80083a8:	005b      	lsls	r3, r3, #1
 80083aa:	b29a      	uxth	r2, r3
 80083ac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80083ae:	801a      	strh	r2, [r3, #0]
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	677b      	str	r3, [r7, #116]	@ 0x74
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80083ba:	b29b      	uxth	r3, r3
 80083bc:	461a      	mov	r2, r3
 80083be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80083c0:	4413      	add	r3, r2
 80083c2:	677b      	str	r3, [r7, #116]	@ 0x74
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	781b      	ldrb	r3, [r3, #0]
 80083c8:	00da      	lsls	r2, r3, #3
 80083ca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80083cc:	4413      	add	r3, r2
 80083ce:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80083d2:	673b      	str	r3, [r7, #112]	@ 0x70
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	895b      	ldrh	r3, [r3, #10]
 80083d8:	085b      	lsrs	r3, r3, #1
 80083da:	b29b      	uxth	r3, r3
 80083dc:	005b      	lsls	r3, r3, #1
 80083de:	b29a      	uxth	r2, r3
 80083e0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80083e2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	785b      	ldrb	r3, [r3, #1]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	f040 81af 	bne.w	800874c <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80083ee:	687a      	ldr	r2, [r7, #4]
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	781b      	ldrb	r3, [r3, #0]
 80083f4:	009b      	lsls	r3, r3, #2
 80083f6:	4413      	add	r3, r2
 80083f8:	881b      	ldrh	r3, [r3, #0]
 80083fa:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 80083fe:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 8008402:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008406:	2b00      	cmp	r3, #0
 8008408:	d01d      	beq.n	8008446 <USB_ActivateEndpoint+0x53e>
 800840a:	687a      	ldr	r2, [r7, #4]
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	781b      	ldrb	r3, [r3, #0]
 8008410:	009b      	lsls	r3, r3, #2
 8008412:	4413      	add	r3, r2
 8008414:	881b      	ldrh	r3, [r3, #0]
 8008416:	b29b      	uxth	r3, r3
 8008418:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800841c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008420:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 8008424:	687a      	ldr	r2, [r7, #4]
 8008426:	683b      	ldr	r3, [r7, #0]
 8008428:	781b      	ldrb	r3, [r3, #0]
 800842a:	009b      	lsls	r3, r3, #2
 800842c:	441a      	add	r2, r3
 800842e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8008432:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008436:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800843a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800843e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008442:	b29b      	uxth	r3, r3
 8008444:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008446:	687a      	ldr	r2, [r7, #4]
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	781b      	ldrb	r3, [r3, #0]
 800844c:	009b      	lsls	r3, r3, #2
 800844e:	4413      	add	r3, r2
 8008450:	881b      	ldrh	r3, [r3, #0]
 8008452:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 8008456:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 800845a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800845e:	2b00      	cmp	r3, #0
 8008460:	d01d      	beq.n	800849e <USB_ActivateEndpoint+0x596>
 8008462:	687a      	ldr	r2, [r7, #4]
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	781b      	ldrb	r3, [r3, #0]
 8008468:	009b      	lsls	r3, r3, #2
 800846a:	4413      	add	r3, r2
 800846c:	881b      	ldrh	r3, [r3, #0]
 800846e:	b29b      	uxth	r3, r3
 8008470:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008474:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008478:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 800847c:	687a      	ldr	r2, [r7, #4]
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	781b      	ldrb	r3, [r3, #0]
 8008482:	009b      	lsls	r3, r3, #2
 8008484:	441a      	add	r2, r3
 8008486:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 800848a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800848e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008492:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008496:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800849a:	b29b      	uxth	r3, r3
 800849c:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	785b      	ldrb	r3, [r3, #1]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d16b      	bne.n	800857e <USB_ActivateEndpoint+0x676>
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80084b0:	b29b      	uxth	r3, r3
 80084b2:	461a      	mov	r2, r3
 80084b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80084b6:	4413      	add	r3, r2
 80084b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	781b      	ldrb	r3, [r3, #0]
 80084be:	00da      	lsls	r2, r3, #3
 80084c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80084c2:	4413      	add	r3, r2
 80084c4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80084c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80084ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80084cc:	881b      	ldrh	r3, [r3, #0]
 80084ce:	b29b      	uxth	r3, r3
 80084d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80084d4:	b29a      	uxth	r2, r3
 80084d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80084d8:	801a      	strh	r2, [r3, #0]
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	691b      	ldr	r3, [r3, #16]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d10a      	bne.n	80084f8 <USB_ActivateEndpoint+0x5f0>
 80084e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80084e4:	881b      	ldrh	r3, [r3, #0]
 80084e6:	b29b      	uxth	r3, r3
 80084e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80084ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084f0:	b29a      	uxth	r2, r3
 80084f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80084f4:	801a      	strh	r2, [r3, #0]
 80084f6:	e05d      	b.n	80085b4 <USB_ActivateEndpoint+0x6ac>
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	691b      	ldr	r3, [r3, #16]
 80084fc:	2b3e      	cmp	r3, #62	@ 0x3e
 80084fe:	d81c      	bhi.n	800853a <USB_ActivateEndpoint+0x632>
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	691b      	ldr	r3, [r3, #16]
 8008504:	085b      	lsrs	r3, r3, #1
 8008506:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	691b      	ldr	r3, [r3, #16]
 800850e:	f003 0301 	and.w	r3, r3, #1
 8008512:	2b00      	cmp	r3, #0
 8008514:	d004      	beq.n	8008520 <USB_ActivateEndpoint+0x618>
 8008516:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800851a:	3301      	adds	r3, #1
 800851c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008520:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008522:	881b      	ldrh	r3, [r3, #0]
 8008524:	b29a      	uxth	r2, r3
 8008526:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800852a:	b29b      	uxth	r3, r3
 800852c:	029b      	lsls	r3, r3, #10
 800852e:	b29b      	uxth	r3, r3
 8008530:	4313      	orrs	r3, r2
 8008532:	b29a      	uxth	r2, r3
 8008534:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008536:	801a      	strh	r2, [r3, #0]
 8008538:	e03c      	b.n	80085b4 <USB_ActivateEndpoint+0x6ac>
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	691b      	ldr	r3, [r3, #16]
 800853e:	095b      	lsrs	r3, r3, #5
 8008540:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	691b      	ldr	r3, [r3, #16]
 8008548:	f003 031f 	and.w	r3, r3, #31
 800854c:	2b00      	cmp	r3, #0
 800854e:	d104      	bne.n	800855a <USB_ActivateEndpoint+0x652>
 8008550:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008554:	3b01      	subs	r3, #1
 8008556:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800855a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800855c:	881b      	ldrh	r3, [r3, #0]
 800855e:	b29a      	uxth	r2, r3
 8008560:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008564:	b29b      	uxth	r3, r3
 8008566:	029b      	lsls	r3, r3, #10
 8008568:	b29b      	uxth	r3, r3
 800856a:	4313      	orrs	r3, r2
 800856c:	b29b      	uxth	r3, r3
 800856e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008572:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008576:	b29a      	uxth	r2, r3
 8008578:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800857a:	801a      	strh	r2, [r3, #0]
 800857c:	e01a      	b.n	80085b4 <USB_ActivateEndpoint+0x6ac>
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	785b      	ldrb	r3, [r3, #1]
 8008582:	2b01      	cmp	r3, #1
 8008584:	d116      	bne.n	80085b4 <USB_ActivateEndpoint+0x6ac>
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	657b      	str	r3, [r7, #84]	@ 0x54
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008590:	b29b      	uxth	r3, r3
 8008592:	461a      	mov	r2, r3
 8008594:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008596:	4413      	add	r3, r2
 8008598:	657b      	str	r3, [r7, #84]	@ 0x54
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	781b      	ldrb	r3, [r3, #0]
 800859e:	00da      	lsls	r2, r3, #3
 80085a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80085a2:	4413      	add	r3, r2
 80085a4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80085a8:	653b      	str	r3, [r7, #80]	@ 0x50
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	691b      	ldr	r3, [r3, #16]
 80085ae:	b29a      	uxth	r2, r3
 80085b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80085b2:	801a      	strh	r2, [r3, #0]
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	785b      	ldrb	r3, [r3, #1]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d16b      	bne.n	8008698 <USB_ActivateEndpoint+0x790>
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80085ca:	b29b      	uxth	r3, r3
 80085cc:	461a      	mov	r2, r3
 80085ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80085d0:	4413      	add	r3, r2
 80085d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	781b      	ldrb	r3, [r3, #0]
 80085d8:	00da      	lsls	r2, r3, #3
 80085da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80085dc:	4413      	add	r3, r2
 80085de:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80085e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80085e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085e6:	881b      	ldrh	r3, [r3, #0]
 80085e8:	b29b      	uxth	r3, r3
 80085ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80085ee:	b29a      	uxth	r2, r3
 80085f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085f2:	801a      	strh	r2, [r3, #0]
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	691b      	ldr	r3, [r3, #16]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d10a      	bne.n	8008612 <USB_ActivateEndpoint+0x70a>
 80085fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085fe:	881b      	ldrh	r3, [r3, #0]
 8008600:	b29b      	uxth	r3, r3
 8008602:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008606:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800860a:	b29a      	uxth	r2, r3
 800860c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800860e:	801a      	strh	r2, [r3, #0]
 8008610:	e05b      	b.n	80086ca <USB_ActivateEndpoint+0x7c2>
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	691b      	ldr	r3, [r3, #16]
 8008616:	2b3e      	cmp	r3, #62	@ 0x3e
 8008618:	d81c      	bhi.n	8008654 <USB_ActivateEndpoint+0x74c>
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	691b      	ldr	r3, [r3, #16]
 800861e:	085b      	lsrs	r3, r3, #1
 8008620:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	691b      	ldr	r3, [r3, #16]
 8008628:	f003 0301 	and.w	r3, r3, #1
 800862c:	2b00      	cmp	r3, #0
 800862e:	d004      	beq.n	800863a <USB_ActivateEndpoint+0x732>
 8008630:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008634:	3301      	adds	r3, #1
 8008636:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800863a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800863c:	881b      	ldrh	r3, [r3, #0]
 800863e:	b29a      	uxth	r2, r3
 8008640:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008644:	b29b      	uxth	r3, r3
 8008646:	029b      	lsls	r3, r3, #10
 8008648:	b29b      	uxth	r3, r3
 800864a:	4313      	orrs	r3, r2
 800864c:	b29a      	uxth	r2, r3
 800864e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008650:	801a      	strh	r2, [r3, #0]
 8008652:	e03a      	b.n	80086ca <USB_ActivateEndpoint+0x7c2>
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	691b      	ldr	r3, [r3, #16]
 8008658:	095b      	lsrs	r3, r3, #5
 800865a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	691b      	ldr	r3, [r3, #16]
 8008662:	f003 031f 	and.w	r3, r3, #31
 8008666:	2b00      	cmp	r3, #0
 8008668:	d104      	bne.n	8008674 <USB_ActivateEndpoint+0x76c>
 800866a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800866e:	3b01      	subs	r3, #1
 8008670:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008674:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008676:	881b      	ldrh	r3, [r3, #0]
 8008678:	b29a      	uxth	r2, r3
 800867a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800867e:	b29b      	uxth	r3, r3
 8008680:	029b      	lsls	r3, r3, #10
 8008682:	b29b      	uxth	r3, r3
 8008684:	4313      	orrs	r3, r2
 8008686:	b29b      	uxth	r3, r3
 8008688:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800868c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008690:	b29a      	uxth	r2, r3
 8008692:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008694:	801a      	strh	r2, [r3, #0]
 8008696:	e018      	b.n	80086ca <USB_ActivateEndpoint+0x7c2>
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	785b      	ldrb	r3, [r3, #1]
 800869c:	2b01      	cmp	r3, #1
 800869e:	d114      	bne.n	80086ca <USB_ActivateEndpoint+0x7c2>
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80086a6:	b29b      	uxth	r3, r3
 80086a8:	461a      	mov	r2, r3
 80086aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80086ac:	4413      	add	r3, r2
 80086ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	781b      	ldrb	r3, [r3, #0]
 80086b4:	00da      	lsls	r2, r3, #3
 80086b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80086b8:	4413      	add	r3, r2
 80086ba:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80086be:	643b      	str	r3, [r7, #64]	@ 0x40
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	691b      	ldr	r3, [r3, #16]
 80086c4:	b29a      	uxth	r2, r3
 80086c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80086c8:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80086ca:	687a      	ldr	r2, [r7, #4]
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	781b      	ldrb	r3, [r3, #0]
 80086d0:	009b      	lsls	r3, r3, #2
 80086d2:	4413      	add	r3, r2
 80086d4:	881b      	ldrh	r3, [r3, #0]
 80086d6:	b29b      	uxth	r3, r3
 80086d8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80086dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80086e0:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80086e2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80086e4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80086e8:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80086ea:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80086ec:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80086f0:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80086f2:	687a      	ldr	r2, [r7, #4]
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	781b      	ldrb	r3, [r3, #0]
 80086f8:	009b      	lsls	r3, r3, #2
 80086fa:	441a      	add	r2, r3
 80086fc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80086fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008702:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008706:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800870a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800870e:	b29b      	uxth	r3, r3
 8008710:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008712:	687a      	ldr	r2, [r7, #4]
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	781b      	ldrb	r3, [r3, #0]
 8008718:	009b      	lsls	r3, r3, #2
 800871a:	4413      	add	r3, r2
 800871c:	881b      	ldrh	r3, [r3, #0]
 800871e:	b29b      	uxth	r3, r3
 8008720:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008724:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008728:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800872a:	687a      	ldr	r2, [r7, #4]
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	781b      	ldrb	r3, [r3, #0]
 8008730:	009b      	lsls	r3, r3, #2
 8008732:	441a      	add	r2, r3
 8008734:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8008736:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800873a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800873e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008742:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008746:	b29b      	uxth	r3, r3
 8008748:	8013      	strh	r3, [r2, #0]
 800874a:	e0bc      	b.n	80088c6 <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800874c:	687a      	ldr	r2, [r7, #4]
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	781b      	ldrb	r3, [r3, #0]
 8008752:	009b      	lsls	r3, r3, #2
 8008754:	4413      	add	r3, r2
 8008756:	881b      	ldrh	r3, [r3, #0]
 8008758:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 800875c:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008760:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008764:	2b00      	cmp	r3, #0
 8008766:	d01d      	beq.n	80087a4 <USB_ActivateEndpoint+0x89c>
 8008768:	687a      	ldr	r2, [r7, #4]
 800876a:	683b      	ldr	r3, [r7, #0]
 800876c:	781b      	ldrb	r3, [r3, #0]
 800876e:	009b      	lsls	r3, r3, #2
 8008770:	4413      	add	r3, r2
 8008772:	881b      	ldrh	r3, [r3, #0]
 8008774:	b29b      	uxth	r3, r3
 8008776:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800877a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800877e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 8008782:	687a      	ldr	r2, [r7, #4]
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	781b      	ldrb	r3, [r3, #0]
 8008788:	009b      	lsls	r3, r3, #2
 800878a:	441a      	add	r2, r3
 800878c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008790:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008794:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008798:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800879c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80087a0:	b29b      	uxth	r3, r3
 80087a2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80087a4:	687a      	ldr	r2, [r7, #4]
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	781b      	ldrb	r3, [r3, #0]
 80087aa:	009b      	lsls	r3, r3, #2
 80087ac:	4413      	add	r3, r2
 80087ae:	881b      	ldrh	r3, [r3, #0]
 80087b0:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 80087b4:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 80087b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d01d      	beq.n	80087fc <USB_ActivateEndpoint+0x8f4>
 80087c0:	687a      	ldr	r2, [r7, #4]
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	781b      	ldrb	r3, [r3, #0]
 80087c6:	009b      	lsls	r3, r3, #2
 80087c8:	4413      	add	r3, r2
 80087ca:	881b      	ldrh	r3, [r3, #0]
 80087cc:	b29b      	uxth	r3, r3
 80087ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80087d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80087d6:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 80087da:	687a      	ldr	r2, [r7, #4]
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	781b      	ldrb	r3, [r3, #0]
 80087e0:	009b      	lsls	r3, r3, #2
 80087e2:	441a      	add	r2, r3
 80087e4:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 80087e8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80087ec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80087f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80087f4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80087f8:	b29b      	uxth	r3, r3
 80087fa:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	78db      	ldrb	r3, [r3, #3]
 8008800:	2b01      	cmp	r3, #1
 8008802:	d024      	beq.n	800884e <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008804:	687a      	ldr	r2, [r7, #4]
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	781b      	ldrb	r3, [r3, #0]
 800880a:	009b      	lsls	r3, r3, #2
 800880c:	4413      	add	r3, r2
 800880e:	881b      	ldrh	r3, [r3, #0]
 8008810:	b29b      	uxth	r3, r3
 8008812:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008816:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800881a:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800881e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8008822:	f083 0320 	eor.w	r3, r3, #32
 8008826:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800882a:	687a      	ldr	r2, [r7, #4]
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	781b      	ldrb	r3, [r3, #0]
 8008830:	009b      	lsls	r3, r3, #2
 8008832:	441a      	add	r2, r3
 8008834:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8008838:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800883c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008840:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008844:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008848:	b29b      	uxth	r3, r3
 800884a:	8013      	strh	r3, [r2, #0]
 800884c:	e01d      	b.n	800888a <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800884e:	687a      	ldr	r2, [r7, #4]
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	781b      	ldrb	r3, [r3, #0]
 8008854:	009b      	lsls	r3, r3, #2
 8008856:	4413      	add	r3, r2
 8008858:	881b      	ldrh	r3, [r3, #0]
 800885a:	b29b      	uxth	r3, r3
 800885c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008860:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008864:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8008868:	687a      	ldr	r2, [r7, #4]
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	781b      	ldrb	r3, [r3, #0]
 800886e:	009b      	lsls	r3, r3, #2
 8008870:	441a      	add	r2, r3
 8008872:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8008876:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800887a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800887e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008882:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008886:	b29b      	uxth	r3, r3
 8008888:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800888a:	687a      	ldr	r2, [r7, #4]
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	781b      	ldrb	r3, [r3, #0]
 8008890:	009b      	lsls	r3, r3, #2
 8008892:	4413      	add	r3, r2
 8008894:	881b      	ldrh	r3, [r3, #0]
 8008896:	b29b      	uxth	r3, r3
 8008898:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800889c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80088a0:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80088a4:	687a      	ldr	r2, [r7, #4]
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	781b      	ldrb	r3, [r3, #0]
 80088aa:	009b      	lsls	r3, r3, #2
 80088ac:	441a      	add	r2, r3
 80088ae:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80088b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80088b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80088ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80088be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80088c2:	b29b      	uxth	r3, r3
 80088c4:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80088c6:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 80088ca:	4618      	mov	r0, r3
 80088cc:	379c      	adds	r7, #156	@ 0x9c
 80088ce:	46bd      	mov	sp, r7
 80088d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d4:	4770      	bx	lr
 80088d6:	bf00      	nop

080088d8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80088d8:	b480      	push	{r7}
 80088da:	b08d      	sub	sp, #52	@ 0x34
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
 80088e0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	7b1b      	ldrb	r3, [r3, #12]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	f040 808e 	bne.w	8008a08 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	785b      	ldrb	r3, [r3, #1]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d044      	beq.n	800897e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80088f4:	687a      	ldr	r2, [r7, #4]
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	781b      	ldrb	r3, [r3, #0]
 80088fa:	009b      	lsls	r3, r3, #2
 80088fc:	4413      	add	r3, r2
 80088fe:	881b      	ldrh	r3, [r3, #0]
 8008900:	81bb      	strh	r3, [r7, #12]
 8008902:	89bb      	ldrh	r3, [r7, #12]
 8008904:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008908:	2b00      	cmp	r3, #0
 800890a:	d01b      	beq.n	8008944 <USB_DeactivateEndpoint+0x6c>
 800890c:	687a      	ldr	r2, [r7, #4]
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	781b      	ldrb	r3, [r3, #0]
 8008912:	009b      	lsls	r3, r3, #2
 8008914:	4413      	add	r3, r2
 8008916:	881b      	ldrh	r3, [r3, #0]
 8008918:	b29b      	uxth	r3, r3
 800891a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800891e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008922:	817b      	strh	r3, [r7, #10]
 8008924:	687a      	ldr	r2, [r7, #4]
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	781b      	ldrb	r3, [r3, #0]
 800892a:	009b      	lsls	r3, r3, #2
 800892c:	441a      	add	r2, r3
 800892e:	897b      	ldrh	r3, [r7, #10]
 8008930:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008934:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008938:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800893c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008940:	b29b      	uxth	r3, r3
 8008942:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008944:	687a      	ldr	r2, [r7, #4]
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	781b      	ldrb	r3, [r3, #0]
 800894a:	009b      	lsls	r3, r3, #2
 800894c:	4413      	add	r3, r2
 800894e:	881b      	ldrh	r3, [r3, #0]
 8008950:	b29b      	uxth	r3, r3
 8008952:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008956:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800895a:	813b      	strh	r3, [r7, #8]
 800895c:	687a      	ldr	r2, [r7, #4]
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	781b      	ldrb	r3, [r3, #0]
 8008962:	009b      	lsls	r3, r3, #2
 8008964:	441a      	add	r2, r3
 8008966:	893b      	ldrh	r3, [r7, #8]
 8008968:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800896c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008970:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008974:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008978:	b29b      	uxth	r3, r3
 800897a:	8013      	strh	r3, [r2, #0]
 800897c:	e192      	b.n	8008ca4 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800897e:	687a      	ldr	r2, [r7, #4]
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	781b      	ldrb	r3, [r3, #0]
 8008984:	009b      	lsls	r3, r3, #2
 8008986:	4413      	add	r3, r2
 8008988:	881b      	ldrh	r3, [r3, #0]
 800898a:	827b      	strh	r3, [r7, #18]
 800898c:	8a7b      	ldrh	r3, [r7, #18]
 800898e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008992:	2b00      	cmp	r3, #0
 8008994:	d01b      	beq.n	80089ce <USB_DeactivateEndpoint+0xf6>
 8008996:	687a      	ldr	r2, [r7, #4]
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	781b      	ldrb	r3, [r3, #0]
 800899c:	009b      	lsls	r3, r3, #2
 800899e:	4413      	add	r3, r2
 80089a0:	881b      	ldrh	r3, [r3, #0]
 80089a2:	b29b      	uxth	r3, r3
 80089a4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80089a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80089ac:	823b      	strh	r3, [r7, #16]
 80089ae:	687a      	ldr	r2, [r7, #4]
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	781b      	ldrb	r3, [r3, #0]
 80089b4:	009b      	lsls	r3, r3, #2
 80089b6:	441a      	add	r2, r3
 80089b8:	8a3b      	ldrh	r3, [r7, #16]
 80089ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80089be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80089c2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80089c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80089ca:	b29b      	uxth	r3, r3
 80089cc:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80089ce:	687a      	ldr	r2, [r7, #4]
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	781b      	ldrb	r3, [r3, #0]
 80089d4:	009b      	lsls	r3, r3, #2
 80089d6:	4413      	add	r3, r2
 80089d8:	881b      	ldrh	r3, [r3, #0]
 80089da:	b29b      	uxth	r3, r3
 80089dc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80089e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80089e4:	81fb      	strh	r3, [r7, #14]
 80089e6:	687a      	ldr	r2, [r7, #4]
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	781b      	ldrb	r3, [r3, #0]
 80089ec:	009b      	lsls	r3, r3, #2
 80089ee:	441a      	add	r2, r3
 80089f0:	89fb      	ldrh	r3, [r7, #14]
 80089f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80089f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80089fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80089fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a02:	b29b      	uxth	r3, r3
 8008a04:	8013      	strh	r3, [r2, #0]
 8008a06:	e14d      	b.n	8008ca4 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	785b      	ldrb	r3, [r3, #1]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	f040 80a5 	bne.w	8008b5c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008a12:	687a      	ldr	r2, [r7, #4]
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	781b      	ldrb	r3, [r3, #0]
 8008a18:	009b      	lsls	r3, r3, #2
 8008a1a:	4413      	add	r3, r2
 8008a1c:	881b      	ldrh	r3, [r3, #0]
 8008a1e:	843b      	strh	r3, [r7, #32]
 8008a20:	8c3b      	ldrh	r3, [r7, #32]
 8008a22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d01b      	beq.n	8008a62 <USB_DeactivateEndpoint+0x18a>
 8008a2a:	687a      	ldr	r2, [r7, #4]
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	781b      	ldrb	r3, [r3, #0]
 8008a30:	009b      	lsls	r3, r3, #2
 8008a32:	4413      	add	r3, r2
 8008a34:	881b      	ldrh	r3, [r3, #0]
 8008a36:	b29b      	uxth	r3, r3
 8008a38:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008a3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a40:	83fb      	strh	r3, [r7, #30]
 8008a42:	687a      	ldr	r2, [r7, #4]
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	781b      	ldrb	r3, [r3, #0]
 8008a48:	009b      	lsls	r3, r3, #2
 8008a4a:	441a      	add	r2, r3
 8008a4c:	8bfb      	ldrh	r3, [r7, #30]
 8008a4e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008a52:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008a56:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008a5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a5e:	b29b      	uxth	r3, r3
 8008a60:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008a62:	687a      	ldr	r2, [r7, #4]
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	781b      	ldrb	r3, [r3, #0]
 8008a68:	009b      	lsls	r3, r3, #2
 8008a6a:	4413      	add	r3, r2
 8008a6c:	881b      	ldrh	r3, [r3, #0]
 8008a6e:	83bb      	strh	r3, [r7, #28]
 8008a70:	8bbb      	ldrh	r3, [r7, #28]
 8008a72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d01b      	beq.n	8008ab2 <USB_DeactivateEndpoint+0x1da>
 8008a7a:	687a      	ldr	r2, [r7, #4]
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	781b      	ldrb	r3, [r3, #0]
 8008a80:	009b      	lsls	r3, r3, #2
 8008a82:	4413      	add	r3, r2
 8008a84:	881b      	ldrh	r3, [r3, #0]
 8008a86:	b29b      	uxth	r3, r3
 8008a88:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008a8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a90:	837b      	strh	r3, [r7, #26]
 8008a92:	687a      	ldr	r2, [r7, #4]
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	781b      	ldrb	r3, [r3, #0]
 8008a98:	009b      	lsls	r3, r3, #2
 8008a9a:	441a      	add	r2, r3
 8008a9c:	8b7b      	ldrh	r3, [r7, #26]
 8008a9e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008aa2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008aa6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008aaa:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008aae:	b29b      	uxth	r3, r3
 8008ab0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8008ab2:	687a      	ldr	r2, [r7, #4]
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	781b      	ldrb	r3, [r3, #0]
 8008ab8:	009b      	lsls	r3, r3, #2
 8008aba:	4413      	add	r3, r2
 8008abc:	881b      	ldrh	r3, [r3, #0]
 8008abe:	b29b      	uxth	r3, r3
 8008ac0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008ac4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ac8:	833b      	strh	r3, [r7, #24]
 8008aca:	687a      	ldr	r2, [r7, #4]
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	781b      	ldrb	r3, [r3, #0]
 8008ad0:	009b      	lsls	r3, r3, #2
 8008ad2:	441a      	add	r2, r3
 8008ad4:	8b3b      	ldrh	r3, [r7, #24]
 8008ad6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008ada:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008ade:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008ae2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008ae6:	b29b      	uxth	r3, r3
 8008ae8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008aea:	687a      	ldr	r2, [r7, #4]
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	781b      	ldrb	r3, [r3, #0]
 8008af0:	009b      	lsls	r3, r3, #2
 8008af2:	4413      	add	r3, r2
 8008af4:	881b      	ldrh	r3, [r3, #0]
 8008af6:	b29b      	uxth	r3, r3
 8008af8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008afc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b00:	82fb      	strh	r3, [r7, #22]
 8008b02:	687a      	ldr	r2, [r7, #4]
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	781b      	ldrb	r3, [r3, #0]
 8008b08:	009b      	lsls	r3, r3, #2
 8008b0a:	441a      	add	r2, r3
 8008b0c:	8afb      	ldrh	r3, [r7, #22]
 8008b0e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008b12:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008b16:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008b1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b1e:	b29b      	uxth	r3, r3
 8008b20:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008b22:	687a      	ldr	r2, [r7, #4]
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	781b      	ldrb	r3, [r3, #0]
 8008b28:	009b      	lsls	r3, r3, #2
 8008b2a:	4413      	add	r3, r2
 8008b2c:	881b      	ldrh	r3, [r3, #0]
 8008b2e:	b29b      	uxth	r3, r3
 8008b30:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008b34:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008b38:	82bb      	strh	r3, [r7, #20]
 8008b3a:	687a      	ldr	r2, [r7, #4]
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	781b      	ldrb	r3, [r3, #0]
 8008b40:	009b      	lsls	r3, r3, #2
 8008b42:	441a      	add	r2, r3
 8008b44:	8abb      	ldrh	r3, [r7, #20]
 8008b46:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008b4a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008b4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008b52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b56:	b29b      	uxth	r3, r3
 8008b58:	8013      	strh	r3, [r2, #0]
 8008b5a:	e0a3      	b.n	8008ca4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008b5c:	687a      	ldr	r2, [r7, #4]
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	781b      	ldrb	r3, [r3, #0]
 8008b62:	009b      	lsls	r3, r3, #2
 8008b64:	4413      	add	r3, r2
 8008b66:	881b      	ldrh	r3, [r3, #0]
 8008b68:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8008b6a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8008b6c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d01b      	beq.n	8008bac <USB_DeactivateEndpoint+0x2d4>
 8008b74:	687a      	ldr	r2, [r7, #4]
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	781b      	ldrb	r3, [r3, #0]
 8008b7a:	009b      	lsls	r3, r3, #2
 8008b7c:	4413      	add	r3, r2
 8008b7e:	881b      	ldrh	r3, [r3, #0]
 8008b80:	b29b      	uxth	r3, r3
 8008b82:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008b86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b8a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8008b8c:	687a      	ldr	r2, [r7, #4]
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	781b      	ldrb	r3, [r3, #0]
 8008b92:	009b      	lsls	r3, r3, #2
 8008b94:	441a      	add	r2, r3
 8008b96:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8008b98:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008b9c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008ba0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008ba4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008ba8:	b29b      	uxth	r3, r3
 8008baa:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008bac:	687a      	ldr	r2, [r7, #4]
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	781b      	ldrb	r3, [r3, #0]
 8008bb2:	009b      	lsls	r3, r3, #2
 8008bb4:	4413      	add	r3, r2
 8008bb6:	881b      	ldrh	r3, [r3, #0]
 8008bb8:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8008bba:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8008bbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d01b      	beq.n	8008bfc <USB_DeactivateEndpoint+0x324>
 8008bc4:	687a      	ldr	r2, [r7, #4]
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	781b      	ldrb	r3, [r3, #0]
 8008bca:	009b      	lsls	r3, r3, #2
 8008bcc:	4413      	add	r3, r2
 8008bce:	881b      	ldrh	r3, [r3, #0]
 8008bd0:	b29b      	uxth	r3, r3
 8008bd2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008bd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008bda:	853b      	strh	r3, [r7, #40]	@ 0x28
 8008bdc:	687a      	ldr	r2, [r7, #4]
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	781b      	ldrb	r3, [r3, #0]
 8008be2:	009b      	lsls	r3, r3, #2
 8008be4:	441a      	add	r2, r3
 8008be6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008be8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008bec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008bf0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008bf4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008bf8:	b29b      	uxth	r3, r3
 8008bfa:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008bfc:	687a      	ldr	r2, [r7, #4]
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	781b      	ldrb	r3, [r3, #0]
 8008c02:	009b      	lsls	r3, r3, #2
 8008c04:	4413      	add	r3, r2
 8008c06:	881b      	ldrh	r3, [r3, #0]
 8008c08:	b29b      	uxth	r3, r3
 8008c0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008c0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c12:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8008c14:	687a      	ldr	r2, [r7, #4]
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	781b      	ldrb	r3, [r3, #0]
 8008c1a:	009b      	lsls	r3, r3, #2
 8008c1c:	441a      	add	r2, r3
 8008c1e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008c20:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008c24:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008c28:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008c2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c30:	b29b      	uxth	r3, r3
 8008c32:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008c34:	687a      	ldr	r2, [r7, #4]
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	781b      	ldrb	r3, [r3, #0]
 8008c3a:	009b      	lsls	r3, r3, #2
 8008c3c:	4413      	add	r3, r2
 8008c3e:	881b      	ldrh	r3, [r3, #0]
 8008c40:	b29b      	uxth	r3, r3
 8008c42:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008c46:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008c4a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8008c4c:	687a      	ldr	r2, [r7, #4]
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	781b      	ldrb	r3, [r3, #0]
 8008c52:	009b      	lsls	r3, r3, #2
 8008c54:	441a      	add	r2, r3
 8008c56:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008c58:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008c5c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008c60:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008c64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c68:	b29b      	uxth	r3, r3
 8008c6a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008c6c:	687a      	ldr	r2, [r7, #4]
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	781b      	ldrb	r3, [r3, #0]
 8008c72:	009b      	lsls	r3, r3, #2
 8008c74:	4413      	add	r3, r2
 8008c76:	881b      	ldrh	r3, [r3, #0]
 8008c78:	b29b      	uxth	r3, r3
 8008c7a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008c7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c82:	847b      	strh	r3, [r7, #34]	@ 0x22
 8008c84:	687a      	ldr	r2, [r7, #4]
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	781b      	ldrb	r3, [r3, #0]
 8008c8a:	009b      	lsls	r3, r3, #2
 8008c8c:	441a      	add	r2, r3
 8008c8e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008c90:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008c94:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008c98:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008c9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008ca0:	b29b      	uxth	r3, r3
 8008ca2:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8008ca4:	2300      	movs	r3, #0
}
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	3734      	adds	r7, #52	@ 0x34
 8008caa:	46bd      	mov	sp, r7
 8008cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb0:	4770      	bx	lr

08008cb2 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008cb2:	b580      	push	{r7, lr}
 8008cb4:	b0ac      	sub	sp, #176	@ 0xb0
 8008cb6:	af00      	add	r7, sp, #0
 8008cb8:	6078      	str	r0, [r7, #4]
 8008cba:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	785b      	ldrb	r3, [r3, #1]
 8008cc0:	2b01      	cmp	r3, #1
 8008cc2:	f040 84ca 	bne.w	800965a <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	699a      	ldr	r2, [r3, #24]
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	691b      	ldr	r3, [r3, #16]
 8008cce:	429a      	cmp	r2, r3
 8008cd0:	d904      	bls.n	8008cdc <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	691b      	ldr	r3, [r3, #16]
 8008cd6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008cda:	e003      	b.n	8008ce4 <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	699b      	ldr	r3, [r3, #24]
 8008ce0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	7b1b      	ldrb	r3, [r3, #12]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d122      	bne.n	8008d32 <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	6959      	ldr	r1, [r3, #20]
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	88da      	ldrh	r2, [r3, #6]
 8008cf4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008cf8:	b29b      	uxth	r3, r3
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	f000 febd 	bl	8009a7a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	613b      	str	r3, [r7, #16]
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008d0a:	b29b      	uxth	r3, r3
 8008d0c:	461a      	mov	r2, r3
 8008d0e:	693b      	ldr	r3, [r7, #16]
 8008d10:	4413      	add	r3, r2
 8008d12:	613b      	str	r3, [r7, #16]
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	781b      	ldrb	r3, [r3, #0]
 8008d18:	00da      	lsls	r2, r3, #3
 8008d1a:	693b      	ldr	r3, [r7, #16]
 8008d1c:	4413      	add	r3, r2
 8008d1e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008d22:	60fb      	str	r3, [r7, #12]
 8008d24:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008d28:	b29a      	uxth	r2, r3
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	801a      	strh	r2, [r3, #0]
 8008d2e:	f000 bc6f 	b.w	8009610 <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	78db      	ldrb	r3, [r3, #3]
 8008d36:	2b02      	cmp	r3, #2
 8008d38:	f040 831e 	bne.w	8009378 <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	6a1a      	ldr	r2, [r3, #32]
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	691b      	ldr	r3, [r3, #16]
 8008d44:	429a      	cmp	r2, r3
 8008d46:	f240 82cf 	bls.w	80092e8 <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008d4a:	687a      	ldr	r2, [r7, #4]
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	781b      	ldrb	r3, [r3, #0]
 8008d50:	009b      	lsls	r3, r3, #2
 8008d52:	4413      	add	r3, r2
 8008d54:	881b      	ldrh	r3, [r3, #0]
 8008d56:	b29b      	uxth	r3, r3
 8008d58:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008d5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d60:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8008d64:	687a      	ldr	r2, [r7, #4]
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	781b      	ldrb	r3, [r3, #0]
 8008d6a:	009b      	lsls	r3, r3, #2
 8008d6c:	441a      	add	r2, r3
 8008d6e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8008d72:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008d76:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008d7a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8008d7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d82:	b29b      	uxth	r3, r3
 8008d84:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	6a1a      	ldr	r2, [r3, #32]
 8008d8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008d8e:	1ad2      	subs	r2, r2, r3
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008d94:	687a      	ldr	r2, [r7, #4]
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	781b      	ldrb	r3, [r3, #0]
 8008d9a:	009b      	lsls	r3, r3, #2
 8008d9c:	4413      	add	r3, r2
 8008d9e:	881b      	ldrh	r3, [r3, #0]
 8008da0:	b29b      	uxth	r3, r3
 8008da2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	f000 814f 	beq.w	800904a <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	633b      	str	r3, [r7, #48]	@ 0x30
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	785b      	ldrb	r3, [r3, #1]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d16b      	bne.n	8008e90 <USB_EPStartXfer+0x1de>
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008dc2:	b29b      	uxth	r3, r3
 8008dc4:	461a      	mov	r2, r3
 8008dc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dc8:	4413      	add	r3, r2
 8008dca:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	781b      	ldrb	r3, [r3, #0]
 8008dd0:	00da      	lsls	r2, r3, #3
 8008dd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dd4:	4413      	add	r3, r2
 8008dd6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008dda:	627b      	str	r3, [r7, #36]	@ 0x24
 8008ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dde:	881b      	ldrh	r3, [r3, #0]
 8008de0:	b29b      	uxth	r3, r3
 8008de2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008de6:	b29a      	uxth	r2, r3
 8008de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dea:	801a      	strh	r2, [r3, #0]
 8008dec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d10a      	bne.n	8008e0a <USB_EPStartXfer+0x158>
 8008df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008df6:	881b      	ldrh	r3, [r3, #0]
 8008df8:	b29b      	uxth	r3, r3
 8008dfa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008dfe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e02:	b29a      	uxth	r2, r3
 8008e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e06:	801a      	strh	r2, [r3, #0]
 8008e08:	e05b      	b.n	8008ec2 <USB_EPStartXfer+0x210>
 8008e0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008e0e:	2b3e      	cmp	r3, #62	@ 0x3e
 8008e10:	d81c      	bhi.n	8008e4c <USB_EPStartXfer+0x19a>
 8008e12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008e16:	085b      	lsrs	r3, r3, #1
 8008e18:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008e1c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008e20:	f003 0301 	and.w	r3, r3, #1
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d004      	beq.n	8008e32 <USB_EPStartXfer+0x180>
 8008e28:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008e2c:	3301      	adds	r3, #1
 8008e2e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e34:	881b      	ldrh	r3, [r3, #0]
 8008e36:	b29a      	uxth	r2, r3
 8008e38:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008e3c:	b29b      	uxth	r3, r3
 8008e3e:	029b      	lsls	r3, r3, #10
 8008e40:	b29b      	uxth	r3, r3
 8008e42:	4313      	orrs	r3, r2
 8008e44:	b29a      	uxth	r2, r3
 8008e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e48:	801a      	strh	r2, [r3, #0]
 8008e4a:	e03a      	b.n	8008ec2 <USB_EPStartXfer+0x210>
 8008e4c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008e50:	095b      	lsrs	r3, r3, #5
 8008e52:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008e56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008e5a:	f003 031f 	and.w	r3, r3, #31
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d104      	bne.n	8008e6c <USB_EPStartXfer+0x1ba>
 8008e62:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008e66:	3b01      	subs	r3, #1
 8008e68:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e6e:	881b      	ldrh	r3, [r3, #0]
 8008e70:	b29a      	uxth	r2, r3
 8008e72:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008e76:	b29b      	uxth	r3, r3
 8008e78:	029b      	lsls	r3, r3, #10
 8008e7a:	b29b      	uxth	r3, r3
 8008e7c:	4313      	orrs	r3, r2
 8008e7e:	b29b      	uxth	r3, r3
 8008e80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e88:	b29a      	uxth	r2, r3
 8008e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e8c:	801a      	strh	r2, [r3, #0]
 8008e8e:	e018      	b.n	8008ec2 <USB_EPStartXfer+0x210>
 8008e90:	683b      	ldr	r3, [r7, #0]
 8008e92:	785b      	ldrb	r3, [r3, #1]
 8008e94:	2b01      	cmp	r3, #1
 8008e96:	d114      	bne.n	8008ec2 <USB_EPStartXfer+0x210>
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008e9e:	b29b      	uxth	r3, r3
 8008ea0:	461a      	mov	r2, r3
 8008ea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ea4:	4413      	add	r3, r2
 8008ea6:	633b      	str	r3, [r7, #48]	@ 0x30
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	781b      	ldrb	r3, [r3, #0]
 8008eac:	00da      	lsls	r2, r3, #3
 8008eae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eb0:	4413      	add	r3, r2
 8008eb2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008eb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008eb8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008ebc:	b29a      	uxth	r2, r3
 8008ebe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ec0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008ec2:	683b      	ldr	r3, [r7, #0]
 8008ec4:	895b      	ldrh	r3, [r3, #10]
 8008ec6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	6959      	ldr	r1, [r3, #20]
 8008ece:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008ed2:	b29b      	uxth	r3, r3
 8008ed4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008ed8:	6878      	ldr	r0, [r7, #4]
 8008eda:	f000 fdce 	bl	8009a7a <USB_WritePMA>
            ep->xfer_buff += len;
 8008ede:	683b      	ldr	r3, [r7, #0]
 8008ee0:	695a      	ldr	r2, [r3, #20]
 8008ee2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008ee6:	441a      	add	r2, r3
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	6a1a      	ldr	r2, [r3, #32]
 8008ef0:	683b      	ldr	r3, [r7, #0]
 8008ef2:	691b      	ldr	r3, [r3, #16]
 8008ef4:	429a      	cmp	r2, r3
 8008ef6:	d907      	bls.n	8008f08 <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	6a1a      	ldr	r2, [r3, #32]
 8008efc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008f00:	1ad2      	subs	r2, r2, r3
 8008f02:	683b      	ldr	r3, [r7, #0]
 8008f04:	621a      	str	r2, [r3, #32]
 8008f06:	e006      	b.n	8008f16 <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 8008f08:	683b      	ldr	r3, [r7, #0]
 8008f0a:	6a1b      	ldr	r3, [r3, #32]
 8008f0c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	2200      	movs	r2, #0
 8008f14:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008f16:	683b      	ldr	r3, [r7, #0]
 8008f18:	785b      	ldrb	r3, [r3, #1]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d16b      	bne.n	8008ff6 <USB_EPStartXfer+0x344>
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	61bb      	str	r3, [r7, #24]
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008f28:	b29b      	uxth	r3, r3
 8008f2a:	461a      	mov	r2, r3
 8008f2c:	69bb      	ldr	r3, [r7, #24]
 8008f2e:	4413      	add	r3, r2
 8008f30:	61bb      	str	r3, [r7, #24]
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	781b      	ldrb	r3, [r3, #0]
 8008f36:	00da      	lsls	r2, r3, #3
 8008f38:	69bb      	ldr	r3, [r7, #24]
 8008f3a:	4413      	add	r3, r2
 8008f3c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008f40:	617b      	str	r3, [r7, #20]
 8008f42:	697b      	ldr	r3, [r7, #20]
 8008f44:	881b      	ldrh	r3, [r3, #0]
 8008f46:	b29b      	uxth	r3, r3
 8008f48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008f4c:	b29a      	uxth	r2, r3
 8008f4e:	697b      	ldr	r3, [r7, #20]
 8008f50:	801a      	strh	r2, [r3, #0]
 8008f52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d10a      	bne.n	8008f70 <USB_EPStartXfer+0x2be>
 8008f5a:	697b      	ldr	r3, [r7, #20]
 8008f5c:	881b      	ldrh	r3, [r3, #0]
 8008f5e:	b29b      	uxth	r3, r3
 8008f60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f68:	b29a      	uxth	r2, r3
 8008f6a:	697b      	ldr	r3, [r7, #20]
 8008f6c:	801a      	strh	r2, [r3, #0]
 8008f6e:	e05d      	b.n	800902c <USB_EPStartXfer+0x37a>
 8008f70:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008f74:	2b3e      	cmp	r3, #62	@ 0x3e
 8008f76:	d81c      	bhi.n	8008fb2 <USB_EPStartXfer+0x300>
 8008f78:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008f7c:	085b      	lsrs	r3, r3, #1
 8008f7e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008f82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008f86:	f003 0301 	and.w	r3, r3, #1
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d004      	beq.n	8008f98 <USB_EPStartXfer+0x2e6>
 8008f8e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008f92:	3301      	adds	r3, #1
 8008f94:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008f98:	697b      	ldr	r3, [r7, #20]
 8008f9a:	881b      	ldrh	r3, [r3, #0]
 8008f9c:	b29a      	uxth	r2, r3
 8008f9e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008fa2:	b29b      	uxth	r3, r3
 8008fa4:	029b      	lsls	r3, r3, #10
 8008fa6:	b29b      	uxth	r3, r3
 8008fa8:	4313      	orrs	r3, r2
 8008faa:	b29a      	uxth	r2, r3
 8008fac:	697b      	ldr	r3, [r7, #20]
 8008fae:	801a      	strh	r2, [r3, #0]
 8008fb0:	e03c      	b.n	800902c <USB_EPStartXfer+0x37a>
 8008fb2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008fb6:	095b      	lsrs	r3, r3, #5
 8008fb8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008fbc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008fc0:	f003 031f 	and.w	r3, r3, #31
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d104      	bne.n	8008fd2 <USB_EPStartXfer+0x320>
 8008fc8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008fcc:	3b01      	subs	r3, #1
 8008fce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008fd2:	697b      	ldr	r3, [r7, #20]
 8008fd4:	881b      	ldrh	r3, [r3, #0]
 8008fd6:	b29a      	uxth	r2, r3
 8008fd8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008fdc:	b29b      	uxth	r3, r3
 8008fde:	029b      	lsls	r3, r3, #10
 8008fe0:	b29b      	uxth	r3, r3
 8008fe2:	4313      	orrs	r3, r2
 8008fe4:	b29b      	uxth	r3, r3
 8008fe6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008fea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008fee:	b29a      	uxth	r2, r3
 8008ff0:	697b      	ldr	r3, [r7, #20]
 8008ff2:	801a      	strh	r2, [r3, #0]
 8008ff4:	e01a      	b.n	800902c <USB_EPStartXfer+0x37a>
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	785b      	ldrb	r3, [r3, #1]
 8008ffa:	2b01      	cmp	r3, #1
 8008ffc:	d116      	bne.n	800902c <USB_EPStartXfer+0x37a>
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	623b      	str	r3, [r7, #32]
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009008:	b29b      	uxth	r3, r3
 800900a:	461a      	mov	r2, r3
 800900c:	6a3b      	ldr	r3, [r7, #32]
 800900e:	4413      	add	r3, r2
 8009010:	623b      	str	r3, [r7, #32]
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	781b      	ldrb	r3, [r3, #0]
 8009016:	00da      	lsls	r2, r3, #3
 8009018:	6a3b      	ldr	r3, [r7, #32]
 800901a:	4413      	add	r3, r2
 800901c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009020:	61fb      	str	r3, [r7, #28]
 8009022:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009026:	b29a      	uxth	r2, r3
 8009028:	69fb      	ldr	r3, [r7, #28]
 800902a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	891b      	ldrh	r3, [r3, #8]
 8009030:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009034:	683b      	ldr	r3, [r7, #0]
 8009036:	6959      	ldr	r1, [r3, #20]
 8009038:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800903c:	b29b      	uxth	r3, r3
 800903e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009042:	6878      	ldr	r0, [r7, #4]
 8009044:	f000 fd19 	bl	8009a7a <USB_WritePMA>
 8009048:	e2e2      	b.n	8009610 <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	785b      	ldrb	r3, [r3, #1]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d16b      	bne.n	800912a <USB_EPStartXfer+0x478>
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800905c:	b29b      	uxth	r3, r3
 800905e:	461a      	mov	r2, r3
 8009060:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009062:	4413      	add	r3, r2
 8009064:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	781b      	ldrb	r3, [r3, #0]
 800906a:	00da      	lsls	r2, r3, #3
 800906c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800906e:	4413      	add	r3, r2
 8009070:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009074:	647b      	str	r3, [r7, #68]	@ 0x44
 8009076:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009078:	881b      	ldrh	r3, [r3, #0]
 800907a:	b29b      	uxth	r3, r3
 800907c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009080:	b29a      	uxth	r2, r3
 8009082:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009084:	801a      	strh	r2, [r3, #0]
 8009086:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800908a:	2b00      	cmp	r3, #0
 800908c:	d10a      	bne.n	80090a4 <USB_EPStartXfer+0x3f2>
 800908e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009090:	881b      	ldrh	r3, [r3, #0]
 8009092:	b29b      	uxth	r3, r3
 8009094:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009098:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800909c:	b29a      	uxth	r2, r3
 800909e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80090a0:	801a      	strh	r2, [r3, #0]
 80090a2:	e05d      	b.n	8009160 <USB_EPStartXfer+0x4ae>
 80090a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80090a8:	2b3e      	cmp	r3, #62	@ 0x3e
 80090aa:	d81c      	bhi.n	80090e6 <USB_EPStartXfer+0x434>
 80090ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80090b0:	085b      	lsrs	r3, r3, #1
 80090b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80090b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80090ba:	f003 0301 	and.w	r3, r3, #1
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d004      	beq.n	80090cc <USB_EPStartXfer+0x41a>
 80090c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80090c6:	3301      	adds	r3, #1
 80090c8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80090cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80090ce:	881b      	ldrh	r3, [r3, #0]
 80090d0:	b29a      	uxth	r2, r3
 80090d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80090d6:	b29b      	uxth	r3, r3
 80090d8:	029b      	lsls	r3, r3, #10
 80090da:	b29b      	uxth	r3, r3
 80090dc:	4313      	orrs	r3, r2
 80090de:	b29a      	uxth	r2, r3
 80090e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80090e2:	801a      	strh	r2, [r3, #0]
 80090e4:	e03c      	b.n	8009160 <USB_EPStartXfer+0x4ae>
 80090e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80090ea:	095b      	lsrs	r3, r3, #5
 80090ec:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80090f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80090f4:	f003 031f 	and.w	r3, r3, #31
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d104      	bne.n	8009106 <USB_EPStartXfer+0x454>
 80090fc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009100:	3b01      	subs	r3, #1
 8009102:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009106:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009108:	881b      	ldrh	r3, [r3, #0]
 800910a:	b29a      	uxth	r2, r3
 800910c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009110:	b29b      	uxth	r3, r3
 8009112:	029b      	lsls	r3, r3, #10
 8009114:	b29b      	uxth	r3, r3
 8009116:	4313      	orrs	r3, r2
 8009118:	b29b      	uxth	r3, r3
 800911a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800911e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009122:	b29a      	uxth	r2, r3
 8009124:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009126:	801a      	strh	r2, [r3, #0]
 8009128:	e01a      	b.n	8009160 <USB_EPStartXfer+0x4ae>
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	785b      	ldrb	r3, [r3, #1]
 800912e:	2b01      	cmp	r3, #1
 8009130:	d116      	bne.n	8009160 <USB_EPStartXfer+0x4ae>
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	653b      	str	r3, [r7, #80]	@ 0x50
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800913c:	b29b      	uxth	r3, r3
 800913e:	461a      	mov	r2, r3
 8009140:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009142:	4413      	add	r3, r2
 8009144:	653b      	str	r3, [r7, #80]	@ 0x50
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	781b      	ldrb	r3, [r3, #0]
 800914a:	00da      	lsls	r2, r3, #3
 800914c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800914e:	4413      	add	r3, r2
 8009150:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009154:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009156:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800915a:	b29a      	uxth	r2, r3
 800915c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800915e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	891b      	ldrh	r3, [r3, #8]
 8009164:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	6959      	ldr	r1, [r3, #20]
 800916c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009170:	b29b      	uxth	r3, r3
 8009172:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009176:	6878      	ldr	r0, [r7, #4]
 8009178:	f000 fc7f 	bl	8009a7a <USB_WritePMA>
            ep->xfer_buff += len;
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	695a      	ldr	r2, [r3, #20]
 8009180:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009184:	441a      	add	r2, r3
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	6a1a      	ldr	r2, [r3, #32]
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	691b      	ldr	r3, [r3, #16]
 8009192:	429a      	cmp	r2, r3
 8009194:	d907      	bls.n	80091a6 <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	6a1a      	ldr	r2, [r3, #32]
 800919a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800919e:	1ad2      	subs	r2, r2, r3
 80091a0:	683b      	ldr	r3, [r7, #0]
 80091a2:	621a      	str	r2, [r3, #32]
 80091a4:	e006      	b.n	80091b4 <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 80091a6:	683b      	ldr	r3, [r7, #0]
 80091a8:	6a1b      	ldr	r3, [r3, #32]
 80091aa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 80091ae:	683b      	ldr	r3, [r7, #0]
 80091b0:	2200      	movs	r2, #0
 80091b2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	643b      	str	r3, [r7, #64]	@ 0x40
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	785b      	ldrb	r3, [r3, #1]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d16b      	bne.n	8009298 <USB_EPStartXfer+0x5e6>
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80091ca:	b29b      	uxth	r3, r3
 80091cc:	461a      	mov	r2, r3
 80091ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091d0:	4413      	add	r3, r2
 80091d2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	781b      	ldrb	r3, [r3, #0]
 80091d8:	00da      	lsls	r2, r3, #3
 80091da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091dc:	4413      	add	r3, r2
 80091de:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80091e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80091e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091e6:	881b      	ldrh	r3, [r3, #0]
 80091e8:	b29b      	uxth	r3, r3
 80091ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80091ee:	b29a      	uxth	r2, r3
 80091f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091f2:	801a      	strh	r2, [r3, #0]
 80091f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d10a      	bne.n	8009212 <USB_EPStartXfer+0x560>
 80091fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091fe:	881b      	ldrh	r3, [r3, #0]
 8009200:	b29b      	uxth	r3, r3
 8009202:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009206:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800920a:	b29a      	uxth	r2, r3
 800920c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800920e:	801a      	strh	r2, [r3, #0]
 8009210:	e05b      	b.n	80092ca <USB_EPStartXfer+0x618>
 8009212:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009216:	2b3e      	cmp	r3, #62	@ 0x3e
 8009218:	d81c      	bhi.n	8009254 <USB_EPStartXfer+0x5a2>
 800921a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800921e:	085b      	lsrs	r3, r3, #1
 8009220:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009224:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009228:	f003 0301 	and.w	r3, r3, #1
 800922c:	2b00      	cmp	r3, #0
 800922e:	d004      	beq.n	800923a <USB_EPStartXfer+0x588>
 8009230:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009234:	3301      	adds	r3, #1
 8009236:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800923a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800923c:	881b      	ldrh	r3, [r3, #0]
 800923e:	b29a      	uxth	r2, r3
 8009240:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009244:	b29b      	uxth	r3, r3
 8009246:	029b      	lsls	r3, r3, #10
 8009248:	b29b      	uxth	r3, r3
 800924a:	4313      	orrs	r3, r2
 800924c:	b29a      	uxth	r2, r3
 800924e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009250:	801a      	strh	r2, [r3, #0]
 8009252:	e03a      	b.n	80092ca <USB_EPStartXfer+0x618>
 8009254:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009258:	095b      	lsrs	r3, r3, #5
 800925a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800925e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009262:	f003 031f 	and.w	r3, r3, #31
 8009266:	2b00      	cmp	r3, #0
 8009268:	d104      	bne.n	8009274 <USB_EPStartXfer+0x5c2>
 800926a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800926e:	3b01      	subs	r3, #1
 8009270:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009274:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009276:	881b      	ldrh	r3, [r3, #0]
 8009278:	b29a      	uxth	r2, r3
 800927a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800927e:	b29b      	uxth	r3, r3
 8009280:	029b      	lsls	r3, r3, #10
 8009282:	b29b      	uxth	r3, r3
 8009284:	4313      	orrs	r3, r2
 8009286:	b29b      	uxth	r3, r3
 8009288:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800928c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009290:	b29a      	uxth	r2, r3
 8009292:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009294:	801a      	strh	r2, [r3, #0]
 8009296:	e018      	b.n	80092ca <USB_EPStartXfer+0x618>
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	785b      	ldrb	r3, [r3, #1]
 800929c:	2b01      	cmp	r3, #1
 800929e:	d114      	bne.n	80092ca <USB_EPStartXfer+0x618>
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80092a6:	b29b      	uxth	r3, r3
 80092a8:	461a      	mov	r2, r3
 80092aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80092ac:	4413      	add	r3, r2
 80092ae:	643b      	str	r3, [r7, #64]	@ 0x40
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	781b      	ldrb	r3, [r3, #0]
 80092b4:	00da      	lsls	r2, r3, #3
 80092b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80092b8:	4413      	add	r3, r2
 80092ba:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80092be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80092c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80092c4:	b29a      	uxth	r2, r3
 80092c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092c8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80092ca:	683b      	ldr	r3, [r7, #0]
 80092cc:	895b      	ldrh	r3, [r3, #10]
 80092ce:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	6959      	ldr	r1, [r3, #20]
 80092d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80092da:	b29b      	uxth	r3, r3
 80092dc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80092e0:	6878      	ldr	r0, [r7, #4]
 80092e2:	f000 fbca 	bl	8009a7a <USB_WritePMA>
 80092e6:	e193      	b.n	8009610 <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	6a1b      	ldr	r3, [r3, #32]
 80092ec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80092f0:	687a      	ldr	r2, [r7, #4]
 80092f2:	683b      	ldr	r3, [r7, #0]
 80092f4:	781b      	ldrb	r3, [r3, #0]
 80092f6:	009b      	lsls	r3, r3, #2
 80092f8:	4413      	add	r3, r2
 80092fa:	881b      	ldrh	r3, [r3, #0]
 80092fc:	b29b      	uxth	r3, r3
 80092fe:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8009302:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009306:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800930a:	687a      	ldr	r2, [r7, #4]
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	781b      	ldrb	r3, [r3, #0]
 8009310:	009b      	lsls	r3, r3, #2
 8009312:	441a      	add	r2, r3
 8009314:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8009318:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800931c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009320:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009324:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009328:	b29b      	uxth	r3, r3
 800932a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009336:	b29b      	uxth	r3, r3
 8009338:	461a      	mov	r2, r3
 800933a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800933c:	4413      	add	r3, r2
 800933e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	781b      	ldrb	r3, [r3, #0]
 8009344:	00da      	lsls	r2, r3, #3
 8009346:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009348:	4413      	add	r3, r2
 800934a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800934e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009350:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009354:	b29a      	uxth	r2, r3
 8009356:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009358:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800935a:	683b      	ldr	r3, [r7, #0]
 800935c:	891b      	ldrh	r3, [r3, #8]
 800935e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	6959      	ldr	r1, [r3, #20]
 8009366:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800936a:	b29b      	uxth	r3, r3
 800936c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009370:	6878      	ldr	r0, [r7, #4]
 8009372:	f000 fb82 	bl	8009a7a <USB_WritePMA>
 8009376:	e14b      	b.n	8009610 <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	6a1a      	ldr	r2, [r3, #32]
 800937c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009380:	1ad2      	subs	r2, r2, r3
 8009382:	683b      	ldr	r3, [r7, #0]
 8009384:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009386:	687a      	ldr	r2, [r7, #4]
 8009388:	683b      	ldr	r3, [r7, #0]
 800938a:	781b      	ldrb	r3, [r3, #0]
 800938c:	009b      	lsls	r3, r3, #2
 800938e:	4413      	add	r3, r2
 8009390:	881b      	ldrh	r3, [r3, #0]
 8009392:	b29b      	uxth	r3, r3
 8009394:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009398:	2b00      	cmp	r3, #0
 800939a:	f000 809a 	beq.w	80094d2 <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	673b      	str	r3, [r7, #112]	@ 0x70
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	785b      	ldrb	r3, [r3, #1]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d16b      	bne.n	8009482 <USB_EPStartXfer+0x7d0>
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	66bb      	str	r3, [r7, #104]	@ 0x68
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80093b4:	b29b      	uxth	r3, r3
 80093b6:	461a      	mov	r2, r3
 80093b8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80093ba:	4413      	add	r3, r2
 80093bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	781b      	ldrb	r3, [r3, #0]
 80093c2:	00da      	lsls	r2, r3, #3
 80093c4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80093c6:	4413      	add	r3, r2
 80093c8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80093cc:	667b      	str	r3, [r7, #100]	@ 0x64
 80093ce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80093d0:	881b      	ldrh	r3, [r3, #0]
 80093d2:	b29b      	uxth	r3, r3
 80093d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80093d8:	b29a      	uxth	r2, r3
 80093da:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80093dc:	801a      	strh	r2, [r3, #0]
 80093de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d10a      	bne.n	80093fc <USB_EPStartXfer+0x74a>
 80093e6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80093e8:	881b      	ldrh	r3, [r3, #0]
 80093ea:	b29b      	uxth	r3, r3
 80093ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80093f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80093f4:	b29a      	uxth	r2, r3
 80093f6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80093f8:	801a      	strh	r2, [r3, #0]
 80093fa:	e05b      	b.n	80094b4 <USB_EPStartXfer+0x802>
 80093fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009400:	2b3e      	cmp	r3, #62	@ 0x3e
 8009402:	d81c      	bhi.n	800943e <USB_EPStartXfer+0x78c>
 8009404:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009408:	085b      	lsrs	r3, r3, #1
 800940a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800940e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009412:	f003 0301 	and.w	r3, r3, #1
 8009416:	2b00      	cmp	r3, #0
 8009418:	d004      	beq.n	8009424 <USB_EPStartXfer+0x772>
 800941a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800941e:	3301      	adds	r3, #1
 8009420:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009424:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009426:	881b      	ldrh	r3, [r3, #0]
 8009428:	b29a      	uxth	r2, r3
 800942a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800942e:	b29b      	uxth	r3, r3
 8009430:	029b      	lsls	r3, r3, #10
 8009432:	b29b      	uxth	r3, r3
 8009434:	4313      	orrs	r3, r2
 8009436:	b29a      	uxth	r2, r3
 8009438:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800943a:	801a      	strh	r2, [r3, #0]
 800943c:	e03a      	b.n	80094b4 <USB_EPStartXfer+0x802>
 800943e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009442:	095b      	lsrs	r3, r3, #5
 8009444:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009448:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800944c:	f003 031f 	and.w	r3, r3, #31
 8009450:	2b00      	cmp	r3, #0
 8009452:	d104      	bne.n	800945e <USB_EPStartXfer+0x7ac>
 8009454:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009458:	3b01      	subs	r3, #1
 800945a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800945e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009460:	881b      	ldrh	r3, [r3, #0]
 8009462:	b29a      	uxth	r2, r3
 8009464:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009468:	b29b      	uxth	r3, r3
 800946a:	029b      	lsls	r3, r3, #10
 800946c:	b29b      	uxth	r3, r3
 800946e:	4313      	orrs	r3, r2
 8009470:	b29b      	uxth	r3, r3
 8009472:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009476:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800947a:	b29a      	uxth	r2, r3
 800947c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800947e:	801a      	strh	r2, [r3, #0]
 8009480:	e018      	b.n	80094b4 <USB_EPStartXfer+0x802>
 8009482:	683b      	ldr	r3, [r7, #0]
 8009484:	785b      	ldrb	r3, [r3, #1]
 8009486:	2b01      	cmp	r3, #1
 8009488:	d114      	bne.n	80094b4 <USB_EPStartXfer+0x802>
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009490:	b29b      	uxth	r3, r3
 8009492:	461a      	mov	r2, r3
 8009494:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009496:	4413      	add	r3, r2
 8009498:	673b      	str	r3, [r7, #112]	@ 0x70
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	781b      	ldrb	r3, [r3, #0]
 800949e:	00da      	lsls	r2, r3, #3
 80094a0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80094a2:	4413      	add	r3, r2
 80094a4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80094a8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80094aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80094ae:	b29a      	uxth	r2, r3
 80094b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80094b2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80094b4:	683b      	ldr	r3, [r7, #0]
 80094b6:	895b      	ldrh	r3, [r3, #10]
 80094b8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80094bc:	683b      	ldr	r3, [r7, #0]
 80094be:	6959      	ldr	r1, [r3, #20]
 80094c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80094c4:	b29b      	uxth	r3, r3
 80094c6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80094ca:	6878      	ldr	r0, [r7, #4]
 80094cc:	f000 fad5 	bl	8009a7a <USB_WritePMA>
 80094d0:	e09e      	b.n	8009610 <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	785b      	ldrb	r3, [r3, #1]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d16b      	bne.n	80095b2 <USB_EPStartXfer+0x900>
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80094e4:	b29b      	uxth	r3, r3
 80094e6:	461a      	mov	r2, r3
 80094e8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80094ea:	4413      	add	r3, r2
 80094ec:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80094ee:	683b      	ldr	r3, [r7, #0]
 80094f0:	781b      	ldrb	r3, [r3, #0]
 80094f2:	00da      	lsls	r2, r3, #3
 80094f4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80094f6:	4413      	add	r3, r2
 80094f8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80094fc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80094fe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009500:	881b      	ldrh	r3, [r3, #0]
 8009502:	b29b      	uxth	r3, r3
 8009504:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009508:	b29a      	uxth	r2, r3
 800950a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800950c:	801a      	strh	r2, [r3, #0]
 800950e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009512:	2b00      	cmp	r3, #0
 8009514:	d10a      	bne.n	800952c <USB_EPStartXfer+0x87a>
 8009516:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009518:	881b      	ldrh	r3, [r3, #0]
 800951a:	b29b      	uxth	r3, r3
 800951c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009520:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009524:	b29a      	uxth	r2, r3
 8009526:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009528:	801a      	strh	r2, [r3, #0]
 800952a:	e063      	b.n	80095f4 <USB_EPStartXfer+0x942>
 800952c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009530:	2b3e      	cmp	r3, #62	@ 0x3e
 8009532:	d81c      	bhi.n	800956e <USB_EPStartXfer+0x8bc>
 8009534:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009538:	085b      	lsrs	r3, r3, #1
 800953a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800953e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009542:	f003 0301 	and.w	r3, r3, #1
 8009546:	2b00      	cmp	r3, #0
 8009548:	d004      	beq.n	8009554 <USB_EPStartXfer+0x8a2>
 800954a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800954e:	3301      	adds	r3, #1
 8009550:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009554:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009556:	881b      	ldrh	r3, [r3, #0]
 8009558:	b29a      	uxth	r2, r3
 800955a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800955e:	b29b      	uxth	r3, r3
 8009560:	029b      	lsls	r3, r3, #10
 8009562:	b29b      	uxth	r3, r3
 8009564:	4313      	orrs	r3, r2
 8009566:	b29a      	uxth	r2, r3
 8009568:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800956a:	801a      	strh	r2, [r3, #0]
 800956c:	e042      	b.n	80095f4 <USB_EPStartXfer+0x942>
 800956e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009572:	095b      	lsrs	r3, r3, #5
 8009574:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009578:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800957c:	f003 031f 	and.w	r3, r3, #31
 8009580:	2b00      	cmp	r3, #0
 8009582:	d104      	bne.n	800958e <USB_EPStartXfer+0x8dc>
 8009584:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009588:	3b01      	subs	r3, #1
 800958a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800958e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009590:	881b      	ldrh	r3, [r3, #0]
 8009592:	b29a      	uxth	r2, r3
 8009594:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009598:	b29b      	uxth	r3, r3
 800959a:	029b      	lsls	r3, r3, #10
 800959c:	b29b      	uxth	r3, r3
 800959e:	4313      	orrs	r3, r2
 80095a0:	b29b      	uxth	r3, r3
 80095a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80095a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80095aa:	b29a      	uxth	r2, r3
 80095ac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80095ae:	801a      	strh	r2, [r3, #0]
 80095b0:	e020      	b.n	80095f4 <USB_EPStartXfer+0x942>
 80095b2:	683b      	ldr	r3, [r7, #0]
 80095b4:	785b      	ldrb	r3, [r3, #1]
 80095b6:	2b01      	cmp	r3, #1
 80095b8:	d11c      	bne.n	80095f4 <USB_EPStartXfer+0x942>
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80095c6:	b29b      	uxth	r3, r3
 80095c8:	461a      	mov	r2, r3
 80095ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80095ce:	4413      	add	r3, r2
 80095d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80095d4:	683b      	ldr	r3, [r7, #0]
 80095d6:	781b      	ldrb	r3, [r3, #0]
 80095d8:	00da      	lsls	r2, r3, #3
 80095da:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80095de:	4413      	add	r3, r2
 80095e0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80095e4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80095e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80095ec:	b29a      	uxth	r2, r3
 80095ee:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80095f2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	891b      	ldrh	r3, [r3, #8]
 80095f8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	6959      	ldr	r1, [r3, #20]
 8009600:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009604:	b29b      	uxth	r3, r3
 8009606:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800960a:	6878      	ldr	r0, [r7, #4]
 800960c:	f000 fa35 	bl	8009a7a <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8009610:	687a      	ldr	r2, [r7, #4]
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	781b      	ldrb	r3, [r3, #0]
 8009616:	009b      	lsls	r3, r3, #2
 8009618:	4413      	add	r3, r2
 800961a:	881b      	ldrh	r3, [r3, #0]
 800961c:	b29b      	uxth	r3, r3
 800961e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009622:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009626:	817b      	strh	r3, [r7, #10]
 8009628:	897b      	ldrh	r3, [r7, #10]
 800962a:	f083 0310 	eor.w	r3, r3, #16
 800962e:	817b      	strh	r3, [r7, #10]
 8009630:	897b      	ldrh	r3, [r7, #10]
 8009632:	f083 0320 	eor.w	r3, r3, #32
 8009636:	817b      	strh	r3, [r7, #10]
 8009638:	687a      	ldr	r2, [r7, #4]
 800963a:	683b      	ldr	r3, [r7, #0]
 800963c:	781b      	ldrb	r3, [r3, #0]
 800963e:	009b      	lsls	r3, r3, #2
 8009640:	441a      	add	r2, r3
 8009642:	897b      	ldrh	r3, [r7, #10]
 8009644:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009648:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800964c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009650:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009654:	b29b      	uxth	r3, r3
 8009656:	8013      	strh	r3, [r2, #0]
 8009658:	e0d5      	b.n	8009806 <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800965a:	683b      	ldr	r3, [r7, #0]
 800965c:	7b1b      	ldrb	r3, [r3, #12]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d156      	bne.n	8009710 <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 8009662:	683b      	ldr	r3, [r7, #0]
 8009664:	699b      	ldr	r3, [r3, #24]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d122      	bne.n	80096b0 <USB_EPStartXfer+0x9fe>
 800966a:	683b      	ldr	r3, [r7, #0]
 800966c:	78db      	ldrb	r3, [r3, #3]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d11e      	bne.n	80096b0 <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 8009672:	687a      	ldr	r2, [r7, #4]
 8009674:	683b      	ldr	r3, [r7, #0]
 8009676:	781b      	ldrb	r3, [r3, #0]
 8009678:	009b      	lsls	r3, r3, #2
 800967a:	4413      	add	r3, r2
 800967c:	881b      	ldrh	r3, [r3, #0]
 800967e:	b29b      	uxth	r3, r3
 8009680:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009684:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009688:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 800968c:	687a      	ldr	r2, [r7, #4]
 800968e:	683b      	ldr	r3, [r7, #0]
 8009690:	781b      	ldrb	r3, [r3, #0]
 8009692:	009b      	lsls	r3, r3, #2
 8009694:	441a      	add	r2, r3
 8009696:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800969a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800969e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80096a2:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80096a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80096aa:	b29b      	uxth	r3, r3
 80096ac:	8013      	strh	r3, [r2, #0]
 80096ae:	e01d      	b.n	80096ec <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 80096b0:	687a      	ldr	r2, [r7, #4]
 80096b2:	683b      	ldr	r3, [r7, #0]
 80096b4:	781b      	ldrb	r3, [r3, #0]
 80096b6:	009b      	lsls	r3, r3, #2
 80096b8:	4413      	add	r3, r2
 80096ba:	881b      	ldrh	r3, [r3, #0]
 80096bc:	b29b      	uxth	r3, r3
 80096be:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80096c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80096c6:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 80096ca:	687a      	ldr	r2, [r7, #4]
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	781b      	ldrb	r3, [r3, #0]
 80096d0:	009b      	lsls	r3, r3, #2
 80096d2:	441a      	add	r2, r3
 80096d4:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 80096d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80096dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80096e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80096e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80096e8:	b29b      	uxth	r3, r3
 80096ea:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	699a      	ldr	r2, [r3, #24]
 80096f0:	683b      	ldr	r3, [r7, #0]
 80096f2:	691b      	ldr	r3, [r3, #16]
 80096f4:	429a      	cmp	r2, r3
 80096f6:	d907      	bls.n	8009708 <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	699a      	ldr	r2, [r3, #24]
 80096fc:	683b      	ldr	r3, [r7, #0]
 80096fe:	691b      	ldr	r3, [r3, #16]
 8009700:	1ad2      	subs	r2, r2, r3
 8009702:	683b      	ldr	r3, [r7, #0]
 8009704:	619a      	str	r2, [r3, #24]
 8009706:	e054      	b.n	80097b2 <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 8009708:	683b      	ldr	r3, [r7, #0]
 800970a:	2200      	movs	r2, #0
 800970c:	619a      	str	r2, [r3, #24]
 800970e:	e050      	b.n	80097b2 <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8009710:	683b      	ldr	r3, [r7, #0]
 8009712:	78db      	ldrb	r3, [r3, #3]
 8009714:	2b02      	cmp	r3, #2
 8009716:	d142      	bne.n	800979e <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	69db      	ldr	r3, [r3, #28]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d048      	beq.n	80097b2 <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8009720:	687a      	ldr	r2, [r7, #4]
 8009722:	683b      	ldr	r3, [r7, #0]
 8009724:	781b      	ldrb	r3, [r3, #0]
 8009726:	009b      	lsls	r3, r3, #2
 8009728:	4413      	add	r3, r2
 800972a:	881b      	ldrh	r3, [r3, #0]
 800972c:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009730:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8009734:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009738:	2b00      	cmp	r3, #0
 800973a:	d005      	beq.n	8009748 <USB_EPStartXfer+0xa96>
 800973c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8009740:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009744:	2b00      	cmp	r3, #0
 8009746:	d10b      	bne.n	8009760 <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009748:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800974c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009750:	2b00      	cmp	r3, #0
 8009752:	d12e      	bne.n	80097b2 <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009754:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8009758:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800975c:	2b00      	cmp	r3, #0
 800975e:	d128      	bne.n	80097b2 <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8009760:	687a      	ldr	r2, [r7, #4]
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	781b      	ldrb	r3, [r3, #0]
 8009766:	009b      	lsls	r3, r3, #2
 8009768:	4413      	add	r3, r2
 800976a:	881b      	ldrh	r3, [r3, #0]
 800976c:	b29b      	uxth	r3, r3
 800976e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009772:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009776:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 800977a:	687a      	ldr	r2, [r7, #4]
 800977c:	683b      	ldr	r3, [r7, #0]
 800977e:	781b      	ldrb	r3, [r3, #0]
 8009780:	009b      	lsls	r3, r3, #2
 8009782:	441a      	add	r2, r3
 8009784:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 8009788:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800978c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009790:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009794:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009798:	b29b      	uxth	r3, r3
 800979a:	8013      	strh	r3, [r2, #0]
 800979c:	e009      	b.n	80097b2 <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800979e:	683b      	ldr	r3, [r7, #0]
 80097a0:	78db      	ldrb	r3, [r3, #3]
 80097a2:	2b01      	cmp	r3, #1
 80097a4:	d103      	bne.n	80097ae <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	2200      	movs	r2, #0
 80097aa:	619a      	str	r2, [r3, #24]
 80097ac:	e001      	b.n	80097b2 <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 80097ae:	2301      	movs	r3, #1
 80097b0:	e02a      	b.n	8009808 <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80097b2:	687a      	ldr	r2, [r7, #4]
 80097b4:	683b      	ldr	r3, [r7, #0]
 80097b6:	781b      	ldrb	r3, [r3, #0]
 80097b8:	009b      	lsls	r3, r3, #2
 80097ba:	4413      	add	r3, r2
 80097bc:	881b      	ldrh	r3, [r3, #0]
 80097be:	b29b      	uxth	r3, r3
 80097c0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80097c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80097c8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80097cc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80097d0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80097d4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80097d8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80097dc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80097e0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80097e4:	687a      	ldr	r2, [r7, #4]
 80097e6:	683b      	ldr	r3, [r7, #0]
 80097e8:	781b      	ldrb	r3, [r3, #0]
 80097ea:	009b      	lsls	r3, r3, #2
 80097ec:	441a      	add	r2, r3
 80097ee:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80097f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80097f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80097fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80097fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009802:	b29b      	uxth	r3, r3
 8009804:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009806:	2300      	movs	r3, #0
}
 8009808:	4618      	mov	r0, r3
 800980a:	37b0      	adds	r7, #176	@ 0xb0
 800980c:	46bd      	mov	sp, r7
 800980e:	bd80      	pop	{r7, pc}

08009810 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009810:	b480      	push	{r7}
 8009812:	b085      	sub	sp, #20
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
 8009818:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800981a:	683b      	ldr	r3, [r7, #0]
 800981c:	785b      	ldrb	r3, [r3, #1]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d020      	beq.n	8009864 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8009822:	687a      	ldr	r2, [r7, #4]
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	781b      	ldrb	r3, [r3, #0]
 8009828:	009b      	lsls	r3, r3, #2
 800982a:	4413      	add	r3, r2
 800982c:	881b      	ldrh	r3, [r3, #0]
 800982e:	b29b      	uxth	r3, r3
 8009830:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009834:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009838:	81bb      	strh	r3, [r7, #12]
 800983a:	89bb      	ldrh	r3, [r7, #12]
 800983c:	f083 0310 	eor.w	r3, r3, #16
 8009840:	81bb      	strh	r3, [r7, #12]
 8009842:	687a      	ldr	r2, [r7, #4]
 8009844:	683b      	ldr	r3, [r7, #0]
 8009846:	781b      	ldrb	r3, [r3, #0]
 8009848:	009b      	lsls	r3, r3, #2
 800984a:	441a      	add	r2, r3
 800984c:	89bb      	ldrh	r3, [r7, #12]
 800984e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009852:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009856:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800985a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800985e:	b29b      	uxth	r3, r3
 8009860:	8013      	strh	r3, [r2, #0]
 8009862:	e01f      	b.n	80098a4 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8009864:	687a      	ldr	r2, [r7, #4]
 8009866:	683b      	ldr	r3, [r7, #0]
 8009868:	781b      	ldrb	r3, [r3, #0]
 800986a:	009b      	lsls	r3, r3, #2
 800986c:	4413      	add	r3, r2
 800986e:	881b      	ldrh	r3, [r3, #0]
 8009870:	b29b      	uxth	r3, r3
 8009872:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009876:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800987a:	81fb      	strh	r3, [r7, #14]
 800987c:	89fb      	ldrh	r3, [r7, #14]
 800987e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009882:	81fb      	strh	r3, [r7, #14]
 8009884:	687a      	ldr	r2, [r7, #4]
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	781b      	ldrb	r3, [r3, #0]
 800988a:	009b      	lsls	r3, r3, #2
 800988c:	441a      	add	r2, r3
 800988e:	89fb      	ldrh	r3, [r7, #14]
 8009890:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009894:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009898:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800989c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80098a0:	b29b      	uxth	r3, r3
 80098a2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80098a4:	2300      	movs	r3, #0
}
 80098a6:	4618      	mov	r0, r3
 80098a8:	3714      	adds	r7, #20
 80098aa:	46bd      	mov	sp, r7
 80098ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b0:	4770      	bx	lr

080098b2 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80098b2:	b480      	push	{r7}
 80098b4:	b087      	sub	sp, #28
 80098b6:	af00      	add	r7, sp, #0
 80098b8:	6078      	str	r0, [r7, #4]
 80098ba:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80098bc:	683b      	ldr	r3, [r7, #0]
 80098be:	785b      	ldrb	r3, [r3, #1]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d04c      	beq.n	800995e <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80098c4:	687a      	ldr	r2, [r7, #4]
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	781b      	ldrb	r3, [r3, #0]
 80098ca:	009b      	lsls	r3, r3, #2
 80098cc:	4413      	add	r3, r2
 80098ce:	881b      	ldrh	r3, [r3, #0]
 80098d0:	823b      	strh	r3, [r7, #16]
 80098d2:	8a3b      	ldrh	r3, [r7, #16]
 80098d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d01b      	beq.n	8009914 <USB_EPClearStall+0x62>
 80098dc:	687a      	ldr	r2, [r7, #4]
 80098de:	683b      	ldr	r3, [r7, #0]
 80098e0:	781b      	ldrb	r3, [r3, #0]
 80098e2:	009b      	lsls	r3, r3, #2
 80098e4:	4413      	add	r3, r2
 80098e6:	881b      	ldrh	r3, [r3, #0]
 80098e8:	b29b      	uxth	r3, r3
 80098ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80098ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80098f2:	81fb      	strh	r3, [r7, #14]
 80098f4:	687a      	ldr	r2, [r7, #4]
 80098f6:	683b      	ldr	r3, [r7, #0]
 80098f8:	781b      	ldrb	r3, [r3, #0]
 80098fa:	009b      	lsls	r3, r3, #2
 80098fc:	441a      	add	r2, r3
 80098fe:	89fb      	ldrh	r3, [r7, #14]
 8009900:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009904:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009908:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800990c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009910:	b29b      	uxth	r3, r3
 8009912:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8009914:	683b      	ldr	r3, [r7, #0]
 8009916:	78db      	ldrb	r3, [r3, #3]
 8009918:	2b01      	cmp	r3, #1
 800991a:	d06c      	beq.n	80099f6 <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800991c:	687a      	ldr	r2, [r7, #4]
 800991e:	683b      	ldr	r3, [r7, #0]
 8009920:	781b      	ldrb	r3, [r3, #0]
 8009922:	009b      	lsls	r3, r3, #2
 8009924:	4413      	add	r3, r2
 8009926:	881b      	ldrh	r3, [r3, #0]
 8009928:	b29b      	uxth	r3, r3
 800992a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800992e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009932:	81bb      	strh	r3, [r7, #12]
 8009934:	89bb      	ldrh	r3, [r7, #12]
 8009936:	f083 0320 	eor.w	r3, r3, #32
 800993a:	81bb      	strh	r3, [r7, #12]
 800993c:	687a      	ldr	r2, [r7, #4]
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	781b      	ldrb	r3, [r3, #0]
 8009942:	009b      	lsls	r3, r3, #2
 8009944:	441a      	add	r2, r3
 8009946:	89bb      	ldrh	r3, [r7, #12]
 8009948:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800994c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009950:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009954:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009958:	b29b      	uxth	r3, r3
 800995a:	8013      	strh	r3, [r2, #0]
 800995c:	e04b      	b.n	80099f6 <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800995e:	687a      	ldr	r2, [r7, #4]
 8009960:	683b      	ldr	r3, [r7, #0]
 8009962:	781b      	ldrb	r3, [r3, #0]
 8009964:	009b      	lsls	r3, r3, #2
 8009966:	4413      	add	r3, r2
 8009968:	881b      	ldrh	r3, [r3, #0]
 800996a:	82fb      	strh	r3, [r7, #22]
 800996c:	8afb      	ldrh	r3, [r7, #22]
 800996e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009972:	2b00      	cmp	r3, #0
 8009974:	d01b      	beq.n	80099ae <USB_EPClearStall+0xfc>
 8009976:	687a      	ldr	r2, [r7, #4]
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	781b      	ldrb	r3, [r3, #0]
 800997c:	009b      	lsls	r3, r3, #2
 800997e:	4413      	add	r3, r2
 8009980:	881b      	ldrh	r3, [r3, #0]
 8009982:	b29b      	uxth	r3, r3
 8009984:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009988:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800998c:	82bb      	strh	r3, [r7, #20]
 800998e:	687a      	ldr	r2, [r7, #4]
 8009990:	683b      	ldr	r3, [r7, #0]
 8009992:	781b      	ldrb	r3, [r3, #0]
 8009994:	009b      	lsls	r3, r3, #2
 8009996:	441a      	add	r2, r3
 8009998:	8abb      	ldrh	r3, [r7, #20]
 800999a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800999e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80099a2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80099a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80099aa:	b29b      	uxth	r3, r3
 80099ac:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80099ae:	687a      	ldr	r2, [r7, #4]
 80099b0:	683b      	ldr	r3, [r7, #0]
 80099b2:	781b      	ldrb	r3, [r3, #0]
 80099b4:	009b      	lsls	r3, r3, #2
 80099b6:	4413      	add	r3, r2
 80099b8:	881b      	ldrh	r3, [r3, #0]
 80099ba:	b29b      	uxth	r3, r3
 80099bc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80099c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80099c4:	827b      	strh	r3, [r7, #18]
 80099c6:	8a7b      	ldrh	r3, [r7, #18]
 80099c8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80099cc:	827b      	strh	r3, [r7, #18]
 80099ce:	8a7b      	ldrh	r3, [r7, #18]
 80099d0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80099d4:	827b      	strh	r3, [r7, #18]
 80099d6:	687a      	ldr	r2, [r7, #4]
 80099d8:	683b      	ldr	r3, [r7, #0]
 80099da:	781b      	ldrb	r3, [r3, #0]
 80099dc:	009b      	lsls	r3, r3, #2
 80099de:	441a      	add	r2, r3
 80099e0:	8a7b      	ldrh	r3, [r7, #18]
 80099e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80099e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80099ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80099ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80099f2:	b29b      	uxth	r3, r3
 80099f4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80099f6:	2300      	movs	r3, #0
}
 80099f8:	4618      	mov	r0, r3
 80099fa:	371c      	adds	r7, #28
 80099fc:	46bd      	mov	sp, r7
 80099fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a02:	4770      	bx	lr

08009a04 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8009a04:	b480      	push	{r7}
 8009a06:	b083      	sub	sp, #12
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
 8009a0c:	460b      	mov	r3, r1
 8009a0e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8009a10:	78fb      	ldrb	r3, [r7, #3]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d103      	bne.n	8009a1e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	2280      	movs	r2, #128	@ 0x80
 8009a1a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8009a1e:	2300      	movs	r3, #0
}
 8009a20:	4618      	mov	r0, r3
 8009a22:	370c      	adds	r7, #12
 8009a24:	46bd      	mov	sp, r7
 8009a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2a:	4770      	bx	lr

08009a2c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8009a2c:	b480      	push	{r7}
 8009a2e:	b083      	sub	sp, #12
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8009a3a:	b29b      	uxth	r3, r3
 8009a3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a44:	b29a      	uxth	r2, r3
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8009a4c:	2300      	movs	r3, #0
}
 8009a4e:	4618      	mov	r0, r3
 8009a50:	370c      	adds	r7, #12
 8009a52:	46bd      	mov	sp, r7
 8009a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a58:	4770      	bx	lr

08009a5a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8009a5a:	b480      	push	{r7}
 8009a5c:	b085      	sub	sp, #20
 8009a5e:	af00      	add	r7, sp, #0
 8009a60:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8009a68:	b29b      	uxth	r3, r3
 8009a6a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8009a6c:	68fb      	ldr	r3, [r7, #12]
}
 8009a6e:	4618      	mov	r0, r3
 8009a70:	3714      	adds	r7, #20
 8009a72:	46bd      	mov	sp, r7
 8009a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a78:	4770      	bx	lr

08009a7a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009a7a:	b480      	push	{r7}
 8009a7c:	b08b      	sub	sp, #44	@ 0x2c
 8009a7e:	af00      	add	r7, sp, #0
 8009a80:	60f8      	str	r0, [r7, #12]
 8009a82:	60b9      	str	r1, [r7, #8]
 8009a84:	4611      	mov	r1, r2
 8009a86:	461a      	mov	r2, r3
 8009a88:	460b      	mov	r3, r1
 8009a8a:	80fb      	strh	r3, [r7, #6]
 8009a8c:	4613      	mov	r3, r2
 8009a8e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009a90:	88bb      	ldrh	r3, [r7, #4]
 8009a92:	3301      	adds	r3, #1
 8009a94:	085b      	lsrs	r3, r3, #1
 8009a96:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009a9c:	68bb      	ldr	r3, [r7, #8]
 8009a9e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009aa0:	88fa      	ldrh	r2, [r7, #6]
 8009aa2:	697b      	ldr	r3, [r7, #20]
 8009aa4:	4413      	add	r3, r2
 8009aa6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009aaa:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8009aac:	69bb      	ldr	r3, [r7, #24]
 8009aae:	627b      	str	r3, [r7, #36]	@ 0x24
 8009ab0:	e01b      	b.n	8009aea <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8009ab2:	69fb      	ldr	r3, [r7, #28]
 8009ab4:	781b      	ldrb	r3, [r3, #0]
 8009ab6:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8009ab8:	69fb      	ldr	r3, [r7, #28]
 8009aba:	3301      	adds	r3, #1
 8009abc:	781b      	ldrb	r3, [r3, #0]
 8009abe:	021b      	lsls	r3, r3, #8
 8009ac0:	b21a      	sxth	r2, r3
 8009ac2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009ac6:	4313      	orrs	r3, r2
 8009ac8:	b21b      	sxth	r3, r3
 8009aca:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8009acc:	6a3b      	ldr	r3, [r7, #32]
 8009ace:	8a7a      	ldrh	r2, [r7, #18]
 8009ad0:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8009ad2:	6a3b      	ldr	r3, [r7, #32]
 8009ad4:	3302      	adds	r3, #2
 8009ad6:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8009ad8:	69fb      	ldr	r3, [r7, #28]
 8009ada:	3301      	adds	r3, #1
 8009adc:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8009ade:	69fb      	ldr	r3, [r7, #28]
 8009ae0:	3301      	adds	r3, #1
 8009ae2:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8009ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ae6:	3b01      	subs	r3, #1
 8009ae8:	627b      	str	r3, [r7, #36]	@ 0x24
 8009aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d1e0      	bne.n	8009ab2 <USB_WritePMA+0x38>
  }
}
 8009af0:	bf00      	nop
 8009af2:	bf00      	nop
 8009af4:	372c      	adds	r7, #44	@ 0x2c
 8009af6:	46bd      	mov	sp, r7
 8009af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afc:	4770      	bx	lr

08009afe <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009afe:	b480      	push	{r7}
 8009b00:	b08b      	sub	sp, #44	@ 0x2c
 8009b02:	af00      	add	r7, sp, #0
 8009b04:	60f8      	str	r0, [r7, #12]
 8009b06:	60b9      	str	r1, [r7, #8]
 8009b08:	4611      	mov	r1, r2
 8009b0a:	461a      	mov	r2, r3
 8009b0c:	460b      	mov	r3, r1
 8009b0e:	80fb      	strh	r3, [r7, #6]
 8009b10:	4613      	mov	r3, r2
 8009b12:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8009b14:	88bb      	ldrh	r3, [r7, #4]
 8009b16:	085b      	lsrs	r3, r3, #1
 8009b18:	b29b      	uxth	r3, r3
 8009b1a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009b20:	68bb      	ldr	r3, [r7, #8]
 8009b22:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009b24:	88fa      	ldrh	r2, [r7, #6]
 8009b26:	697b      	ldr	r3, [r7, #20]
 8009b28:	4413      	add	r3, r2
 8009b2a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009b2e:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8009b30:	69bb      	ldr	r3, [r7, #24]
 8009b32:	627b      	str	r3, [r7, #36]	@ 0x24
 8009b34:	e018      	b.n	8009b68 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8009b36:	6a3b      	ldr	r3, [r7, #32]
 8009b38:	881b      	ldrh	r3, [r3, #0]
 8009b3a:	b29b      	uxth	r3, r3
 8009b3c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8009b3e:	6a3b      	ldr	r3, [r7, #32]
 8009b40:	3302      	adds	r3, #2
 8009b42:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8009b44:	693b      	ldr	r3, [r7, #16]
 8009b46:	b2da      	uxtb	r2, r3
 8009b48:	69fb      	ldr	r3, [r7, #28]
 8009b4a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009b4c:	69fb      	ldr	r3, [r7, #28]
 8009b4e:	3301      	adds	r3, #1
 8009b50:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8009b52:	693b      	ldr	r3, [r7, #16]
 8009b54:	0a1b      	lsrs	r3, r3, #8
 8009b56:	b2da      	uxtb	r2, r3
 8009b58:	69fb      	ldr	r3, [r7, #28]
 8009b5a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009b5c:	69fb      	ldr	r3, [r7, #28]
 8009b5e:	3301      	adds	r3, #1
 8009b60:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8009b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b64:	3b01      	subs	r3, #1
 8009b66:	627b      	str	r3, [r7, #36]	@ 0x24
 8009b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d1e3      	bne.n	8009b36 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8009b6e:	88bb      	ldrh	r3, [r7, #4]
 8009b70:	f003 0301 	and.w	r3, r3, #1
 8009b74:	b29b      	uxth	r3, r3
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d007      	beq.n	8009b8a <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8009b7a:	6a3b      	ldr	r3, [r7, #32]
 8009b7c:	881b      	ldrh	r3, [r3, #0]
 8009b7e:	b29b      	uxth	r3, r3
 8009b80:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8009b82:	693b      	ldr	r3, [r7, #16]
 8009b84:	b2da      	uxtb	r2, r3
 8009b86:	69fb      	ldr	r3, [r7, #28]
 8009b88:	701a      	strb	r2, [r3, #0]
  }
}
 8009b8a:	bf00      	nop
 8009b8c:	372c      	adds	r7, #44	@ 0x2c
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b94:	4770      	bx	lr

08009b96 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009b96:	b580      	push	{r7, lr}
 8009b98:	b084      	sub	sp, #16
 8009b9a:	af00      	add	r7, sp, #0
 8009b9c:	6078      	str	r0, [r7, #4]
 8009b9e:	460b      	mov	r3, r1
 8009ba0:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009ba2:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8009ba6:	f005 fdaf 	bl	800f708 <USBD_static_malloc>
 8009baa:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d105      	bne.n	8009bbe <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 8009bba:	2302      	movs	r3, #2
 8009bbc:	e066      	b.n	8009c8c <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	68fa      	ldr	r2, [r7, #12]
 8009bc2:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	7c1b      	ldrb	r3, [r3, #16]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d119      	bne.n	8009c02 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009bce:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009bd2:	2202      	movs	r2, #2
 8009bd4:	2181      	movs	r1, #129	@ 0x81
 8009bd6:	6878      	ldr	r0, [r7, #4]
 8009bd8:	f005 fc3d 	bl	800f456 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	2201      	movs	r2, #1
 8009be0:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009be2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009be6:	2202      	movs	r2, #2
 8009be8:	2101      	movs	r1, #1
 8009bea:	6878      	ldr	r0, [r7, #4]
 8009bec:	f005 fc33 	bl	800f456 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	2201      	movs	r2, #1
 8009bf4:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	2210      	movs	r2, #16
 8009bfc:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 8009c00:	e016      	b.n	8009c30 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009c02:	2340      	movs	r3, #64	@ 0x40
 8009c04:	2202      	movs	r2, #2
 8009c06:	2181      	movs	r1, #129	@ 0x81
 8009c08:	6878      	ldr	r0, [r7, #4]
 8009c0a:	f005 fc24 	bl	800f456 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	2201      	movs	r2, #1
 8009c12:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009c14:	2340      	movs	r3, #64	@ 0x40
 8009c16:	2202      	movs	r2, #2
 8009c18:	2101      	movs	r1, #1
 8009c1a:	6878      	ldr	r0, [r7, #4]
 8009c1c:	f005 fc1b 	bl	800f456 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	2201      	movs	r2, #1
 8009c24:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	2210      	movs	r2, #16
 8009c2c:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009c30:	2308      	movs	r3, #8
 8009c32:	2203      	movs	r2, #3
 8009c34:	2182      	movs	r1, #130	@ 0x82
 8009c36:	6878      	ldr	r0, [r7, #4]
 8009c38:	f005 fc0d 	bl	800f456 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	2201      	movs	r2, #1
 8009c40:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	2200      	movs	r2, #0
 8009c52:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	2200      	movs	r2, #0
 8009c5a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	7c1b      	ldrb	r3, [r3, #16]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d109      	bne.n	8009c7a <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009c6c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009c70:	2101      	movs	r1, #1
 8009c72:	6878      	ldr	r0, [r7, #4]
 8009c74:	f005 fcde 	bl	800f634 <USBD_LL_PrepareReceive>
 8009c78:	e007      	b.n	8009c8a <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009c80:	2340      	movs	r3, #64	@ 0x40
 8009c82:	2101      	movs	r1, #1
 8009c84:	6878      	ldr	r0, [r7, #4]
 8009c86:	f005 fcd5 	bl	800f634 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009c8a:	2300      	movs	r3, #0
}
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	3710      	adds	r7, #16
 8009c90:	46bd      	mov	sp, r7
 8009c92:	bd80      	pop	{r7, pc}

08009c94 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b082      	sub	sp, #8
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
 8009c9c:	460b      	mov	r3, r1
 8009c9e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009ca0:	2181      	movs	r1, #129	@ 0x81
 8009ca2:	6878      	ldr	r0, [r7, #4]
 8009ca4:	f005 fbfd 	bl	800f4a2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	2200      	movs	r2, #0
 8009cac:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009cae:	2101      	movs	r1, #1
 8009cb0:	6878      	ldr	r0, [r7, #4]
 8009cb2:	f005 fbf6 	bl	800f4a2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	2200      	movs	r2, #0
 8009cba:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009cbe:	2182      	movs	r1, #130	@ 0x82
 8009cc0:	6878      	ldr	r0, [r7, #4]
 8009cc2:	f005 fbee 	bl	800f4a2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	2200      	movs	r2, #0
 8009cca:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	2200      	movs	r2, #0
 8009cd2:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d00e      	beq.n	8009cfe <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009ce6:	685b      	ldr	r3, [r3, #4]
 8009ce8:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	f005 fd17 	bl	800f724 <USBD_static_free>
    pdev->pClassData = NULL;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009cfe:	2300      	movs	r3, #0
}
 8009d00:	4618      	mov	r0, r3
 8009d02:	3708      	adds	r7, #8
 8009d04:	46bd      	mov	sp, r7
 8009d06:	bd80      	pop	{r7, pc}

08009d08 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b086      	sub	sp, #24
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
 8009d10:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009d18:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009d1e:	2300      	movs	r3, #0
 8009d20:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009d22:	2300      	movs	r3, #0
 8009d24:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009d26:	693b      	ldr	r3, [r7, #16]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d101      	bne.n	8009d30 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8009d2c:	2303      	movs	r3, #3
 8009d2e:	e0af      	b.n	8009e90 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009d30:	683b      	ldr	r3, [r7, #0]
 8009d32:	781b      	ldrb	r3, [r3, #0]
 8009d34:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d03f      	beq.n	8009dbc <USBD_CDC_Setup+0xb4>
 8009d3c:	2b20      	cmp	r3, #32
 8009d3e:	f040 809f 	bne.w	8009e80 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009d42:	683b      	ldr	r3, [r7, #0]
 8009d44:	88db      	ldrh	r3, [r3, #6]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d02e      	beq.n	8009da8 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009d4a:	683b      	ldr	r3, [r7, #0]
 8009d4c:	781b      	ldrb	r3, [r3, #0]
 8009d4e:	b25b      	sxtb	r3, r3
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	da16      	bge.n	8009d82 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009d5a:	689b      	ldr	r3, [r3, #8]
 8009d5c:	683a      	ldr	r2, [r7, #0]
 8009d5e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8009d60:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009d62:	683a      	ldr	r2, [r7, #0]
 8009d64:	88d2      	ldrh	r2, [r2, #6]
 8009d66:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009d68:	683b      	ldr	r3, [r7, #0]
 8009d6a:	88db      	ldrh	r3, [r3, #6]
 8009d6c:	2b07      	cmp	r3, #7
 8009d6e:	bf28      	it	cs
 8009d70:	2307      	movcs	r3, #7
 8009d72:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009d74:	693b      	ldr	r3, [r7, #16]
 8009d76:	89fa      	ldrh	r2, [r7, #14]
 8009d78:	4619      	mov	r1, r3
 8009d7a:	6878      	ldr	r0, [r7, #4]
 8009d7c:	f001 facd 	bl	800b31a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8009d80:	e085      	b.n	8009e8e <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8009d82:	683b      	ldr	r3, [r7, #0]
 8009d84:	785a      	ldrb	r2, [r3, #1]
 8009d86:	693b      	ldr	r3, [r7, #16]
 8009d88:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8009d8c:	683b      	ldr	r3, [r7, #0]
 8009d8e:	88db      	ldrh	r3, [r3, #6]
 8009d90:	b2da      	uxtb	r2, r3
 8009d92:	693b      	ldr	r3, [r7, #16]
 8009d94:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8009d98:	6939      	ldr	r1, [r7, #16]
 8009d9a:	683b      	ldr	r3, [r7, #0]
 8009d9c:	88db      	ldrh	r3, [r3, #6]
 8009d9e:	461a      	mov	r2, r3
 8009da0:	6878      	ldr	r0, [r7, #4]
 8009da2:	f001 fae6 	bl	800b372 <USBD_CtlPrepareRx>
      break;
 8009da6:	e072      	b.n	8009e8e <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009dae:	689b      	ldr	r3, [r3, #8]
 8009db0:	683a      	ldr	r2, [r7, #0]
 8009db2:	7850      	ldrb	r0, [r2, #1]
 8009db4:	2200      	movs	r2, #0
 8009db6:	6839      	ldr	r1, [r7, #0]
 8009db8:	4798      	blx	r3
      break;
 8009dba:	e068      	b.n	8009e8e <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009dbc:	683b      	ldr	r3, [r7, #0]
 8009dbe:	785b      	ldrb	r3, [r3, #1]
 8009dc0:	2b0b      	cmp	r3, #11
 8009dc2:	d852      	bhi.n	8009e6a <USBD_CDC_Setup+0x162>
 8009dc4:	a201      	add	r2, pc, #4	@ (adr r2, 8009dcc <USBD_CDC_Setup+0xc4>)
 8009dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dca:	bf00      	nop
 8009dcc:	08009dfd 	.word	0x08009dfd
 8009dd0:	08009e79 	.word	0x08009e79
 8009dd4:	08009e6b 	.word	0x08009e6b
 8009dd8:	08009e6b 	.word	0x08009e6b
 8009ddc:	08009e6b 	.word	0x08009e6b
 8009de0:	08009e6b 	.word	0x08009e6b
 8009de4:	08009e6b 	.word	0x08009e6b
 8009de8:	08009e6b 	.word	0x08009e6b
 8009dec:	08009e6b 	.word	0x08009e6b
 8009df0:	08009e6b 	.word	0x08009e6b
 8009df4:	08009e27 	.word	0x08009e27
 8009df8:	08009e51 	.word	0x08009e51
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e02:	b2db      	uxtb	r3, r3
 8009e04:	2b03      	cmp	r3, #3
 8009e06:	d107      	bne.n	8009e18 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009e08:	f107 030a 	add.w	r3, r7, #10
 8009e0c:	2202      	movs	r2, #2
 8009e0e:	4619      	mov	r1, r3
 8009e10:	6878      	ldr	r0, [r7, #4]
 8009e12:	f001 fa82 	bl	800b31a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009e16:	e032      	b.n	8009e7e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8009e18:	6839      	ldr	r1, [r7, #0]
 8009e1a:	6878      	ldr	r0, [r7, #4]
 8009e1c:	f001 fa0c 	bl	800b238 <USBD_CtlError>
            ret = USBD_FAIL;
 8009e20:	2303      	movs	r3, #3
 8009e22:	75fb      	strb	r3, [r7, #23]
          break;
 8009e24:	e02b      	b.n	8009e7e <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e2c:	b2db      	uxtb	r3, r3
 8009e2e:	2b03      	cmp	r3, #3
 8009e30:	d107      	bne.n	8009e42 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009e32:	f107 030d 	add.w	r3, r7, #13
 8009e36:	2201      	movs	r2, #1
 8009e38:	4619      	mov	r1, r3
 8009e3a:	6878      	ldr	r0, [r7, #4]
 8009e3c:	f001 fa6d 	bl	800b31a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009e40:	e01d      	b.n	8009e7e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8009e42:	6839      	ldr	r1, [r7, #0]
 8009e44:	6878      	ldr	r0, [r7, #4]
 8009e46:	f001 f9f7 	bl	800b238 <USBD_CtlError>
            ret = USBD_FAIL;
 8009e4a:	2303      	movs	r3, #3
 8009e4c:	75fb      	strb	r3, [r7, #23]
          break;
 8009e4e:	e016      	b.n	8009e7e <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e56:	b2db      	uxtb	r3, r3
 8009e58:	2b03      	cmp	r3, #3
 8009e5a:	d00f      	beq.n	8009e7c <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8009e5c:	6839      	ldr	r1, [r7, #0]
 8009e5e:	6878      	ldr	r0, [r7, #4]
 8009e60:	f001 f9ea 	bl	800b238 <USBD_CtlError>
            ret = USBD_FAIL;
 8009e64:	2303      	movs	r3, #3
 8009e66:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009e68:	e008      	b.n	8009e7c <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009e6a:	6839      	ldr	r1, [r7, #0]
 8009e6c:	6878      	ldr	r0, [r7, #4]
 8009e6e:	f001 f9e3 	bl	800b238 <USBD_CtlError>
          ret = USBD_FAIL;
 8009e72:	2303      	movs	r3, #3
 8009e74:	75fb      	strb	r3, [r7, #23]
          break;
 8009e76:	e002      	b.n	8009e7e <USBD_CDC_Setup+0x176>
          break;
 8009e78:	bf00      	nop
 8009e7a:	e008      	b.n	8009e8e <USBD_CDC_Setup+0x186>
          break;
 8009e7c:	bf00      	nop
      }
      break;
 8009e7e:	e006      	b.n	8009e8e <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8009e80:	6839      	ldr	r1, [r7, #0]
 8009e82:	6878      	ldr	r0, [r7, #4]
 8009e84:	f001 f9d8 	bl	800b238 <USBD_CtlError>
      ret = USBD_FAIL;
 8009e88:	2303      	movs	r3, #3
 8009e8a:	75fb      	strb	r3, [r7, #23]
      break;
 8009e8c:	bf00      	nop
  }

  return (uint8_t)ret;
 8009e8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e90:	4618      	mov	r0, r3
 8009e92:	3718      	adds	r7, #24
 8009e94:	46bd      	mov	sp, r7
 8009e96:	bd80      	pop	{r7, pc}

08009e98 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b084      	sub	sp, #16
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
 8009ea0:	460b      	mov	r3, r1
 8009ea2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8009eaa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d101      	bne.n	8009eba <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009eb6:	2303      	movs	r3, #3
 8009eb8:	e04f      	b.n	8009f5a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009ec0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009ec2:	78fa      	ldrb	r2, [r7, #3]
 8009ec4:	6879      	ldr	r1, [r7, #4]
 8009ec6:	4613      	mov	r3, r2
 8009ec8:	009b      	lsls	r3, r3, #2
 8009eca:	4413      	add	r3, r2
 8009ecc:	009b      	lsls	r3, r3, #2
 8009ece:	440b      	add	r3, r1
 8009ed0:	3318      	adds	r3, #24
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d029      	beq.n	8009f2c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009ed8:	78fa      	ldrb	r2, [r7, #3]
 8009eda:	6879      	ldr	r1, [r7, #4]
 8009edc:	4613      	mov	r3, r2
 8009ede:	009b      	lsls	r3, r3, #2
 8009ee0:	4413      	add	r3, r2
 8009ee2:	009b      	lsls	r3, r3, #2
 8009ee4:	440b      	add	r3, r1
 8009ee6:	3318      	adds	r3, #24
 8009ee8:	681a      	ldr	r2, [r3, #0]
 8009eea:	78f9      	ldrb	r1, [r7, #3]
 8009eec:	68f8      	ldr	r0, [r7, #12]
 8009eee:	460b      	mov	r3, r1
 8009ef0:	009b      	lsls	r3, r3, #2
 8009ef2:	440b      	add	r3, r1
 8009ef4:	00db      	lsls	r3, r3, #3
 8009ef6:	4403      	add	r3, r0
 8009ef8:	3320      	adds	r3, #32
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	fbb2 f1f3 	udiv	r1, r2, r3
 8009f00:	fb01 f303 	mul.w	r3, r1, r3
 8009f04:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d110      	bne.n	8009f2c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8009f0a:	78fa      	ldrb	r2, [r7, #3]
 8009f0c:	6879      	ldr	r1, [r7, #4]
 8009f0e:	4613      	mov	r3, r2
 8009f10:	009b      	lsls	r3, r3, #2
 8009f12:	4413      	add	r3, r2
 8009f14:	009b      	lsls	r3, r3, #2
 8009f16:	440b      	add	r3, r1
 8009f18:	3318      	adds	r3, #24
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009f1e:	78f9      	ldrb	r1, [r7, #3]
 8009f20:	2300      	movs	r3, #0
 8009f22:	2200      	movs	r2, #0
 8009f24:	6878      	ldr	r0, [r7, #4]
 8009f26:	f005 fb64 	bl	800f5f2 <USBD_LL_Transmit>
 8009f2a:	e015      	b.n	8009f58 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8009f2c:	68bb      	ldr	r3, [r7, #8]
 8009f2e:	2200      	movs	r2, #0
 8009f30:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009f3a:	691b      	ldr	r3, [r3, #16]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d00b      	beq.n	8009f58 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009f46:	691b      	ldr	r3, [r3, #16]
 8009f48:	68ba      	ldr	r2, [r7, #8]
 8009f4a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8009f4e:	68ba      	ldr	r2, [r7, #8]
 8009f50:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8009f54:	78fa      	ldrb	r2, [r7, #3]
 8009f56:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009f58:	2300      	movs	r3, #0
}
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	3710      	adds	r7, #16
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	bd80      	pop	{r7, pc}

08009f62 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009f62:	b580      	push	{r7, lr}
 8009f64:	b084      	sub	sp, #16
 8009f66:	af00      	add	r7, sp, #0
 8009f68:	6078      	str	r0, [r7, #4]
 8009f6a:	460b      	mov	r3, r1
 8009f6c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009f74:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d101      	bne.n	8009f84 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009f80:	2303      	movs	r3, #3
 8009f82:	e015      	b.n	8009fb0 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009f84:	78fb      	ldrb	r3, [r7, #3]
 8009f86:	4619      	mov	r1, r3
 8009f88:	6878      	ldr	r0, [r7, #4]
 8009f8a:	f005 fb74 	bl	800f676 <USBD_LL_GetRxDataSize>
 8009f8e:	4602      	mov	r2, r0
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009f9c:	68db      	ldr	r3, [r3, #12]
 8009f9e:	68fa      	ldr	r2, [r7, #12]
 8009fa0:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8009fa4:	68fa      	ldr	r2, [r7, #12]
 8009fa6:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8009faa:	4611      	mov	r1, r2
 8009fac:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009fae:	2300      	movs	r3, #0
}
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	3710      	adds	r7, #16
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	bd80      	pop	{r7, pc}

08009fb8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b084      	sub	sp, #16
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009fc6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d101      	bne.n	8009fd2 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8009fce:	2303      	movs	r3, #3
 8009fd0:	e01a      	b.n	800a008 <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d014      	beq.n	800a006 <USBD_CDC_EP0_RxReady+0x4e>
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8009fe2:	2bff      	cmp	r3, #255	@ 0xff
 8009fe4:	d00f      	beq.n	800a006 <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009fec:	689b      	ldr	r3, [r3, #8]
 8009fee:	68fa      	ldr	r2, [r7, #12]
 8009ff0:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 8009ff4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8009ff6:	68fa      	ldr	r2, [r7, #12]
 8009ff8:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009ffc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	22ff      	movs	r2, #255	@ 0xff
 800a002:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800a006:	2300      	movs	r3, #0
}
 800a008:	4618      	mov	r0, r3
 800a00a:	3710      	adds	r7, #16
 800a00c:	46bd      	mov	sp, r7
 800a00e:	bd80      	pop	{r7, pc}

0800a010 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a010:	b480      	push	{r7}
 800a012:	b083      	sub	sp, #12
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	2243      	movs	r2, #67	@ 0x43
 800a01c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800a01e:	4b03      	ldr	r3, [pc, #12]	@ (800a02c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800a020:	4618      	mov	r0, r3
 800a022:	370c      	adds	r7, #12
 800a024:	46bd      	mov	sp, r7
 800a026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02a:	4770      	bx	lr
 800a02c:	200000b4 	.word	0x200000b4

0800a030 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a030:	b480      	push	{r7}
 800a032:	b083      	sub	sp, #12
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	2243      	movs	r2, #67	@ 0x43
 800a03c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800a03e:	4b03      	ldr	r3, [pc, #12]	@ (800a04c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800a040:	4618      	mov	r0, r3
 800a042:	370c      	adds	r7, #12
 800a044:	46bd      	mov	sp, r7
 800a046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04a:	4770      	bx	lr
 800a04c:	20000070 	.word	0x20000070

0800a050 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a050:	b480      	push	{r7}
 800a052:	b083      	sub	sp, #12
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	2243      	movs	r2, #67	@ 0x43
 800a05c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800a05e:	4b03      	ldr	r3, [pc, #12]	@ (800a06c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a060:	4618      	mov	r0, r3
 800a062:	370c      	adds	r7, #12
 800a064:	46bd      	mov	sp, r7
 800a066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06a:	4770      	bx	lr
 800a06c:	200000f8 	.word	0x200000f8

0800a070 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a070:	b480      	push	{r7}
 800a072:	b083      	sub	sp, #12
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	220a      	movs	r2, #10
 800a07c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a07e:	4b03      	ldr	r3, [pc, #12]	@ (800a08c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a080:	4618      	mov	r0, r3
 800a082:	370c      	adds	r7, #12
 800a084:	46bd      	mov	sp, r7
 800a086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08a:	4770      	bx	lr
 800a08c:	2000002c 	.word	0x2000002c

0800a090 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a090:	b480      	push	{r7}
 800a092:	b083      	sub	sp, #12
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
 800a098:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a09a:	683b      	ldr	r3, [r7, #0]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d101      	bne.n	800a0a4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a0a0:	2303      	movs	r3, #3
 800a0a2:	e004      	b.n	800a0ae <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	683a      	ldr	r2, [r7, #0]
 800a0a8:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 800a0ac:	2300      	movs	r3, #0
}
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	370c      	adds	r7, #12
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b8:	4770      	bx	lr

0800a0ba <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a0ba:	b480      	push	{r7}
 800a0bc:	b087      	sub	sp, #28
 800a0be:	af00      	add	r7, sp, #0
 800a0c0:	60f8      	str	r0, [r7, #12]
 800a0c2:	60b9      	str	r1, [r7, #8]
 800a0c4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a0cc:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800a0ce:	697b      	ldr	r3, [r7, #20]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d101      	bne.n	800a0d8 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800a0d4:	2303      	movs	r3, #3
 800a0d6:	e008      	b.n	800a0ea <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800a0d8:	697b      	ldr	r3, [r7, #20]
 800a0da:	68ba      	ldr	r2, [r7, #8]
 800a0dc:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800a0e0:	697b      	ldr	r3, [r7, #20]
 800a0e2:	687a      	ldr	r2, [r7, #4]
 800a0e4:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800a0e8:	2300      	movs	r3, #0
}
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	371c      	adds	r7, #28
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f4:	4770      	bx	lr

0800a0f6 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a0f6:	b480      	push	{r7}
 800a0f8:	b085      	sub	sp, #20
 800a0fa:	af00      	add	r7, sp, #0
 800a0fc:	6078      	str	r0, [r7, #4]
 800a0fe:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a106:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d101      	bne.n	800a112 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800a10e:	2303      	movs	r3, #3
 800a110:	e004      	b.n	800a11c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	683a      	ldr	r2, [r7, #0]
 800a116:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800a11a:	2300      	movs	r3, #0
}
 800a11c:	4618      	mov	r0, r3
 800a11e:	3714      	adds	r7, #20
 800a120:	46bd      	mov	sp, r7
 800a122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a126:	4770      	bx	lr

0800a128 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a128:	b580      	push	{r7, lr}
 800a12a:	b084      	sub	sp, #16
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a136:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800a138:	2301      	movs	r3, #1
 800a13a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a142:	2b00      	cmp	r3, #0
 800a144:	d101      	bne.n	800a14a <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a146:	2303      	movs	r3, #3
 800a148:	e01a      	b.n	800a180 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800a14a:	68bb      	ldr	r3, [r7, #8]
 800a14c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a150:	2b00      	cmp	r3, #0
 800a152:	d114      	bne.n	800a17e <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a154:	68bb      	ldr	r3, [r7, #8]
 800a156:	2201      	movs	r2, #1
 800a158:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800a15c:	68bb      	ldr	r3, [r7, #8]
 800a15e:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800a166:	68bb      	ldr	r3, [r7, #8]
 800a168:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800a16c:	68bb      	ldr	r3, [r7, #8]
 800a16e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800a172:	2181      	movs	r1, #129	@ 0x81
 800a174:	6878      	ldr	r0, [r7, #4]
 800a176:	f005 fa3c 	bl	800f5f2 <USBD_LL_Transmit>

    ret = USBD_OK;
 800a17a:	2300      	movs	r3, #0
 800a17c:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800a17e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a180:	4618      	mov	r0, r3
 800a182:	3710      	adds	r7, #16
 800a184:	46bd      	mov	sp, r7
 800a186:	bd80      	pop	{r7, pc}

0800a188 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b084      	sub	sp, #16
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a196:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d101      	bne.n	800a1a6 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800a1a2:	2303      	movs	r3, #3
 800a1a4:	e016      	b.n	800a1d4 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	7c1b      	ldrb	r3, [r3, #16]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d109      	bne.n	800a1c2 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a1b4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a1b8:	2101      	movs	r1, #1
 800a1ba:	6878      	ldr	r0, [r7, #4]
 800a1bc:	f005 fa3a 	bl	800f634 <USBD_LL_PrepareReceive>
 800a1c0:	e007      	b.n	800a1d2 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a1c8:	2340      	movs	r3, #64	@ 0x40
 800a1ca:	2101      	movs	r1, #1
 800a1cc:	6878      	ldr	r0, [r7, #4]
 800a1ce:	f005 fa31 	bl	800f634 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a1d2:	2300      	movs	r3, #0
}
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	3710      	adds	r7, #16
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	bd80      	pop	{r7, pc}

0800a1dc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b086      	sub	sp, #24
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	60f8      	str	r0, [r7, #12]
 800a1e4:	60b9      	str	r1, [r7, #8]
 800a1e6:	4613      	mov	r3, r2
 800a1e8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d101      	bne.n	800a1f4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a1f0:	2303      	movs	r3, #3
 800a1f2:	e01f      	b.n	800a234 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	2200      	movs	r2, #0
 800a200:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	2200      	movs	r2, #0
 800a208:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a20c:	68bb      	ldr	r3, [r7, #8]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d003      	beq.n	800a21a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	68ba      	ldr	r2, [r7, #8]
 800a216:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	2201      	movs	r2, #1
 800a21e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	79fa      	ldrb	r2, [r7, #7]
 800a226:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a228:	68f8      	ldr	r0, [r7, #12]
 800a22a:	f005 f899 	bl	800f360 <USBD_LL_Init>
 800a22e:	4603      	mov	r3, r0
 800a230:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a232:	7dfb      	ldrb	r3, [r7, #23]
}
 800a234:	4618      	mov	r0, r3
 800a236:	3718      	adds	r7, #24
 800a238:	46bd      	mov	sp, r7
 800a23a:	bd80      	pop	{r7, pc}

0800a23c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a23c:	b580      	push	{r7, lr}
 800a23e:	b084      	sub	sp, #16
 800a240:	af00      	add	r7, sp, #0
 800a242:	6078      	str	r0, [r7, #4]
 800a244:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a246:	2300      	movs	r3, #0
 800a248:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a24a:	683b      	ldr	r3, [r7, #0]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d101      	bne.n	800a254 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800a250:	2303      	movs	r3, #3
 800a252:	e016      	b.n	800a282 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	683a      	ldr	r2, [r7, #0]
 800a258:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a262:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a264:	2b00      	cmp	r3, #0
 800a266:	d00b      	beq.n	800a280 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a26e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a270:	f107 020e 	add.w	r2, r7, #14
 800a274:	4610      	mov	r0, r2
 800a276:	4798      	blx	r3
 800a278:	4602      	mov	r2, r0
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800a280:	2300      	movs	r3, #0
}
 800a282:	4618      	mov	r0, r3
 800a284:	3710      	adds	r7, #16
 800a286:	46bd      	mov	sp, r7
 800a288:	bd80      	pop	{r7, pc}

0800a28a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a28a:	b580      	push	{r7, lr}
 800a28c:	b082      	sub	sp, #8
 800a28e:	af00      	add	r7, sp, #0
 800a290:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a292:	6878      	ldr	r0, [r7, #4]
 800a294:	f005 f8c4 	bl	800f420 <USBD_LL_Start>
 800a298:	4603      	mov	r3, r0
}
 800a29a:	4618      	mov	r0, r3
 800a29c:	3708      	adds	r7, #8
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	bd80      	pop	{r7, pc}

0800a2a2 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a2a2:	b480      	push	{r7}
 800a2a4:	b083      	sub	sp, #12
 800a2a6:	af00      	add	r7, sp, #0
 800a2a8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a2aa:	2300      	movs	r3, #0
}
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	370c      	adds	r7, #12
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b6:	4770      	bx	lr

0800a2b8 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b084      	sub	sp, #16
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
 800a2c0:	460b      	mov	r3, r1
 800a2c2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a2c4:	2303      	movs	r3, #3
 800a2c6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d009      	beq.n	800a2e6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	78fa      	ldrb	r2, [r7, #3]
 800a2dc:	4611      	mov	r1, r2
 800a2de:	6878      	ldr	r0, [r7, #4]
 800a2e0:	4798      	blx	r3
 800a2e2:	4603      	mov	r3, r0
 800a2e4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a2e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	3710      	adds	r7, #16
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	bd80      	pop	{r7, pc}

0800a2f0 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b082      	sub	sp, #8
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
 800a2f8:	460b      	mov	r3, r1
 800a2fa:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a302:	2b00      	cmp	r3, #0
 800a304:	d007      	beq.n	800a316 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a30c:	685b      	ldr	r3, [r3, #4]
 800a30e:	78fa      	ldrb	r2, [r7, #3]
 800a310:	4611      	mov	r1, r2
 800a312:	6878      	ldr	r0, [r7, #4]
 800a314:	4798      	blx	r3
  }

  return USBD_OK;
 800a316:	2300      	movs	r3, #0
}
 800a318:	4618      	mov	r0, r3
 800a31a:	3708      	adds	r7, #8
 800a31c:	46bd      	mov	sp, r7
 800a31e:	bd80      	pop	{r7, pc}

0800a320 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b084      	sub	sp, #16
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
 800a328:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a330:	6839      	ldr	r1, [r7, #0]
 800a332:	4618      	mov	r0, r3
 800a334:	f000 ff46 	bl	800b1c4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	2201      	movs	r2, #1
 800a33c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800a346:	461a      	mov	r2, r3
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a354:	f003 031f 	and.w	r3, r3, #31
 800a358:	2b02      	cmp	r3, #2
 800a35a:	d01a      	beq.n	800a392 <USBD_LL_SetupStage+0x72>
 800a35c:	2b02      	cmp	r3, #2
 800a35e:	d822      	bhi.n	800a3a6 <USBD_LL_SetupStage+0x86>
 800a360:	2b00      	cmp	r3, #0
 800a362:	d002      	beq.n	800a36a <USBD_LL_SetupStage+0x4a>
 800a364:	2b01      	cmp	r3, #1
 800a366:	d00a      	beq.n	800a37e <USBD_LL_SetupStage+0x5e>
 800a368:	e01d      	b.n	800a3a6 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a370:	4619      	mov	r1, r3
 800a372:	6878      	ldr	r0, [r7, #4]
 800a374:	f000 f9ee 	bl	800a754 <USBD_StdDevReq>
 800a378:	4603      	mov	r3, r0
 800a37a:	73fb      	strb	r3, [r7, #15]
      break;
 800a37c:	e020      	b.n	800a3c0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a384:	4619      	mov	r1, r3
 800a386:	6878      	ldr	r0, [r7, #4]
 800a388:	f000 fa52 	bl	800a830 <USBD_StdItfReq>
 800a38c:	4603      	mov	r3, r0
 800a38e:	73fb      	strb	r3, [r7, #15]
      break;
 800a390:	e016      	b.n	800a3c0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a398:	4619      	mov	r1, r3
 800a39a:	6878      	ldr	r0, [r7, #4]
 800a39c:	f000 fa91 	bl	800a8c2 <USBD_StdEPReq>
 800a3a0:	4603      	mov	r3, r0
 800a3a2:	73fb      	strb	r3, [r7, #15]
      break;
 800a3a4:	e00c      	b.n	800a3c0 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a3ac:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a3b0:	b2db      	uxtb	r3, r3
 800a3b2:	4619      	mov	r1, r3
 800a3b4:	6878      	ldr	r0, [r7, #4]
 800a3b6:	f005 f893 	bl	800f4e0 <USBD_LL_StallEP>
 800a3ba:	4603      	mov	r3, r0
 800a3bc:	73fb      	strb	r3, [r7, #15]
      break;
 800a3be:	bf00      	nop
  }

  return ret;
 800a3c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	3710      	adds	r7, #16
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	bd80      	pop	{r7, pc}

0800a3ca <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a3ca:	b580      	push	{r7, lr}
 800a3cc:	b086      	sub	sp, #24
 800a3ce:	af00      	add	r7, sp, #0
 800a3d0:	60f8      	str	r0, [r7, #12]
 800a3d2:	460b      	mov	r3, r1
 800a3d4:	607a      	str	r2, [r7, #4]
 800a3d6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a3d8:	7afb      	ldrb	r3, [r7, #11]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d138      	bne.n	800a450 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800a3e4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a3ec:	2b03      	cmp	r3, #3
 800a3ee:	d14a      	bne.n	800a486 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800a3f0:	693b      	ldr	r3, [r7, #16]
 800a3f2:	689a      	ldr	r2, [r3, #8]
 800a3f4:	693b      	ldr	r3, [r7, #16]
 800a3f6:	68db      	ldr	r3, [r3, #12]
 800a3f8:	429a      	cmp	r2, r3
 800a3fa:	d913      	bls.n	800a424 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a3fc:	693b      	ldr	r3, [r7, #16]
 800a3fe:	689a      	ldr	r2, [r3, #8]
 800a400:	693b      	ldr	r3, [r7, #16]
 800a402:	68db      	ldr	r3, [r3, #12]
 800a404:	1ad2      	subs	r2, r2, r3
 800a406:	693b      	ldr	r3, [r7, #16]
 800a408:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a40a:	693b      	ldr	r3, [r7, #16]
 800a40c:	68da      	ldr	r2, [r3, #12]
 800a40e:	693b      	ldr	r3, [r7, #16]
 800a410:	689b      	ldr	r3, [r3, #8]
 800a412:	4293      	cmp	r3, r2
 800a414:	bf28      	it	cs
 800a416:	4613      	movcs	r3, r2
 800a418:	461a      	mov	r2, r3
 800a41a:	6879      	ldr	r1, [r7, #4]
 800a41c:	68f8      	ldr	r0, [r7, #12]
 800a41e:	f000 ffc5 	bl	800b3ac <USBD_CtlContinueRx>
 800a422:	e030      	b.n	800a486 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a42a:	b2db      	uxtb	r3, r3
 800a42c:	2b03      	cmp	r3, #3
 800a42e:	d10b      	bne.n	800a448 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a436:	691b      	ldr	r3, [r3, #16]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d005      	beq.n	800a448 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a442:	691b      	ldr	r3, [r3, #16]
 800a444:	68f8      	ldr	r0, [r7, #12]
 800a446:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a448:	68f8      	ldr	r0, [r7, #12]
 800a44a:	f000 ffc0 	bl	800b3ce <USBD_CtlSendStatus>
 800a44e:	e01a      	b.n	800a486 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a456:	b2db      	uxtb	r3, r3
 800a458:	2b03      	cmp	r3, #3
 800a45a:	d114      	bne.n	800a486 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a462:	699b      	ldr	r3, [r3, #24]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d00e      	beq.n	800a486 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a46e:	699b      	ldr	r3, [r3, #24]
 800a470:	7afa      	ldrb	r2, [r7, #11]
 800a472:	4611      	mov	r1, r2
 800a474:	68f8      	ldr	r0, [r7, #12]
 800a476:	4798      	blx	r3
 800a478:	4603      	mov	r3, r0
 800a47a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800a47c:	7dfb      	ldrb	r3, [r7, #23]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d001      	beq.n	800a486 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800a482:	7dfb      	ldrb	r3, [r7, #23]
 800a484:	e000      	b.n	800a488 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800a486:	2300      	movs	r3, #0
}
 800a488:	4618      	mov	r0, r3
 800a48a:	3718      	adds	r7, #24
 800a48c:	46bd      	mov	sp, r7
 800a48e:	bd80      	pop	{r7, pc}

0800a490 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a490:	b580      	push	{r7, lr}
 800a492:	b086      	sub	sp, #24
 800a494:	af00      	add	r7, sp, #0
 800a496:	60f8      	str	r0, [r7, #12]
 800a498:	460b      	mov	r3, r1
 800a49a:	607a      	str	r2, [r7, #4]
 800a49c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a49e:	7afb      	ldrb	r3, [r7, #11]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d16b      	bne.n	800a57c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	3314      	adds	r3, #20
 800a4a8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a4b0:	2b02      	cmp	r3, #2
 800a4b2:	d156      	bne.n	800a562 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800a4b4:	693b      	ldr	r3, [r7, #16]
 800a4b6:	689a      	ldr	r2, [r3, #8]
 800a4b8:	693b      	ldr	r3, [r7, #16]
 800a4ba:	68db      	ldr	r3, [r3, #12]
 800a4bc:	429a      	cmp	r2, r3
 800a4be:	d914      	bls.n	800a4ea <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a4c0:	693b      	ldr	r3, [r7, #16]
 800a4c2:	689a      	ldr	r2, [r3, #8]
 800a4c4:	693b      	ldr	r3, [r7, #16]
 800a4c6:	68db      	ldr	r3, [r3, #12]
 800a4c8:	1ad2      	subs	r2, r2, r3
 800a4ca:	693b      	ldr	r3, [r7, #16]
 800a4cc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a4ce:	693b      	ldr	r3, [r7, #16]
 800a4d0:	689b      	ldr	r3, [r3, #8]
 800a4d2:	461a      	mov	r2, r3
 800a4d4:	6879      	ldr	r1, [r7, #4]
 800a4d6:	68f8      	ldr	r0, [r7, #12]
 800a4d8:	f000 ff3a 	bl	800b350 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a4dc:	2300      	movs	r3, #0
 800a4de:	2200      	movs	r2, #0
 800a4e0:	2100      	movs	r1, #0
 800a4e2:	68f8      	ldr	r0, [r7, #12]
 800a4e4:	f005 f8a6 	bl	800f634 <USBD_LL_PrepareReceive>
 800a4e8:	e03b      	b.n	800a562 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a4ea:	693b      	ldr	r3, [r7, #16]
 800a4ec:	68da      	ldr	r2, [r3, #12]
 800a4ee:	693b      	ldr	r3, [r7, #16]
 800a4f0:	689b      	ldr	r3, [r3, #8]
 800a4f2:	429a      	cmp	r2, r3
 800a4f4:	d11c      	bne.n	800a530 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a4f6:	693b      	ldr	r3, [r7, #16]
 800a4f8:	685a      	ldr	r2, [r3, #4]
 800a4fa:	693b      	ldr	r3, [r7, #16]
 800a4fc:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a4fe:	429a      	cmp	r2, r3
 800a500:	d316      	bcc.n	800a530 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a502:	693b      	ldr	r3, [r7, #16]
 800a504:	685a      	ldr	r2, [r3, #4]
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a50c:	429a      	cmp	r2, r3
 800a50e:	d20f      	bcs.n	800a530 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a510:	2200      	movs	r2, #0
 800a512:	2100      	movs	r1, #0
 800a514:	68f8      	ldr	r0, [r7, #12]
 800a516:	f000 ff1b 	bl	800b350 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	2200      	movs	r2, #0
 800a51e:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a522:	2300      	movs	r3, #0
 800a524:	2200      	movs	r2, #0
 800a526:	2100      	movs	r1, #0
 800a528:	68f8      	ldr	r0, [r7, #12]
 800a52a:	f005 f883 	bl	800f634 <USBD_LL_PrepareReceive>
 800a52e:	e018      	b.n	800a562 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a536:	b2db      	uxtb	r3, r3
 800a538:	2b03      	cmp	r3, #3
 800a53a:	d10b      	bne.n	800a554 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a542:	68db      	ldr	r3, [r3, #12]
 800a544:	2b00      	cmp	r3, #0
 800a546:	d005      	beq.n	800a554 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a54e:	68db      	ldr	r3, [r3, #12]
 800a550:	68f8      	ldr	r0, [r7, #12]
 800a552:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a554:	2180      	movs	r1, #128	@ 0x80
 800a556:	68f8      	ldr	r0, [r7, #12]
 800a558:	f004 ffc2 	bl	800f4e0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a55c:	68f8      	ldr	r0, [r7, #12]
 800a55e:	f000 ff49 	bl	800b3f4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800a568:	2b01      	cmp	r3, #1
 800a56a:	d122      	bne.n	800a5b2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800a56c:	68f8      	ldr	r0, [r7, #12]
 800a56e:	f7ff fe98 	bl	800a2a2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	2200      	movs	r2, #0
 800a576:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800a57a:	e01a      	b.n	800a5b2 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a582:	b2db      	uxtb	r3, r3
 800a584:	2b03      	cmp	r3, #3
 800a586:	d114      	bne.n	800a5b2 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a58e:	695b      	ldr	r3, [r3, #20]
 800a590:	2b00      	cmp	r3, #0
 800a592:	d00e      	beq.n	800a5b2 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a59a:	695b      	ldr	r3, [r3, #20]
 800a59c:	7afa      	ldrb	r2, [r7, #11]
 800a59e:	4611      	mov	r1, r2
 800a5a0:	68f8      	ldr	r0, [r7, #12]
 800a5a2:	4798      	blx	r3
 800a5a4:	4603      	mov	r3, r0
 800a5a6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800a5a8:	7dfb      	ldrb	r3, [r7, #23]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d001      	beq.n	800a5b2 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800a5ae:	7dfb      	ldrb	r3, [r7, #23]
 800a5b0:	e000      	b.n	800a5b4 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800a5b2:	2300      	movs	r3, #0
}
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	3718      	adds	r7, #24
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	bd80      	pop	{r7, pc}

0800a5bc <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	b082      	sub	sp, #8
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	2201      	movs	r2, #1
 800a5c8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	2200      	movs	r2, #0
 800a5d0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	2200      	movs	r2, #0
 800a5de:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d101      	bne.n	800a5f0 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800a5ec:	2303      	movs	r3, #3
 800a5ee:	e02f      	b.n	800a650 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d00f      	beq.n	800a61a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a600:	685b      	ldr	r3, [r3, #4]
 800a602:	2b00      	cmp	r3, #0
 800a604:	d009      	beq.n	800a61a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a60c:	685b      	ldr	r3, [r3, #4]
 800a60e:	687a      	ldr	r2, [r7, #4]
 800a610:	6852      	ldr	r2, [r2, #4]
 800a612:	b2d2      	uxtb	r2, r2
 800a614:	4611      	mov	r1, r2
 800a616:	6878      	ldr	r0, [r7, #4]
 800a618:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a61a:	2340      	movs	r3, #64	@ 0x40
 800a61c:	2200      	movs	r2, #0
 800a61e:	2100      	movs	r1, #0
 800a620:	6878      	ldr	r0, [r7, #4]
 800a622:	f004 ff18 	bl	800f456 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	2201      	movs	r2, #1
 800a62a:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	2240      	movs	r2, #64	@ 0x40
 800a632:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a636:	2340      	movs	r3, #64	@ 0x40
 800a638:	2200      	movs	r2, #0
 800a63a:	2180      	movs	r1, #128	@ 0x80
 800a63c:	6878      	ldr	r0, [r7, #4]
 800a63e:	f004 ff0a 	bl	800f456 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	2201      	movs	r2, #1
 800a646:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	2240      	movs	r2, #64	@ 0x40
 800a64c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800a64e:	2300      	movs	r3, #0
}
 800a650:	4618      	mov	r0, r3
 800a652:	3708      	adds	r7, #8
 800a654:	46bd      	mov	sp, r7
 800a656:	bd80      	pop	{r7, pc}

0800a658 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a658:	b480      	push	{r7}
 800a65a:	b083      	sub	sp, #12
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
 800a660:	460b      	mov	r3, r1
 800a662:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	78fa      	ldrb	r2, [r7, #3]
 800a668:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a66a:	2300      	movs	r3, #0
}
 800a66c:	4618      	mov	r0, r3
 800a66e:	370c      	adds	r7, #12
 800a670:	46bd      	mov	sp, r7
 800a672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a676:	4770      	bx	lr

0800a678 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a678:	b480      	push	{r7}
 800a67a:	b083      	sub	sp, #12
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a686:	b2da      	uxtb	r2, r3
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	2204      	movs	r2, #4
 800a692:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800a696:	2300      	movs	r3, #0
}
 800a698:	4618      	mov	r0, r3
 800a69a:	370c      	adds	r7, #12
 800a69c:	46bd      	mov	sp, r7
 800a69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a2:	4770      	bx	lr

0800a6a4 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a6a4:	b480      	push	{r7}
 800a6a6:	b083      	sub	sp, #12
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a6b2:	b2db      	uxtb	r3, r3
 800a6b4:	2b04      	cmp	r3, #4
 800a6b6:	d106      	bne.n	800a6c6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800a6be:	b2da      	uxtb	r2, r3
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800a6c6:	2300      	movs	r3, #0
}
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	370c      	adds	r7, #12
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d2:	4770      	bx	lr

0800a6d4 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	b082      	sub	sp, #8
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d101      	bne.n	800a6ea <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800a6e6:	2303      	movs	r3, #3
 800a6e8:	e012      	b.n	800a710 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a6f0:	b2db      	uxtb	r3, r3
 800a6f2:	2b03      	cmp	r3, #3
 800a6f4:	d10b      	bne.n	800a70e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a6fc:	69db      	ldr	r3, [r3, #28]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d005      	beq.n	800a70e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a708:	69db      	ldr	r3, [r3, #28]
 800a70a:	6878      	ldr	r0, [r7, #4]
 800a70c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a70e:	2300      	movs	r3, #0
}
 800a710:	4618      	mov	r0, r3
 800a712:	3708      	adds	r7, #8
 800a714:	46bd      	mov	sp, r7
 800a716:	bd80      	pop	{r7, pc}

0800a718 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a718:	b480      	push	{r7}
 800a71a:	b087      	sub	sp, #28
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a724:	697b      	ldr	r3, [r7, #20]
 800a726:	781b      	ldrb	r3, [r3, #0]
 800a728:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a72a:	697b      	ldr	r3, [r7, #20]
 800a72c:	3301      	adds	r3, #1
 800a72e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a730:	697b      	ldr	r3, [r7, #20]
 800a732:	781b      	ldrb	r3, [r3, #0]
 800a734:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a736:	8a3b      	ldrh	r3, [r7, #16]
 800a738:	021b      	lsls	r3, r3, #8
 800a73a:	b21a      	sxth	r2, r3
 800a73c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a740:	4313      	orrs	r3, r2
 800a742:	b21b      	sxth	r3, r3
 800a744:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a746:	89fb      	ldrh	r3, [r7, #14]
}
 800a748:	4618      	mov	r0, r3
 800a74a:	371c      	adds	r7, #28
 800a74c:	46bd      	mov	sp, r7
 800a74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a752:	4770      	bx	lr

0800a754 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a754:	b580      	push	{r7, lr}
 800a756:	b084      	sub	sp, #16
 800a758:	af00      	add	r7, sp, #0
 800a75a:	6078      	str	r0, [r7, #4]
 800a75c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a75e:	2300      	movs	r3, #0
 800a760:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a762:	683b      	ldr	r3, [r7, #0]
 800a764:	781b      	ldrb	r3, [r3, #0]
 800a766:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a76a:	2b40      	cmp	r3, #64	@ 0x40
 800a76c:	d005      	beq.n	800a77a <USBD_StdDevReq+0x26>
 800a76e:	2b40      	cmp	r3, #64	@ 0x40
 800a770:	d853      	bhi.n	800a81a <USBD_StdDevReq+0xc6>
 800a772:	2b00      	cmp	r3, #0
 800a774:	d00b      	beq.n	800a78e <USBD_StdDevReq+0x3a>
 800a776:	2b20      	cmp	r3, #32
 800a778:	d14f      	bne.n	800a81a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a780:	689b      	ldr	r3, [r3, #8]
 800a782:	6839      	ldr	r1, [r7, #0]
 800a784:	6878      	ldr	r0, [r7, #4]
 800a786:	4798      	blx	r3
 800a788:	4603      	mov	r3, r0
 800a78a:	73fb      	strb	r3, [r7, #15]
      break;
 800a78c:	e04a      	b.n	800a824 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a78e:	683b      	ldr	r3, [r7, #0]
 800a790:	785b      	ldrb	r3, [r3, #1]
 800a792:	2b09      	cmp	r3, #9
 800a794:	d83b      	bhi.n	800a80e <USBD_StdDevReq+0xba>
 800a796:	a201      	add	r2, pc, #4	@ (adr r2, 800a79c <USBD_StdDevReq+0x48>)
 800a798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a79c:	0800a7f1 	.word	0x0800a7f1
 800a7a0:	0800a805 	.word	0x0800a805
 800a7a4:	0800a80f 	.word	0x0800a80f
 800a7a8:	0800a7fb 	.word	0x0800a7fb
 800a7ac:	0800a80f 	.word	0x0800a80f
 800a7b0:	0800a7cf 	.word	0x0800a7cf
 800a7b4:	0800a7c5 	.word	0x0800a7c5
 800a7b8:	0800a80f 	.word	0x0800a80f
 800a7bc:	0800a7e7 	.word	0x0800a7e7
 800a7c0:	0800a7d9 	.word	0x0800a7d9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a7c4:	6839      	ldr	r1, [r7, #0]
 800a7c6:	6878      	ldr	r0, [r7, #4]
 800a7c8:	f000 f9de 	bl	800ab88 <USBD_GetDescriptor>
          break;
 800a7cc:	e024      	b.n	800a818 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a7ce:	6839      	ldr	r1, [r7, #0]
 800a7d0:	6878      	ldr	r0, [r7, #4]
 800a7d2:	f000 fb6d 	bl	800aeb0 <USBD_SetAddress>
          break;
 800a7d6:	e01f      	b.n	800a818 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a7d8:	6839      	ldr	r1, [r7, #0]
 800a7da:	6878      	ldr	r0, [r7, #4]
 800a7dc:	f000 fbac 	bl	800af38 <USBD_SetConfig>
 800a7e0:	4603      	mov	r3, r0
 800a7e2:	73fb      	strb	r3, [r7, #15]
          break;
 800a7e4:	e018      	b.n	800a818 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a7e6:	6839      	ldr	r1, [r7, #0]
 800a7e8:	6878      	ldr	r0, [r7, #4]
 800a7ea:	f000 fc4b 	bl	800b084 <USBD_GetConfig>
          break;
 800a7ee:	e013      	b.n	800a818 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a7f0:	6839      	ldr	r1, [r7, #0]
 800a7f2:	6878      	ldr	r0, [r7, #4]
 800a7f4:	f000 fc7c 	bl	800b0f0 <USBD_GetStatus>
          break;
 800a7f8:	e00e      	b.n	800a818 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a7fa:	6839      	ldr	r1, [r7, #0]
 800a7fc:	6878      	ldr	r0, [r7, #4]
 800a7fe:	f000 fcab 	bl	800b158 <USBD_SetFeature>
          break;
 800a802:	e009      	b.n	800a818 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a804:	6839      	ldr	r1, [r7, #0]
 800a806:	6878      	ldr	r0, [r7, #4]
 800a808:	f000 fcba 	bl	800b180 <USBD_ClrFeature>
          break;
 800a80c:	e004      	b.n	800a818 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800a80e:	6839      	ldr	r1, [r7, #0]
 800a810:	6878      	ldr	r0, [r7, #4]
 800a812:	f000 fd11 	bl	800b238 <USBD_CtlError>
          break;
 800a816:	bf00      	nop
      }
      break;
 800a818:	e004      	b.n	800a824 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800a81a:	6839      	ldr	r1, [r7, #0]
 800a81c:	6878      	ldr	r0, [r7, #4]
 800a81e:	f000 fd0b 	bl	800b238 <USBD_CtlError>
      break;
 800a822:	bf00      	nop
  }

  return ret;
 800a824:	7bfb      	ldrb	r3, [r7, #15]
}
 800a826:	4618      	mov	r0, r3
 800a828:	3710      	adds	r7, #16
 800a82a:	46bd      	mov	sp, r7
 800a82c:	bd80      	pop	{r7, pc}
 800a82e:	bf00      	nop

0800a830 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a830:	b580      	push	{r7, lr}
 800a832:	b084      	sub	sp, #16
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]
 800a838:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a83a:	2300      	movs	r3, #0
 800a83c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a83e:	683b      	ldr	r3, [r7, #0]
 800a840:	781b      	ldrb	r3, [r3, #0]
 800a842:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a846:	2b40      	cmp	r3, #64	@ 0x40
 800a848:	d005      	beq.n	800a856 <USBD_StdItfReq+0x26>
 800a84a:	2b40      	cmp	r3, #64	@ 0x40
 800a84c:	d82f      	bhi.n	800a8ae <USBD_StdItfReq+0x7e>
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d001      	beq.n	800a856 <USBD_StdItfReq+0x26>
 800a852:	2b20      	cmp	r3, #32
 800a854:	d12b      	bne.n	800a8ae <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a85c:	b2db      	uxtb	r3, r3
 800a85e:	3b01      	subs	r3, #1
 800a860:	2b02      	cmp	r3, #2
 800a862:	d81d      	bhi.n	800a8a0 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	889b      	ldrh	r3, [r3, #4]
 800a868:	b2db      	uxtb	r3, r3
 800a86a:	2b01      	cmp	r3, #1
 800a86c:	d813      	bhi.n	800a896 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a874:	689b      	ldr	r3, [r3, #8]
 800a876:	6839      	ldr	r1, [r7, #0]
 800a878:	6878      	ldr	r0, [r7, #4]
 800a87a:	4798      	blx	r3
 800a87c:	4603      	mov	r3, r0
 800a87e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a880:	683b      	ldr	r3, [r7, #0]
 800a882:	88db      	ldrh	r3, [r3, #6]
 800a884:	2b00      	cmp	r3, #0
 800a886:	d110      	bne.n	800a8aa <USBD_StdItfReq+0x7a>
 800a888:	7bfb      	ldrb	r3, [r7, #15]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d10d      	bne.n	800a8aa <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a88e:	6878      	ldr	r0, [r7, #4]
 800a890:	f000 fd9d 	bl	800b3ce <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a894:	e009      	b.n	800a8aa <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800a896:	6839      	ldr	r1, [r7, #0]
 800a898:	6878      	ldr	r0, [r7, #4]
 800a89a:	f000 fccd 	bl	800b238 <USBD_CtlError>
          break;
 800a89e:	e004      	b.n	800a8aa <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800a8a0:	6839      	ldr	r1, [r7, #0]
 800a8a2:	6878      	ldr	r0, [r7, #4]
 800a8a4:	f000 fcc8 	bl	800b238 <USBD_CtlError>
          break;
 800a8a8:	e000      	b.n	800a8ac <USBD_StdItfReq+0x7c>
          break;
 800a8aa:	bf00      	nop
      }
      break;
 800a8ac:	e004      	b.n	800a8b8 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800a8ae:	6839      	ldr	r1, [r7, #0]
 800a8b0:	6878      	ldr	r0, [r7, #4]
 800a8b2:	f000 fcc1 	bl	800b238 <USBD_CtlError>
      break;
 800a8b6:	bf00      	nop
  }

  return ret;
 800a8b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	3710      	adds	r7, #16
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	bd80      	pop	{r7, pc}

0800a8c2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a8c2:	b580      	push	{r7, lr}
 800a8c4:	b084      	sub	sp, #16
 800a8c6:	af00      	add	r7, sp, #0
 800a8c8:	6078      	str	r0, [r7, #4]
 800a8ca:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800a8d0:	683b      	ldr	r3, [r7, #0]
 800a8d2:	889b      	ldrh	r3, [r3, #4]
 800a8d4:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a8d6:	683b      	ldr	r3, [r7, #0]
 800a8d8:	781b      	ldrb	r3, [r3, #0]
 800a8da:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a8de:	2b40      	cmp	r3, #64	@ 0x40
 800a8e0:	d007      	beq.n	800a8f2 <USBD_StdEPReq+0x30>
 800a8e2:	2b40      	cmp	r3, #64	@ 0x40
 800a8e4:	f200 8145 	bhi.w	800ab72 <USBD_StdEPReq+0x2b0>
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d00c      	beq.n	800a906 <USBD_StdEPReq+0x44>
 800a8ec:	2b20      	cmp	r3, #32
 800a8ee:	f040 8140 	bne.w	800ab72 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a8f8:	689b      	ldr	r3, [r3, #8]
 800a8fa:	6839      	ldr	r1, [r7, #0]
 800a8fc:	6878      	ldr	r0, [r7, #4]
 800a8fe:	4798      	blx	r3
 800a900:	4603      	mov	r3, r0
 800a902:	73fb      	strb	r3, [r7, #15]
      break;
 800a904:	e13a      	b.n	800ab7c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	785b      	ldrb	r3, [r3, #1]
 800a90a:	2b03      	cmp	r3, #3
 800a90c:	d007      	beq.n	800a91e <USBD_StdEPReq+0x5c>
 800a90e:	2b03      	cmp	r3, #3
 800a910:	f300 8129 	bgt.w	800ab66 <USBD_StdEPReq+0x2a4>
 800a914:	2b00      	cmp	r3, #0
 800a916:	d07f      	beq.n	800aa18 <USBD_StdEPReq+0x156>
 800a918:	2b01      	cmp	r3, #1
 800a91a:	d03c      	beq.n	800a996 <USBD_StdEPReq+0xd4>
 800a91c:	e123      	b.n	800ab66 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a924:	b2db      	uxtb	r3, r3
 800a926:	2b02      	cmp	r3, #2
 800a928:	d002      	beq.n	800a930 <USBD_StdEPReq+0x6e>
 800a92a:	2b03      	cmp	r3, #3
 800a92c:	d016      	beq.n	800a95c <USBD_StdEPReq+0x9a>
 800a92e:	e02c      	b.n	800a98a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a930:	7bbb      	ldrb	r3, [r7, #14]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d00d      	beq.n	800a952 <USBD_StdEPReq+0x90>
 800a936:	7bbb      	ldrb	r3, [r7, #14]
 800a938:	2b80      	cmp	r3, #128	@ 0x80
 800a93a:	d00a      	beq.n	800a952 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a93c:	7bbb      	ldrb	r3, [r7, #14]
 800a93e:	4619      	mov	r1, r3
 800a940:	6878      	ldr	r0, [r7, #4]
 800a942:	f004 fdcd 	bl	800f4e0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a946:	2180      	movs	r1, #128	@ 0x80
 800a948:	6878      	ldr	r0, [r7, #4]
 800a94a:	f004 fdc9 	bl	800f4e0 <USBD_LL_StallEP>
 800a94e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a950:	e020      	b.n	800a994 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800a952:	6839      	ldr	r1, [r7, #0]
 800a954:	6878      	ldr	r0, [r7, #4]
 800a956:	f000 fc6f 	bl	800b238 <USBD_CtlError>
              break;
 800a95a:	e01b      	b.n	800a994 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a95c:	683b      	ldr	r3, [r7, #0]
 800a95e:	885b      	ldrh	r3, [r3, #2]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d10e      	bne.n	800a982 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a964:	7bbb      	ldrb	r3, [r7, #14]
 800a966:	2b00      	cmp	r3, #0
 800a968:	d00b      	beq.n	800a982 <USBD_StdEPReq+0xc0>
 800a96a:	7bbb      	ldrb	r3, [r7, #14]
 800a96c:	2b80      	cmp	r3, #128	@ 0x80
 800a96e:	d008      	beq.n	800a982 <USBD_StdEPReq+0xc0>
 800a970:	683b      	ldr	r3, [r7, #0]
 800a972:	88db      	ldrh	r3, [r3, #6]
 800a974:	2b00      	cmp	r3, #0
 800a976:	d104      	bne.n	800a982 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a978:	7bbb      	ldrb	r3, [r7, #14]
 800a97a:	4619      	mov	r1, r3
 800a97c:	6878      	ldr	r0, [r7, #4]
 800a97e:	f004 fdaf 	bl	800f4e0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a982:	6878      	ldr	r0, [r7, #4]
 800a984:	f000 fd23 	bl	800b3ce <USBD_CtlSendStatus>

              break;
 800a988:	e004      	b.n	800a994 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800a98a:	6839      	ldr	r1, [r7, #0]
 800a98c:	6878      	ldr	r0, [r7, #4]
 800a98e:	f000 fc53 	bl	800b238 <USBD_CtlError>
              break;
 800a992:	bf00      	nop
          }
          break;
 800a994:	e0ec      	b.n	800ab70 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a99c:	b2db      	uxtb	r3, r3
 800a99e:	2b02      	cmp	r3, #2
 800a9a0:	d002      	beq.n	800a9a8 <USBD_StdEPReq+0xe6>
 800a9a2:	2b03      	cmp	r3, #3
 800a9a4:	d016      	beq.n	800a9d4 <USBD_StdEPReq+0x112>
 800a9a6:	e030      	b.n	800aa0a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a9a8:	7bbb      	ldrb	r3, [r7, #14]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d00d      	beq.n	800a9ca <USBD_StdEPReq+0x108>
 800a9ae:	7bbb      	ldrb	r3, [r7, #14]
 800a9b0:	2b80      	cmp	r3, #128	@ 0x80
 800a9b2:	d00a      	beq.n	800a9ca <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a9b4:	7bbb      	ldrb	r3, [r7, #14]
 800a9b6:	4619      	mov	r1, r3
 800a9b8:	6878      	ldr	r0, [r7, #4]
 800a9ba:	f004 fd91 	bl	800f4e0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a9be:	2180      	movs	r1, #128	@ 0x80
 800a9c0:	6878      	ldr	r0, [r7, #4]
 800a9c2:	f004 fd8d 	bl	800f4e0 <USBD_LL_StallEP>
 800a9c6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a9c8:	e025      	b.n	800aa16 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800a9ca:	6839      	ldr	r1, [r7, #0]
 800a9cc:	6878      	ldr	r0, [r7, #4]
 800a9ce:	f000 fc33 	bl	800b238 <USBD_CtlError>
              break;
 800a9d2:	e020      	b.n	800aa16 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a9d4:	683b      	ldr	r3, [r7, #0]
 800a9d6:	885b      	ldrh	r3, [r3, #2]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d11b      	bne.n	800aa14 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a9dc:	7bbb      	ldrb	r3, [r7, #14]
 800a9de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d004      	beq.n	800a9f0 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a9e6:	7bbb      	ldrb	r3, [r7, #14]
 800a9e8:	4619      	mov	r1, r3
 800a9ea:	6878      	ldr	r0, [r7, #4]
 800a9ec:	f004 fd97 	bl	800f51e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a9f0:	6878      	ldr	r0, [r7, #4]
 800a9f2:	f000 fcec 	bl	800b3ce <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a9fc:	689b      	ldr	r3, [r3, #8]
 800a9fe:	6839      	ldr	r1, [r7, #0]
 800aa00:	6878      	ldr	r0, [r7, #4]
 800aa02:	4798      	blx	r3
 800aa04:	4603      	mov	r3, r0
 800aa06:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800aa08:	e004      	b.n	800aa14 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800aa0a:	6839      	ldr	r1, [r7, #0]
 800aa0c:	6878      	ldr	r0, [r7, #4]
 800aa0e:	f000 fc13 	bl	800b238 <USBD_CtlError>
              break;
 800aa12:	e000      	b.n	800aa16 <USBD_StdEPReq+0x154>
              break;
 800aa14:	bf00      	nop
          }
          break;
 800aa16:	e0ab      	b.n	800ab70 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa1e:	b2db      	uxtb	r3, r3
 800aa20:	2b02      	cmp	r3, #2
 800aa22:	d002      	beq.n	800aa2a <USBD_StdEPReq+0x168>
 800aa24:	2b03      	cmp	r3, #3
 800aa26:	d032      	beq.n	800aa8e <USBD_StdEPReq+0x1cc>
 800aa28:	e097      	b.n	800ab5a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aa2a:	7bbb      	ldrb	r3, [r7, #14]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d007      	beq.n	800aa40 <USBD_StdEPReq+0x17e>
 800aa30:	7bbb      	ldrb	r3, [r7, #14]
 800aa32:	2b80      	cmp	r3, #128	@ 0x80
 800aa34:	d004      	beq.n	800aa40 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800aa36:	6839      	ldr	r1, [r7, #0]
 800aa38:	6878      	ldr	r0, [r7, #4]
 800aa3a:	f000 fbfd 	bl	800b238 <USBD_CtlError>
                break;
 800aa3e:	e091      	b.n	800ab64 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aa40:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	da0b      	bge.n	800aa60 <USBD_StdEPReq+0x19e>
 800aa48:	7bbb      	ldrb	r3, [r7, #14]
 800aa4a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800aa4e:	4613      	mov	r3, r2
 800aa50:	009b      	lsls	r3, r3, #2
 800aa52:	4413      	add	r3, r2
 800aa54:	009b      	lsls	r3, r3, #2
 800aa56:	3310      	adds	r3, #16
 800aa58:	687a      	ldr	r2, [r7, #4]
 800aa5a:	4413      	add	r3, r2
 800aa5c:	3304      	adds	r3, #4
 800aa5e:	e00b      	b.n	800aa78 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800aa60:	7bbb      	ldrb	r3, [r7, #14]
 800aa62:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aa66:	4613      	mov	r3, r2
 800aa68:	009b      	lsls	r3, r3, #2
 800aa6a:	4413      	add	r3, r2
 800aa6c:	009b      	lsls	r3, r3, #2
 800aa6e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800aa72:	687a      	ldr	r2, [r7, #4]
 800aa74:	4413      	add	r3, r2
 800aa76:	3304      	adds	r3, #4
 800aa78:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800aa7a:	68bb      	ldr	r3, [r7, #8]
 800aa7c:	2200      	movs	r2, #0
 800aa7e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800aa80:	68bb      	ldr	r3, [r7, #8]
 800aa82:	2202      	movs	r2, #2
 800aa84:	4619      	mov	r1, r3
 800aa86:	6878      	ldr	r0, [r7, #4]
 800aa88:	f000 fc47 	bl	800b31a <USBD_CtlSendData>
              break;
 800aa8c:	e06a      	b.n	800ab64 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800aa8e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	da11      	bge.n	800aaba <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800aa96:	7bbb      	ldrb	r3, [r7, #14]
 800aa98:	f003 020f 	and.w	r2, r3, #15
 800aa9c:	6879      	ldr	r1, [r7, #4]
 800aa9e:	4613      	mov	r3, r2
 800aaa0:	009b      	lsls	r3, r3, #2
 800aaa2:	4413      	add	r3, r2
 800aaa4:	009b      	lsls	r3, r3, #2
 800aaa6:	440b      	add	r3, r1
 800aaa8:	3324      	adds	r3, #36	@ 0x24
 800aaaa:	881b      	ldrh	r3, [r3, #0]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d117      	bne.n	800aae0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800aab0:	6839      	ldr	r1, [r7, #0]
 800aab2:	6878      	ldr	r0, [r7, #4]
 800aab4:	f000 fbc0 	bl	800b238 <USBD_CtlError>
                  break;
 800aab8:	e054      	b.n	800ab64 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800aaba:	7bbb      	ldrb	r3, [r7, #14]
 800aabc:	f003 020f 	and.w	r2, r3, #15
 800aac0:	6879      	ldr	r1, [r7, #4]
 800aac2:	4613      	mov	r3, r2
 800aac4:	009b      	lsls	r3, r3, #2
 800aac6:	4413      	add	r3, r2
 800aac8:	009b      	lsls	r3, r3, #2
 800aaca:	440b      	add	r3, r1
 800aacc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800aad0:	881b      	ldrh	r3, [r3, #0]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d104      	bne.n	800aae0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800aad6:	6839      	ldr	r1, [r7, #0]
 800aad8:	6878      	ldr	r0, [r7, #4]
 800aada:	f000 fbad 	bl	800b238 <USBD_CtlError>
                  break;
 800aade:	e041      	b.n	800ab64 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aae0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	da0b      	bge.n	800ab00 <USBD_StdEPReq+0x23e>
 800aae8:	7bbb      	ldrb	r3, [r7, #14]
 800aaea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800aaee:	4613      	mov	r3, r2
 800aaf0:	009b      	lsls	r3, r3, #2
 800aaf2:	4413      	add	r3, r2
 800aaf4:	009b      	lsls	r3, r3, #2
 800aaf6:	3310      	adds	r3, #16
 800aaf8:	687a      	ldr	r2, [r7, #4]
 800aafa:	4413      	add	r3, r2
 800aafc:	3304      	adds	r3, #4
 800aafe:	e00b      	b.n	800ab18 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ab00:	7bbb      	ldrb	r3, [r7, #14]
 800ab02:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ab06:	4613      	mov	r3, r2
 800ab08:	009b      	lsls	r3, r3, #2
 800ab0a:	4413      	add	r3, r2
 800ab0c:	009b      	lsls	r3, r3, #2
 800ab0e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ab12:	687a      	ldr	r2, [r7, #4]
 800ab14:	4413      	add	r3, r2
 800ab16:	3304      	adds	r3, #4
 800ab18:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ab1a:	7bbb      	ldrb	r3, [r7, #14]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d002      	beq.n	800ab26 <USBD_StdEPReq+0x264>
 800ab20:	7bbb      	ldrb	r3, [r7, #14]
 800ab22:	2b80      	cmp	r3, #128	@ 0x80
 800ab24:	d103      	bne.n	800ab2e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800ab26:	68bb      	ldr	r3, [r7, #8]
 800ab28:	2200      	movs	r2, #0
 800ab2a:	601a      	str	r2, [r3, #0]
 800ab2c:	e00e      	b.n	800ab4c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ab2e:	7bbb      	ldrb	r3, [r7, #14]
 800ab30:	4619      	mov	r1, r3
 800ab32:	6878      	ldr	r0, [r7, #4]
 800ab34:	f004 fd12 	bl	800f55c <USBD_LL_IsStallEP>
 800ab38:	4603      	mov	r3, r0
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d003      	beq.n	800ab46 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800ab3e:	68bb      	ldr	r3, [r7, #8]
 800ab40:	2201      	movs	r2, #1
 800ab42:	601a      	str	r2, [r3, #0]
 800ab44:	e002      	b.n	800ab4c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800ab46:	68bb      	ldr	r3, [r7, #8]
 800ab48:	2200      	movs	r2, #0
 800ab4a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ab4c:	68bb      	ldr	r3, [r7, #8]
 800ab4e:	2202      	movs	r2, #2
 800ab50:	4619      	mov	r1, r3
 800ab52:	6878      	ldr	r0, [r7, #4]
 800ab54:	f000 fbe1 	bl	800b31a <USBD_CtlSendData>
              break;
 800ab58:	e004      	b.n	800ab64 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800ab5a:	6839      	ldr	r1, [r7, #0]
 800ab5c:	6878      	ldr	r0, [r7, #4]
 800ab5e:	f000 fb6b 	bl	800b238 <USBD_CtlError>
              break;
 800ab62:	bf00      	nop
          }
          break;
 800ab64:	e004      	b.n	800ab70 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800ab66:	6839      	ldr	r1, [r7, #0]
 800ab68:	6878      	ldr	r0, [r7, #4]
 800ab6a:	f000 fb65 	bl	800b238 <USBD_CtlError>
          break;
 800ab6e:	bf00      	nop
      }
      break;
 800ab70:	e004      	b.n	800ab7c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800ab72:	6839      	ldr	r1, [r7, #0]
 800ab74:	6878      	ldr	r0, [r7, #4]
 800ab76:	f000 fb5f 	bl	800b238 <USBD_CtlError>
      break;
 800ab7a:	bf00      	nop
  }

  return ret;
 800ab7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab7e:	4618      	mov	r0, r3
 800ab80:	3710      	adds	r7, #16
 800ab82:	46bd      	mov	sp, r7
 800ab84:	bd80      	pop	{r7, pc}
	...

0800ab88 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab88:	b580      	push	{r7, lr}
 800ab8a:	b084      	sub	sp, #16
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	6078      	str	r0, [r7, #4]
 800ab90:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ab92:	2300      	movs	r3, #0
 800ab94:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ab96:	2300      	movs	r3, #0
 800ab98:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ab9e:	683b      	ldr	r3, [r7, #0]
 800aba0:	885b      	ldrh	r3, [r3, #2]
 800aba2:	0a1b      	lsrs	r3, r3, #8
 800aba4:	b29b      	uxth	r3, r3
 800aba6:	3b01      	subs	r3, #1
 800aba8:	2b0e      	cmp	r3, #14
 800abaa:	f200 8152 	bhi.w	800ae52 <USBD_GetDescriptor+0x2ca>
 800abae:	a201      	add	r2, pc, #4	@ (adr r2, 800abb4 <USBD_GetDescriptor+0x2c>)
 800abb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abb4:	0800ac25 	.word	0x0800ac25
 800abb8:	0800ac3d 	.word	0x0800ac3d
 800abbc:	0800ac7d 	.word	0x0800ac7d
 800abc0:	0800ae53 	.word	0x0800ae53
 800abc4:	0800ae53 	.word	0x0800ae53
 800abc8:	0800adf3 	.word	0x0800adf3
 800abcc:	0800ae1f 	.word	0x0800ae1f
 800abd0:	0800ae53 	.word	0x0800ae53
 800abd4:	0800ae53 	.word	0x0800ae53
 800abd8:	0800ae53 	.word	0x0800ae53
 800abdc:	0800ae53 	.word	0x0800ae53
 800abe0:	0800ae53 	.word	0x0800ae53
 800abe4:	0800ae53 	.word	0x0800ae53
 800abe8:	0800ae53 	.word	0x0800ae53
 800abec:	0800abf1 	.word	0x0800abf1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800abf6:	69db      	ldr	r3, [r3, #28]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d00b      	beq.n	800ac14 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ac02:	69db      	ldr	r3, [r3, #28]
 800ac04:	687a      	ldr	r2, [r7, #4]
 800ac06:	7c12      	ldrb	r2, [r2, #16]
 800ac08:	f107 0108 	add.w	r1, r7, #8
 800ac0c:	4610      	mov	r0, r2
 800ac0e:	4798      	blx	r3
 800ac10:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ac12:	e126      	b.n	800ae62 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ac14:	6839      	ldr	r1, [r7, #0]
 800ac16:	6878      	ldr	r0, [r7, #4]
 800ac18:	f000 fb0e 	bl	800b238 <USBD_CtlError>
        err++;
 800ac1c:	7afb      	ldrb	r3, [r7, #11]
 800ac1e:	3301      	adds	r3, #1
 800ac20:	72fb      	strb	r3, [r7, #11]
      break;
 800ac22:	e11e      	b.n	800ae62 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	687a      	ldr	r2, [r7, #4]
 800ac2e:	7c12      	ldrb	r2, [r2, #16]
 800ac30:	f107 0108 	add.w	r1, r7, #8
 800ac34:	4610      	mov	r0, r2
 800ac36:	4798      	blx	r3
 800ac38:	60f8      	str	r0, [r7, #12]
      break;
 800ac3a:	e112      	b.n	800ae62 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	7c1b      	ldrb	r3, [r3, #16]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d10d      	bne.n	800ac60 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ac4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac4c:	f107 0208 	add.w	r2, r7, #8
 800ac50:	4610      	mov	r0, r2
 800ac52:	4798      	blx	r3
 800ac54:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	3301      	adds	r3, #1
 800ac5a:	2202      	movs	r2, #2
 800ac5c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ac5e:	e100      	b.n	800ae62 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ac66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac68:	f107 0208 	add.w	r2, r7, #8
 800ac6c:	4610      	mov	r0, r2
 800ac6e:	4798      	blx	r3
 800ac70:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	3301      	adds	r3, #1
 800ac76:	2202      	movs	r2, #2
 800ac78:	701a      	strb	r2, [r3, #0]
      break;
 800ac7a:	e0f2      	b.n	800ae62 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ac7c:	683b      	ldr	r3, [r7, #0]
 800ac7e:	885b      	ldrh	r3, [r3, #2]
 800ac80:	b2db      	uxtb	r3, r3
 800ac82:	2b05      	cmp	r3, #5
 800ac84:	f200 80ac 	bhi.w	800ade0 <USBD_GetDescriptor+0x258>
 800ac88:	a201      	add	r2, pc, #4	@ (adr r2, 800ac90 <USBD_GetDescriptor+0x108>)
 800ac8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac8e:	bf00      	nop
 800ac90:	0800aca9 	.word	0x0800aca9
 800ac94:	0800acdd 	.word	0x0800acdd
 800ac98:	0800ad11 	.word	0x0800ad11
 800ac9c:	0800ad45 	.word	0x0800ad45
 800aca0:	0800ad79 	.word	0x0800ad79
 800aca4:	0800adad 	.word	0x0800adad
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800acae:	685b      	ldr	r3, [r3, #4]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d00b      	beq.n	800accc <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800acba:	685b      	ldr	r3, [r3, #4]
 800acbc:	687a      	ldr	r2, [r7, #4]
 800acbe:	7c12      	ldrb	r2, [r2, #16]
 800acc0:	f107 0108 	add.w	r1, r7, #8
 800acc4:	4610      	mov	r0, r2
 800acc6:	4798      	blx	r3
 800acc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800acca:	e091      	b.n	800adf0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800accc:	6839      	ldr	r1, [r7, #0]
 800acce:	6878      	ldr	r0, [r7, #4]
 800acd0:	f000 fab2 	bl	800b238 <USBD_CtlError>
            err++;
 800acd4:	7afb      	ldrb	r3, [r7, #11]
 800acd6:	3301      	adds	r3, #1
 800acd8:	72fb      	strb	r3, [r7, #11]
          break;
 800acda:	e089      	b.n	800adf0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ace2:	689b      	ldr	r3, [r3, #8]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d00b      	beq.n	800ad00 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800acee:	689b      	ldr	r3, [r3, #8]
 800acf0:	687a      	ldr	r2, [r7, #4]
 800acf2:	7c12      	ldrb	r2, [r2, #16]
 800acf4:	f107 0108 	add.w	r1, r7, #8
 800acf8:	4610      	mov	r0, r2
 800acfa:	4798      	blx	r3
 800acfc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800acfe:	e077      	b.n	800adf0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ad00:	6839      	ldr	r1, [r7, #0]
 800ad02:	6878      	ldr	r0, [r7, #4]
 800ad04:	f000 fa98 	bl	800b238 <USBD_CtlError>
            err++;
 800ad08:	7afb      	ldrb	r3, [r7, #11]
 800ad0a:	3301      	adds	r3, #1
 800ad0c:	72fb      	strb	r3, [r7, #11]
          break;
 800ad0e:	e06f      	b.n	800adf0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ad16:	68db      	ldr	r3, [r3, #12]
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d00b      	beq.n	800ad34 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ad22:	68db      	ldr	r3, [r3, #12]
 800ad24:	687a      	ldr	r2, [r7, #4]
 800ad26:	7c12      	ldrb	r2, [r2, #16]
 800ad28:	f107 0108 	add.w	r1, r7, #8
 800ad2c:	4610      	mov	r0, r2
 800ad2e:	4798      	blx	r3
 800ad30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad32:	e05d      	b.n	800adf0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ad34:	6839      	ldr	r1, [r7, #0]
 800ad36:	6878      	ldr	r0, [r7, #4]
 800ad38:	f000 fa7e 	bl	800b238 <USBD_CtlError>
            err++;
 800ad3c:	7afb      	ldrb	r3, [r7, #11]
 800ad3e:	3301      	adds	r3, #1
 800ad40:	72fb      	strb	r3, [r7, #11]
          break;
 800ad42:	e055      	b.n	800adf0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ad4a:	691b      	ldr	r3, [r3, #16]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d00b      	beq.n	800ad68 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ad56:	691b      	ldr	r3, [r3, #16]
 800ad58:	687a      	ldr	r2, [r7, #4]
 800ad5a:	7c12      	ldrb	r2, [r2, #16]
 800ad5c:	f107 0108 	add.w	r1, r7, #8
 800ad60:	4610      	mov	r0, r2
 800ad62:	4798      	blx	r3
 800ad64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad66:	e043      	b.n	800adf0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ad68:	6839      	ldr	r1, [r7, #0]
 800ad6a:	6878      	ldr	r0, [r7, #4]
 800ad6c:	f000 fa64 	bl	800b238 <USBD_CtlError>
            err++;
 800ad70:	7afb      	ldrb	r3, [r7, #11]
 800ad72:	3301      	adds	r3, #1
 800ad74:	72fb      	strb	r3, [r7, #11]
          break;
 800ad76:	e03b      	b.n	800adf0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ad7e:	695b      	ldr	r3, [r3, #20]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d00b      	beq.n	800ad9c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ad8a:	695b      	ldr	r3, [r3, #20]
 800ad8c:	687a      	ldr	r2, [r7, #4]
 800ad8e:	7c12      	ldrb	r2, [r2, #16]
 800ad90:	f107 0108 	add.w	r1, r7, #8
 800ad94:	4610      	mov	r0, r2
 800ad96:	4798      	blx	r3
 800ad98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad9a:	e029      	b.n	800adf0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ad9c:	6839      	ldr	r1, [r7, #0]
 800ad9e:	6878      	ldr	r0, [r7, #4]
 800ada0:	f000 fa4a 	bl	800b238 <USBD_CtlError>
            err++;
 800ada4:	7afb      	ldrb	r3, [r7, #11]
 800ada6:	3301      	adds	r3, #1
 800ada8:	72fb      	strb	r3, [r7, #11]
          break;
 800adaa:	e021      	b.n	800adf0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800adb2:	699b      	ldr	r3, [r3, #24]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d00b      	beq.n	800add0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800adbe:	699b      	ldr	r3, [r3, #24]
 800adc0:	687a      	ldr	r2, [r7, #4]
 800adc2:	7c12      	ldrb	r2, [r2, #16]
 800adc4:	f107 0108 	add.w	r1, r7, #8
 800adc8:	4610      	mov	r0, r2
 800adca:	4798      	blx	r3
 800adcc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800adce:	e00f      	b.n	800adf0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800add0:	6839      	ldr	r1, [r7, #0]
 800add2:	6878      	ldr	r0, [r7, #4]
 800add4:	f000 fa30 	bl	800b238 <USBD_CtlError>
            err++;
 800add8:	7afb      	ldrb	r3, [r7, #11]
 800adda:	3301      	adds	r3, #1
 800addc:	72fb      	strb	r3, [r7, #11]
          break;
 800adde:	e007      	b.n	800adf0 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800ade0:	6839      	ldr	r1, [r7, #0]
 800ade2:	6878      	ldr	r0, [r7, #4]
 800ade4:	f000 fa28 	bl	800b238 <USBD_CtlError>
          err++;
 800ade8:	7afb      	ldrb	r3, [r7, #11]
 800adea:	3301      	adds	r3, #1
 800adec:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800adee:	bf00      	nop
      }
      break;
 800adf0:	e037      	b.n	800ae62 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	7c1b      	ldrb	r3, [r3, #16]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d109      	bne.n	800ae0e <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ae00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae02:	f107 0208 	add.w	r2, r7, #8
 800ae06:	4610      	mov	r0, r2
 800ae08:	4798      	blx	r3
 800ae0a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ae0c:	e029      	b.n	800ae62 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ae0e:	6839      	ldr	r1, [r7, #0]
 800ae10:	6878      	ldr	r0, [r7, #4]
 800ae12:	f000 fa11 	bl	800b238 <USBD_CtlError>
        err++;
 800ae16:	7afb      	ldrb	r3, [r7, #11]
 800ae18:	3301      	adds	r3, #1
 800ae1a:	72fb      	strb	r3, [r7, #11]
      break;
 800ae1c:	e021      	b.n	800ae62 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	7c1b      	ldrb	r3, [r3, #16]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d10d      	bne.n	800ae42 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ae2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae2e:	f107 0208 	add.w	r2, r7, #8
 800ae32:	4610      	mov	r0, r2
 800ae34:	4798      	blx	r3
 800ae36:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	3301      	adds	r3, #1
 800ae3c:	2207      	movs	r2, #7
 800ae3e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ae40:	e00f      	b.n	800ae62 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ae42:	6839      	ldr	r1, [r7, #0]
 800ae44:	6878      	ldr	r0, [r7, #4]
 800ae46:	f000 f9f7 	bl	800b238 <USBD_CtlError>
        err++;
 800ae4a:	7afb      	ldrb	r3, [r7, #11]
 800ae4c:	3301      	adds	r3, #1
 800ae4e:	72fb      	strb	r3, [r7, #11]
      break;
 800ae50:	e007      	b.n	800ae62 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800ae52:	6839      	ldr	r1, [r7, #0]
 800ae54:	6878      	ldr	r0, [r7, #4]
 800ae56:	f000 f9ef 	bl	800b238 <USBD_CtlError>
      err++;
 800ae5a:	7afb      	ldrb	r3, [r7, #11]
 800ae5c:	3301      	adds	r3, #1
 800ae5e:	72fb      	strb	r3, [r7, #11]
      break;
 800ae60:	bf00      	nop
  }

  if (err != 0U)
 800ae62:	7afb      	ldrb	r3, [r7, #11]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d11e      	bne.n	800aea6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800ae68:	683b      	ldr	r3, [r7, #0]
 800ae6a:	88db      	ldrh	r3, [r3, #6]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d016      	beq.n	800ae9e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800ae70:	893b      	ldrh	r3, [r7, #8]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d00e      	beq.n	800ae94 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800ae76:	683b      	ldr	r3, [r7, #0]
 800ae78:	88da      	ldrh	r2, [r3, #6]
 800ae7a:	893b      	ldrh	r3, [r7, #8]
 800ae7c:	4293      	cmp	r3, r2
 800ae7e:	bf28      	it	cs
 800ae80:	4613      	movcs	r3, r2
 800ae82:	b29b      	uxth	r3, r3
 800ae84:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ae86:	893b      	ldrh	r3, [r7, #8]
 800ae88:	461a      	mov	r2, r3
 800ae8a:	68f9      	ldr	r1, [r7, #12]
 800ae8c:	6878      	ldr	r0, [r7, #4]
 800ae8e:	f000 fa44 	bl	800b31a <USBD_CtlSendData>
 800ae92:	e009      	b.n	800aea8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ae94:	6839      	ldr	r1, [r7, #0]
 800ae96:	6878      	ldr	r0, [r7, #4]
 800ae98:	f000 f9ce 	bl	800b238 <USBD_CtlError>
 800ae9c:	e004      	b.n	800aea8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ae9e:	6878      	ldr	r0, [r7, #4]
 800aea0:	f000 fa95 	bl	800b3ce <USBD_CtlSendStatus>
 800aea4:	e000      	b.n	800aea8 <USBD_GetDescriptor+0x320>
    return;
 800aea6:	bf00      	nop
  }
}
 800aea8:	3710      	adds	r7, #16
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	bd80      	pop	{r7, pc}
 800aeae:	bf00      	nop

0800aeb0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	b084      	sub	sp, #16
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
 800aeb8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800aeba:	683b      	ldr	r3, [r7, #0]
 800aebc:	889b      	ldrh	r3, [r3, #4]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d131      	bne.n	800af26 <USBD_SetAddress+0x76>
 800aec2:	683b      	ldr	r3, [r7, #0]
 800aec4:	88db      	ldrh	r3, [r3, #6]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d12d      	bne.n	800af26 <USBD_SetAddress+0x76>
 800aeca:	683b      	ldr	r3, [r7, #0]
 800aecc:	885b      	ldrh	r3, [r3, #2]
 800aece:	2b7f      	cmp	r3, #127	@ 0x7f
 800aed0:	d829      	bhi.n	800af26 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800aed2:	683b      	ldr	r3, [r7, #0]
 800aed4:	885b      	ldrh	r3, [r3, #2]
 800aed6:	b2db      	uxtb	r3, r3
 800aed8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aedc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aee4:	b2db      	uxtb	r3, r3
 800aee6:	2b03      	cmp	r3, #3
 800aee8:	d104      	bne.n	800aef4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800aeea:	6839      	ldr	r1, [r7, #0]
 800aeec:	6878      	ldr	r0, [r7, #4]
 800aeee:	f000 f9a3 	bl	800b238 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aef2:	e01d      	b.n	800af30 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	7bfa      	ldrb	r2, [r7, #15]
 800aef8:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800aefc:	7bfb      	ldrb	r3, [r7, #15]
 800aefe:	4619      	mov	r1, r3
 800af00:	6878      	ldr	r0, [r7, #4]
 800af02:	f004 fb57 	bl	800f5b4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800af06:	6878      	ldr	r0, [r7, #4]
 800af08:	f000 fa61 	bl	800b3ce <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800af0c:	7bfb      	ldrb	r3, [r7, #15]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d004      	beq.n	800af1c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	2202      	movs	r2, #2
 800af16:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af1a:	e009      	b.n	800af30 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	2201      	movs	r2, #1
 800af20:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af24:	e004      	b.n	800af30 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800af26:	6839      	ldr	r1, [r7, #0]
 800af28:	6878      	ldr	r0, [r7, #4]
 800af2a:	f000 f985 	bl	800b238 <USBD_CtlError>
  }
}
 800af2e:	bf00      	nop
 800af30:	bf00      	nop
 800af32:	3710      	adds	r7, #16
 800af34:	46bd      	mov	sp, r7
 800af36:	bd80      	pop	{r7, pc}

0800af38 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af38:	b580      	push	{r7, lr}
 800af3a:	b084      	sub	sp, #16
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	6078      	str	r0, [r7, #4]
 800af40:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800af42:	2300      	movs	r3, #0
 800af44:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800af46:	683b      	ldr	r3, [r7, #0]
 800af48:	885b      	ldrh	r3, [r3, #2]
 800af4a:	b2da      	uxtb	r2, r3
 800af4c:	4b4c      	ldr	r3, [pc, #304]	@ (800b080 <USBD_SetConfig+0x148>)
 800af4e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800af50:	4b4b      	ldr	r3, [pc, #300]	@ (800b080 <USBD_SetConfig+0x148>)
 800af52:	781b      	ldrb	r3, [r3, #0]
 800af54:	2b01      	cmp	r3, #1
 800af56:	d905      	bls.n	800af64 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800af58:	6839      	ldr	r1, [r7, #0]
 800af5a:	6878      	ldr	r0, [r7, #4]
 800af5c:	f000 f96c 	bl	800b238 <USBD_CtlError>
    return USBD_FAIL;
 800af60:	2303      	movs	r3, #3
 800af62:	e088      	b.n	800b076 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800af6a:	b2db      	uxtb	r3, r3
 800af6c:	2b02      	cmp	r3, #2
 800af6e:	d002      	beq.n	800af76 <USBD_SetConfig+0x3e>
 800af70:	2b03      	cmp	r3, #3
 800af72:	d025      	beq.n	800afc0 <USBD_SetConfig+0x88>
 800af74:	e071      	b.n	800b05a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800af76:	4b42      	ldr	r3, [pc, #264]	@ (800b080 <USBD_SetConfig+0x148>)
 800af78:	781b      	ldrb	r3, [r3, #0]
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d01c      	beq.n	800afb8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800af7e:	4b40      	ldr	r3, [pc, #256]	@ (800b080 <USBD_SetConfig+0x148>)
 800af80:	781b      	ldrb	r3, [r3, #0]
 800af82:	461a      	mov	r2, r3
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800af88:	4b3d      	ldr	r3, [pc, #244]	@ (800b080 <USBD_SetConfig+0x148>)
 800af8a:	781b      	ldrb	r3, [r3, #0]
 800af8c:	4619      	mov	r1, r3
 800af8e:	6878      	ldr	r0, [r7, #4]
 800af90:	f7ff f992 	bl	800a2b8 <USBD_SetClassConfig>
 800af94:	4603      	mov	r3, r0
 800af96:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800af98:	7bfb      	ldrb	r3, [r7, #15]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d004      	beq.n	800afa8 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800af9e:	6839      	ldr	r1, [r7, #0]
 800afa0:	6878      	ldr	r0, [r7, #4]
 800afa2:	f000 f949 	bl	800b238 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800afa6:	e065      	b.n	800b074 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800afa8:	6878      	ldr	r0, [r7, #4]
 800afaa:	f000 fa10 	bl	800b3ce <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	2203      	movs	r2, #3
 800afb2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800afb6:	e05d      	b.n	800b074 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800afb8:	6878      	ldr	r0, [r7, #4]
 800afba:	f000 fa08 	bl	800b3ce <USBD_CtlSendStatus>
      break;
 800afbe:	e059      	b.n	800b074 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800afc0:	4b2f      	ldr	r3, [pc, #188]	@ (800b080 <USBD_SetConfig+0x148>)
 800afc2:	781b      	ldrb	r3, [r3, #0]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d112      	bne.n	800afee <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	2202      	movs	r2, #2
 800afcc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800afd0:	4b2b      	ldr	r3, [pc, #172]	@ (800b080 <USBD_SetConfig+0x148>)
 800afd2:	781b      	ldrb	r3, [r3, #0]
 800afd4:	461a      	mov	r2, r3
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800afda:	4b29      	ldr	r3, [pc, #164]	@ (800b080 <USBD_SetConfig+0x148>)
 800afdc:	781b      	ldrb	r3, [r3, #0]
 800afde:	4619      	mov	r1, r3
 800afe0:	6878      	ldr	r0, [r7, #4]
 800afe2:	f7ff f985 	bl	800a2f0 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800afe6:	6878      	ldr	r0, [r7, #4]
 800afe8:	f000 f9f1 	bl	800b3ce <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800afec:	e042      	b.n	800b074 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800afee:	4b24      	ldr	r3, [pc, #144]	@ (800b080 <USBD_SetConfig+0x148>)
 800aff0:	781b      	ldrb	r3, [r3, #0]
 800aff2:	461a      	mov	r2, r3
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	685b      	ldr	r3, [r3, #4]
 800aff8:	429a      	cmp	r2, r3
 800affa:	d02a      	beq.n	800b052 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	685b      	ldr	r3, [r3, #4]
 800b000:	b2db      	uxtb	r3, r3
 800b002:	4619      	mov	r1, r3
 800b004:	6878      	ldr	r0, [r7, #4]
 800b006:	f7ff f973 	bl	800a2f0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b00a:	4b1d      	ldr	r3, [pc, #116]	@ (800b080 <USBD_SetConfig+0x148>)
 800b00c:	781b      	ldrb	r3, [r3, #0]
 800b00e:	461a      	mov	r2, r3
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b014:	4b1a      	ldr	r3, [pc, #104]	@ (800b080 <USBD_SetConfig+0x148>)
 800b016:	781b      	ldrb	r3, [r3, #0]
 800b018:	4619      	mov	r1, r3
 800b01a:	6878      	ldr	r0, [r7, #4]
 800b01c:	f7ff f94c 	bl	800a2b8 <USBD_SetClassConfig>
 800b020:	4603      	mov	r3, r0
 800b022:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b024:	7bfb      	ldrb	r3, [r7, #15]
 800b026:	2b00      	cmp	r3, #0
 800b028:	d00f      	beq.n	800b04a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800b02a:	6839      	ldr	r1, [r7, #0]
 800b02c:	6878      	ldr	r0, [r7, #4]
 800b02e:	f000 f903 	bl	800b238 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	685b      	ldr	r3, [r3, #4]
 800b036:	b2db      	uxtb	r3, r3
 800b038:	4619      	mov	r1, r3
 800b03a:	6878      	ldr	r0, [r7, #4]
 800b03c:	f7ff f958 	bl	800a2f0 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	2202      	movs	r2, #2
 800b044:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b048:	e014      	b.n	800b074 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b04a:	6878      	ldr	r0, [r7, #4]
 800b04c:	f000 f9bf 	bl	800b3ce <USBD_CtlSendStatus>
      break;
 800b050:	e010      	b.n	800b074 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b052:	6878      	ldr	r0, [r7, #4]
 800b054:	f000 f9bb 	bl	800b3ce <USBD_CtlSendStatus>
      break;
 800b058:	e00c      	b.n	800b074 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800b05a:	6839      	ldr	r1, [r7, #0]
 800b05c:	6878      	ldr	r0, [r7, #4]
 800b05e:	f000 f8eb 	bl	800b238 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b062:	4b07      	ldr	r3, [pc, #28]	@ (800b080 <USBD_SetConfig+0x148>)
 800b064:	781b      	ldrb	r3, [r3, #0]
 800b066:	4619      	mov	r1, r3
 800b068:	6878      	ldr	r0, [r7, #4]
 800b06a:	f7ff f941 	bl	800a2f0 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b06e:	2303      	movs	r3, #3
 800b070:	73fb      	strb	r3, [r7, #15]
      break;
 800b072:	bf00      	nop
  }

  return ret;
 800b074:	7bfb      	ldrb	r3, [r7, #15]
}
 800b076:	4618      	mov	r0, r3
 800b078:	3710      	adds	r7, #16
 800b07a:	46bd      	mov	sp, r7
 800b07c:	bd80      	pop	{r7, pc}
 800b07e:	bf00      	nop
 800b080:	20000640 	.word	0x20000640

0800b084 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b084:	b580      	push	{r7, lr}
 800b086:	b082      	sub	sp, #8
 800b088:	af00      	add	r7, sp, #0
 800b08a:	6078      	str	r0, [r7, #4]
 800b08c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b08e:	683b      	ldr	r3, [r7, #0]
 800b090:	88db      	ldrh	r3, [r3, #6]
 800b092:	2b01      	cmp	r3, #1
 800b094:	d004      	beq.n	800b0a0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b096:	6839      	ldr	r1, [r7, #0]
 800b098:	6878      	ldr	r0, [r7, #4]
 800b09a:	f000 f8cd 	bl	800b238 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b09e:	e023      	b.n	800b0e8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b0a6:	b2db      	uxtb	r3, r3
 800b0a8:	2b02      	cmp	r3, #2
 800b0aa:	dc02      	bgt.n	800b0b2 <USBD_GetConfig+0x2e>
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	dc03      	bgt.n	800b0b8 <USBD_GetConfig+0x34>
 800b0b0:	e015      	b.n	800b0de <USBD_GetConfig+0x5a>
 800b0b2:	2b03      	cmp	r3, #3
 800b0b4:	d00b      	beq.n	800b0ce <USBD_GetConfig+0x4a>
 800b0b6:	e012      	b.n	800b0de <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	3308      	adds	r3, #8
 800b0c2:	2201      	movs	r2, #1
 800b0c4:	4619      	mov	r1, r3
 800b0c6:	6878      	ldr	r0, [r7, #4]
 800b0c8:	f000 f927 	bl	800b31a <USBD_CtlSendData>
        break;
 800b0cc:	e00c      	b.n	800b0e8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	3304      	adds	r3, #4
 800b0d2:	2201      	movs	r2, #1
 800b0d4:	4619      	mov	r1, r3
 800b0d6:	6878      	ldr	r0, [r7, #4]
 800b0d8:	f000 f91f 	bl	800b31a <USBD_CtlSendData>
        break;
 800b0dc:	e004      	b.n	800b0e8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b0de:	6839      	ldr	r1, [r7, #0]
 800b0e0:	6878      	ldr	r0, [r7, #4]
 800b0e2:	f000 f8a9 	bl	800b238 <USBD_CtlError>
        break;
 800b0e6:	bf00      	nop
}
 800b0e8:	bf00      	nop
 800b0ea:	3708      	adds	r7, #8
 800b0ec:	46bd      	mov	sp, r7
 800b0ee:	bd80      	pop	{r7, pc}

0800b0f0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	b082      	sub	sp, #8
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	6078      	str	r0, [r7, #4]
 800b0f8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b100:	b2db      	uxtb	r3, r3
 800b102:	3b01      	subs	r3, #1
 800b104:	2b02      	cmp	r3, #2
 800b106:	d81e      	bhi.n	800b146 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b108:	683b      	ldr	r3, [r7, #0]
 800b10a:	88db      	ldrh	r3, [r3, #6]
 800b10c:	2b02      	cmp	r3, #2
 800b10e:	d004      	beq.n	800b11a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b110:	6839      	ldr	r1, [r7, #0]
 800b112:	6878      	ldr	r0, [r7, #4]
 800b114:	f000 f890 	bl	800b238 <USBD_CtlError>
        break;
 800b118:	e01a      	b.n	800b150 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	2201      	movs	r2, #1
 800b11e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800b126:	2b00      	cmp	r3, #0
 800b128:	d005      	beq.n	800b136 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	68db      	ldr	r3, [r3, #12]
 800b12e:	f043 0202 	orr.w	r2, r3, #2
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	330c      	adds	r3, #12
 800b13a:	2202      	movs	r2, #2
 800b13c:	4619      	mov	r1, r3
 800b13e:	6878      	ldr	r0, [r7, #4]
 800b140:	f000 f8eb 	bl	800b31a <USBD_CtlSendData>
      break;
 800b144:	e004      	b.n	800b150 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b146:	6839      	ldr	r1, [r7, #0]
 800b148:	6878      	ldr	r0, [r7, #4]
 800b14a:	f000 f875 	bl	800b238 <USBD_CtlError>
      break;
 800b14e:	bf00      	nop
  }
}
 800b150:	bf00      	nop
 800b152:	3708      	adds	r7, #8
 800b154:	46bd      	mov	sp, r7
 800b156:	bd80      	pop	{r7, pc}

0800b158 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b158:	b580      	push	{r7, lr}
 800b15a:	b082      	sub	sp, #8
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	6078      	str	r0, [r7, #4]
 800b160:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b162:	683b      	ldr	r3, [r7, #0]
 800b164:	885b      	ldrh	r3, [r3, #2]
 800b166:	2b01      	cmp	r3, #1
 800b168:	d106      	bne.n	800b178 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	2201      	movs	r2, #1
 800b16e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b172:	6878      	ldr	r0, [r7, #4]
 800b174:	f000 f92b 	bl	800b3ce <USBD_CtlSendStatus>
  }
}
 800b178:	bf00      	nop
 800b17a:	3708      	adds	r7, #8
 800b17c:	46bd      	mov	sp, r7
 800b17e:	bd80      	pop	{r7, pc}

0800b180 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b180:	b580      	push	{r7, lr}
 800b182:	b082      	sub	sp, #8
 800b184:	af00      	add	r7, sp, #0
 800b186:	6078      	str	r0, [r7, #4]
 800b188:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b190:	b2db      	uxtb	r3, r3
 800b192:	3b01      	subs	r3, #1
 800b194:	2b02      	cmp	r3, #2
 800b196:	d80b      	bhi.n	800b1b0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b198:	683b      	ldr	r3, [r7, #0]
 800b19a:	885b      	ldrh	r3, [r3, #2]
 800b19c:	2b01      	cmp	r3, #1
 800b19e:	d10c      	bne.n	800b1ba <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	2200      	movs	r2, #0
 800b1a4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b1a8:	6878      	ldr	r0, [r7, #4]
 800b1aa:	f000 f910 	bl	800b3ce <USBD_CtlSendStatus>
      }
      break;
 800b1ae:	e004      	b.n	800b1ba <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b1b0:	6839      	ldr	r1, [r7, #0]
 800b1b2:	6878      	ldr	r0, [r7, #4]
 800b1b4:	f000 f840 	bl	800b238 <USBD_CtlError>
      break;
 800b1b8:	e000      	b.n	800b1bc <USBD_ClrFeature+0x3c>
      break;
 800b1ba:	bf00      	nop
  }
}
 800b1bc:	bf00      	nop
 800b1be:	3708      	adds	r7, #8
 800b1c0:	46bd      	mov	sp, r7
 800b1c2:	bd80      	pop	{r7, pc}

0800b1c4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b1c4:	b580      	push	{r7, lr}
 800b1c6:	b084      	sub	sp, #16
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	6078      	str	r0, [r7, #4]
 800b1cc:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b1ce:	683b      	ldr	r3, [r7, #0]
 800b1d0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	781a      	ldrb	r2, [r3, #0]
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	3301      	adds	r3, #1
 800b1de:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	781a      	ldrb	r2, [r3, #0]
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	3301      	adds	r3, #1
 800b1ec:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b1ee:	68f8      	ldr	r0, [r7, #12]
 800b1f0:	f7ff fa92 	bl	800a718 <SWAPBYTE>
 800b1f4:	4603      	mov	r3, r0
 800b1f6:	461a      	mov	r2, r3
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	3301      	adds	r3, #1
 800b200:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	3301      	adds	r3, #1
 800b206:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b208:	68f8      	ldr	r0, [r7, #12]
 800b20a:	f7ff fa85 	bl	800a718 <SWAPBYTE>
 800b20e:	4603      	mov	r3, r0
 800b210:	461a      	mov	r2, r3
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	3301      	adds	r3, #1
 800b21a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	3301      	adds	r3, #1
 800b220:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b222:	68f8      	ldr	r0, [r7, #12]
 800b224:	f7ff fa78 	bl	800a718 <SWAPBYTE>
 800b228:	4603      	mov	r3, r0
 800b22a:	461a      	mov	r2, r3
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	80da      	strh	r2, [r3, #6]
}
 800b230:	bf00      	nop
 800b232:	3710      	adds	r7, #16
 800b234:	46bd      	mov	sp, r7
 800b236:	bd80      	pop	{r7, pc}

0800b238 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b238:	b580      	push	{r7, lr}
 800b23a:	b082      	sub	sp, #8
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	6078      	str	r0, [r7, #4]
 800b240:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b242:	2180      	movs	r1, #128	@ 0x80
 800b244:	6878      	ldr	r0, [r7, #4]
 800b246:	f004 f94b 	bl	800f4e0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b24a:	2100      	movs	r1, #0
 800b24c:	6878      	ldr	r0, [r7, #4]
 800b24e:	f004 f947 	bl	800f4e0 <USBD_LL_StallEP>
}
 800b252:	bf00      	nop
 800b254:	3708      	adds	r7, #8
 800b256:	46bd      	mov	sp, r7
 800b258:	bd80      	pop	{r7, pc}

0800b25a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b25a:	b580      	push	{r7, lr}
 800b25c:	b086      	sub	sp, #24
 800b25e:	af00      	add	r7, sp, #0
 800b260:	60f8      	str	r0, [r7, #12]
 800b262:	60b9      	str	r1, [r7, #8]
 800b264:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b266:	2300      	movs	r3, #0
 800b268:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d036      	beq.n	800b2de <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b274:	6938      	ldr	r0, [r7, #16]
 800b276:	f000 f836 	bl	800b2e6 <USBD_GetLen>
 800b27a:	4603      	mov	r3, r0
 800b27c:	3301      	adds	r3, #1
 800b27e:	b29b      	uxth	r3, r3
 800b280:	005b      	lsls	r3, r3, #1
 800b282:	b29a      	uxth	r2, r3
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b288:	7dfb      	ldrb	r3, [r7, #23]
 800b28a:	68ba      	ldr	r2, [r7, #8]
 800b28c:	4413      	add	r3, r2
 800b28e:	687a      	ldr	r2, [r7, #4]
 800b290:	7812      	ldrb	r2, [r2, #0]
 800b292:	701a      	strb	r2, [r3, #0]
  idx++;
 800b294:	7dfb      	ldrb	r3, [r7, #23]
 800b296:	3301      	adds	r3, #1
 800b298:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b29a:	7dfb      	ldrb	r3, [r7, #23]
 800b29c:	68ba      	ldr	r2, [r7, #8]
 800b29e:	4413      	add	r3, r2
 800b2a0:	2203      	movs	r2, #3
 800b2a2:	701a      	strb	r2, [r3, #0]
  idx++;
 800b2a4:	7dfb      	ldrb	r3, [r7, #23]
 800b2a6:	3301      	adds	r3, #1
 800b2a8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b2aa:	e013      	b.n	800b2d4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b2ac:	7dfb      	ldrb	r3, [r7, #23]
 800b2ae:	68ba      	ldr	r2, [r7, #8]
 800b2b0:	4413      	add	r3, r2
 800b2b2:	693a      	ldr	r2, [r7, #16]
 800b2b4:	7812      	ldrb	r2, [r2, #0]
 800b2b6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b2b8:	693b      	ldr	r3, [r7, #16]
 800b2ba:	3301      	adds	r3, #1
 800b2bc:	613b      	str	r3, [r7, #16]
    idx++;
 800b2be:	7dfb      	ldrb	r3, [r7, #23]
 800b2c0:	3301      	adds	r3, #1
 800b2c2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b2c4:	7dfb      	ldrb	r3, [r7, #23]
 800b2c6:	68ba      	ldr	r2, [r7, #8]
 800b2c8:	4413      	add	r3, r2
 800b2ca:	2200      	movs	r2, #0
 800b2cc:	701a      	strb	r2, [r3, #0]
    idx++;
 800b2ce:	7dfb      	ldrb	r3, [r7, #23]
 800b2d0:	3301      	adds	r3, #1
 800b2d2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b2d4:	693b      	ldr	r3, [r7, #16]
 800b2d6:	781b      	ldrb	r3, [r3, #0]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d1e7      	bne.n	800b2ac <USBD_GetString+0x52>
 800b2dc:	e000      	b.n	800b2e0 <USBD_GetString+0x86>
    return;
 800b2de:	bf00      	nop
  }
}
 800b2e0:	3718      	adds	r7, #24
 800b2e2:	46bd      	mov	sp, r7
 800b2e4:	bd80      	pop	{r7, pc}

0800b2e6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b2e6:	b480      	push	{r7}
 800b2e8:	b085      	sub	sp, #20
 800b2ea:	af00      	add	r7, sp, #0
 800b2ec:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b2f6:	e005      	b.n	800b304 <USBD_GetLen+0x1e>
  {
    len++;
 800b2f8:	7bfb      	ldrb	r3, [r7, #15]
 800b2fa:	3301      	adds	r3, #1
 800b2fc:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b2fe:	68bb      	ldr	r3, [r7, #8]
 800b300:	3301      	adds	r3, #1
 800b302:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b304:	68bb      	ldr	r3, [r7, #8]
 800b306:	781b      	ldrb	r3, [r3, #0]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d1f5      	bne.n	800b2f8 <USBD_GetLen+0x12>
  }

  return len;
 800b30c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b30e:	4618      	mov	r0, r3
 800b310:	3714      	adds	r7, #20
 800b312:	46bd      	mov	sp, r7
 800b314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b318:	4770      	bx	lr

0800b31a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b31a:	b580      	push	{r7, lr}
 800b31c:	b084      	sub	sp, #16
 800b31e:	af00      	add	r7, sp, #0
 800b320:	60f8      	str	r0, [r7, #12]
 800b322:	60b9      	str	r1, [r7, #8]
 800b324:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	2202      	movs	r2, #2
 800b32a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	687a      	ldr	r2, [r7, #4]
 800b332:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	687a      	ldr	r2, [r7, #4]
 800b338:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	68ba      	ldr	r2, [r7, #8]
 800b33e:	2100      	movs	r1, #0
 800b340:	68f8      	ldr	r0, [r7, #12]
 800b342:	f004 f956 	bl	800f5f2 <USBD_LL_Transmit>

  return USBD_OK;
 800b346:	2300      	movs	r3, #0
}
 800b348:	4618      	mov	r0, r3
 800b34a:	3710      	adds	r7, #16
 800b34c:	46bd      	mov	sp, r7
 800b34e:	bd80      	pop	{r7, pc}

0800b350 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b350:	b580      	push	{r7, lr}
 800b352:	b084      	sub	sp, #16
 800b354:	af00      	add	r7, sp, #0
 800b356:	60f8      	str	r0, [r7, #12]
 800b358:	60b9      	str	r1, [r7, #8]
 800b35a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	68ba      	ldr	r2, [r7, #8]
 800b360:	2100      	movs	r1, #0
 800b362:	68f8      	ldr	r0, [r7, #12]
 800b364:	f004 f945 	bl	800f5f2 <USBD_LL_Transmit>

  return USBD_OK;
 800b368:	2300      	movs	r3, #0
}
 800b36a:	4618      	mov	r0, r3
 800b36c:	3710      	adds	r7, #16
 800b36e:	46bd      	mov	sp, r7
 800b370:	bd80      	pop	{r7, pc}

0800b372 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b372:	b580      	push	{r7, lr}
 800b374:	b084      	sub	sp, #16
 800b376:	af00      	add	r7, sp, #0
 800b378:	60f8      	str	r0, [r7, #12]
 800b37a:	60b9      	str	r1, [r7, #8]
 800b37c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	2203      	movs	r2, #3
 800b382:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	687a      	ldr	r2, [r7, #4]
 800b38a:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	687a      	ldr	r2, [r7, #4]
 800b392:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	68ba      	ldr	r2, [r7, #8]
 800b39a:	2100      	movs	r1, #0
 800b39c:	68f8      	ldr	r0, [r7, #12]
 800b39e:	f004 f949 	bl	800f634 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b3a2:	2300      	movs	r3, #0
}
 800b3a4:	4618      	mov	r0, r3
 800b3a6:	3710      	adds	r7, #16
 800b3a8:	46bd      	mov	sp, r7
 800b3aa:	bd80      	pop	{r7, pc}

0800b3ac <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b3ac:	b580      	push	{r7, lr}
 800b3ae:	b084      	sub	sp, #16
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	60f8      	str	r0, [r7, #12]
 800b3b4:	60b9      	str	r1, [r7, #8]
 800b3b6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	68ba      	ldr	r2, [r7, #8]
 800b3bc:	2100      	movs	r1, #0
 800b3be:	68f8      	ldr	r0, [r7, #12]
 800b3c0:	f004 f938 	bl	800f634 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b3c4:	2300      	movs	r3, #0
}
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	3710      	adds	r7, #16
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	bd80      	pop	{r7, pc}

0800b3ce <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b3ce:	b580      	push	{r7, lr}
 800b3d0:	b082      	sub	sp, #8
 800b3d2:	af00      	add	r7, sp, #0
 800b3d4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	2204      	movs	r2, #4
 800b3da:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b3de:	2300      	movs	r3, #0
 800b3e0:	2200      	movs	r2, #0
 800b3e2:	2100      	movs	r1, #0
 800b3e4:	6878      	ldr	r0, [r7, #4]
 800b3e6:	f004 f904 	bl	800f5f2 <USBD_LL_Transmit>

  return USBD_OK;
 800b3ea:	2300      	movs	r3, #0
}
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	3708      	adds	r7, #8
 800b3f0:	46bd      	mov	sp, r7
 800b3f2:	bd80      	pop	{r7, pc}

0800b3f4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b3f4:	b580      	push	{r7, lr}
 800b3f6:	b082      	sub	sp, #8
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	2205      	movs	r2, #5
 800b400:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b404:	2300      	movs	r3, #0
 800b406:	2200      	movs	r2, #0
 800b408:	2100      	movs	r1, #0
 800b40a:	6878      	ldr	r0, [r7, #4]
 800b40c:	f004 f912 	bl	800f634 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b410:	2300      	movs	r3, #0
}
 800b412:	4618      	mov	r0, r3
 800b414:	3708      	adds	r7, #8
 800b416:	46bd      	mov	sp, r7
 800b418:	bd80      	pop	{r7, pc}
	...

0800b41c <__NVIC_SetPriority>:
{
 800b41c:	b480      	push	{r7}
 800b41e:	b083      	sub	sp, #12
 800b420:	af00      	add	r7, sp, #0
 800b422:	4603      	mov	r3, r0
 800b424:	6039      	str	r1, [r7, #0]
 800b426:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b428:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	db0a      	blt.n	800b446 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b430:	683b      	ldr	r3, [r7, #0]
 800b432:	b2da      	uxtb	r2, r3
 800b434:	490c      	ldr	r1, [pc, #48]	@ (800b468 <__NVIC_SetPriority+0x4c>)
 800b436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b43a:	0112      	lsls	r2, r2, #4
 800b43c:	b2d2      	uxtb	r2, r2
 800b43e:	440b      	add	r3, r1
 800b440:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800b444:	e00a      	b.n	800b45c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b446:	683b      	ldr	r3, [r7, #0]
 800b448:	b2da      	uxtb	r2, r3
 800b44a:	4908      	ldr	r1, [pc, #32]	@ (800b46c <__NVIC_SetPriority+0x50>)
 800b44c:	79fb      	ldrb	r3, [r7, #7]
 800b44e:	f003 030f 	and.w	r3, r3, #15
 800b452:	3b04      	subs	r3, #4
 800b454:	0112      	lsls	r2, r2, #4
 800b456:	b2d2      	uxtb	r2, r2
 800b458:	440b      	add	r3, r1
 800b45a:	761a      	strb	r2, [r3, #24]
}
 800b45c:	bf00      	nop
 800b45e:	370c      	adds	r7, #12
 800b460:	46bd      	mov	sp, r7
 800b462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b466:	4770      	bx	lr
 800b468:	e000e100 	.word	0xe000e100
 800b46c:	e000ed00 	.word	0xe000ed00

0800b470 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800b470:	b580      	push	{r7, lr}
 800b472:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800b474:	4b05      	ldr	r3, [pc, #20]	@ (800b48c <SysTick_Handler+0x1c>)
 800b476:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800b478:	f002 fb06 	bl	800da88 <xTaskGetSchedulerState>
 800b47c:	4603      	mov	r3, r0
 800b47e:	2b01      	cmp	r3, #1
 800b480:	d001      	beq.n	800b486 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800b482:	f003 fa01 	bl	800e888 <xPortSysTickHandler>
  }
}
 800b486:	bf00      	nop
 800b488:	bd80      	pop	{r7, pc}
 800b48a:	bf00      	nop
 800b48c:	e000e010 	.word	0xe000e010

0800b490 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b490:	b580      	push	{r7, lr}
 800b492:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800b494:	2100      	movs	r1, #0
 800b496:	f06f 0004 	mvn.w	r0, #4
 800b49a:	f7ff ffbf 	bl	800b41c <__NVIC_SetPriority>
#endif
}
 800b49e:	bf00      	nop
 800b4a0:	bd80      	pop	{r7, pc}
	...

0800b4a4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b4a4:	b480      	push	{r7}
 800b4a6:	b083      	sub	sp, #12
 800b4a8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b4aa:	f3ef 8305 	mrs	r3, IPSR
 800b4ae:	603b      	str	r3, [r7, #0]
  return(result);
 800b4b0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d003      	beq.n	800b4be <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800b4b6:	f06f 0305 	mvn.w	r3, #5
 800b4ba:	607b      	str	r3, [r7, #4]
 800b4bc:	e00c      	b.n	800b4d8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b4be:	4b0a      	ldr	r3, [pc, #40]	@ (800b4e8 <osKernelInitialize+0x44>)
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d105      	bne.n	800b4d2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b4c6:	4b08      	ldr	r3, [pc, #32]	@ (800b4e8 <osKernelInitialize+0x44>)
 800b4c8:	2201      	movs	r2, #1
 800b4ca:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	607b      	str	r3, [r7, #4]
 800b4d0:	e002      	b.n	800b4d8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800b4d2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b4d6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b4d8:	687b      	ldr	r3, [r7, #4]
}
 800b4da:	4618      	mov	r0, r3
 800b4dc:	370c      	adds	r7, #12
 800b4de:	46bd      	mov	sp, r7
 800b4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e4:	4770      	bx	lr
 800b4e6:	bf00      	nop
 800b4e8:	20000644 	.word	0x20000644

0800b4ec <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b4ec:	b580      	push	{r7, lr}
 800b4ee:	b082      	sub	sp, #8
 800b4f0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b4f2:	f3ef 8305 	mrs	r3, IPSR
 800b4f6:	603b      	str	r3, [r7, #0]
  return(result);
 800b4f8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d003      	beq.n	800b506 <osKernelStart+0x1a>
    stat = osErrorISR;
 800b4fe:	f06f 0305 	mvn.w	r3, #5
 800b502:	607b      	str	r3, [r7, #4]
 800b504:	e010      	b.n	800b528 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b506:	4b0b      	ldr	r3, [pc, #44]	@ (800b534 <osKernelStart+0x48>)
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	2b01      	cmp	r3, #1
 800b50c:	d109      	bne.n	800b522 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b50e:	f7ff ffbf 	bl	800b490 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b512:	4b08      	ldr	r3, [pc, #32]	@ (800b534 <osKernelStart+0x48>)
 800b514:	2202      	movs	r2, #2
 800b516:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b518:	f001 fe30 	bl	800d17c <vTaskStartScheduler>
      stat = osOK;
 800b51c:	2300      	movs	r3, #0
 800b51e:	607b      	str	r3, [r7, #4]
 800b520:	e002      	b.n	800b528 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800b522:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b526:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b528:	687b      	ldr	r3, [r7, #4]
}
 800b52a:	4618      	mov	r0, r3
 800b52c:	3708      	adds	r7, #8
 800b52e:	46bd      	mov	sp, r7
 800b530:	bd80      	pop	{r7, pc}
 800b532:	bf00      	nop
 800b534:	20000644 	.word	0x20000644

0800b538 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800b538:	b580      	push	{r7, lr}
 800b53a:	b082      	sub	sp, #8
 800b53c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b53e:	f3ef 8305 	mrs	r3, IPSR
 800b542:	603b      	str	r3, [r7, #0]
  return(result);
 800b544:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800b546:	2b00      	cmp	r3, #0
 800b548:	d003      	beq.n	800b552 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800b54a:	f001 ff43 	bl	800d3d4 <xTaskGetTickCountFromISR>
 800b54e:	6078      	str	r0, [r7, #4]
 800b550:	e002      	b.n	800b558 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800b552:	f001 ff2f 	bl	800d3b4 <xTaskGetTickCount>
 800b556:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800b558:	687b      	ldr	r3, [r7, #4]
}
 800b55a:	4618      	mov	r0, r3
 800b55c:	3708      	adds	r7, #8
 800b55e:	46bd      	mov	sp, r7
 800b560:	bd80      	pop	{r7, pc}

0800b562 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b562:	b580      	push	{r7, lr}
 800b564:	b08e      	sub	sp, #56	@ 0x38
 800b566:	af04      	add	r7, sp, #16
 800b568:	60f8      	str	r0, [r7, #12]
 800b56a:	60b9      	str	r1, [r7, #8]
 800b56c:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b56e:	2300      	movs	r3, #0
 800b570:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b572:	f3ef 8305 	mrs	r3, IPSR
 800b576:	617b      	str	r3, [r7, #20]
  return(result);
 800b578:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d17e      	bne.n	800b67c <osThreadNew+0x11a>
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	2b00      	cmp	r3, #0
 800b582:	d07b      	beq.n	800b67c <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800b584:	2380      	movs	r3, #128	@ 0x80
 800b586:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800b588:	2318      	movs	r3, #24
 800b58a:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800b58c:	2300      	movs	r3, #0
 800b58e:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800b590:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b594:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d045      	beq.n	800b628 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d002      	beq.n	800b5aa <osThreadNew+0x48>
        name = attr->name;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	699b      	ldr	r3, [r3, #24]
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d002      	beq.n	800b5b8 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	699b      	ldr	r3, [r3, #24]
 800b5b6:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b5b8:	69fb      	ldr	r3, [r7, #28]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d008      	beq.n	800b5d0 <osThreadNew+0x6e>
 800b5be:	69fb      	ldr	r3, [r7, #28]
 800b5c0:	2b38      	cmp	r3, #56	@ 0x38
 800b5c2:	d805      	bhi.n	800b5d0 <osThreadNew+0x6e>
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	685b      	ldr	r3, [r3, #4]
 800b5c8:	f003 0301 	and.w	r3, r3, #1
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d001      	beq.n	800b5d4 <osThreadNew+0x72>
        return (NULL);
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	e054      	b.n	800b67e <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	695b      	ldr	r3, [r3, #20]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d003      	beq.n	800b5e4 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	695b      	ldr	r3, [r3, #20]
 800b5e0:	089b      	lsrs	r3, r3, #2
 800b5e2:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	689b      	ldr	r3, [r3, #8]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d00e      	beq.n	800b60a <osThreadNew+0xa8>
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	68db      	ldr	r3, [r3, #12]
 800b5f0:	2ba7      	cmp	r3, #167	@ 0xa7
 800b5f2:	d90a      	bls.n	800b60a <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d006      	beq.n	800b60a <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	695b      	ldr	r3, [r3, #20]
 800b600:	2b00      	cmp	r3, #0
 800b602:	d002      	beq.n	800b60a <osThreadNew+0xa8>
        mem = 1;
 800b604:	2301      	movs	r3, #1
 800b606:	61bb      	str	r3, [r7, #24]
 800b608:	e010      	b.n	800b62c <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	689b      	ldr	r3, [r3, #8]
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d10c      	bne.n	800b62c <osThreadNew+0xca>
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	68db      	ldr	r3, [r3, #12]
 800b616:	2b00      	cmp	r3, #0
 800b618:	d108      	bne.n	800b62c <osThreadNew+0xca>
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	691b      	ldr	r3, [r3, #16]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d104      	bne.n	800b62c <osThreadNew+0xca>
          mem = 0;
 800b622:	2300      	movs	r3, #0
 800b624:	61bb      	str	r3, [r7, #24]
 800b626:	e001      	b.n	800b62c <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800b628:	2300      	movs	r3, #0
 800b62a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b62c:	69bb      	ldr	r3, [r7, #24]
 800b62e:	2b01      	cmp	r3, #1
 800b630:	d110      	bne.n	800b654 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800b636:	687a      	ldr	r2, [r7, #4]
 800b638:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b63a:	9202      	str	r2, [sp, #8]
 800b63c:	9301      	str	r3, [sp, #4]
 800b63e:	69fb      	ldr	r3, [r7, #28]
 800b640:	9300      	str	r3, [sp, #0]
 800b642:	68bb      	ldr	r3, [r7, #8]
 800b644:	6a3a      	ldr	r2, [r7, #32]
 800b646:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b648:	68f8      	ldr	r0, [r7, #12]
 800b64a:	f001 fb23 	bl	800cc94 <xTaskCreateStatic>
 800b64e:	4603      	mov	r3, r0
 800b650:	613b      	str	r3, [r7, #16]
 800b652:	e013      	b.n	800b67c <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800b654:	69bb      	ldr	r3, [r7, #24]
 800b656:	2b00      	cmp	r3, #0
 800b658:	d110      	bne.n	800b67c <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b65a:	6a3b      	ldr	r3, [r7, #32]
 800b65c:	b29a      	uxth	r2, r3
 800b65e:	f107 0310 	add.w	r3, r7, #16
 800b662:	9301      	str	r3, [sp, #4]
 800b664:	69fb      	ldr	r3, [r7, #28]
 800b666:	9300      	str	r3, [sp, #0]
 800b668:	68bb      	ldr	r3, [r7, #8]
 800b66a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b66c:	68f8      	ldr	r0, [r7, #12]
 800b66e:	f001 fb71 	bl	800cd54 <xTaskCreate>
 800b672:	4603      	mov	r3, r0
 800b674:	2b01      	cmp	r3, #1
 800b676:	d001      	beq.n	800b67c <osThreadNew+0x11a>
            hTask = NULL;
 800b678:	2300      	movs	r3, #0
 800b67a:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b67c:	693b      	ldr	r3, [r7, #16]
}
 800b67e:	4618      	mov	r0, r3
 800b680:	3728      	adds	r7, #40	@ 0x28
 800b682:	46bd      	mov	sp, r7
 800b684:	bd80      	pop	{r7, pc}

0800b686 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800b686:	b580      	push	{r7, lr}
 800b688:	b084      	sub	sp, #16
 800b68a:	af00      	add	r7, sp, #0
 800b68c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b68e:	f3ef 8305 	mrs	r3, IPSR
 800b692:	60bb      	str	r3, [r7, #8]
  return(result);
 800b694:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b696:	2b00      	cmp	r3, #0
 800b698:	d003      	beq.n	800b6a2 <osDelay+0x1c>
    stat = osErrorISR;
 800b69a:	f06f 0305 	mvn.w	r3, #5
 800b69e:	60fb      	str	r3, [r7, #12]
 800b6a0:	e007      	b.n	800b6b2 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800b6a2:	2300      	movs	r3, #0
 800b6a4:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d002      	beq.n	800b6b2 <osDelay+0x2c>
      vTaskDelay(ticks);
 800b6ac:	6878      	ldr	r0, [r7, #4]
 800b6ae:	f001 fd2f 	bl	800d110 <vTaskDelay>
    }
  }

  return (stat);
 800b6b2:	68fb      	ldr	r3, [r7, #12]
}
 800b6b4:	4618      	mov	r0, r3
 800b6b6:	3710      	adds	r7, #16
 800b6b8:	46bd      	mov	sp, r7
 800b6ba:	bd80      	pop	{r7, pc}

0800b6bc <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 800b6bc:	b580      	push	{r7, lr}
 800b6be:	b086      	sub	sp, #24
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b6c4:	f3ef 8305 	mrs	r3, IPSR
 800b6c8:	60fb      	str	r3, [r7, #12]
  return(result);
 800b6ca:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d003      	beq.n	800b6d8 <osDelayUntil+0x1c>
    stat = osErrorISR;
 800b6d0:	f06f 0305 	mvn.w	r3, #5
 800b6d4:	617b      	str	r3, [r7, #20]
 800b6d6:	e019      	b.n	800b70c <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 800b6d8:	2300      	movs	r3, #0
 800b6da:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 800b6dc:	f001 fe6a 	bl	800d3b4 <xTaskGetTickCount>
 800b6e0:	4603      	mov	r3, r0
 800b6e2:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 800b6e4:	68bb      	ldr	r3, [r7, #8]
 800b6e6:	687a      	ldr	r2, [r7, #4]
 800b6e8:	1ad3      	subs	r3, r2, r3
 800b6ea:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 800b6ec:	693b      	ldr	r3, [r7, #16]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d009      	beq.n	800b706 <osDelayUntil+0x4a>
 800b6f2:	693b      	ldr	r3, [r7, #16]
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	db06      	blt.n	800b706 <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 800b6f8:	f107 0308 	add.w	r3, r7, #8
 800b6fc:	6939      	ldr	r1, [r7, #16]
 800b6fe:	4618      	mov	r0, r3
 800b700:	f001 fc86 	bl	800d010 <vTaskDelayUntil>
 800b704:	e002      	b.n	800b70c <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 800b706:	f06f 0303 	mvn.w	r3, #3
 800b70a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800b70c:	697b      	ldr	r3, [r7, #20]
}
 800b70e:	4618      	mov	r0, r3
 800b710:	3718      	adds	r7, #24
 800b712:	46bd      	mov	sp, r7
 800b714:	bd80      	pop	{r7, pc}

0800b716 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800b716:	b580      	push	{r7, lr}
 800b718:	b088      	sub	sp, #32
 800b71a:	af00      	add	r7, sp, #0
 800b71c:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800b71e:	2300      	movs	r3, #0
 800b720:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b722:	f3ef 8305 	mrs	r3, IPSR
 800b726:	60bb      	str	r3, [r7, #8]
  return(result);
 800b728:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d174      	bne.n	800b818 <osMutexNew+0x102>
    if (attr != NULL) {
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	2b00      	cmp	r3, #0
 800b732:	d003      	beq.n	800b73c <osMutexNew+0x26>
      type = attr->attr_bits;
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	685b      	ldr	r3, [r3, #4]
 800b738:	61bb      	str	r3, [r7, #24]
 800b73a:	e001      	b.n	800b740 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800b73c:	2300      	movs	r3, #0
 800b73e:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800b740:	69bb      	ldr	r3, [r7, #24]
 800b742:	f003 0301 	and.w	r3, r3, #1
 800b746:	2b00      	cmp	r3, #0
 800b748:	d002      	beq.n	800b750 <osMutexNew+0x3a>
      rmtx = 1U;
 800b74a:	2301      	movs	r3, #1
 800b74c:	617b      	str	r3, [r7, #20]
 800b74e:	e001      	b.n	800b754 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800b750:	2300      	movs	r3, #0
 800b752:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800b754:	69bb      	ldr	r3, [r7, #24]
 800b756:	f003 0308 	and.w	r3, r3, #8
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d15c      	bne.n	800b818 <osMutexNew+0x102>
      mem = -1;
 800b75e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b762:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	2b00      	cmp	r3, #0
 800b768:	d015      	beq.n	800b796 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	689b      	ldr	r3, [r3, #8]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d006      	beq.n	800b780 <osMutexNew+0x6a>
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	68db      	ldr	r3, [r3, #12]
 800b776:	2b4f      	cmp	r3, #79	@ 0x4f
 800b778:	d902      	bls.n	800b780 <osMutexNew+0x6a>
          mem = 1;
 800b77a:	2301      	movs	r3, #1
 800b77c:	613b      	str	r3, [r7, #16]
 800b77e:	e00c      	b.n	800b79a <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	689b      	ldr	r3, [r3, #8]
 800b784:	2b00      	cmp	r3, #0
 800b786:	d108      	bne.n	800b79a <osMutexNew+0x84>
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	68db      	ldr	r3, [r3, #12]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d104      	bne.n	800b79a <osMutexNew+0x84>
            mem = 0;
 800b790:	2300      	movs	r3, #0
 800b792:	613b      	str	r3, [r7, #16]
 800b794:	e001      	b.n	800b79a <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800b796:	2300      	movs	r3, #0
 800b798:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800b79a:	693b      	ldr	r3, [r7, #16]
 800b79c:	2b01      	cmp	r3, #1
 800b79e:	d112      	bne.n	800b7c6 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800b7a0:	697b      	ldr	r3, [r7, #20]
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d007      	beq.n	800b7b6 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	689b      	ldr	r3, [r3, #8]
 800b7aa:	4619      	mov	r1, r3
 800b7ac:	2004      	movs	r0, #4
 800b7ae:	f000 fc50 	bl	800c052 <xQueueCreateMutexStatic>
 800b7b2:	61f8      	str	r0, [r7, #28]
 800b7b4:	e016      	b.n	800b7e4 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	689b      	ldr	r3, [r3, #8]
 800b7ba:	4619      	mov	r1, r3
 800b7bc:	2001      	movs	r0, #1
 800b7be:	f000 fc48 	bl	800c052 <xQueueCreateMutexStatic>
 800b7c2:	61f8      	str	r0, [r7, #28]
 800b7c4:	e00e      	b.n	800b7e4 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800b7c6:	693b      	ldr	r3, [r7, #16]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d10b      	bne.n	800b7e4 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800b7cc:	697b      	ldr	r3, [r7, #20]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d004      	beq.n	800b7dc <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800b7d2:	2004      	movs	r0, #4
 800b7d4:	f000 fc25 	bl	800c022 <xQueueCreateMutex>
 800b7d8:	61f8      	str	r0, [r7, #28]
 800b7da:	e003      	b.n	800b7e4 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800b7dc:	2001      	movs	r0, #1
 800b7de:	f000 fc20 	bl	800c022 <xQueueCreateMutex>
 800b7e2:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800b7e4:	69fb      	ldr	r3, [r7, #28]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d00c      	beq.n	800b804 <osMutexNew+0xee>
        if (attr != NULL) {
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d003      	beq.n	800b7f8 <osMutexNew+0xe2>
          name = attr->name;
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	60fb      	str	r3, [r7, #12]
 800b7f6:	e001      	b.n	800b7fc <osMutexNew+0xe6>
        } else {
          name = NULL;
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800b7fc:	68f9      	ldr	r1, [r7, #12]
 800b7fe:	69f8      	ldr	r0, [r7, #28]
 800b800:	f001 f9ea 	bl	800cbd8 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800b804:	69fb      	ldr	r3, [r7, #28]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d006      	beq.n	800b818 <osMutexNew+0x102>
 800b80a:	697b      	ldr	r3, [r7, #20]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d003      	beq.n	800b818 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800b810:	69fb      	ldr	r3, [r7, #28]
 800b812:	f043 0301 	orr.w	r3, r3, #1
 800b816:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800b818:	69fb      	ldr	r3, [r7, #28]
}
 800b81a:	4618      	mov	r0, r3
 800b81c:	3720      	adds	r7, #32
 800b81e:	46bd      	mov	sp, r7
 800b820:	bd80      	pop	{r7, pc}

0800b822 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800b822:	b580      	push	{r7, lr}
 800b824:	b086      	sub	sp, #24
 800b826:	af00      	add	r7, sp, #0
 800b828:	6078      	str	r0, [r7, #4]
 800b82a:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	f023 0301 	bic.w	r3, r3, #1
 800b832:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	f003 0301 	and.w	r3, r3, #1
 800b83a:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800b83c:	2300      	movs	r3, #0
 800b83e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b840:	f3ef 8305 	mrs	r3, IPSR
 800b844:	60bb      	str	r3, [r7, #8]
  return(result);
 800b846:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d003      	beq.n	800b854 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800b84c:	f06f 0305 	mvn.w	r3, #5
 800b850:	617b      	str	r3, [r7, #20]
 800b852:	e02c      	b.n	800b8ae <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800b854:	693b      	ldr	r3, [r7, #16]
 800b856:	2b00      	cmp	r3, #0
 800b858:	d103      	bne.n	800b862 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800b85a:	f06f 0303 	mvn.w	r3, #3
 800b85e:	617b      	str	r3, [r7, #20]
 800b860:	e025      	b.n	800b8ae <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	2b00      	cmp	r3, #0
 800b866:	d011      	beq.n	800b88c <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800b868:	6839      	ldr	r1, [r7, #0]
 800b86a:	6938      	ldr	r0, [r7, #16]
 800b86c:	f000 fc41 	bl	800c0f2 <xQueueTakeMutexRecursive>
 800b870:	4603      	mov	r3, r0
 800b872:	2b01      	cmp	r3, #1
 800b874:	d01b      	beq.n	800b8ae <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800b876:	683b      	ldr	r3, [r7, #0]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d003      	beq.n	800b884 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800b87c:	f06f 0301 	mvn.w	r3, #1
 800b880:	617b      	str	r3, [r7, #20]
 800b882:	e014      	b.n	800b8ae <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800b884:	f06f 0302 	mvn.w	r3, #2
 800b888:	617b      	str	r3, [r7, #20]
 800b88a:	e010      	b.n	800b8ae <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800b88c:	6839      	ldr	r1, [r7, #0]
 800b88e:	6938      	ldr	r0, [r7, #16]
 800b890:	f000 fee8 	bl	800c664 <xQueueSemaphoreTake>
 800b894:	4603      	mov	r3, r0
 800b896:	2b01      	cmp	r3, #1
 800b898:	d009      	beq.n	800b8ae <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800b89a:	683b      	ldr	r3, [r7, #0]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d003      	beq.n	800b8a8 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800b8a0:	f06f 0301 	mvn.w	r3, #1
 800b8a4:	617b      	str	r3, [r7, #20]
 800b8a6:	e002      	b.n	800b8ae <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800b8a8:	f06f 0302 	mvn.w	r3, #2
 800b8ac:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800b8ae:	697b      	ldr	r3, [r7, #20]
}
 800b8b0:	4618      	mov	r0, r3
 800b8b2:	3718      	adds	r7, #24
 800b8b4:	46bd      	mov	sp, r7
 800b8b6:	bd80      	pop	{r7, pc}

0800b8b8 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800b8b8:	b580      	push	{r7, lr}
 800b8ba:	b086      	sub	sp, #24
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	f023 0301 	bic.w	r3, r3, #1
 800b8c6:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	f003 0301 	and.w	r3, r3, #1
 800b8ce:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800b8d0:	2300      	movs	r3, #0
 800b8d2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b8d4:	f3ef 8305 	mrs	r3, IPSR
 800b8d8:	60bb      	str	r3, [r7, #8]
  return(result);
 800b8da:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d003      	beq.n	800b8e8 <osMutexRelease+0x30>
    stat = osErrorISR;
 800b8e0:	f06f 0305 	mvn.w	r3, #5
 800b8e4:	617b      	str	r3, [r7, #20]
 800b8e6:	e01f      	b.n	800b928 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800b8e8:	693b      	ldr	r3, [r7, #16]
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d103      	bne.n	800b8f6 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800b8ee:	f06f 0303 	mvn.w	r3, #3
 800b8f2:	617b      	str	r3, [r7, #20]
 800b8f4:	e018      	b.n	800b928 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d009      	beq.n	800b910 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800b8fc:	6938      	ldr	r0, [r7, #16]
 800b8fe:	f000 fbc3 	bl	800c088 <xQueueGiveMutexRecursive>
 800b902:	4603      	mov	r3, r0
 800b904:	2b01      	cmp	r3, #1
 800b906:	d00f      	beq.n	800b928 <osMutexRelease+0x70>
        stat = osErrorResource;
 800b908:	f06f 0302 	mvn.w	r3, #2
 800b90c:	617b      	str	r3, [r7, #20]
 800b90e:	e00b      	b.n	800b928 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800b910:	2300      	movs	r3, #0
 800b912:	2200      	movs	r2, #0
 800b914:	2100      	movs	r1, #0
 800b916:	6938      	ldr	r0, [r7, #16]
 800b918:	f000 fc22 	bl	800c160 <xQueueGenericSend>
 800b91c:	4603      	mov	r3, r0
 800b91e:	2b01      	cmp	r3, #1
 800b920:	d002      	beq.n	800b928 <osMutexRelease+0x70>
        stat = osErrorResource;
 800b922:	f06f 0302 	mvn.w	r3, #2
 800b926:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800b928:	697b      	ldr	r3, [r7, #20]
}
 800b92a:	4618      	mov	r0, r3
 800b92c:	3718      	adds	r7, #24
 800b92e:	46bd      	mov	sp, r7
 800b930:	bd80      	pop	{r7, pc}

0800b932 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800b932:	b580      	push	{r7, lr}
 800b934:	b08a      	sub	sp, #40	@ 0x28
 800b936:	af02      	add	r7, sp, #8
 800b938:	60f8      	str	r0, [r7, #12]
 800b93a:	60b9      	str	r1, [r7, #8]
 800b93c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800b93e:	2300      	movs	r3, #0
 800b940:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b942:	f3ef 8305 	mrs	r3, IPSR
 800b946:	613b      	str	r3, [r7, #16]
  return(result);
 800b948:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d15f      	bne.n	800ba0e <osMessageQueueNew+0xdc>
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	2b00      	cmp	r3, #0
 800b952:	d05c      	beq.n	800ba0e <osMessageQueueNew+0xdc>
 800b954:	68bb      	ldr	r3, [r7, #8]
 800b956:	2b00      	cmp	r3, #0
 800b958:	d059      	beq.n	800ba0e <osMessageQueueNew+0xdc>
    mem = -1;
 800b95a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b95e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	2b00      	cmp	r3, #0
 800b964:	d029      	beq.n	800b9ba <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	689b      	ldr	r3, [r3, #8]
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d012      	beq.n	800b994 <osMessageQueueNew+0x62>
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	68db      	ldr	r3, [r3, #12]
 800b972:	2b4f      	cmp	r3, #79	@ 0x4f
 800b974:	d90e      	bls.n	800b994 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d00a      	beq.n	800b994 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	695a      	ldr	r2, [r3, #20]
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	68b9      	ldr	r1, [r7, #8]
 800b986:	fb01 f303 	mul.w	r3, r1, r3
 800b98a:	429a      	cmp	r2, r3
 800b98c:	d302      	bcc.n	800b994 <osMessageQueueNew+0x62>
        mem = 1;
 800b98e:	2301      	movs	r3, #1
 800b990:	61bb      	str	r3, [r7, #24]
 800b992:	e014      	b.n	800b9be <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	689b      	ldr	r3, [r3, #8]
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d110      	bne.n	800b9be <osMessageQueueNew+0x8c>
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	68db      	ldr	r3, [r3, #12]
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d10c      	bne.n	800b9be <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d108      	bne.n	800b9be <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	695b      	ldr	r3, [r3, #20]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d104      	bne.n	800b9be <osMessageQueueNew+0x8c>
          mem = 0;
 800b9b4:	2300      	movs	r3, #0
 800b9b6:	61bb      	str	r3, [r7, #24]
 800b9b8:	e001      	b.n	800b9be <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800b9ba:	2300      	movs	r3, #0
 800b9bc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b9be:	69bb      	ldr	r3, [r7, #24]
 800b9c0:	2b01      	cmp	r3, #1
 800b9c2:	d10b      	bne.n	800b9dc <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	691a      	ldr	r2, [r3, #16]
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	689b      	ldr	r3, [r3, #8]
 800b9cc:	2100      	movs	r1, #0
 800b9ce:	9100      	str	r1, [sp, #0]
 800b9d0:	68b9      	ldr	r1, [r7, #8]
 800b9d2:	68f8      	ldr	r0, [r7, #12]
 800b9d4:	f000 fa30 	bl	800be38 <xQueueGenericCreateStatic>
 800b9d8:	61f8      	str	r0, [r7, #28]
 800b9da:	e008      	b.n	800b9ee <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800b9dc:	69bb      	ldr	r3, [r7, #24]
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d105      	bne.n	800b9ee <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800b9e2:	2200      	movs	r2, #0
 800b9e4:	68b9      	ldr	r1, [r7, #8]
 800b9e6:	68f8      	ldr	r0, [r7, #12]
 800b9e8:	f000 faa3 	bl	800bf32 <xQueueGenericCreate>
 800b9ec:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800b9ee:	69fb      	ldr	r3, [r7, #28]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d00c      	beq.n	800ba0e <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d003      	beq.n	800ba02 <osMessageQueueNew+0xd0>
        name = attr->name;
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	617b      	str	r3, [r7, #20]
 800ba00:	e001      	b.n	800ba06 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800ba02:	2300      	movs	r3, #0
 800ba04:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800ba06:	6979      	ldr	r1, [r7, #20]
 800ba08:	69f8      	ldr	r0, [r7, #28]
 800ba0a:	f001 f8e5 	bl	800cbd8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800ba0e:	69fb      	ldr	r3, [r7, #28]
}
 800ba10:	4618      	mov	r0, r3
 800ba12:	3720      	adds	r7, #32
 800ba14:	46bd      	mov	sp, r7
 800ba16:	bd80      	pop	{r7, pc}

0800ba18 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800ba18:	b580      	push	{r7, lr}
 800ba1a:	b088      	sub	sp, #32
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	60f8      	str	r0, [r7, #12]
 800ba20:	60b9      	str	r1, [r7, #8]
 800ba22:	603b      	str	r3, [r7, #0]
 800ba24:	4613      	mov	r3, r2
 800ba26:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800ba2c:	2300      	movs	r3, #0
 800ba2e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ba30:	f3ef 8305 	mrs	r3, IPSR
 800ba34:	617b      	str	r3, [r7, #20]
  return(result);
 800ba36:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d028      	beq.n	800ba8e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ba3c:	69bb      	ldr	r3, [r7, #24]
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d005      	beq.n	800ba4e <osMessageQueuePut+0x36>
 800ba42:	68bb      	ldr	r3, [r7, #8]
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d002      	beq.n	800ba4e <osMessageQueuePut+0x36>
 800ba48:	683b      	ldr	r3, [r7, #0]
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d003      	beq.n	800ba56 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800ba4e:	f06f 0303 	mvn.w	r3, #3
 800ba52:	61fb      	str	r3, [r7, #28]
 800ba54:	e038      	b.n	800bac8 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800ba56:	2300      	movs	r3, #0
 800ba58:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800ba5a:	f107 0210 	add.w	r2, r7, #16
 800ba5e:	2300      	movs	r3, #0
 800ba60:	68b9      	ldr	r1, [r7, #8]
 800ba62:	69b8      	ldr	r0, [r7, #24]
 800ba64:	f000 fc7e 	bl	800c364 <xQueueGenericSendFromISR>
 800ba68:	4603      	mov	r3, r0
 800ba6a:	2b01      	cmp	r3, #1
 800ba6c:	d003      	beq.n	800ba76 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800ba6e:	f06f 0302 	mvn.w	r3, #2
 800ba72:	61fb      	str	r3, [r7, #28]
 800ba74:	e028      	b.n	800bac8 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800ba76:	693b      	ldr	r3, [r7, #16]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d025      	beq.n	800bac8 <osMessageQueuePut+0xb0>
 800ba7c:	4b15      	ldr	r3, [pc, #84]	@ (800bad4 <osMessageQueuePut+0xbc>)
 800ba7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ba82:	601a      	str	r2, [r3, #0]
 800ba84:	f3bf 8f4f 	dsb	sy
 800ba88:	f3bf 8f6f 	isb	sy
 800ba8c:	e01c      	b.n	800bac8 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800ba8e:	69bb      	ldr	r3, [r7, #24]
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d002      	beq.n	800ba9a <osMessageQueuePut+0x82>
 800ba94:	68bb      	ldr	r3, [r7, #8]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d103      	bne.n	800baa2 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800ba9a:	f06f 0303 	mvn.w	r3, #3
 800ba9e:	61fb      	str	r3, [r7, #28]
 800baa0:	e012      	b.n	800bac8 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800baa2:	2300      	movs	r3, #0
 800baa4:	683a      	ldr	r2, [r7, #0]
 800baa6:	68b9      	ldr	r1, [r7, #8]
 800baa8:	69b8      	ldr	r0, [r7, #24]
 800baaa:	f000 fb59 	bl	800c160 <xQueueGenericSend>
 800baae:	4603      	mov	r3, r0
 800bab0:	2b01      	cmp	r3, #1
 800bab2:	d009      	beq.n	800bac8 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800bab4:	683b      	ldr	r3, [r7, #0]
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d003      	beq.n	800bac2 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800baba:	f06f 0301 	mvn.w	r3, #1
 800babe:	61fb      	str	r3, [r7, #28]
 800bac0:	e002      	b.n	800bac8 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800bac2:	f06f 0302 	mvn.w	r3, #2
 800bac6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800bac8:	69fb      	ldr	r3, [r7, #28]
}
 800baca:	4618      	mov	r0, r3
 800bacc:	3720      	adds	r7, #32
 800bace:	46bd      	mov	sp, r7
 800bad0:	bd80      	pop	{r7, pc}
 800bad2:	bf00      	nop
 800bad4:	e000ed04 	.word	0xe000ed04

0800bad8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800bad8:	b580      	push	{r7, lr}
 800bada:	b088      	sub	sp, #32
 800badc:	af00      	add	r7, sp, #0
 800bade:	60f8      	str	r0, [r7, #12]
 800bae0:	60b9      	str	r1, [r7, #8]
 800bae2:	607a      	str	r2, [r7, #4]
 800bae4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800baea:	2300      	movs	r3, #0
 800baec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800baee:	f3ef 8305 	mrs	r3, IPSR
 800baf2:	617b      	str	r3, [r7, #20]
  return(result);
 800baf4:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d028      	beq.n	800bb4c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800bafa:	69bb      	ldr	r3, [r7, #24]
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d005      	beq.n	800bb0c <osMessageQueueGet+0x34>
 800bb00:	68bb      	ldr	r3, [r7, #8]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d002      	beq.n	800bb0c <osMessageQueueGet+0x34>
 800bb06:	683b      	ldr	r3, [r7, #0]
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d003      	beq.n	800bb14 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800bb0c:	f06f 0303 	mvn.w	r3, #3
 800bb10:	61fb      	str	r3, [r7, #28]
 800bb12:	e037      	b.n	800bb84 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800bb14:	2300      	movs	r3, #0
 800bb16:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800bb18:	f107 0310 	add.w	r3, r7, #16
 800bb1c:	461a      	mov	r2, r3
 800bb1e:	68b9      	ldr	r1, [r7, #8]
 800bb20:	69b8      	ldr	r0, [r7, #24]
 800bb22:	f000 feaf 	bl	800c884 <xQueueReceiveFromISR>
 800bb26:	4603      	mov	r3, r0
 800bb28:	2b01      	cmp	r3, #1
 800bb2a:	d003      	beq.n	800bb34 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800bb2c:	f06f 0302 	mvn.w	r3, #2
 800bb30:	61fb      	str	r3, [r7, #28]
 800bb32:	e027      	b.n	800bb84 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800bb34:	693b      	ldr	r3, [r7, #16]
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d024      	beq.n	800bb84 <osMessageQueueGet+0xac>
 800bb3a:	4b15      	ldr	r3, [pc, #84]	@ (800bb90 <osMessageQueueGet+0xb8>)
 800bb3c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bb40:	601a      	str	r2, [r3, #0]
 800bb42:	f3bf 8f4f 	dsb	sy
 800bb46:	f3bf 8f6f 	isb	sy
 800bb4a:	e01b      	b.n	800bb84 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800bb4c:	69bb      	ldr	r3, [r7, #24]
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d002      	beq.n	800bb58 <osMessageQueueGet+0x80>
 800bb52:	68bb      	ldr	r3, [r7, #8]
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d103      	bne.n	800bb60 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800bb58:	f06f 0303 	mvn.w	r3, #3
 800bb5c:	61fb      	str	r3, [r7, #28]
 800bb5e:	e011      	b.n	800bb84 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800bb60:	683a      	ldr	r2, [r7, #0]
 800bb62:	68b9      	ldr	r1, [r7, #8]
 800bb64:	69b8      	ldr	r0, [r7, #24]
 800bb66:	f000 fc9b 	bl	800c4a0 <xQueueReceive>
 800bb6a:	4603      	mov	r3, r0
 800bb6c:	2b01      	cmp	r3, #1
 800bb6e:	d009      	beq.n	800bb84 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800bb70:	683b      	ldr	r3, [r7, #0]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d003      	beq.n	800bb7e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800bb76:	f06f 0301 	mvn.w	r3, #1
 800bb7a:	61fb      	str	r3, [r7, #28]
 800bb7c:	e002      	b.n	800bb84 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800bb7e:	f06f 0302 	mvn.w	r3, #2
 800bb82:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800bb84:	69fb      	ldr	r3, [r7, #28]
}
 800bb86:	4618      	mov	r0, r3
 800bb88:	3720      	adds	r7, #32
 800bb8a:	46bd      	mov	sp, r7
 800bb8c:	bd80      	pop	{r7, pc}
 800bb8e:	bf00      	nop
 800bb90:	e000ed04 	.word	0xe000ed04

0800bb94 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800bb94:	b480      	push	{r7}
 800bb96:	b085      	sub	sp, #20
 800bb98:	af00      	add	r7, sp, #0
 800bb9a:	60f8      	str	r0, [r7, #12]
 800bb9c:	60b9      	str	r1, [r7, #8]
 800bb9e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	4a07      	ldr	r2, [pc, #28]	@ (800bbc0 <vApplicationGetIdleTaskMemory+0x2c>)
 800bba4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800bba6:	68bb      	ldr	r3, [r7, #8]
 800bba8:	4a06      	ldr	r2, [pc, #24]	@ (800bbc4 <vApplicationGetIdleTaskMemory+0x30>)
 800bbaa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	2280      	movs	r2, #128	@ 0x80
 800bbb0:	601a      	str	r2, [r3, #0]
}
 800bbb2:	bf00      	nop
 800bbb4:	3714      	adds	r7, #20
 800bbb6:	46bd      	mov	sp, r7
 800bbb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbbc:	4770      	bx	lr
 800bbbe:	bf00      	nop
 800bbc0:	20000648 	.word	0x20000648
 800bbc4:	200006f0 	.word	0x200006f0

0800bbc8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800bbc8:	b480      	push	{r7}
 800bbca:	b085      	sub	sp, #20
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	60f8      	str	r0, [r7, #12]
 800bbd0:	60b9      	str	r1, [r7, #8]
 800bbd2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	4a07      	ldr	r2, [pc, #28]	@ (800bbf4 <vApplicationGetTimerTaskMemory+0x2c>)
 800bbd8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800bbda:	68bb      	ldr	r3, [r7, #8]
 800bbdc:	4a06      	ldr	r2, [pc, #24]	@ (800bbf8 <vApplicationGetTimerTaskMemory+0x30>)
 800bbde:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800bbe6:	601a      	str	r2, [r3, #0]
}
 800bbe8:	bf00      	nop
 800bbea:	3714      	adds	r7, #20
 800bbec:	46bd      	mov	sp, r7
 800bbee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf2:	4770      	bx	lr
 800bbf4:	200008f0 	.word	0x200008f0
 800bbf8:	20000998 	.word	0x20000998

0800bbfc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800bbfc:	b480      	push	{r7}
 800bbfe:	b083      	sub	sp, #12
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	f103 0208 	add.w	r2, r3, #8
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bc14:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	f103 0208 	add.w	r2, r3, #8
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	f103 0208 	add.w	r2, r3, #8
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	2200      	movs	r2, #0
 800bc2e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800bc30:	bf00      	nop
 800bc32:	370c      	adds	r7, #12
 800bc34:	46bd      	mov	sp, r7
 800bc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc3a:	4770      	bx	lr

0800bc3c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800bc3c:	b480      	push	{r7}
 800bc3e:	b083      	sub	sp, #12
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	2200      	movs	r2, #0
 800bc48:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800bc4a:	bf00      	nop
 800bc4c:	370c      	adds	r7, #12
 800bc4e:	46bd      	mov	sp, r7
 800bc50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc54:	4770      	bx	lr

0800bc56 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bc56:	b480      	push	{r7}
 800bc58:	b085      	sub	sp, #20
 800bc5a:	af00      	add	r7, sp, #0
 800bc5c:	6078      	str	r0, [r7, #4]
 800bc5e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	685b      	ldr	r3, [r3, #4]
 800bc64:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800bc66:	683b      	ldr	r3, [r7, #0]
 800bc68:	68fa      	ldr	r2, [r7, #12]
 800bc6a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	689a      	ldr	r2, [r3, #8]
 800bc70:	683b      	ldr	r3, [r7, #0]
 800bc72:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	689b      	ldr	r3, [r3, #8]
 800bc78:	683a      	ldr	r2, [r7, #0]
 800bc7a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	683a      	ldr	r2, [r7, #0]
 800bc80:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800bc82:	683b      	ldr	r3, [r7, #0]
 800bc84:	687a      	ldr	r2, [r7, #4]
 800bc86:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	1c5a      	adds	r2, r3, #1
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	601a      	str	r2, [r3, #0]
}
 800bc92:	bf00      	nop
 800bc94:	3714      	adds	r7, #20
 800bc96:	46bd      	mov	sp, r7
 800bc98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc9c:	4770      	bx	lr

0800bc9e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bc9e:	b480      	push	{r7}
 800bca0:	b085      	sub	sp, #20
 800bca2:	af00      	add	r7, sp, #0
 800bca4:	6078      	str	r0, [r7, #4]
 800bca6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800bca8:	683b      	ldr	r3, [r7, #0]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800bcae:	68bb      	ldr	r3, [r7, #8]
 800bcb0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bcb4:	d103      	bne.n	800bcbe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	691b      	ldr	r3, [r3, #16]
 800bcba:	60fb      	str	r3, [r7, #12]
 800bcbc:	e00c      	b.n	800bcd8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	3308      	adds	r3, #8
 800bcc2:	60fb      	str	r3, [r7, #12]
 800bcc4:	e002      	b.n	800bccc <vListInsert+0x2e>
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	685b      	ldr	r3, [r3, #4]
 800bcca:	60fb      	str	r3, [r7, #12]
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	685b      	ldr	r3, [r3, #4]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	68ba      	ldr	r2, [r7, #8]
 800bcd4:	429a      	cmp	r2, r3
 800bcd6:	d2f6      	bcs.n	800bcc6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	685a      	ldr	r2, [r3, #4]
 800bcdc:	683b      	ldr	r3, [r7, #0]
 800bcde:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800bce0:	683b      	ldr	r3, [r7, #0]
 800bce2:	685b      	ldr	r3, [r3, #4]
 800bce4:	683a      	ldr	r2, [r7, #0]
 800bce6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800bce8:	683b      	ldr	r3, [r7, #0]
 800bcea:	68fa      	ldr	r2, [r7, #12]
 800bcec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	683a      	ldr	r2, [r7, #0]
 800bcf2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800bcf4:	683b      	ldr	r3, [r7, #0]
 800bcf6:	687a      	ldr	r2, [r7, #4]
 800bcf8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	1c5a      	adds	r2, r3, #1
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	601a      	str	r2, [r3, #0]
}
 800bd04:	bf00      	nop
 800bd06:	3714      	adds	r7, #20
 800bd08:	46bd      	mov	sp, r7
 800bd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd0e:	4770      	bx	lr

0800bd10 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800bd10:	b480      	push	{r7}
 800bd12:	b085      	sub	sp, #20
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	691b      	ldr	r3, [r3, #16]
 800bd1c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	685b      	ldr	r3, [r3, #4]
 800bd22:	687a      	ldr	r2, [r7, #4]
 800bd24:	6892      	ldr	r2, [r2, #8]
 800bd26:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	689b      	ldr	r3, [r3, #8]
 800bd2c:	687a      	ldr	r2, [r7, #4]
 800bd2e:	6852      	ldr	r2, [r2, #4]
 800bd30:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	685b      	ldr	r3, [r3, #4]
 800bd36:	687a      	ldr	r2, [r7, #4]
 800bd38:	429a      	cmp	r2, r3
 800bd3a:	d103      	bne.n	800bd44 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	689a      	ldr	r2, [r3, #8]
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	2200      	movs	r2, #0
 800bd48:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	1e5a      	subs	r2, r3, #1
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	681b      	ldr	r3, [r3, #0]
}
 800bd58:	4618      	mov	r0, r3
 800bd5a:	3714      	adds	r7, #20
 800bd5c:	46bd      	mov	sp, r7
 800bd5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd62:	4770      	bx	lr

0800bd64 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800bd64:	b580      	push	{r7, lr}
 800bd66:	b084      	sub	sp, #16
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	6078      	str	r0, [r7, #4]
 800bd6c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d10b      	bne.n	800bd90 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800bd78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd7c:	f383 8811 	msr	BASEPRI, r3
 800bd80:	f3bf 8f6f 	isb	sy
 800bd84:	f3bf 8f4f 	dsb	sy
 800bd88:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800bd8a:	bf00      	nop
 800bd8c:	bf00      	nop
 800bd8e:	e7fd      	b.n	800bd8c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800bd90:	f002 fcea 	bl	800e768 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	681a      	ldr	r2, [r3, #0]
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bd9c:	68f9      	ldr	r1, [r7, #12]
 800bd9e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800bda0:	fb01 f303 	mul.w	r3, r1, r3
 800bda4:	441a      	add	r2, r3
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	2200      	movs	r2, #0
 800bdae:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	681a      	ldr	r2, [r3, #0]
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	681a      	ldr	r2, [r3, #0]
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bdc0:	3b01      	subs	r3, #1
 800bdc2:	68f9      	ldr	r1, [r7, #12]
 800bdc4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800bdc6:	fb01 f303 	mul.w	r3, r1, r3
 800bdca:	441a      	add	r2, r3
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	22ff      	movs	r2, #255	@ 0xff
 800bdd4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	22ff      	movs	r2, #255	@ 0xff
 800bddc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800bde0:	683b      	ldr	r3, [r7, #0]
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d114      	bne.n	800be10 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	691b      	ldr	r3, [r3, #16]
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d01a      	beq.n	800be24 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	3310      	adds	r3, #16
 800bdf2:	4618      	mov	r0, r3
 800bdf4:	f001 fc72 	bl	800d6dc <xTaskRemoveFromEventList>
 800bdf8:	4603      	mov	r3, r0
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d012      	beq.n	800be24 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800bdfe:	4b0d      	ldr	r3, [pc, #52]	@ (800be34 <xQueueGenericReset+0xd0>)
 800be00:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800be04:	601a      	str	r2, [r3, #0]
 800be06:	f3bf 8f4f 	dsb	sy
 800be0a:	f3bf 8f6f 	isb	sy
 800be0e:	e009      	b.n	800be24 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	3310      	adds	r3, #16
 800be14:	4618      	mov	r0, r3
 800be16:	f7ff fef1 	bl	800bbfc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	3324      	adds	r3, #36	@ 0x24
 800be1e:	4618      	mov	r0, r3
 800be20:	f7ff feec 	bl	800bbfc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800be24:	f002 fcd2 	bl	800e7cc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800be28:	2301      	movs	r3, #1
}
 800be2a:	4618      	mov	r0, r3
 800be2c:	3710      	adds	r7, #16
 800be2e:	46bd      	mov	sp, r7
 800be30:	bd80      	pop	{r7, pc}
 800be32:	bf00      	nop
 800be34:	e000ed04 	.word	0xe000ed04

0800be38 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800be38:	b580      	push	{r7, lr}
 800be3a:	b08e      	sub	sp, #56	@ 0x38
 800be3c:	af02      	add	r7, sp, #8
 800be3e:	60f8      	str	r0, [r7, #12]
 800be40:	60b9      	str	r1, [r7, #8]
 800be42:	607a      	str	r2, [r7, #4]
 800be44:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d10b      	bne.n	800be64 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800be4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be50:	f383 8811 	msr	BASEPRI, r3
 800be54:	f3bf 8f6f 	isb	sy
 800be58:	f3bf 8f4f 	dsb	sy
 800be5c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800be5e:	bf00      	nop
 800be60:	bf00      	nop
 800be62:	e7fd      	b.n	800be60 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800be64:	683b      	ldr	r3, [r7, #0]
 800be66:	2b00      	cmp	r3, #0
 800be68:	d10b      	bne.n	800be82 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800be6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be6e:	f383 8811 	msr	BASEPRI, r3
 800be72:	f3bf 8f6f 	isb	sy
 800be76:	f3bf 8f4f 	dsb	sy
 800be7a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800be7c:	bf00      	nop
 800be7e:	bf00      	nop
 800be80:	e7fd      	b.n	800be7e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	2b00      	cmp	r3, #0
 800be86:	d002      	beq.n	800be8e <xQueueGenericCreateStatic+0x56>
 800be88:	68bb      	ldr	r3, [r7, #8]
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d001      	beq.n	800be92 <xQueueGenericCreateStatic+0x5a>
 800be8e:	2301      	movs	r3, #1
 800be90:	e000      	b.n	800be94 <xQueueGenericCreateStatic+0x5c>
 800be92:	2300      	movs	r3, #0
 800be94:	2b00      	cmp	r3, #0
 800be96:	d10b      	bne.n	800beb0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800be98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be9c:	f383 8811 	msr	BASEPRI, r3
 800bea0:	f3bf 8f6f 	isb	sy
 800bea4:	f3bf 8f4f 	dsb	sy
 800bea8:	623b      	str	r3, [r7, #32]
}
 800beaa:	bf00      	nop
 800beac:	bf00      	nop
 800beae:	e7fd      	b.n	800beac <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d102      	bne.n	800bebc <xQueueGenericCreateStatic+0x84>
 800beb6:	68bb      	ldr	r3, [r7, #8]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d101      	bne.n	800bec0 <xQueueGenericCreateStatic+0x88>
 800bebc:	2301      	movs	r3, #1
 800bebe:	e000      	b.n	800bec2 <xQueueGenericCreateStatic+0x8a>
 800bec0:	2300      	movs	r3, #0
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d10b      	bne.n	800bede <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800bec6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800beca:	f383 8811 	msr	BASEPRI, r3
 800bece:	f3bf 8f6f 	isb	sy
 800bed2:	f3bf 8f4f 	dsb	sy
 800bed6:	61fb      	str	r3, [r7, #28]
}
 800bed8:	bf00      	nop
 800beda:	bf00      	nop
 800bedc:	e7fd      	b.n	800beda <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800bede:	2350      	movs	r3, #80	@ 0x50
 800bee0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800bee2:	697b      	ldr	r3, [r7, #20]
 800bee4:	2b50      	cmp	r3, #80	@ 0x50
 800bee6:	d00b      	beq.n	800bf00 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800bee8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800beec:	f383 8811 	msr	BASEPRI, r3
 800bef0:	f3bf 8f6f 	isb	sy
 800bef4:	f3bf 8f4f 	dsb	sy
 800bef8:	61bb      	str	r3, [r7, #24]
}
 800befa:	bf00      	nop
 800befc:	bf00      	nop
 800befe:	e7fd      	b.n	800befc <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800bf00:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bf02:	683b      	ldr	r3, [r7, #0]
 800bf04:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800bf06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d00d      	beq.n	800bf28 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800bf0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf0e:	2201      	movs	r2, #1
 800bf10:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bf14:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800bf18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf1a:	9300      	str	r3, [sp, #0]
 800bf1c:	4613      	mov	r3, r2
 800bf1e:	687a      	ldr	r2, [r7, #4]
 800bf20:	68b9      	ldr	r1, [r7, #8]
 800bf22:	68f8      	ldr	r0, [r7, #12]
 800bf24:	f000 f840 	bl	800bfa8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bf28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	3730      	adds	r7, #48	@ 0x30
 800bf2e:	46bd      	mov	sp, r7
 800bf30:	bd80      	pop	{r7, pc}

0800bf32 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800bf32:	b580      	push	{r7, lr}
 800bf34:	b08a      	sub	sp, #40	@ 0x28
 800bf36:	af02      	add	r7, sp, #8
 800bf38:	60f8      	str	r0, [r7, #12]
 800bf3a:	60b9      	str	r1, [r7, #8]
 800bf3c:	4613      	mov	r3, r2
 800bf3e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d10b      	bne.n	800bf5e <xQueueGenericCreate+0x2c>
	__asm volatile
 800bf46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf4a:	f383 8811 	msr	BASEPRI, r3
 800bf4e:	f3bf 8f6f 	isb	sy
 800bf52:	f3bf 8f4f 	dsb	sy
 800bf56:	613b      	str	r3, [r7, #16]
}
 800bf58:	bf00      	nop
 800bf5a:	bf00      	nop
 800bf5c:	e7fd      	b.n	800bf5a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	68ba      	ldr	r2, [r7, #8]
 800bf62:	fb02 f303 	mul.w	r3, r2, r3
 800bf66:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800bf68:	69fb      	ldr	r3, [r7, #28]
 800bf6a:	3350      	adds	r3, #80	@ 0x50
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	f002 fd1d 	bl	800e9ac <pvPortMalloc>
 800bf72:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800bf74:	69bb      	ldr	r3, [r7, #24]
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d011      	beq.n	800bf9e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800bf7a:	69bb      	ldr	r3, [r7, #24]
 800bf7c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bf7e:	697b      	ldr	r3, [r7, #20]
 800bf80:	3350      	adds	r3, #80	@ 0x50
 800bf82:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800bf84:	69bb      	ldr	r3, [r7, #24]
 800bf86:	2200      	movs	r2, #0
 800bf88:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bf8c:	79fa      	ldrb	r2, [r7, #7]
 800bf8e:	69bb      	ldr	r3, [r7, #24]
 800bf90:	9300      	str	r3, [sp, #0]
 800bf92:	4613      	mov	r3, r2
 800bf94:	697a      	ldr	r2, [r7, #20]
 800bf96:	68b9      	ldr	r1, [r7, #8]
 800bf98:	68f8      	ldr	r0, [r7, #12]
 800bf9a:	f000 f805 	bl	800bfa8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bf9e:	69bb      	ldr	r3, [r7, #24]
	}
 800bfa0:	4618      	mov	r0, r3
 800bfa2:	3720      	adds	r7, #32
 800bfa4:	46bd      	mov	sp, r7
 800bfa6:	bd80      	pop	{r7, pc}

0800bfa8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800bfa8:	b580      	push	{r7, lr}
 800bfaa:	b084      	sub	sp, #16
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	60f8      	str	r0, [r7, #12]
 800bfb0:	60b9      	str	r1, [r7, #8]
 800bfb2:	607a      	str	r2, [r7, #4]
 800bfb4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800bfb6:	68bb      	ldr	r3, [r7, #8]
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d103      	bne.n	800bfc4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800bfbc:	69bb      	ldr	r3, [r7, #24]
 800bfbe:	69ba      	ldr	r2, [r7, #24]
 800bfc0:	601a      	str	r2, [r3, #0]
 800bfc2:	e002      	b.n	800bfca <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800bfc4:	69bb      	ldr	r3, [r7, #24]
 800bfc6:	687a      	ldr	r2, [r7, #4]
 800bfc8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800bfca:	69bb      	ldr	r3, [r7, #24]
 800bfcc:	68fa      	ldr	r2, [r7, #12]
 800bfce:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800bfd0:	69bb      	ldr	r3, [r7, #24]
 800bfd2:	68ba      	ldr	r2, [r7, #8]
 800bfd4:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800bfd6:	2101      	movs	r1, #1
 800bfd8:	69b8      	ldr	r0, [r7, #24]
 800bfda:	f7ff fec3 	bl	800bd64 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800bfde:	69bb      	ldr	r3, [r7, #24]
 800bfe0:	78fa      	ldrb	r2, [r7, #3]
 800bfe2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800bfe6:	bf00      	nop
 800bfe8:	3710      	adds	r7, #16
 800bfea:	46bd      	mov	sp, r7
 800bfec:	bd80      	pop	{r7, pc}

0800bfee <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800bfee:	b580      	push	{r7, lr}
 800bff0:	b082      	sub	sp, #8
 800bff2:	af00      	add	r7, sp, #0
 800bff4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d00e      	beq.n	800c01a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	2200      	movs	r2, #0
 800c000:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	2200      	movs	r2, #0
 800c006:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	2200      	movs	r2, #0
 800c00c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800c00e:	2300      	movs	r3, #0
 800c010:	2200      	movs	r2, #0
 800c012:	2100      	movs	r1, #0
 800c014:	6878      	ldr	r0, [r7, #4]
 800c016:	f000 f8a3 	bl	800c160 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800c01a:	bf00      	nop
 800c01c:	3708      	adds	r7, #8
 800c01e:	46bd      	mov	sp, r7
 800c020:	bd80      	pop	{r7, pc}

0800c022 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800c022:	b580      	push	{r7, lr}
 800c024:	b086      	sub	sp, #24
 800c026:	af00      	add	r7, sp, #0
 800c028:	4603      	mov	r3, r0
 800c02a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800c02c:	2301      	movs	r3, #1
 800c02e:	617b      	str	r3, [r7, #20]
 800c030:	2300      	movs	r3, #0
 800c032:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800c034:	79fb      	ldrb	r3, [r7, #7]
 800c036:	461a      	mov	r2, r3
 800c038:	6939      	ldr	r1, [r7, #16]
 800c03a:	6978      	ldr	r0, [r7, #20]
 800c03c:	f7ff ff79 	bl	800bf32 <xQueueGenericCreate>
 800c040:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800c042:	68f8      	ldr	r0, [r7, #12]
 800c044:	f7ff ffd3 	bl	800bfee <prvInitialiseMutex>

		return xNewQueue;
 800c048:	68fb      	ldr	r3, [r7, #12]
	}
 800c04a:	4618      	mov	r0, r3
 800c04c:	3718      	adds	r7, #24
 800c04e:	46bd      	mov	sp, r7
 800c050:	bd80      	pop	{r7, pc}

0800c052 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800c052:	b580      	push	{r7, lr}
 800c054:	b088      	sub	sp, #32
 800c056:	af02      	add	r7, sp, #8
 800c058:	4603      	mov	r3, r0
 800c05a:	6039      	str	r1, [r7, #0]
 800c05c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800c05e:	2301      	movs	r3, #1
 800c060:	617b      	str	r3, [r7, #20]
 800c062:	2300      	movs	r3, #0
 800c064:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800c066:	79fb      	ldrb	r3, [r7, #7]
 800c068:	9300      	str	r3, [sp, #0]
 800c06a:	683b      	ldr	r3, [r7, #0]
 800c06c:	2200      	movs	r2, #0
 800c06e:	6939      	ldr	r1, [r7, #16]
 800c070:	6978      	ldr	r0, [r7, #20]
 800c072:	f7ff fee1 	bl	800be38 <xQueueGenericCreateStatic>
 800c076:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800c078:	68f8      	ldr	r0, [r7, #12]
 800c07a:	f7ff ffb8 	bl	800bfee <prvInitialiseMutex>

		return xNewQueue;
 800c07e:	68fb      	ldr	r3, [r7, #12]
	}
 800c080:	4618      	mov	r0, r3
 800c082:	3718      	adds	r7, #24
 800c084:	46bd      	mov	sp, r7
 800c086:	bd80      	pop	{r7, pc}

0800c088 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800c088:	b590      	push	{r4, r7, lr}
 800c08a:	b087      	sub	sp, #28
 800c08c:	af00      	add	r7, sp, #0
 800c08e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800c094:	693b      	ldr	r3, [r7, #16]
 800c096:	2b00      	cmp	r3, #0
 800c098:	d10b      	bne.n	800c0b2 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 800c09a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c09e:	f383 8811 	msr	BASEPRI, r3
 800c0a2:	f3bf 8f6f 	isb	sy
 800c0a6:	f3bf 8f4f 	dsb	sy
 800c0aa:	60fb      	str	r3, [r7, #12]
}
 800c0ac:	bf00      	nop
 800c0ae:	bf00      	nop
 800c0b0:	e7fd      	b.n	800c0ae <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800c0b2:	693b      	ldr	r3, [r7, #16]
 800c0b4:	689c      	ldr	r4, [r3, #8]
 800c0b6:	f001 fcd7 	bl	800da68 <xTaskGetCurrentTaskHandle>
 800c0ba:	4603      	mov	r3, r0
 800c0bc:	429c      	cmp	r4, r3
 800c0be:	d111      	bne.n	800c0e4 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800c0c0:	693b      	ldr	r3, [r7, #16]
 800c0c2:	68db      	ldr	r3, [r3, #12]
 800c0c4:	1e5a      	subs	r2, r3, #1
 800c0c6:	693b      	ldr	r3, [r7, #16]
 800c0c8:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800c0ca:	693b      	ldr	r3, [r7, #16]
 800c0cc:	68db      	ldr	r3, [r3, #12]
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d105      	bne.n	800c0de <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	2200      	movs	r2, #0
 800c0d6:	2100      	movs	r1, #0
 800c0d8:	6938      	ldr	r0, [r7, #16]
 800c0da:	f000 f841 	bl	800c160 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800c0de:	2301      	movs	r3, #1
 800c0e0:	617b      	str	r3, [r7, #20]
 800c0e2:	e001      	b.n	800c0e8 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800c0e8:	697b      	ldr	r3, [r7, #20]
	}
 800c0ea:	4618      	mov	r0, r3
 800c0ec:	371c      	adds	r7, #28
 800c0ee:	46bd      	mov	sp, r7
 800c0f0:	bd90      	pop	{r4, r7, pc}

0800c0f2 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800c0f2:	b590      	push	{r4, r7, lr}
 800c0f4:	b087      	sub	sp, #28
 800c0f6:	af00      	add	r7, sp, #0
 800c0f8:	6078      	str	r0, [r7, #4]
 800c0fa:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800c100:	693b      	ldr	r3, [r7, #16]
 800c102:	2b00      	cmp	r3, #0
 800c104:	d10b      	bne.n	800c11e <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 800c106:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c10a:	f383 8811 	msr	BASEPRI, r3
 800c10e:	f3bf 8f6f 	isb	sy
 800c112:	f3bf 8f4f 	dsb	sy
 800c116:	60fb      	str	r3, [r7, #12]
}
 800c118:	bf00      	nop
 800c11a:	bf00      	nop
 800c11c:	e7fd      	b.n	800c11a <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800c11e:	693b      	ldr	r3, [r7, #16]
 800c120:	689c      	ldr	r4, [r3, #8]
 800c122:	f001 fca1 	bl	800da68 <xTaskGetCurrentTaskHandle>
 800c126:	4603      	mov	r3, r0
 800c128:	429c      	cmp	r4, r3
 800c12a:	d107      	bne.n	800c13c <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800c12c:	693b      	ldr	r3, [r7, #16]
 800c12e:	68db      	ldr	r3, [r3, #12]
 800c130:	1c5a      	adds	r2, r3, #1
 800c132:	693b      	ldr	r3, [r7, #16]
 800c134:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800c136:	2301      	movs	r3, #1
 800c138:	617b      	str	r3, [r7, #20]
 800c13a:	e00c      	b.n	800c156 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800c13c:	6839      	ldr	r1, [r7, #0]
 800c13e:	6938      	ldr	r0, [r7, #16]
 800c140:	f000 fa90 	bl	800c664 <xQueueSemaphoreTake>
 800c144:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800c146:	697b      	ldr	r3, [r7, #20]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d004      	beq.n	800c156 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800c14c:	693b      	ldr	r3, [r7, #16]
 800c14e:	68db      	ldr	r3, [r3, #12]
 800c150:	1c5a      	adds	r2, r3, #1
 800c152:	693b      	ldr	r3, [r7, #16]
 800c154:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800c156:	697b      	ldr	r3, [r7, #20]
	}
 800c158:	4618      	mov	r0, r3
 800c15a:	371c      	adds	r7, #28
 800c15c:	46bd      	mov	sp, r7
 800c15e:	bd90      	pop	{r4, r7, pc}

0800c160 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c160:	b580      	push	{r7, lr}
 800c162:	b08e      	sub	sp, #56	@ 0x38
 800c164:	af00      	add	r7, sp, #0
 800c166:	60f8      	str	r0, [r7, #12]
 800c168:	60b9      	str	r1, [r7, #8]
 800c16a:	607a      	str	r2, [r7, #4]
 800c16c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c16e:	2300      	movs	r3, #0
 800c170:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800c176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d10b      	bne.n	800c194 <xQueueGenericSend+0x34>
	__asm volatile
 800c17c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c180:	f383 8811 	msr	BASEPRI, r3
 800c184:	f3bf 8f6f 	isb	sy
 800c188:	f3bf 8f4f 	dsb	sy
 800c18c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c18e:	bf00      	nop
 800c190:	bf00      	nop
 800c192:	e7fd      	b.n	800c190 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c194:	68bb      	ldr	r3, [r7, #8]
 800c196:	2b00      	cmp	r3, #0
 800c198:	d103      	bne.n	800c1a2 <xQueueGenericSend+0x42>
 800c19a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c19c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d101      	bne.n	800c1a6 <xQueueGenericSend+0x46>
 800c1a2:	2301      	movs	r3, #1
 800c1a4:	e000      	b.n	800c1a8 <xQueueGenericSend+0x48>
 800c1a6:	2300      	movs	r3, #0
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d10b      	bne.n	800c1c4 <xQueueGenericSend+0x64>
	__asm volatile
 800c1ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1b0:	f383 8811 	msr	BASEPRI, r3
 800c1b4:	f3bf 8f6f 	isb	sy
 800c1b8:	f3bf 8f4f 	dsb	sy
 800c1bc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c1be:	bf00      	nop
 800c1c0:	bf00      	nop
 800c1c2:	e7fd      	b.n	800c1c0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c1c4:	683b      	ldr	r3, [r7, #0]
 800c1c6:	2b02      	cmp	r3, #2
 800c1c8:	d103      	bne.n	800c1d2 <xQueueGenericSend+0x72>
 800c1ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c1ce:	2b01      	cmp	r3, #1
 800c1d0:	d101      	bne.n	800c1d6 <xQueueGenericSend+0x76>
 800c1d2:	2301      	movs	r3, #1
 800c1d4:	e000      	b.n	800c1d8 <xQueueGenericSend+0x78>
 800c1d6:	2300      	movs	r3, #0
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d10b      	bne.n	800c1f4 <xQueueGenericSend+0x94>
	__asm volatile
 800c1dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1e0:	f383 8811 	msr	BASEPRI, r3
 800c1e4:	f3bf 8f6f 	isb	sy
 800c1e8:	f3bf 8f4f 	dsb	sy
 800c1ec:	623b      	str	r3, [r7, #32]
}
 800c1ee:	bf00      	nop
 800c1f0:	bf00      	nop
 800c1f2:	e7fd      	b.n	800c1f0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c1f4:	f001 fc48 	bl	800da88 <xTaskGetSchedulerState>
 800c1f8:	4603      	mov	r3, r0
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d102      	bne.n	800c204 <xQueueGenericSend+0xa4>
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	2b00      	cmp	r3, #0
 800c202:	d101      	bne.n	800c208 <xQueueGenericSend+0xa8>
 800c204:	2301      	movs	r3, #1
 800c206:	e000      	b.n	800c20a <xQueueGenericSend+0xaa>
 800c208:	2300      	movs	r3, #0
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d10b      	bne.n	800c226 <xQueueGenericSend+0xc6>
	__asm volatile
 800c20e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c212:	f383 8811 	msr	BASEPRI, r3
 800c216:	f3bf 8f6f 	isb	sy
 800c21a:	f3bf 8f4f 	dsb	sy
 800c21e:	61fb      	str	r3, [r7, #28]
}
 800c220:	bf00      	nop
 800c222:	bf00      	nop
 800c224:	e7fd      	b.n	800c222 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c226:	f002 fa9f 	bl	800e768 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c22a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c22c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c22e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c230:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c232:	429a      	cmp	r2, r3
 800c234:	d302      	bcc.n	800c23c <xQueueGenericSend+0xdc>
 800c236:	683b      	ldr	r3, [r7, #0]
 800c238:	2b02      	cmp	r3, #2
 800c23a:	d129      	bne.n	800c290 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c23c:	683a      	ldr	r2, [r7, #0]
 800c23e:	68b9      	ldr	r1, [r7, #8]
 800c240:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c242:	f000 fbb9 	bl	800c9b8 <prvCopyDataToQueue>
 800c246:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c24a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d010      	beq.n	800c272 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c252:	3324      	adds	r3, #36	@ 0x24
 800c254:	4618      	mov	r0, r3
 800c256:	f001 fa41 	bl	800d6dc <xTaskRemoveFromEventList>
 800c25a:	4603      	mov	r3, r0
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d013      	beq.n	800c288 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c260:	4b3f      	ldr	r3, [pc, #252]	@ (800c360 <xQueueGenericSend+0x200>)
 800c262:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c266:	601a      	str	r2, [r3, #0]
 800c268:	f3bf 8f4f 	dsb	sy
 800c26c:	f3bf 8f6f 	isb	sy
 800c270:	e00a      	b.n	800c288 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c272:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c274:	2b00      	cmp	r3, #0
 800c276:	d007      	beq.n	800c288 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c278:	4b39      	ldr	r3, [pc, #228]	@ (800c360 <xQueueGenericSend+0x200>)
 800c27a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c27e:	601a      	str	r2, [r3, #0]
 800c280:	f3bf 8f4f 	dsb	sy
 800c284:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c288:	f002 faa0 	bl	800e7cc <vPortExitCritical>
				return pdPASS;
 800c28c:	2301      	movs	r3, #1
 800c28e:	e063      	b.n	800c358 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	2b00      	cmp	r3, #0
 800c294:	d103      	bne.n	800c29e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c296:	f002 fa99 	bl	800e7cc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c29a:	2300      	movs	r3, #0
 800c29c:	e05c      	b.n	800c358 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c29e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d106      	bne.n	800c2b2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c2a4:	f107 0314 	add.w	r3, r7, #20
 800c2a8:	4618      	mov	r0, r3
 800c2aa:	f001 fa7b 	bl	800d7a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c2ae:	2301      	movs	r3, #1
 800c2b0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c2b2:	f002 fa8b 	bl	800e7cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c2b6:	f000 ffd1 	bl	800d25c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c2ba:	f002 fa55 	bl	800e768 <vPortEnterCritical>
 800c2be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2c0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c2c4:	b25b      	sxtb	r3, r3
 800c2c6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c2ca:	d103      	bne.n	800c2d4 <xQueueGenericSend+0x174>
 800c2cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2ce:	2200      	movs	r2, #0
 800c2d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c2d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2d6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c2da:	b25b      	sxtb	r3, r3
 800c2dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c2e0:	d103      	bne.n	800c2ea <xQueueGenericSend+0x18a>
 800c2e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2e4:	2200      	movs	r2, #0
 800c2e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c2ea:	f002 fa6f 	bl	800e7cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c2ee:	1d3a      	adds	r2, r7, #4
 800c2f0:	f107 0314 	add.w	r3, r7, #20
 800c2f4:	4611      	mov	r1, r2
 800c2f6:	4618      	mov	r0, r3
 800c2f8:	f001 fa6a 	bl	800d7d0 <xTaskCheckForTimeOut>
 800c2fc:	4603      	mov	r3, r0
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d124      	bne.n	800c34c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c302:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c304:	f000 fc50 	bl	800cba8 <prvIsQueueFull>
 800c308:	4603      	mov	r3, r0
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d018      	beq.n	800c340 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c30e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c310:	3310      	adds	r3, #16
 800c312:	687a      	ldr	r2, [r7, #4]
 800c314:	4611      	mov	r1, r2
 800c316:	4618      	mov	r0, r3
 800c318:	f001 f98e 	bl	800d638 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c31c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c31e:	f000 fbdb 	bl	800cad8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c322:	f000 ffa9 	bl	800d278 <xTaskResumeAll>
 800c326:	4603      	mov	r3, r0
 800c328:	2b00      	cmp	r3, #0
 800c32a:	f47f af7c 	bne.w	800c226 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800c32e:	4b0c      	ldr	r3, [pc, #48]	@ (800c360 <xQueueGenericSend+0x200>)
 800c330:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c334:	601a      	str	r2, [r3, #0]
 800c336:	f3bf 8f4f 	dsb	sy
 800c33a:	f3bf 8f6f 	isb	sy
 800c33e:	e772      	b.n	800c226 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c340:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c342:	f000 fbc9 	bl	800cad8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c346:	f000 ff97 	bl	800d278 <xTaskResumeAll>
 800c34a:	e76c      	b.n	800c226 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c34c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c34e:	f000 fbc3 	bl	800cad8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c352:	f000 ff91 	bl	800d278 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c356:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c358:	4618      	mov	r0, r3
 800c35a:	3738      	adds	r7, #56	@ 0x38
 800c35c:	46bd      	mov	sp, r7
 800c35e:	bd80      	pop	{r7, pc}
 800c360:	e000ed04 	.word	0xe000ed04

0800c364 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c364:	b580      	push	{r7, lr}
 800c366:	b090      	sub	sp, #64	@ 0x40
 800c368:	af00      	add	r7, sp, #0
 800c36a:	60f8      	str	r0, [r7, #12]
 800c36c:	60b9      	str	r1, [r7, #8]
 800c36e:	607a      	str	r2, [r7, #4]
 800c370:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800c376:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d10b      	bne.n	800c394 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800c37c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c380:	f383 8811 	msr	BASEPRI, r3
 800c384:	f3bf 8f6f 	isb	sy
 800c388:	f3bf 8f4f 	dsb	sy
 800c38c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c38e:	bf00      	nop
 800c390:	bf00      	nop
 800c392:	e7fd      	b.n	800c390 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c394:	68bb      	ldr	r3, [r7, #8]
 800c396:	2b00      	cmp	r3, #0
 800c398:	d103      	bne.n	800c3a2 <xQueueGenericSendFromISR+0x3e>
 800c39a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c39c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d101      	bne.n	800c3a6 <xQueueGenericSendFromISR+0x42>
 800c3a2:	2301      	movs	r3, #1
 800c3a4:	e000      	b.n	800c3a8 <xQueueGenericSendFromISR+0x44>
 800c3a6:	2300      	movs	r3, #0
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d10b      	bne.n	800c3c4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800c3ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3b0:	f383 8811 	msr	BASEPRI, r3
 800c3b4:	f3bf 8f6f 	isb	sy
 800c3b8:	f3bf 8f4f 	dsb	sy
 800c3bc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c3be:	bf00      	nop
 800c3c0:	bf00      	nop
 800c3c2:	e7fd      	b.n	800c3c0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c3c4:	683b      	ldr	r3, [r7, #0]
 800c3c6:	2b02      	cmp	r3, #2
 800c3c8:	d103      	bne.n	800c3d2 <xQueueGenericSendFromISR+0x6e>
 800c3ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c3ce:	2b01      	cmp	r3, #1
 800c3d0:	d101      	bne.n	800c3d6 <xQueueGenericSendFromISR+0x72>
 800c3d2:	2301      	movs	r3, #1
 800c3d4:	e000      	b.n	800c3d8 <xQueueGenericSendFromISR+0x74>
 800c3d6:	2300      	movs	r3, #0
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d10b      	bne.n	800c3f4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800c3dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3e0:	f383 8811 	msr	BASEPRI, r3
 800c3e4:	f3bf 8f6f 	isb	sy
 800c3e8:	f3bf 8f4f 	dsb	sy
 800c3ec:	623b      	str	r3, [r7, #32]
}
 800c3ee:	bf00      	nop
 800c3f0:	bf00      	nop
 800c3f2:	e7fd      	b.n	800c3f0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c3f4:	f002 fa98 	bl	800e928 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c3f8:	f3ef 8211 	mrs	r2, BASEPRI
 800c3fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c400:	f383 8811 	msr	BASEPRI, r3
 800c404:	f3bf 8f6f 	isb	sy
 800c408:	f3bf 8f4f 	dsb	sy
 800c40c:	61fa      	str	r2, [r7, #28]
 800c40e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c410:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c412:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c414:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c416:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c418:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c41a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c41c:	429a      	cmp	r2, r3
 800c41e:	d302      	bcc.n	800c426 <xQueueGenericSendFromISR+0xc2>
 800c420:	683b      	ldr	r3, [r7, #0]
 800c422:	2b02      	cmp	r3, #2
 800c424:	d12f      	bne.n	800c486 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c426:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c428:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c42c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c430:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c432:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c434:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c436:	683a      	ldr	r2, [r7, #0]
 800c438:	68b9      	ldr	r1, [r7, #8]
 800c43a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c43c:	f000 fabc 	bl	800c9b8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c440:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800c444:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c448:	d112      	bne.n	800c470 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c44a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c44c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d016      	beq.n	800c480 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c452:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c454:	3324      	adds	r3, #36	@ 0x24
 800c456:	4618      	mov	r0, r3
 800c458:	f001 f940 	bl	800d6dc <xTaskRemoveFromEventList>
 800c45c:	4603      	mov	r3, r0
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d00e      	beq.n	800c480 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	2b00      	cmp	r3, #0
 800c466:	d00b      	beq.n	800c480 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	2201      	movs	r2, #1
 800c46c:	601a      	str	r2, [r3, #0]
 800c46e:	e007      	b.n	800c480 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c470:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800c474:	3301      	adds	r3, #1
 800c476:	b2db      	uxtb	r3, r3
 800c478:	b25a      	sxtb	r2, r3
 800c47a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c47c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800c480:	2301      	movs	r3, #1
 800c482:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800c484:	e001      	b.n	800c48a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c486:	2300      	movs	r3, #0
 800c488:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c48a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c48c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c48e:	697b      	ldr	r3, [r7, #20]
 800c490:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c494:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c496:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800c498:	4618      	mov	r0, r3
 800c49a:	3740      	adds	r7, #64	@ 0x40
 800c49c:	46bd      	mov	sp, r7
 800c49e:	bd80      	pop	{r7, pc}

0800c4a0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c4a0:	b580      	push	{r7, lr}
 800c4a2:	b08c      	sub	sp, #48	@ 0x30
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	60f8      	str	r0, [r7, #12]
 800c4a8:	60b9      	str	r1, [r7, #8]
 800c4aa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c4ac:	2300      	movs	r3, #0
 800c4ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c4b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d10b      	bne.n	800c4d2 <xQueueReceive+0x32>
	__asm volatile
 800c4ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4be:	f383 8811 	msr	BASEPRI, r3
 800c4c2:	f3bf 8f6f 	isb	sy
 800c4c6:	f3bf 8f4f 	dsb	sy
 800c4ca:	623b      	str	r3, [r7, #32]
}
 800c4cc:	bf00      	nop
 800c4ce:	bf00      	nop
 800c4d0:	e7fd      	b.n	800c4ce <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c4d2:	68bb      	ldr	r3, [r7, #8]
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d103      	bne.n	800c4e0 <xQueueReceive+0x40>
 800c4d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d101      	bne.n	800c4e4 <xQueueReceive+0x44>
 800c4e0:	2301      	movs	r3, #1
 800c4e2:	e000      	b.n	800c4e6 <xQueueReceive+0x46>
 800c4e4:	2300      	movs	r3, #0
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d10b      	bne.n	800c502 <xQueueReceive+0x62>
	__asm volatile
 800c4ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4ee:	f383 8811 	msr	BASEPRI, r3
 800c4f2:	f3bf 8f6f 	isb	sy
 800c4f6:	f3bf 8f4f 	dsb	sy
 800c4fa:	61fb      	str	r3, [r7, #28]
}
 800c4fc:	bf00      	nop
 800c4fe:	bf00      	nop
 800c500:	e7fd      	b.n	800c4fe <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c502:	f001 fac1 	bl	800da88 <xTaskGetSchedulerState>
 800c506:	4603      	mov	r3, r0
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d102      	bne.n	800c512 <xQueueReceive+0x72>
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d101      	bne.n	800c516 <xQueueReceive+0x76>
 800c512:	2301      	movs	r3, #1
 800c514:	e000      	b.n	800c518 <xQueueReceive+0x78>
 800c516:	2300      	movs	r3, #0
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d10b      	bne.n	800c534 <xQueueReceive+0x94>
	__asm volatile
 800c51c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c520:	f383 8811 	msr	BASEPRI, r3
 800c524:	f3bf 8f6f 	isb	sy
 800c528:	f3bf 8f4f 	dsb	sy
 800c52c:	61bb      	str	r3, [r7, #24]
}
 800c52e:	bf00      	nop
 800c530:	bf00      	nop
 800c532:	e7fd      	b.n	800c530 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c534:	f002 f918 	bl	800e768 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c538:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c53a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c53c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c53e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c540:	2b00      	cmp	r3, #0
 800c542:	d01f      	beq.n	800c584 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c544:	68b9      	ldr	r1, [r7, #8]
 800c546:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c548:	f000 faa0 	bl	800ca8c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c54c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c54e:	1e5a      	subs	r2, r3, #1
 800c550:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c552:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c554:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c556:	691b      	ldr	r3, [r3, #16]
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d00f      	beq.n	800c57c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c55c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c55e:	3310      	adds	r3, #16
 800c560:	4618      	mov	r0, r3
 800c562:	f001 f8bb 	bl	800d6dc <xTaskRemoveFromEventList>
 800c566:	4603      	mov	r3, r0
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d007      	beq.n	800c57c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c56c:	4b3c      	ldr	r3, [pc, #240]	@ (800c660 <xQueueReceive+0x1c0>)
 800c56e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c572:	601a      	str	r2, [r3, #0]
 800c574:	f3bf 8f4f 	dsb	sy
 800c578:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c57c:	f002 f926 	bl	800e7cc <vPortExitCritical>
				return pdPASS;
 800c580:	2301      	movs	r3, #1
 800c582:	e069      	b.n	800c658 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	2b00      	cmp	r3, #0
 800c588:	d103      	bne.n	800c592 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c58a:	f002 f91f 	bl	800e7cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c58e:	2300      	movs	r3, #0
 800c590:	e062      	b.n	800c658 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c592:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c594:	2b00      	cmp	r3, #0
 800c596:	d106      	bne.n	800c5a6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c598:	f107 0310 	add.w	r3, r7, #16
 800c59c:	4618      	mov	r0, r3
 800c59e:	f001 f901 	bl	800d7a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c5a2:	2301      	movs	r3, #1
 800c5a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c5a6:	f002 f911 	bl	800e7cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c5aa:	f000 fe57 	bl	800d25c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c5ae:	f002 f8db 	bl	800e768 <vPortEnterCritical>
 800c5b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5b4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c5b8:	b25b      	sxtb	r3, r3
 800c5ba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c5be:	d103      	bne.n	800c5c8 <xQueueReceive+0x128>
 800c5c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5c2:	2200      	movs	r2, #0
 800c5c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c5c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5ca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c5ce:	b25b      	sxtb	r3, r3
 800c5d0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c5d4:	d103      	bne.n	800c5de <xQueueReceive+0x13e>
 800c5d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5d8:	2200      	movs	r2, #0
 800c5da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c5de:	f002 f8f5 	bl	800e7cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c5e2:	1d3a      	adds	r2, r7, #4
 800c5e4:	f107 0310 	add.w	r3, r7, #16
 800c5e8:	4611      	mov	r1, r2
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	f001 f8f0 	bl	800d7d0 <xTaskCheckForTimeOut>
 800c5f0:	4603      	mov	r3, r0
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d123      	bne.n	800c63e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c5f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c5f8:	f000 fac0 	bl	800cb7c <prvIsQueueEmpty>
 800c5fc:	4603      	mov	r3, r0
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d017      	beq.n	800c632 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c602:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c604:	3324      	adds	r3, #36	@ 0x24
 800c606:	687a      	ldr	r2, [r7, #4]
 800c608:	4611      	mov	r1, r2
 800c60a:	4618      	mov	r0, r3
 800c60c:	f001 f814 	bl	800d638 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c610:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c612:	f000 fa61 	bl	800cad8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c616:	f000 fe2f 	bl	800d278 <xTaskResumeAll>
 800c61a:	4603      	mov	r3, r0
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d189      	bne.n	800c534 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800c620:	4b0f      	ldr	r3, [pc, #60]	@ (800c660 <xQueueReceive+0x1c0>)
 800c622:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c626:	601a      	str	r2, [r3, #0]
 800c628:	f3bf 8f4f 	dsb	sy
 800c62c:	f3bf 8f6f 	isb	sy
 800c630:	e780      	b.n	800c534 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c632:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c634:	f000 fa50 	bl	800cad8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c638:	f000 fe1e 	bl	800d278 <xTaskResumeAll>
 800c63c:	e77a      	b.n	800c534 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c63e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c640:	f000 fa4a 	bl	800cad8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c644:	f000 fe18 	bl	800d278 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c648:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c64a:	f000 fa97 	bl	800cb7c <prvIsQueueEmpty>
 800c64e:	4603      	mov	r3, r0
 800c650:	2b00      	cmp	r3, #0
 800c652:	f43f af6f 	beq.w	800c534 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c656:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c658:	4618      	mov	r0, r3
 800c65a:	3730      	adds	r7, #48	@ 0x30
 800c65c:	46bd      	mov	sp, r7
 800c65e:	bd80      	pop	{r7, pc}
 800c660:	e000ed04 	.word	0xe000ed04

0800c664 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800c664:	b580      	push	{r7, lr}
 800c666:	b08e      	sub	sp, #56	@ 0x38
 800c668:	af00      	add	r7, sp, #0
 800c66a:	6078      	str	r0, [r7, #4]
 800c66c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800c66e:	2300      	movs	r3, #0
 800c670:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800c676:	2300      	movs	r3, #0
 800c678:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c67a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d10b      	bne.n	800c698 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800c680:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c684:	f383 8811 	msr	BASEPRI, r3
 800c688:	f3bf 8f6f 	isb	sy
 800c68c:	f3bf 8f4f 	dsb	sy
 800c690:	623b      	str	r3, [r7, #32]
}
 800c692:	bf00      	nop
 800c694:	bf00      	nop
 800c696:	e7fd      	b.n	800c694 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c698:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c69a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d00b      	beq.n	800c6b8 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800c6a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6a4:	f383 8811 	msr	BASEPRI, r3
 800c6a8:	f3bf 8f6f 	isb	sy
 800c6ac:	f3bf 8f4f 	dsb	sy
 800c6b0:	61fb      	str	r3, [r7, #28]
}
 800c6b2:	bf00      	nop
 800c6b4:	bf00      	nop
 800c6b6:	e7fd      	b.n	800c6b4 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c6b8:	f001 f9e6 	bl	800da88 <xTaskGetSchedulerState>
 800c6bc:	4603      	mov	r3, r0
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d102      	bne.n	800c6c8 <xQueueSemaphoreTake+0x64>
 800c6c2:	683b      	ldr	r3, [r7, #0]
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d101      	bne.n	800c6cc <xQueueSemaphoreTake+0x68>
 800c6c8:	2301      	movs	r3, #1
 800c6ca:	e000      	b.n	800c6ce <xQueueSemaphoreTake+0x6a>
 800c6cc:	2300      	movs	r3, #0
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d10b      	bne.n	800c6ea <xQueueSemaphoreTake+0x86>
	__asm volatile
 800c6d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6d6:	f383 8811 	msr	BASEPRI, r3
 800c6da:	f3bf 8f6f 	isb	sy
 800c6de:	f3bf 8f4f 	dsb	sy
 800c6e2:	61bb      	str	r3, [r7, #24]
}
 800c6e4:	bf00      	nop
 800c6e6:	bf00      	nop
 800c6e8:	e7fd      	b.n	800c6e6 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c6ea:	f002 f83d 	bl	800e768 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c6ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c6f2:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c6f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d024      	beq.n	800c744 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c6fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6fc:	1e5a      	subs	r2, r3, #1
 800c6fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c700:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c702:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	2b00      	cmp	r3, #0
 800c708:	d104      	bne.n	800c714 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800c70a:	f001 fb37 	bl	800dd7c <pvTaskIncrementMutexHeldCount>
 800c70e:	4602      	mov	r2, r0
 800c710:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c712:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c714:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c716:	691b      	ldr	r3, [r3, #16]
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d00f      	beq.n	800c73c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c71c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c71e:	3310      	adds	r3, #16
 800c720:	4618      	mov	r0, r3
 800c722:	f000 ffdb 	bl	800d6dc <xTaskRemoveFromEventList>
 800c726:	4603      	mov	r3, r0
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d007      	beq.n	800c73c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c72c:	4b54      	ldr	r3, [pc, #336]	@ (800c880 <xQueueSemaphoreTake+0x21c>)
 800c72e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c732:	601a      	str	r2, [r3, #0]
 800c734:	f3bf 8f4f 	dsb	sy
 800c738:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c73c:	f002 f846 	bl	800e7cc <vPortExitCritical>
				return pdPASS;
 800c740:	2301      	movs	r3, #1
 800c742:	e098      	b.n	800c876 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c744:	683b      	ldr	r3, [r7, #0]
 800c746:	2b00      	cmp	r3, #0
 800c748:	d112      	bne.n	800c770 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c74a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d00b      	beq.n	800c768 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800c750:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c754:	f383 8811 	msr	BASEPRI, r3
 800c758:	f3bf 8f6f 	isb	sy
 800c75c:	f3bf 8f4f 	dsb	sy
 800c760:	617b      	str	r3, [r7, #20]
}
 800c762:	bf00      	nop
 800c764:	bf00      	nop
 800c766:	e7fd      	b.n	800c764 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800c768:	f002 f830 	bl	800e7cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c76c:	2300      	movs	r3, #0
 800c76e:	e082      	b.n	800c876 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c770:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c772:	2b00      	cmp	r3, #0
 800c774:	d106      	bne.n	800c784 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c776:	f107 030c 	add.w	r3, r7, #12
 800c77a:	4618      	mov	r0, r3
 800c77c:	f001 f812 	bl	800d7a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c780:	2301      	movs	r3, #1
 800c782:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c784:	f002 f822 	bl	800e7cc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c788:	f000 fd68 	bl	800d25c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c78c:	f001 ffec 	bl	800e768 <vPortEnterCritical>
 800c790:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c792:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c796:	b25b      	sxtb	r3, r3
 800c798:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c79c:	d103      	bne.n	800c7a6 <xQueueSemaphoreTake+0x142>
 800c79e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7a0:	2200      	movs	r2, #0
 800c7a2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c7a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7a8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c7ac:	b25b      	sxtb	r3, r3
 800c7ae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c7b2:	d103      	bne.n	800c7bc <xQueueSemaphoreTake+0x158>
 800c7b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7b6:	2200      	movs	r2, #0
 800c7b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c7bc:	f002 f806 	bl	800e7cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c7c0:	463a      	mov	r2, r7
 800c7c2:	f107 030c 	add.w	r3, r7, #12
 800c7c6:	4611      	mov	r1, r2
 800c7c8:	4618      	mov	r0, r3
 800c7ca:	f001 f801 	bl	800d7d0 <xTaskCheckForTimeOut>
 800c7ce:	4603      	mov	r3, r0
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d132      	bne.n	800c83a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c7d4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c7d6:	f000 f9d1 	bl	800cb7c <prvIsQueueEmpty>
 800c7da:	4603      	mov	r3, r0
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d026      	beq.n	800c82e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c7e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d109      	bne.n	800c7fc <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800c7e8:	f001 ffbe 	bl	800e768 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c7ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7ee:	689b      	ldr	r3, [r3, #8]
 800c7f0:	4618      	mov	r0, r3
 800c7f2:	f001 f967 	bl	800dac4 <xTaskPriorityInherit>
 800c7f6:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800c7f8:	f001 ffe8 	bl	800e7cc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c7fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7fe:	3324      	adds	r3, #36	@ 0x24
 800c800:	683a      	ldr	r2, [r7, #0]
 800c802:	4611      	mov	r1, r2
 800c804:	4618      	mov	r0, r3
 800c806:	f000 ff17 	bl	800d638 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c80a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c80c:	f000 f964 	bl	800cad8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c810:	f000 fd32 	bl	800d278 <xTaskResumeAll>
 800c814:	4603      	mov	r3, r0
 800c816:	2b00      	cmp	r3, #0
 800c818:	f47f af67 	bne.w	800c6ea <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800c81c:	4b18      	ldr	r3, [pc, #96]	@ (800c880 <xQueueSemaphoreTake+0x21c>)
 800c81e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c822:	601a      	str	r2, [r3, #0]
 800c824:	f3bf 8f4f 	dsb	sy
 800c828:	f3bf 8f6f 	isb	sy
 800c82c:	e75d      	b.n	800c6ea <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c82e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c830:	f000 f952 	bl	800cad8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c834:	f000 fd20 	bl	800d278 <xTaskResumeAll>
 800c838:	e757      	b.n	800c6ea <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c83a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c83c:	f000 f94c 	bl	800cad8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c840:	f000 fd1a 	bl	800d278 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c844:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c846:	f000 f999 	bl	800cb7c <prvIsQueueEmpty>
 800c84a:	4603      	mov	r3, r0
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	f43f af4c 	beq.w	800c6ea <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c854:	2b00      	cmp	r3, #0
 800c856:	d00d      	beq.n	800c874 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800c858:	f001 ff86 	bl	800e768 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c85c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c85e:	f000 f893 	bl	800c988 <prvGetDisinheritPriorityAfterTimeout>
 800c862:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c864:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c866:	689b      	ldr	r3, [r3, #8]
 800c868:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c86a:	4618      	mov	r0, r3
 800c86c:	f001 fa02 	bl	800dc74 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c870:	f001 ffac 	bl	800e7cc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c874:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c876:	4618      	mov	r0, r3
 800c878:	3738      	adds	r7, #56	@ 0x38
 800c87a:	46bd      	mov	sp, r7
 800c87c:	bd80      	pop	{r7, pc}
 800c87e:	bf00      	nop
 800c880:	e000ed04 	.word	0xe000ed04

0800c884 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c884:	b580      	push	{r7, lr}
 800c886:	b08e      	sub	sp, #56	@ 0x38
 800c888:	af00      	add	r7, sp, #0
 800c88a:	60f8      	str	r0, [r7, #12]
 800c88c:	60b9      	str	r1, [r7, #8]
 800c88e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800c894:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c896:	2b00      	cmp	r3, #0
 800c898:	d10b      	bne.n	800c8b2 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800c89a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c89e:	f383 8811 	msr	BASEPRI, r3
 800c8a2:	f3bf 8f6f 	isb	sy
 800c8a6:	f3bf 8f4f 	dsb	sy
 800c8aa:	623b      	str	r3, [r7, #32]
}
 800c8ac:	bf00      	nop
 800c8ae:	bf00      	nop
 800c8b0:	e7fd      	b.n	800c8ae <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c8b2:	68bb      	ldr	r3, [r7, #8]
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d103      	bne.n	800c8c0 <xQueueReceiveFromISR+0x3c>
 800c8b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d101      	bne.n	800c8c4 <xQueueReceiveFromISR+0x40>
 800c8c0:	2301      	movs	r3, #1
 800c8c2:	e000      	b.n	800c8c6 <xQueueReceiveFromISR+0x42>
 800c8c4:	2300      	movs	r3, #0
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d10b      	bne.n	800c8e2 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800c8ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8ce:	f383 8811 	msr	BASEPRI, r3
 800c8d2:	f3bf 8f6f 	isb	sy
 800c8d6:	f3bf 8f4f 	dsb	sy
 800c8da:	61fb      	str	r3, [r7, #28]
}
 800c8dc:	bf00      	nop
 800c8de:	bf00      	nop
 800c8e0:	e7fd      	b.n	800c8de <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c8e2:	f002 f821 	bl	800e928 <vPortValidateInterruptPriority>
	__asm volatile
 800c8e6:	f3ef 8211 	mrs	r2, BASEPRI
 800c8ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8ee:	f383 8811 	msr	BASEPRI, r3
 800c8f2:	f3bf 8f6f 	isb	sy
 800c8f6:	f3bf 8f4f 	dsb	sy
 800c8fa:	61ba      	str	r2, [r7, #24]
 800c8fc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800c8fe:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c900:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c904:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c906:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c908:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d02f      	beq.n	800c96e <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800c90e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c910:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c914:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c918:	68b9      	ldr	r1, [r7, #8]
 800c91a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c91c:	f000 f8b6 	bl	800ca8c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c920:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c922:	1e5a      	subs	r2, r3, #1
 800c924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c926:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800c928:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800c92c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c930:	d112      	bne.n	800c958 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c934:	691b      	ldr	r3, [r3, #16]
 800c936:	2b00      	cmp	r3, #0
 800c938:	d016      	beq.n	800c968 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c93a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c93c:	3310      	adds	r3, #16
 800c93e:	4618      	mov	r0, r3
 800c940:	f000 fecc 	bl	800d6dc <xTaskRemoveFromEventList>
 800c944:	4603      	mov	r3, r0
 800c946:	2b00      	cmp	r3, #0
 800c948:	d00e      	beq.n	800c968 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d00b      	beq.n	800c968 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	2201      	movs	r2, #1
 800c954:	601a      	str	r2, [r3, #0]
 800c956:	e007      	b.n	800c968 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c958:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c95c:	3301      	adds	r3, #1
 800c95e:	b2db      	uxtb	r3, r3
 800c960:	b25a      	sxtb	r2, r3
 800c962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c964:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800c968:	2301      	movs	r3, #1
 800c96a:	637b      	str	r3, [r7, #52]	@ 0x34
 800c96c:	e001      	b.n	800c972 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800c96e:	2300      	movs	r3, #0
 800c970:	637b      	str	r3, [r7, #52]	@ 0x34
 800c972:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c974:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c976:	693b      	ldr	r3, [r7, #16]
 800c978:	f383 8811 	msr	BASEPRI, r3
}
 800c97c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c97e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800c980:	4618      	mov	r0, r3
 800c982:	3738      	adds	r7, #56	@ 0x38
 800c984:	46bd      	mov	sp, r7
 800c986:	bd80      	pop	{r7, pc}

0800c988 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c988:	b480      	push	{r7}
 800c98a:	b085      	sub	sp, #20
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c994:	2b00      	cmp	r3, #0
 800c996:	d006      	beq.n	800c9a6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800c9a2:	60fb      	str	r3, [r7, #12]
 800c9a4:	e001      	b.n	800c9aa <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c9a6:	2300      	movs	r3, #0
 800c9a8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c9aa:	68fb      	ldr	r3, [r7, #12]
	}
 800c9ac:	4618      	mov	r0, r3
 800c9ae:	3714      	adds	r7, #20
 800c9b0:	46bd      	mov	sp, r7
 800c9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b6:	4770      	bx	lr

0800c9b8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c9b8:	b580      	push	{r7, lr}
 800c9ba:	b086      	sub	sp, #24
 800c9bc:	af00      	add	r7, sp, #0
 800c9be:	60f8      	str	r0, [r7, #12]
 800c9c0:	60b9      	str	r1, [r7, #8]
 800c9c2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c9c4:	2300      	movs	r3, #0
 800c9c6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c9cc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d10d      	bne.n	800c9f2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d14d      	bne.n	800ca7a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	689b      	ldr	r3, [r3, #8]
 800c9e2:	4618      	mov	r0, r3
 800c9e4:	f001 f8d6 	bl	800db94 <xTaskPriorityDisinherit>
 800c9e8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	2200      	movs	r2, #0
 800c9ee:	609a      	str	r2, [r3, #8]
 800c9f0:	e043      	b.n	800ca7a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d119      	bne.n	800ca2c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	6858      	ldr	r0, [r3, #4]
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca00:	461a      	mov	r2, r3
 800ca02:	68b9      	ldr	r1, [r7, #8]
 800ca04:	f003 fcad 	bl	8010362 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	685a      	ldr	r2, [r3, #4]
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca10:	441a      	add	r2, r3
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	685a      	ldr	r2, [r3, #4]
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	689b      	ldr	r3, [r3, #8]
 800ca1e:	429a      	cmp	r2, r3
 800ca20:	d32b      	bcc.n	800ca7a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	681a      	ldr	r2, [r3, #0]
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	605a      	str	r2, [r3, #4]
 800ca2a:	e026      	b.n	800ca7a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	68d8      	ldr	r0, [r3, #12]
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca34:	461a      	mov	r2, r3
 800ca36:	68b9      	ldr	r1, [r7, #8]
 800ca38:	f003 fc93 	bl	8010362 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	68da      	ldr	r2, [r3, #12]
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca44:	425b      	negs	r3, r3
 800ca46:	441a      	add	r2, r3
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	68da      	ldr	r2, [r3, #12]
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	429a      	cmp	r2, r3
 800ca56:	d207      	bcs.n	800ca68 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	689a      	ldr	r2, [r3, #8]
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca60:	425b      	negs	r3, r3
 800ca62:	441a      	add	r2, r3
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	2b02      	cmp	r3, #2
 800ca6c:	d105      	bne.n	800ca7a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ca6e:	693b      	ldr	r3, [r7, #16]
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d002      	beq.n	800ca7a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ca74:	693b      	ldr	r3, [r7, #16]
 800ca76:	3b01      	subs	r3, #1
 800ca78:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ca7a:	693b      	ldr	r3, [r7, #16]
 800ca7c:	1c5a      	adds	r2, r3, #1
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800ca82:	697b      	ldr	r3, [r7, #20]
}
 800ca84:	4618      	mov	r0, r3
 800ca86:	3718      	adds	r7, #24
 800ca88:	46bd      	mov	sp, r7
 800ca8a:	bd80      	pop	{r7, pc}

0800ca8c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ca8c:	b580      	push	{r7, lr}
 800ca8e:	b082      	sub	sp, #8
 800ca90:	af00      	add	r7, sp, #0
 800ca92:	6078      	str	r0, [r7, #4]
 800ca94:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d018      	beq.n	800cad0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	68da      	ldr	r2, [r3, #12]
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800caa6:	441a      	add	r2, r3
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	68da      	ldr	r2, [r3, #12]
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	689b      	ldr	r3, [r3, #8]
 800cab4:	429a      	cmp	r2, r3
 800cab6:	d303      	bcc.n	800cac0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	681a      	ldr	r2, [r3, #0]
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	68d9      	ldr	r1, [r3, #12]
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cac8:	461a      	mov	r2, r3
 800caca:	6838      	ldr	r0, [r7, #0]
 800cacc:	f003 fc49 	bl	8010362 <memcpy>
	}
}
 800cad0:	bf00      	nop
 800cad2:	3708      	adds	r7, #8
 800cad4:	46bd      	mov	sp, r7
 800cad6:	bd80      	pop	{r7, pc}

0800cad8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800cad8:	b580      	push	{r7, lr}
 800cada:	b084      	sub	sp, #16
 800cadc:	af00      	add	r7, sp, #0
 800cade:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800cae0:	f001 fe42 	bl	800e768 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800caea:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800caec:	e011      	b.n	800cb12 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d012      	beq.n	800cb1c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	3324      	adds	r3, #36	@ 0x24
 800cafa:	4618      	mov	r0, r3
 800cafc:	f000 fdee 	bl	800d6dc <xTaskRemoveFromEventList>
 800cb00:	4603      	mov	r3, r0
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d001      	beq.n	800cb0a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800cb06:	f000 fec7 	bl	800d898 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800cb0a:	7bfb      	ldrb	r3, [r7, #15]
 800cb0c:	3b01      	subs	r3, #1
 800cb0e:	b2db      	uxtb	r3, r3
 800cb10:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cb12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	dce9      	bgt.n	800caee <prvUnlockQueue+0x16>
 800cb1a:	e000      	b.n	800cb1e <prvUnlockQueue+0x46>
					break;
 800cb1c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	22ff      	movs	r2, #255	@ 0xff
 800cb22:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800cb26:	f001 fe51 	bl	800e7cc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800cb2a:	f001 fe1d 	bl	800e768 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cb34:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cb36:	e011      	b.n	800cb5c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	691b      	ldr	r3, [r3, #16]
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d012      	beq.n	800cb66 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	3310      	adds	r3, #16
 800cb44:	4618      	mov	r0, r3
 800cb46:	f000 fdc9 	bl	800d6dc <xTaskRemoveFromEventList>
 800cb4a:	4603      	mov	r3, r0
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d001      	beq.n	800cb54 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800cb50:	f000 fea2 	bl	800d898 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800cb54:	7bbb      	ldrb	r3, [r7, #14]
 800cb56:	3b01      	subs	r3, #1
 800cb58:	b2db      	uxtb	r3, r3
 800cb5a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cb5c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	dce9      	bgt.n	800cb38 <prvUnlockQueue+0x60>
 800cb64:	e000      	b.n	800cb68 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800cb66:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	22ff      	movs	r2, #255	@ 0xff
 800cb6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800cb70:	f001 fe2c 	bl	800e7cc <vPortExitCritical>
}
 800cb74:	bf00      	nop
 800cb76:	3710      	adds	r7, #16
 800cb78:	46bd      	mov	sp, r7
 800cb7a:	bd80      	pop	{r7, pc}

0800cb7c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800cb7c:	b580      	push	{r7, lr}
 800cb7e:	b084      	sub	sp, #16
 800cb80:	af00      	add	r7, sp, #0
 800cb82:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cb84:	f001 fdf0 	bl	800e768 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d102      	bne.n	800cb96 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800cb90:	2301      	movs	r3, #1
 800cb92:	60fb      	str	r3, [r7, #12]
 800cb94:	e001      	b.n	800cb9a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800cb96:	2300      	movs	r3, #0
 800cb98:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cb9a:	f001 fe17 	bl	800e7cc <vPortExitCritical>

	return xReturn;
 800cb9e:	68fb      	ldr	r3, [r7, #12]
}
 800cba0:	4618      	mov	r0, r3
 800cba2:	3710      	adds	r7, #16
 800cba4:	46bd      	mov	sp, r7
 800cba6:	bd80      	pop	{r7, pc}

0800cba8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800cba8:	b580      	push	{r7, lr}
 800cbaa:	b084      	sub	sp, #16
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cbb0:	f001 fdda 	bl	800e768 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cbbc:	429a      	cmp	r2, r3
 800cbbe:	d102      	bne.n	800cbc6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800cbc0:	2301      	movs	r3, #1
 800cbc2:	60fb      	str	r3, [r7, #12]
 800cbc4:	e001      	b.n	800cbca <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800cbc6:	2300      	movs	r3, #0
 800cbc8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cbca:	f001 fdff 	bl	800e7cc <vPortExitCritical>

	return xReturn;
 800cbce:	68fb      	ldr	r3, [r7, #12]
}
 800cbd0:	4618      	mov	r0, r3
 800cbd2:	3710      	adds	r7, #16
 800cbd4:	46bd      	mov	sp, r7
 800cbd6:	bd80      	pop	{r7, pc}

0800cbd8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800cbd8:	b480      	push	{r7}
 800cbda:	b085      	sub	sp, #20
 800cbdc:	af00      	add	r7, sp, #0
 800cbde:	6078      	str	r0, [r7, #4]
 800cbe0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cbe2:	2300      	movs	r3, #0
 800cbe4:	60fb      	str	r3, [r7, #12]
 800cbe6:	e014      	b.n	800cc12 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800cbe8:	4a0f      	ldr	r2, [pc, #60]	@ (800cc28 <vQueueAddToRegistry+0x50>)
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d10b      	bne.n	800cc0c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800cbf4:	490c      	ldr	r1, [pc, #48]	@ (800cc28 <vQueueAddToRegistry+0x50>)
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	683a      	ldr	r2, [r7, #0]
 800cbfa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800cbfe:	4a0a      	ldr	r2, [pc, #40]	@ (800cc28 <vQueueAddToRegistry+0x50>)
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	00db      	lsls	r3, r3, #3
 800cc04:	4413      	add	r3, r2
 800cc06:	687a      	ldr	r2, [r7, #4]
 800cc08:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800cc0a:	e006      	b.n	800cc1a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	3301      	adds	r3, #1
 800cc10:	60fb      	str	r3, [r7, #12]
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	2b07      	cmp	r3, #7
 800cc16:	d9e7      	bls.n	800cbe8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800cc18:	bf00      	nop
 800cc1a:	bf00      	nop
 800cc1c:	3714      	adds	r7, #20
 800cc1e:	46bd      	mov	sp, r7
 800cc20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc24:	4770      	bx	lr
 800cc26:	bf00      	nop
 800cc28:	20000d98 	.word	0x20000d98

0800cc2c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800cc2c:	b580      	push	{r7, lr}
 800cc2e:	b086      	sub	sp, #24
 800cc30:	af00      	add	r7, sp, #0
 800cc32:	60f8      	str	r0, [r7, #12]
 800cc34:	60b9      	str	r1, [r7, #8]
 800cc36:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800cc3c:	f001 fd94 	bl	800e768 <vPortEnterCritical>
 800cc40:	697b      	ldr	r3, [r7, #20]
 800cc42:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cc46:	b25b      	sxtb	r3, r3
 800cc48:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cc4c:	d103      	bne.n	800cc56 <vQueueWaitForMessageRestricted+0x2a>
 800cc4e:	697b      	ldr	r3, [r7, #20]
 800cc50:	2200      	movs	r2, #0
 800cc52:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cc56:	697b      	ldr	r3, [r7, #20]
 800cc58:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cc5c:	b25b      	sxtb	r3, r3
 800cc5e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cc62:	d103      	bne.n	800cc6c <vQueueWaitForMessageRestricted+0x40>
 800cc64:	697b      	ldr	r3, [r7, #20]
 800cc66:	2200      	movs	r2, #0
 800cc68:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800cc6c:	f001 fdae 	bl	800e7cc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800cc70:	697b      	ldr	r3, [r7, #20]
 800cc72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d106      	bne.n	800cc86 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800cc78:	697b      	ldr	r3, [r7, #20]
 800cc7a:	3324      	adds	r3, #36	@ 0x24
 800cc7c:	687a      	ldr	r2, [r7, #4]
 800cc7e:	68b9      	ldr	r1, [r7, #8]
 800cc80:	4618      	mov	r0, r3
 800cc82:	f000 fcff 	bl	800d684 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800cc86:	6978      	ldr	r0, [r7, #20]
 800cc88:	f7ff ff26 	bl	800cad8 <prvUnlockQueue>
	}
 800cc8c:	bf00      	nop
 800cc8e:	3718      	adds	r7, #24
 800cc90:	46bd      	mov	sp, r7
 800cc92:	bd80      	pop	{r7, pc}

0800cc94 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800cc94:	b580      	push	{r7, lr}
 800cc96:	b08e      	sub	sp, #56	@ 0x38
 800cc98:	af04      	add	r7, sp, #16
 800cc9a:	60f8      	str	r0, [r7, #12]
 800cc9c:	60b9      	str	r1, [r7, #8]
 800cc9e:	607a      	str	r2, [r7, #4]
 800cca0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800cca2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d10b      	bne.n	800ccc0 <xTaskCreateStatic+0x2c>
	__asm volatile
 800cca8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccac:	f383 8811 	msr	BASEPRI, r3
 800ccb0:	f3bf 8f6f 	isb	sy
 800ccb4:	f3bf 8f4f 	dsb	sy
 800ccb8:	623b      	str	r3, [r7, #32]
}
 800ccba:	bf00      	nop
 800ccbc:	bf00      	nop
 800ccbe:	e7fd      	b.n	800ccbc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ccc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d10b      	bne.n	800ccde <xTaskCreateStatic+0x4a>
	__asm volatile
 800ccc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccca:	f383 8811 	msr	BASEPRI, r3
 800ccce:	f3bf 8f6f 	isb	sy
 800ccd2:	f3bf 8f4f 	dsb	sy
 800ccd6:	61fb      	str	r3, [r7, #28]
}
 800ccd8:	bf00      	nop
 800ccda:	bf00      	nop
 800ccdc:	e7fd      	b.n	800ccda <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ccde:	23a8      	movs	r3, #168	@ 0xa8
 800cce0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800cce2:	693b      	ldr	r3, [r7, #16]
 800cce4:	2ba8      	cmp	r3, #168	@ 0xa8
 800cce6:	d00b      	beq.n	800cd00 <xTaskCreateStatic+0x6c>
	__asm volatile
 800cce8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccec:	f383 8811 	msr	BASEPRI, r3
 800ccf0:	f3bf 8f6f 	isb	sy
 800ccf4:	f3bf 8f4f 	dsb	sy
 800ccf8:	61bb      	str	r3, [r7, #24]
}
 800ccfa:	bf00      	nop
 800ccfc:	bf00      	nop
 800ccfe:	e7fd      	b.n	800ccfc <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800cd00:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800cd02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d01e      	beq.n	800cd46 <xTaskCreateStatic+0xb2>
 800cd08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d01b      	beq.n	800cd46 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cd0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd10:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800cd12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd14:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cd16:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800cd18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd1a:	2202      	movs	r2, #2
 800cd1c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800cd20:	2300      	movs	r3, #0
 800cd22:	9303      	str	r3, [sp, #12]
 800cd24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd26:	9302      	str	r3, [sp, #8]
 800cd28:	f107 0314 	add.w	r3, r7, #20
 800cd2c:	9301      	str	r3, [sp, #4]
 800cd2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd30:	9300      	str	r3, [sp, #0]
 800cd32:	683b      	ldr	r3, [r7, #0]
 800cd34:	687a      	ldr	r2, [r7, #4]
 800cd36:	68b9      	ldr	r1, [r7, #8]
 800cd38:	68f8      	ldr	r0, [r7, #12]
 800cd3a:	f000 f851 	bl	800cde0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cd3e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cd40:	f000 f8f6 	bl	800cf30 <prvAddNewTaskToReadyList>
 800cd44:	e001      	b.n	800cd4a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800cd46:	2300      	movs	r3, #0
 800cd48:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800cd4a:	697b      	ldr	r3, [r7, #20]
	}
 800cd4c:	4618      	mov	r0, r3
 800cd4e:	3728      	adds	r7, #40	@ 0x28
 800cd50:	46bd      	mov	sp, r7
 800cd52:	bd80      	pop	{r7, pc}

0800cd54 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800cd54:	b580      	push	{r7, lr}
 800cd56:	b08c      	sub	sp, #48	@ 0x30
 800cd58:	af04      	add	r7, sp, #16
 800cd5a:	60f8      	str	r0, [r7, #12]
 800cd5c:	60b9      	str	r1, [r7, #8]
 800cd5e:	603b      	str	r3, [r7, #0]
 800cd60:	4613      	mov	r3, r2
 800cd62:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800cd64:	88fb      	ldrh	r3, [r7, #6]
 800cd66:	009b      	lsls	r3, r3, #2
 800cd68:	4618      	mov	r0, r3
 800cd6a:	f001 fe1f 	bl	800e9ac <pvPortMalloc>
 800cd6e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800cd70:	697b      	ldr	r3, [r7, #20]
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d00e      	beq.n	800cd94 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800cd76:	20a8      	movs	r0, #168	@ 0xa8
 800cd78:	f001 fe18 	bl	800e9ac <pvPortMalloc>
 800cd7c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800cd7e:	69fb      	ldr	r3, [r7, #28]
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d003      	beq.n	800cd8c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800cd84:	69fb      	ldr	r3, [r7, #28]
 800cd86:	697a      	ldr	r2, [r7, #20]
 800cd88:	631a      	str	r2, [r3, #48]	@ 0x30
 800cd8a:	e005      	b.n	800cd98 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800cd8c:	6978      	ldr	r0, [r7, #20]
 800cd8e:	f001 fedb 	bl	800eb48 <vPortFree>
 800cd92:	e001      	b.n	800cd98 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800cd94:	2300      	movs	r3, #0
 800cd96:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800cd98:	69fb      	ldr	r3, [r7, #28]
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d017      	beq.n	800cdce <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800cd9e:	69fb      	ldr	r3, [r7, #28]
 800cda0:	2200      	movs	r2, #0
 800cda2:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800cda6:	88fa      	ldrh	r2, [r7, #6]
 800cda8:	2300      	movs	r3, #0
 800cdaa:	9303      	str	r3, [sp, #12]
 800cdac:	69fb      	ldr	r3, [r7, #28]
 800cdae:	9302      	str	r3, [sp, #8]
 800cdb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdb2:	9301      	str	r3, [sp, #4]
 800cdb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdb6:	9300      	str	r3, [sp, #0]
 800cdb8:	683b      	ldr	r3, [r7, #0]
 800cdba:	68b9      	ldr	r1, [r7, #8]
 800cdbc:	68f8      	ldr	r0, [r7, #12]
 800cdbe:	f000 f80f 	bl	800cde0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cdc2:	69f8      	ldr	r0, [r7, #28]
 800cdc4:	f000 f8b4 	bl	800cf30 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800cdc8:	2301      	movs	r3, #1
 800cdca:	61bb      	str	r3, [r7, #24]
 800cdcc:	e002      	b.n	800cdd4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800cdce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cdd2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800cdd4:	69bb      	ldr	r3, [r7, #24]
	}
 800cdd6:	4618      	mov	r0, r3
 800cdd8:	3720      	adds	r7, #32
 800cdda:	46bd      	mov	sp, r7
 800cddc:	bd80      	pop	{r7, pc}
	...

0800cde0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800cde0:	b580      	push	{r7, lr}
 800cde2:	b088      	sub	sp, #32
 800cde4:	af00      	add	r7, sp, #0
 800cde6:	60f8      	str	r0, [r7, #12]
 800cde8:	60b9      	str	r1, [r7, #8]
 800cdea:	607a      	str	r2, [r7, #4]
 800cdec:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800cdee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdf0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	009b      	lsls	r3, r3, #2
 800cdf6:	461a      	mov	r2, r3
 800cdf8:	21a5      	movs	r1, #165	@ 0xa5
 800cdfa:	f003 fa23 	bl	8010244 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800cdfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce00:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ce08:	3b01      	subs	r3, #1
 800ce0a:	009b      	lsls	r3, r3, #2
 800ce0c:	4413      	add	r3, r2
 800ce0e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ce10:	69bb      	ldr	r3, [r7, #24]
 800ce12:	f023 0307 	bic.w	r3, r3, #7
 800ce16:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ce18:	69bb      	ldr	r3, [r7, #24]
 800ce1a:	f003 0307 	and.w	r3, r3, #7
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d00b      	beq.n	800ce3a <prvInitialiseNewTask+0x5a>
	__asm volatile
 800ce22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce26:	f383 8811 	msr	BASEPRI, r3
 800ce2a:	f3bf 8f6f 	isb	sy
 800ce2e:	f3bf 8f4f 	dsb	sy
 800ce32:	617b      	str	r3, [r7, #20]
}
 800ce34:	bf00      	nop
 800ce36:	bf00      	nop
 800ce38:	e7fd      	b.n	800ce36 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ce3a:	68bb      	ldr	r3, [r7, #8]
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d01f      	beq.n	800ce80 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ce40:	2300      	movs	r3, #0
 800ce42:	61fb      	str	r3, [r7, #28]
 800ce44:	e012      	b.n	800ce6c <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ce46:	68ba      	ldr	r2, [r7, #8]
 800ce48:	69fb      	ldr	r3, [r7, #28]
 800ce4a:	4413      	add	r3, r2
 800ce4c:	7819      	ldrb	r1, [r3, #0]
 800ce4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ce50:	69fb      	ldr	r3, [r7, #28]
 800ce52:	4413      	add	r3, r2
 800ce54:	3334      	adds	r3, #52	@ 0x34
 800ce56:	460a      	mov	r2, r1
 800ce58:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ce5a:	68ba      	ldr	r2, [r7, #8]
 800ce5c:	69fb      	ldr	r3, [r7, #28]
 800ce5e:	4413      	add	r3, r2
 800ce60:	781b      	ldrb	r3, [r3, #0]
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d006      	beq.n	800ce74 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ce66:	69fb      	ldr	r3, [r7, #28]
 800ce68:	3301      	adds	r3, #1
 800ce6a:	61fb      	str	r3, [r7, #28]
 800ce6c:	69fb      	ldr	r3, [r7, #28]
 800ce6e:	2b0f      	cmp	r3, #15
 800ce70:	d9e9      	bls.n	800ce46 <prvInitialiseNewTask+0x66>
 800ce72:	e000      	b.n	800ce76 <prvInitialiseNewTask+0x96>
			{
				break;
 800ce74:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ce76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce78:	2200      	movs	r2, #0
 800ce7a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800ce7e:	e003      	b.n	800ce88 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ce80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce82:	2200      	movs	r2, #0
 800ce84:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ce88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce8a:	2b37      	cmp	r3, #55	@ 0x37
 800ce8c:	d901      	bls.n	800ce92 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ce8e:	2337      	movs	r3, #55	@ 0x37
 800ce90:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ce92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce94:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ce96:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ce98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce9a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ce9c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ce9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cea0:	2200      	movs	r2, #0
 800cea2:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800cea4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cea6:	3304      	adds	r3, #4
 800cea8:	4618      	mov	r0, r3
 800ceaa:	f7fe fec7 	bl	800bc3c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ceae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ceb0:	3318      	adds	r3, #24
 800ceb2:	4618      	mov	r0, r3
 800ceb4:	f7fe fec2 	bl	800bc3c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ceb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ceba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cebc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cebe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cec0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800cec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cec6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800cec8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ceca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cecc:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800cece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ced0:	2200      	movs	r2, #0
 800ced2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ced6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ced8:	2200      	movs	r2, #0
 800ceda:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800cede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cee0:	3354      	adds	r3, #84	@ 0x54
 800cee2:	224c      	movs	r2, #76	@ 0x4c
 800cee4:	2100      	movs	r1, #0
 800cee6:	4618      	mov	r0, r3
 800cee8:	f003 f9ac 	bl	8010244 <memset>
 800ceec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ceee:	4a0d      	ldr	r2, [pc, #52]	@ (800cf24 <prvInitialiseNewTask+0x144>)
 800cef0:	659a      	str	r2, [r3, #88]	@ 0x58
 800cef2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cef4:	4a0c      	ldr	r2, [pc, #48]	@ (800cf28 <prvInitialiseNewTask+0x148>)
 800cef6:	65da      	str	r2, [r3, #92]	@ 0x5c
 800cef8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cefa:	4a0c      	ldr	r2, [pc, #48]	@ (800cf2c <prvInitialiseNewTask+0x14c>)
 800cefc:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800cefe:	683a      	ldr	r2, [r7, #0]
 800cf00:	68f9      	ldr	r1, [r7, #12]
 800cf02:	69b8      	ldr	r0, [r7, #24]
 800cf04:	f001 fafc 	bl	800e500 <pxPortInitialiseStack>
 800cf08:	4602      	mov	r2, r0
 800cf0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf0c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800cf0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d002      	beq.n	800cf1a <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800cf14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cf18:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cf1a:	bf00      	nop
 800cf1c:	3720      	adds	r7, #32
 800cf1e:	46bd      	mov	sp, r7
 800cf20:	bd80      	pop	{r7, pc}
 800cf22:	bf00      	nop
 800cf24:	200127f8 	.word	0x200127f8
 800cf28:	20012860 	.word	0x20012860
 800cf2c:	200128c8 	.word	0x200128c8

0800cf30 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800cf30:	b580      	push	{r7, lr}
 800cf32:	b082      	sub	sp, #8
 800cf34:	af00      	add	r7, sp, #0
 800cf36:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800cf38:	f001 fc16 	bl	800e768 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800cf3c:	4b2d      	ldr	r3, [pc, #180]	@ (800cff4 <prvAddNewTaskToReadyList+0xc4>)
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	3301      	adds	r3, #1
 800cf42:	4a2c      	ldr	r2, [pc, #176]	@ (800cff4 <prvAddNewTaskToReadyList+0xc4>)
 800cf44:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800cf46:	4b2c      	ldr	r3, [pc, #176]	@ (800cff8 <prvAddNewTaskToReadyList+0xc8>)
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d109      	bne.n	800cf62 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800cf4e:	4a2a      	ldr	r2, [pc, #168]	@ (800cff8 <prvAddNewTaskToReadyList+0xc8>)
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800cf54:	4b27      	ldr	r3, [pc, #156]	@ (800cff4 <prvAddNewTaskToReadyList+0xc4>)
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	2b01      	cmp	r3, #1
 800cf5a:	d110      	bne.n	800cf7e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800cf5c:	f000 fcc0 	bl	800d8e0 <prvInitialiseTaskLists>
 800cf60:	e00d      	b.n	800cf7e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800cf62:	4b26      	ldr	r3, [pc, #152]	@ (800cffc <prvAddNewTaskToReadyList+0xcc>)
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d109      	bne.n	800cf7e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800cf6a:	4b23      	ldr	r3, [pc, #140]	@ (800cff8 <prvAddNewTaskToReadyList+0xc8>)
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf74:	429a      	cmp	r2, r3
 800cf76:	d802      	bhi.n	800cf7e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800cf78:	4a1f      	ldr	r2, [pc, #124]	@ (800cff8 <prvAddNewTaskToReadyList+0xc8>)
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800cf7e:	4b20      	ldr	r3, [pc, #128]	@ (800d000 <prvAddNewTaskToReadyList+0xd0>)
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	3301      	adds	r3, #1
 800cf84:	4a1e      	ldr	r2, [pc, #120]	@ (800d000 <prvAddNewTaskToReadyList+0xd0>)
 800cf86:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800cf88:	4b1d      	ldr	r3, [pc, #116]	@ (800d000 <prvAddNewTaskToReadyList+0xd0>)
 800cf8a:	681a      	ldr	r2, [r3, #0]
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cf94:	4b1b      	ldr	r3, [pc, #108]	@ (800d004 <prvAddNewTaskToReadyList+0xd4>)
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	429a      	cmp	r2, r3
 800cf9a:	d903      	bls.n	800cfa4 <prvAddNewTaskToReadyList+0x74>
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cfa0:	4a18      	ldr	r2, [pc, #96]	@ (800d004 <prvAddNewTaskToReadyList+0xd4>)
 800cfa2:	6013      	str	r3, [r2, #0]
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cfa8:	4613      	mov	r3, r2
 800cfaa:	009b      	lsls	r3, r3, #2
 800cfac:	4413      	add	r3, r2
 800cfae:	009b      	lsls	r3, r3, #2
 800cfb0:	4a15      	ldr	r2, [pc, #84]	@ (800d008 <prvAddNewTaskToReadyList+0xd8>)
 800cfb2:	441a      	add	r2, r3
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	3304      	adds	r3, #4
 800cfb8:	4619      	mov	r1, r3
 800cfba:	4610      	mov	r0, r2
 800cfbc:	f7fe fe4b 	bl	800bc56 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800cfc0:	f001 fc04 	bl	800e7cc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800cfc4:	4b0d      	ldr	r3, [pc, #52]	@ (800cffc <prvAddNewTaskToReadyList+0xcc>)
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d00e      	beq.n	800cfea <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800cfcc:	4b0a      	ldr	r3, [pc, #40]	@ (800cff8 <prvAddNewTaskToReadyList+0xc8>)
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cfd6:	429a      	cmp	r2, r3
 800cfd8:	d207      	bcs.n	800cfea <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800cfda:	4b0c      	ldr	r3, [pc, #48]	@ (800d00c <prvAddNewTaskToReadyList+0xdc>)
 800cfdc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cfe0:	601a      	str	r2, [r3, #0]
 800cfe2:	f3bf 8f4f 	dsb	sy
 800cfe6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cfea:	bf00      	nop
 800cfec:	3708      	adds	r7, #8
 800cfee:	46bd      	mov	sp, r7
 800cff0:	bd80      	pop	{r7, pc}
 800cff2:	bf00      	nop
 800cff4:	200012ac 	.word	0x200012ac
 800cff8:	20000dd8 	.word	0x20000dd8
 800cffc:	200012b8 	.word	0x200012b8
 800d000:	200012c8 	.word	0x200012c8
 800d004:	200012b4 	.word	0x200012b4
 800d008:	20000ddc 	.word	0x20000ddc
 800d00c:	e000ed04 	.word	0xe000ed04

0800d010 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800d010:	b580      	push	{r7, lr}
 800d012:	b08a      	sub	sp, #40	@ 0x28
 800d014:	af00      	add	r7, sp, #0
 800d016:	6078      	str	r0, [r7, #4]
 800d018:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800d01a:	2300      	movs	r3, #0
 800d01c:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	2b00      	cmp	r3, #0
 800d022:	d10b      	bne.n	800d03c <vTaskDelayUntil+0x2c>
	__asm volatile
 800d024:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d028:	f383 8811 	msr	BASEPRI, r3
 800d02c:	f3bf 8f6f 	isb	sy
 800d030:	f3bf 8f4f 	dsb	sy
 800d034:	617b      	str	r3, [r7, #20]
}
 800d036:	bf00      	nop
 800d038:	bf00      	nop
 800d03a:	e7fd      	b.n	800d038 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800d03c:	683b      	ldr	r3, [r7, #0]
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d10b      	bne.n	800d05a <vTaskDelayUntil+0x4a>
	__asm volatile
 800d042:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d046:	f383 8811 	msr	BASEPRI, r3
 800d04a:	f3bf 8f6f 	isb	sy
 800d04e:	f3bf 8f4f 	dsb	sy
 800d052:	613b      	str	r3, [r7, #16]
}
 800d054:	bf00      	nop
 800d056:	bf00      	nop
 800d058:	e7fd      	b.n	800d056 <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 800d05a:	4b2a      	ldr	r3, [pc, #168]	@ (800d104 <vTaskDelayUntil+0xf4>)
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d00b      	beq.n	800d07a <vTaskDelayUntil+0x6a>
	__asm volatile
 800d062:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d066:	f383 8811 	msr	BASEPRI, r3
 800d06a:	f3bf 8f6f 	isb	sy
 800d06e:	f3bf 8f4f 	dsb	sy
 800d072:	60fb      	str	r3, [r7, #12]
}
 800d074:	bf00      	nop
 800d076:	bf00      	nop
 800d078:	e7fd      	b.n	800d076 <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 800d07a:	f000 f8ef 	bl	800d25c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800d07e:	4b22      	ldr	r3, [pc, #136]	@ (800d108 <vTaskDelayUntil+0xf8>)
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	683a      	ldr	r2, [r7, #0]
 800d08a:	4413      	add	r3, r2
 800d08c:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	6a3a      	ldr	r2, [r7, #32]
 800d094:	429a      	cmp	r2, r3
 800d096:	d20b      	bcs.n	800d0b0 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	69fa      	ldr	r2, [r7, #28]
 800d09e:	429a      	cmp	r2, r3
 800d0a0:	d211      	bcs.n	800d0c6 <vTaskDelayUntil+0xb6>
 800d0a2:	69fa      	ldr	r2, [r7, #28]
 800d0a4:	6a3b      	ldr	r3, [r7, #32]
 800d0a6:	429a      	cmp	r2, r3
 800d0a8:	d90d      	bls.n	800d0c6 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800d0aa:	2301      	movs	r3, #1
 800d0ac:	627b      	str	r3, [r7, #36]	@ 0x24
 800d0ae:	e00a      	b.n	800d0c6 <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	69fa      	ldr	r2, [r7, #28]
 800d0b6:	429a      	cmp	r2, r3
 800d0b8:	d303      	bcc.n	800d0c2 <vTaskDelayUntil+0xb2>
 800d0ba:	69fa      	ldr	r2, [r7, #28]
 800d0bc:	6a3b      	ldr	r3, [r7, #32]
 800d0be:	429a      	cmp	r2, r3
 800d0c0:	d901      	bls.n	800d0c6 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800d0c2:	2301      	movs	r3, #1
 800d0c4:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	69fa      	ldr	r2, [r7, #28]
 800d0ca:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800d0cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d006      	beq.n	800d0e0 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800d0d2:	69fa      	ldr	r2, [r7, #28]
 800d0d4:	6a3b      	ldr	r3, [r7, #32]
 800d0d6:	1ad3      	subs	r3, r2, r3
 800d0d8:	2100      	movs	r1, #0
 800d0da:	4618      	mov	r0, r3
 800d0dc:	f000 fe62 	bl	800dda4 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800d0e0:	f000 f8ca 	bl	800d278 <xTaskResumeAll>
 800d0e4:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d0e6:	69bb      	ldr	r3, [r7, #24]
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d107      	bne.n	800d0fc <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 800d0ec:	4b07      	ldr	r3, [pc, #28]	@ (800d10c <vTaskDelayUntil+0xfc>)
 800d0ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d0f2:	601a      	str	r2, [r3, #0]
 800d0f4:	f3bf 8f4f 	dsb	sy
 800d0f8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d0fc:	bf00      	nop
 800d0fe:	3728      	adds	r7, #40	@ 0x28
 800d100:	46bd      	mov	sp, r7
 800d102:	bd80      	pop	{r7, pc}
 800d104:	200012d4 	.word	0x200012d4
 800d108:	200012b0 	.word	0x200012b0
 800d10c:	e000ed04 	.word	0xe000ed04

0800d110 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d110:	b580      	push	{r7, lr}
 800d112:	b084      	sub	sp, #16
 800d114:	af00      	add	r7, sp, #0
 800d116:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d118:	2300      	movs	r3, #0
 800d11a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d018      	beq.n	800d154 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d122:	4b14      	ldr	r3, [pc, #80]	@ (800d174 <vTaskDelay+0x64>)
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	2b00      	cmp	r3, #0
 800d128:	d00b      	beq.n	800d142 <vTaskDelay+0x32>
	__asm volatile
 800d12a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d12e:	f383 8811 	msr	BASEPRI, r3
 800d132:	f3bf 8f6f 	isb	sy
 800d136:	f3bf 8f4f 	dsb	sy
 800d13a:	60bb      	str	r3, [r7, #8]
}
 800d13c:	bf00      	nop
 800d13e:	bf00      	nop
 800d140:	e7fd      	b.n	800d13e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d142:	f000 f88b 	bl	800d25c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d146:	2100      	movs	r1, #0
 800d148:	6878      	ldr	r0, [r7, #4]
 800d14a:	f000 fe2b 	bl	800dda4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d14e:	f000 f893 	bl	800d278 <xTaskResumeAll>
 800d152:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	2b00      	cmp	r3, #0
 800d158:	d107      	bne.n	800d16a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800d15a:	4b07      	ldr	r3, [pc, #28]	@ (800d178 <vTaskDelay+0x68>)
 800d15c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d160:	601a      	str	r2, [r3, #0]
 800d162:	f3bf 8f4f 	dsb	sy
 800d166:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d16a:	bf00      	nop
 800d16c:	3710      	adds	r7, #16
 800d16e:	46bd      	mov	sp, r7
 800d170:	bd80      	pop	{r7, pc}
 800d172:	bf00      	nop
 800d174:	200012d4 	.word	0x200012d4
 800d178:	e000ed04 	.word	0xe000ed04

0800d17c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d17c:	b580      	push	{r7, lr}
 800d17e:	b08a      	sub	sp, #40	@ 0x28
 800d180:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d182:	2300      	movs	r3, #0
 800d184:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d186:	2300      	movs	r3, #0
 800d188:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d18a:	463a      	mov	r2, r7
 800d18c:	1d39      	adds	r1, r7, #4
 800d18e:	f107 0308 	add.w	r3, r7, #8
 800d192:	4618      	mov	r0, r3
 800d194:	f7fe fcfe 	bl	800bb94 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d198:	6839      	ldr	r1, [r7, #0]
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	68ba      	ldr	r2, [r7, #8]
 800d19e:	9202      	str	r2, [sp, #8]
 800d1a0:	9301      	str	r3, [sp, #4]
 800d1a2:	2300      	movs	r3, #0
 800d1a4:	9300      	str	r3, [sp, #0]
 800d1a6:	2300      	movs	r3, #0
 800d1a8:	460a      	mov	r2, r1
 800d1aa:	4924      	ldr	r1, [pc, #144]	@ (800d23c <vTaskStartScheduler+0xc0>)
 800d1ac:	4824      	ldr	r0, [pc, #144]	@ (800d240 <vTaskStartScheduler+0xc4>)
 800d1ae:	f7ff fd71 	bl	800cc94 <xTaskCreateStatic>
 800d1b2:	4603      	mov	r3, r0
 800d1b4:	4a23      	ldr	r2, [pc, #140]	@ (800d244 <vTaskStartScheduler+0xc8>)
 800d1b6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d1b8:	4b22      	ldr	r3, [pc, #136]	@ (800d244 <vTaskStartScheduler+0xc8>)
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d002      	beq.n	800d1c6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d1c0:	2301      	movs	r3, #1
 800d1c2:	617b      	str	r3, [r7, #20]
 800d1c4:	e001      	b.n	800d1ca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d1c6:	2300      	movs	r3, #0
 800d1c8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d1ca:	697b      	ldr	r3, [r7, #20]
 800d1cc:	2b01      	cmp	r3, #1
 800d1ce:	d102      	bne.n	800d1d6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800d1d0:	f000 fe3c 	bl	800de4c <xTimerCreateTimerTask>
 800d1d4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d1d6:	697b      	ldr	r3, [r7, #20]
 800d1d8:	2b01      	cmp	r3, #1
 800d1da:	d11b      	bne.n	800d214 <vTaskStartScheduler+0x98>
	__asm volatile
 800d1dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1e0:	f383 8811 	msr	BASEPRI, r3
 800d1e4:	f3bf 8f6f 	isb	sy
 800d1e8:	f3bf 8f4f 	dsb	sy
 800d1ec:	613b      	str	r3, [r7, #16]
}
 800d1ee:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d1f0:	4b15      	ldr	r3, [pc, #84]	@ (800d248 <vTaskStartScheduler+0xcc>)
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	3354      	adds	r3, #84	@ 0x54
 800d1f6:	4a15      	ldr	r2, [pc, #84]	@ (800d24c <vTaskStartScheduler+0xd0>)
 800d1f8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d1fa:	4b15      	ldr	r3, [pc, #84]	@ (800d250 <vTaskStartScheduler+0xd4>)
 800d1fc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d200:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d202:	4b14      	ldr	r3, [pc, #80]	@ (800d254 <vTaskStartScheduler+0xd8>)
 800d204:	2201      	movs	r2, #1
 800d206:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d208:	4b13      	ldr	r3, [pc, #76]	@ (800d258 <vTaskStartScheduler+0xdc>)
 800d20a:	2200      	movs	r2, #0
 800d20c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d20e:	f001 fa07 	bl	800e620 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d212:	e00f      	b.n	800d234 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d214:	697b      	ldr	r3, [r7, #20]
 800d216:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d21a:	d10b      	bne.n	800d234 <vTaskStartScheduler+0xb8>
	__asm volatile
 800d21c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d220:	f383 8811 	msr	BASEPRI, r3
 800d224:	f3bf 8f6f 	isb	sy
 800d228:	f3bf 8f4f 	dsb	sy
 800d22c:	60fb      	str	r3, [r7, #12]
}
 800d22e:	bf00      	nop
 800d230:	bf00      	nop
 800d232:	e7fd      	b.n	800d230 <vTaskStartScheduler+0xb4>
}
 800d234:	bf00      	nop
 800d236:	3718      	adds	r7, #24
 800d238:	46bd      	mov	sp, r7
 800d23a:	bd80      	pop	{r7, pc}
 800d23c:	0801341c 	.word	0x0801341c
 800d240:	0800d8b1 	.word	0x0800d8b1
 800d244:	200012d0 	.word	0x200012d0
 800d248:	20000dd8 	.word	0x20000dd8
 800d24c:	200001b4 	.word	0x200001b4
 800d250:	200012cc 	.word	0x200012cc
 800d254:	200012b8 	.word	0x200012b8
 800d258:	200012b0 	.word	0x200012b0

0800d25c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d25c:	b480      	push	{r7}
 800d25e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d260:	4b04      	ldr	r3, [pc, #16]	@ (800d274 <vTaskSuspendAll+0x18>)
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	3301      	adds	r3, #1
 800d266:	4a03      	ldr	r2, [pc, #12]	@ (800d274 <vTaskSuspendAll+0x18>)
 800d268:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d26a:	bf00      	nop
 800d26c:	46bd      	mov	sp, r7
 800d26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d272:	4770      	bx	lr
 800d274:	200012d4 	.word	0x200012d4

0800d278 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d278:	b580      	push	{r7, lr}
 800d27a:	b084      	sub	sp, #16
 800d27c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d27e:	2300      	movs	r3, #0
 800d280:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d282:	2300      	movs	r3, #0
 800d284:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d286:	4b42      	ldr	r3, [pc, #264]	@ (800d390 <xTaskResumeAll+0x118>)
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d10b      	bne.n	800d2a6 <xTaskResumeAll+0x2e>
	__asm volatile
 800d28e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d292:	f383 8811 	msr	BASEPRI, r3
 800d296:	f3bf 8f6f 	isb	sy
 800d29a:	f3bf 8f4f 	dsb	sy
 800d29e:	603b      	str	r3, [r7, #0]
}
 800d2a0:	bf00      	nop
 800d2a2:	bf00      	nop
 800d2a4:	e7fd      	b.n	800d2a2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d2a6:	f001 fa5f 	bl	800e768 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d2aa:	4b39      	ldr	r3, [pc, #228]	@ (800d390 <xTaskResumeAll+0x118>)
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	3b01      	subs	r3, #1
 800d2b0:	4a37      	ldr	r2, [pc, #220]	@ (800d390 <xTaskResumeAll+0x118>)
 800d2b2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d2b4:	4b36      	ldr	r3, [pc, #216]	@ (800d390 <xTaskResumeAll+0x118>)
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d162      	bne.n	800d382 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d2bc:	4b35      	ldr	r3, [pc, #212]	@ (800d394 <xTaskResumeAll+0x11c>)
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d05e      	beq.n	800d382 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d2c4:	e02f      	b.n	800d326 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d2c6:	4b34      	ldr	r3, [pc, #208]	@ (800d398 <xTaskResumeAll+0x120>)
 800d2c8:	68db      	ldr	r3, [r3, #12]
 800d2ca:	68db      	ldr	r3, [r3, #12]
 800d2cc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	3318      	adds	r3, #24
 800d2d2:	4618      	mov	r0, r3
 800d2d4:	f7fe fd1c 	bl	800bd10 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	3304      	adds	r3, #4
 800d2dc:	4618      	mov	r0, r3
 800d2de:	f7fe fd17 	bl	800bd10 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d2e6:	4b2d      	ldr	r3, [pc, #180]	@ (800d39c <xTaskResumeAll+0x124>)
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	429a      	cmp	r2, r3
 800d2ec:	d903      	bls.n	800d2f6 <xTaskResumeAll+0x7e>
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d2f2:	4a2a      	ldr	r2, [pc, #168]	@ (800d39c <xTaskResumeAll+0x124>)
 800d2f4:	6013      	str	r3, [r2, #0]
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d2fa:	4613      	mov	r3, r2
 800d2fc:	009b      	lsls	r3, r3, #2
 800d2fe:	4413      	add	r3, r2
 800d300:	009b      	lsls	r3, r3, #2
 800d302:	4a27      	ldr	r2, [pc, #156]	@ (800d3a0 <xTaskResumeAll+0x128>)
 800d304:	441a      	add	r2, r3
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	3304      	adds	r3, #4
 800d30a:	4619      	mov	r1, r3
 800d30c:	4610      	mov	r0, r2
 800d30e:	f7fe fca2 	bl	800bc56 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d316:	4b23      	ldr	r3, [pc, #140]	@ (800d3a4 <xTaskResumeAll+0x12c>)
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d31c:	429a      	cmp	r2, r3
 800d31e:	d302      	bcc.n	800d326 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800d320:	4b21      	ldr	r3, [pc, #132]	@ (800d3a8 <xTaskResumeAll+0x130>)
 800d322:	2201      	movs	r2, #1
 800d324:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d326:	4b1c      	ldr	r3, [pc, #112]	@ (800d398 <xTaskResumeAll+0x120>)
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d1cb      	bne.n	800d2c6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	2b00      	cmp	r3, #0
 800d332:	d001      	beq.n	800d338 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d334:	f000 fb78 	bl	800da28 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d338:	4b1c      	ldr	r3, [pc, #112]	@ (800d3ac <xTaskResumeAll+0x134>)
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	2b00      	cmp	r3, #0
 800d342:	d010      	beq.n	800d366 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d344:	f000 f858 	bl	800d3f8 <xTaskIncrementTick>
 800d348:	4603      	mov	r3, r0
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d002      	beq.n	800d354 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800d34e:	4b16      	ldr	r3, [pc, #88]	@ (800d3a8 <xTaskResumeAll+0x130>)
 800d350:	2201      	movs	r2, #1
 800d352:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	3b01      	subs	r3, #1
 800d358:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d1f1      	bne.n	800d344 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800d360:	4b12      	ldr	r3, [pc, #72]	@ (800d3ac <xTaskResumeAll+0x134>)
 800d362:	2200      	movs	r2, #0
 800d364:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d366:	4b10      	ldr	r3, [pc, #64]	@ (800d3a8 <xTaskResumeAll+0x130>)
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d009      	beq.n	800d382 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d36e:	2301      	movs	r3, #1
 800d370:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d372:	4b0f      	ldr	r3, [pc, #60]	@ (800d3b0 <xTaskResumeAll+0x138>)
 800d374:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d378:	601a      	str	r2, [r3, #0]
 800d37a:	f3bf 8f4f 	dsb	sy
 800d37e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d382:	f001 fa23 	bl	800e7cc <vPortExitCritical>

	return xAlreadyYielded;
 800d386:	68bb      	ldr	r3, [r7, #8]
}
 800d388:	4618      	mov	r0, r3
 800d38a:	3710      	adds	r7, #16
 800d38c:	46bd      	mov	sp, r7
 800d38e:	bd80      	pop	{r7, pc}
 800d390:	200012d4 	.word	0x200012d4
 800d394:	200012ac 	.word	0x200012ac
 800d398:	2000126c 	.word	0x2000126c
 800d39c:	200012b4 	.word	0x200012b4
 800d3a0:	20000ddc 	.word	0x20000ddc
 800d3a4:	20000dd8 	.word	0x20000dd8
 800d3a8:	200012c0 	.word	0x200012c0
 800d3ac:	200012bc 	.word	0x200012bc
 800d3b0:	e000ed04 	.word	0xe000ed04

0800d3b4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d3b4:	b480      	push	{r7}
 800d3b6:	b083      	sub	sp, #12
 800d3b8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d3ba:	4b05      	ldr	r3, [pc, #20]	@ (800d3d0 <xTaskGetTickCount+0x1c>)
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d3c0:	687b      	ldr	r3, [r7, #4]
}
 800d3c2:	4618      	mov	r0, r3
 800d3c4:	370c      	adds	r7, #12
 800d3c6:	46bd      	mov	sp, r7
 800d3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3cc:	4770      	bx	lr
 800d3ce:	bf00      	nop
 800d3d0:	200012b0 	.word	0x200012b0

0800d3d4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800d3d4:	b580      	push	{r7, lr}
 800d3d6:	b082      	sub	sp, #8
 800d3d8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d3da:	f001 faa5 	bl	800e928 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800d3de:	2300      	movs	r3, #0
 800d3e0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800d3e2:	4b04      	ldr	r3, [pc, #16]	@ (800d3f4 <xTaskGetTickCountFromISR+0x20>)
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d3e8:	683b      	ldr	r3, [r7, #0]
}
 800d3ea:	4618      	mov	r0, r3
 800d3ec:	3708      	adds	r7, #8
 800d3ee:	46bd      	mov	sp, r7
 800d3f0:	bd80      	pop	{r7, pc}
 800d3f2:	bf00      	nop
 800d3f4:	200012b0 	.word	0x200012b0

0800d3f8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d3f8:	b580      	push	{r7, lr}
 800d3fa:	b086      	sub	sp, #24
 800d3fc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d3fe:	2300      	movs	r3, #0
 800d400:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d402:	4b4f      	ldr	r3, [pc, #316]	@ (800d540 <xTaskIncrementTick+0x148>)
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	2b00      	cmp	r3, #0
 800d408:	f040 8090 	bne.w	800d52c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d40c:	4b4d      	ldr	r3, [pc, #308]	@ (800d544 <xTaskIncrementTick+0x14c>)
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	3301      	adds	r3, #1
 800d412:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d414:	4a4b      	ldr	r2, [pc, #300]	@ (800d544 <xTaskIncrementTick+0x14c>)
 800d416:	693b      	ldr	r3, [r7, #16]
 800d418:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d41a:	693b      	ldr	r3, [r7, #16]
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d121      	bne.n	800d464 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800d420:	4b49      	ldr	r3, [pc, #292]	@ (800d548 <xTaskIncrementTick+0x150>)
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	2b00      	cmp	r3, #0
 800d428:	d00b      	beq.n	800d442 <xTaskIncrementTick+0x4a>
	__asm volatile
 800d42a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d42e:	f383 8811 	msr	BASEPRI, r3
 800d432:	f3bf 8f6f 	isb	sy
 800d436:	f3bf 8f4f 	dsb	sy
 800d43a:	603b      	str	r3, [r7, #0]
}
 800d43c:	bf00      	nop
 800d43e:	bf00      	nop
 800d440:	e7fd      	b.n	800d43e <xTaskIncrementTick+0x46>
 800d442:	4b41      	ldr	r3, [pc, #260]	@ (800d548 <xTaskIncrementTick+0x150>)
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	60fb      	str	r3, [r7, #12]
 800d448:	4b40      	ldr	r3, [pc, #256]	@ (800d54c <xTaskIncrementTick+0x154>)
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	4a3e      	ldr	r2, [pc, #248]	@ (800d548 <xTaskIncrementTick+0x150>)
 800d44e:	6013      	str	r3, [r2, #0]
 800d450:	4a3e      	ldr	r2, [pc, #248]	@ (800d54c <xTaskIncrementTick+0x154>)
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	6013      	str	r3, [r2, #0]
 800d456:	4b3e      	ldr	r3, [pc, #248]	@ (800d550 <xTaskIncrementTick+0x158>)
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	3301      	adds	r3, #1
 800d45c:	4a3c      	ldr	r2, [pc, #240]	@ (800d550 <xTaskIncrementTick+0x158>)
 800d45e:	6013      	str	r3, [r2, #0]
 800d460:	f000 fae2 	bl	800da28 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d464:	4b3b      	ldr	r3, [pc, #236]	@ (800d554 <xTaskIncrementTick+0x15c>)
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	693a      	ldr	r2, [r7, #16]
 800d46a:	429a      	cmp	r2, r3
 800d46c:	d349      	bcc.n	800d502 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d46e:	4b36      	ldr	r3, [pc, #216]	@ (800d548 <xTaskIncrementTick+0x150>)
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	2b00      	cmp	r3, #0
 800d476:	d104      	bne.n	800d482 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d478:	4b36      	ldr	r3, [pc, #216]	@ (800d554 <xTaskIncrementTick+0x15c>)
 800d47a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d47e:	601a      	str	r2, [r3, #0]
					break;
 800d480:	e03f      	b.n	800d502 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d482:	4b31      	ldr	r3, [pc, #196]	@ (800d548 <xTaskIncrementTick+0x150>)
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	68db      	ldr	r3, [r3, #12]
 800d488:	68db      	ldr	r3, [r3, #12]
 800d48a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d48c:	68bb      	ldr	r3, [r7, #8]
 800d48e:	685b      	ldr	r3, [r3, #4]
 800d490:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d492:	693a      	ldr	r2, [r7, #16]
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	429a      	cmp	r2, r3
 800d498:	d203      	bcs.n	800d4a2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d49a:	4a2e      	ldr	r2, [pc, #184]	@ (800d554 <xTaskIncrementTick+0x15c>)
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d4a0:	e02f      	b.n	800d502 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d4a2:	68bb      	ldr	r3, [r7, #8]
 800d4a4:	3304      	adds	r3, #4
 800d4a6:	4618      	mov	r0, r3
 800d4a8:	f7fe fc32 	bl	800bd10 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d4ac:	68bb      	ldr	r3, [r7, #8]
 800d4ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d004      	beq.n	800d4be <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d4b4:	68bb      	ldr	r3, [r7, #8]
 800d4b6:	3318      	adds	r3, #24
 800d4b8:	4618      	mov	r0, r3
 800d4ba:	f7fe fc29 	bl	800bd10 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d4be:	68bb      	ldr	r3, [r7, #8]
 800d4c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d4c2:	4b25      	ldr	r3, [pc, #148]	@ (800d558 <xTaskIncrementTick+0x160>)
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	429a      	cmp	r2, r3
 800d4c8:	d903      	bls.n	800d4d2 <xTaskIncrementTick+0xda>
 800d4ca:	68bb      	ldr	r3, [r7, #8]
 800d4cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d4ce:	4a22      	ldr	r2, [pc, #136]	@ (800d558 <xTaskIncrementTick+0x160>)
 800d4d0:	6013      	str	r3, [r2, #0]
 800d4d2:	68bb      	ldr	r3, [r7, #8]
 800d4d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d4d6:	4613      	mov	r3, r2
 800d4d8:	009b      	lsls	r3, r3, #2
 800d4da:	4413      	add	r3, r2
 800d4dc:	009b      	lsls	r3, r3, #2
 800d4de:	4a1f      	ldr	r2, [pc, #124]	@ (800d55c <xTaskIncrementTick+0x164>)
 800d4e0:	441a      	add	r2, r3
 800d4e2:	68bb      	ldr	r3, [r7, #8]
 800d4e4:	3304      	adds	r3, #4
 800d4e6:	4619      	mov	r1, r3
 800d4e8:	4610      	mov	r0, r2
 800d4ea:	f7fe fbb4 	bl	800bc56 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d4ee:	68bb      	ldr	r3, [r7, #8]
 800d4f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d4f2:	4b1b      	ldr	r3, [pc, #108]	@ (800d560 <xTaskIncrementTick+0x168>)
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d4f8:	429a      	cmp	r2, r3
 800d4fa:	d3b8      	bcc.n	800d46e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800d4fc:	2301      	movs	r3, #1
 800d4fe:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d500:	e7b5      	b.n	800d46e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d502:	4b17      	ldr	r3, [pc, #92]	@ (800d560 <xTaskIncrementTick+0x168>)
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d508:	4914      	ldr	r1, [pc, #80]	@ (800d55c <xTaskIncrementTick+0x164>)
 800d50a:	4613      	mov	r3, r2
 800d50c:	009b      	lsls	r3, r3, #2
 800d50e:	4413      	add	r3, r2
 800d510:	009b      	lsls	r3, r3, #2
 800d512:	440b      	add	r3, r1
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	2b01      	cmp	r3, #1
 800d518:	d901      	bls.n	800d51e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800d51a:	2301      	movs	r3, #1
 800d51c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d51e:	4b11      	ldr	r3, [pc, #68]	@ (800d564 <xTaskIncrementTick+0x16c>)
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	2b00      	cmp	r3, #0
 800d524:	d007      	beq.n	800d536 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800d526:	2301      	movs	r3, #1
 800d528:	617b      	str	r3, [r7, #20]
 800d52a:	e004      	b.n	800d536 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d52c:	4b0e      	ldr	r3, [pc, #56]	@ (800d568 <xTaskIncrementTick+0x170>)
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	3301      	adds	r3, #1
 800d532:	4a0d      	ldr	r2, [pc, #52]	@ (800d568 <xTaskIncrementTick+0x170>)
 800d534:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d536:	697b      	ldr	r3, [r7, #20]
}
 800d538:	4618      	mov	r0, r3
 800d53a:	3718      	adds	r7, #24
 800d53c:	46bd      	mov	sp, r7
 800d53e:	bd80      	pop	{r7, pc}
 800d540:	200012d4 	.word	0x200012d4
 800d544:	200012b0 	.word	0x200012b0
 800d548:	20001264 	.word	0x20001264
 800d54c:	20001268 	.word	0x20001268
 800d550:	200012c4 	.word	0x200012c4
 800d554:	200012cc 	.word	0x200012cc
 800d558:	200012b4 	.word	0x200012b4
 800d55c:	20000ddc 	.word	0x20000ddc
 800d560:	20000dd8 	.word	0x20000dd8
 800d564:	200012c0 	.word	0x200012c0
 800d568:	200012bc 	.word	0x200012bc

0800d56c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d56c:	b480      	push	{r7}
 800d56e:	b085      	sub	sp, #20
 800d570:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d572:	4b2b      	ldr	r3, [pc, #172]	@ (800d620 <vTaskSwitchContext+0xb4>)
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	2b00      	cmp	r3, #0
 800d578:	d003      	beq.n	800d582 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d57a:	4b2a      	ldr	r3, [pc, #168]	@ (800d624 <vTaskSwitchContext+0xb8>)
 800d57c:	2201      	movs	r2, #1
 800d57e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d580:	e047      	b.n	800d612 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800d582:	4b28      	ldr	r3, [pc, #160]	@ (800d624 <vTaskSwitchContext+0xb8>)
 800d584:	2200      	movs	r2, #0
 800d586:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d588:	4b27      	ldr	r3, [pc, #156]	@ (800d628 <vTaskSwitchContext+0xbc>)
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	60fb      	str	r3, [r7, #12]
 800d58e:	e011      	b.n	800d5b4 <vTaskSwitchContext+0x48>
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	2b00      	cmp	r3, #0
 800d594:	d10b      	bne.n	800d5ae <vTaskSwitchContext+0x42>
	__asm volatile
 800d596:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d59a:	f383 8811 	msr	BASEPRI, r3
 800d59e:	f3bf 8f6f 	isb	sy
 800d5a2:	f3bf 8f4f 	dsb	sy
 800d5a6:	607b      	str	r3, [r7, #4]
}
 800d5a8:	bf00      	nop
 800d5aa:	bf00      	nop
 800d5ac:	e7fd      	b.n	800d5aa <vTaskSwitchContext+0x3e>
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	3b01      	subs	r3, #1
 800d5b2:	60fb      	str	r3, [r7, #12]
 800d5b4:	491d      	ldr	r1, [pc, #116]	@ (800d62c <vTaskSwitchContext+0xc0>)
 800d5b6:	68fa      	ldr	r2, [r7, #12]
 800d5b8:	4613      	mov	r3, r2
 800d5ba:	009b      	lsls	r3, r3, #2
 800d5bc:	4413      	add	r3, r2
 800d5be:	009b      	lsls	r3, r3, #2
 800d5c0:	440b      	add	r3, r1
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d0e3      	beq.n	800d590 <vTaskSwitchContext+0x24>
 800d5c8:	68fa      	ldr	r2, [r7, #12]
 800d5ca:	4613      	mov	r3, r2
 800d5cc:	009b      	lsls	r3, r3, #2
 800d5ce:	4413      	add	r3, r2
 800d5d0:	009b      	lsls	r3, r3, #2
 800d5d2:	4a16      	ldr	r2, [pc, #88]	@ (800d62c <vTaskSwitchContext+0xc0>)
 800d5d4:	4413      	add	r3, r2
 800d5d6:	60bb      	str	r3, [r7, #8]
 800d5d8:	68bb      	ldr	r3, [r7, #8]
 800d5da:	685b      	ldr	r3, [r3, #4]
 800d5dc:	685a      	ldr	r2, [r3, #4]
 800d5de:	68bb      	ldr	r3, [r7, #8]
 800d5e0:	605a      	str	r2, [r3, #4]
 800d5e2:	68bb      	ldr	r3, [r7, #8]
 800d5e4:	685a      	ldr	r2, [r3, #4]
 800d5e6:	68bb      	ldr	r3, [r7, #8]
 800d5e8:	3308      	adds	r3, #8
 800d5ea:	429a      	cmp	r2, r3
 800d5ec:	d104      	bne.n	800d5f8 <vTaskSwitchContext+0x8c>
 800d5ee:	68bb      	ldr	r3, [r7, #8]
 800d5f0:	685b      	ldr	r3, [r3, #4]
 800d5f2:	685a      	ldr	r2, [r3, #4]
 800d5f4:	68bb      	ldr	r3, [r7, #8]
 800d5f6:	605a      	str	r2, [r3, #4]
 800d5f8:	68bb      	ldr	r3, [r7, #8]
 800d5fa:	685b      	ldr	r3, [r3, #4]
 800d5fc:	68db      	ldr	r3, [r3, #12]
 800d5fe:	4a0c      	ldr	r2, [pc, #48]	@ (800d630 <vTaskSwitchContext+0xc4>)
 800d600:	6013      	str	r3, [r2, #0]
 800d602:	4a09      	ldr	r2, [pc, #36]	@ (800d628 <vTaskSwitchContext+0xbc>)
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d608:	4b09      	ldr	r3, [pc, #36]	@ (800d630 <vTaskSwitchContext+0xc4>)
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	3354      	adds	r3, #84	@ 0x54
 800d60e:	4a09      	ldr	r2, [pc, #36]	@ (800d634 <vTaskSwitchContext+0xc8>)
 800d610:	6013      	str	r3, [r2, #0]
}
 800d612:	bf00      	nop
 800d614:	3714      	adds	r7, #20
 800d616:	46bd      	mov	sp, r7
 800d618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d61c:	4770      	bx	lr
 800d61e:	bf00      	nop
 800d620:	200012d4 	.word	0x200012d4
 800d624:	200012c0 	.word	0x200012c0
 800d628:	200012b4 	.word	0x200012b4
 800d62c:	20000ddc 	.word	0x20000ddc
 800d630:	20000dd8 	.word	0x20000dd8
 800d634:	200001b4 	.word	0x200001b4

0800d638 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d638:	b580      	push	{r7, lr}
 800d63a:	b084      	sub	sp, #16
 800d63c:	af00      	add	r7, sp, #0
 800d63e:	6078      	str	r0, [r7, #4]
 800d640:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	2b00      	cmp	r3, #0
 800d646:	d10b      	bne.n	800d660 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800d648:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d64c:	f383 8811 	msr	BASEPRI, r3
 800d650:	f3bf 8f6f 	isb	sy
 800d654:	f3bf 8f4f 	dsb	sy
 800d658:	60fb      	str	r3, [r7, #12]
}
 800d65a:	bf00      	nop
 800d65c:	bf00      	nop
 800d65e:	e7fd      	b.n	800d65c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d660:	4b07      	ldr	r3, [pc, #28]	@ (800d680 <vTaskPlaceOnEventList+0x48>)
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	3318      	adds	r3, #24
 800d666:	4619      	mov	r1, r3
 800d668:	6878      	ldr	r0, [r7, #4]
 800d66a:	f7fe fb18 	bl	800bc9e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d66e:	2101      	movs	r1, #1
 800d670:	6838      	ldr	r0, [r7, #0]
 800d672:	f000 fb97 	bl	800dda4 <prvAddCurrentTaskToDelayedList>
}
 800d676:	bf00      	nop
 800d678:	3710      	adds	r7, #16
 800d67a:	46bd      	mov	sp, r7
 800d67c:	bd80      	pop	{r7, pc}
 800d67e:	bf00      	nop
 800d680:	20000dd8 	.word	0x20000dd8

0800d684 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d684:	b580      	push	{r7, lr}
 800d686:	b086      	sub	sp, #24
 800d688:	af00      	add	r7, sp, #0
 800d68a:	60f8      	str	r0, [r7, #12]
 800d68c:	60b9      	str	r1, [r7, #8]
 800d68e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	2b00      	cmp	r3, #0
 800d694:	d10b      	bne.n	800d6ae <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800d696:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d69a:	f383 8811 	msr	BASEPRI, r3
 800d69e:	f3bf 8f6f 	isb	sy
 800d6a2:	f3bf 8f4f 	dsb	sy
 800d6a6:	617b      	str	r3, [r7, #20]
}
 800d6a8:	bf00      	nop
 800d6aa:	bf00      	nop
 800d6ac:	e7fd      	b.n	800d6aa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d6ae:	4b0a      	ldr	r3, [pc, #40]	@ (800d6d8 <vTaskPlaceOnEventListRestricted+0x54>)
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	3318      	adds	r3, #24
 800d6b4:	4619      	mov	r1, r3
 800d6b6:	68f8      	ldr	r0, [r7, #12]
 800d6b8:	f7fe facd 	bl	800bc56 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d002      	beq.n	800d6c8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800d6c2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d6c6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d6c8:	6879      	ldr	r1, [r7, #4]
 800d6ca:	68b8      	ldr	r0, [r7, #8]
 800d6cc:	f000 fb6a 	bl	800dda4 <prvAddCurrentTaskToDelayedList>
	}
 800d6d0:	bf00      	nop
 800d6d2:	3718      	adds	r7, #24
 800d6d4:	46bd      	mov	sp, r7
 800d6d6:	bd80      	pop	{r7, pc}
 800d6d8:	20000dd8 	.word	0x20000dd8

0800d6dc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d6dc:	b580      	push	{r7, lr}
 800d6de:	b086      	sub	sp, #24
 800d6e0:	af00      	add	r7, sp, #0
 800d6e2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	68db      	ldr	r3, [r3, #12]
 800d6e8:	68db      	ldr	r3, [r3, #12]
 800d6ea:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d6ec:	693b      	ldr	r3, [r7, #16]
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d10b      	bne.n	800d70a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800d6f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6f6:	f383 8811 	msr	BASEPRI, r3
 800d6fa:	f3bf 8f6f 	isb	sy
 800d6fe:	f3bf 8f4f 	dsb	sy
 800d702:	60fb      	str	r3, [r7, #12]
}
 800d704:	bf00      	nop
 800d706:	bf00      	nop
 800d708:	e7fd      	b.n	800d706 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d70a:	693b      	ldr	r3, [r7, #16]
 800d70c:	3318      	adds	r3, #24
 800d70e:	4618      	mov	r0, r3
 800d710:	f7fe fafe 	bl	800bd10 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d714:	4b1d      	ldr	r3, [pc, #116]	@ (800d78c <xTaskRemoveFromEventList+0xb0>)
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d11d      	bne.n	800d758 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d71c:	693b      	ldr	r3, [r7, #16]
 800d71e:	3304      	adds	r3, #4
 800d720:	4618      	mov	r0, r3
 800d722:	f7fe faf5 	bl	800bd10 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d726:	693b      	ldr	r3, [r7, #16]
 800d728:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d72a:	4b19      	ldr	r3, [pc, #100]	@ (800d790 <xTaskRemoveFromEventList+0xb4>)
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	429a      	cmp	r2, r3
 800d730:	d903      	bls.n	800d73a <xTaskRemoveFromEventList+0x5e>
 800d732:	693b      	ldr	r3, [r7, #16]
 800d734:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d736:	4a16      	ldr	r2, [pc, #88]	@ (800d790 <xTaskRemoveFromEventList+0xb4>)
 800d738:	6013      	str	r3, [r2, #0]
 800d73a:	693b      	ldr	r3, [r7, #16]
 800d73c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d73e:	4613      	mov	r3, r2
 800d740:	009b      	lsls	r3, r3, #2
 800d742:	4413      	add	r3, r2
 800d744:	009b      	lsls	r3, r3, #2
 800d746:	4a13      	ldr	r2, [pc, #76]	@ (800d794 <xTaskRemoveFromEventList+0xb8>)
 800d748:	441a      	add	r2, r3
 800d74a:	693b      	ldr	r3, [r7, #16]
 800d74c:	3304      	adds	r3, #4
 800d74e:	4619      	mov	r1, r3
 800d750:	4610      	mov	r0, r2
 800d752:	f7fe fa80 	bl	800bc56 <vListInsertEnd>
 800d756:	e005      	b.n	800d764 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d758:	693b      	ldr	r3, [r7, #16]
 800d75a:	3318      	adds	r3, #24
 800d75c:	4619      	mov	r1, r3
 800d75e:	480e      	ldr	r0, [pc, #56]	@ (800d798 <xTaskRemoveFromEventList+0xbc>)
 800d760:	f7fe fa79 	bl	800bc56 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d764:	693b      	ldr	r3, [r7, #16]
 800d766:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d768:	4b0c      	ldr	r3, [pc, #48]	@ (800d79c <xTaskRemoveFromEventList+0xc0>)
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d76e:	429a      	cmp	r2, r3
 800d770:	d905      	bls.n	800d77e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d772:	2301      	movs	r3, #1
 800d774:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d776:	4b0a      	ldr	r3, [pc, #40]	@ (800d7a0 <xTaskRemoveFromEventList+0xc4>)
 800d778:	2201      	movs	r2, #1
 800d77a:	601a      	str	r2, [r3, #0]
 800d77c:	e001      	b.n	800d782 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800d77e:	2300      	movs	r3, #0
 800d780:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d782:	697b      	ldr	r3, [r7, #20]
}
 800d784:	4618      	mov	r0, r3
 800d786:	3718      	adds	r7, #24
 800d788:	46bd      	mov	sp, r7
 800d78a:	bd80      	pop	{r7, pc}
 800d78c:	200012d4 	.word	0x200012d4
 800d790:	200012b4 	.word	0x200012b4
 800d794:	20000ddc 	.word	0x20000ddc
 800d798:	2000126c 	.word	0x2000126c
 800d79c:	20000dd8 	.word	0x20000dd8
 800d7a0:	200012c0 	.word	0x200012c0

0800d7a4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d7a4:	b480      	push	{r7}
 800d7a6:	b083      	sub	sp, #12
 800d7a8:	af00      	add	r7, sp, #0
 800d7aa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d7ac:	4b06      	ldr	r3, [pc, #24]	@ (800d7c8 <vTaskInternalSetTimeOutState+0x24>)
 800d7ae:	681a      	ldr	r2, [r3, #0]
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d7b4:	4b05      	ldr	r3, [pc, #20]	@ (800d7cc <vTaskInternalSetTimeOutState+0x28>)
 800d7b6:	681a      	ldr	r2, [r3, #0]
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	605a      	str	r2, [r3, #4]
}
 800d7bc:	bf00      	nop
 800d7be:	370c      	adds	r7, #12
 800d7c0:	46bd      	mov	sp, r7
 800d7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c6:	4770      	bx	lr
 800d7c8:	200012c4 	.word	0x200012c4
 800d7cc:	200012b0 	.word	0x200012b0

0800d7d0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d7d0:	b580      	push	{r7, lr}
 800d7d2:	b088      	sub	sp, #32
 800d7d4:	af00      	add	r7, sp, #0
 800d7d6:	6078      	str	r0, [r7, #4]
 800d7d8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d10b      	bne.n	800d7f8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800d7e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7e4:	f383 8811 	msr	BASEPRI, r3
 800d7e8:	f3bf 8f6f 	isb	sy
 800d7ec:	f3bf 8f4f 	dsb	sy
 800d7f0:	613b      	str	r3, [r7, #16]
}
 800d7f2:	bf00      	nop
 800d7f4:	bf00      	nop
 800d7f6:	e7fd      	b.n	800d7f4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d7f8:	683b      	ldr	r3, [r7, #0]
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d10b      	bne.n	800d816 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800d7fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d802:	f383 8811 	msr	BASEPRI, r3
 800d806:	f3bf 8f6f 	isb	sy
 800d80a:	f3bf 8f4f 	dsb	sy
 800d80e:	60fb      	str	r3, [r7, #12]
}
 800d810:	bf00      	nop
 800d812:	bf00      	nop
 800d814:	e7fd      	b.n	800d812 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800d816:	f000 ffa7 	bl	800e768 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d81a:	4b1d      	ldr	r3, [pc, #116]	@ (800d890 <xTaskCheckForTimeOut+0xc0>)
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	685b      	ldr	r3, [r3, #4]
 800d824:	69ba      	ldr	r2, [r7, #24]
 800d826:	1ad3      	subs	r3, r2, r3
 800d828:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d82a:	683b      	ldr	r3, [r7, #0]
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d832:	d102      	bne.n	800d83a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d834:	2300      	movs	r3, #0
 800d836:	61fb      	str	r3, [r7, #28]
 800d838:	e023      	b.n	800d882 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	681a      	ldr	r2, [r3, #0]
 800d83e:	4b15      	ldr	r3, [pc, #84]	@ (800d894 <xTaskCheckForTimeOut+0xc4>)
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	429a      	cmp	r2, r3
 800d844:	d007      	beq.n	800d856 <xTaskCheckForTimeOut+0x86>
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	685b      	ldr	r3, [r3, #4]
 800d84a:	69ba      	ldr	r2, [r7, #24]
 800d84c:	429a      	cmp	r2, r3
 800d84e:	d302      	bcc.n	800d856 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d850:	2301      	movs	r3, #1
 800d852:	61fb      	str	r3, [r7, #28]
 800d854:	e015      	b.n	800d882 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d856:	683b      	ldr	r3, [r7, #0]
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	697a      	ldr	r2, [r7, #20]
 800d85c:	429a      	cmp	r2, r3
 800d85e:	d20b      	bcs.n	800d878 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d860:	683b      	ldr	r3, [r7, #0]
 800d862:	681a      	ldr	r2, [r3, #0]
 800d864:	697b      	ldr	r3, [r7, #20]
 800d866:	1ad2      	subs	r2, r2, r3
 800d868:	683b      	ldr	r3, [r7, #0]
 800d86a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d86c:	6878      	ldr	r0, [r7, #4]
 800d86e:	f7ff ff99 	bl	800d7a4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d872:	2300      	movs	r3, #0
 800d874:	61fb      	str	r3, [r7, #28]
 800d876:	e004      	b.n	800d882 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800d878:	683b      	ldr	r3, [r7, #0]
 800d87a:	2200      	movs	r2, #0
 800d87c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d87e:	2301      	movs	r3, #1
 800d880:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d882:	f000 ffa3 	bl	800e7cc <vPortExitCritical>

	return xReturn;
 800d886:	69fb      	ldr	r3, [r7, #28]
}
 800d888:	4618      	mov	r0, r3
 800d88a:	3720      	adds	r7, #32
 800d88c:	46bd      	mov	sp, r7
 800d88e:	bd80      	pop	{r7, pc}
 800d890:	200012b0 	.word	0x200012b0
 800d894:	200012c4 	.word	0x200012c4

0800d898 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d898:	b480      	push	{r7}
 800d89a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d89c:	4b03      	ldr	r3, [pc, #12]	@ (800d8ac <vTaskMissedYield+0x14>)
 800d89e:	2201      	movs	r2, #1
 800d8a0:	601a      	str	r2, [r3, #0]
}
 800d8a2:	bf00      	nop
 800d8a4:	46bd      	mov	sp, r7
 800d8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8aa:	4770      	bx	lr
 800d8ac:	200012c0 	.word	0x200012c0

0800d8b0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d8b0:	b580      	push	{r7, lr}
 800d8b2:	b082      	sub	sp, #8
 800d8b4:	af00      	add	r7, sp, #0
 800d8b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d8b8:	f000 f852 	bl	800d960 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d8bc:	4b06      	ldr	r3, [pc, #24]	@ (800d8d8 <prvIdleTask+0x28>)
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	2b01      	cmp	r3, #1
 800d8c2:	d9f9      	bls.n	800d8b8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d8c4:	4b05      	ldr	r3, [pc, #20]	@ (800d8dc <prvIdleTask+0x2c>)
 800d8c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d8ca:	601a      	str	r2, [r3, #0]
 800d8cc:	f3bf 8f4f 	dsb	sy
 800d8d0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d8d4:	e7f0      	b.n	800d8b8 <prvIdleTask+0x8>
 800d8d6:	bf00      	nop
 800d8d8:	20000ddc 	.word	0x20000ddc
 800d8dc:	e000ed04 	.word	0xe000ed04

0800d8e0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d8e0:	b580      	push	{r7, lr}
 800d8e2:	b082      	sub	sp, #8
 800d8e4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d8e6:	2300      	movs	r3, #0
 800d8e8:	607b      	str	r3, [r7, #4]
 800d8ea:	e00c      	b.n	800d906 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d8ec:	687a      	ldr	r2, [r7, #4]
 800d8ee:	4613      	mov	r3, r2
 800d8f0:	009b      	lsls	r3, r3, #2
 800d8f2:	4413      	add	r3, r2
 800d8f4:	009b      	lsls	r3, r3, #2
 800d8f6:	4a12      	ldr	r2, [pc, #72]	@ (800d940 <prvInitialiseTaskLists+0x60>)
 800d8f8:	4413      	add	r3, r2
 800d8fa:	4618      	mov	r0, r3
 800d8fc:	f7fe f97e 	bl	800bbfc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	3301      	adds	r3, #1
 800d904:	607b      	str	r3, [r7, #4]
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	2b37      	cmp	r3, #55	@ 0x37
 800d90a:	d9ef      	bls.n	800d8ec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d90c:	480d      	ldr	r0, [pc, #52]	@ (800d944 <prvInitialiseTaskLists+0x64>)
 800d90e:	f7fe f975 	bl	800bbfc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d912:	480d      	ldr	r0, [pc, #52]	@ (800d948 <prvInitialiseTaskLists+0x68>)
 800d914:	f7fe f972 	bl	800bbfc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d918:	480c      	ldr	r0, [pc, #48]	@ (800d94c <prvInitialiseTaskLists+0x6c>)
 800d91a:	f7fe f96f 	bl	800bbfc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d91e:	480c      	ldr	r0, [pc, #48]	@ (800d950 <prvInitialiseTaskLists+0x70>)
 800d920:	f7fe f96c 	bl	800bbfc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d924:	480b      	ldr	r0, [pc, #44]	@ (800d954 <prvInitialiseTaskLists+0x74>)
 800d926:	f7fe f969 	bl	800bbfc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d92a:	4b0b      	ldr	r3, [pc, #44]	@ (800d958 <prvInitialiseTaskLists+0x78>)
 800d92c:	4a05      	ldr	r2, [pc, #20]	@ (800d944 <prvInitialiseTaskLists+0x64>)
 800d92e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d930:	4b0a      	ldr	r3, [pc, #40]	@ (800d95c <prvInitialiseTaskLists+0x7c>)
 800d932:	4a05      	ldr	r2, [pc, #20]	@ (800d948 <prvInitialiseTaskLists+0x68>)
 800d934:	601a      	str	r2, [r3, #0]
}
 800d936:	bf00      	nop
 800d938:	3708      	adds	r7, #8
 800d93a:	46bd      	mov	sp, r7
 800d93c:	bd80      	pop	{r7, pc}
 800d93e:	bf00      	nop
 800d940:	20000ddc 	.word	0x20000ddc
 800d944:	2000123c 	.word	0x2000123c
 800d948:	20001250 	.word	0x20001250
 800d94c:	2000126c 	.word	0x2000126c
 800d950:	20001280 	.word	0x20001280
 800d954:	20001298 	.word	0x20001298
 800d958:	20001264 	.word	0x20001264
 800d95c:	20001268 	.word	0x20001268

0800d960 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d960:	b580      	push	{r7, lr}
 800d962:	b082      	sub	sp, #8
 800d964:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d966:	e019      	b.n	800d99c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d968:	f000 fefe 	bl	800e768 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d96c:	4b10      	ldr	r3, [pc, #64]	@ (800d9b0 <prvCheckTasksWaitingTermination+0x50>)
 800d96e:	68db      	ldr	r3, [r3, #12]
 800d970:	68db      	ldr	r3, [r3, #12]
 800d972:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	3304      	adds	r3, #4
 800d978:	4618      	mov	r0, r3
 800d97a:	f7fe f9c9 	bl	800bd10 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d97e:	4b0d      	ldr	r3, [pc, #52]	@ (800d9b4 <prvCheckTasksWaitingTermination+0x54>)
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	3b01      	subs	r3, #1
 800d984:	4a0b      	ldr	r2, [pc, #44]	@ (800d9b4 <prvCheckTasksWaitingTermination+0x54>)
 800d986:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d988:	4b0b      	ldr	r3, [pc, #44]	@ (800d9b8 <prvCheckTasksWaitingTermination+0x58>)
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	3b01      	subs	r3, #1
 800d98e:	4a0a      	ldr	r2, [pc, #40]	@ (800d9b8 <prvCheckTasksWaitingTermination+0x58>)
 800d990:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d992:	f000 ff1b 	bl	800e7cc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d996:	6878      	ldr	r0, [r7, #4]
 800d998:	f000 f810 	bl	800d9bc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d99c:	4b06      	ldr	r3, [pc, #24]	@ (800d9b8 <prvCheckTasksWaitingTermination+0x58>)
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d1e1      	bne.n	800d968 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d9a4:	bf00      	nop
 800d9a6:	bf00      	nop
 800d9a8:	3708      	adds	r7, #8
 800d9aa:	46bd      	mov	sp, r7
 800d9ac:	bd80      	pop	{r7, pc}
 800d9ae:	bf00      	nop
 800d9b0:	20001280 	.word	0x20001280
 800d9b4:	200012ac 	.word	0x200012ac
 800d9b8:	20001294 	.word	0x20001294

0800d9bc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d9bc:	b580      	push	{r7, lr}
 800d9be:	b084      	sub	sp, #16
 800d9c0:	af00      	add	r7, sp, #0
 800d9c2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	3354      	adds	r3, #84	@ 0x54
 800d9c8:	4618      	mov	r0, r3
 800d9ca:	f002 fc47 	bl	801025c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d108      	bne.n	800d9ea <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d9dc:	4618      	mov	r0, r3
 800d9de:	f001 f8b3 	bl	800eb48 <vPortFree>
				vPortFree( pxTCB );
 800d9e2:	6878      	ldr	r0, [r7, #4]
 800d9e4:	f001 f8b0 	bl	800eb48 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d9e8:	e019      	b.n	800da1e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800d9f0:	2b01      	cmp	r3, #1
 800d9f2:	d103      	bne.n	800d9fc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800d9f4:	6878      	ldr	r0, [r7, #4]
 800d9f6:	f001 f8a7 	bl	800eb48 <vPortFree>
	}
 800d9fa:	e010      	b.n	800da1e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800da02:	2b02      	cmp	r3, #2
 800da04:	d00b      	beq.n	800da1e <prvDeleteTCB+0x62>
	__asm volatile
 800da06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da0a:	f383 8811 	msr	BASEPRI, r3
 800da0e:	f3bf 8f6f 	isb	sy
 800da12:	f3bf 8f4f 	dsb	sy
 800da16:	60fb      	str	r3, [r7, #12]
}
 800da18:	bf00      	nop
 800da1a:	bf00      	nop
 800da1c:	e7fd      	b.n	800da1a <prvDeleteTCB+0x5e>
	}
 800da1e:	bf00      	nop
 800da20:	3710      	adds	r7, #16
 800da22:	46bd      	mov	sp, r7
 800da24:	bd80      	pop	{r7, pc}
	...

0800da28 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800da28:	b480      	push	{r7}
 800da2a:	b083      	sub	sp, #12
 800da2c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800da2e:	4b0c      	ldr	r3, [pc, #48]	@ (800da60 <prvResetNextTaskUnblockTime+0x38>)
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	2b00      	cmp	r3, #0
 800da36:	d104      	bne.n	800da42 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800da38:	4b0a      	ldr	r3, [pc, #40]	@ (800da64 <prvResetNextTaskUnblockTime+0x3c>)
 800da3a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800da3e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800da40:	e008      	b.n	800da54 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800da42:	4b07      	ldr	r3, [pc, #28]	@ (800da60 <prvResetNextTaskUnblockTime+0x38>)
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	68db      	ldr	r3, [r3, #12]
 800da48:	68db      	ldr	r3, [r3, #12]
 800da4a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	685b      	ldr	r3, [r3, #4]
 800da50:	4a04      	ldr	r2, [pc, #16]	@ (800da64 <prvResetNextTaskUnblockTime+0x3c>)
 800da52:	6013      	str	r3, [r2, #0]
}
 800da54:	bf00      	nop
 800da56:	370c      	adds	r7, #12
 800da58:	46bd      	mov	sp, r7
 800da5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da5e:	4770      	bx	lr
 800da60:	20001264 	.word	0x20001264
 800da64:	200012cc 	.word	0x200012cc

0800da68 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800da68:	b480      	push	{r7}
 800da6a:	b083      	sub	sp, #12
 800da6c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800da6e:	4b05      	ldr	r3, [pc, #20]	@ (800da84 <xTaskGetCurrentTaskHandle+0x1c>)
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	607b      	str	r3, [r7, #4]

		return xReturn;
 800da74:	687b      	ldr	r3, [r7, #4]
	}
 800da76:	4618      	mov	r0, r3
 800da78:	370c      	adds	r7, #12
 800da7a:	46bd      	mov	sp, r7
 800da7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da80:	4770      	bx	lr
 800da82:	bf00      	nop
 800da84:	20000dd8 	.word	0x20000dd8

0800da88 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800da88:	b480      	push	{r7}
 800da8a:	b083      	sub	sp, #12
 800da8c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800da8e:	4b0b      	ldr	r3, [pc, #44]	@ (800dabc <xTaskGetSchedulerState+0x34>)
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	2b00      	cmp	r3, #0
 800da94:	d102      	bne.n	800da9c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800da96:	2301      	movs	r3, #1
 800da98:	607b      	str	r3, [r7, #4]
 800da9a:	e008      	b.n	800daae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800da9c:	4b08      	ldr	r3, [pc, #32]	@ (800dac0 <xTaskGetSchedulerState+0x38>)
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d102      	bne.n	800daaa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800daa4:	2302      	movs	r3, #2
 800daa6:	607b      	str	r3, [r7, #4]
 800daa8:	e001      	b.n	800daae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800daaa:	2300      	movs	r3, #0
 800daac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800daae:	687b      	ldr	r3, [r7, #4]
	}
 800dab0:	4618      	mov	r0, r3
 800dab2:	370c      	adds	r7, #12
 800dab4:	46bd      	mov	sp, r7
 800dab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daba:	4770      	bx	lr
 800dabc:	200012b8 	.word	0x200012b8
 800dac0:	200012d4 	.word	0x200012d4

0800dac4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800dac4:	b580      	push	{r7, lr}
 800dac6:	b084      	sub	sp, #16
 800dac8:	af00      	add	r7, sp, #0
 800daca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800dad0:	2300      	movs	r3, #0
 800dad2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d051      	beq.n	800db7e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800dada:	68bb      	ldr	r3, [r7, #8]
 800dadc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dade:	4b2a      	ldr	r3, [pc, #168]	@ (800db88 <xTaskPriorityInherit+0xc4>)
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dae4:	429a      	cmp	r2, r3
 800dae6:	d241      	bcs.n	800db6c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800dae8:	68bb      	ldr	r3, [r7, #8]
 800daea:	699b      	ldr	r3, [r3, #24]
 800daec:	2b00      	cmp	r3, #0
 800daee:	db06      	blt.n	800dafe <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800daf0:	4b25      	ldr	r3, [pc, #148]	@ (800db88 <xTaskPriorityInherit+0xc4>)
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800daf6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800dafa:	68bb      	ldr	r3, [r7, #8]
 800dafc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800dafe:	68bb      	ldr	r3, [r7, #8]
 800db00:	6959      	ldr	r1, [r3, #20]
 800db02:	68bb      	ldr	r3, [r7, #8]
 800db04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800db06:	4613      	mov	r3, r2
 800db08:	009b      	lsls	r3, r3, #2
 800db0a:	4413      	add	r3, r2
 800db0c:	009b      	lsls	r3, r3, #2
 800db0e:	4a1f      	ldr	r2, [pc, #124]	@ (800db8c <xTaskPriorityInherit+0xc8>)
 800db10:	4413      	add	r3, r2
 800db12:	4299      	cmp	r1, r3
 800db14:	d122      	bne.n	800db5c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800db16:	68bb      	ldr	r3, [r7, #8]
 800db18:	3304      	adds	r3, #4
 800db1a:	4618      	mov	r0, r3
 800db1c:	f7fe f8f8 	bl	800bd10 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800db20:	4b19      	ldr	r3, [pc, #100]	@ (800db88 <xTaskPriorityInherit+0xc4>)
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800db26:	68bb      	ldr	r3, [r7, #8]
 800db28:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800db2a:	68bb      	ldr	r3, [r7, #8]
 800db2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800db2e:	4b18      	ldr	r3, [pc, #96]	@ (800db90 <xTaskPriorityInherit+0xcc>)
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	429a      	cmp	r2, r3
 800db34:	d903      	bls.n	800db3e <xTaskPriorityInherit+0x7a>
 800db36:	68bb      	ldr	r3, [r7, #8]
 800db38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db3a:	4a15      	ldr	r2, [pc, #84]	@ (800db90 <xTaskPriorityInherit+0xcc>)
 800db3c:	6013      	str	r3, [r2, #0]
 800db3e:	68bb      	ldr	r3, [r7, #8]
 800db40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800db42:	4613      	mov	r3, r2
 800db44:	009b      	lsls	r3, r3, #2
 800db46:	4413      	add	r3, r2
 800db48:	009b      	lsls	r3, r3, #2
 800db4a:	4a10      	ldr	r2, [pc, #64]	@ (800db8c <xTaskPriorityInherit+0xc8>)
 800db4c:	441a      	add	r2, r3
 800db4e:	68bb      	ldr	r3, [r7, #8]
 800db50:	3304      	adds	r3, #4
 800db52:	4619      	mov	r1, r3
 800db54:	4610      	mov	r0, r2
 800db56:	f7fe f87e 	bl	800bc56 <vListInsertEnd>
 800db5a:	e004      	b.n	800db66 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800db5c:	4b0a      	ldr	r3, [pc, #40]	@ (800db88 <xTaskPriorityInherit+0xc4>)
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800db62:	68bb      	ldr	r3, [r7, #8]
 800db64:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800db66:	2301      	movs	r3, #1
 800db68:	60fb      	str	r3, [r7, #12]
 800db6a:	e008      	b.n	800db7e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800db6c:	68bb      	ldr	r3, [r7, #8]
 800db6e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800db70:	4b05      	ldr	r3, [pc, #20]	@ (800db88 <xTaskPriorityInherit+0xc4>)
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db76:	429a      	cmp	r2, r3
 800db78:	d201      	bcs.n	800db7e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800db7a:	2301      	movs	r3, #1
 800db7c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800db7e:	68fb      	ldr	r3, [r7, #12]
	}
 800db80:	4618      	mov	r0, r3
 800db82:	3710      	adds	r7, #16
 800db84:	46bd      	mov	sp, r7
 800db86:	bd80      	pop	{r7, pc}
 800db88:	20000dd8 	.word	0x20000dd8
 800db8c:	20000ddc 	.word	0x20000ddc
 800db90:	200012b4 	.word	0x200012b4

0800db94 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800db94:	b580      	push	{r7, lr}
 800db96:	b086      	sub	sp, #24
 800db98:	af00      	add	r7, sp, #0
 800db9a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800dba0:	2300      	movs	r3, #0
 800dba2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d058      	beq.n	800dc5c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800dbaa:	4b2f      	ldr	r3, [pc, #188]	@ (800dc68 <xTaskPriorityDisinherit+0xd4>)
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	693a      	ldr	r2, [r7, #16]
 800dbb0:	429a      	cmp	r2, r3
 800dbb2:	d00b      	beq.n	800dbcc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800dbb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbb8:	f383 8811 	msr	BASEPRI, r3
 800dbbc:	f3bf 8f6f 	isb	sy
 800dbc0:	f3bf 8f4f 	dsb	sy
 800dbc4:	60fb      	str	r3, [r7, #12]
}
 800dbc6:	bf00      	nop
 800dbc8:	bf00      	nop
 800dbca:	e7fd      	b.n	800dbc8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800dbcc:	693b      	ldr	r3, [r7, #16]
 800dbce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d10b      	bne.n	800dbec <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800dbd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbd8:	f383 8811 	msr	BASEPRI, r3
 800dbdc:	f3bf 8f6f 	isb	sy
 800dbe0:	f3bf 8f4f 	dsb	sy
 800dbe4:	60bb      	str	r3, [r7, #8]
}
 800dbe6:	bf00      	nop
 800dbe8:	bf00      	nop
 800dbea:	e7fd      	b.n	800dbe8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800dbec:	693b      	ldr	r3, [r7, #16]
 800dbee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dbf0:	1e5a      	subs	r2, r3, #1
 800dbf2:	693b      	ldr	r3, [r7, #16]
 800dbf4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800dbf6:	693b      	ldr	r3, [r7, #16]
 800dbf8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dbfa:	693b      	ldr	r3, [r7, #16]
 800dbfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dbfe:	429a      	cmp	r2, r3
 800dc00:	d02c      	beq.n	800dc5c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800dc02:	693b      	ldr	r3, [r7, #16]
 800dc04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d128      	bne.n	800dc5c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dc0a:	693b      	ldr	r3, [r7, #16]
 800dc0c:	3304      	adds	r3, #4
 800dc0e:	4618      	mov	r0, r3
 800dc10:	f7fe f87e 	bl	800bd10 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800dc14:	693b      	ldr	r3, [r7, #16]
 800dc16:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800dc18:	693b      	ldr	r3, [r7, #16]
 800dc1a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dc1c:	693b      	ldr	r3, [r7, #16]
 800dc1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc20:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800dc24:	693b      	ldr	r3, [r7, #16]
 800dc26:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800dc28:	693b      	ldr	r3, [r7, #16]
 800dc2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dc2c:	4b0f      	ldr	r3, [pc, #60]	@ (800dc6c <xTaskPriorityDisinherit+0xd8>)
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	429a      	cmp	r2, r3
 800dc32:	d903      	bls.n	800dc3c <xTaskPriorityDisinherit+0xa8>
 800dc34:	693b      	ldr	r3, [r7, #16]
 800dc36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc38:	4a0c      	ldr	r2, [pc, #48]	@ (800dc6c <xTaskPriorityDisinherit+0xd8>)
 800dc3a:	6013      	str	r3, [r2, #0]
 800dc3c:	693b      	ldr	r3, [r7, #16]
 800dc3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dc40:	4613      	mov	r3, r2
 800dc42:	009b      	lsls	r3, r3, #2
 800dc44:	4413      	add	r3, r2
 800dc46:	009b      	lsls	r3, r3, #2
 800dc48:	4a09      	ldr	r2, [pc, #36]	@ (800dc70 <xTaskPriorityDisinherit+0xdc>)
 800dc4a:	441a      	add	r2, r3
 800dc4c:	693b      	ldr	r3, [r7, #16]
 800dc4e:	3304      	adds	r3, #4
 800dc50:	4619      	mov	r1, r3
 800dc52:	4610      	mov	r0, r2
 800dc54:	f7fd ffff 	bl	800bc56 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800dc58:	2301      	movs	r3, #1
 800dc5a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800dc5c:	697b      	ldr	r3, [r7, #20]
	}
 800dc5e:	4618      	mov	r0, r3
 800dc60:	3718      	adds	r7, #24
 800dc62:	46bd      	mov	sp, r7
 800dc64:	bd80      	pop	{r7, pc}
 800dc66:	bf00      	nop
 800dc68:	20000dd8 	.word	0x20000dd8
 800dc6c:	200012b4 	.word	0x200012b4
 800dc70:	20000ddc 	.word	0x20000ddc

0800dc74 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800dc74:	b580      	push	{r7, lr}
 800dc76:	b088      	sub	sp, #32
 800dc78:	af00      	add	r7, sp, #0
 800dc7a:	6078      	str	r0, [r7, #4]
 800dc7c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800dc82:	2301      	movs	r3, #1
 800dc84:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d06c      	beq.n	800dd66 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800dc8c:	69bb      	ldr	r3, [r7, #24]
 800dc8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d10b      	bne.n	800dcac <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800dc94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc98:	f383 8811 	msr	BASEPRI, r3
 800dc9c:	f3bf 8f6f 	isb	sy
 800dca0:	f3bf 8f4f 	dsb	sy
 800dca4:	60fb      	str	r3, [r7, #12]
}
 800dca6:	bf00      	nop
 800dca8:	bf00      	nop
 800dcaa:	e7fd      	b.n	800dca8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800dcac:	69bb      	ldr	r3, [r7, #24]
 800dcae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dcb0:	683a      	ldr	r2, [r7, #0]
 800dcb2:	429a      	cmp	r2, r3
 800dcb4:	d902      	bls.n	800dcbc <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800dcb6:	683b      	ldr	r3, [r7, #0]
 800dcb8:	61fb      	str	r3, [r7, #28]
 800dcba:	e002      	b.n	800dcc2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800dcbc:	69bb      	ldr	r3, [r7, #24]
 800dcbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dcc0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800dcc2:	69bb      	ldr	r3, [r7, #24]
 800dcc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dcc6:	69fa      	ldr	r2, [r7, #28]
 800dcc8:	429a      	cmp	r2, r3
 800dcca:	d04c      	beq.n	800dd66 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800dccc:	69bb      	ldr	r3, [r7, #24]
 800dcce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dcd0:	697a      	ldr	r2, [r7, #20]
 800dcd2:	429a      	cmp	r2, r3
 800dcd4:	d147      	bne.n	800dd66 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800dcd6:	4b26      	ldr	r3, [pc, #152]	@ (800dd70 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	69ba      	ldr	r2, [r7, #24]
 800dcdc:	429a      	cmp	r2, r3
 800dcde:	d10b      	bne.n	800dcf8 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800dce0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dce4:	f383 8811 	msr	BASEPRI, r3
 800dce8:	f3bf 8f6f 	isb	sy
 800dcec:	f3bf 8f4f 	dsb	sy
 800dcf0:	60bb      	str	r3, [r7, #8]
}
 800dcf2:	bf00      	nop
 800dcf4:	bf00      	nop
 800dcf6:	e7fd      	b.n	800dcf4 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800dcf8:	69bb      	ldr	r3, [r7, #24]
 800dcfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dcfc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800dcfe:	69bb      	ldr	r3, [r7, #24]
 800dd00:	69fa      	ldr	r2, [r7, #28]
 800dd02:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800dd04:	69bb      	ldr	r3, [r7, #24]
 800dd06:	699b      	ldr	r3, [r3, #24]
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	db04      	blt.n	800dd16 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dd0c:	69fb      	ldr	r3, [r7, #28]
 800dd0e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800dd12:	69bb      	ldr	r3, [r7, #24]
 800dd14:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800dd16:	69bb      	ldr	r3, [r7, #24]
 800dd18:	6959      	ldr	r1, [r3, #20]
 800dd1a:	693a      	ldr	r2, [r7, #16]
 800dd1c:	4613      	mov	r3, r2
 800dd1e:	009b      	lsls	r3, r3, #2
 800dd20:	4413      	add	r3, r2
 800dd22:	009b      	lsls	r3, r3, #2
 800dd24:	4a13      	ldr	r2, [pc, #76]	@ (800dd74 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800dd26:	4413      	add	r3, r2
 800dd28:	4299      	cmp	r1, r3
 800dd2a:	d11c      	bne.n	800dd66 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dd2c:	69bb      	ldr	r3, [r7, #24]
 800dd2e:	3304      	adds	r3, #4
 800dd30:	4618      	mov	r0, r3
 800dd32:	f7fd ffed 	bl	800bd10 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800dd36:	69bb      	ldr	r3, [r7, #24]
 800dd38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dd3a:	4b0f      	ldr	r3, [pc, #60]	@ (800dd78 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	429a      	cmp	r2, r3
 800dd40:	d903      	bls.n	800dd4a <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800dd42:	69bb      	ldr	r3, [r7, #24]
 800dd44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd46:	4a0c      	ldr	r2, [pc, #48]	@ (800dd78 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800dd48:	6013      	str	r3, [r2, #0]
 800dd4a:	69bb      	ldr	r3, [r7, #24]
 800dd4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dd4e:	4613      	mov	r3, r2
 800dd50:	009b      	lsls	r3, r3, #2
 800dd52:	4413      	add	r3, r2
 800dd54:	009b      	lsls	r3, r3, #2
 800dd56:	4a07      	ldr	r2, [pc, #28]	@ (800dd74 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800dd58:	441a      	add	r2, r3
 800dd5a:	69bb      	ldr	r3, [r7, #24]
 800dd5c:	3304      	adds	r3, #4
 800dd5e:	4619      	mov	r1, r3
 800dd60:	4610      	mov	r0, r2
 800dd62:	f7fd ff78 	bl	800bc56 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800dd66:	bf00      	nop
 800dd68:	3720      	adds	r7, #32
 800dd6a:	46bd      	mov	sp, r7
 800dd6c:	bd80      	pop	{r7, pc}
 800dd6e:	bf00      	nop
 800dd70:	20000dd8 	.word	0x20000dd8
 800dd74:	20000ddc 	.word	0x20000ddc
 800dd78:	200012b4 	.word	0x200012b4

0800dd7c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800dd7c:	b480      	push	{r7}
 800dd7e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800dd80:	4b07      	ldr	r3, [pc, #28]	@ (800dda0 <pvTaskIncrementMutexHeldCount+0x24>)
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d004      	beq.n	800dd92 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800dd88:	4b05      	ldr	r3, [pc, #20]	@ (800dda0 <pvTaskIncrementMutexHeldCount+0x24>)
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800dd8e:	3201      	adds	r2, #1
 800dd90:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800dd92:	4b03      	ldr	r3, [pc, #12]	@ (800dda0 <pvTaskIncrementMutexHeldCount+0x24>)
 800dd94:	681b      	ldr	r3, [r3, #0]
	}
 800dd96:	4618      	mov	r0, r3
 800dd98:	46bd      	mov	sp, r7
 800dd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd9e:	4770      	bx	lr
 800dda0:	20000dd8 	.word	0x20000dd8

0800dda4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800dda4:	b580      	push	{r7, lr}
 800dda6:	b084      	sub	sp, #16
 800dda8:	af00      	add	r7, sp, #0
 800ddaa:	6078      	str	r0, [r7, #4]
 800ddac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ddae:	4b21      	ldr	r3, [pc, #132]	@ (800de34 <prvAddCurrentTaskToDelayedList+0x90>)
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ddb4:	4b20      	ldr	r3, [pc, #128]	@ (800de38 <prvAddCurrentTaskToDelayedList+0x94>)
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	3304      	adds	r3, #4
 800ddba:	4618      	mov	r0, r3
 800ddbc:	f7fd ffa8 	bl	800bd10 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ddc6:	d10a      	bne.n	800ddde <prvAddCurrentTaskToDelayedList+0x3a>
 800ddc8:	683b      	ldr	r3, [r7, #0]
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d007      	beq.n	800ddde <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ddce:	4b1a      	ldr	r3, [pc, #104]	@ (800de38 <prvAddCurrentTaskToDelayedList+0x94>)
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	3304      	adds	r3, #4
 800ddd4:	4619      	mov	r1, r3
 800ddd6:	4819      	ldr	r0, [pc, #100]	@ (800de3c <prvAddCurrentTaskToDelayedList+0x98>)
 800ddd8:	f7fd ff3d 	bl	800bc56 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800dddc:	e026      	b.n	800de2c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ddde:	68fa      	ldr	r2, [r7, #12]
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	4413      	add	r3, r2
 800dde4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800dde6:	4b14      	ldr	r3, [pc, #80]	@ (800de38 <prvAddCurrentTaskToDelayedList+0x94>)
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	68ba      	ldr	r2, [r7, #8]
 800ddec:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ddee:	68ba      	ldr	r2, [r7, #8]
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	429a      	cmp	r2, r3
 800ddf4:	d209      	bcs.n	800de0a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ddf6:	4b12      	ldr	r3, [pc, #72]	@ (800de40 <prvAddCurrentTaskToDelayedList+0x9c>)
 800ddf8:	681a      	ldr	r2, [r3, #0]
 800ddfa:	4b0f      	ldr	r3, [pc, #60]	@ (800de38 <prvAddCurrentTaskToDelayedList+0x94>)
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	3304      	adds	r3, #4
 800de00:	4619      	mov	r1, r3
 800de02:	4610      	mov	r0, r2
 800de04:	f7fd ff4b 	bl	800bc9e <vListInsert>
}
 800de08:	e010      	b.n	800de2c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800de0a:	4b0e      	ldr	r3, [pc, #56]	@ (800de44 <prvAddCurrentTaskToDelayedList+0xa0>)
 800de0c:	681a      	ldr	r2, [r3, #0]
 800de0e:	4b0a      	ldr	r3, [pc, #40]	@ (800de38 <prvAddCurrentTaskToDelayedList+0x94>)
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	3304      	adds	r3, #4
 800de14:	4619      	mov	r1, r3
 800de16:	4610      	mov	r0, r2
 800de18:	f7fd ff41 	bl	800bc9e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800de1c:	4b0a      	ldr	r3, [pc, #40]	@ (800de48 <prvAddCurrentTaskToDelayedList+0xa4>)
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	68ba      	ldr	r2, [r7, #8]
 800de22:	429a      	cmp	r2, r3
 800de24:	d202      	bcs.n	800de2c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800de26:	4a08      	ldr	r2, [pc, #32]	@ (800de48 <prvAddCurrentTaskToDelayedList+0xa4>)
 800de28:	68bb      	ldr	r3, [r7, #8]
 800de2a:	6013      	str	r3, [r2, #0]
}
 800de2c:	bf00      	nop
 800de2e:	3710      	adds	r7, #16
 800de30:	46bd      	mov	sp, r7
 800de32:	bd80      	pop	{r7, pc}
 800de34:	200012b0 	.word	0x200012b0
 800de38:	20000dd8 	.word	0x20000dd8
 800de3c:	20001298 	.word	0x20001298
 800de40:	20001268 	.word	0x20001268
 800de44:	20001264 	.word	0x20001264
 800de48:	200012cc 	.word	0x200012cc

0800de4c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800de4c:	b580      	push	{r7, lr}
 800de4e:	b08a      	sub	sp, #40	@ 0x28
 800de50:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800de52:	2300      	movs	r3, #0
 800de54:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800de56:	f000 fb13 	bl	800e480 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800de5a:	4b1d      	ldr	r3, [pc, #116]	@ (800ded0 <xTimerCreateTimerTask+0x84>)
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d021      	beq.n	800dea6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800de62:	2300      	movs	r3, #0
 800de64:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800de66:	2300      	movs	r3, #0
 800de68:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800de6a:	1d3a      	adds	r2, r7, #4
 800de6c:	f107 0108 	add.w	r1, r7, #8
 800de70:	f107 030c 	add.w	r3, r7, #12
 800de74:	4618      	mov	r0, r3
 800de76:	f7fd fea7 	bl	800bbc8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800de7a:	6879      	ldr	r1, [r7, #4]
 800de7c:	68bb      	ldr	r3, [r7, #8]
 800de7e:	68fa      	ldr	r2, [r7, #12]
 800de80:	9202      	str	r2, [sp, #8]
 800de82:	9301      	str	r3, [sp, #4]
 800de84:	2302      	movs	r3, #2
 800de86:	9300      	str	r3, [sp, #0]
 800de88:	2300      	movs	r3, #0
 800de8a:	460a      	mov	r2, r1
 800de8c:	4911      	ldr	r1, [pc, #68]	@ (800ded4 <xTimerCreateTimerTask+0x88>)
 800de8e:	4812      	ldr	r0, [pc, #72]	@ (800ded8 <xTimerCreateTimerTask+0x8c>)
 800de90:	f7fe ff00 	bl	800cc94 <xTaskCreateStatic>
 800de94:	4603      	mov	r3, r0
 800de96:	4a11      	ldr	r2, [pc, #68]	@ (800dedc <xTimerCreateTimerTask+0x90>)
 800de98:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800de9a:	4b10      	ldr	r3, [pc, #64]	@ (800dedc <xTimerCreateTimerTask+0x90>)
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d001      	beq.n	800dea6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800dea2:	2301      	movs	r3, #1
 800dea4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800dea6:	697b      	ldr	r3, [r7, #20]
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d10b      	bne.n	800dec4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800deac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800deb0:	f383 8811 	msr	BASEPRI, r3
 800deb4:	f3bf 8f6f 	isb	sy
 800deb8:	f3bf 8f4f 	dsb	sy
 800debc:	613b      	str	r3, [r7, #16]
}
 800debe:	bf00      	nop
 800dec0:	bf00      	nop
 800dec2:	e7fd      	b.n	800dec0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800dec4:	697b      	ldr	r3, [r7, #20]
}
 800dec6:	4618      	mov	r0, r3
 800dec8:	3718      	adds	r7, #24
 800deca:	46bd      	mov	sp, r7
 800decc:	bd80      	pop	{r7, pc}
 800dece:	bf00      	nop
 800ded0:	20001308 	.word	0x20001308
 800ded4:	08013424 	.word	0x08013424
 800ded8:	0800e019 	.word	0x0800e019
 800dedc:	2000130c 	.word	0x2000130c

0800dee0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800dee0:	b580      	push	{r7, lr}
 800dee2:	b08a      	sub	sp, #40	@ 0x28
 800dee4:	af00      	add	r7, sp, #0
 800dee6:	60f8      	str	r0, [r7, #12]
 800dee8:	60b9      	str	r1, [r7, #8]
 800deea:	607a      	str	r2, [r7, #4]
 800deec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800deee:	2300      	movs	r3, #0
 800def0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	2b00      	cmp	r3, #0
 800def6:	d10b      	bne.n	800df10 <xTimerGenericCommand+0x30>
	__asm volatile
 800def8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800defc:	f383 8811 	msr	BASEPRI, r3
 800df00:	f3bf 8f6f 	isb	sy
 800df04:	f3bf 8f4f 	dsb	sy
 800df08:	623b      	str	r3, [r7, #32]
}
 800df0a:	bf00      	nop
 800df0c:	bf00      	nop
 800df0e:	e7fd      	b.n	800df0c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800df10:	4b19      	ldr	r3, [pc, #100]	@ (800df78 <xTimerGenericCommand+0x98>)
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	2b00      	cmp	r3, #0
 800df16:	d02a      	beq.n	800df6e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800df18:	68bb      	ldr	r3, [r7, #8]
 800df1a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800df24:	68bb      	ldr	r3, [r7, #8]
 800df26:	2b05      	cmp	r3, #5
 800df28:	dc18      	bgt.n	800df5c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800df2a:	f7ff fdad 	bl	800da88 <xTaskGetSchedulerState>
 800df2e:	4603      	mov	r3, r0
 800df30:	2b02      	cmp	r3, #2
 800df32:	d109      	bne.n	800df48 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800df34:	4b10      	ldr	r3, [pc, #64]	@ (800df78 <xTimerGenericCommand+0x98>)
 800df36:	6818      	ldr	r0, [r3, #0]
 800df38:	f107 0110 	add.w	r1, r7, #16
 800df3c:	2300      	movs	r3, #0
 800df3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800df40:	f7fe f90e 	bl	800c160 <xQueueGenericSend>
 800df44:	6278      	str	r0, [r7, #36]	@ 0x24
 800df46:	e012      	b.n	800df6e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800df48:	4b0b      	ldr	r3, [pc, #44]	@ (800df78 <xTimerGenericCommand+0x98>)
 800df4a:	6818      	ldr	r0, [r3, #0]
 800df4c:	f107 0110 	add.w	r1, r7, #16
 800df50:	2300      	movs	r3, #0
 800df52:	2200      	movs	r2, #0
 800df54:	f7fe f904 	bl	800c160 <xQueueGenericSend>
 800df58:	6278      	str	r0, [r7, #36]	@ 0x24
 800df5a:	e008      	b.n	800df6e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800df5c:	4b06      	ldr	r3, [pc, #24]	@ (800df78 <xTimerGenericCommand+0x98>)
 800df5e:	6818      	ldr	r0, [r3, #0]
 800df60:	f107 0110 	add.w	r1, r7, #16
 800df64:	2300      	movs	r3, #0
 800df66:	683a      	ldr	r2, [r7, #0]
 800df68:	f7fe f9fc 	bl	800c364 <xQueueGenericSendFromISR>
 800df6c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800df6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800df70:	4618      	mov	r0, r3
 800df72:	3728      	adds	r7, #40	@ 0x28
 800df74:	46bd      	mov	sp, r7
 800df76:	bd80      	pop	{r7, pc}
 800df78:	20001308 	.word	0x20001308

0800df7c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800df7c:	b580      	push	{r7, lr}
 800df7e:	b088      	sub	sp, #32
 800df80:	af02      	add	r7, sp, #8
 800df82:	6078      	str	r0, [r7, #4]
 800df84:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800df86:	4b23      	ldr	r3, [pc, #140]	@ (800e014 <prvProcessExpiredTimer+0x98>)
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	68db      	ldr	r3, [r3, #12]
 800df8c:	68db      	ldr	r3, [r3, #12]
 800df8e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800df90:	697b      	ldr	r3, [r7, #20]
 800df92:	3304      	adds	r3, #4
 800df94:	4618      	mov	r0, r3
 800df96:	f7fd febb 	bl	800bd10 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800df9a:	697b      	ldr	r3, [r7, #20]
 800df9c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dfa0:	f003 0304 	and.w	r3, r3, #4
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d023      	beq.n	800dff0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800dfa8:	697b      	ldr	r3, [r7, #20]
 800dfaa:	699a      	ldr	r2, [r3, #24]
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	18d1      	adds	r1, r2, r3
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	683a      	ldr	r2, [r7, #0]
 800dfb4:	6978      	ldr	r0, [r7, #20]
 800dfb6:	f000 f8d5 	bl	800e164 <prvInsertTimerInActiveList>
 800dfba:	4603      	mov	r3, r0
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d020      	beq.n	800e002 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800dfc0:	2300      	movs	r3, #0
 800dfc2:	9300      	str	r3, [sp, #0]
 800dfc4:	2300      	movs	r3, #0
 800dfc6:	687a      	ldr	r2, [r7, #4]
 800dfc8:	2100      	movs	r1, #0
 800dfca:	6978      	ldr	r0, [r7, #20]
 800dfcc:	f7ff ff88 	bl	800dee0 <xTimerGenericCommand>
 800dfd0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800dfd2:	693b      	ldr	r3, [r7, #16]
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d114      	bne.n	800e002 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800dfd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfdc:	f383 8811 	msr	BASEPRI, r3
 800dfe0:	f3bf 8f6f 	isb	sy
 800dfe4:	f3bf 8f4f 	dsb	sy
 800dfe8:	60fb      	str	r3, [r7, #12]
}
 800dfea:	bf00      	nop
 800dfec:	bf00      	nop
 800dfee:	e7fd      	b.n	800dfec <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dff0:	697b      	ldr	r3, [r7, #20]
 800dff2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dff6:	f023 0301 	bic.w	r3, r3, #1
 800dffa:	b2da      	uxtb	r2, r3
 800dffc:	697b      	ldr	r3, [r7, #20]
 800dffe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e002:	697b      	ldr	r3, [r7, #20]
 800e004:	6a1b      	ldr	r3, [r3, #32]
 800e006:	6978      	ldr	r0, [r7, #20]
 800e008:	4798      	blx	r3
}
 800e00a:	bf00      	nop
 800e00c:	3718      	adds	r7, #24
 800e00e:	46bd      	mov	sp, r7
 800e010:	bd80      	pop	{r7, pc}
 800e012:	bf00      	nop
 800e014:	20001300 	.word	0x20001300

0800e018 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800e018:	b580      	push	{r7, lr}
 800e01a:	b084      	sub	sp, #16
 800e01c:	af00      	add	r7, sp, #0
 800e01e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e020:	f107 0308 	add.w	r3, r7, #8
 800e024:	4618      	mov	r0, r3
 800e026:	f000 f859 	bl	800e0dc <prvGetNextExpireTime>
 800e02a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e02c:	68bb      	ldr	r3, [r7, #8]
 800e02e:	4619      	mov	r1, r3
 800e030:	68f8      	ldr	r0, [r7, #12]
 800e032:	f000 f805 	bl	800e040 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e036:	f000 f8d7 	bl	800e1e8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e03a:	bf00      	nop
 800e03c:	e7f0      	b.n	800e020 <prvTimerTask+0x8>
	...

0800e040 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e040:	b580      	push	{r7, lr}
 800e042:	b084      	sub	sp, #16
 800e044:	af00      	add	r7, sp, #0
 800e046:	6078      	str	r0, [r7, #4]
 800e048:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e04a:	f7ff f907 	bl	800d25c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e04e:	f107 0308 	add.w	r3, r7, #8
 800e052:	4618      	mov	r0, r3
 800e054:	f000 f866 	bl	800e124 <prvSampleTimeNow>
 800e058:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e05a:	68bb      	ldr	r3, [r7, #8]
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d130      	bne.n	800e0c2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e060:	683b      	ldr	r3, [r7, #0]
 800e062:	2b00      	cmp	r3, #0
 800e064:	d10a      	bne.n	800e07c <prvProcessTimerOrBlockTask+0x3c>
 800e066:	687a      	ldr	r2, [r7, #4]
 800e068:	68fb      	ldr	r3, [r7, #12]
 800e06a:	429a      	cmp	r2, r3
 800e06c:	d806      	bhi.n	800e07c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e06e:	f7ff f903 	bl	800d278 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e072:	68f9      	ldr	r1, [r7, #12]
 800e074:	6878      	ldr	r0, [r7, #4]
 800e076:	f7ff ff81 	bl	800df7c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e07a:	e024      	b.n	800e0c6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e07c:	683b      	ldr	r3, [r7, #0]
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d008      	beq.n	800e094 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e082:	4b13      	ldr	r3, [pc, #76]	@ (800e0d0 <prvProcessTimerOrBlockTask+0x90>)
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d101      	bne.n	800e090 <prvProcessTimerOrBlockTask+0x50>
 800e08c:	2301      	movs	r3, #1
 800e08e:	e000      	b.n	800e092 <prvProcessTimerOrBlockTask+0x52>
 800e090:	2300      	movs	r3, #0
 800e092:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e094:	4b0f      	ldr	r3, [pc, #60]	@ (800e0d4 <prvProcessTimerOrBlockTask+0x94>)
 800e096:	6818      	ldr	r0, [r3, #0]
 800e098:	687a      	ldr	r2, [r7, #4]
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	1ad3      	subs	r3, r2, r3
 800e09e:	683a      	ldr	r2, [r7, #0]
 800e0a0:	4619      	mov	r1, r3
 800e0a2:	f7fe fdc3 	bl	800cc2c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e0a6:	f7ff f8e7 	bl	800d278 <xTaskResumeAll>
 800e0aa:	4603      	mov	r3, r0
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d10a      	bne.n	800e0c6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e0b0:	4b09      	ldr	r3, [pc, #36]	@ (800e0d8 <prvProcessTimerOrBlockTask+0x98>)
 800e0b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e0b6:	601a      	str	r2, [r3, #0]
 800e0b8:	f3bf 8f4f 	dsb	sy
 800e0bc:	f3bf 8f6f 	isb	sy
}
 800e0c0:	e001      	b.n	800e0c6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e0c2:	f7ff f8d9 	bl	800d278 <xTaskResumeAll>
}
 800e0c6:	bf00      	nop
 800e0c8:	3710      	adds	r7, #16
 800e0ca:	46bd      	mov	sp, r7
 800e0cc:	bd80      	pop	{r7, pc}
 800e0ce:	bf00      	nop
 800e0d0:	20001304 	.word	0x20001304
 800e0d4:	20001308 	.word	0x20001308
 800e0d8:	e000ed04 	.word	0xe000ed04

0800e0dc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e0dc:	b480      	push	{r7}
 800e0de:	b085      	sub	sp, #20
 800e0e0:	af00      	add	r7, sp, #0
 800e0e2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e0e4:	4b0e      	ldr	r3, [pc, #56]	@ (800e120 <prvGetNextExpireTime+0x44>)
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d101      	bne.n	800e0f2 <prvGetNextExpireTime+0x16>
 800e0ee:	2201      	movs	r2, #1
 800e0f0:	e000      	b.n	800e0f4 <prvGetNextExpireTime+0x18>
 800e0f2:	2200      	movs	r2, #0
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d105      	bne.n	800e10c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e100:	4b07      	ldr	r3, [pc, #28]	@ (800e120 <prvGetNextExpireTime+0x44>)
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	68db      	ldr	r3, [r3, #12]
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	60fb      	str	r3, [r7, #12]
 800e10a:	e001      	b.n	800e110 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e10c:	2300      	movs	r3, #0
 800e10e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e110:	68fb      	ldr	r3, [r7, #12]
}
 800e112:	4618      	mov	r0, r3
 800e114:	3714      	adds	r7, #20
 800e116:	46bd      	mov	sp, r7
 800e118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e11c:	4770      	bx	lr
 800e11e:	bf00      	nop
 800e120:	20001300 	.word	0x20001300

0800e124 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e124:	b580      	push	{r7, lr}
 800e126:	b084      	sub	sp, #16
 800e128:	af00      	add	r7, sp, #0
 800e12a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e12c:	f7ff f942 	bl	800d3b4 <xTaskGetTickCount>
 800e130:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e132:	4b0b      	ldr	r3, [pc, #44]	@ (800e160 <prvSampleTimeNow+0x3c>)
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	68fa      	ldr	r2, [r7, #12]
 800e138:	429a      	cmp	r2, r3
 800e13a:	d205      	bcs.n	800e148 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e13c:	f000 f93a 	bl	800e3b4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	2201      	movs	r2, #1
 800e144:	601a      	str	r2, [r3, #0]
 800e146:	e002      	b.n	800e14e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	2200      	movs	r2, #0
 800e14c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e14e:	4a04      	ldr	r2, [pc, #16]	@ (800e160 <prvSampleTimeNow+0x3c>)
 800e150:	68fb      	ldr	r3, [r7, #12]
 800e152:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e154:	68fb      	ldr	r3, [r7, #12]
}
 800e156:	4618      	mov	r0, r3
 800e158:	3710      	adds	r7, #16
 800e15a:	46bd      	mov	sp, r7
 800e15c:	bd80      	pop	{r7, pc}
 800e15e:	bf00      	nop
 800e160:	20001310 	.word	0x20001310

0800e164 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e164:	b580      	push	{r7, lr}
 800e166:	b086      	sub	sp, #24
 800e168:	af00      	add	r7, sp, #0
 800e16a:	60f8      	str	r0, [r7, #12]
 800e16c:	60b9      	str	r1, [r7, #8]
 800e16e:	607a      	str	r2, [r7, #4]
 800e170:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e172:	2300      	movs	r3, #0
 800e174:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e176:	68fb      	ldr	r3, [r7, #12]
 800e178:	68ba      	ldr	r2, [r7, #8]
 800e17a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	68fa      	ldr	r2, [r7, #12]
 800e180:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e182:	68ba      	ldr	r2, [r7, #8]
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	429a      	cmp	r2, r3
 800e188:	d812      	bhi.n	800e1b0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e18a:	687a      	ldr	r2, [r7, #4]
 800e18c:	683b      	ldr	r3, [r7, #0]
 800e18e:	1ad2      	subs	r2, r2, r3
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	699b      	ldr	r3, [r3, #24]
 800e194:	429a      	cmp	r2, r3
 800e196:	d302      	bcc.n	800e19e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e198:	2301      	movs	r3, #1
 800e19a:	617b      	str	r3, [r7, #20]
 800e19c:	e01b      	b.n	800e1d6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e19e:	4b10      	ldr	r3, [pc, #64]	@ (800e1e0 <prvInsertTimerInActiveList+0x7c>)
 800e1a0:	681a      	ldr	r2, [r3, #0]
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	3304      	adds	r3, #4
 800e1a6:	4619      	mov	r1, r3
 800e1a8:	4610      	mov	r0, r2
 800e1aa:	f7fd fd78 	bl	800bc9e <vListInsert>
 800e1ae:	e012      	b.n	800e1d6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e1b0:	687a      	ldr	r2, [r7, #4]
 800e1b2:	683b      	ldr	r3, [r7, #0]
 800e1b4:	429a      	cmp	r2, r3
 800e1b6:	d206      	bcs.n	800e1c6 <prvInsertTimerInActiveList+0x62>
 800e1b8:	68ba      	ldr	r2, [r7, #8]
 800e1ba:	683b      	ldr	r3, [r7, #0]
 800e1bc:	429a      	cmp	r2, r3
 800e1be:	d302      	bcc.n	800e1c6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e1c0:	2301      	movs	r3, #1
 800e1c2:	617b      	str	r3, [r7, #20]
 800e1c4:	e007      	b.n	800e1d6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e1c6:	4b07      	ldr	r3, [pc, #28]	@ (800e1e4 <prvInsertTimerInActiveList+0x80>)
 800e1c8:	681a      	ldr	r2, [r3, #0]
 800e1ca:	68fb      	ldr	r3, [r7, #12]
 800e1cc:	3304      	adds	r3, #4
 800e1ce:	4619      	mov	r1, r3
 800e1d0:	4610      	mov	r0, r2
 800e1d2:	f7fd fd64 	bl	800bc9e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e1d6:	697b      	ldr	r3, [r7, #20]
}
 800e1d8:	4618      	mov	r0, r3
 800e1da:	3718      	adds	r7, #24
 800e1dc:	46bd      	mov	sp, r7
 800e1de:	bd80      	pop	{r7, pc}
 800e1e0:	20001304 	.word	0x20001304
 800e1e4:	20001300 	.word	0x20001300

0800e1e8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e1e8:	b580      	push	{r7, lr}
 800e1ea:	b08e      	sub	sp, #56	@ 0x38
 800e1ec:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e1ee:	e0ce      	b.n	800e38e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	da19      	bge.n	800e22a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e1f6:	1d3b      	adds	r3, r7, #4
 800e1f8:	3304      	adds	r3, #4
 800e1fa:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800e1fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d10b      	bne.n	800e21a <prvProcessReceivedCommands+0x32>
	__asm volatile
 800e202:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e206:	f383 8811 	msr	BASEPRI, r3
 800e20a:	f3bf 8f6f 	isb	sy
 800e20e:	f3bf 8f4f 	dsb	sy
 800e212:	61fb      	str	r3, [r7, #28]
}
 800e214:	bf00      	nop
 800e216:	bf00      	nop
 800e218:	e7fd      	b.n	800e216 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e21a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e21c:	681b      	ldr	r3, [r3, #0]
 800e21e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e220:	6850      	ldr	r0, [r2, #4]
 800e222:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e224:	6892      	ldr	r2, [r2, #8]
 800e226:	4611      	mov	r1, r2
 800e228:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	f2c0 80ae 	blt.w	800e38e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e236:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e238:	695b      	ldr	r3, [r3, #20]
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d004      	beq.n	800e248 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e23e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e240:	3304      	adds	r3, #4
 800e242:	4618      	mov	r0, r3
 800e244:	f7fd fd64 	bl	800bd10 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e248:	463b      	mov	r3, r7
 800e24a:	4618      	mov	r0, r3
 800e24c:	f7ff ff6a 	bl	800e124 <prvSampleTimeNow>
 800e250:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	2b09      	cmp	r3, #9
 800e256:	f200 8097 	bhi.w	800e388 <prvProcessReceivedCommands+0x1a0>
 800e25a:	a201      	add	r2, pc, #4	@ (adr r2, 800e260 <prvProcessReceivedCommands+0x78>)
 800e25c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e260:	0800e289 	.word	0x0800e289
 800e264:	0800e289 	.word	0x0800e289
 800e268:	0800e289 	.word	0x0800e289
 800e26c:	0800e2ff 	.word	0x0800e2ff
 800e270:	0800e313 	.word	0x0800e313
 800e274:	0800e35f 	.word	0x0800e35f
 800e278:	0800e289 	.word	0x0800e289
 800e27c:	0800e289 	.word	0x0800e289
 800e280:	0800e2ff 	.word	0x0800e2ff
 800e284:	0800e313 	.word	0x0800e313
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e288:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e28a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e28e:	f043 0301 	orr.w	r3, r3, #1
 800e292:	b2da      	uxtb	r2, r3
 800e294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e296:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e29a:	68ba      	ldr	r2, [r7, #8]
 800e29c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e29e:	699b      	ldr	r3, [r3, #24]
 800e2a0:	18d1      	adds	r1, r2, r3
 800e2a2:	68bb      	ldr	r3, [r7, #8]
 800e2a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e2a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e2a8:	f7ff ff5c 	bl	800e164 <prvInsertTimerInActiveList>
 800e2ac:	4603      	mov	r3, r0
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d06c      	beq.n	800e38c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e2b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2b4:	6a1b      	ldr	r3, [r3, #32]
 800e2b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e2b8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e2ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2bc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e2c0:	f003 0304 	and.w	r3, r3, #4
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d061      	beq.n	800e38c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e2c8:	68ba      	ldr	r2, [r7, #8]
 800e2ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2cc:	699b      	ldr	r3, [r3, #24]
 800e2ce:	441a      	add	r2, r3
 800e2d0:	2300      	movs	r3, #0
 800e2d2:	9300      	str	r3, [sp, #0]
 800e2d4:	2300      	movs	r3, #0
 800e2d6:	2100      	movs	r1, #0
 800e2d8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e2da:	f7ff fe01 	bl	800dee0 <xTimerGenericCommand>
 800e2de:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800e2e0:	6a3b      	ldr	r3, [r7, #32]
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d152      	bne.n	800e38c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800e2e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2ea:	f383 8811 	msr	BASEPRI, r3
 800e2ee:	f3bf 8f6f 	isb	sy
 800e2f2:	f3bf 8f4f 	dsb	sy
 800e2f6:	61bb      	str	r3, [r7, #24]
}
 800e2f8:	bf00      	nop
 800e2fa:	bf00      	nop
 800e2fc:	e7fd      	b.n	800e2fa <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e2fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e300:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e304:	f023 0301 	bic.w	r3, r3, #1
 800e308:	b2da      	uxtb	r2, r3
 800e30a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e30c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800e310:	e03d      	b.n	800e38e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e312:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e314:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e318:	f043 0301 	orr.w	r3, r3, #1
 800e31c:	b2da      	uxtb	r2, r3
 800e31e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e320:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e324:	68ba      	ldr	r2, [r7, #8]
 800e326:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e328:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e32a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e32c:	699b      	ldr	r3, [r3, #24]
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d10b      	bne.n	800e34a <prvProcessReceivedCommands+0x162>
	__asm volatile
 800e332:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e336:	f383 8811 	msr	BASEPRI, r3
 800e33a:	f3bf 8f6f 	isb	sy
 800e33e:	f3bf 8f4f 	dsb	sy
 800e342:	617b      	str	r3, [r7, #20]
}
 800e344:	bf00      	nop
 800e346:	bf00      	nop
 800e348:	e7fd      	b.n	800e346 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e34a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e34c:	699a      	ldr	r2, [r3, #24]
 800e34e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e350:	18d1      	adds	r1, r2, r3
 800e352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e354:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e356:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e358:	f7ff ff04 	bl	800e164 <prvInsertTimerInActiveList>
					break;
 800e35c:	e017      	b.n	800e38e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e35e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e360:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e364:	f003 0302 	and.w	r3, r3, #2
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d103      	bne.n	800e374 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800e36c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e36e:	f000 fbeb 	bl	800eb48 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e372:	e00c      	b.n	800e38e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e374:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e376:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e37a:	f023 0301 	bic.w	r3, r3, #1
 800e37e:	b2da      	uxtb	r2, r3
 800e380:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e382:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800e386:	e002      	b.n	800e38e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800e388:	bf00      	nop
 800e38a:	e000      	b.n	800e38e <prvProcessReceivedCommands+0x1a6>
					break;
 800e38c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e38e:	4b08      	ldr	r3, [pc, #32]	@ (800e3b0 <prvProcessReceivedCommands+0x1c8>)
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	1d39      	adds	r1, r7, #4
 800e394:	2200      	movs	r2, #0
 800e396:	4618      	mov	r0, r3
 800e398:	f7fe f882 	bl	800c4a0 <xQueueReceive>
 800e39c:	4603      	mov	r3, r0
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	f47f af26 	bne.w	800e1f0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800e3a4:	bf00      	nop
 800e3a6:	bf00      	nop
 800e3a8:	3730      	adds	r7, #48	@ 0x30
 800e3aa:	46bd      	mov	sp, r7
 800e3ac:	bd80      	pop	{r7, pc}
 800e3ae:	bf00      	nop
 800e3b0:	20001308 	.word	0x20001308

0800e3b4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e3b4:	b580      	push	{r7, lr}
 800e3b6:	b088      	sub	sp, #32
 800e3b8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e3ba:	e049      	b.n	800e450 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e3bc:	4b2e      	ldr	r3, [pc, #184]	@ (800e478 <prvSwitchTimerLists+0xc4>)
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	68db      	ldr	r3, [r3, #12]
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e3c6:	4b2c      	ldr	r3, [pc, #176]	@ (800e478 <prvSwitchTimerLists+0xc4>)
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	68db      	ldr	r3, [r3, #12]
 800e3cc:	68db      	ldr	r3, [r3, #12]
 800e3ce:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	3304      	adds	r3, #4
 800e3d4:	4618      	mov	r0, r3
 800e3d6:	f7fd fc9b 	bl	800bd10 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e3da:	68fb      	ldr	r3, [r7, #12]
 800e3dc:	6a1b      	ldr	r3, [r3, #32]
 800e3de:	68f8      	ldr	r0, [r7, #12]
 800e3e0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e3e2:	68fb      	ldr	r3, [r7, #12]
 800e3e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e3e8:	f003 0304 	and.w	r3, r3, #4
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d02f      	beq.n	800e450 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e3f0:	68fb      	ldr	r3, [r7, #12]
 800e3f2:	699b      	ldr	r3, [r3, #24]
 800e3f4:	693a      	ldr	r2, [r7, #16]
 800e3f6:	4413      	add	r3, r2
 800e3f8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e3fa:	68ba      	ldr	r2, [r7, #8]
 800e3fc:	693b      	ldr	r3, [r7, #16]
 800e3fe:	429a      	cmp	r2, r3
 800e400:	d90e      	bls.n	800e420 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	68ba      	ldr	r2, [r7, #8]
 800e406:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	68fa      	ldr	r2, [r7, #12]
 800e40c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e40e:	4b1a      	ldr	r3, [pc, #104]	@ (800e478 <prvSwitchTimerLists+0xc4>)
 800e410:	681a      	ldr	r2, [r3, #0]
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	3304      	adds	r3, #4
 800e416:	4619      	mov	r1, r3
 800e418:	4610      	mov	r0, r2
 800e41a:	f7fd fc40 	bl	800bc9e <vListInsert>
 800e41e:	e017      	b.n	800e450 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e420:	2300      	movs	r3, #0
 800e422:	9300      	str	r3, [sp, #0]
 800e424:	2300      	movs	r3, #0
 800e426:	693a      	ldr	r2, [r7, #16]
 800e428:	2100      	movs	r1, #0
 800e42a:	68f8      	ldr	r0, [r7, #12]
 800e42c:	f7ff fd58 	bl	800dee0 <xTimerGenericCommand>
 800e430:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	2b00      	cmp	r3, #0
 800e436:	d10b      	bne.n	800e450 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800e438:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e43c:	f383 8811 	msr	BASEPRI, r3
 800e440:	f3bf 8f6f 	isb	sy
 800e444:	f3bf 8f4f 	dsb	sy
 800e448:	603b      	str	r3, [r7, #0]
}
 800e44a:	bf00      	nop
 800e44c:	bf00      	nop
 800e44e:	e7fd      	b.n	800e44c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e450:	4b09      	ldr	r3, [pc, #36]	@ (800e478 <prvSwitchTimerLists+0xc4>)
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	2b00      	cmp	r3, #0
 800e458:	d1b0      	bne.n	800e3bc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e45a:	4b07      	ldr	r3, [pc, #28]	@ (800e478 <prvSwitchTimerLists+0xc4>)
 800e45c:	681b      	ldr	r3, [r3, #0]
 800e45e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e460:	4b06      	ldr	r3, [pc, #24]	@ (800e47c <prvSwitchTimerLists+0xc8>)
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	4a04      	ldr	r2, [pc, #16]	@ (800e478 <prvSwitchTimerLists+0xc4>)
 800e466:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e468:	4a04      	ldr	r2, [pc, #16]	@ (800e47c <prvSwitchTimerLists+0xc8>)
 800e46a:	697b      	ldr	r3, [r7, #20]
 800e46c:	6013      	str	r3, [r2, #0]
}
 800e46e:	bf00      	nop
 800e470:	3718      	adds	r7, #24
 800e472:	46bd      	mov	sp, r7
 800e474:	bd80      	pop	{r7, pc}
 800e476:	bf00      	nop
 800e478:	20001300 	.word	0x20001300
 800e47c:	20001304 	.word	0x20001304

0800e480 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e480:	b580      	push	{r7, lr}
 800e482:	b082      	sub	sp, #8
 800e484:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e486:	f000 f96f 	bl	800e768 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e48a:	4b15      	ldr	r3, [pc, #84]	@ (800e4e0 <prvCheckForValidListAndQueue+0x60>)
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d120      	bne.n	800e4d4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e492:	4814      	ldr	r0, [pc, #80]	@ (800e4e4 <prvCheckForValidListAndQueue+0x64>)
 800e494:	f7fd fbb2 	bl	800bbfc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e498:	4813      	ldr	r0, [pc, #76]	@ (800e4e8 <prvCheckForValidListAndQueue+0x68>)
 800e49a:	f7fd fbaf 	bl	800bbfc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e49e:	4b13      	ldr	r3, [pc, #76]	@ (800e4ec <prvCheckForValidListAndQueue+0x6c>)
 800e4a0:	4a10      	ldr	r2, [pc, #64]	@ (800e4e4 <prvCheckForValidListAndQueue+0x64>)
 800e4a2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e4a4:	4b12      	ldr	r3, [pc, #72]	@ (800e4f0 <prvCheckForValidListAndQueue+0x70>)
 800e4a6:	4a10      	ldr	r2, [pc, #64]	@ (800e4e8 <prvCheckForValidListAndQueue+0x68>)
 800e4a8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e4aa:	2300      	movs	r3, #0
 800e4ac:	9300      	str	r3, [sp, #0]
 800e4ae:	4b11      	ldr	r3, [pc, #68]	@ (800e4f4 <prvCheckForValidListAndQueue+0x74>)
 800e4b0:	4a11      	ldr	r2, [pc, #68]	@ (800e4f8 <prvCheckForValidListAndQueue+0x78>)
 800e4b2:	2110      	movs	r1, #16
 800e4b4:	200a      	movs	r0, #10
 800e4b6:	f7fd fcbf 	bl	800be38 <xQueueGenericCreateStatic>
 800e4ba:	4603      	mov	r3, r0
 800e4bc:	4a08      	ldr	r2, [pc, #32]	@ (800e4e0 <prvCheckForValidListAndQueue+0x60>)
 800e4be:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e4c0:	4b07      	ldr	r3, [pc, #28]	@ (800e4e0 <prvCheckForValidListAndQueue+0x60>)
 800e4c2:	681b      	ldr	r3, [r3, #0]
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d005      	beq.n	800e4d4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e4c8:	4b05      	ldr	r3, [pc, #20]	@ (800e4e0 <prvCheckForValidListAndQueue+0x60>)
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	490b      	ldr	r1, [pc, #44]	@ (800e4fc <prvCheckForValidListAndQueue+0x7c>)
 800e4ce:	4618      	mov	r0, r3
 800e4d0:	f7fe fb82 	bl	800cbd8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e4d4:	f000 f97a 	bl	800e7cc <vPortExitCritical>
}
 800e4d8:	bf00      	nop
 800e4da:	46bd      	mov	sp, r7
 800e4dc:	bd80      	pop	{r7, pc}
 800e4de:	bf00      	nop
 800e4e0:	20001308 	.word	0x20001308
 800e4e4:	200012d8 	.word	0x200012d8
 800e4e8:	200012ec 	.word	0x200012ec
 800e4ec:	20001300 	.word	0x20001300
 800e4f0:	20001304 	.word	0x20001304
 800e4f4:	200013b4 	.word	0x200013b4
 800e4f8:	20001314 	.word	0x20001314
 800e4fc:	0801342c 	.word	0x0801342c

0800e500 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e500:	b480      	push	{r7}
 800e502:	b085      	sub	sp, #20
 800e504:	af00      	add	r7, sp, #0
 800e506:	60f8      	str	r0, [r7, #12]
 800e508:	60b9      	str	r1, [r7, #8]
 800e50a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	3b04      	subs	r3, #4
 800e510:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800e518:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	3b04      	subs	r3, #4
 800e51e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e520:	68bb      	ldr	r3, [r7, #8]
 800e522:	f023 0201 	bic.w	r2, r3, #1
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	3b04      	subs	r3, #4
 800e52e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e530:	4a0c      	ldr	r2, [pc, #48]	@ (800e564 <pxPortInitialiseStack+0x64>)
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e536:	68fb      	ldr	r3, [r7, #12]
 800e538:	3b14      	subs	r3, #20
 800e53a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e53c:	687a      	ldr	r2, [r7, #4]
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	3b04      	subs	r3, #4
 800e546:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	f06f 0202 	mvn.w	r2, #2
 800e54e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	3b20      	subs	r3, #32
 800e554:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e556:	68fb      	ldr	r3, [r7, #12]
}
 800e558:	4618      	mov	r0, r3
 800e55a:	3714      	adds	r7, #20
 800e55c:	46bd      	mov	sp, r7
 800e55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e562:	4770      	bx	lr
 800e564:	0800e569 	.word	0x0800e569

0800e568 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e568:	b480      	push	{r7}
 800e56a:	b085      	sub	sp, #20
 800e56c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e56e:	2300      	movs	r3, #0
 800e570:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e572:	4b13      	ldr	r3, [pc, #76]	@ (800e5c0 <prvTaskExitError+0x58>)
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e57a:	d00b      	beq.n	800e594 <prvTaskExitError+0x2c>
	__asm volatile
 800e57c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e580:	f383 8811 	msr	BASEPRI, r3
 800e584:	f3bf 8f6f 	isb	sy
 800e588:	f3bf 8f4f 	dsb	sy
 800e58c:	60fb      	str	r3, [r7, #12]
}
 800e58e:	bf00      	nop
 800e590:	bf00      	nop
 800e592:	e7fd      	b.n	800e590 <prvTaskExitError+0x28>
	__asm volatile
 800e594:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e598:	f383 8811 	msr	BASEPRI, r3
 800e59c:	f3bf 8f6f 	isb	sy
 800e5a0:	f3bf 8f4f 	dsb	sy
 800e5a4:	60bb      	str	r3, [r7, #8]
}
 800e5a6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e5a8:	bf00      	nop
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d0fc      	beq.n	800e5aa <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e5b0:	bf00      	nop
 800e5b2:	bf00      	nop
 800e5b4:	3714      	adds	r7, #20
 800e5b6:	46bd      	mov	sp, r7
 800e5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5bc:	4770      	bx	lr
 800e5be:	bf00      	nop
 800e5c0:	2000013c 	.word	0x2000013c
	...

0800e5d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e5d0:	4b07      	ldr	r3, [pc, #28]	@ (800e5f0 <pxCurrentTCBConst2>)
 800e5d2:	6819      	ldr	r1, [r3, #0]
 800e5d4:	6808      	ldr	r0, [r1, #0]
 800e5d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5da:	f380 8809 	msr	PSP, r0
 800e5de:	f3bf 8f6f 	isb	sy
 800e5e2:	f04f 0000 	mov.w	r0, #0
 800e5e6:	f380 8811 	msr	BASEPRI, r0
 800e5ea:	4770      	bx	lr
 800e5ec:	f3af 8000 	nop.w

0800e5f0 <pxCurrentTCBConst2>:
 800e5f0:	20000dd8 	.word	0x20000dd8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e5f4:	bf00      	nop
 800e5f6:	bf00      	nop

0800e5f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e5f8:	4808      	ldr	r0, [pc, #32]	@ (800e61c <prvPortStartFirstTask+0x24>)
 800e5fa:	6800      	ldr	r0, [r0, #0]
 800e5fc:	6800      	ldr	r0, [r0, #0]
 800e5fe:	f380 8808 	msr	MSP, r0
 800e602:	f04f 0000 	mov.w	r0, #0
 800e606:	f380 8814 	msr	CONTROL, r0
 800e60a:	b662      	cpsie	i
 800e60c:	b661      	cpsie	f
 800e60e:	f3bf 8f4f 	dsb	sy
 800e612:	f3bf 8f6f 	isb	sy
 800e616:	df00      	svc	0
 800e618:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e61a:	bf00      	nop
 800e61c:	e000ed08 	.word	0xe000ed08

0800e620 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e620:	b580      	push	{r7, lr}
 800e622:	b086      	sub	sp, #24
 800e624:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e626:	4b47      	ldr	r3, [pc, #284]	@ (800e744 <xPortStartScheduler+0x124>)
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	4a47      	ldr	r2, [pc, #284]	@ (800e748 <xPortStartScheduler+0x128>)
 800e62c:	4293      	cmp	r3, r2
 800e62e:	d10b      	bne.n	800e648 <xPortStartScheduler+0x28>
	__asm volatile
 800e630:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e634:	f383 8811 	msr	BASEPRI, r3
 800e638:	f3bf 8f6f 	isb	sy
 800e63c:	f3bf 8f4f 	dsb	sy
 800e640:	613b      	str	r3, [r7, #16]
}
 800e642:	bf00      	nop
 800e644:	bf00      	nop
 800e646:	e7fd      	b.n	800e644 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e648:	4b3e      	ldr	r3, [pc, #248]	@ (800e744 <xPortStartScheduler+0x124>)
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	4a3f      	ldr	r2, [pc, #252]	@ (800e74c <xPortStartScheduler+0x12c>)
 800e64e:	4293      	cmp	r3, r2
 800e650:	d10b      	bne.n	800e66a <xPortStartScheduler+0x4a>
	__asm volatile
 800e652:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e656:	f383 8811 	msr	BASEPRI, r3
 800e65a:	f3bf 8f6f 	isb	sy
 800e65e:	f3bf 8f4f 	dsb	sy
 800e662:	60fb      	str	r3, [r7, #12]
}
 800e664:	bf00      	nop
 800e666:	bf00      	nop
 800e668:	e7fd      	b.n	800e666 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e66a:	4b39      	ldr	r3, [pc, #228]	@ (800e750 <xPortStartScheduler+0x130>)
 800e66c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e66e:	697b      	ldr	r3, [r7, #20]
 800e670:	781b      	ldrb	r3, [r3, #0]
 800e672:	b2db      	uxtb	r3, r3
 800e674:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e676:	697b      	ldr	r3, [r7, #20]
 800e678:	22ff      	movs	r2, #255	@ 0xff
 800e67a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e67c:	697b      	ldr	r3, [r7, #20]
 800e67e:	781b      	ldrb	r3, [r3, #0]
 800e680:	b2db      	uxtb	r3, r3
 800e682:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e684:	78fb      	ldrb	r3, [r7, #3]
 800e686:	b2db      	uxtb	r3, r3
 800e688:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800e68c:	b2da      	uxtb	r2, r3
 800e68e:	4b31      	ldr	r3, [pc, #196]	@ (800e754 <xPortStartScheduler+0x134>)
 800e690:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e692:	4b31      	ldr	r3, [pc, #196]	@ (800e758 <xPortStartScheduler+0x138>)
 800e694:	2207      	movs	r2, #7
 800e696:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e698:	e009      	b.n	800e6ae <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800e69a:	4b2f      	ldr	r3, [pc, #188]	@ (800e758 <xPortStartScheduler+0x138>)
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	3b01      	subs	r3, #1
 800e6a0:	4a2d      	ldr	r2, [pc, #180]	@ (800e758 <xPortStartScheduler+0x138>)
 800e6a2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e6a4:	78fb      	ldrb	r3, [r7, #3]
 800e6a6:	b2db      	uxtb	r3, r3
 800e6a8:	005b      	lsls	r3, r3, #1
 800e6aa:	b2db      	uxtb	r3, r3
 800e6ac:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e6ae:	78fb      	ldrb	r3, [r7, #3]
 800e6b0:	b2db      	uxtb	r3, r3
 800e6b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e6b6:	2b80      	cmp	r3, #128	@ 0x80
 800e6b8:	d0ef      	beq.n	800e69a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e6ba:	4b27      	ldr	r3, [pc, #156]	@ (800e758 <xPortStartScheduler+0x138>)
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	f1c3 0307 	rsb	r3, r3, #7
 800e6c2:	2b04      	cmp	r3, #4
 800e6c4:	d00b      	beq.n	800e6de <xPortStartScheduler+0xbe>
	__asm volatile
 800e6c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6ca:	f383 8811 	msr	BASEPRI, r3
 800e6ce:	f3bf 8f6f 	isb	sy
 800e6d2:	f3bf 8f4f 	dsb	sy
 800e6d6:	60bb      	str	r3, [r7, #8]
}
 800e6d8:	bf00      	nop
 800e6da:	bf00      	nop
 800e6dc:	e7fd      	b.n	800e6da <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e6de:	4b1e      	ldr	r3, [pc, #120]	@ (800e758 <xPortStartScheduler+0x138>)
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	021b      	lsls	r3, r3, #8
 800e6e4:	4a1c      	ldr	r2, [pc, #112]	@ (800e758 <xPortStartScheduler+0x138>)
 800e6e6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e6e8:	4b1b      	ldr	r3, [pc, #108]	@ (800e758 <xPortStartScheduler+0x138>)
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800e6f0:	4a19      	ldr	r2, [pc, #100]	@ (800e758 <xPortStartScheduler+0x138>)
 800e6f2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	b2da      	uxtb	r2, r3
 800e6f8:	697b      	ldr	r3, [r7, #20]
 800e6fa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e6fc:	4b17      	ldr	r3, [pc, #92]	@ (800e75c <xPortStartScheduler+0x13c>)
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	4a16      	ldr	r2, [pc, #88]	@ (800e75c <xPortStartScheduler+0x13c>)
 800e702:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800e706:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e708:	4b14      	ldr	r3, [pc, #80]	@ (800e75c <xPortStartScheduler+0x13c>)
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	4a13      	ldr	r2, [pc, #76]	@ (800e75c <xPortStartScheduler+0x13c>)
 800e70e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800e712:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e714:	f000 f8da 	bl	800e8cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e718:	4b11      	ldr	r3, [pc, #68]	@ (800e760 <xPortStartScheduler+0x140>)
 800e71a:	2200      	movs	r2, #0
 800e71c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e71e:	f000 f8f9 	bl	800e914 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e722:	4b10      	ldr	r3, [pc, #64]	@ (800e764 <xPortStartScheduler+0x144>)
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	4a0f      	ldr	r2, [pc, #60]	@ (800e764 <xPortStartScheduler+0x144>)
 800e728:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800e72c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e72e:	f7ff ff63 	bl	800e5f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e732:	f7fe ff1b 	bl	800d56c <vTaskSwitchContext>
	prvTaskExitError();
 800e736:	f7ff ff17 	bl	800e568 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e73a:	2300      	movs	r3, #0
}
 800e73c:	4618      	mov	r0, r3
 800e73e:	3718      	adds	r7, #24
 800e740:	46bd      	mov	sp, r7
 800e742:	bd80      	pop	{r7, pc}
 800e744:	e000ed00 	.word	0xe000ed00
 800e748:	410fc271 	.word	0x410fc271
 800e74c:	410fc270 	.word	0x410fc270
 800e750:	e000e400 	.word	0xe000e400
 800e754:	20001404 	.word	0x20001404
 800e758:	20001408 	.word	0x20001408
 800e75c:	e000ed20 	.word	0xe000ed20
 800e760:	2000013c 	.word	0x2000013c
 800e764:	e000ef34 	.word	0xe000ef34

0800e768 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e768:	b480      	push	{r7}
 800e76a:	b083      	sub	sp, #12
 800e76c:	af00      	add	r7, sp, #0
	__asm volatile
 800e76e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e772:	f383 8811 	msr	BASEPRI, r3
 800e776:	f3bf 8f6f 	isb	sy
 800e77a:	f3bf 8f4f 	dsb	sy
 800e77e:	607b      	str	r3, [r7, #4]
}
 800e780:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e782:	4b10      	ldr	r3, [pc, #64]	@ (800e7c4 <vPortEnterCritical+0x5c>)
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	3301      	adds	r3, #1
 800e788:	4a0e      	ldr	r2, [pc, #56]	@ (800e7c4 <vPortEnterCritical+0x5c>)
 800e78a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e78c:	4b0d      	ldr	r3, [pc, #52]	@ (800e7c4 <vPortEnterCritical+0x5c>)
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	2b01      	cmp	r3, #1
 800e792:	d110      	bne.n	800e7b6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e794:	4b0c      	ldr	r3, [pc, #48]	@ (800e7c8 <vPortEnterCritical+0x60>)
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	b2db      	uxtb	r3, r3
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d00b      	beq.n	800e7b6 <vPortEnterCritical+0x4e>
	__asm volatile
 800e79e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7a2:	f383 8811 	msr	BASEPRI, r3
 800e7a6:	f3bf 8f6f 	isb	sy
 800e7aa:	f3bf 8f4f 	dsb	sy
 800e7ae:	603b      	str	r3, [r7, #0]
}
 800e7b0:	bf00      	nop
 800e7b2:	bf00      	nop
 800e7b4:	e7fd      	b.n	800e7b2 <vPortEnterCritical+0x4a>
	}
}
 800e7b6:	bf00      	nop
 800e7b8:	370c      	adds	r7, #12
 800e7ba:	46bd      	mov	sp, r7
 800e7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7c0:	4770      	bx	lr
 800e7c2:	bf00      	nop
 800e7c4:	2000013c 	.word	0x2000013c
 800e7c8:	e000ed04 	.word	0xe000ed04

0800e7cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e7cc:	b480      	push	{r7}
 800e7ce:	b083      	sub	sp, #12
 800e7d0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e7d2:	4b12      	ldr	r3, [pc, #72]	@ (800e81c <vPortExitCritical+0x50>)
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d10b      	bne.n	800e7f2 <vPortExitCritical+0x26>
	__asm volatile
 800e7da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7de:	f383 8811 	msr	BASEPRI, r3
 800e7e2:	f3bf 8f6f 	isb	sy
 800e7e6:	f3bf 8f4f 	dsb	sy
 800e7ea:	607b      	str	r3, [r7, #4]
}
 800e7ec:	bf00      	nop
 800e7ee:	bf00      	nop
 800e7f0:	e7fd      	b.n	800e7ee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e7f2:	4b0a      	ldr	r3, [pc, #40]	@ (800e81c <vPortExitCritical+0x50>)
 800e7f4:	681b      	ldr	r3, [r3, #0]
 800e7f6:	3b01      	subs	r3, #1
 800e7f8:	4a08      	ldr	r2, [pc, #32]	@ (800e81c <vPortExitCritical+0x50>)
 800e7fa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e7fc:	4b07      	ldr	r3, [pc, #28]	@ (800e81c <vPortExitCritical+0x50>)
 800e7fe:	681b      	ldr	r3, [r3, #0]
 800e800:	2b00      	cmp	r3, #0
 800e802:	d105      	bne.n	800e810 <vPortExitCritical+0x44>
 800e804:	2300      	movs	r3, #0
 800e806:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e808:	683b      	ldr	r3, [r7, #0]
 800e80a:	f383 8811 	msr	BASEPRI, r3
}
 800e80e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e810:	bf00      	nop
 800e812:	370c      	adds	r7, #12
 800e814:	46bd      	mov	sp, r7
 800e816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e81a:	4770      	bx	lr
 800e81c:	2000013c 	.word	0x2000013c

0800e820 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e820:	f3ef 8009 	mrs	r0, PSP
 800e824:	f3bf 8f6f 	isb	sy
 800e828:	4b15      	ldr	r3, [pc, #84]	@ (800e880 <pxCurrentTCBConst>)
 800e82a:	681a      	ldr	r2, [r3, #0]
 800e82c:	f01e 0f10 	tst.w	lr, #16
 800e830:	bf08      	it	eq
 800e832:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e836:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e83a:	6010      	str	r0, [r2, #0]
 800e83c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e840:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800e844:	f380 8811 	msr	BASEPRI, r0
 800e848:	f3bf 8f4f 	dsb	sy
 800e84c:	f3bf 8f6f 	isb	sy
 800e850:	f7fe fe8c 	bl	800d56c <vTaskSwitchContext>
 800e854:	f04f 0000 	mov.w	r0, #0
 800e858:	f380 8811 	msr	BASEPRI, r0
 800e85c:	bc09      	pop	{r0, r3}
 800e85e:	6819      	ldr	r1, [r3, #0]
 800e860:	6808      	ldr	r0, [r1, #0]
 800e862:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e866:	f01e 0f10 	tst.w	lr, #16
 800e86a:	bf08      	it	eq
 800e86c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e870:	f380 8809 	msr	PSP, r0
 800e874:	f3bf 8f6f 	isb	sy
 800e878:	4770      	bx	lr
 800e87a:	bf00      	nop
 800e87c:	f3af 8000 	nop.w

0800e880 <pxCurrentTCBConst>:
 800e880:	20000dd8 	.word	0x20000dd8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e884:	bf00      	nop
 800e886:	bf00      	nop

0800e888 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e888:	b580      	push	{r7, lr}
 800e88a:	b082      	sub	sp, #8
 800e88c:	af00      	add	r7, sp, #0
	__asm volatile
 800e88e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e892:	f383 8811 	msr	BASEPRI, r3
 800e896:	f3bf 8f6f 	isb	sy
 800e89a:	f3bf 8f4f 	dsb	sy
 800e89e:	607b      	str	r3, [r7, #4]
}
 800e8a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e8a2:	f7fe fda9 	bl	800d3f8 <xTaskIncrementTick>
 800e8a6:	4603      	mov	r3, r0
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d003      	beq.n	800e8b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e8ac:	4b06      	ldr	r3, [pc, #24]	@ (800e8c8 <xPortSysTickHandler+0x40>)
 800e8ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e8b2:	601a      	str	r2, [r3, #0]
 800e8b4:	2300      	movs	r3, #0
 800e8b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e8b8:	683b      	ldr	r3, [r7, #0]
 800e8ba:	f383 8811 	msr	BASEPRI, r3
}
 800e8be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e8c0:	bf00      	nop
 800e8c2:	3708      	adds	r7, #8
 800e8c4:	46bd      	mov	sp, r7
 800e8c6:	bd80      	pop	{r7, pc}
 800e8c8:	e000ed04 	.word	0xe000ed04

0800e8cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e8cc:	b480      	push	{r7}
 800e8ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e8d0:	4b0b      	ldr	r3, [pc, #44]	@ (800e900 <vPortSetupTimerInterrupt+0x34>)
 800e8d2:	2200      	movs	r2, #0
 800e8d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e8d6:	4b0b      	ldr	r3, [pc, #44]	@ (800e904 <vPortSetupTimerInterrupt+0x38>)
 800e8d8:	2200      	movs	r2, #0
 800e8da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e8dc:	4b0a      	ldr	r3, [pc, #40]	@ (800e908 <vPortSetupTimerInterrupt+0x3c>)
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	4a0a      	ldr	r2, [pc, #40]	@ (800e90c <vPortSetupTimerInterrupt+0x40>)
 800e8e2:	fba2 2303 	umull	r2, r3, r2, r3
 800e8e6:	099b      	lsrs	r3, r3, #6
 800e8e8:	4a09      	ldr	r2, [pc, #36]	@ (800e910 <vPortSetupTimerInterrupt+0x44>)
 800e8ea:	3b01      	subs	r3, #1
 800e8ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e8ee:	4b04      	ldr	r3, [pc, #16]	@ (800e900 <vPortSetupTimerInterrupt+0x34>)
 800e8f0:	2207      	movs	r2, #7
 800e8f2:	601a      	str	r2, [r3, #0]
}
 800e8f4:	bf00      	nop
 800e8f6:	46bd      	mov	sp, r7
 800e8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8fc:	4770      	bx	lr
 800e8fe:	bf00      	nop
 800e900:	e000e010 	.word	0xe000e010
 800e904:	e000e018 	.word	0xe000e018
 800e908:	20000020 	.word	0x20000020
 800e90c:	10624dd3 	.word	0x10624dd3
 800e910:	e000e014 	.word	0xe000e014

0800e914 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e914:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800e924 <vPortEnableVFP+0x10>
 800e918:	6801      	ldr	r1, [r0, #0]
 800e91a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800e91e:	6001      	str	r1, [r0, #0]
 800e920:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e922:	bf00      	nop
 800e924:	e000ed88 	.word	0xe000ed88

0800e928 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e928:	b480      	push	{r7}
 800e92a:	b085      	sub	sp, #20
 800e92c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e92e:	f3ef 8305 	mrs	r3, IPSR
 800e932:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e934:	68fb      	ldr	r3, [r7, #12]
 800e936:	2b0f      	cmp	r3, #15
 800e938:	d915      	bls.n	800e966 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e93a:	4a18      	ldr	r2, [pc, #96]	@ (800e99c <vPortValidateInterruptPriority+0x74>)
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	4413      	add	r3, r2
 800e940:	781b      	ldrb	r3, [r3, #0]
 800e942:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e944:	4b16      	ldr	r3, [pc, #88]	@ (800e9a0 <vPortValidateInterruptPriority+0x78>)
 800e946:	781b      	ldrb	r3, [r3, #0]
 800e948:	7afa      	ldrb	r2, [r7, #11]
 800e94a:	429a      	cmp	r2, r3
 800e94c:	d20b      	bcs.n	800e966 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800e94e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e952:	f383 8811 	msr	BASEPRI, r3
 800e956:	f3bf 8f6f 	isb	sy
 800e95a:	f3bf 8f4f 	dsb	sy
 800e95e:	607b      	str	r3, [r7, #4]
}
 800e960:	bf00      	nop
 800e962:	bf00      	nop
 800e964:	e7fd      	b.n	800e962 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e966:	4b0f      	ldr	r3, [pc, #60]	@ (800e9a4 <vPortValidateInterruptPriority+0x7c>)
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800e96e:	4b0e      	ldr	r3, [pc, #56]	@ (800e9a8 <vPortValidateInterruptPriority+0x80>)
 800e970:	681b      	ldr	r3, [r3, #0]
 800e972:	429a      	cmp	r2, r3
 800e974:	d90b      	bls.n	800e98e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800e976:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e97a:	f383 8811 	msr	BASEPRI, r3
 800e97e:	f3bf 8f6f 	isb	sy
 800e982:	f3bf 8f4f 	dsb	sy
 800e986:	603b      	str	r3, [r7, #0]
}
 800e988:	bf00      	nop
 800e98a:	bf00      	nop
 800e98c:	e7fd      	b.n	800e98a <vPortValidateInterruptPriority+0x62>
	}
 800e98e:	bf00      	nop
 800e990:	3714      	adds	r7, #20
 800e992:	46bd      	mov	sp, r7
 800e994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e998:	4770      	bx	lr
 800e99a:	bf00      	nop
 800e99c:	e000e3f0 	.word	0xe000e3f0
 800e9a0:	20001404 	.word	0x20001404
 800e9a4:	e000ed0c 	.word	0xe000ed0c
 800e9a8:	20001408 	.word	0x20001408

0800e9ac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e9ac:	b580      	push	{r7, lr}
 800e9ae:	b08a      	sub	sp, #40	@ 0x28
 800e9b0:	af00      	add	r7, sp, #0
 800e9b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e9b4:	2300      	movs	r3, #0
 800e9b6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e9b8:	f7fe fc50 	bl	800d25c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e9bc:	4b5c      	ldr	r3, [pc, #368]	@ (800eb30 <pvPortMalloc+0x184>)
 800e9be:	681b      	ldr	r3, [r3, #0]
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d101      	bne.n	800e9c8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e9c4:	f000 f924 	bl	800ec10 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e9c8:	4b5a      	ldr	r3, [pc, #360]	@ (800eb34 <pvPortMalloc+0x188>)
 800e9ca:	681a      	ldr	r2, [r3, #0]
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	4013      	ands	r3, r2
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	f040 8095 	bne.w	800eb00 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d01e      	beq.n	800ea1a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800e9dc:	2208      	movs	r2, #8
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	4413      	add	r3, r2
 800e9e2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	f003 0307 	and.w	r3, r3, #7
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d015      	beq.n	800ea1a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	f023 0307 	bic.w	r3, r3, #7
 800e9f4:	3308      	adds	r3, #8
 800e9f6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	f003 0307 	and.w	r3, r3, #7
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d00b      	beq.n	800ea1a <pvPortMalloc+0x6e>
	__asm volatile
 800ea02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea06:	f383 8811 	msr	BASEPRI, r3
 800ea0a:	f3bf 8f6f 	isb	sy
 800ea0e:	f3bf 8f4f 	dsb	sy
 800ea12:	617b      	str	r3, [r7, #20]
}
 800ea14:	bf00      	nop
 800ea16:	bf00      	nop
 800ea18:	e7fd      	b.n	800ea16 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d06f      	beq.n	800eb00 <pvPortMalloc+0x154>
 800ea20:	4b45      	ldr	r3, [pc, #276]	@ (800eb38 <pvPortMalloc+0x18c>)
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	687a      	ldr	r2, [r7, #4]
 800ea26:	429a      	cmp	r2, r3
 800ea28:	d86a      	bhi.n	800eb00 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ea2a:	4b44      	ldr	r3, [pc, #272]	@ (800eb3c <pvPortMalloc+0x190>)
 800ea2c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ea2e:	4b43      	ldr	r3, [pc, #268]	@ (800eb3c <pvPortMalloc+0x190>)
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ea34:	e004      	b.n	800ea40 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800ea36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea38:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ea3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ea40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea42:	685b      	ldr	r3, [r3, #4]
 800ea44:	687a      	ldr	r2, [r7, #4]
 800ea46:	429a      	cmp	r2, r3
 800ea48:	d903      	bls.n	800ea52 <pvPortMalloc+0xa6>
 800ea4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea4c:	681b      	ldr	r3, [r3, #0]
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d1f1      	bne.n	800ea36 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ea52:	4b37      	ldr	r3, [pc, #220]	@ (800eb30 <pvPortMalloc+0x184>)
 800ea54:	681b      	ldr	r3, [r3, #0]
 800ea56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ea58:	429a      	cmp	r2, r3
 800ea5a:	d051      	beq.n	800eb00 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ea5c:	6a3b      	ldr	r3, [r7, #32]
 800ea5e:	681b      	ldr	r3, [r3, #0]
 800ea60:	2208      	movs	r2, #8
 800ea62:	4413      	add	r3, r2
 800ea64:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ea66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea68:	681a      	ldr	r2, [r3, #0]
 800ea6a:	6a3b      	ldr	r3, [r7, #32]
 800ea6c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ea6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea70:	685a      	ldr	r2, [r3, #4]
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	1ad2      	subs	r2, r2, r3
 800ea76:	2308      	movs	r3, #8
 800ea78:	005b      	lsls	r3, r3, #1
 800ea7a:	429a      	cmp	r2, r3
 800ea7c:	d920      	bls.n	800eac0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ea7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	4413      	add	r3, r2
 800ea84:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ea86:	69bb      	ldr	r3, [r7, #24]
 800ea88:	f003 0307 	and.w	r3, r3, #7
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d00b      	beq.n	800eaa8 <pvPortMalloc+0xfc>
	__asm volatile
 800ea90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea94:	f383 8811 	msr	BASEPRI, r3
 800ea98:	f3bf 8f6f 	isb	sy
 800ea9c:	f3bf 8f4f 	dsb	sy
 800eaa0:	613b      	str	r3, [r7, #16]
}
 800eaa2:	bf00      	nop
 800eaa4:	bf00      	nop
 800eaa6:	e7fd      	b.n	800eaa4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800eaa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eaaa:	685a      	ldr	r2, [r3, #4]
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	1ad2      	subs	r2, r2, r3
 800eab0:	69bb      	ldr	r3, [r7, #24]
 800eab2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800eab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eab6:	687a      	ldr	r2, [r7, #4]
 800eab8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800eaba:	69b8      	ldr	r0, [r7, #24]
 800eabc:	f000 f90a 	bl	800ecd4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800eac0:	4b1d      	ldr	r3, [pc, #116]	@ (800eb38 <pvPortMalloc+0x18c>)
 800eac2:	681a      	ldr	r2, [r3, #0]
 800eac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eac6:	685b      	ldr	r3, [r3, #4]
 800eac8:	1ad3      	subs	r3, r2, r3
 800eaca:	4a1b      	ldr	r2, [pc, #108]	@ (800eb38 <pvPortMalloc+0x18c>)
 800eacc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800eace:	4b1a      	ldr	r3, [pc, #104]	@ (800eb38 <pvPortMalloc+0x18c>)
 800ead0:	681a      	ldr	r2, [r3, #0]
 800ead2:	4b1b      	ldr	r3, [pc, #108]	@ (800eb40 <pvPortMalloc+0x194>)
 800ead4:	681b      	ldr	r3, [r3, #0]
 800ead6:	429a      	cmp	r2, r3
 800ead8:	d203      	bcs.n	800eae2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800eada:	4b17      	ldr	r3, [pc, #92]	@ (800eb38 <pvPortMalloc+0x18c>)
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	4a18      	ldr	r2, [pc, #96]	@ (800eb40 <pvPortMalloc+0x194>)
 800eae0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800eae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eae4:	685a      	ldr	r2, [r3, #4]
 800eae6:	4b13      	ldr	r3, [pc, #76]	@ (800eb34 <pvPortMalloc+0x188>)
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	431a      	orrs	r2, r3
 800eaec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eaee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800eaf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eaf2:	2200      	movs	r2, #0
 800eaf4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800eaf6:	4b13      	ldr	r3, [pc, #76]	@ (800eb44 <pvPortMalloc+0x198>)
 800eaf8:	681b      	ldr	r3, [r3, #0]
 800eafa:	3301      	adds	r3, #1
 800eafc:	4a11      	ldr	r2, [pc, #68]	@ (800eb44 <pvPortMalloc+0x198>)
 800eafe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800eb00:	f7fe fbba 	bl	800d278 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800eb04:	69fb      	ldr	r3, [r7, #28]
 800eb06:	f003 0307 	and.w	r3, r3, #7
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d00b      	beq.n	800eb26 <pvPortMalloc+0x17a>
	__asm volatile
 800eb0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb12:	f383 8811 	msr	BASEPRI, r3
 800eb16:	f3bf 8f6f 	isb	sy
 800eb1a:	f3bf 8f4f 	dsb	sy
 800eb1e:	60fb      	str	r3, [r7, #12]
}
 800eb20:	bf00      	nop
 800eb22:	bf00      	nop
 800eb24:	e7fd      	b.n	800eb22 <pvPortMalloc+0x176>
	return pvReturn;
 800eb26:	69fb      	ldr	r3, [r7, #28]
}
 800eb28:	4618      	mov	r0, r3
 800eb2a:	3728      	adds	r7, #40	@ 0x28
 800eb2c:	46bd      	mov	sp, r7
 800eb2e:	bd80      	pop	{r7, pc}
 800eb30:	20010e14 	.word	0x20010e14
 800eb34:	20010e28 	.word	0x20010e28
 800eb38:	20010e18 	.word	0x20010e18
 800eb3c:	20010e0c 	.word	0x20010e0c
 800eb40:	20010e1c 	.word	0x20010e1c
 800eb44:	20010e20 	.word	0x20010e20

0800eb48 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800eb48:	b580      	push	{r7, lr}
 800eb4a:	b086      	sub	sp, #24
 800eb4c:	af00      	add	r7, sp, #0
 800eb4e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d04f      	beq.n	800ebfa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800eb5a:	2308      	movs	r3, #8
 800eb5c:	425b      	negs	r3, r3
 800eb5e:	697a      	ldr	r2, [r7, #20]
 800eb60:	4413      	add	r3, r2
 800eb62:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800eb64:	697b      	ldr	r3, [r7, #20]
 800eb66:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800eb68:	693b      	ldr	r3, [r7, #16]
 800eb6a:	685a      	ldr	r2, [r3, #4]
 800eb6c:	4b25      	ldr	r3, [pc, #148]	@ (800ec04 <vPortFree+0xbc>)
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	4013      	ands	r3, r2
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d10b      	bne.n	800eb8e <vPortFree+0x46>
	__asm volatile
 800eb76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb7a:	f383 8811 	msr	BASEPRI, r3
 800eb7e:	f3bf 8f6f 	isb	sy
 800eb82:	f3bf 8f4f 	dsb	sy
 800eb86:	60fb      	str	r3, [r7, #12]
}
 800eb88:	bf00      	nop
 800eb8a:	bf00      	nop
 800eb8c:	e7fd      	b.n	800eb8a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800eb8e:	693b      	ldr	r3, [r7, #16]
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d00b      	beq.n	800ebae <vPortFree+0x66>
	__asm volatile
 800eb96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb9a:	f383 8811 	msr	BASEPRI, r3
 800eb9e:	f3bf 8f6f 	isb	sy
 800eba2:	f3bf 8f4f 	dsb	sy
 800eba6:	60bb      	str	r3, [r7, #8]
}
 800eba8:	bf00      	nop
 800ebaa:	bf00      	nop
 800ebac:	e7fd      	b.n	800ebaa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ebae:	693b      	ldr	r3, [r7, #16]
 800ebb0:	685a      	ldr	r2, [r3, #4]
 800ebb2:	4b14      	ldr	r3, [pc, #80]	@ (800ec04 <vPortFree+0xbc>)
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	4013      	ands	r3, r2
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d01e      	beq.n	800ebfa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ebbc:	693b      	ldr	r3, [r7, #16]
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d11a      	bne.n	800ebfa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ebc4:	693b      	ldr	r3, [r7, #16]
 800ebc6:	685a      	ldr	r2, [r3, #4]
 800ebc8:	4b0e      	ldr	r3, [pc, #56]	@ (800ec04 <vPortFree+0xbc>)
 800ebca:	681b      	ldr	r3, [r3, #0]
 800ebcc:	43db      	mvns	r3, r3
 800ebce:	401a      	ands	r2, r3
 800ebd0:	693b      	ldr	r3, [r7, #16]
 800ebd2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ebd4:	f7fe fb42 	bl	800d25c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ebd8:	693b      	ldr	r3, [r7, #16]
 800ebda:	685a      	ldr	r2, [r3, #4]
 800ebdc:	4b0a      	ldr	r3, [pc, #40]	@ (800ec08 <vPortFree+0xc0>)
 800ebde:	681b      	ldr	r3, [r3, #0]
 800ebe0:	4413      	add	r3, r2
 800ebe2:	4a09      	ldr	r2, [pc, #36]	@ (800ec08 <vPortFree+0xc0>)
 800ebe4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ebe6:	6938      	ldr	r0, [r7, #16]
 800ebe8:	f000 f874 	bl	800ecd4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ebec:	4b07      	ldr	r3, [pc, #28]	@ (800ec0c <vPortFree+0xc4>)
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	3301      	adds	r3, #1
 800ebf2:	4a06      	ldr	r2, [pc, #24]	@ (800ec0c <vPortFree+0xc4>)
 800ebf4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ebf6:	f7fe fb3f 	bl	800d278 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ebfa:	bf00      	nop
 800ebfc:	3718      	adds	r7, #24
 800ebfe:	46bd      	mov	sp, r7
 800ec00:	bd80      	pop	{r7, pc}
 800ec02:	bf00      	nop
 800ec04:	20010e28 	.word	0x20010e28
 800ec08:	20010e18 	.word	0x20010e18
 800ec0c:	20010e24 	.word	0x20010e24

0800ec10 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ec10:	b480      	push	{r7}
 800ec12:	b085      	sub	sp, #20
 800ec14:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ec16:	f44f 437a 	mov.w	r3, #64000	@ 0xfa00
 800ec1a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ec1c:	4b27      	ldr	r3, [pc, #156]	@ (800ecbc <prvHeapInit+0xac>)
 800ec1e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	f003 0307 	and.w	r3, r3, #7
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d00c      	beq.n	800ec44 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	3307      	adds	r3, #7
 800ec2e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	f023 0307 	bic.w	r3, r3, #7
 800ec36:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ec38:	68ba      	ldr	r2, [r7, #8]
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	1ad3      	subs	r3, r2, r3
 800ec3e:	4a1f      	ldr	r2, [pc, #124]	@ (800ecbc <prvHeapInit+0xac>)
 800ec40:	4413      	add	r3, r2
 800ec42:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ec48:	4a1d      	ldr	r2, [pc, #116]	@ (800ecc0 <prvHeapInit+0xb0>)
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ec4e:	4b1c      	ldr	r3, [pc, #112]	@ (800ecc0 <prvHeapInit+0xb0>)
 800ec50:	2200      	movs	r2, #0
 800ec52:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	68ba      	ldr	r2, [r7, #8]
 800ec58:	4413      	add	r3, r2
 800ec5a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ec5c:	2208      	movs	r2, #8
 800ec5e:	68fb      	ldr	r3, [r7, #12]
 800ec60:	1a9b      	subs	r3, r3, r2
 800ec62:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	f023 0307 	bic.w	r3, r3, #7
 800ec6a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	4a15      	ldr	r2, [pc, #84]	@ (800ecc4 <prvHeapInit+0xb4>)
 800ec70:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ec72:	4b14      	ldr	r3, [pc, #80]	@ (800ecc4 <prvHeapInit+0xb4>)
 800ec74:	681b      	ldr	r3, [r3, #0]
 800ec76:	2200      	movs	r2, #0
 800ec78:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ec7a:	4b12      	ldr	r3, [pc, #72]	@ (800ecc4 <prvHeapInit+0xb4>)
 800ec7c:	681b      	ldr	r3, [r3, #0]
 800ec7e:	2200      	movs	r2, #0
 800ec80:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ec86:	683b      	ldr	r3, [r7, #0]
 800ec88:	68fa      	ldr	r2, [r7, #12]
 800ec8a:	1ad2      	subs	r2, r2, r3
 800ec8c:	683b      	ldr	r3, [r7, #0]
 800ec8e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ec90:	4b0c      	ldr	r3, [pc, #48]	@ (800ecc4 <prvHeapInit+0xb4>)
 800ec92:	681a      	ldr	r2, [r3, #0]
 800ec94:	683b      	ldr	r3, [r7, #0]
 800ec96:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ec98:	683b      	ldr	r3, [r7, #0]
 800ec9a:	685b      	ldr	r3, [r3, #4]
 800ec9c:	4a0a      	ldr	r2, [pc, #40]	@ (800ecc8 <prvHeapInit+0xb8>)
 800ec9e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800eca0:	683b      	ldr	r3, [r7, #0]
 800eca2:	685b      	ldr	r3, [r3, #4]
 800eca4:	4a09      	ldr	r2, [pc, #36]	@ (800eccc <prvHeapInit+0xbc>)
 800eca6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800eca8:	4b09      	ldr	r3, [pc, #36]	@ (800ecd0 <prvHeapInit+0xc0>)
 800ecaa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800ecae:	601a      	str	r2, [r3, #0]
}
 800ecb0:	bf00      	nop
 800ecb2:	3714      	adds	r7, #20
 800ecb4:	46bd      	mov	sp, r7
 800ecb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecba:	4770      	bx	lr
 800ecbc:	2000140c 	.word	0x2000140c
 800ecc0:	20010e0c 	.word	0x20010e0c
 800ecc4:	20010e14 	.word	0x20010e14
 800ecc8:	20010e1c 	.word	0x20010e1c
 800eccc:	20010e18 	.word	0x20010e18
 800ecd0:	20010e28 	.word	0x20010e28

0800ecd4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ecd4:	b480      	push	{r7}
 800ecd6:	b085      	sub	sp, #20
 800ecd8:	af00      	add	r7, sp, #0
 800ecda:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ecdc:	4b28      	ldr	r3, [pc, #160]	@ (800ed80 <prvInsertBlockIntoFreeList+0xac>)
 800ecde:	60fb      	str	r3, [r7, #12]
 800ece0:	e002      	b.n	800ece8 <prvInsertBlockIntoFreeList+0x14>
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	60fb      	str	r3, [r7, #12]
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	681b      	ldr	r3, [r3, #0]
 800ecec:	687a      	ldr	r2, [r7, #4]
 800ecee:	429a      	cmp	r2, r3
 800ecf0:	d8f7      	bhi.n	800ece2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	685b      	ldr	r3, [r3, #4]
 800ecfa:	68ba      	ldr	r2, [r7, #8]
 800ecfc:	4413      	add	r3, r2
 800ecfe:	687a      	ldr	r2, [r7, #4]
 800ed00:	429a      	cmp	r2, r3
 800ed02:	d108      	bne.n	800ed16 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ed04:	68fb      	ldr	r3, [r7, #12]
 800ed06:	685a      	ldr	r2, [r3, #4]
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	685b      	ldr	r3, [r3, #4]
 800ed0c:	441a      	add	r2, r3
 800ed0e:	68fb      	ldr	r3, [r7, #12]
 800ed10:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ed12:	68fb      	ldr	r3, [r7, #12]
 800ed14:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	685b      	ldr	r3, [r3, #4]
 800ed1e:	68ba      	ldr	r2, [r7, #8]
 800ed20:	441a      	add	r2, r3
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	681b      	ldr	r3, [r3, #0]
 800ed26:	429a      	cmp	r2, r3
 800ed28:	d118      	bne.n	800ed5c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ed2a:	68fb      	ldr	r3, [r7, #12]
 800ed2c:	681a      	ldr	r2, [r3, #0]
 800ed2e:	4b15      	ldr	r3, [pc, #84]	@ (800ed84 <prvInsertBlockIntoFreeList+0xb0>)
 800ed30:	681b      	ldr	r3, [r3, #0]
 800ed32:	429a      	cmp	r2, r3
 800ed34:	d00d      	beq.n	800ed52 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	685a      	ldr	r2, [r3, #4]
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	681b      	ldr	r3, [r3, #0]
 800ed3e:	685b      	ldr	r3, [r3, #4]
 800ed40:	441a      	add	r2, r3
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ed46:	68fb      	ldr	r3, [r7, #12]
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	681a      	ldr	r2, [r3, #0]
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	601a      	str	r2, [r3, #0]
 800ed50:	e008      	b.n	800ed64 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ed52:	4b0c      	ldr	r3, [pc, #48]	@ (800ed84 <prvInsertBlockIntoFreeList+0xb0>)
 800ed54:	681a      	ldr	r2, [r3, #0]
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	601a      	str	r2, [r3, #0]
 800ed5a:	e003      	b.n	800ed64 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	681a      	ldr	r2, [r3, #0]
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ed64:	68fa      	ldr	r2, [r7, #12]
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	429a      	cmp	r2, r3
 800ed6a:	d002      	beq.n	800ed72 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	687a      	ldr	r2, [r7, #4]
 800ed70:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ed72:	bf00      	nop
 800ed74:	3714      	adds	r7, #20
 800ed76:	46bd      	mov	sp, r7
 800ed78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed7c:	4770      	bx	lr
 800ed7e:	bf00      	nop
 800ed80:	20010e0c 	.word	0x20010e0c
 800ed84:	20010e14 	.word	0x20010e14

0800ed88 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800ed88:	b580      	push	{r7, lr}
 800ed8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800ed8c:	2200      	movs	r2, #0
 800ed8e:	4912      	ldr	r1, [pc, #72]	@ (800edd8 <MX_USB_Device_Init+0x50>)
 800ed90:	4812      	ldr	r0, [pc, #72]	@ (800eddc <MX_USB_Device_Init+0x54>)
 800ed92:	f7fb fa23 	bl	800a1dc <USBD_Init>
 800ed96:	4603      	mov	r3, r0
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d001      	beq.n	800eda0 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800ed9c:	f7f4 f97e 	bl	800309c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800eda0:	490f      	ldr	r1, [pc, #60]	@ (800ede0 <MX_USB_Device_Init+0x58>)
 800eda2:	480e      	ldr	r0, [pc, #56]	@ (800eddc <MX_USB_Device_Init+0x54>)
 800eda4:	f7fb fa4a 	bl	800a23c <USBD_RegisterClass>
 800eda8:	4603      	mov	r3, r0
 800edaa:	2b00      	cmp	r3, #0
 800edac:	d001      	beq.n	800edb2 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800edae:	f7f4 f975 	bl	800309c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800edb2:	490c      	ldr	r1, [pc, #48]	@ (800ede4 <MX_USB_Device_Init+0x5c>)
 800edb4:	4809      	ldr	r0, [pc, #36]	@ (800eddc <MX_USB_Device_Init+0x54>)
 800edb6:	f7fb f96b 	bl	800a090 <USBD_CDC_RegisterInterface>
 800edba:	4603      	mov	r3, r0
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d001      	beq.n	800edc4 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800edc0:	f7f4 f96c 	bl	800309c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800edc4:	4805      	ldr	r0, [pc, #20]	@ (800eddc <MX_USB_Device_Init+0x54>)
 800edc6:	f7fb fa60 	bl	800a28a <USBD_Start>
 800edca:	4603      	mov	r3, r0
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d001      	beq.n	800edd4 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800edd0:	f7f4 f964 	bl	800309c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800edd4:	bf00      	nop
 800edd6:	bd80      	pop	{r7, pc}
 800edd8:	20000154 	.word	0x20000154
 800eddc:	20010e2c 	.word	0x20010e2c
 800ede0:	20000038 	.word	0x20000038
 800ede4:	20000140 	.word	0x20000140

0800ede8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ede8:	b580      	push	{r7, lr}
 800edea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800edec:	2200      	movs	r2, #0
 800edee:	4905      	ldr	r1, [pc, #20]	@ (800ee04 <CDC_Init_FS+0x1c>)
 800edf0:	4805      	ldr	r0, [pc, #20]	@ (800ee08 <CDC_Init_FS+0x20>)
 800edf2:	f7fb f962 	bl	800a0ba <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800edf6:	4905      	ldr	r1, [pc, #20]	@ (800ee0c <CDC_Init_FS+0x24>)
 800edf8:	4803      	ldr	r0, [pc, #12]	@ (800ee08 <CDC_Init_FS+0x20>)
 800edfa:	f7fb f97c 	bl	800a0f6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800edfe:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ee00:	4618      	mov	r0, r3
 800ee02:	bd80      	pop	{r7, pc}
 800ee04:	200118fc 	.word	0x200118fc
 800ee08:	20010e2c 	.word	0x20010e2c
 800ee0c:	200110fc 	.word	0x200110fc

0800ee10 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ee10:	b480      	push	{r7}
 800ee12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ee14:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ee16:	4618      	mov	r0, r3
 800ee18:	46bd      	mov	sp, r7
 800ee1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee1e:	4770      	bx	lr

0800ee20 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ee20:	b480      	push	{r7}
 800ee22:	b083      	sub	sp, #12
 800ee24:	af00      	add	r7, sp, #0
 800ee26:	4603      	mov	r3, r0
 800ee28:	6039      	str	r1, [r7, #0]
 800ee2a:	71fb      	strb	r3, [r7, #7]
 800ee2c:	4613      	mov	r3, r2
 800ee2e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ee30:	79fb      	ldrb	r3, [r7, #7]
 800ee32:	2b23      	cmp	r3, #35	@ 0x23
 800ee34:	d84a      	bhi.n	800eecc <CDC_Control_FS+0xac>
 800ee36:	a201      	add	r2, pc, #4	@ (adr r2, 800ee3c <CDC_Control_FS+0x1c>)
 800ee38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee3c:	0800eecd 	.word	0x0800eecd
 800ee40:	0800eecd 	.word	0x0800eecd
 800ee44:	0800eecd 	.word	0x0800eecd
 800ee48:	0800eecd 	.word	0x0800eecd
 800ee4c:	0800eecd 	.word	0x0800eecd
 800ee50:	0800eecd 	.word	0x0800eecd
 800ee54:	0800eecd 	.word	0x0800eecd
 800ee58:	0800eecd 	.word	0x0800eecd
 800ee5c:	0800eecd 	.word	0x0800eecd
 800ee60:	0800eecd 	.word	0x0800eecd
 800ee64:	0800eecd 	.word	0x0800eecd
 800ee68:	0800eecd 	.word	0x0800eecd
 800ee6c:	0800eecd 	.word	0x0800eecd
 800ee70:	0800eecd 	.word	0x0800eecd
 800ee74:	0800eecd 	.word	0x0800eecd
 800ee78:	0800eecd 	.word	0x0800eecd
 800ee7c:	0800eecd 	.word	0x0800eecd
 800ee80:	0800eecd 	.word	0x0800eecd
 800ee84:	0800eecd 	.word	0x0800eecd
 800ee88:	0800eecd 	.word	0x0800eecd
 800ee8c:	0800eecd 	.word	0x0800eecd
 800ee90:	0800eecd 	.word	0x0800eecd
 800ee94:	0800eecd 	.word	0x0800eecd
 800ee98:	0800eecd 	.word	0x0800eecd
 800ee9c:	0800eecd 	.word	0x0800eecd
 800eea0:	0800eecd 	.word	0x0800eecd
 800eea4:	0800eecd 	.word	0x0800eecd
 800eea8:	0800eecd 	.word	0x0800eecd
 800eeac:	0800eecd 	.word	0x0800eecd
 800eeb0:	0800eecd 	.word	0x0800eecd
 800eeb4:	0800eecd 	.word	0x0800eecd
 800eeb8:	0800eecd 	.word	0x0800eecd
 800eebc:	0800eecd 	.word	0x0800eecd
 800eec0:	0800eecd 	.word	0x0800eecd
 800eec4:	0800eecd 	.word	0x0800eecd
 800eec8:	0800eecd 	.word	0x0800eecd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800eecc:	bf00      	nop
  }

  return (USBD_OK);
 800eece:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800eed0:	4618      	mov	r0, r3
 800eed2:	370c      	adds	r7, #12
 800eed4:	46bd      	mov	sp, r7
 800eed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeda:	4770      	bx	lr

0800eedc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800eedc:	b580      	push	{r7, lr}
 800eede:	b082      	sub	sp, #8
 800eee0:	af00      	add	r7, sp, #0
 800eee2:	6078      	str	r0, [r7, #4]
 800eee4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800eee6:	6879      	ldr	r1, [r7, #4]
 800eee8:	4805      	ldr	r0, [pc, #20]	@ (800ef00 <CDC_Receive_FS+0x24>)
 800eeea:	f7fb f904 	bl	800a0f6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800eeee:	4804      	ldr	r0, [pc, #16]	@ (800ef00 <CDC_Receive_FS+0x24>)
 800eef0:	f7fb f94a 	bl	800a188 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800eef4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800eef6:	4618      	mov	r0, r3
 800eef8:	3708      	adds	r7, #8
 800eefa:	46bd      	mov	sp, r7
 800eefc:	bd80      	pop	{r7, pc}
 800eefe:	bf00      	nop
 800ef00:	20010e2c 	.word	0x20010e2c

0800ef04 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800ef04:	b580      	push	{r7, lr}
 800ef06:	b084      	sub	sp, #16
 800ef08:	af00      	add	r7, sp, #0
 800ef0a:	6078      	str	r0, [r7, #4]
 800ef0c:	460b      	mov	r3, r1
 800ef0e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800ef10:	2300      	movs	r3, #0
 800ef12:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800ef14:	4b0d      	ldr	r3, [pc, #52]	@ (800ef4c <CDC_Transmit_FS+0x48>)
 800ef16:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ef1a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800ef1c:	68bb      	ldr	r3, [r7, #8]
 800ef1e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	d001      	beq.n	800ef2a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800ef26:	2301      	movs	r3, #1
 800ef28:	e00b      	b.n	800ef42 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800ef2a:	887b      	ldrh	r3, [r7, #2]
 800ef2c:	461a      	mov	r2, r3
 800ef2e:	6879      	ldr	r1, [r7, #4]
 800ef30:	4806      	ldr	r0, [pc, #24]	@ (800ef4c <CDC_Transmit_FS+0x48>)
 800ef32:	f7fb f8c2 	bl	800a0ba <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800ef36:	4805      	ldr	r0, [pc, #20]	@ (800ef4c <CDC_Transmit_FS+0x48>)
 800ef38:	f7fb f8f6 	bl	800a128 <USBD_CDC_TransmitPacket>
 800ef3c:	4603      	mov	r3, r0
 800ef3e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800ef40:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef42:	4618      	mov	r0, r3
 800ef44:	3710      	adds	r7, #16
 800ef46:	46bd      	mov	sp, r7
 800ef48:	bd80      	pop	{r7, pc}
 800ef4a:	bf00      	nop
 800ef4c:	20010e2c 	.word	0x20010e2c

0800ef50 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800ef50:	b480      	push	{r7}
 800ef52:	b087      	sub	sp, #28
 800ef54:	af00      	add	r7, sp, #0
 800ef56:	60f8      	str	r0, [r7, #12]
 800ef58:	60b9      	str	r1, [r7, #8]
 800ef5a:	4613      	mov	r3, r2
 800ef5c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800ef5e:	2300      	movs	r3, #0
 800ef60:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800ef62:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ef66:	4618      	mov	r0, r3
 800ef68:	371c      	adds	r7, #28
 800ef6a:	46bd      	mov	sp, r7
 800ef6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef70:	4770      	bx	lr
	...

0800ef74 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ef74:	b480      	push	{r7}
 800ef76:	b083      	sub	sp, #12
 800ef78:	af00      	add	r7, sp, #0
 800ef7a:	4603      	mov	r3, r0
 800ef7c:	6039      	str	r1, [r7, #0]
 800ef7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800ef80:	683b      	ldr	r3, [r7, #0]
 800ef82:	2212      	movs	r2, #18
 800ef84:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800ef86:	4b03      	ldr	r3, [pc, #12]	@ (800ef94 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800ef88:	4618      	mov	r0, r3
 800ef8a:	370c      	adds	r7, #12
 800ef8c:	46bd      	mov	sp, r7
 800ef8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef92:	4770      	bx	lr
 800ef94:	20000174 	.word	0x20000174

0800ef98 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ef98:	b480      	push	{r7}
 800ef9a:	b083      	sub	sp, #12
 800ef9c:	af00      	add	r7, sp, #0
 800ef9e:	4603      	mov	r3, r0
 800efa0:	6039      	str	r1, [r7, #0]
 800efa2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800efa4:	683b      	ldr	r3, [r7, #0]
 800efa6:	2204      	movs	r2, #4
 800efa8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800efaa:	4b03      	ldr	r3, [pc, #12]	@ (800efb8 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800efac:	4618      	mov	r0, r3
 800efae:	370c      	adds	r7, #12
 800efb0:	46bd      	mov	sp, r7
 800efb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efb6:	4770      	bx	lr
 800efb8:	20000188 	.word	0x20000188

0800efbc <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800efbc:	b580      	push	{r7, lr}
 800efbe:	b082      	sub	sp, #8
 800efc0:	af00      	add	r7, sp, #0
 800efc2:	4603      	mov	r3, r0
 800efc4:	6039      	str	r1, [r7, #0]
 800efc6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800efc8:	79fb      	ldrb	r3, [r7, #7]
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d105      	bne.n	800efda <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800efce:	683a      	ldr	r2, [r7, #0]
 800efd0:	4907      	ldr	r1, [pc, #28]	@ (800eff0 <USBD_CDC_ProductStrDescriptor+0x34>)
 800efd2:	4808      	ldr	r0, [pc, #32]	@ (800eff4 <USBD_CDC_ProductStrDescriptor+0x38>)
 800efd4:	f7fc f941 	bl	800b25a <USBD_GetString>
 800efd8:	e004      	b.n	800efe4 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800efda:	683a      	ldr	r2, [r7, #0]
 800efdc:	4904      	ldr	r1, [pc, #16]	@ (800eff0 <USBD_CDC_ProductStrDescriptor+0x34>)
 800efde:	4805      	ldr	r0, [pc, #20]	@ (800eff4 <USBD_CDC_ProductStrDescriptor+0x38>)
 800efe0:	f7fc f93b 	bl	800b25a <USBD_GetString>
  }
  return USBD_StrDesc;
 800efe4:	4b02      	ldr	r3, [pc, #8]	@ (800eff0 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800efe6:	4618      	mov	r0, r3
 800efe8:	3708      	adds	r7, #8
 800efea:	46bd      	mov	sp, r7
 800efec:	bd80      	pop	{r7, pc}
 800efee:	bf00      	nop
 800eff0:	200120fc 	.word	0x200120fc
 800eff4:	08013434 	.word	0x08013434

0800eff8 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eff8:	b580      	push	{r7, lr}
 800effa:	b082      	sub	sp, #8
 800effc:	af00      	add	r7, sp, #0
 800effe:	4603      	mov	r3, r0
 800f000:	6039      	str	r1, [r7, #0]
 800f002:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f004:	683a      	ldr	r2, [r7, #0]
 800f006:	4904      	ldr	r1, [pc, #16]	@ (800f018 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800f008:	4804      	ldr	r0, [pc, #16]	@ (800f01c <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800f00a:	f7fc f926 	bl	800b25a <USBD_GetString>
  return USBD_StrDesc;
 800f00e:	4b02      	ldr	r3, [pc, #8]	@ (800f018 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800f010:	4618      	mov	r0, r3
 800f012:	3708      	adds	r7, #8
 800f014:	46bd      	mov	sp, r7
 800f016:	bd80      	pop	{r7, pc}
 800f018:	200120fc 	.word	0x200120fc
 800f01c:	0801344c 	.word	0x0801344c

0800f020 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f020:	b580      	push	{r7, lr}
 800f022:	b082      	sub	sp, #8
 800f024:	af00      	add	r7, sp, #0
 800f026:	4603      	mov	r3, r0
 800f028:	6039      	str	r1, [r7, #0]
 800f02a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800f02c:	683b      	ldr	r3, [r7, #0]
 800f02e:	221a      	movs	r2, #26
 800f030:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800f032:	f000 f843 	bl	800f0bc <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800f036:	4b02      	ldr	r3, [pc, #8]	@ (800f040 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800f038:	4618      	mov	r0, r3
 800f03a:	3708      	adds	r7, #8
 800f03c:	46bd      	mov	sp, r7
 800f03e:	bd80      	pop	{r7, pc}
 800f040:	2000018c 	.word	0x2000018c

0800f044 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f044:	b580      	push	{r7, lr}
 800f046:	b082      	sub	sp, #8
 800f048:	af00      	add	r7, sp, #0
 800f04a:	4603      	mov	r3, r0
 800f04c:	6039      	str	r1, [r7, #0]
 800f04e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800f050:	79fb      	ldrb	r3, [r7, #7]
 800f052:	2b00      	cmp	r3, #0
 800f054:	d105      	bne.n	800f062 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800f056:	683a      	ldr	r2, [r7, #0]
 800f058:	4907      	ldr	r1, [pc, #28]	@ (800f078 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800f05a:	4808      	ldr	r0, [pc, #32]	@ (800f07c <USBD_CDC_ConfigStrDescriptor+0x38>)
 800f05c:	f7fc f8fd 	bl	800b25a <USBD_GetString>
 800f060:	e004      	b.n	800f06c <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800f062:	683a      	ldr	r2, [r7, #0]
 800f064:	4904      	ldr	r1, [pc, #16]	@ (800f078 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800f066:	4805      	ldr	r0, [pc, #20]	@ (800f07c <USBD_CDC_ConfigStrDescriptor+0x38>)
 800f068:	f7fc f8f7 	bl	800b25a <USBD_GetString>
  }
  return USBD_StrDesc;
 800f06c:	4b02      	ldr	r3, [pc, #8]	@ (800f078 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800f06e:	4618      	mov	r0, r3
 800f070:	3708      	adds	r7, #8
 800f072:	46bd      	mov	sp, r7
 800f074:	bd80      	pop	{r7, pc}
 800f076:	bf00      	nop
 800f078:	200120fc 	.word	0x200120fc
 800f07c:	08013460 	.word	0x08013460

0800f080 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f080:	b580      	push	{r7, lr}
 800f082:	b082      	sub	sp, #8
 800f084:	af00      	add	r7, sp, #0
 800f086:	4603      	mov	r3, r0
 800f088:	6039      	str	r1, [r7, #0]
 800f08a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f08c:	79fb      	ldrb	r3, [r7, #7]
 800f08e:	2b00      	cmp	r3, #0
 800f090:	d105      	bne.n	800f09e <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800f092:	683a      	ldr	r2, [r7, #0]
 800f094:	4907      	ldr	r1, [pc, #28]	@ (800f0b4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800f096:	4808      	ldr	r0, [pc, #32]	@ (800f0b8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800f098:	f7fc f8df 	bl	800b25a <USBD_GetString>
 800f09c:	e004      	b.n	800f0a8 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800f09e:	683a      	ldr	r2, [r7, #0]
 800f0a0:	4904      	ldr	r1, [pc, #16]	@ (800f0b4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800f0a2:	4805      	ldr	r0, [pc, #20]	@ (800f0b8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800f0a4:	f7fc f8d9 	bl	800b25a <USBD_GetString>
  }
  return USBD_StrDesc;
 800f0a8:	4b02      	ldr	r3, [pc, #8]	@ (800f0b4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800f0aa:	4618      	mov	r0, r3
 800f0ac:	3708      	adds	r7, #8
 800f0ae:	46bd      	mov	sp, r7
 800f0b0:	bd80      	pop	{r7, pc}
 800f0b2:	bf00      	nop
 800f0b4:	200120fc 	.word	0x200120fc
 800f0b8:	0801346c 	.word	0x0801346c

0800f0bc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f0bc:	b580      	push	{r7, lr}
 800f0be:	b084      	sub	sp, #16
 800f0c0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f0c2:	4b0f      	ldr	r3, [pc, #60]	@ (800f100 <Get_SerialNum+0x44>)
 800f0c4:	681b      	ldr	r3, [r3, #0]
 800f0c6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f0c8:	4b0e      	ldr	r3, [pc, #56]	@ (800f104 <Get_SerialNum+0x48>)
 800f0ca:	681b      	ldr	r3, [r3, #0]
 800f0cc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800f0ce:	4b0e      	ldr	r3, [pc, #56]	@ (800f108 <Get_SerialNum+0x4c>)
 800f0d0:	681b      	ldr	r3, [r3, #0]
 800f0d2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f0d4:	68fa      	ldr	r2, [r7, #12]
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	4413      	add	r3, r2
 800f0da:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f0dc:	68fb      	ldr	r3, [r7, #12]
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	d009      	beq.n	800f0f6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f0e2:	2208      	movs	r2, #8
 800f0e4:	4909      	ldr	r1, [pc, #36]	@ (800f10c <Get_SerialNum+0x50>)
 800f0e6:	68f8      	ldr	r0, [r7, #12]
 800f0e8:	f000 f814 	bl	800f114 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f0ec:	2204      	movs	r2, #4
 800f0ee:	4908      	ldr	r1, [pc, #32]	@ (800f110 <Get_SerialNum+0x54>)
 800f0f0:	68b8      	ldr	r0, [r7, #8]
 800f0f2:	f000 f80f 	bl	800f114 <IntToUnicode>
  }
}
 800f0f6:	bf00      	nop
 800f0f8:	3710      	adds	r7, #16
 800f0fa:	46bd      	mov	sp, r7
 800f0fc:	bd80      	pop	{r7, pc}
 800f0fe:	bf00      	nop
 800f100:	1fff7590 	.word	0x1fff7590
 800f104:	1fff7594 	.word	0x1fff7594
 800f108:	1fff7598 	.word	0x1fff7598
 800f10c:	2000018e 	.word	0x2000018e
 800f110:	2000019e 	.word	0x2000019e

0800f114 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f114:	b480      	push	{r7}
 800f116:	b087      	sub	sp, #28
 800f118:	af00      	add	r7, sp, #0
 800f11a:	60f8      	str	r0, [r7, #12]
 800f11c:	60b9      	str	r1, [r7, #8]
 800f11e:	4613      	mov	r3, r2
 800f120:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f122:	2300      	movs	r3, #0
 800f124:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f126:	2300      	movs	r3, #0
 800f128:	75fb      	strb	r3, [r7, #23]
 800f12a:	e027      	b.n	800f17c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f12c:	68fb      	ldr	r3, [r7, #12]
 800f12e:	0f1b      	lsrs	r3, r3, #28
 800f130:	2b09      	cmp	r3, #9
 800f132:	d80b      	bhi.n	800f14c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f134:	68fb      	ldr	r3, [r7, #12]
 800f136:	0f1b      	lsrs	r3, r3, #28
 800f138:	b2da      	uxtb	r2, r3
 800f13a:	7dfb      	ldrb	r3, [r7, #23]
 800f13c:	005b      	lsls	r3, r3, #1
 800f13e:	4619      	mov	r1, r3
 800f140:	68bb      	ldr	r3, [r7, #8]
 800f142:	440b      	add	r3, r1
 800f144:	3230      	adds	r2, #48	@ 0x30
 800f146:	b2d2      	uxtb	r2, r2
 800f148:	701a      	strb	r2, [r3, #0]
 800f14a:	e00a      	b.n	800f162 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f14c:	68fb      	ldr	r3, [r7, #12]
 800f14e:	0f1b      	lsrs	r3, r3, #28
 800f150:	b2da      	uxtb	r2, r3
 800f152:	7dfb      	ldrb	r3, [r7, #23]
 800f154:	005b      	lsls	r3, r3, #1
 800f156:	4619      	mov	r1, r3
 800f158:	68bb      	ldr	r3, [r7, #8]
 800f15a:	440b      	add	r3, r1
 800f15c:	3237      	adds	r2, #55	@ 0x37
 800f15e:	b2d2      	uxtb	r2, r2
 800f160:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f162:	68fb      	ldr	r3, [r7, #12]
 800f164:	011b      	lsls	r3, r3, #4
 800f166:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f168:	7dfb      	ldrb	r3, [r7, #23]
 800f16a:	005b      	lsls	r3, r3, #1
 800f16c:	3301      	adds	r3, #1
 800f16e:	68ba      	ldr	r2, [r7, #8]
 800f170:	4413      	add	r3, r2
 800f172:	2200      	movs	r2, #0
 800f174:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f176:	7dfb      	ldrb	r3, [r7, #23]
 800f178:	3301      	adds	r3, #1
 800f17a:	75fb      	strb	r3, [r7, #23]
 800f17c:	7dfa      	ldrb	r2, [r7, #23]
 800f17e:	79fb      	ldrb	r3, [r7, #7]
 800f180:	429a      	cmp	r2, r3
 800f182:	d3d3      	bcc.n	800f12c <IntToUnicode+0x18>
  }
}
 800f184:	bf00      	nop
 800f186:	bf00      	nop
 800f188:	371c      	adds	r7, #28
 800f18a:	46bd      	mov	sp, r7
 800f18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f190:	4770      	bx	lr
	...

0800f194 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f194:	b580      	push	{r7, lr}
 800f196:	b098      	sub	sp, #96	@ 0x60
 800f198:	af00      	add	r7, sp, #0
 800f19a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800f19c:	f107 0310 	add.w	r3, r7, #16
 800f1a0:	2250      	movs	r2, #80	@ 0x50
 800f1a2:	2100      	movs	r1, #0
 800f1a4:	4618      	mov	r0, r3
 800f1a6:	f001 f84d 	bl	8010244 <memset>
  if(pcdHandle->Instance==USB)
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	4a15      	ldr	r2, [pc, #84]	@ (800f204 <HAL_PCD_MspInit+0x70>)
 800f1b0:	4293      	cmp	r3, r2
 800f1b2:	d122      	bne.n	800f1fa <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800f1b4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800f1b8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800f1ba:	2300      	movs	r3, #0
 800f1bc:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800f1be:	f107 0310 	add.w	r3, r7, #16
 800f1c2:	4618      	mov	r0, r3
 800f1c4:	f7f7 fb36 	bl	8006834 <HAL_RCCEx_PeriphCLKConfig>
 800f1c8:	4603      	mov	r3, r0
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d001      	beq.n	800f1d2 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800f1ce:	f7f3 ff65 	bl	800309c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800f1d2:	4b0d      	ldr	r3, [pc, #52]	@ (800f208 <HAL_PCD_MspInit+0x74>)
 800f1d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f1d6:	4a0c      	ldr	r2, [pc, #48]	@ (800f208 <HAL_PCD_MspInit+0x74>)
 800f1d8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800f1dc:	6593      	str	r3, [r2, #88]	@ 0x58
 800f1de:	4b0a      	ldr	r3, [pc, #40]	@ (800f208 <HAL_PCD_MspInit+0x74>)
 800f1e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f1e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f1e6:	60fb      	str	r3, [r7, #12]
 800f1e8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 800f1ea:	2200      	movs	r2, #0
 800f1ec:	2105      	movs	r1, #5
 800f1ee:	2014      	movs	r0, #20
 800f1f0:	f7f4 fba0 	bl	8003934 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800f1f4:	2014      	movs	r0, #20
 800f1f6:	f7f4 fbb7 	bl	8003968 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800f1fa:	bf00      	nop
 800f1fc:	3760      	adds	r7, #96	@ 0x60
 800f1fe:	46bd      	mov	sp, r7
 800f200:	bd80      	pop	{r7, pc}
 800f202:	bf00      	nop
 800f204:	40005c00 	.word	0x40005c00
 800f208:	40021000 	.word	0x40021000

0800f20c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f20c:	b580      	push	{r7, lr}
 800f20e:	b082      	sub	sp, #8
 800f210:	af00      	add	r7, sp, #0
 800f212:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800f220:	4619      	mov	r1, r3
 800f222:	4610      	mov	r0, r2
 800f224:	f7fb f87c 	bl	800a320 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800f228:	bf00      	nop
 800f22a:	3708      	adds	r7, #8
 800f22c:	46bd      	mov	sp, r7
 800f22e:	bd80      	pop	{r7, pc}

0800f230 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f230:	b580      	push	{r7, lr}
 800f232:	b082      	sub	sp, #8
 800f234:	af00      	add	r7, sp, #0
 800f236:	6078      	str	r0, [r7, #4]
 800f238:	460b      	mov	r3, r1
 800f23a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800f242:	78fa      	ldrb	r2, [r7, #3]
 800f244:	6879      	ldr	r1, [r7, #4]
 800f246:	4613      	mov	r3, r2
 800f248:	009b      	lsls	r3, r3, #2
 800f24a:	4413      	add	r3, r2
 800f24c:	00db      	lsls	r3, r3, #3
 800f24e:	440b      	add	r3, r1
 800f250:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800f254:	681a      	ldr	r2, [r3, #0]
 800f256:	78fb      	ldrb	r3, [r7, #3]
 800f258:	4619      	mov	r1, r3
 800f25a:	f7fb f8b6 	bl	800a3ca <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800f25e:	bf00      	nop
 800f260:	3708      	adds	r7, #8
 800f262:	46bd      	mov	sp, r7
 800f264:	bd80      	pop	{r7, pc}

0800f266 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f266:	b580      	push	{r7, lr}
 800f268:	b082      	sub	sp, #8
 800f26a:	af00      	add	r7, sp, #0
 800f26c:	6078      	str	r0, [r7, #4]
 800f26e:	460b      	mov	r3, r1
 800f270:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800f278:	78fa      	ldrb	r2, [r7, #3]
 800f27a:	6879      	ldr	r1, [r7, #4]
 800f27c:	4613      	mov	r3, r2
 800f27e:	009b      	lsls	r3, r3, #2
 800f280:	4413      	add	r3, r2
 800f282:	00db      	lsls	r3, r3, #3
 800f284:	440b      	add	r3, r1
 800f286:	3324      	adds	r3, #36	@ 0x24
 800f288:	681a      	ldr	r2, [r3, #0]
 800f28a:	78fb      	ldrb	r3, [r7, #3]
 800f28c:	4619      	mov	r1, r3
 800f28e:	f7fb f8ff 	bl	800a490 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800f292:	bf00      	nop
 800f294:	3708      	adds	r7, #8
 800f296:	46bd      	mov	sp, r7
 800f298:	bd80      	pop	{r7, pc}

0800f29a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f29a:	b580      	push	{r7, lr}
 800f29c:	b082      	sub	sp, #8
 800f29e:	af00      	add	r7, sp, #0
 800f2a0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800f2a8:	4618      	mov	r0, r3
 800f2aa:	f7fb fa13 	bl	800a6d4 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800f2ae:	bf00      	nop
 800f2b0:	3708      	adds	r7, #8
 800f2b2:	46bd      	mov	sp, r7
 800f2b4:	bd80      	pop	{r7, pc}

0800f2b6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f2b6:	b580      	push	{r7, lr}
 800f2b8:	b084      	sub	sp, #16
 800f2ba:	af00      	add	r7, sp, #0
 800f2bc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800f2be:	2301      	movs	r3, #1
 800f2c0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	795b      	ldrb	r3, [r3, #5]
 800f2c6:	2b02      	cmp	r3, #2
 800f2c8:	d001      	beq.n	800f2ce <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800f2ca:	f7f3 fee7 	bl	800309c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800f2d4:	7bfa      	ldrb	r2, [r7, #15]
 800f2d6:	4611      	mov	r1, r2
 800f2d8:	4618      	mov	r0, r3
 800f2da:	f7fb f9bd 	bl	800a658 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800f2e4:	4618      	mov	r0, r3
 800f2e6:	f7fb f969 	bl	800a5bc <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800f2ea:	bf00      	nop
 800f2ec:	3710      	adds	r7, #16
 800f2ee:	46bd      	mov	sp, r7
 800f2f0:	bd80      	pop	{r7, pc}
	...

0800f2f4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f2f4:	b580      	push	{r7, lr}
 800f2f6:	b082      	sub	sp, #8
 800f2f8:	af00      	add	r7, sp, #0
 800f2fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800f302:	4618      	mov	r0, r3
 800f304:	f7fb f9b8 	bl	800a678 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	7a5b      	ldrb	r3, [r3, #9]
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	d005      	beq.n	800f31c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f310:	4b04      	ldr	r3, [pc, #16]	@ (800f324 <HAL_PCD_SuspendCallback+0x30>)
 800f312:	691b      	ldr	r3, [r3, #16]
 800f314:	4a03      	ldr	r2, [pc, #12]	@ (800f324 <HAL_PCD_SuspendCallback+0x30>)
 800f316:	f043 0306 	orr.w	r3, r3, #6
 800f31a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800f31c:	bf00      	nop
 800f31e:	3708      	adds	r7, #8
 800f320:	46bd      	mov	sp, r7
 800f322:	bd80      	pop	{r7, pc}
 800f324:	e000ed00 	.word	0xe000ed00

0800f328 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f328:	b580      	push	{r7, lr}
 800f32a:	b082      	sub	sp, #8
 800f32c:	af00      	add	r7, sp, #0
 800f32e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	7a5b      	ldrb	r3, [r3, #9]
 800f334:	2b00      	cmp	r3, #0
 800f336:	d007      	beq.n	800f348 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f338:	4b08      	ldr	r3, [pc, #32]	@ (800f35c <HAL_PCD_ResumeCallback+0x34>)
 800f33a:	691b      	ldr	r3, [r3, #16]
 800f33c:	4a07      	ldr	r2, [pc, #28]	@ (800f35c <HAL_PCD_ResumeCallback+0x34>)
 800f33e:	f023 0306 	bic.w	r3, r3, #6
 800f342:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800f344:	f000 f9f8 	bl	800f738 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800f34e:	4618      	mov	r0, r3
 800f350:	f7fb f9a8 	bl	800a6a4 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800f354:	bf00      	nop
 800f356:	3708      	adds	r7, #8
 800f358:	46bd      	mov	sp, r7
 800f35a:	bd80      	pop	{r7, pc}
 800f35c:	e000ed00 	.word	0xe000ed00

0800f360 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800f360:	b580      	push	{r7, lr}
 800f362:	b082      	sub	sp, #8
 800f364:	af00      	add	r7, sp, #0
 800f366:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800f368:	4a2b      	ldr	r2, [pc, #172]	@ (800f418 <USBD_LL_Init+0xb8>)
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	4a29      	ldr	r2, [pc, #164]	@ (800f418 <USBD_LL_Init+0xb8>)
 800f374:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 800f378:	4b27      	ldr	r3, [pc, #156]	@ (800f418 <USBD_LL_Init+0xb8>)
 800f37a:	4a28      	ldr	r2, [pc, #160]	@ (800f41c <USBD_LL_Init+0xbc>)
 800f37c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800f37e:	4b26      	ldr	r3, [pc, #152]	@ (800f418 <USBD_LL_Init+0xb8>)
 800f380:	2208      	movs	r2, #8
 800f382:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800f384:	4b24      	ldr	r3, [pc, #144]	@ (800f418 <USBD_LL_Init+0xb8>)
 800f386:	2202      	movs	r2, #2
 800f388:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800f38a:	4b23      	ldr	r3, [pc, #140]	@ (800f418 <USBD_LL_Init+0xb8>)
 800f38c:	2202      	movs	r2, #2
 800f38e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800f390:	4b21      	ldr	r3, [pc, #132]	@ (800f418 <USBD_LL_Init+0xb8>)
 800f392:	2200      	movs	r2, #0
 800f394:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800f396:	4b20      	ldr	r3, [pc, #128]	@ (800f418 <USBD_LL_Init+0xb8>)
 800f398:	2200      	movs	r2, #0
 800f39a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800f39c:	4b1e      	ldr	r3, [pc, #120]	@ (800f418 <USBD_LL_Init+0xb8>)
 800f39e:	2200      	movs	r2, #0
 800f3a0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800f3a2:	4b1d      	ldr	r3, [pc, #116]	@ (800f418 <USBD_LL_Init+0xb8>)
 800f3a4:	2200      	movs	r2, #0
 800f3a6:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800f3a8:	481b      	ldr	r0, [pc, #108]	@ (800f418 <USBD_LL_Init+0xb8>)
 800f3aa:	f7f4 ff43 	bl	8004234 <HAL_PCD_Init>
 800f3ae:	4603      	mov	r3, r0
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d001      	beq.n	800f3b8 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800f3b4:	f7f3 fe72 	bl	800309c <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800f3be:	2318      	movs	r3, #24
 800f3c0:	2200      	movs	r2, #0
 800f3c2:	2100      	movs	r1, #0
 800f3c4:	f7f6 fbca 	bl	8005b5c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800f3ce:	2358      	movs	r3, #88	@ 0x58
 800f3d0:	2200      	movs	r2, #0
 800f3d2:	2180      	movs	r1, #128	@ 0x80
 800f3d4:	f7f6 fbc2 	bl	8005b5c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800f3de:	23c0      	movs	r3, #192	@ 0xc0
 800f3e0:	2200      	movs	r2, #0
 800f3e2:	2181      	movs	r1, #129	@ 0x81
 800f3e4:	f7f6 fbba 	bl	8005b5c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800f3ee:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800f3f2:	2200      	movs	r2, #0
 800f3f4:	2101      	movs	r1, #1
 800f3f6:	f7f6 fbb1 	bl	8005b5c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800f400:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f404:	2200      	movs	r2, #0
 800f406:	2182      	movs	r1, #130	@ 0x82
 800f408:	f7f6 fba8 	bl	8005b5c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800f40c:	2300      	movs	r3, #0
}
 800f40e:	4618      	mov	r0, r3
 800f410:	3708      	adds	r7, #8
 800f412:	46bd      	mov	sp, r7
 800f414:	bd80      	pop	{r7, pc}
 800f416:	bf00      	nop
 800f418:	200122fc 	.word	0x200122fc
 800f41c:	40005c00 	.word	0x40005c00

0800f420 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800f420:	b580      	push	{r7, lr}
 800f422:	b084      	sub	sp, #16
 800f424:	af00      	add	r7, sp, #0
 800f426:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f428:	2300      	movs	r3, #0
 800f42a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f42c:	2300      	movs	r3, #0
 800f42e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800f436:	4618      	mov	r0, r3
 800f438:	f7f4 ffca 	bl	80043d0 <HAL_PCD_Start>
 800f43c:	4603      	mov	r3, r0
 800f43e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f440:	7bfb      	ldrb	r3, [r7, #15]
 800f442:	4618      	mov	r0, r3
 800f444:	f000 f97e 	bl	800f744 <USBD_Get_USB_Status>
 800f448:	4603      	mov	r3, r0
 800f44a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f44c:	7bbb      	ldrb	r3, [r7, #14]
}
 800f44e:	4618      	mov	r0, r3
 800f450:	3710      	adds	r7, #16
 800f452:	46bd      	mov	sp, r7
 800f454:	bd80      	pop	{r7, pc}

0800f456 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800f456:	b580      	push	{r7, lr}
 800f458:	b084      	sub	sp, #16
 800f45a:	af00      	add	r7, sp, #0
 800f45c:	6078      	str	r0, [r7, #4]
 800f45e:	4608      	mov	r0, r1
 800f460:	4611      	mov	r1, r2
 800f462:	461a      	mov	r2, r3
 800f464:	4603      	mov	r3, r0
 800f466:	70fb      	strb	r3, [r7, #3]
 800f468:	460b      	mov	r3, r1
 800f46a:	70bb      	strb	r3, [r7, #2]
 800f46c:	4613      	mov	r3, r2
 800f46e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f470:	2300      	movs	r3, #0
 800f472:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f474:	2300      	movs	r3, #0
 800f476:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800f47e:	78bb      	ldrb	r3, [r7, #2]
 800f480:	883a      	ldrh	r2, [r7, #0]
 800f482:	78f9      	ldrb	r1, [r7, #3]
 800f484:	f7f5 f911 	bl	80046aa <HAL_PCD_EP_Open>
 800f488:	4603      	mov	r3, r0
 800f48a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f48c:	7bfb      	ldrb	r3, [r7, #15]
 800f48e:	4618      	mov	r0, r3
 800f490:	f000 f958 	bl	800f744 <USBD_Get_USB_Status>
 800f494:	4603      	mov	r3, r0
 800f496:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f498:	7bbb      	ldrb	r3, [r7, #14]
}
 800f49a:	4618      	mov	r0, r3
 800f49c:	3710      	adds	r7, #16
 800f49e:	46bd      	mov	sp, r7
 800f4a0:	bd80      	pop	{r7, pc}

0800f4a2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f4a2:	b580      	push	{r7, lr}
 800f4a4:	b084      	sub	sp, #16
 800f4a6:	af00      	add	r7, sp, #0
 800f4a8:	6078      	str	r0, [r7, #4]
 800f4aa:	460b      	mov	r3, r1
 800f4ac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f4ae:	2300      	movs	r3, #0
 800f4b0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f4b2:	2300      	movs	r3, #0
 800f4b4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800f4bc:	78fa      	ldrb	r2, [r7, #3]
 800f4be:	4611      	mov	r1, r2
 800f4c0:	4618      	mov	r0, r3
 800f4c2:	f7f5 f951 	bl	8004768 <HAL_PCD_EP_Close>
 800f4c6:	4603      	mov	r3, r0
 800f4c8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f4ca:	7bfb      	ldrb	r3, [r7, #15]
 800f4cc:	4618      	mov	r0, r3
 800f4ce:	f000 f939 	bl	800f744 <USBD_Get_USB_Status>
 800f4d2:	4603      	mov	r3, r0
 800f4d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f4d6:	7bbb      	ldrb	r3, [r7, #14]
}
 800f4d8:	4618      	mov	r0, r3
 800f4da:	3710      	adds	r7, #16
 800f4dc:	46bd      	mov	sp, r7
 800f4de:	bd80      	pop	{r7, pc}

0800f4e0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f4e0:	b580      	push	{r7, lr}
 800f4e2:	b084      	sub	sp, #16
 800f4e4:	af00      	add	r7, sp, #0
 800f4e6:	6078      	str	r0, [r7, #4]
 800f4e8:	460b      	mov	r3, r1
 800f4ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f4ec:	2300      	movs	r3, #0
 800f4ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f4f0:	2300      	movs	r3, #0
 800f4f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800f4fa:	78fa      	ldrb	r2, [r7, #3]
 800f4fc:	4611      	mov	r1, r2
 800f4fe:	4618      	mov	r0, r3
 800f500:	f7f5 f9fa 	bl	80048f8 <HAL_PCD_EP_SetStall>
 800f504:	4603      	mov	r3, r0
 800f506:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f508:	7bfb      	ldrb	r3, [r7, #15]
 800f50a:	4618      	mov	r0, r3
 800f50c:	f000 f91a 	bl	800f744 <USBD_Get_USB_Status>
 800f510:	4603      	mov	r3, r0
 800f512:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f514:	7bbb      	ldrb	r3, [r7, #14]
}
 800f516:	4618      	mov	r0, r3
 800f518:	3710      	adds	r7, #16
 800f51a:	46bd      	mov	sp, r7
 800f51c:	bd80      	pop	{r7, pc}

0800f51e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f51e:	b580      	push	{r7, lr}
 800f520:	b084      	sub	sp, #16
 800f522:	af00      	add	r7, sp, #0
 800f524:	6078      	str	r0, [r7, #4]
 800f526:	460b      	mov	r3, r1
 800f528:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f52a:	2300      	movs	r3, #0
 800f52c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f52e:	2300      	movs	r3, #0
 800f530:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800f538:	78fa      	ldrb	r2, [r7, #3]
 800f53a:	4611      	mov	r1, r2
 800f53c:	4618      	mov	r0, r3
 800f53e:	f7f5 fa2d 	bl	800499c <HAL_PCD_EP_ClrStall>
 800f542:	4603      	mov	r3, r0
 800f544:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f546:	7bfb      	ldrb	r3, [r7, #15]
 800f548:	4618      	mov	r0, r3
 800f54a:	f000 f8fb 	bl	800f744 <USBD_Get_USB_Status>
 800f54e:	4603      	mov	r3, r0
 800f550:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f552:	7bbb      	ldrb	r3, [r7, #14]
}
 800f554:	4618      	mov	r0, r3
 800f556:	3710      	adds	r7, #16
 800f558:	46bd      	mov	sp, r7
 800f55a:	bd80      	pop	{r7, pc}

0800f55c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f55c:	b480      	push	{r7}
 800f55e:	b085      	sub	sp, #20
 800f560:	af00      	add	r7, sp, #0
 800f562:	6078      	str	r0, [r7, #4]
 800f564:	460b      	mov	r3, r1
 800f566:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800f56e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800f570:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f574:	2b00      	cmp	r3, #0
 800f576:	da0b      	bge.n	800f590 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800f578:	78fb      	ldrb	r3, [r7, #3]
 800f57a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f57e:	68f9      	ldr	r1, [r7, #12]
 800f580:	4613      	mov	r3, r2
 800f582:	009b      	lsls	r3, r3, #2
 800f584:	4413      	add	r3, r2
 800f586:	00db      	lsls	r3, r3, #3
 800f588:	440b      	add	r3, r1
 800f58a:	3312      	adds	r3, #18
 800f58c:	781b      	ldrb	r3, [r3, #0]
 800f58e:	e00b      	b.n	800f5a8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800f590:	78fb      	ldrb	r3, [r7, #3]
 800f592:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f596:	68f9      	ldr	r1, [r7, #12]
 800f598:	4613      	mov	r3, r2
 800f59a:	009b      	lsls	r3, r3, #2
 800f59c:	4413      	add	r3, r2
 800f59e:	00db      	lsls	r3, r3, #3
 800f5a0:	440b      	add	r3, r1
 800f5a2:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800f5a6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f5a8:	4618      	mov	r0, r3
 800f5aa:	3714      	adds	r7, #20
 800f5ac:	46bd      	mov	sp, r7
 800f5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5b2:	4770      	bx	lr

0800f5b4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800f5b4:	b580      	push	{r7, lr}
 800f5b6:	b084      	sub	sp, #16
 800f5b8:	af00      	add	r7, sp, #0
 800f5ba:	6078      	str	r0, [r7, #4]
 800f5bc:	460b      	mov	r3, r1
 800f5be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f5c0:	2300      	movs	r3, #0
 800f5c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f5c4:	2300      	movs	r3, #0
 800f5c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800f5ce:	78fa      	ldrb	r2, [r7, #3]
 800f5d0:	4611      	mov	r1, r2
 800f5d2:	4618      	mov	r0, r3
 800f5d4:	f7f5 f845 	bl	8004662 <HAL_PCD_SetAddress>
 800f5d8:	4603      	mov	r3, r0
 800f5da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f5dc:	7bfb      	ldrb	r3, [r7, #15]
 800f5de:	4618      	mov	r0, r3
 800f5e0:	f000 f8b0 	bl	800f744 <USBD_Get_USB_Status>
 800f5e4:	4603      	mov	r3, r0
 800f5e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f5e8:	7bbb      	ldrb	r3, [r7, #14]
}
 800f5ea:	4618      	mov	r0, r3
 800f5ec:	3710      	adds	r7, #16
 800f5ee:	46bd      	mov	sp, r7
 800f5f0:	bd80      	pop	{r7, pc}

0800f5f2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f5f2:	b580      	push	{r7, lr}
 800f5f4:	b086      	sub	sp, #24
 800f5f6:	af00      	add	r7, sp, #0
 800f5f8:	60f8      	str	r0, [r7, #12]
 800f5fa:	607a      	str	r2, [r7, #4]
 800f5fc:	603b      	str	r3, [r7, #0]
 800f5fe:	460b      	mov	r3, r1
 800f600:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f602:	2300      	movs	r3, #0
 800f604:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f606:	2300      	movs	r3, #0
 800f608:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f60a:	68fb      	ldr	r3, [r7, #12]
 800f60c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800f610:	7af9      	ldrb	r1, [r7, #11]
 800f612:	683b      	ldr	r3, [r7, #0]
 800f614:	687a      	ldr	r2, [r7, #4]
 800f616:	f7f5 f938 	bl	800488a <HAL_PCD_EP_Transmit>
 800f61a:	4603      	mov	r3, r0
 800f61c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f61e:	7dfb      	ldrb	r3, [r7, #23]
 800f620:	4618      	mov	r0, r3
 800f622:	f000 f88f 	bl	800f744 <USBD_Get_USB_Status>
 800f626:	4603      	mov	r3, r0
 800f628:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f62a:	7dbb      	ldrb	r3, [r7, #22]
}
 800f62c:	4618      	mov	r0, r3
 800f62e:	3718      	adds	r7, #24
 800f630:	46bd      	mov	sp, r7
 800f632:	bd80      	pop	{r7, pc}

0800f634 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f634:	b580      	push	{r7, lr}
 800f636:	b086      	sub	sp, #24
 800f638:	af00      	add	r7, sp, #0
 800f63a:	60f8      	str	r0, [r7, #12]
 800f63c:	607a      	str	r2, [r7, #4]
 800f63e:	603b      	str	r3, [r7, #0]
 800f640:	460b      	mov	r3, r1
 800f642:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f644:	2300      	movs	r3, #0
 800f646:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f648:	2300      	movs	r3, #0
 800f64a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f64c:	68fb      	ldr	r3, [r7, #12]
 800f64e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800f652:	7af9      	ldrb	r1, [r7, #11]
 800f654:	683b      	ldr	r3, [r7, #0]
 800f656:	687a      	ldr	r2, [r7, #4]
 800f658:	f7f5 f8ce 	bl	80047f8 <HAL_PCD_EP_Receive>
 800f65c:	4603      	mov	r3, r0
 800f65e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f660:	7dfb      	ldrb	r3, [r7, #23]
 800f662:	4618      	mov	r0, r3
 800f664:	f000 f86e 	bl	800f744 <USBD_Get_USB_Status>
 800f668:	4603      	mov	r3, r0
 800f66a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f66c:	7dbb      	ldrb	r3, [r7, #22]
}
 800f66e:	4618      	mov	r0, r3
 800f670:	3718      	adds	r7, #24
 800f672:	46bd      	mov	sp, r7
 800f674:	bd80      	pop	{r7, pc}

0800f676 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f676:	b580      	push	{r7, lr}
 800f678:	b082      	sub	sp, #8
 800f67a:	af00      	add	r7, sp, #0
 800f67c:	6078      	str	r0, [r7, #4]
 800f67e:	460b      	mov	r3, r1
 800f680:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800f688:	78fa      	ldrb	r2, [r7, #3]
 800f68a:	4611      	mov	r1, r2
 800f68c:	4618      	mov	r0, r3
 800f68e:	f7f5 f8e4 	bl	800485a <HAL_PCD_EP_GetRxCount>
 800f692:	4603      	mov	r3, r0
}
 800f694:	4618      	mov	r0, r3
 800f696:	3708      	adds	r7, #8
 800f698:	46bd      	mov	sp, r7
 800f69a:	bd80      	pop	{r7, pc}

0800f69c <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f69c:	b580      	push	{r7, lr}
 800f69e:	b082      	sub	sp, #8
 800f6a0:	af00      	add	r7, sp, #0
 800f6a2:	6078      	str	r0, [r7, #4]
 800f6a4:	460b      	mov	r3, r1
 800f6a6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800f6a8:	78fb      	ldrb	r3, [r7, #3]
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	d002      	beq.n	800f6b4 <HAL_PCDEx_LPM_Callback+0x18>
 800f6ae:	2b01      	cmp	r3, #1
 800f6b0:	d013      	beq.n	800f6da <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800f6b2:	e023      	b.n	800f6fc <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	7a5b      	ldrb	r3, [r3, #9]
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	d007      	beq.n	800f6cc <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800f6bc:	f000 f83c 	bl	800f738 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f6c0:	4b10      	ldr	r3, [pc, #64]	@ (800f704 <HAL_PCDEx_LPM_Callback+0x68>)
 800f6c2:	691b      	ldr	r3, [r3, #16]
 800f6c4:	4a0f      	ldr	r2, [pc, #60]	@ (800f704 <HAL_PCDEx_LPM_Callback+0x68>)
 800f6c6:	f023 0306 	bic.w	r3, r3, #6
 800f6ca:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800f6d2:	4618      	mov	r0, r3
 800f6d4:	f7fa ffe6 	bl	800a6a4 <USBD_LL_Resume>
    break;
 800f6d8:	e010      	b.n	800f6fc <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800f6e0:	4618      	mov	r0, r3
 800f6e2:	f7fa ffc9 	bl	800a678 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	7a5b      	ldrb	r3, [r3, #9]
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	d005      	beq.n	800f6fa <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f6ee:	4b05      	ldr	r3, [pc, #20]	@ (800f704 <HAL_PCDEx_LPM_Callback+0x68>)
 800f6f0:	691b      	ldr	r3, [r3, #16]
 800f6f2:	4a04      	ldr	r2, [pc, #16]	@ (800f704 <HAL_PCDEx_LPM_Callback+0x68>)
 800f6f4:	f043 0306 	orr.w	r3, r3, #6
 800f6f8:	6113      	str	r3, [r2, #16]
    break;
 800f6fa:	bf00      	nop
}
 800f6fc:	bf00      	nop
 800f6fe:	3708      	adds	r7, #8
 800f700:	46bd      	mov	sp, r7
 800f702:	bd80      	pop	{r7, pc}
 800f704:	e000ed00 	.word	0xe000ed00

0800f708 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800f708:	b480      	push	{r7}
 800f70a:	b083      	sub	sp, #12
 800f70c:	af00      	add	r7, sp, #0
 800f70e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800f710:	4b03      	ldr	r3, [pc, #12]	@ (800f720 <USBD_static_malloc+0x18>)
}
 800f712:	4618      	mov	r0, r3
 800f714:	370c      	adds	r7, #12
 800f716:	46bd      	mov	sp, r7
 800f718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f71c:	4770      	bx	lr
 800f71e:	bf00      	nop
 800f720:	200125d8 	.word	0x200125d8

0800f724 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800f724:	b480      	push	{r7}
 800f726:	b083      	sub	sp, #12
 800f728:	af00      	add	r7, sp, #0
 800f72a:	6078      	str	r0, [r7, #4]

}
 800f72c:	bf00      	nop
 800f72e:	370c      	adds	r7, #12
 800f730:	46bd      	mov	sp, r7
 800f732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f736:	4770      	bx	lr

0800f738 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800f738:	b580      	push	{r7, lr}
 800f73a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800f73c:	f7f2 ffdc 	bl	80026f8 <SystemClock_Config>
}
 800f740:	bf00      	nop
 800f742:	bd80      	pop	{r7, pc}

0800f744 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f744:	b480      	push	{r7}
 800f746:	b085      	sub	sp, #20
 800f748:	af00      	add	r7, sp, #0
 800f74a:	4603      	mov	r3, r0
 800f74c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f74e:	2300      	movs	r3, #0
 800f750:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f752:	79fb      	ldrb	r3, [r7, #7]
 800f754:	2b03      	cmp	r3, #3
 800f756:	d817      	bhi.n	800f788 <USBD_Get_USB_Status+0x44>
 800f758:	a201      	add	r2, pc, #4	@ (adr r2, 800f760 <USBD_Get_USB_Status+0x1c>)
 800f75a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f75e:	bf00      	nop
 800f760:	0800f771 	.word	0x0800f771
 800f764:	0800f777 	.word	0x0800f777
 800f768:	0800f77d 	.word	0x0800f77d
 800f76c:	0800f783 	.word	0x0800f783
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800f770:	2300      	movs	r3, #0
 800f772:	73fb      	strb	r3, [r7, #15]
    break;
 800f774:	e00b      	b.n	800f78e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f776:	2303      	movs	r3, #3
 800f778:	73fb      	strb	r3, [r7, #15]
    break;
 800f77a:	e008      	b.n	800f78e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f77c:	2301      	movs	r3, #1
 800f77e:	73fb      	strb	r3, [r7, #15]
    break;
 800f780:	e005      	b.n	800f78e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f782:	2303      	movs	r3, #3
 800f784:	73fb      	strb	r3, [r7, #15]
    break;
 800f786:	e002      	b.n	800f78e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800f788:	2303      	movs	r3, #3
 800f78a:	73fb      	strb	r3, [r7, #15]
    break;
 800f78c:	bf00      	nop
  }
  return usb_status;
 800f78e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f790:	4618      	mov	r0, r3
 800f792:	3714      	adds	r7, #20
 800f794:	46bd      	mov	sp, r7
 800f796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f79a:	4770      	bx	lr

0800f79c <__cvt>:
 800f79c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f7a0:	ec57 6b10 	vmov	r6, r7, d0
 800f7a4:	2f00      	cmp	r7, #0
 800f7a6:	460c      	mov	r4, r1
 800f7a8:	4619      	mov	r1, r3
 800f7aa:	463b      	mov	r3, r7
 800f7ac:	bfbb      	ittet	lt
 800f7ae:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800f7b2:	461f      	movlt	r7, r3
 800f7b4:	2300      	movge	r3, #0
 800f7b6:	232d      	movlt	r3, #45	@ 0x2d
 800f7b8:	700b      	strb	r3, [r1, #0]
 800f7ba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f7bc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800f7c0:	4691      	mov	r9, r2
 800f7c2:	f023 0820 	bic.w	r8, r3, #32
 800f7c6:	bfbc      	itt	lt
 800f7c8:	4632      	movlt	r2, r6
 800f7ca:	4616      	movlt	r6, r2
 800f7cc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800f7d0:	d005      	beq.n	800f7de <__cvt+0x42>
 800f7d2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800f7d6:	d100      	bne.n	800f7da <__cvt+0x3e>
 800f7d8:	3401      	adds	r4, #1
 800f7da:	2102      	movs	r1, #2
 800f7dc:	e000      	b.n	800f7e0 <__cvt+0x44>
 800f7de:	2103      	movs	r1, #3
 800f7e0:	ab03      	add	r3, sp, #12
 800f7e2:	9301      	str	r3, [sp, #4]
 800f7e4:	ab02      	add	r3, sp, #8
 800f7e6:	9300      	str	r3, [sp, #0]
 800f7e8:	ec47 6b10 	vmov	d0, r6, r7
 800f7ec:	4653      	mov	r3, sl
 800f7ee:	4622      	mov	r2, r4
 800f7f0:	f000 fe4e 	bl	8010490 <_dtoa_r>
 800f7f4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800f7f8:	4605      	mov	r5, r0
 800f7fa:	d119      	bne.n	800f830 <__cvt+0x94>
 800f7fc:	f019 0f01 	tst.w	r9, #1
 800f800:	d00e      	beq.n	800f820 <__cvt+0x84>
 800f802:	eb00 0904 	add.w	r9, r0, r4
 800f806:	2200      	movs	r2, #0
 800f808:	2300      	movs	r3, #0
 800f80a:	4630      	mov	r0, r6
 800f80c:	4639      	mov	r1, r7
 800f80e:	f7f1 f983 	bl	8000b18 <__aeabi_dcmpeq>
 800f812:	b108      	cbz	r0, 800f818 <__cvt+0x7c>
 800f814:	f8cd 900c 	str.w	r9, [sp, #12]
 800f818:	2230      	movs	r2, #48	@ 0x30
 800f81a:	9b03      	ldr	r3, [sp, #12]
 800f81c:	454b      	cmp	r3, r9
 800f81e:	d31e      	bcc.n	800f85e <__cvt+0xc2>
 800f820:	9b03      	ldr	r3, [sp, #12]
 800f822:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f824:	1b5b      	subs	r3, r3, r5
 800f826:	4628      	mov	r0, r5
 800f828:	6013      	str	r3, [r2, #0]
 800f82a:	b004      	add	sp, #16
 800f82c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f830:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800f834:	eb00 0904 	add.w	r9, r0, r4
 800f838:	d1e5      	bne.n	800f806 <__cvt+0x6a>
 800f83a:	7803      	ldrb	r3, [r0, #0]
 800f83c:	2b30      	cmp	r3, #48	@ 0x30
 800f83e:	d10a      	bne.n	800f856 <__cvt+0xba>
 800f840:	2200      	movs	r2, #0
 800f842:	2300      	movs	r3, #0
 800f844:	4630      	mov	r0, r6
 800f846:	4639      	mov	r1, r7
 800f848:	f7f1 f966 	bl	8000b18 <__aeabi_dcmpeq>
 800f84c:	b918      	cbnz	r0, 800f856 <__cvt+0xba>
 800f84e:	f1c4 0401 	rsb	r4, r4, #1
 800f852:	f8ca 4000 	str.w	r4, [sl]
 800f856:	f8da 3000 	ldr.w	r3, [sl]
 800f85a:	4499      	add	r9, r3
 800f85c:	e7d3      	b.n	800f806 <__cvt+0x6a>
 800f85e:	1c59      	adds	r1, r3, #1
 800f860:	9103      	str	r1, [sp, #12]
 800f862:	701a      	strb	r2, [r3, #0]
 800f864:	e7d9      	b.n	800f81a <__cvt+0x7e>

0800f866 <__exponent>:
 800f866:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f868:	2900      	cmp	r1, #0
 800f86a:	bfba      	itte	lt
 800f86c:	4249      	neglt	r1, r1
 800f86e:	232d      	movlt	r3, #45	@ 0x2d
 800f870:	232b      	movge	r3, #43	@ 0x2b
 800f872:	2909      	cmp	r1, #9
 800f874:	7002      	strb	r2, [r0, #0]
 800f876:	7043      	strb	r3, [r0, #1]
 800f878:	dd29      	ble.n	800f8ce <__exponent+0x68>
 800f87a:	f10d 0307 	add.w	r3, sp, #7
 800f87e:	461d      	mov	r5, r3
 800f880:	270a      	movs	r7, #10
 800f882:	461a      	mov	r2, r3
 800f884:	fbb1 f6f7 	udiv	r6, r1, r7
 800f888:	fb07 1416 	mls	r4, r7, r6, r1
 800f88c:	3430      	adds	r4, #48	@ 0x30
 800f88e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800f892:	460c      	mov	r4, r1
 800f894:	2c63      	cmp	r4, #99	@ 0x63
 800f896:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800f89a:	4631      	mov	r1, r6
 800f89c:	dcf1      	bgt.n	800f882 <__exponent+0x1c>
 800f89e:	3130      	adds	r1, #48	@ 0x30
 800f8a0:	1e94      	subs	r4, r2, #2
 800f8a2:	f803 1c01 	strb.w	r1, [r3, #-1]
 800f8a6:	1c41      	adds	r1, r0, #1
 800f8a8:	4623      	mov	r3, r4
 800f8aa:	42ab      	cmp	r3, r5
 800f8ac:	d30a      	bcc.n	800f8c4 <__exponent+0x5e>
 800f8ae:	f10d 0309 	add.w	r3, sp, #9
 800f8b2:	1a9b      	subs	r3, r3, r2
 800f8b4:	42ac      	cmp	r4, r5
 800f8b6:	bf88      	it	hi
 800f8b8:	2300      	movhi	r3, #0
 800f8ba:	3302      	adds	r3, #2
 800f8bc:	4403      	add	r3, r0
 800f8be:	1a18      	subs	r0, r3, r0
 800f8c0:	b003      	add	sp, #12
 800f8c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f8c4:	f813 6b01 	ldrb.w	r6, [r3], #1
 800f8c8:	f801 6f01 	strb.w	r6, [r1, #1]!
 800f8cc:	e7ed      	b.n	800f8aa <__exponent+0x44>
 800f8ce:	2330      	movs	r3, #48	@ 0x30
 800f8d0:	3130      	adds	r1, #48	@ 0x30
 800f8d2:	7083      	strb	r3, [r0, #2]
 800f8d4:	70c1      	strb	r1, [r0, #3]
 800f8d6:	1d03      	adds	r3, r0, #4
 800f8d8:	e7f1      	b.n	800f8be <__exponent+0x58>
	...

0800f8dc <_printf_float>:
 800f8dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8e0:	b08d      	sub	sp, #52	@ 0x34
 800f8e2:	460c      	mov	r4, r1
 800f8e4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800f8e8:	4616      	mov	r6, r2
 800f8ea:	461f      	mov	r7, r3
 800f8ec:	4605      	mov	r5, r0
 800f8ee:	f000 fcb1 	bl	8010254 <_localeconv_r>
 800f8f2:	6803      	ldr	r3, [r0, #0]
 800f8f4:	9304      	str	r3, [sp, #16]
 800f8f6:	4618      	mov	r0, r3
 800f8f8:	f7f0 fce2 	bl	80002c0 <strlen>
 800f8fc:	2300      	movs	r3, #0
 800f8fe:	930a      	str	r3, [sp, #40]	@ 0x28
 800f900:	f8d8 3000 	ldr.w	r3, [r8]
 800f904:	9005      	str	r0, [sp, #20]
 800f906:	3307      	adds	r3, #7
 800f908:	f023 0307 	bic.w	r3, r3, #7
 800f90c:	f103 0208 	add.w	r2, r3, #8
 800f910:	f894 a018 	ldrb.w	sl, [r4, #24]
 800f914:	f8d4 b000 	ldr.w	fp, [r4]
 800f918:	f8c8 2000 	str.w	r2, [r8]
 800f91c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f920:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800f924:	9307      	str	r3, [sp, #28]
 800f926:	f8cd 8018 	str.w	r8, [sp, #24]
 800f92a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800f92e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f932:	4b9c      	ldr	r3, [pc, #624]	@ (800fba4 <_printf_float+0x2c8>)
 800f934:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f938:	f7f1 f920 	bl	8000b7c <__aeabi_dcmpun>
 800f93c:	bb70      	cbnz	r0, 800f99c <_printf_float+0xc0>
 800f93e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f942:	4b98      	ldr	r3, [pc, #608]	@ (800fba4 <_printf_float+0x2c8>)
 800f944:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f948:	f7f1 f8fa 	bl	8000b40 <__aeabi_dcmple>
 800f94c:	bb30      	cbnz	r0, 800f99c <_printf_float+0xc0>
 800f94e:	2200      	movs	r2, #0
 800f950:	2300      	movs	r3, #0
 800f952:	4640      	mov	r0, r8
 800f954:	4649      	mov	r1, r9
 800f956:	f7f1 f8e9 	bl	8000b2c <__aeabi_dcmplt>
 800f95a:	b110      	cbz	r0, 800f962 <_printf_float+0x86>
 800f95c:	232d      	movs	r3, #45	@ 0x2d
 800f95e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f962:	4a91      	ldr	r2, [pc, #580]	@ (800fba8 <_printf_float+0x2cc>)
 800f964:	4b91      	ldr	r3, [pc, #580]	@ (800fbac <_printf_float+0x2d0>)
 800f966:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800f96a:	bf94      	ite	ls
 800f96c:	4690      	movls	r8, r2
 800f96e:	4698      	movhi	r8, r3
 800f970:	2303      	movs	r3, #3
 800f972:	6123      	str	r3, [r4, #16]
 800f974:	f02b 0304 	bic.w	r3, fp, #4
 800f978:	6023      	str	r3, [r4, #0]
 800f97a:	f04f 0900 	mov.w	r9, #0
 800f97e:	9700      	str	r7, [sp, #0]
 800f980:	4633      	mov	r3, r6
 800f982:	aa0b      	add	r2, sp, #44	@ 0x2c
 800f984:	4621      	mov	r1, r4
 800f986:	4628      	mov	r0, r5
 800f988:	f000 f9d2 	bl	800fd30 <_printf_common>
 800f98c:	3001      	adds	r0, #1
 800f98e:	f040 808d 	bne.w	800faac <_printf_float+0x1d0>
 800f992:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f996:	b00d      	add	sp, #52	@ 0x34
 800f998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f99c:	4642      	mov	r2, r8
 800f99e:	464b      	mov	r3, r9
 800f9a0:	4640      	mov	r0, r8
 800f9a2:	4649      	mov	r1, r9
 800f9a4:	f7f1 f8ea 	bl	8000b7c <__aeabi_dcmpun>
 800f9a8:	b140      	cbz	r0, 800f9bc <_printf_float+0xe0>
 800f9aa:	464b      	mov	r3, r9
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	bfbc      	itt	lt
 800f9b0:	232d      	movlt	r3, #45	@ 0x2d
 800f9b2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800f9b6:	4a7e      	ldr	r2, [pc, #504]	@ (800fbb0 <_printf_float+0x2d4>)
 800f9b8:	4b7e      	ldr	r3, [pc, #504]	@ (800fbb4 <_printf_float+0x2d8>)
 800f9ba:	e7d4      	b.n	800f966 <_printf_float+0x8a>
 800f9bc:	6863      	ldr	r3, [r4, #4]
 800f9be:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800f9c2:	9206      	str	r2, [sp, #24]
 800f9c4:	1c5a      	adds	r2, r3, #1
 800f9c6:	d13b      	bne.n	800fa40 <_printf_float+0x164>
 800f9c8:	2306      	movs	r3, #6
 800f9ca:	6063      	str	r3, [r4, #4]
 800f9cc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800f9d0:	2300      	movs	r3, #0
 800f9d2:	6022      	str	r2, [r4, #0]
 800f9d4:	9303      	str	r3, [sp, #12]
 800f9d6:	ab0a      	add	r3, sp, #40	@ 0x28
 800f9d8:	e9cd a301 	strd	sl, r3, [sp, #4]
 800f9dc:	ab09      	add	r3, sp, #36	@ 0x24
 800f9de:	9300      	str	r3, [sp, #0]
 800f9e0:	6861      	ldr	r1, [r4, #4]
 800f9e2:	ec49 8b10 	vmov	d0, r8, r9
 800f9e6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800f9ea:	4628      	mov	r0, r5
 800f9ec:	f7ff fed6 	bl	800f79c <__cvt>
 800f9f0:	9b06      	ldr	r3, [sp, #24]
 800f9f2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f9f4:	2b47      	cmp	r3, #71	@ 0x47
 800f9f6:	4680      	mov	r8, r0
 800f9f8:	d129      	bne.n	800fa4e <_printf_float+0x172>
 800f9fa:	1cc8      	adds	r0, r1, #3
 800f9fc:	db02      	blt.n	800fa04 <_printf_float+0x128>
 800f9fe:	6863      	ldr	r3, [r4, #4]
 800fa00:	4299      	cmp	r1, r3
 800fa02:	dd41      	ble.n	800fa88 <_printf_float+0x1ac>
 800fa04:	f1aa 0a02 	sub.w	sl, sl, #2
 800fa08:	fa5f fa8a 	uxtb.w	sl, sl
 800fa0c:	3901      	subs	r1, #1
 800fa0e:	4652      	mov	r2, sl
 800fa10:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800fa14:	9109      	str	r1, [sp, #36]	@ 0x24
 800fa16:	f7ff ff26 	bl	800f866 <__exponent>
 800fa1a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800fa1c:	1813      	adds	r3, r2, r0
 800fa1e:	2a01      	cmp	r2, #1
 800fa20:	4681      	mov	r9, r0
 800fa22:	6123      	str	r3, [r4, #16]
 800fa24:	dc02      	bgt.n	800fa2c <_printf_float+0x150>
 800fa26:	6822      	ldr	r2, [r4, #0]
 800fa28:	07d2      	lsls	r2, r2, #31
 800fa2a:	d501      	bpl.n	800fa30 <_printf_float+0x154>
 800fa2c:	3301      	adds	r3, #1
 800fa2e:	6123      	str	r3, [r4, #16]
 800fa30:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	d0a2      	beq.n	800f97e <_printf_float+0xa2>
 800fa38:	232d      	movs	r3, #45	@ 0x2d
 800fa3a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fa3e:	e79e      	b.n	800f97e <_printf_float+0xa2>
 800fa40:	9a06      	ldr	r2, [sp, #24]
 800fa42:	2a47      	cmp	r2, #71	@ 0x47
 800fa44:	d1c2      	bne.n	800f9cc <_printf_float+0xf0>
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d1c0      	bne.n	800f9cc <_printf_float+0xf0>
 800fa4a:	2301      	movs	r3, #1
 800fa4c:	e7bd      	b.n	800f9ca <_printf_float+0xee>
 800fa4e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800fa52:	d9db      	bls.n	800fa0c <_printf_float+0x130>
 800fa54:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800fa58:	d118      	bne.n	800fa8c <_printf_float+0x1b0>
 800fa5a:	2900      	cmp	r1, #0
 800fa5c:	6863      	ldr	r3, [r4, #4]
 800fa5e:	dd0b      	ble.n	800fa78 <_printf_float+0x19c>
 800fa60:	6121      	str	r1, [r4, #16]
 800fa62:	b913      	cbnz	r3, 800fa6a <_printf_float+0x18e>
 800fa64:	6822      	ldr	r2, [r4, #0]
 800fa66:	07d0      	lsls	r0, r2, #31
 800fa68:	d502      	bpl.n	800fa70 <_printf_float+0x194>
 800fa6a:	3301      	adds	r3, #1
 800fa6c:	440b      	add	r3, r1
 800fa6e:	6123      	str	r3, [r4, #16]
 800fa70:	65a1      	str	r1, [r4, #88]	@ 0x58
 800fa72:	f04f 0900 	mov.w	r9, #0
 800fa76:	e7db      	b.n	800fa30 <_printf_float+0x154>
 800fa78:	b913      	cbnz	r3, 800fa80 <_printf_float+0x1a4>
 800fa7a:	6822      	ldr	r2, [r4, #0]
 800fa7c:	07d2      	lsls	r2, r2, #31
 800fa7e:	d501      	bpl.n	800fa84 <_printf_float+0x1a8>
 800fa80:	3302      	adds	r3, #2
 800fa82:	e7f4      	b.n	800fa6e <_printf_float+0x192>
 800fa84:	2301      	movs	r3, #1
 800fa86:	e7f2      	b.n	800fa6e <_printf_float+0x192>
 800fa88:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800fa8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fa8e:	4299      	cmp	r1, r3
 800fa90:	db05      	blt.n	800fa9e <_printf_float+0x1c2>
 800fa92:	6823      	ldr	r3, [r4, #0]
 800fa94:	6121      	str	r1, [r4, #16]
 800fa96:	07d8      	lsls	r0, r3, #31
 800fa98:	d5ea      	bpl.n	800fa70 <_printf_float+0x194>
 800fa9a:	1c4b      	adds	r3, r1, #1
 800fa9c:	e7e7      	b.n	800fa6e <_printf_float+0x192>
 800fa9e:	2900      	cmp	r1, #0
 800faa0:	bfd4      	ite	le
 800faa2:	f1c1 0202 	rsble	r2, r1, #2
 800faa6:	2201      	movgt	r2, #1
 800faa8:	4413      	add	r3, r2
 800faaa:	e7e0      	b.n	800fa6e <_printf_float+0x192>
 800faac:	6823      	ldr	r3, [r4, #0]
 800faae:	055a      	lsls	r2, r3, #21
 800fab0:	d407      	bmi.n	800fac2 <_printf_float+0x1e6>
 800fab2:	6923      	ldr	r3, [r4, #16]
 800fab4:	4642      	mov	r2, r8
 800fab6:	4631      	mov	r1, r6
 800fab8:	4628      	mov	r0, r5
 800faba:	47b8      	blx	r7
 800fabc:	3001      	adds	r0, #1
 800fabe:	d12b      	bne.n	800fb18 <_printf_float+0x23c>
 800fac0:	e767      	b.n	800f992 <_printf_float+0xb6>
 800fac2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800fac6:	f240 80dd 	bls.w	800fc84 <_printf_float+0x3a8>
 800faca:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800face:	2200      	movs	r2, #0
 800fad0:	2300      	movs	r3, #0
 800fad2:	f7f1 f821 	bl	8000b18 <__aeabi_dcmpeq>
 800fad6:	2800      	cmp	r0, #0
 800fad8:	d033      	beq.n	800fb42 <_printf_float+0x266>
 800fada:	4a37      	ldr	r2, [pc, #220]	@ (800fbb8 <_printf_float+0x2dc>)
 800fadc:	2301      	movs	r3, #1
 800fade:	4631      	mov	r1, r6
 800fae0:	4628      	mov	r0, r5
 800fae2:	47b8      	blx	r7
 800fae4:	3001      	adds	r0, #1
 800fae6:	f43f af54 	beq.w	800f992 <_printf_float+0xb6>
 800faea:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800faee:	4543      	cmp	r3, r8
 800faf0:	db02      	blt.n	800faf8 <_printf_float+0x21c>
 800faf2:	6823      	ldr	r3, [r4, #0]
 800faf4:	07d8      	lsls	r0, r3, #31
 800faf6:	d50f      	bpl.n	800fb18 <_printf_float+0x23c>
 800faf8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fafc:	4631      	mov	r1, r6
 800fafe:	4628      	mov	r0, r5
 800fb00:	47b8      	blx	r7
 800fb02:	3001      	adds	r0, #1
 800fb04:	f43f af45 	beq.w	800f992 <_printf_float+0xb6>
 800fb08:	f04f 0900 	mov.w	r9, #0
 800fb0c:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800fb10:	f104 0a1a 	add.w	sl, r4, #26
 800fb14:	45c8      	cmp	r8, r9
 800fb16:	dc09      	bgt.n	800fb2c <_printf_float+0x250>
 800fb18:	6823      	ldr	r3, [r4, #0]
 800fb1a:	079b      	lsls	r3, r3, #30
 800fb1c:	f100 8103 	bmi.w	800fd26 <_printf_float+0x44a>
 800fb20:	68e0      	ldr	r0, [r4, #12]
 800fb22:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fb24:	4298      	cmp	r0, r3
 800fb26:	bfb8      	it	lt
 800fb28:	4618      	movlt	r0, r3
 800fb2a:	e734      	b.n	800f996 <_printf_float+0xba>
 800fb2c:	2301      	movs	r3, #1
 800fb2e:	4652      	mov	r2, sl
 800fb30:	4631      	mov	r1, r6
 800fb32:	4628      	mov	r0, r5
 800fb34:	47b8      	blx	r7
 800fb36:	3001      	adds	r0, #1
 800fb38:	f43f af2b 	beq.w	800f992 <_printf_float+0xb6>
 800fb3c:	f109 0901 	add.w	r9, r9, #1
 800fb40:	e7e8      	b.n	800fb14 <_printf_float+0x238>
 800fb42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	dc39      	bgt.n	800fbbc <_printf_float+0x2e0>
 800fb48:	4a1b      	ldr	r2, [pc, #108]	@ (800fbb8 <_printf_float+0x2dc>)
 800fb4a:	2301      	movs	r3, #1
 800fb4c:	4631      	mov	r1, r6
 800fb4e:	4628      	mov	r0, r5
 800fb50:	47b8      	blx	r7
 800fb52:	3001      	adds	r0, #1
 800fb54:	f43f af1d 	beq.w	800f992 <_printf_float+0xb6>
 800fb58:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800fb5c:	ea59 0303 	orrs.w	r3, r9, r3
 800fb60:	d102      	bne.n	800fb68 <_printf_float+0x28c>
 800fb62:	6823      	ldr	r3, [r4, #0]
 800fb64:	07d9      	lsls	r1, r3, #31
 800fb66:	d5d7      	bpl.n	800fb18 <_printf_float+0x23c>
 800fb68:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fb6c:	4631      	mov	r1, r6
 800fb6e:	4628      	mov	r0, r5
 800fb70:	47b8      	blx	r7
 800fb72:	3001      	adds	r0, #1
 800fb74:	f43f af0d 	beq.w	800f992 <_printf_float+0xb6>
 800fb78:	f04f 0a00 	mov.w	sl, #0
 800fb7c:	f104 0b1a 	add.w	fp, r4, #26
 800fb80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fb82:	425b      	negs	r3, r3
 800fb84:	4553      	cmp	r3, sl
 800fb86:	dc01      	bgt.n	800fb8c <_printf_float+0x2b0>
 800fb88:	464b      	mov	r3, r9
 800fb8a:	e793      	b.n	800fab4 <_printf_float+0x1d8>
 800fb8c:	2301      	movs	r3, #1
 800fb8e:	465a      	mov	r2, fp
 800fb90:	4631      	mov	r1, r6
 800fb92:	4628      	mov	r0, r5
 800fb94:	47b8      	blx	r7
 800fb96:	3001      	adds	r0, #1
 800fb98:	f43f aefb 	beq.w	800f992 <_printf_float+0xb6>
 800fb9c:	f10a 0a01 	add.w	sl, sl, #1
 800fba0:	e7ee      	b.n	800fb80 <_printf_float+0x2a4>
 800fba2:	bf00      	nop
 800fba4:	7fefffff 	.word	0x7fefffff
 800fba8:	08013538 	.word	0x08013538
 800fbac:	0801353c 	.word	0x0801353c
 800fbb0:	08013540 	.word	0x08013540
 800fbb4:	08013544 	.word	0x08013544
 800fbb8:	08013548 	.word	0x08013548
 800fbbc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800fbbe:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800fbc2:	4553      	cmp	r3, sl
 800fbc4:	bfa8      	it	ge
 800fbc6:	4653      	movge	r3, sl
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	4699      	mov	r9, r3
 800fbcc:	dc36      	bgt.n	800fc3c <_printf_float+0x360>
 800fbce:	f04f 0b00 	mov.w	fp, #0
 800fbd2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fbd6:	f104 021a 	add.w	r2, r4, #26
 800fbda:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800fbdc:	9306      	str	r3, [sp, #24]
 800fbde:	eba3 0309 	sub.w	r3, r3, r9
 800fbe2:	455b      	cmp	r3, fp
 800fbe4:	dc31      	bgt.n	800fc4a <_printf_float+0x36e>
 800fbe6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fbe8:	459a      	cmp	sl, r3
 800fbea:	dc3a      	bgt.n	800fc62 <_printf_float+0x386>
 800fbec:	6823      	ldr	r3, [r4, #0]
 800fbee:	07da      	lsls	r2, r3, #31
 800fbf0:	d437      	bmi.n	800fc62 <_printf_float+0x386>
 800fbf2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fbf4:	ebaa 0903 	sub.w	r9, sl, r3
 800fbf8:	9b06      	ldr	r3, [sp, #24]
 800fbfa:	ebaa 0303 	sub.w	r3, sl, r3
 800fbfe:	4599      	cmp	r9, r3
 800fc00:	bfa8      	it	ge
 800fc02:	4699      	movge	r9, r3
 800fc04:	f1b9 0f00 	cmp.w	r9, #0
 800fc08:	dc33      	bgt.n	800fc72 <_printf_float+0x396>
 800fc0a:	f04f 0800 	mov.w	r8, #0
 800fc0e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fc12:	f104 0b1a 	add.w	fp, r4, #26
 800fc16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fc18:	ebaa 0303 	sub.w	r3, sl, r3
 800fc1c:	eba3 0309 	sub.w	r3, r3, r9
 800fc20:	4543      	cmp	r3, r8
 800fc22:	f77f af79 	ble.w	800fb18 <_printf_float+0x23c>
 800fc26:	2301      	movs	r3, #1
 800fc28:	465a      	mov	r2, fp
 800fc2a:	4631      	mov	r1, r6
 800fc2c:	4628      	mov	r0, r5
 800fc2e:	47b8      	blx	r7
 800fc30:	3001      	adds	r0, #1
 800fc32:	f43f aeae 	beq.w	800f992 <_printf_float+0xb6>
 800fc36:	f108 0801 	add.w	r8, r8, #1
 800fc3a:	e7ec      	b.n	800fc16 <_printf_float+0x33a>
 800fc3c:	4642      	mov	r2, r8
 800fc3e:	4631      	mov	r1, r6
 800fc40:	4628      	mov	r0, r5
 800fc42:	47b8      	blx	r7
 800fc44:	3001      	adds	r0, #1
 800fc46:	d1c2      	bne.n	800fbce <_printf_float+0x2f2>
 800fc48:	e6a3      	b.n	800f992 <_printf_float+0xb6>
 800fc4a:	2301      	movs	r3, #1
 800fc4c:	4631      	mov	r1, r6
 800fc4e:	4628      	mov	r0, r5
 800fc50:	9206      	str	r2, [sp, #24]
 800fc52:	47b8      	blx	r7
 800fc54:	3001      	adds	r0, #1
 800fc56:	f43f ae9c 	beq.w	800f992 <_printf_float+0xb6>
 800fc5a:	9a06      	ldr	r2, [sp, #24]
 800fc5c:	f10b 0b01 	add.w	fp, fp, #1
 800fc60:	e7bb      	b.n	800fbda <_printf_float+0x2fe>
 800fc62:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fc66:	4631      	mov	r1, r6
 800fc68:	4628      	mov	r0, r5
 800fc6a:	47b8      	blx	r7
 800fc6c:	3001      	adds	r0, #1
 800fc6e:	d1c0      	bne.n	800fbf2 <_printf_float+0x316>
 800fc70:	e68f      	b.n	800f992 <_printf_float+0xb6>
 800fc72:	9a06      	ldr	r2, [sp, #24]
 800fc74:	464b      	mov	r3, r9
 800fc76:	4442      	add	r2, r8
 800fc78:	4631      	mov	r1, r6
 800fc7a:	4628      	mov	r0, r5
 800fc7c:	47b8      	blx	r7
 800fc7e:	3001      	adds	r0, #1
 800fc80:	d1c3      	bne.n	800fc0a <_printf_float+0x32e>
 800fc82:	e686      	b.n	800f992 <_printf_float+0xb6>
 800fc84:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800fc88:	f1ba 0f01 	cmp.w	sl, #1
 800fc8c:	dc01      	bgt.n	800fc92 <_printf_float+0x3b6>
 800fc8e:	07db      	lsls	r3, r3, #31
 800fc90:	d536      	bpl.n	800fd00 <_printf_float+0x424>
 800fc92:	2301      	movs	r3, #1
 800fc94:	4642      	mov	r2, r8
 800fc96:	4631      	mov	r1, r6
 800fc98:	4628      	mov	r0, r5
 800fc9a:	47b8      	blx	r7
 800fc9c:	3001      	adds	r0, #1
 800fc9e:	f43f ae78 	beq.w	800f992 <_printf_float+0xb6>
 800fca2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fca6:	4631      	mov	r1, r6
 800fca8:	4628      	mov	r0, r5
 800fcaa:	47b8      	blx	r7
 800fcac:	3001      	adds	r0, #1
 800fcae:	f43f ae70 	beq.w	800f992 <_printf_float+0xb6>
 800fcb2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800fcb6:	2200      	movs	r2, #0
 800fcb8:	2300      	movs	r3, #0
 800fcba:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800fcbe:	f7f0 ff2b 	bl	8000b18 <__aeabi_dcmpeq>
 800fcc2:	b9c0      	cbnz	r0, 800fcf6 <_printf_float+0x41a>
 800fcc4:	4653      	mov	r3, sl
 800fcc6:	f108 0201 	add.w	r2, r8, #1
 800fcca:	4631      	mov	r1, r6
 800fccc:	4628      	mov	r0, r5
 800fcce:	47b8      	blx	r7
 800fcd0:	3001      	adds	r0, #1
 800fcd2:	d10c      	bne.n	800fcee <_printf_float+0x412>
 800fcd4:	e65d      	b.n	800f992 <_printf_float+0xb6>
 800fcd6:	2301      	movs	r3, #1
 800fcd8:	465a      	mov	r2, fp
 800fcda:	4631      	mov	r1, r6
 800fcdc:	4628      	mov	r0, r5
 800fcde:	47b8      	blx	r7
 800fce0:	3001      	adds	r0, #1
 800fce2:	f43f ae56 	beq.w	800f992 <_printf_float+0xb6>
 800fce6:	f108 0801 	add.w	r8, r8, #1
 800fcea:	45d0      	cmp	r8, sl
 800fcec:	dbf3      	blt.n	800fcd6 <_printf_float+0x3fa>
 800fcee:	464b      	mov	r3, r9
 800fcf0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800fcf4:	e6df      	b.n	800fab6 <_printf_float+0x1da>
 800fcf6:	f04f 0800 	mov.w	r8, #0
 800fcfa:	f104 0b1a 	add.w	fp, r4, #26
 800fcfe:	e7f4      	b.n	800fcea <_printf_float+0x40e>
 800fd00:	2301      	movs	r3, #1
 800fd02:	4642      	mov	r2, r8
 800fd04:	e7e1      	b.n	800fcca <_printf_float+0x3ee>
 800fd06:	2301      	movs	r3, #1
 800fd08:	464a      	mov	r2, r9
 800fd0a:	4631      	mov	r1, r6
 800fd0c:	4628      	mov	r0, r5
 800fd0e:	47b8      	blx	r7
 800fd10:	3001      	adds	r0, #1
 800fd12:	f43f ae3e 	beq.w	800f992 <_printf_float+0xb6>
 800fd16:	f108 0801 	add.w	r8, r8, #1
 800fd1a:	68e3      	ldr	r3, [r4, #12]
 800fd1c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800fd1e:	1a5b      	subs	r3, r3, r1
 800fd20:	4543      	cmp	r3, r8
 800fd22:	dcf0      	bgt.n	800fd06 <_printf_float+0x42a>
 800fd24:	e6fc      	b.n	800fb20 <_printf_float+0x244>
 800fd26:	f04f 0800 	mov.w	r8, #0
 800fd2a:	f104 0919 	add.w	r9, r4, #25
 800fd2e:	e7f4      	b.n	800fd1a <_printf_float+0x43e>

0800fd30 <_printf_common>:
 800fd30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fd34:	4616      	mov	r6, r2
 800fd36:	4698      	mov	r8, r3
 800fd38:	688a      	ldr	r2, [r1, #8]
 800fd3a:	690b      	ldr	r3, [r1, #16]
 800fd3c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800fd40:	4293      	cmp	r3, r2
 800fd42:	bfb8      	it	lt
 800fd44:	4613      	movlt	r3, r2
 800fd46:	6033      	str	r3, [r6, #0]
 800fd48:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800fd4c:	4607      	mov	r7, r0
 800fd4e:	460c      	mov	r4, r1
 800fd50:	b10a      	cbz	r2, 800fd56 <_printf_common+0x26>
 800fd52:	3301      	adds	r3, #1
 800fd54:	6033      	str	r3, [r6, #0]
 800fd56:	6823      	ldr	r3, [r4, #0]
 800fd58:	0699      	lsls	r1, r3, #26
 800fd5a:	bf42      	ittt	mi
 800fd5c:	6833      	ldrmi	r3, [r6, #0]
 800fd5e:	3302      	addmi	r3, #2
 800fd60:	6033      	strmi	r3, [r6, #0]
 800fd62:	6825      	ldr	r5, [r4, #0]
 800fd64:	f015 0506 	ands.w	r5, r5, #6
 800fd68:	d106      	bne.n	800fd78 <_printf_common+0x48>
 800fd6a:	f104 0a19 	add.w	sl, r4, #25
 800fd6e:	68e3      	ldr	r3, [r4, #12]
 800fd70:	6832      	ldr	r2, [r6, #0]
 800fd72:	1a9b      	subs	r3, r3, r2
 800fd74:	42ab      	cmp	r3, r5
 800fd76:	dc26      	bgt.n	800fdc6 <_printf_common+0x96>
 800fd78:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800fd7c:	6822      	ldr	r2, [r4, #0]
 800fd7e:	3b00      	subs	r3, #0
 800fd80:	bf18      	it	ne
 800fd82:	2301      	movne	r3, #1
 800fd84:	0692      	lsls	r2, r2, #26
 800fd86:	d42b      	bmi.n	800fde0 <_printf_common+0xb0>
 800fd88:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800fd8c:	4641      	mov	r1, r8
 800fd8e:	4638      	mov	r0, r7
 800fd90:	47c8      	blx	r9
 800fd92:	3001      	adds	r0, #1
 800fd94:	d01e      	beq.n	800fdd4 <_printf_common+0xa4>
 800fd96:	6823      	ldr	r3, [r4, #0]
 800fd98:	6922      	ldr	r2, [r4, #16]
 800fd9a:	f003 0306 	and.w	r3, r3, #6
 800fd9e:	2b04      	cmp	r3, #4
 800fda0:	bf02      	ittt	eq
 800fda2:	68e5      	ldreq	r5, [r4, #12]
 800fda4:	6833      	ldreq	r3, [r6, #0]
 800fda6:	1aed      	subeq	r5, r5, r3
 800fda8:	68a3      	ldr	r3, [r4, #8]
 800fdaa:	bf0c      	ite	eq
 800fdac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fdb0:	2500      	movne	r5, #0
 800fdb2:	4293      	cmp	r3, r2
 800fdb4:	bfc4      	itt	gt
 800fdb6:	1a9b      	subgt	r3, r3, r2
 800fdb8:	18ed      	addgt	r5, r5, r3
 800fdba:	2600      	movs	r6, #0
 800fdbc:	341a      	adds	r4, #26
 800fdbe:	42b5      	cmp	r5, r6
 800fdc0:	d11a      	bne.n	800fdf8 <_printf_common+0xc8>
 800fdc2:	2000      	movs	r0, #0
 800fdc4:	e008      	b.n	800fdd8 <_printf_common+0xa8>
 800fdc6:	2301      	movs	r3, #1
 800fdc8:	4652      	mov	r2, sl
 800fdca:	4641      	mov	r1, r8
 800fdcc:	4638      	mov	r0, r7
 800fdce:	47c8      	blx	r9
 800fdd0:	3001      	adds	r0, #1
 800fdd2:	d103      	bne.n	800fddc <_printf_common+0xac>
 800fdd4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800fdd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fddc:	3501      	adds	r5, #1
 800fdde:	e7c6      	b.n	800fd6e <_printf_common+0x3e>
 800fde0:	18e1      	adds	r1, r4, r3
 800fde2:	1c5a      	adds	r2, r3, #1
 800fde4:	2030      	movs	r0, #48	@ 0x30
 800fde6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800fdea:	4422      	add	r2, r4
 800fdec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800fdf0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800fdf4:	3302      	adds	r3, #2
 800fdf6:	e7c7      	b.n	800fd88 <_printf_common+0x58>
 800fdf8:	2301      	movs	r3, #1
 800fdfa:	4622      	mov	r2, r4
 800fdfc:	4641      	mov	r1, r8
 800fdfe:	4638      	mov	r0, r7
 800fe00:	47c8      	blx	r9
 800fe02:	3001      	adds	r0, #1
 800fe04:	d0e6      	beq.n	800fdd4 <_printf_common+0xa4>
 800fe06:	3601      	adds	r6, #1
 800fe08:	e7d9      	b.n	800fdbe <_printf_common+0x8e>
	...

0800fe0c <_printf_i>:
 800fe0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fe10:	7e0f      	ldrb	r7, [r1, #24]
 800fe12:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800fe14:	2f78      	cmp	r7, #120	@ 0x78
 800fe16:	4691      	mov	r9, r2
 800fe18:	4680      	mov	r8, r0
 800fe1a:	460c      	mov	r4, r1
 800fe1c:	469a      	mov	sl, r3
 800fe1e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800fe22:	d807      	bhi.n	800fe34 <_printf_i+0x28>
 800fe24:	2f62      	cmp	r7, #98	@ 0x62
 800fe26:	d80a      	bhi.n	800fe3e <_printf_i+0x32>
 800fe28:	2f00      	cmp	r7, #0
 800fe2a:	f000 80d2 	beq.w	800ffd2 <_printf_i+0x1c6>
 800fe2e:	2f58      	cmp	r7, #88	@ 0x58
 800fe30:	f000 80b9 	beq.w	800ffa6 <_printf_i+0x19a>
 800fe34:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800fe38:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800fe3c:	e03a      	b.n	800feb4 <_printf_i+0xa8>
 800fe3e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800fe42:	2b15      	cmp	r3, #21
 800fe44:	d8f6      	bhi.n	800fe34 <_printf_i+0x28>
 800fe46:	a101      	add	r1, pc, #4	@ (adr r1, 800fe4c <_printf_i+0x40>)
 800fe48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fe4c:	0800fea5 	.word	0x0800fea5
 800fe50:	0800feb9 	.word	0x0800feb9
 800fe54:	0800fe35 	.word	0x0800fe35
 800fe58:	0800fe35 	.word	0x0800fe35
 800fe5c:	0800fe35 	.word	0x0800fe35
 800fe60:	0800fe35 	.word	0x0800fe35
 800fe64:	0800feb9 	.word	0x0800feb9
 800fe68:	0800fe35 	.word	0x0800fe35
 800fe6c:	0800fe35 	.word	0x0800fe35
 800fe70:	0800fe35 	.word	0x0800fe35
 800fe74:	0800fe35 	.word	0x0800fe35
 800fe78:	0800ffb9 	.word	0x0800ffb9
 800fe7c:	0800fee3 	.word	0x0800fee3
 800fe80:	0800ff73 	.word	0x0800ff73
 800fe84:	0800fe35 	.word	0x0800fe35
 800fe88:	0800fe35 	.word	0x0800fe35
 800fe8c:	0800ffdb 	.word	0x0800ffdb
 800fe90:	0800fe35 	.word	0x0800fe35
 800fe94:	0800fee3 	.word	0x0800fee3
 800fe98:	0800fe35 	.word	0x0800fe35
 800fe9c:	0800fe35 	.word	0x0800fe35
 800fea0:	0800ff7b 	.word	0x0800ff7b
 800fea4:	6833      	ldr	r3, [r6, #0]
 800fea6:	1d1a      	adds	r2, r3, #4
 800fea8:	681b      	ldr	r3, [r3, #0]
 800feaa:	6032      	str	r2, [r6, #0]
 800feac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800feb0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800feb4:	2301      	movs	r3, #1
 800feb6:	e09d      	b.n	800fff4 <_printf_i+0x1e8>
 800feb8:	6833      	ldr	r3, [r6, #0]
 800feba:	6820      	ldr	r0, [r4, #0]
 800febc:	1d19      	adds	r1, r3, #4
 800febe:	6031      	str	r1, [r6, #0]
 800fec0:	0606      	lsls	r6, r0, #24
 800fec2:	d501      	bpl.n	800fec8 <_printf_i+0xbc>
 800fec4:	681d      	ldr	r5, [r3, #0]
 800fec6:	e003      	b.n	800fed0 <_printf_i+0xc4>
 800fec8:	0645      	lsls	r5, r0, #25
 800feca:	d5fb      	bpl.n	800fec4 <_printf_i+0xb8>
 800fecc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800fed0:	2d00      	cmp	r5, #0
 800fed2:	da03      	bge.n	800fedc <_printf_i+0xd0>
 800fed4:	232d      	movs	r3, #45	@ 0x2d
 800fed6:	426d      	negs	r5, r5
 800fed8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fedc:	4859      	ldr	r0, [pc, #356]	@ (8010044 <_printf_i+0x238>)
 800fede:	230a      	movs	r3, #10
 800fee0:	e011      	b.n	800ff06 <_printf_i+0xfa>
 800fee2:	6821      	ldr	r1, [r4, #0]
 800fee4:	6833      	ldr	r3, [r6, #0]
 800fee6:	0608      	lsls	r0, r1, #24
 800fee8:	f853 5b04 	ldr.w	r5, [r3], #4
 800feec:	d402      	bmi.n	800fef4 <_printf_i+0xe8>
 800feee:	0649      	lsls	r1, r1, #25
 800fef0:	bf48      	it	mi
 800fef2:	b2ad      	uxthmi	r5, r5
 800fef4:	2f6f      	cmp	r7, #111	@ 0x6f
 800fef6:	4853      	ldr	r0, [pc, #332]	@ (8010044 <_printf_i+0x238>)
 800fef8:	6033      	str	r3, [r6, #0]
 800fefa:	bf14      	ite	ne
 800fefc:	230a      	movne	r3, #10
 800fefe:	2308      	moveq	r3, #8
 800ff00:	2100      	movs	r1, #0
 800ff02:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ff06:	6866      	ldr	r6, [r4, #4]
 800ff08:	60a6      	str	r6, [r4, #8]
 800ff0a:	2e00      	cmp	r6, #0
 800ff0c:	bfa2      	ittt	ge
 800ff0e:	6821      	ldrge	r1, [r4, #0]
 800ff10:	f021 0104 	bicge.w	r1, r1, #4
 800ff14:	6021      	strge	r1, [r4, #0]
 800ff16:	b90d      	cbnz	r5, 800ff1c <_printf_i+0x110>
 800ff18:	2e00      	cmp	r6, #0
 800ff1a:	d04b      	beq.n	800ffb4 <_printf_i+0x1a8>
 800ff1c:	4616      	mov	r6, r2
 800ff1e:	fbb5 f1f3 	udiv	r1, r5, r3
 800ff22:	fb03 5711 	mls	r7, r3, r1, r5
 800ff26:	5dc7      	ldrb	r7, [r0, r7]
 800ff28:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ff2c:	462f      	mov	r7, r5
 800ff2e:	42bb      	cmp	r3, r7
 800ff30:	460d      	mov	r5, r1
 800ff32:	d9f4      	bls.n	800ff1e <_printf_i+0x112>
 800ff34:	2b08      	cmp	r3, #8
 800ff36:	d10b      	bne.n	800ff50 <_printf_i+0x144>
 800ff38:	6823      	ldr	r3, [r4, #0]
 800ff3a:	07df      	lsls	r7, r3, #31
 800ff3c:	d508      	bpl.n	800ff50 <_printf_i+0x144>
 800ff3e:	6923      	ldr	r3, [r4, #16]
 800ff40:	6861      	ldr	r1, [r4, #4]
 800ff42:	4299      	cmp	r1, r3
 800ff44:	bfde      	ittt	le
 800ff46:	2330      	movle	r3, #48	@ 0x30
 800ff48:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ff4c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800ff50:	1b92      	subs	r2, r2, r6
 800ff52:	6122      	str	r2, [r4, #16]
 800ff54:	f8cd a000 	str.w	sl, [sp]
 800ff58:	464b      	mov	r3, r9
 800ff5a:	aa03      	add	r2, sp, #12
 800ff5c:	4621      	mov	r1, r4
 800ff5e:	4640      	mov	r0, r8
 800ff60:	f7ff fee6 	bl	800fd30 <_printf_common>
 800ff64:	3001      	adds	r0, #1
 800ff66:	d14a      	bne.n	800fffe <_printf_i+0x1f2>
 800ff68:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ff6c:	b004      	add	sp, #16
 800ff6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff72:	6823      	ldr	r3, [r4, #0]
 800ff74:	f043 0320 	orr.w	r3, r3, #32
 800ff78:	6023      	str	r3, [r4, #0]
 800ff7a:	4833      	ldr	r0, [pc, #204]	@ (8010048 <_printf_i+0x23c>)
 800ff7c:	2778      	movs	r7, #120	@ 0x78
 800ff7e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ff82:	6823      	ldr	r3, [r4, #0]
 800ff84:	6831      	ldr	r1, [r6, #0]
 800ff86:	061f      	lsls	r7, r3, #24
 800ff88:	f851 5b04 	ldr.w	r5, [r1], #4
 800ff8c:	d402      	bmi.n	800ff94 <_printf_i+0x188>
 800ff8e:	065f      	lsls	r7, r3, #25
 800ff90:	bf48      	it	mi
 800ff92:	b2ad      	uxthmi	r5, r5
 800ff94:	6031      	str	r1, [r6, #0]
 800ff96:	07d9      	lsls	r1, r3, #31
 800ff98:	bf44      	itt	mi
 800ff9a:	f043 0320 	orrmi.w	r3, r3, #32
 800ff9e:	6023      	strmi	r3, [r4, #0]
 800ffa0:	b11d      	cbz	r5, 800ffaa <_printf_i+0x19e>
 800ffa2:	2310      	movs	r3, #16
 800ffa4:	e7ac      	b.n	800ff00 <_printf_i+0xf4>
 800ffa6:	4827      	ldr	r0, [pc, #156]	@ (8010044 <_printf_i+0x238>)
 800ffa8:	e7e9      	b.n	800ff7e <_printf_i+0x172>
 800ffaa:	6823      	ldr	r3, [r4, #0]
 800ffac:	f023 0320 	bic.w	r3, r3, #32
 800ffb0:	6023      	str	r3, [r4, #0]
 800ffb2:	e7f6      	b.n	800ffa2 <_printf_i+0x196>
 800ffb4:	4616      	mov	r6, r2
 800ffb6:	e7bd      	b.n	800ff34 <_printf_i+0x128>
 800ffb8:	6833      	ldr	r3, [r6, #0]
 800ffba:	6825      	ldr	r5, [r4, #0]
 800ffbc:	6961      	ldr	r1, [r4, #20]
 800ffbe:	1d18      	adds	r0, r3, #4
 800ffc0:	6030      	str	r0, [r6, #0]
 800ffc2:	062e      	lsls	r6, r5, #24
 800ffc4:	681b      	ldr	r3, [r3, #0]
 800ffc6:	d501      	bpl.n	800ffcc <_printf_i+0x1c0>
 800ffc8:	6019      	str	r1, [r3, #0]
 800ffca:	e002      	b.n	800ffd2 <_printf_i+0x1c6>
 800ffcc:	0668      	lsls	r0, r5, #25
 800ffce:	d5fb      	bpl.n	800ffc8 <_printf_i+0x1bc>
 800ffd0:	8019      	strh	r1, [r3, #0]
 800ffd2:	2300      	movs	r3, #0
 800ffd4:	6123      	str	r3, [r4, #16]
 800ffd6:	4616      	mov	r6, r2
 800ffd8:	e7bc      	b.n	800ff54 <_printf_i+0x148>
 800ffda:	6833      	ldr	r3, [r6, #0]
 800ffdc:	1d1a      	adds	r2, r3, #4
 800ffde:	6032      	str	r2, [r6, #0]
 800ffe0:	681e      	ldr	r6, [r3, #0]
 800ffe2:	6862      	ldr	r2, [r4, #4]
 800ffe4:	2100      	movs	r1, #0
 800ffe6:	4630      	mov	r0, r6
 800ffe8:	f7f0 f91a 	bl	8000220 <memchr>
 800ffec:	b108      	cbz	r0, 800fff2 <_printf_i+0x1e6>
 800ffee:	1b80      	subs	r0, r0, r6
 800fff0:	6060      	str	r0, [r4, #4]
 800fff2:	6863      	ldr	r3, [r4, #4]
 800fff4:	6123      	str	r3, [r4, #16]
 800fff6:	2300      	movs	r3, #0
 800fff8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fffc:	e7aa      	b.n	800ff54 <_printf_i+0x148>
 800fffe:	6923      	ldr	r3, [r4, #16]
 8010000:	4632      	mov	r2, r6
 8010002:	4649      	mov	r1, r9
 8010004:	4640      	mov	r0, r8
 8010006:	47d0      	blx	sl
 8010008:	3001      	adds	r0, #1
 801000a:	d0ad      	beq.n	800ff68 <_printf_i+0x15c>
 801000c:	6823      	ldr	r3, [r4, #0]
 801000e:	079b      	lsls	r3, r3, #30
 8010010:	d413      	bmi.n	801003a <_printf_i+0x22e>
 8010012:	68e0      	ldr	r0, [r4, #12]
 8010014:	9b03      	ldr	r3, [sp, #12]
 8010016:	4298      	cmp	r0, r3
 8010018:	bfb8      	it	lt
 801001a:	4618      	movlt	r0, r3
 801001c:	e7a6      	b.n	800ff6c <_printf_i+0x160>
 801001e:	2301      	movs	r3, #1
 8010020:	4632      	mov	r2, r6
 8010022:	4649      	mov	r1, r9
 8010024:	4640      	mov	r0, r8
 8010026:	47d0      	blx	sl
 8010028:	3001      	adds	r0, #1
 801002a:	d09d      	beq.n	800ff68 <_printf_i+0x15c>
 801002c:	3501      	adds	r5, #1
 801002e:	68e3      	ldr	r3, [r4, #12]
 8010030:	9903      	ldr	r1, [sp, #12]
 8010032:	1a5b      	subs	r3, r3, r1
 8010034:	42ab      	cmp	r3, r5
 8010036:	dcf2      	bgt.n	801001e <_printf_i+0x212>
 8010038:	e7eb      	b.n	8010012 <_printf_i+0x206>
 801003a:	2500      	movs	r5, #0
 801003c:	f104 0619 	add.w	r6, r4, #25
 8010040:	e7f5      	b.n	801002e <_printf_i+0x222>
 8010042:	bf00      	nop
 8010044:	0801354a 	.word	0x0801354a
 8010048:	0801355b 	.word	0x0801355b

0801004c <std>:
 801004c:	2300      	movs	r3, #0
 801004e:	b510      	push	{r4, lr}
 8010050:	4604      	mov	r4, r0
 8010052:	e9c0 3300 	strd	r3, r3, [r0]
 8010056:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801005a:	6083      	str	r3, [r0, #8]
 801005c:	8181      	strh	r1, [r0, #12]
 801005e:	6643      	str	r3, [r0, #100]	@ 0x64
 8010060:	81c2      	strh	r2, [r0, #14]
 8010062:	6183      	str	r3, [r0, #24]
 8010064:	4619      	mov	r1, r3
 8010066:	2208      	movs	r2, #8
 8010068:	305c      	adds	r0, #92	@ 0x5c
 801006a:	f000 f8eb 	bl	8010244 <memset>
 801006e:	4b0d      	ldr	r3, [pc, #52]	@ (80100a4 <std+0x58>)
 8010070:	6263      	str	r3, [r4, #36]	@ 0x24
 8010072:	4b0d      	ldr	r3, [pc, #52]	@ (80100a8 <std+0x5c>)
 8010074:	62a3      	str	r3, [r4, #40]	@ 0x28
 8010076:	4b0d      	ldr	r3, [pc, #52]	@ (80100ac <std+0x60>)
 8010078:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801007a:	4b0d      	ldr	r3, [pc, #52]	@ (80100b0 <std+0x64>)
 801007c:	6323      	str	r3, [r4, #48]	@ 0x30
 801007e:	4b0d      	ldr	r3, [pc, #52]	@ (80100b4 <std+0x68>)
 8010080:	6224      	str	r4, [r4, #32]
 8010082:	429c      	cmp	r4, r3
 8010084:	d006      	beq.n	8010094 <std+0x48>
 8010086:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801008a:	4294      	cmp	r4, r2
 801008c:	d002      	beq.n	8010094 <std+0x48>
 801008e:	33d0      	adds	r3, #208	@ 0xd0
 8010090:	429c      	cmp	r4, r3
 8010092:	d105      	bne.n	80100a0 <std+0x54>
 8010094:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8010098:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801009c:	f000 b95e 	b.w	801035c <__retarget_lock_init_recursive>
 80100a0:	bd10      	pop	{r4, pc}
 80100a2:	bf00      	nop
 80100a4:	08011d25 	.word	0x08011d25
 80100a8:	08011d47 	.word	0x08011d47
 80100ac:	08011d7f 	.word	0x08011d7f
 80100b0:	08011da3 	.word	0x08011da3
 80100b4:	200127f8 	.word	0x200127f8

080100b8 <stdio_exit_handler>:
 80100b8:	4a02      	ldr	r2, [pc, #8]	@ (80100c4 <stdio_exit_handler+0xc>)
 80100ba:	4903      	ldr	r1, [pc, #12]	@ (80100c8 <stdio_exit_handler+0x10>)
 80100bc:	4803      	ldr	r0, [pc, #12]	@ (80100cc <stdio_exit_handler+0x14>)
 80100be:	f000 b869 	b.w	8010194 <_fwalk_sglue>
 80100c2:	bf00      	nop
 80100c4:	200001a8 	.word	0x200001a8
 80100c8:	080115b9 	.word	0x080115b9
 80100cc:	200001b8 	.word	0x200001b8

080100d0 <cleanup_stdio>:
 80100d0:	6841      	ldr	r1, [r0, #4]
 80100d2:	4b0c      	ldr	r3, [pc, #48]	@ (8010104 <cleanup_stdio+0x34>)
 80100d4:	4299      	cmp	r1, r3
 80100d6:	b510      	push	{r4, lr}
 80100d8:	4604      	mov	r4, r0
 80100da:	d001      	beq.n	80100e0 <cleanup_stdio+0x10>
 80100dc:	f001 fa6c 	bl	80115b8 <_fflush_r>
 80100e0:	68a1      	ldr	r1, [r4, #8]
 80100e2:	4b09      	ldr	r3, [pc, #36]	@ (8010108 <cleanup_stdio+0x38>)
 80100e4:	4299      	cmp	r1, r3
 80100e6:	d002      	beq.n	80100ee <cleanup_stdio+0x1e>
 80100e8:	4620      	mov	r0, r4
 80100ea:	f001 fa65 	bl	80115b8 <_fflush_r>
 80100ee:	68e1      	ldr	r1, [r4, #12]
 80100f0:	4b06      	ldr	r3, [pc, #24]	@ (801010c <cleanup_stdio+0x3c>)
 80100f2:	4299      	cmp	r1, r3
 80100f4:	d004      	beq.n	8010100 <cleanup_stdio+0x30>
 80100f6:	4620      	mov	r0, r4
 80100f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80100fc:	f001 ba5c 	b.w	80115b8 <_fflush_r>
 8010100:	bd10      	pop	{r4, pc}
 8010102:	bf00      	nop
 8010104:	200127f8 	.word	0x200127f8
 8010108:	20012860 	.word	0x20012860
 801010c:	200128c8 	.word	0x200128c8

08010110 <global_stdio_init.part.0>:
 8010110:	b510      	push	{r4, lr}
 8010112:	4b0b      	ldr	r3, [pc, #44]	@ (8010140 <global_stdio_init.part.0+0x30>)
 8010114:	4c0b      	ldr	r4, [pc, #44]	@ (8010144 <global_stdio_init.part.0+0x34>)
 8010116:	4a0c      	ldr	r2, [pc, #48]	@ (8010148 <global_stdio_init.part.0+0x38>)
 8010118:	601a      	str	r2, [r3, #0]
 801011a:	4620      	mov	r0, r4
 801011c:	2200      	movs	r2, #0
 801011e:	2104      	movs	r1, #4
 8010120:	f7ff ff94 	bl	801004c <std>
 8010124:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8010128:	2201      	movs	r2, #1
 801012a:	2109      	movs	r1, #9
 801012c:	f7ff ff8e 	bl	801004c <std>
 8010130:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8010134:	2202      	movs	r2, #2
 8010136:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801013a:	2112      	movs	r1, #18
 801013c:	f7ff bf86 	b.w	801004c <std>
 8010140:	20012930 	.word	0x20012930
 8010144:	200127f8 	.word	0x200127f8
 8010148:	080100b9 	.word	0x080100b9

0801014c <__sfp_lock_acquire>:
 801014c:	4801      	ldr	r0, [pc, #4]	@ (8010154 <__sfp_lock_acquire+0x8>)
 801014e:	f000 b906 	b.w	801035e <__retarget_lock_acquire_recursive>
 8010152:	bf00      	nop
 8010154:	20012939 	.word	0x20012939

08010158 <__sfp_lock_release>:
 8010158:	4801      	ldr	r0, [pc, #4]	@ (8010160 <__sfp_lock_release+0x8>)
 801015a:	f000 b901 	b.w	8010360 <__retarget_lock_release_recursive>
 801015e:	bf00      	nop
 8010160:	20012939 	.word	0x20012939

08010164 <__sinit>:
 8010164:	b510      	push	{r4, lr}
 8010166:	4604      	mov	r4, r0
 8010168:	f7ff fff0 	bl	801014c <__sfp_lock_acquire>
 801016c:	6a23      	ldr	r3, [r4, #32]
 801016e:	b11b      	cbz	r3, 8010178 <__sinit+0x14>
 8010170:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010174:	f7ff bff0 	b.w	8010158 <__sfp_lock_release>
 8010178:	4b04      	ldr	r3, [pc, #16]	@ (801018c <__sinit+0x28>)
 801017a:	6223      	str	r3, [r4, #32]
 801017c:	4b04      	ldr	r3, [pc, #16]	@ (8010190 <__sinit+0x2c>)
 801017e:	681b      	ldr	r3, [r3, #0]
 8010180:	2b00      	cmp	r3, #0
 8010182:	d1f5      	bne.n	8010170 <__sinit+0xc>
 8010184:	f7ff ffc4 	bl	8010110 <global_stdio_init.part.0>
 8010188:	e7f2      	b.n	8010170 <__sinit+0xc>
 801018a:	bf00      	nop
 801018c:	080100d1 	.word	0x080100d1
 8010190:	20012930 	.word	0x20012930

08010194 <_fwalk_sglue>:
 8010194:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010198:	4607      	mov	r7, r0
 801019a:	4688      	mov	r8, r1
 801019c:	4614      	mov	r4, r2
 801019e:	2600      	movs	r6, #0
 80101a0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80101a4:	f1b9 0901 	subs.w	r9, r9, #1
 80101a8:	d505      	bpl.n	80101b6 <_fwalk_sglue+0x22>
 80101aa:	6824      	ldr	r4, [r4, #0]
 80101ac:	2c00      	cmp	r4, #0
 80101ae:	d1f7      	bne.n	80101a0 <_fwalk_sglue+0xc>
 80101b0:	4630      	mov	r0, r6
 80101b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80101b6:	89ab      	ldrh	r3, [r5, #12]
 80101b8:	2b01      	cmp	r3, #1
 80101ba:	d907      	bls.n	80101cc <_fwalk_sglue+0x38>
 80101bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80101c0:	3301      	adds	r3, #1
 80101c2:	d003      	beq.n	80101cc <_fwalk_sglue+0x38>
 80101c4:	4629      	mov	r1, r5
 80101c6:	4638      	mov	r0, r7
 80101c8:	47c0      	blx	r8
 80101ca:	4306      	orrs	r6, r0
 80101cc:	3568      	adds	r5, #104	@ 0x68
 80101ce:	e7e9      	b.n	80101a4 <_fwalk_sglue+0x10>

080101d0 <_vsniprintf_r>:
 80101d0:	b530      	push	{r4, r5, lr}
 80101d2:	4614      	mov	r4, r2
 80101d4:	2c00      	cmp	r4, #0
 80101d6:	b09b      	sub	sp, #108	@ 0x6c
 80101d8:	4605      	mov	r5, r0
 80101da:	461a      	mov	r2, r3
 80101dc:	da05      	bge.n	80101ea <_vsniprintf_r+0x1a>
 80101de:	238b      	movs	r3, #139	@ 0x8b
 80101e0:	6003      	str	r3, [r0, #0]
 80101e2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80101e6:	b01b      	add	sp, #108	@ 0x6c
 80101e8:	bd30      	pop	{r4, r5, pc}
 80101ea:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80101ee:	f8ad 300c 	strh.w	r3, [sp, #12]
 80101f2:	bf14      	ite	ne
 80101f4:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 80101f8:	4623      	moveq	r3, r4
 80101fa:	9302      	str	r3, [sp, #8]
 80101fc:	9305      	str	r3, [sp, #20]
 80101fe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8010202:	9100      	str	r1, [sp, #0]
 8010204:	9104      	str	r1, [sp, #16]
 8010206:	f8ad 300e 	strh.w	r3, [sp, #14]
 801020a:	4669      	mov	r1, sp
 801020c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801020e:	f000 ffa9 	bl	8011164 <_svfiprintf_r>
 8010212:	1c43      	adds	r3, r0, #1
 8010214:	bfbc      	itt	lt
 8010216:	238b      	movlt	r3, #139	@ 0x8b
 8010218:	602b      	strlt	r3, [r5, #0]
 801021a:	2c00      	cmp	r4, #0
 801021c:	d0e3      	beq.n	80101e6 <_vsniprintf_r+0x16>
 801021e:	9b00      	ldr	r3, [sp, #0]
 8010220:	2200      	movs	r2, #0
 8010222:	701a      	strb	r2, [r3, #0]
 8010224:	e7df      	b.n	80101e6 <_vsniprintf_r+0x16>
	...

08010228 <vsniprintf>:
 8010228:	b507      	push	{r0, r1, r2, lr}
 801022a:	9300      	str	r3, [sp, #0]
 801022c:	4613      	mov	r3, r2
 801022e:	460a      	mov	r2, r1
 8010230:	4601      	mov	r1, r0
 8010232:	4803      	ldr	r0, [pc, #12]	@ (8010240 <vsniprintf+0x18>)
 8010234:	6800      	ldr	r0, [r0, #0]
 8010236:	f7ff ffcb 	bl	80101d0 <_vsniprintf_r>
 801023a:	b003      	add	sp, #12
 801023c:	f85d fb04 	ldr.w	pc, [sp], #4
 8010240:	200001b4 	.word	0x200001b4

08010244 <memset>:
 8010244:	4402      	add	r2, r0
 8010246:	4603      	mov	r3, r0
 8010248:	4293      	cmp	r3, r2
 801024a:	d100      	bne.n	801024e <memset+0xa>
 801024c:	4770      	bx	lr
 801024e:	f803 1b01 	strb.w	r1, [r3], #1
 8010252:	e7f9      	b.n	8010248 <memset+0x4>

08010254 <_localeconv_r>:
 8010254:	4800      	ldr	r0, [pc, #0]	@ (8010258 <_localeconv_r+0x4>)
 8010256:	4770      	bx	lr
 8010258:	200002f4 	.word	0x200002f4

0801025c <_reclaim_reent>:
 801025c:	4b29      	ldr	r3, [pc, #164]	@ (8010304 <_reclaim_reent+0xa8>)
 801025e:	681b      	ldr	r3, [r3, #0]
 8010260:	4283      	cmp	r3, r0
 8010262:	b570      	push	{r4, r5, r6, lr}
 8010264:	4604      	mov	r4, r0
 8010266:	d04b      	beq.n	8010300 <_reclaim_reent+0xa4>
 8010268:	69c3      	ldr	r3, [r0, #28]
 801026a:	b1ab      	cbz	r3, 8010298 <_reclaim_reent+0x3c>
 801026c:	68db      	ldr	r3, [r3, #12]
 801026e:	b16b      	cbz	r3, 801028c <_reclaim_reent+0x30>
 8010270:	2500      	movs	r5, #0
 8010272:	69e3      	ldr	r3, [r4, #28]
 8010274:	68db      	ldr	r3, [r3, #12]
 8010276:	5959      	ldr	r1, [r3, r5]
 8010278:	2900      	cmp	r1, #0
 801027a:	d13b      	bne.n	80102f4 <_reclaim_reent+0x98>
 801027c:	3504      	adds	r5, #4
 801027e:	2d80      	cmp	r5, #128	@ 0x80
 8010280:	d1f7      	bne.n	8010272 <_reclaim_reent+0x16>
 8010282:	69e3      	ldr	r3, [r4, #28]
 8010284:	4620      	mov	r0, r4
 8010286:	68d9      	ldr	r1, [r3, #12]
 8010288:	f000 fec6 	bl	8011018 <_free_r>
 801028c:	69e3      	ldr	r3, [r4, #28]
 801028e:	6819      	ldr	r1, [r3, #0]
 8010290:	b111      	cbz	r1, 8010298 <_reclaim_reent+0x3c>
 8010292:	4620      	mov	r0, r4
 8010294:	f000 fec0 	bl	8011018 <_free_r>
 8010298:	6961      	ldr	r1, [r4, #20]
 801029a:	b111      	cbz	r1, 80102a2 <_reclaim_reent+0x46>
 801029c:	4620      	mov	r0, r4
 801029e:	f000 febb 	bl	8011018 <_free_r>
 80102a2:	69e1      	ldr	r1, [r4, #28]
 80102a4:	b111      	cbz	r1, 80102ac <_reclaim_reent+0x50>
 80102a6:	4620      	mov	r0, r4
 80102a8:	f000 feb6 	bl	8011018 <_free_r>
 80102ac:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80102ae:	b111      	cbz	r1, 80102b6 <_reclaim_reent+0x5a>
 80102b0:	4620      	mov	r0, r4
 80102b2:	f000 feb1 	bl	8011018 <_free_r>
 80102b6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80102b8:	b111      	cbz	r1, 80102c0 <_reclaim_reent+0x64>
 80102ba:	4620      	mov	r0, r4
 80102bc:	f000 feac 	bl	8011018 <_free_r>
 80102c0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80102c2:	b111      	cbz	r1, 80102ca <_reclaim_reent+0x6e>
 80102c4:	4620      	mov	r0, r4
 80102c6:	f000 fea7 	bl	8011018 <_free_r>
 80102ca:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80102cc:	b111      	cbz	r1, 80102d4 <_reclaim_reent+0x78>
 80102ce:	4620      	mov	r0, r4
 80102d0:	f000 fea2 	bl	8011018 <_free_r>
 80102d4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80102d6:	b111      	cbz	r1, 80102de <_reclaim_reent+0x82>
 80102d8:	4620      	mov	r0, r4
 80102da:	f000 fe9d 	bl	8011018 <_free_r>
 80102de:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80102e0:	b111      	cbz	r1, 80102e8 <_reclaim_reent+0x8c>
 80102e2:	4620      	mov	r0, r4
 80102e4:	f000 fe98 	bl	8011018 <_free_r>
 80102e8:	6a23      	ldr	r3, [r4, #32]
 80102ea:	b14b      	cbz	r3, 8010300 <_reclaim_reent+0xa4>
 80102ec:	4620      	mov	r0, r4
 80102ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80102f2:	4718      	bx	r3
 80102f4:	680e      	ldr	r6, [r1, #0]
 80102f6:	4620      	mov	r0, r4
 80102f8:	f000 fe8e 	bl	8011018 <_free_r>
 80102fc:	4631      	mov	r1, r6
 80102fe:	e7bb      	b.n	8010278 <_reclaim_reent+0x1c>
 8010300:	bd70      	pop	{r4, r5, r6, pc}
 8010302:	bf00      	nop
 8010304:	200001b4 	.word	0x200001b4

08010308 <__errno>:
 8010308:	4b01      	ldr	r3, [pc, #4]	@ (8010310 <__errno+0x8>)
 801030a:	6818      	ldr	r0, [r3, #0]
 801030c:	4770      	bx	lr
 801030e:	bf00      	nop
 8010310:	200001b4 	.word	0x200001b4

08010314 <__libc_init_array>:
 8010314:	b570      	push	{r4, r5, r6, lr}
 8010316:	4d0d      	ldr	r5, [pc, #52]	@ (801034c <__libc_init_array+0x38>)
 8010318:	4c0d      	ldr	r4, [pc, #52]	@ (8010350 <__libc_init_array+0x3c>)
 801031a:	1b64      	subs	r4, r4, r5
 801031c:	10a4      	asrs	r4, r4, #2
 801031e:	2600      	movs	r6, #0
 8010320:	42a6      	cmp	r6, r4
 8010322:	d109      	bne.n	8010338 <__libc_init_array+0x24>
 8010324:	4d0b      	ldr	r5, [pc, #44]	@ (8010354 <__libc_init_array+0x40>)
 8010326:	4c0c      	ldr	r4, [pc, #48]	@ (8010358 <__libc_init_array+0x44>)
 8010328:	f002 fcd6 	bl	8012cd8 <_init>
 801032c:	1b64      	subs	r4, r4, r5
 801032e:	10a4      	asrs	r4, r4, #2
 8010330:	2600      	movs	r6, #0
 8010332:	42a6      	cmp	r6, r4
 8010334:	d105      	bne.n	8010342 <__libc_init_array+0x2e>
 8010336:	bd70      	pop	{r4, r5, r6, pc}
 8010338:	f855 3b04 	ldr.w	r3, [r5], #4
 801033c:	4798      	blx	r3
 801033e:	3601      	adds	r6, #1
 8010340:	e7ee      	b.n	8010320 <__libc_init_array+0xc>
 8010342:	f855 3b04 	ldr.w	r3, [r5], #4
 8010346:	4798      	blx	r3
 8010348:	3601      	adds	r6, #1
 801034a:	e7f2      	b.n	8010332 <__libc_init_array+0x1e>
 801034c:	080138c8 	.word	0x080138c8
 8010350:	080138c8 	.word	0x080138c8
 8010354:	080138c8 	.word	0x080138c8
 8010358:	080138cc 	.word	0x080138cc

0801035c <__retarget_lock_init_recursive>:
 801035c:	4770      	bx	lr

0801035e <__retarget_lock_acquire_recursive>:
 801035e:	4770      	bx	lr

08010360 <__retarget_lock_release_recursive>:
 8010360:	4770      	bx	lr

08010362 <memcpy>:
 8010362:	440a      	add	r2, r1
 8010364:	4291      	cmp	r1, r2
 8010366:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 801036a:	d100      	bne.n	801036e <memcpy+0xc>
 801036c:	4770      	bx	lr
 801036e:	b510      	push	{r4, lr}
 8010370:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010374:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010378:	4291      	cmp	r1, r2
 801037a:	d1f9      	bne.n	8010370 <memcpy+0xe>
 801037c:	bd10      	pop	{r4, pc}

0801037e <quorem>:
 801037e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010382:	6903      	ldr	r3, [r0, #16]
 8010384:	690c      	ldr	r4, [r1, #16]
 8010386:	42a3      	cmp	r3, r4
 8010388:	4607      	mov	r7, r0
 801038a:	db7e      	blt.n	801048a <quorem+0x10c>
 801038c:	3c01      	subs	r4, #1
 801038e:	f101 0814 	add.w	r8, r1, #20
 8010392:	00a3      	lsls	r3, r4, #2
 8010394:	f100 0514 	add.w	r5, r0, #20
 8010398:	9300      	str	r3, [sp, #0]
 801039a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801039e:	9301      	str	r3, [sp, #4]
 80103a0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80103a4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80103a8:	3301      	adds	r3, #1
 80103aa:	429a      	cmp	r2, r3
 80103ac:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80103b0:	fbb2 f6f3 	udiv	r6, r2, r3
 80103b4:	d32e      	bcc.n	8010414 <quorem+0x96>
 80103b6:	f04f 0a00 	mov.w	sl, #0
 80103ba:	46c4      	mov	ip, r8
 80103bc:	46ae      	mov	lr, r5
 80103be:	46d3      	mov	fp, sl
 80103c0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80103c4:	b298      	uxth	r0, r3
 80103c6:	fb06 a000 	mla	r0, r6, r0, sl
 80103ca:	0c02      	lsrs	r2, r0, #16
 80103cc:	0c1b      	lsrs	r3, r3, #16
 80103ce:	fb06 2303 	mla	r3, r6, r3, r2
 80103d2:	f8de 2000 	ldr.w	r2, [lr]
 80103d6:	b280      	uxth	r0, r0
 80103d8:	b292      	uxth	r2, r2
 80103da:	1a12      	subs	r2, r2, r0
 80103dc:	445a      	add	r2, fp
 80103de:	f8de 0000 	ldr.w	r0, [lr]
 80103e2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80103e6:	b29b      	uxth	r3, r3
 80103e8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80103ec:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80103f0:	b292      	uxth	r2, r2
 80103f2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80103f6:	45e1      	cmp	r9, ip
 80103f8:	f84e 2b04 	str.w	r2, [lr], #4
 80103fc:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8010400:	d2de      	bcs.n	80103c0 <quorem+0x42>
 8010402:	9b00      	ldr	r3, [sp, #0]
 8010404:	58eb      	ldr	r3, [r5, r3]
 8010406:	b92b      	cbnz	r3, 8010414 <quorem+0x96>
 8010408:	9b01      	ldr	r3, [sp, #4]
 801040a:	3b04      	subs	r3, #4
 801040c:	429d      	cmp	r5, r3
 801040e:	461a      	mov	r2, r3
 8010410:	d32f      	bcc.n	8010472 <quorem+0xf4>
 8010412:	613c      	str	r4, [r7, #16]
 8010414:	4638      	mov	r0, r7
 8010416:	f001 fb7d 	bl	8011b14 <__mcmp>
 801041a:	2800      	cmp	r0, #0
 801041c:	db25      	blt.n	801046a <quorem+0xec>
 801041e:	4629      	mov	r1, r5
 8010420:	2000      	movs	r0, #0
 8010422:	f858 2b04 	ldr.w	r2, [r8], #4
 8010426:	f8d1 c000 	ldr.w	ip, [r1]
 801042a:	fa1f fe82 	uxth.w	lr, r2
 801042e:	fa1f f38c 	uxth.w	r3, ip
 8010432:	eba3 030e 	sub.w	r3, r3, lr
 8010436:	4403      	add	r3, r0
 8010438:	0c12      	lsrs	r2, r2, #16
 801043a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801043e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8010442:	b29b      	uxth	r3, r3
 8010444:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010448:	45c1      	cmp	r9, r8
 801044a:	f841 3b04 	str.w	r3, [r1], #4
 801044e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8010452:	d2e6      	bcs.n	8010422 <quorem+0xa4>
 8010454:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010458:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801045c:	b922      	cbnz	r2, 8010468 <quorem+0xea>
 801045e:	3b04      	subs	r3, #4
 8010460:	429d      	cmp	r5, r3
 8010462:	461a      	mov	r2, r3
 8010464:	d30b      	bcc.n	801047e <quorem+0x100>
 8010466:	613c      	str	r4, [r7, #16]
 8010468:	3601      	adds	r6, #1
 801046a:	4630      	mov	r0, r6
 801046c:	b003      	add	sp, #12
 801046e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010472:	6812      	ldr	r2, [r2, #0]
 8010474:	3b04      	subs	r3, #4
 8010476:	2a00      	cmp	r2, #0
 8010478:	d1cb      	bne.n	8010412 <quorem+0x94>
 801047a:	3c01      	subs	r4, #1
 801047c:	e7c6      	b.n	801040c <quorem+0x8e>
 801047e:	6812      	ldr	r2, [r2, #0]
 8010480:	3b04      	subs	r3, #4
 8010482:	2a00      	cmp	r2, #0
 8010484:	d1ef      	bne.n	8010466 <quorem+0xe8>
 8010486:	3c01      	subs	r4, #1
 8010488:	e7ea      	b.n	8010460 <quorem+0xe2>
 801048a:	2000      	movs	r0, #0
 801048c:	e7ee      	b.n	801046c <quorem+0xee>
	...

08010490 <_dtoa_r>:
 8010490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010494:	69c7      	ldr	r7, [r0, #28]
 8010496:	b099      	sub	sp, #100	@ 0x64
 8010498:	ed8d 0b02 	vstr	d0, [sp, #8]
 801049c:	ec55 4b10 	vmov	r4, r5, d0
 80104a0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80104a2:	9109      	str	r1, [sp, #36]	@ 0x24
 80104a4:	4683      	mov	fp, r0
 80104a6:	920e      	str	r2, [sp, #56]	@ 0x38
 80104a8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80104aa:	b97f      	cbnz	r7, 80104cc <_dtoa_r+0x3c>
 80104ac:	2010      	movs	r0, #16
 80104ae:	f000 ff55 	bl	801135c <malloc>
 80104b2:	4602      	mov	r2, r0
 80104b4:	f8cb 001c 	str.w	r0, [fp, #28]
 80104b8:	b920      	cbnz	r0, 80104c4 <_dtoa_r+0x34>
 80104ba:	4ba7      	ldr	r3, [pc, #668]	@ (8010758 <_dtoa_r+0x2c8>)
 80104bc:	21ef      	movs	r1, #239	@ 0xef
 80104be:	48a7      	ldr	r0, [pc, #668]	@ (801075c <_dtoa_r+0x2cc>)
 80104c0:	f001 fd12 	bl	8011ee8 <__assert_func>
 80104c4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80104c8:	6007      	str	r7, [r0, #0]
 80104ca:	60c7      	str	r7, [r0, #12]
 80104cc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80104d0:	6819      	ldr	r1, [r3, #0]
 80104d2:	b159      	cbz	r1, 80104ec <_dtoa_r+0x5c>
 80104d4:	685a      	ldr	r2, [r3, #4]
 80104d6:	604a      	str	r2, [r1, #4]
 80104d8:	2301      	movs	r3, #1
 80104da:	4093      	lsls	r3, r2
 80104dc:	608b      	str	r3, [r1, #8]
 80104de:	4658      	mov	r0, fp
 80104e0:	f001 f8de 	bl	80116a0 <_Bfree>
 80104e4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80104e8:	2200      	movs	r2, #0
 80104ea:	601a      	str	r2, [r3, #0]
 80104ec:	1e2b      	subs	r3, r5, #0
 80104ee:	bfb9      	ittee	lt
 80104f0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80104f4:	9303      	strlt	r3, [sp, #12]
 80104f6:	2300      	movge	r3, #0
 80104f8:	6033      	strge	r3, [r6, #0]
 80104fa:	9f03      	ldr	r7, [sp, #12]
 80104fc:	4b98      	ldr	r3, [pc, #608]	@ (8010760 <_dtoa_r+0x2d0>)
 80104fe:	bfbc      	itt	lt
 8010500:	2201      	movlt	r2, #1
 8010502:	6032      	strlt	r2, [r6, #0]
 8010504:	43bb      	bics	r3, r7
 8010506:	d112      	bne.n	801052e <_dtoa_r+0x9e>
 8010508:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801050a:	f242 730f 	movw	r3, #9999	@ 0x270f
 801050e:	6013      	str	r3, [r2, #0]
 8010510:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010514:	4323      	orrs	r3, r4
 8010516:	f000 854d 	beq.w	8010fb4 <_dtoa_r+0xb24>
 801051a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801051c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8010774 <_dtoa_r+0x2e4>
 8010520:	2b00      	cmp	r3, #0
 8010522:	f000 854f 	beq.w	8010fc4 <_dtoa_r+0xb34>
 8010526:	f10a 0303 	add.w	r3, sl, #3
 801052a:	f000 bd49 	b.w	8010fc0 <_dtoa_r+0xb30>
 801052e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010532:	2200      	movs	r2, #0
 8010534:	ec51 0b17 	vmov	r0, r1, d7
 8010538:	2300      	movs	r3, #0
 801053a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 801053e:	f7f0 faeb 	bl	8000b18 <__aeabi_dcmpeq>
 8010542:	4680      	mov	r8, r0
 8010544:	b158      	cbz	r0, 801055e <_dtoa_r+0xce>
 8010546:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8010548:	2301      	movs	r3, #1
 801054a:	6013      	str	r3, [r2, #0]
 801054c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801054e:	b113      	cbz	r3, 8010556 <_dtoa_r+0xc6>
 8010550:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8010552:	4b84      	ldr	r3, [pc, #528]	@ (8010764 <_dtoa_r+0x2d4>)
 8010554:	6013      	str	r3, [r2, #0]
 8010556:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8010778 <_dtoa_r+0x2e8>
 801055a:	f000 bd33 	b.w	8010fc4 <_dtoa_r+0xb34>
 801055e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8010562:	aa16      	add	r2, sp, #88	@ 0x58
 8010564:	a917      	add	r1, sp, #92	@ 0x5c
 8010566:	4658      	mov	r0, fp
 8010568:	f001 fb84 	bl	8011c74 <__d2b>
 801056c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8010570:	4681      	mov	r9, r0
 8010572:	2e00      	cmp	r6, #0
 8010574:	d077      	beq.n	8010666 <_dtoa_r+0x1d6>
 8010576:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010578:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 801057c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010580:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010584:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8010588:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801058c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8010590:	4619      	mov	r1, r3
 8010592:	2200      	movs	r2, #0
 8010594:	4b74      	ldr	r3, [pc, #464]	@ (8010768 <_dtoa_r+0x2d8>)
 8010596:	f7ef fe9f 	bl	80002d8 <__aeabi_dsub>
 801059a:	a369      	add	r3, pc, #420	@ (adr r3, 8010740 <_dtoa_r+0x2b0>)
 801059c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105a0:	f7f0 f852 	bl	8000648 <__aeabi_dmul>
 80105a4:	a368      	add	r3, pc, #416	@ (adr r3, 8010748 <_dtoa_r+0x2b8>)
 80105a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105aa:	f7ef fe97 	bl	80002dc <__adddf3>
 80105ae:	4604      	mov	r4, r0
 80105b0:	4630      	mov	r0, r6
 80105b2:	460d      	mov	r5, r1
 80105b4:	f7ef ffde 	bl	8000574 <__aeabi_i2d>
 80105b8:	a365      	add	r3, pc, #404	@ (adr r3, 8010750 <_dtoa_r+0x2c0>)
 80105ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105be:	f7f0 f843 	bl	8000648 <__aeabi_dmul>
 80105c2:	4602      	mov	r2, r0
 80105c4:	460b      	mov	r3, r1
 80105c6:	4620      	mov	r0, r4
 80105c8:	4629      	mov	r1, r5
 80105ca:	f7ef fe87 	bl	80002dc <__adddf3>
 80105ce:	4604      	mov	r4, r0
 80105d0:	460d      	mov	r5, r1
 80105d2:	f7f0 fae9 	bl	8000ba8 <__aeabi_d2iz>
 80105d6:	2200      	movs	r2, #0
 80105d8:	4607      	mov	r7, r0
 80105da:	2300      	movs	r3, #0
 80105dc:	4620      	mov	r0, r4
 80105de:	4629      	mov	r1, r5
 80105e0:	f7f0 faa4 	bl	8000b2c <__aeabi_dcmplt>
 80105e4:	b140      	cbz	r0, 80105f8 <_dtoa_r+0x168>
 80105e6:	4638      	mov	r0, r7
 80105e8:	f7ef ffc4 	bl	8000574 <__aeabi_i2d>
 80105ec:	4622      	mov	r2, r4
 80105ee:	462b      	mov	r3, r5
 80105f0:	f7f0 fa92 	bl	8000b18 <__aeabi_dcmpeq>
 80105f4:	b900      	cbnz	r0, 80105f8 <_dtoa_r+0x168>
 80105f6:	3f01      	subs	r7, #1
 80105f8:	2f16      	cmp	r7, #22
 80105fa:	d851      	bhi.n	80106a0 <_dtoa_r+0x210>
 80105fc:	4b5b      	ldr	r3, [pc, #364]	@ (801076c <_dtoa_r+0x2dc>)
 80105fe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8010602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010606:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801060a:	f7f0 fa8f 	bl	8000b2c <__aeabi_dcmplt>
 801060e:	2800      	cmp	r0, #0
 8010610:	d048      	beq.n	80106a4 <_dtoa_r+0x214>
 8010612:	3f01      	subs	r7, #1
 8010614:	2300      	movs	r3, #0
 8010616:	9312      	str	r3, [sp, #72]	@ 0x48
 8010618:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801061a:	1b9b      	subs	r3, r3, r6
 801061c:	1e5a      	subs	r2, r3, #1
 801061e:	bf44      	itt	mi
 8010620:	f1c3 0801 	rsbmi	r8, r3, #1
 8010624:	2300      	movmi	r3, #0
 8010626:	9208      	str	r2, [sp, #32]
 8010628:	bf54      	ite	pl
 801062a:	f04f 0800 	movpl.w	r8, #0
 801062e:	9308      	strmi	r3, [sp, #32]
 8010630:	2f00      	cmp	r7, #0
 8010632:	db39      	blt.n	80106a8 <_dtoa_r+0x218>
 8010634:	9b08      	ldr	r3, [sp, #32]
 8010636:	970f      	str	r7, [sp, #60]	@ 0x3c
 8010638:	443b      	add	r3, r7
 801063a:	9308      	str	r3, [sp, #32]
 801063c:	2300      	movs	r3, #0
 801063e:	930a      	str	r3, [sp, #40]	@ 0x28
 8010640:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010642:	2b09      	cmp	r3, #9
 8010644:	d864      	bhi.n	8010710 <_dtoa_r+0x280>
 8010646:	2b05      	cmp	r3, #5
 8010648:	bfc4      	itt	gt
 801064a:	3b04      	subgt	r3, #4
 801064c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 801064e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010650:	f1a3 0302 	sub.w	r3, r3, #2
 8010654:	bfcc      	ite	gt
 8010656:	2400      	movgt	r4, #0
 8010658:	2401      	movle	r4, #1
 801065a:	2b03      	cmp	r3, #3
 801065c:	d863      	bhi.n	8010726 <_dtoa_r+0x296>
 801065e:	e8df f003 	tbb	[pc, r3]
 8010662:	372a      	.short	0x372a
 8010664:	5535      	.short	0x5535
 8010666:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 801066a:	441e      	add	r6, r3
 801066c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8010670:	2b20      	cmp	r3, #32
 8010672:	bfc1      	itttt	gt
 8010674:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8010678:	409f      	lslgt	r7, r3
 801067a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801067e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8010682:	bfd6      	itet	le
 8010684:	f1c3 0320 	rsble	r3, r3, #32
 8010688:	ea47 0003 	orrgt.w	r0, r7, r3
 801068c:	fa04 f003 	lslle.w	r0, r4, r3
 8010690:	f7ef ff60 	bl	8000554 <__aeabi_ui2d>
 8010694:	2201      	movs	r2, #1
 8010696:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801069a:	3e01      	subs	r6, #1
 801069c:	9214      	str	r2, [sp, #80]	@ 0x50
 801069e:	e777      	b.n	8010590 <_dtoa_r+0x100>
 80106a0:	2301      	movs	r3, #1
 80106a2:	e7b8      	b.n	8010616 <_dtoa_r+0x186>
 80106a4:	9012      	str	r0, [sp, #72]	@ 0x48
 80106a6:	e7b7      	b.n	8010618 <_dtoa_r+0x188>
 80106a8:	427b      	negs	r3, r7
 80106aa:	930a      	str	r3, [sp, #40]	@ 0x28
 80106ac:	2300      	movs	r3, #0
 80106ae:	eba8 0807 	sub.w	r8, r8, r7
 80106b2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80106b4:	e7c4      	b.n	8010640 <_dtoa_r+0x1b0>
 80106b6:	2300      	movs	r3, #0
 80106b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80106ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80106bc:	2b00      	cmp	r3, #0
 80106be:	dc35      	bgt.n	801072c <_dtoa_r+0x29c>
 80106c0:	2301      	movs	r3, #1
 80106c2:	9300      	str	r3, [sp, #0]
 80106c4:	9307      	str	r3, [sp, #28]
 80106c6:	461a      	mov	r2, r3
 80106c8:	920e      	str	r2, [sp, #56]	@ 0x38
 80106ca:	e00b      	b.n	80106e4 <_dtoa_r+0x254>
 80106cc:	2301      	movs	r3, #1
 80106ce:	e7f3      	b.n	80106b8 <_dtoa_r+0x228>
 80106d0:	2300      	movs	r3, #0
 80106d2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80106d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80106d6:	18fb      	adds	r3, r7, r3
 80106d8:	9300      	str	r3, [sp, #0]
 80106da:	3301      	adds	r3, #1
 80106dc:	2b01      	cmp	r3, #1
 80106de:	9307      	str	r3, [sp, #28]
 80106e0:	bfb8      	it	lt
 80106e2:	2301      	movlt	r3, #1
 80106e4:	f8db 001c 	ldr.w	r0, [fp, #28]
 80106e8:	2100      	movs	r1, #0
 80106ea:	2204      	movs	r2, #4
 80106ec:	f102 0514 	add.w	r5, r2, #20
 80106f0:	429d      	cmp	r5, r3
 80106f2:	d91f      	bls.n	8010734 <_dtoa_r+0x2a4>
 80106f4:	6041      	str	r1, [r0, #4]
 80106f6:	4658      	mov	r0, fp
 80106f8:	f000 ff92 	bl	8011620 <_Balloc>
 80106fc:	4682      	mov	sl, r0
 80106fe:	2800      	cmp	r0, #0
 8010700:	d13c      	bne.n	801077c <_dtoa_r+0x2ec>
 8010702:	4b1b      	ldr	r3, [pc, #108]	@ (8010770 <_dtoa_r+0x2e0>)
 8010704:	4602      	mov	r2, r0
 8010706:	f240 11af 	movw	r1, #431	@ 0x1af
 801070a:	e6d8      	b.n	80104be <_dtoa_r+0x2e>
 801070c:	2301      	movs	r3, #1
 801070e:	e7e0      	b.n	80106d2 <_dtoa_r+0x242>
 8010710:	2401      	movs	r4, #1
 8010712:	2300      	movs	r3, #0
 8010714:	9309      	str	r3, [sp, #36]	@ 0x24
 8010716:	940b      	str	r4, [sp, #44]	@ 0x2c
 8010718:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801071c:	9300      	str	r3, [sp, #0]
 801071e:	9307      	str	r3, [sp, #28]
 8010720:	2200      	movs	r2, #0
 8010722:	2312      	movs	r3, #18
 8010724:	e7d0      	b.n	80106c8 <_dtoa_r+0x238>
 8010726:	2301      	movs	r3, #1
 8010728:	930b      	str	r3, [sp, #44]	@ 0x2c
 801072a:	e7f5      	b.n	8010718 <_dtoa_r+0x288>
 801072c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801072e:	9300      	str	r3, [sp, #0]
 8010730:	9307      	str	r3, [sp, #28]
 8010732:	e7d7      	b.n	80106e4 <_dtoa_r+0x254>
 8010734:	3101      	adds	r1, #1
 8010736:	0052      	lsls	r2, r2, #1
 8010738:	e7d8      	b.n	80106ec <_dtoa_r+0x25c>
 801073a:	bf00      	nop
 801073c:	f3af 8000 	nop.w
 8010740:	636f4361 	.word	0x636f4361
 8010744:	3fd287a7 	.word	0x3fd287a7
 8010748:	8b60c8b3 	.word	0x8b60c8b3
 801074c:	3fc68a28 	.word	0x3fc68a28
 8010750:	509f79fb 	.word	0x509f79fb
 8010754:	3fd34413 	.word	0x3fd34413
 8010758:	08013579 	.word	0x08013579
 801075c:	08013590 	.word	0x08013590
 8010760:	7ff00000 	.word	0x7ff00000
 8010764:	08013549 	.word	0x08013549
 8010768:	3ff80000 	.word	0x3ff80000
 801076c:	08013698 	.word	0x08013698
 8010770:	080135e8 	.word	0x080135e8
 8010774:	08013575 	.word	0x08013575
 8010778:	08013548 	.word	0x08013548
 801077c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8010780:	6018      	str	r0, [r3, #0]
 8010782:	9b07      	ldr	r3, [sp, #28]
 8010784:	2b0e      	cmp	r3, #14
 8010786:	f200 80a4 	bhi.w	80108d2 <_dtoa_r+0x442>
 801078a:	2c00      	cmp	r4, #0
 801078c:	f000 80a1 	beq.w	80108d2 <_dtoa_r+0x442>
 8010790:	2f00      	cmp	r7, #0
 8010792:	dd33      	ble.n	80107fc <_dtoa_r+0x36c>
 8010794:	4bad      	ldr	r3, [pc, #692]	@ (8010a4c <_dtoa_r+0x5bc>)
 8010796:	f007 020f 	and.w	r2, r7, #15
 801079a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801079e:	ed93 7b00 	vldr	d7, [r3]
 80107a2:	05f8      	lsls	r0, r7, #23
 80107a4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80107a8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80107ac:	d516      	bpl.n	80107dc <_dtoa_r+0x34c>
 80107ae:	4ba8      	ldr	r3, [pc, #672]	@ (8010a50 <_dtoa_r+0x5c0>)
 80107b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80107b4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80107b8:	f7f0 f870 	bl	800089c <__aeabi_ddiv>
 80107bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80107c0:	f004 040f 	and.w	r4, r4, #15
 80107c4:	2603      	movs	r6, #3
 80107c6:	4da2      	ldr	r5, [pc, #648]	@ (8010a50 <_dtoa_r+0x5c0>)
 80107c8:	b954      	cbnz	r4, 80107e0 <_dtoa_r+0x350>
 80107ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80107ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80107d2:	f7f0 f863 	bl	800089c <__aeabi_ddiv>
 80107d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80107da:	e028      	b.n	801082e <_dtoa_r+0x39e>
 80107dc:	2602      	movs	r6, #2
 80107de:	e7f2      	b.n	80107c6 <_dtoa_r+0x336>
 80107e0:	07e1      	lsls	r1, r4, #31
 80107e2:	d508      	bpl.n	80107f6 <_dtoa_r+0x366>
 80107e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80107e8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80107ec:	f7ef ff2c 	bl	8000648 <__aeabi_dmul>
 80107f0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80107f4:	3601      	adds	r6, #1
 80107f6:	1064      	asrs	r4, r4, #1
 80107f8:	3508      	adds	r5, #8
 80107fa:	e7e5      	b.n	80107c8 <_dtoa_r+0x338>
 80107fc:	f000 80d2 	beq.w	80109a4 <_dtoa_r+0x514>
 8010800:	427c      	negs	r4, r7
 8010802:	4b92      	ldr	r3, [pc, #584]	@ (8010a4c <_dtoa_r+0x5bc>)
 8010804:	4d92      	ldr	r5, [pc, #584]	@ (8010a50 <_dtoa_r+0x5c0>)
 8010806:	f004 020f 	and.w	r2, r4, #15
 801080a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801080e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010812:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010816:	f7ef ff17 	bl	8000648 <__aeabi_dmul>
 801081a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801081e:	1124      	asrs	r4, r4, #4
 8010820:	2300      	movs	r3, #0
 8010822:	2602      	movs	r6, #2
 8010824:	2c00      	cmp	r4, #0
 8010826:	f040 80b2 	bne.w	801098e <_dtoa_r+0x4fe>
 801082a:	2b00      	cmp	r3, #0
 801082c:	d1d3      	bne.n	80107d6 <_dtoa_r+0x346>
 801082e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010830:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8010834:	2b00      	cmp	r3, #0
 8010836:	f000 80b7 	beq.w	80109a8 <_dtoa_r+0x518>
 801083a:	4b86      	ldr	r3, [pc, #536]	@ (8010a54 <_dtoa_r+0x5c4>)
 801083c:	2200      	movs	r2, #0
 801083e:	4620      	mov	r0, r4
 8010840:	4629      	mov	r1, r5
 8010842:	f7f0 f973 	bl	8000b2c <__aeabi_dcmplt>
 8010846:	2800      	cmp	r0, #0
 8010848:	f000 80ae 	beq.w	80109a8 <_dtoa_r+0x518>
 801084c:	9b07      	ldr	r3, [sp, #28]
 801084e:	2b00      	cmp	r3, #0
 8010850:	f000 80aa 	beq.w	80109a8 <_dtoa_r+0x518>
 8010854:	9b00      	ldr	r3, [sp, #0]
 8010856:	2b00      	cmp	r3, #0
 8010858:	dd37      	ble.n	80108ca <_dtoa_r+0x43a>
 801085a:	1e7b      	subs	r3, r7, #1
 801085c:	9304      	str	r3, [sp, #16]
 801085e:	4620      	mov	r0, r4
 8010860:	4b7d      	ldr	r3, [pc, #500]	@ (8010a58 <_dtoa_r+0x5c8>)
 8010862:	2200      	movs	r2, #0
 8010864:	4629      	mov	r1, r5
 8010866:	f7ef feef 	bl	8000648 <__aeabi_dmul>
 801086a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801086e:	9c00      	ldr	r4, [sp, #0]
 8010870:	3601      	adds	r6, #1
 8010872:	4630      	mov	r0, r6
 8010874:	f7ef fe7e 	bl	8000574 <__aeabi_i2d>
 8010878:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801087c:	f7ef fee4 	bl	8000648 <__aeabi_dmul>
 8010880:	4b76      	ldr	r3, [pc, #472]	@ (8010a5c <_dtoa_r+0x5cc>)
 8010882:	2200      	movs	r2, #0
 8010884:	f7ef fd2a 	bl	80002dc <__adddf3>
 8010888:	4605      	mov	r5, r0
 801088a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801088e:	2c00      	cmp	r4, #0
 8010890:	f040 808d 	bne.w	80109ae <_dtoa_r+0x51e>
 8010894:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010898:	4b71      	ldr	r3, [pc, #452]	@ (8010a60 <_dtoa_r+0x5d0>)
 801089a:	2200      	movs	r2, #0
 801089c:	f7ef fd1c 	bl	80002d8 <__aeabi_dsub>
 80108a0:	4602      	mov	r2, r0
 80108a2:	460b      	mov	r3, r1
 80108a4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80108a8:	462a      	mov	r2, r5
 80108aa:	4633      	mov	r3, r6
 80108ac:	f7f0 f95c 	bl	8000b68 <__aeabi_dcmpgt>
 80108b0:	2800      	cmp	r0, #0
 80108b2:	f040 828b 	bne.w	8010dcc <_dtoa_r+0x93c>
 80108b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80108ba:	462a      	mov	r2, r5
 80108bc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80108c0:	f7f0 f934 	bl	8000b2c <__aeabi_dcmplt>
 80108c4:	2800      	cmp	r0, #0
 80108c6:	f040 8128 	bne.w	8010b1a <_dtoa_r+0x68a>
 80108ca:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80108ce:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80108d2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	f2c0 815a 	blt.w	8010b8e <_dtoa_r+0x6fe>
 80108da:	2f0e      	cmp	r7, #14
 80108dc:	f300 8157 	bgt.w	8010b8e <_dtoa_r+0x6fe>
 80108e0:	4b5a      	ldr	r3, [pc, #360]	@ (8010a4c <_dtoa_r+0x5bc>)
 80108e2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80108e6:	ed93 7b00 	vldr	d7, [r3]
 80108ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	ed8d 7b00 	vstr	d7, [sp]
 80108f2:	da03      	bge.n	80108fc <_dtoa_r+0x46c>
 80108f4:	9b07      	ldr	r3, [sp, #28]
 80108f6:	2b00      	cmp	r3, #0
 80108f8:	f340 8101 	ble.w	8010afe <_dtoa_r+0x66e>
 80108fc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8010900:	4656      	mov	r6, sl
 8010902:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010906:	4620      	mov	r0, r4
 8010908:	4629      	mov	r1, r5
 801090a:	f7ef ffc7 	bl	800089c <__aeabi_ddiv>
 801090e:	f7f0 f94b 	bl	8000ba8 <__aeabi_d2iz>
 8010912:	4680      	mov	r8, r0
 8010914:	f7ef fe2e 	bl	8000574 <__aeabi_i2d>
 8010918:	e9dd 2300 	ldrd	r2, r3, [sp]
 801091c:	f7ef fe94 	bl	8000648 <__aeabi_dmul>
 8010920:	4602      	mov	r2, r0
 8010922:	460b      	mov	r3, r1
 8010924:	4620      	mov	r0, r4
 8010926:	4629      	mov	r1, r5
 8010928:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801092c:	f7ef fcd4 	bl	80002d8 <__aeabi_dsub>
 8010930:	f806 4b01 	strb.w	r4, [r6], #1
 8010934:	9d07      	ldr	r5, [sp, #28]
 8010936:	eba6 040a 	sub.w	r4, r6, sl
 801093a:	42a5      	cmp	r5, r4
 801093c:	4602      	mov	r2, r0
 801093e:	460b      	mov	r3, r1
 8010940:	f040 8117 	bne.w	8010b72 <_dtoa_r+0x6e2>
 8010944:	f7ef fcca 	bl	80002dc <__adddf3>
 8010948:	e9dd 2300 	ldrd	r2, r3, [sp]
 801094c:	4604      	mov	r4, r0
 801094e:	460d      	mov	r5, r1
 8010950:	f7f0 f90a 	bl	8000b68 <__aeabi_dcmpgt>
 8010954:	2800      	cmp	r0, #0
 8010956:	f040 80f9 	bne.w	8010b4c <_dtoa_r+0x6bc>
 801095a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801095e:	4620      	mov	r0, r4
 8010960:	4629      	mov	r1, r5
 8010962:	f7f0 f8d9 	bl	8000b18 <__aeabi_dcmpeq>
 8010966:	b118      	cbz	r0, 8010970 <_dtoa_r+0x4e0>
 8010968:	f018 0f01 	tst.w	r8, #1
 801096c:	f040 80ee 	bne.w	8010b4c <_dtoa_r+0x6bc>
 8010970:	4649      	mov	r1, r9
 8010972:	4658      	mov	r0, fp
 8010974:	f000 fe94 	bl	80116a0 <_Bfree>
 8010978:	2300      	movs	r3, #0
 801097a:	7033      	strb	r3, [r6, #0]
 801097c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801097e:	3701      	adds	r7, #1
 8010980:	601f      	str	r7, [r3, #0]
 8010982:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010984:	2b00      	cmp	r3, #0
 8010986:	f000 831d 	beq.w	8010fc4 <_dtoa_r+0xb34>
 801098a:	601e      	str	r6, [r3, #0]
 801098c:	e31a      	b.n	8010fc4 <_dtoa_r+0xb34>
 801098e:	07e2      	lsls	r2, r4, #31
 8010990:	d505      	bpl.n	801099e <_dtoa_r+0x50e>
 8010992:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010996:	f7ef fe57 	bl	8000648 <__aeabi_dmul>
 801099a:	3601      	adds	r6, #1
 801099c:	2301      	movs	r3, #1
 801099e:	1064      	asrs	r4, r4, #1
 80109a0:	3508      	adds	r5, #8
 80109a2:	e73f      	b.n	8010824 <_dtoa_r+0x394>
 80109a4:	2602      	movs	r6, #2
 80109a6:	e742      	b.n	801082e <_dtoa_r+0x39e>
 80109a8:	9c07      	ldr	r4, [sp, #28]
 80109aa:	9704      	str	r7, [sp, #16]
 80109ac:	e761      	b.n	8010872 <_dtoa_r+0x3e2>
 80109ae:	4b27      	ldr	r3, [pc, #156]	@ (8010a4c <_dtoa_r+0x5bc>)
 80109b0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80109b2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80109b6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80109ba:	4454      	add	r4, sl
 80109bc:	2900      	cmp	r1, #0
 80109be:	d053      	beq.n	8010a68 <_dtoa_r+0x5d8>
 80109c0:	4928      	ldr	r1, [pc, #160]	@ (8010a64 <_dtoa_r+0x5d4>)
 80109c2:	2000      	movs	r0, #0
 80109c4:	f7ef ff6a 	bl	800089c <__aeabi_ddiv>
 80109c8:	4633      	mov	r3, r6
 80109ca:	462a      	mov	r2, r5
 80109cc:	f7ef fc84 	bl	80002d8 <__aeabi_dsub>
 80109d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80109d4:	4656      	mov	r6, sl
 80109d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80109da:	f7f0 f8e5 	bl	8000ba8 <__aeabi_d2iz>
 80109de:	4605      	mov	r5, r0
 80109e0:	f7ef fdc8 	bl	8000574 <__aeabi_i2d>
 80109e4:	4602      	mov	r2, r0
 80109e6:	460b      	mov	r3, r1
 80109e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80109ec:	f7ef fc74 	bl	80002d8 <__aeabi_dsub>
 80109f0:	3530      	adds	r5, #48	@ 0x30
 80109f2:	4602      	mov	r2, r0
 80109f4:	460b      	mov	r3, r1
 80109f6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80109fa:	f806 5b01 	strb.w	r5, [r6], #1
 80109fe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8010a02:	f7f0 f893 	bl	8000b2c <__aeabi_dcmplt>
 8010a06:	2800      	cmp	r0, #0
 8010a08:	d171      	bne.n	8010aee <_dtoa_r+0x65e>
 8010a0a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010a0e:	4911      	ldr	r1, [pc, #68]	@ (8010a54 <_dtoa_r+0x5c4>)
 8010a10:	2000      	movs	r0, #0
 8010a12:	f7ef fc61 	bl	80002d8 <__aeabi_dsub>
 8010a16:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8010a1a:	f7f0 f887 	bl	8000b2c <__aeabi_dcmplt>
 8010a1e:	2800      	cmp	r0, #0
 8010a20:	f040 8095 	bne.w	8010b4e <_dtoa_r+0x6be>
 8010a24:	42a6      	cmp	r6, r4
 8010a26:	f43f af50 	beq.w	80108ca <_dtoa_r+0x43a>
 8010a2a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8010a2e:	4b0a      	ldr	r3, [pc, #40]	@ (8010a58 <_dtoa_r+0x5c8>)
 8010a30:	2200      	movs	r2, #0
 8010a32:	f7ef fe09 	bl	8000648 <__aeabi_dmul>
 8010a36:	4b08      	ldr	r3, [pc, #32]	@ (8010a58 <_dtoa_r+0x5c8>)
 8010a38:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8010a3c:	2200      	movs	r2, #0
 8010a3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010a42:	f7ef fe01 	bl	8000648 <__aeabi_dmul>
 8010a46:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010a4a:	e7c4      	b.n	80109d6 <_dtoa_r+0x546>
 8010a4c:	08013698 	.word	0x08013698
 8010a50:	08013670 	.word	0x08013670
 8010a54:	3ff00000 	.word	0x3ff00000
 8010a58:	40240000 	.word	0x40240000
 8010a5c:	401c0000 	.word	0x401c0000
 8010a60:	40140000 	.word	0x40140000
 8010a64:	3fe00000 	.word	0x3fe00000
 8010a68:	4631      	mov	r1, r6
 8010a6a:	4628      	mov	r0, r5
 8010a6c:	f7ef fdec 	bl	8000648 <__aeabi_dmul>
 8010a70:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8010a74:	9415      	str	r4, [sp, #84]	@ 0x54
 8010a76:	4656      	mov	r6, sl
 8010a78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010a7c:	f7f0 f894 	bl	8000ba8 <__aeabi_d2iz>
 8010a80:	4605      	mov	r5, r0
 8010a82:	f7ef fd77 	bl	8000574 <__aeabi_i2d>
 8010a86:	4602      	mov	r2, r0
 8010a88:	460b      	mov	r3, r1
 8010a8a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010a8e:	f7ef fc23 	bl	80002d8 <__aeabi_dsub>
 8010a92:	3530      	adds	r5, #48	@ 0x30
 8010a94:	f806 5b01 	strb.w	r5, [r6], #1
 8010a98:	4602      	mov	r2, r0
 8010a9a:	460b      	mov	r3, r1
 8010a9c:	42a6      	cmp	r6, r4
 8010a9e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010aa2:	f04f 0200 	mov.w	r2, #0
 8010aa6:	d124      	bne.n	8010af2 <_dtoa_r+0x662>
 8010aa8:	4bac      	ldr	r3, [pc, #688]	@ (8010d5c <_dtoa_r+0x8cc>)
 8010aaa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8010aae:	f7ef fc15 	bl	80002dc <__adddf3>
 8010ab2:	4602      	mov	r2, r0
 8010ab4:	460b      	mov	r3, r1
 8010ab6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010aba:	f7f0 f855 	bl	8000b68 <__aeabi_dcmpgt>
 8010abe:	2800      	cmp	r0, #0
 8010ac0:	d145      	bne.n	8010b4e <_dtoa_r+0x6be>
 8010ac2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8010ac6:	49a5      	ldr	r1, [pc, #660]	@ (8010d5c <_dtoa_r+0x8cc>)
 8010ac8:	2000      	movs	r0, #0
 8010aca:	f7ef fc05 	bl	80002d8 <__aeabi_dsub>
 8010ace:	4602      	mov	r2, r0
 8010ad0:	460b      	mov	r3, r1
 8010ad2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010ad6:	f7f0 f829 	bl	8000b2c <__aeabi_dcmplt>
 8010ada:	2800      	cmp	r0, #0
 8010adc:	f43f aef5 	beq.w	80108ca <_dtoa_r+0x43a>
 8010ae0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8010ae2:	1e73      	subs	r3, r6, #1
 8010ae4:	9315      	str	r3, [sp, #84]	@ 0x54
 8010ae6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010aea:	2b30      	cmp	r3, #48	@ 0x30
 8010aec:	d0f8      	beq.n	8010ae0 <_dtoa_r+0x650>
 8010aee:	9f04      	ldr	r7, [sp, #16]
 8010af0:	e73e      	b.n	8010970 <_dtoa_r+0x4e0>
 8010af2:	4b9b      	ldr	r3, [pc, #620]	@ (8010d60 <_dtoa_r+0x8d0>)
 8010af4:	f7ef fda8 	bl	8000648 <__aeabi_dmul>
 8010af8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010afc:	e7bc      	b.n	8010a78 <_dtoa_r+0x5e8>
 8010afe:	d10c      	bne.n	8010b1a <_dtoa_r+0x68a>
 8010b00:	4b98      	ldr	r3, [pc, #608]	@ (8010d64 <_dtoa_r+0x8d4>)
 8010b02:	2200      	movs	r2, #0
 8010b04:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010b08:	f7ef fd9e 	bl	8000648 <__aeabi_dmul>
 8010b0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010b10:	f7f0 f820 	bl	8000b54 <__aeabi_dcmpge>
 8010b14:	2800      	cmp	r0, #0
 8010b16:	f000 8157 	beq.w	8010dc8 <_dtoa_r+0x938>
 8010b1a:	2400      	movs	r4, #0
 8010b1c:	4625      	mov	r5, r4
 8010b1e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010b20:	43db      	mvns	r3, r3
 8010b22:	9304      	str	r3, [sp, #16]
 8010b24:	4656      	mov	r6, sl
 8010b26:	2700      	movs	r7, #0
 8010b28:	4621      	mov	r1, r4
 8010b2a:	4658      	mov	r0, fp
 8010b2c:	f000 fdb8 	bl	80116a0 <_Bfree>
 8010b30:	2d00      	cmp	r5, #0
 8010b32:	d0dc      	beq.n	8010aee <_dtoa_r+0x65e>
 8010b34:	b12f      	cbz	r7, 8010b42 <_dtoa_r+0x6b2>
 8010b36:	42af      	cmp	r7, r5
 8010b38:	d003      	beq.n	8010b42 <_dtoa_r+0x6b2>
 8010b3a:	4639      	mov	r1, r7
 8010b3c:	4658      	mov	r0, fp
 8010b3e:	f000 fdaf 	bl	80116a0 <_Bfree>
 8010b42:	4629      	mov	r1, r5
 8010b44:	4658      	mov	r0, fp
 8010b46:	f000 fdab 	bl	80116a0 <_Bfree>
 8010b4a:	e7d0      	b.n	8010aee <_dtoa_r+0x65e>
 8010b4c:	9704      	str	r7, [sp, #16]
 8010b4e:	4633      	mov	r3, r6
 8010b50:	461e      	mov	r6, r3
 8010b52:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010b56:	2a39      	cmp	r2, #57	@ 0x39
 8010b58:	d107      	bne.n	8010b6a <_dtoa_r+0x6da>
 8010b5a:	459a      	cmp	sl, r3
 8010b5c:	d1f8      	bne.n	8010b50 <_dtoa_r+0x6c0>
 8010b5e:	9a04      	ldr	r2, [sp, #16]
 8010b60:	3201      	adds	r2, #1
 8010b62:	9204      	str	r2, [sp, #16]
 8010b64:	2230      	movs	r2, #48	@ 0x30
 8010b66:	f88a 2000 	strb.w	r2, [sl]
 8010b6a:	781a      	ldrb	r2, [r3, #0]
 8010b6c:	3201      	adds	r2, #1
 8010b6e:	701a      	strb	r2, [r3, #0]
 8010b70:	e7bd      	b.n	8010aee <_dtoa_r+0x65e>
 8010b72:	4b7b      	ldr	r3, [pc, #492]	@ (8010d60 <_dtoa_r+0x8d0>)
 8010b74:	2200      	movs	r2, #0
 8010b76:	f7ef fd67 	bl	8000648 <__aeabi_dmul>
 8010b7a:	2200      	movs	r2, #0
 8010b7c:	2300      	movs	r3, #0
 8010b7e:	4604      	mov	r4, r0
 8010b80:	460d      	mov	r5, r1
 8010b82:	f7ef ffc9 	bl	8000b18 <__aeabi_dcmpeq>
 8010b86:	2800      	cmp	r0, #0
 8010b88:	f43f aebb 	beq.w	8010902 <_dtoa_r+0x472>
 8010b8c:	e6f0      	b.n	8010970 <_dtoa_r+0x4e0>
 8010b8e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8010b90:	2a00      	cmp	r2, #0
 8010b92:	f000 80db 	beq.w	8010d4c <_dtoa_r+0x8bc>
 8010b96:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010b98:	2a01      	cmp	r2, #1
 8010b9a:	f300 80bf 	bgt.w	8010d1c <_dtoa_r+0x88c>
 8010b9e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8010ba0:	2a00      	cmp	r2, #0
 8010ba2:	f000 80b7 	beq.w	8010d14 <_dtoa_r+0x884>
 8010ba6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8010baa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8010bac:	4646      	mov	r6, r8
 8010bae:	9a08      	ldr	r2, [sp, #32]
 8010bb0:	2101      	movs	r1, #1
 8010bb2:	441a      	add	r2, r3
 8010bb4:	4658      	mov	r0, fp
 8010bb6:	4498      	add	r8, r3
 8010bb8:	9208      	str	r2, [sp, #32]
 8010bba:	f000 fe25 	bl	8011808 <__i2b>
 8010bbe:	4605      	mov	r5, r0
 8010bc0:	b15e      	cbz	r6, 8010bda <_dtoa_r+0x74a>
 8010bc2:	9b08      	ldr	r3, [sp, #32]
 8010bc4:	2b00      	cmp	r3, #0
 8010bc6:	dd08      	ble.n	8010bda <_dtoa_r+0x74a>
 8010bc8:	42b3      	cmp	r3, r6
 8010bca:	9a08      	ldr	r2, [sp, #32]
 8010bcc:	bfa8      	it	ge
 8010bce:	4633      	movge	r3, r6
 8010bd0:	eba8 0803 	sub.w	r8, r8, r3
 8010bd4:	1af6      	subs	r6, r6, r3
 8010bd6:	1ad3      	subs	r3, r2, r3
 8010bd8:	9308      	str	r3, [sp, #32]
 8010bda:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010bdc:	b1f3      	cbz	r3, 8010c1c <_dtoa_r+0x78c>
 8010bde:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	f000 80b7 	beq.w	8010d54 <_dtoa_r+0x8c4>
 8010be6:	b18c      	cbz	r4, 8010c0c <_dtoa_r+0x77c>
 8010be8:	4629      	mov	r1, r5
 8010bea:	4622      	mov	r2, r4
 8010bec:	4658      	mov	r0, fp
 8010bee:	f000 fecb 	bl	8011988 <__pow5mult>
 8010bf2:	464a      	mov	r2, r9
 8010bf4:	4601      	mov	r1, r0
 8010bf6:	4605      	mov	r5, r0
 8010bf8:	4658      	mov	r0, fp
 8010bfa:	f000 fe1b 	bl	8011834 <__multiply>
 8010bfe:	4649      	mov	r1, r9
 8010c00:	9004      	str	r0, [sp, #16]
 8010c02:	4658      	mov	r0, fp
 8010c04:	f000 fd4c 	bl	80116a0 <_Bfree>
 8010c08:	9b04      	ldr	r3, [sp, #16]
 8010c0a:	4699      	mov	r9, r3
 8010c0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010c0e:	1b1a      	subs	r2, r3, r4
 8010c10:	d004      	beq.n	8010c1c <_dtoa_r+0x78c>
 8010c12:	4649      	mov	r1, r9
 8010c14:	4658      	mov	r0, fp
 8010c16:	f000 feb7 	bl	8011988 <__pow5mult>
 8010c1a:	4681      	mov	r9, r0
 8010c1c:	2101      	movs	r1, #1
 8010c1e:	4658      	mov	r0, fp
 8010c20:	f000 fdf2 	bl	8011808 <__i2b>
 8010c24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010c26:	4604      	mov	r4, r0
 8010c28:	2b00      	cmp	r3, #0
 8010c2a:	f000 81cf 	beq.w	8010fcc <_dtoa_r+0xb3c>
 8010c2e:	461a      	mov	r2, r3
 8010c30:	4601      	mov	r1, r0
 8010c32:	4658      	mov	r0, fp
 8010c34:	f000 fea8 	bl	8011988 <__pow5mult>
 8010c38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010c3a:	2b01      	cmp	r3, #1
 8010c3c:	4604      	mov	r4, r0
 8010c3e:	f300 8095 	bgt.w	8010d6c <_dtoa_r+0x8dc>
 8010c42:	9b02      	ldr	r3, [sp, #8]
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	f040 8087 	bne.w	8010d58 <_dtoa_r+0x8c8>
 8010c4a:	9b03      	ldr	r3, [sp, #12]
 8010c4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010c50:	2b00      	cmp	r3, #0
 8010c52:	f040 8089 	bne.w	8010d68 <_dtoa_r+0x8d8>
 8010c56:	9b03      	ldr	r3, [sp, #12]
 8010c58:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010c5c:	0d1b      	lsrs	r3, r3, #20
 8010c5e:	051b      	lsls	r3, r3, #20
 8010c60:	b12b      	cbz	r3, 8010c6e <_dtoa_r+0x7de>
 8010c62:	9b08      	ldr	r3, [sp, #32]
 8010c64:	3301      	adds	r3, #1
 8010c66:	9308      	str	r3, [sp, #32]
 8010c68:	f108 0801 	add.w	r8, r8, #1
 8010c6c:	2301      	movs	r3, #1
 8010c6e:	930a      	str	r3, [sp, #40]	@ 0x28
 8010c70:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	f000 81b0 	beq.w	8010fd8 <_dtoa_r+0xb48>
 8010c78:	6923      	ldr	r3, [r4, #16]
 8010c7a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010c7e:	6918      	ldr	r0, [r3, #16]
 8010c80:	f000 fd76 	bl	8011770 <__hi0bits>
 8010c84:	f1c0 0020 	rsb	r0, r0, #32
 8010c88:	9b08      	ldr	r3, [sp, #32]
 8010c8a:	4418      	add	r0, r3
 8010c8c:	f010 001f 	ands.w	r0, r0, #31
 8010c90:	d077      	beq.n	8010d82 <_dtoa_r+0x8f2>
 8010c92:	f1c0 0320 	rsb	r3, r0, #32
 8010c96:	2b04      	cmp	r3, #4
 8010c98:	dd6b      	ble.n	8010d72 <_dtoa_r+0x8e2>
 8010c9a:	9b08      	ldr	r3, [sp, #32]
 8010c9c:	f1c0 001c 	rsb	r0, r0, #28
 8010ca0:	4403      	add	r3, r0
 8010ca2:	4480      	add	r8, r0
 8010ca4:	4406      	add	r6, r0
 8010ca6:	9308      	str	r3, [sp, #32]
 8010ca8:	f1b8 0f00 	cmp.w	r8, #0
 8010cac:	dd05      	ble.n	8010cba <_dtoa_r+0x82a>
 8010cae:	4649      	mov	r1, r9
 8010cb0:	4642      	mov	r2, r8
 8010cb2:	4658      	mov	r0, fp
 8010cb4:	f000 fec2 	bl	8011a3c <__lshift>
 8010cb8:	4681      	mov	r9, r0
 8010cba:	9b08      	ldr	r3, [sp, #32]
 8010cbc:	2b00      	cmp	r3, #0
 8010cbe:	dd05      	ble.n	8010ccc <_dtoa_r+0x83c>
 8010cc0:	4621      	mov	r1, r4
 8010cc2:	461a      	mov	r2, r3
 8010cc4:	4658      	mov	r0, fp
 8010cc6:	f000 feb9 	bl	8011a3c <__lshift>
 8010cca:	4604      	mov	r4, r0
 8010ccc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	d059      	beq.n	8010d86 <_dtoa_r+0x8f6>
 8010cd2:	4621      	mov	r1, r4
 8010cd4:	4648      	mov	r0, r9
 8010cd6:	f000 ff1d 	bl	8011b14 <__mcmp>
 8010cda:	2800      	cmp	r0, #0
 8010cdc:	da53      	bge.n	8010d86 <_dtoa_r+0x8f6>
 8010cde:	1e7b      	subs	r3, r7, #1
 8010ce0:	9304      	str	r3, [sp, #16]
 8010ce2:	4649      	mov	r1, r9
 8010ce4:	2300      	movs	r3, #0
 8010ce6:	220a      	movs	r2, #10
 8010ce8:	4658      	mov	r0, fp
 8010cea:	f000 fcfb 	bl	80116e4 <__multadd>
 8010cee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010cf0:	4681      	mov	r9, r0
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	f000 8172 	beq.w	8010fdc <_dtoa_r+0xb4c>
 8010cf8:	2300      	movs	r3, #0
 8010cfa:	4629      	mov	r1, r5
 8010cfc:	220a      	movs	r2, #10
 8010cfe:	4658      	mov	r0, fp
 8010d00:	f000 fcf0 	bl	80116e4 <__multadd>
 8010d04:	9b00      	ldr	r3, [sp, #0]
 8010d06:	2b00      	cmp	r3, #0
 8010d08:	4605      	mov	r5, r0
 8010d0a:	dc67      	bgt.n	8010ddc <_dtoa_r+0x94c>
 8010d0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010d0e:	2b02      	cmp	r3, #2
 8010d10:	dc41      	bgt.n	8010d96 <_dtoa_r+0x906>
 8010d12:	e063      	b.n	8010ddc <_dtoa_r+0x94c>
 8010d14:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8010d16:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8010d1a:	e746      	b.n	8010baa <_dtoa_r+0x71a>
 8010d1c:	9b07      	ldr	r3, [sp, #28]
 8010d1e:	1e5c      	subs	r4, r3, #1
 8010d20:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010d22:	42a3      	cmp	r3, r4
 8010d24:	bfbf      	itttt	lt
 8010d26:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8010d28:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8010d2a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8010d2c:	1ae3      	sublt	r3, r4, r3
 8010d2e:	bfb4      	ite	lt
 8010d30:	18d2      	addlt	r2, r2, r3
 8010d32:	1b1c      	subge	r4, r3, r4
 8010d34:	9b07      	ldr	r3, [sp, #28]
 8010d36:	bfbc      	itt	lt
 8010d38:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8010d3a:	2400      	movlt	r4, #0
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	bfb5      	itete	lt
 8010d40:	eba8 0603 	sublt.w	r6, r8, r3
 8010d44:	9b07      	ldrge	r3, [sp, #28]
 8010d46:	2300      	movlt	r3, #0
 8010d48:	4646      	movge	r6, r8
 8010d4a:	e730      	b.n	8010bae <_dtoa_r+0x71e>
 8010d4c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8010d4e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8010d50:	4646      	mov	r6, r8
 8010d52:	e735      	b.n	8010bc0 <_dtoa_r+0x730>
 8010d54:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010d56:	e75c      	b.n	8010c12 <_dtoa_r+0x782>
 8010d58:	2300      	movs	r3, #0
 8010d5a:	e788      	b.n	8010c6e <_dtoa_r+0x7de>
 8010d5c:	3fe00000 	.word	0x3fe00000
 8010d60:	40240000 	.word	0x40240000
 8010d64:	40140000 	.word	0x40140000
 8010d68:	9b02      	ldr	r3, [sp, #8]
 8010d6a:	e780      	b.n	8010c6e <_dtoa_r+0x7de>
 8010d6c:	2300      	movs	r3, #0
 8010d6e:	930a      	str	r3, [sp, #40]	@ 0x28
 8010d70:	e782      	b.n	8010c78 <_dtoa_r+0x7e8>
 8010d72:	d099      	beq.n	8010ca8 <_dtoa_r+0x818>
 8010d74:	9a08      	ldr	r2, [sp, #32]
 8010d76:	331c      	adds	r3, #28
 8010d78:	441a      	add	r2, r3
 8010d7a:	4498      	add	r8, r3
 8010d7c:	441e      	add	r6, r3
 8010d7e:	9208      	str	r2, [sp, #32]
 8010d80:	e792      	b.n	8010ca8 <_dtoa_r+0x818>
 8010d82:	4603      	mov	r3, r0
 8010d84:	e7f6      	b.n	8010d74 <_dtoa_r+0x8e4>
 8010d86:	9b07      	ldr	r3, [sp, #28]
 8010d88:	9704      	str	r7, [sp, #16]
 8010d8a:	2b00      	cmp	r3, #0
 8010d8c:	dc20      	bgt.n	8010dd0 <_dtoa_r+0x940>
 8010d8e:	9300      	str	r3, [sp, #0]
 8010d90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010d92:	2b02      	cmp	r3, #2
 8010d94:	dd1e      	ble.n	8010dd4 <_dtoa_r+0x944>
 8010d96:	9b00      	ldr	r3, [sp, #0]
 8010d98:	2b00      	cmp	r3, #0
 8010d9a:	f47f aec0 	bne.w	8010b1e <_dtoa_r+0x68e>
 8010d9e:	4621      	mov	r1, r4
 8010da0:	2205      	movs	r2, #5
 8010da2:	4658      	mov	r0, fp
 8010da4:	f000 fc9e 	bl	80116e4 <__multadd>
 8010da8:	4601      	mov	r1, r0
 8010daa:	4604      	mov	r4, r0
 8010dac:	4648      	mov	r0, r9
 8010dae:	f000 feb1 	bl	8011b14 <__mcmp>
 8010db2:	2800      	cmp	r0, #0
 8010db4:	f77f aeb3 	ble.w	8010b1e <_dtoa_r+0x68e>
 8010db8:	4656      	mov	r6, sl
 8010dba:	2331      	movs	r3, #49	@ 0x31
 8010dbc:	f806 3b01 	strb.w	r3, [r6], #1
 8010dc0:	9b04      	ldr	r3, [sp, #16]
 8010dc2:	3301      	adds	r3, #1
 8010dc4:	9304      	str	r3, [sp, #16]
 8010dc6:	e6ae      	b.n	8010b26 <_dtoa_r+0x696>
 8010dc8:	9c07      	ldr	r4, [sp, #28]
 8010dca:	9704      	str	r7, [sp, #16]
 8010dcc:	4625      	mov	r5, r4
 8010dce:	e7f3      	b.n	8010db8 <_dtoa_r+0x928>
 8010dd0:	9b07      	ldr	r3, [sp, #28]
 8010dd2:	9300      	str	r3, [sp, #0]
 8010dd4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010dd6:	2b00      	cmp	r3, #0
 8010dd8:	f000 8104 	beq.w	8010fe4 <_dtoa_r+0xb54>
 8010ddc:	2e00      	cmp	r6, #0
 8010dde:	dd05      	ble.n	8010dec <_dtoa_r+0x95c>
 8010de0:	4629      	mov	r1, r5
 8010de2:	4632      	mov	r2, r6
 8010de4:	4658      	mov	r0, fp
 8010de6:	f000 fe29 	bl	8011a3c <__lshift>
 8010dea:	4605      	mov	r5, r0
 8010dec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	d05a      	beq.n	8010ea8 <_dtoa_r+0xa18>
 8010df2:	6869      	ldr	r1, [r5, #4]
 8010df4:	4658      	mov	r0, fp
 8010df6:	f000 fc13 	bl	8011620 <_Balloc>
 8010dfa:	4606      	mov	r6, r0
 8010dfc:	b928      	cbnz	r0, 8010e0a <_dtoa_r+0x97a>
 8010dfe:	4b84      	ldr	r3, [pc, #528]	@ (8011010 <_dtoa_r+0xb80>)
 8010e00:	4602      	mov	r2, r0
 8010e02:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8010e06:	f7ff bb5a 	b.w	80104be <_dtoa_r+0x2e>
 8010e0a:	692a      	ldr	r2, [r5, #16]
 8010e0c:	3202      	adds	r2, #2
 8010e0e:	0092      	lsls	r2, r2, #2
 8010e10:	f105 010c 	add.w	r1, r5, #12
 8010e14:	300c      	adds	r0, #12
 8010e16:	f7ff faa4 	bl	8010362 <memcpy>
 8010e1a:	2201      	movs	r2, #1
 8010e1c:	4631      	mov	r1, r6
 8010e1e:	4658      	mov	r0, fp
 8010e20:	f000 fe0c 	bl	8011a3c <__lshift>
 8010e24:	f10a 0301 	add.w	r3, sl, #1
 8010e28:	9307      	str	r3, [sp, #28]
 8010e2a:	9b00      	ldr	r3, [sp, #0]
 8010e2c:	4453      	add	r3, sl
 8010e2e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010e30:	9b02      	ldr	r3, [sp, #8]
 8010e32:	f003 0301 	and.w	r3, r3, #1
 8010e36:	462f      	mov	r7, r5
 8010e38:	930a      	str	r3, [sp, #40]	@ 0x28
 8010e3a:	4605      	mov	r5, r0
 8010e3c:	9b07      	ldr	r3, [sp, #28]
 8010e3e:	4621      	mov	r1, r4
 8010e40:	3b01      	subs	r3, #1
 8010e42:	4648      	mov	r0, r9
 8010e44:	9300      	str	r3, [sp, #0]
 8010e46:	f7ff fa9a 	bl	801037e <quorem>
 8010e4a:	4639      	mov	r1, r7
 8010e4c:	9002      	str	r0, [sp, #8]
 8010e4e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8010e52:	4648      	mov	r0, r9
 8010e54:	f000 fe5e 	bl	8011b14 <__mcmp>
 8010e58:	462a      	mov	r2, r5
 8010e5a:	9008      	str	r0, [sp, #32]
 8010e5c:	4621      	mov	r1, r4
 8010e5e:	4658      	mov	r0, fp
 8010e60:	f000 fe74 	bl	8011b4c <__mdiff>
 8010e64:	68c2      	ldr	r2, [r0, #12]
 8010e66:	4606      	mov	r6, r0
 8010e68:	bb02      	cbnz	r2, 8010eac <_dtoa_r+0xa1c>
 8010e6a:	4601      	mov	r1, r0
 8010e6c:	4648      	mov	r0, r9
 8010e6e:	f000 fe51 	bl	8011b14 <__mcmp>
 8010e72:	4602      	mov	r2, r0
 8010e74:	4631      	mov	r1, r6
 8010e76:	4658      	mov	r0, fp
 8010e78:	920e      	str	r2, [sp, #56]	@ 0x38
 8010e7a:	f000 fc11 	bl	80116a0 <_Bfree>
 8010e7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010e80:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010e82:	9e07      	ldr	r6, [sp, #28]
 8010e84:	ea43 0102 	orr.w	r1, r3, r2
 8010e88:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010e8a:	4319      	orrs	r1, r3
 8010e8c:	d110      	bne.n	8010eb0 <_dtoa_r+0xa20>
 8010e8e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8010e92:	d029      	beq.n	8010ee8 <_dtoa_r+0xa58>
 8010e94:	9b08      	ldr	r3, [sp, #32]
 8010e96:	2b00      	cmp	r3, #0
 8010e98:	dd02      	ble.n	8010ea0 <_dtoa_r+0xa10>
 8010e9a:	9b02      	ldr	r3, [sp, #8]
 8010e9c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8010ea0:	9b00      	ldr	r3, [sp, #0]
 8010ea2:	f883 8000 	strb.w	r8, [r3]
 8010ea6:	e63f      	b.n	8010b28 <_dtoa_r+0x698>
 8010ea8:	4628      	mov	r0, r5
 8010eaa:	e7bb      	b.n	8010e24 <_dtoa_r+0x994>
 8010eac:	2201      	movs	r2, #1
 8010eae:	e7e1      	b.n	8010e74 <_dtoa_r+0x9e4>
 8010eb0:	9b08      	ldr	r3, [sp, #32]
 8010eb2:	2b00      	cmp	r3, #0
 8010eb4:	db04      	blt.n	8010ec0 <_dtoa_r+0xa30>
 8010eb6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010eb8:	430b      	orrs	r3, r1
 8010eba:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8010ebc:	430b      	orrs	r3, r1
 8010ebe:	d120      	bne.n	8010f02 <_dtoa_r+0xa72>
 8010ec0:	2a00      	cmp	r2, #0
 8010ec2:	dded      	ble.n	8010ea0 <_dtoa_r+0xa10>
 8010ec4:	4649      	mov	r1, r9
 8010ec6:	2201      	movs	r2, #1
 8010ec8:	4658      	mov	r0, fp
 8010eca:	f000 fdb7 	bl	8011a3c <__lshift>
 8010ece:	4621      	mov	r1, r4
 8010ed0:	4681      	mov	r9, r0
 8010ed2:	f000 fe1f 	bl	8011b14 <__mcmp>
 8010ed6:	2800      	cmp	r0, #0
 8010ed8:	dc03      	bgt.n	8010ee2 <_dtoa_r+0xa52>
 8010eda:	d1e1      	bne.n	8010ea0 <_dtoa_r+0xa10>
 8010edc:	f018 0f01 	tst.w	r8, #1
 8010ee0:	d0de      	beq.n	8010ea0 <_dtoa_r+0xa10>
 8010ee2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8010ee6:	d1d8      	bne.n	8010e9a <_dtoa_r+0xa0a>
 8010ee8:	9a00      	ldr	r2, [sp, #0]
 8010eea:	2339      	movs	r3, #57	@ 0x39
 8010eec:	7013      	strb	r3, [r2, #0]
 8010eee:	4633      	mov	r3, r6
 8010ef0:	461e      	mov	r6, r3
 8010ef2:	3b01      	subs	r3, #1
 8010ef4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8010ef8:	2a39      	cmp	r2, #57	@ 0x39
 8010efa:	d052      	beq.n	8010fa2 <_dtoa_r+0xb12>
 8010efc:	3201      	adds	r2, #1
 8010efe:	701a      	strb	r2, [r3, #0]
 8010f00:	e612      	b.n	8010b28 <_dtoa_r+0x698>
 8010f02:	2a00      	cmp	r2, #0
 8010f04:	dd07      	ble.n	8010f16 <_dtoa_r+0xa86>
 8010f06:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8010f0a:	d0ed      	beq.n	8010ee8 <_dtoa_r+0xa58>
 8010f0c:	9a00      	ldr	r2, [sp, #0]
 8010f0e:	f108 0301 	add.w	r3, r8, #1
 8010f12:	7013      	strb	r3, [r2, #0]
 8010f14:	e608      	b.n	8010b28 <_dtoa_r+0x698>
 8010f16:	9b07      	ldr	r3, [sp, #28]
 8010f18:	9a07      	ldr	r2, [sp, #28]
 8010f1a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8010f1e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010f20:	4293      	cmp	r3, r2
 8010f22:	d028      	beq.n	8010f76 <_dtoa_r+0xae6>
 8010f24:	4649      	mov	r1, r9
 8010f26:	2300      	movs	r3, #0
 8010f28:	220a      	movs	r2, #10
 8010f2a:	4658      	mov	r0, fp
 8010f2c:	f000 fbda 	bl	80116e4 <__multadd>
 8010f30:	42af      	cmp	r7, r5
 8010f32:	4681      	mov	r9, r0
 8010f34:	f04f 0300 	mov.w	r3, #0
 8010f38:	f04f 020a 	mov.w	r2, #10
 8010f3c:	4639      	mov	r1, r7
 8010f3e:	4658      	mov	r0, fp
 8010f40:	d107      	bne.n	8010f52 <_dtoa_r+0xac2>
 8010f42:	f000 fbcf 	bl	80116e4 <__multadd>
 8010f46:	4607      	mov	r7, r0
 8010f48:	4605      	mov	r5, r0
 8010f4a:	9b07      	ldr	r3, [sp, #28]
 8010f4c:	3301      	adds	r3, #1
 8010f4e:	9307      	str	r3, [sp, #28]
 8010f50:	e774      	b.n	8010e3c <_dtoa_r+0x9ac>
 8010f52:	f000 fbc7 	bl	80116e4 <__multadd>
 8010f56:	4629      	mov	r1, r5
 8010f58:	4607      	mov	r7, r0
 8010f5a:	2300      	movs	r3, #0
 8010f5c:	220a      	movs	r2, #10
 8010f5e:	4658      	mov	r0, fp
 8010f60:	f000 fbc0 	bl	80116e4 <__multadd>
 8010f64:	4605      	mov	r5, r0
 8010f66:	e7f0      	b.n	8010f4a <_dtoa_r+0xaba>
 8010f68:	9b00      	ldr	r3, [sp, #0]
 8010f6a:	2b00      	cmp	r3, #0
 8010f6c:	bfcc      	ite	gt
 8010f6e:	461e      	movgt	r6, r3
 8010f70:	2601      	movle	r6, #1
 8010f72:	4456      	add	r6, sl
 8010f74:	2700      	movs	r7, #0
 8010f76:	4649      	mov	r1, r9
 8010f78:	2201      	movs	r2, #1
 8010f7a:	4658      	mov	r0, fp
 8010f7c:	f000 fd5e 	bl	8011a3c <__lshift>
 8010f80:	4621      	mov	r1, r4
 8010f82:	4681      	mov	r9, r0
 8010f84:	f000 fdc6 	bl	8011b14 <__mcmp>
 8010f88:	2800      	cmp	r0, #0
 8010f8a:	dcb0      	bgt.n	8010eee <_dtoa_r+0xa5e>
 8010f8c:	d102      	bne.n	8010f94 <_dtoa_r+0xb04>
 8010f8e:	f018 0f01 	tst.w	r8, #1
 8010f92:	d1ac      	bne.n	8010eee <_dtoa_r+0xa5e>
 8010f94:	4633      	mov	r3, r6
 8010f96:	461e      	mov	r6, r3
 8010f98:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010f9c:	2a30      	cmp	r2, #48	@ 0x30
 8010f9e:	d0fa      	beq.n	8010f96 <_dtoa_r+0xb06>
 8010fa0:	e5c2      	b.n	8010b28 <_dtoa_r+0x698>
 8010fa2:	459a      	cmp	sl, r3
 8010fa4:	d1a4      	bne.n	8010ef0 <_dtoa_r+0xa60>
 8010fa6:	9b04      	ldr	r3, [sp, #16]
 8010fa8:	3301      	adds	r3, #1
 8010faa:	9304      	str	r3, [sp, #16]
 8010fac:	2331      	movs	r3, #49	@ 0x31
 8010fae:	f88a 3000 	strb.w	r3, [sl]
 8010fb2:	e5b9      	b.n	8010b28 <_dtoa_r+0x698>
 8010fb4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010fb6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8011014 <_dtoa_r+0xb84>
 8010fba:	b11b      	cbz	r3, 8010fc4 <_dtoa_r+0xb34>
 8010fbc:	f10a 0308 	add.w	r3, sl, #8
 8010fc0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8010fc2:	6013      	str	r3, [r2, #0]
 8010fc4:	4650      	mov	r0, sl
 8010fc6:	b019      	add	sp, #100	@ 0x64
 8010fc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010fcc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010fce:	2b01      	cmp	r3, #1
 8010fd0:	f77f ae37 	ble.w	8010c42 <_dtoa_r+0x7b2>
 8010fd4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010fd6:	930a      	str	r3, [sp, #40]	@ 0x28
 8010fd8:	2001      	movs	r0, #1
 8010fda:	e655      	b.n	8010c88 <_dtoa_r+0x7f8>
 8010fdc:	9b00      	ldr	r3, [sp, #0]
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	f77f aed6 	ble.w	8010d90 <_dtoa_r+0x900>
 8010fe4:	4656      	mov	r6, sl
 8010fe6:	4621      	mov	r1, r4
 8010fe8:	4648      	mov	r0, r9
 8010fea:	f7ff f9c8 	bl	801037e <quorem>
 8010fee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8010ff2:	f806 8b01 	strb.w	r8, [r6], #1
 8010ff6:	9b00      	ldr	r3, [sp, #0]
 8010ff8:	eba6 020a 	sub.w	r2, r6, sl
 8010ffc:	4293      	cmp	r3, r2
 8010ffe:	ddb3      	ble.n	8010f68 <_dtoa_r+0xad8>
 8011000:	4649      	mov	r1, r9
 8011002:	2300      	movs	r3, #0
 8011004:	220a      	movs	r2, #10
 8011006:	4658      	mov	r0, fp
 8011008:	f000 fb6c 	bl	80116e4 <__multadd>
 801100c:	4681      	mov	r9, r0
 801100e:	e7ea      	b.n	8010fe6 <_dtoa_r+0xb56>
 8011010:	080135e8 	.word	0x080135e8
 8011014:	0801356c 	.word	0x0801356c

08011018 <_free_r>:
 8011018:	b538      	push	{r3, r4, r5, lr}
 801101a:	4605      	mov	r5, r0
 801101c:	2900      	cmp	r1, #0
 801101e:	d041      	beq.n	80110a4 <_free_r+0x8c>
 8011020:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011024:	1f0c      	subs	r4, r1, #4
 8011026:	2b00      	cmp	r3, #0
 8011028:	bfb8      	it	lt
 801102a:	18e4      	addlt	r4, r4, r3
 801102c:	f000 faec 	bl	8011608 <__malloc_lock>
 8011030:	4a1d      	ldr	r2, [pc, #116]	@ (80110a8 <_free_r+0x90>)
 8011032:	6813      	ldr	r3, [r2, #0]
 8011034:	b933      	cbnz	r3, 8011044 <_free_r+0x2c>
 8011036:	6063      	str	r3, [r4, #4]
 8011038:	6014      	str	r4, [r2, #0]
 801103a:	4628      	mov	r0, r5
 801103c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011040:	f000 bae8 	b.w	8011614 <__malloc_unlock>
 8011044:	42a3      	cmp	r3, r4
 8011046:	d908      	bls.n	801105a <_free_r+0x42>
 8011048:	6820      	ldr	r0, [r4, #0]
 801104a:	1821      	adds	r1, r4, r0
 801104c:	428b      	cmp	r3, r1
 801104e:	bf01      	itttt	eq
 8011050:	6819      	ldreq	r1, [r3, #0]
 8011052:	685b      	ldreq	r3, [r3, #4]
 8011054:	1809      	addeq	r1, r1, r0
 8011056:	6021      	streq	r1, [r4, #0]
 8011058:	e7ed      	b.n	8011036 <_free_r+0x1e>
 801105a:	461a      	mov	r2, r3
 801105c:	685b      	ldr	r3, [r3, #4]
 801105e:	b10b      	cbz	r3, 8011064 <_free_r+0x4c>
 8011060:	42a3      	cmp	r3, r4
 8011062:	d9fa      	bls.n	801105a <_free_r+0x42>
 8011064:	6811      	ldr	r1, [r2, #0]
 8011066:	1850      	adds	r0, r2, r1
 8011068:	42a0      	cmp	r0, r4
 801106a:	d10b      	bne.n	8011084 <_free_r+0x6c>
 801106c:	6820      	ldr	r0, [r4, #0]
 801106e:	4401      	add	r1, r0
 8011070:	1850      	adds	r0, r2, r1
 8011072:	4283      	cmp	r3, r0
 8011074:	6011      	str	r1, [r2, #0]
 8011076:	d1e0      	bne.n	801103a <_free_r+0x22>
 8011078:	6818      	ldr	r0, [r3, #0]
 801107a:	685b      	ldr	r3, [r3, #4]
 801107c:	6053      	str	r3, [r2, #4]
 801107e:	4408      	add	r0, r1
 8011080:	6010      	str	r0, [r2, #0]
 8011082:	e7da      	b.n	801103a <_free_r+0x22>
 8011084:	d902      	bls.n	801108c <_free_r+0x74>
 8011086:	230c      	movs	r3, #12
 8011088:	602b      	str	r3, [r5, #0]
 801108a:	e7d6      	b.n	801103a <_free_r+0x22>
 801108c:	6820      	ldr	r0, [r4, #0]
 801108e:	1821      	adds	r1, r4, r0
 8011090:	428b      	cmp	r3, r1
 8011092:	bf04      	itt	eq
 8011094:	6819      	ldreq	r1, [r3, #0]
 8011096:	685b      	ldreq	r3, [r3, #4]
 8011098:	6063      	str	r3, [r4, #4]
 801109a:	bf04      	itt	eq
 801109c:	1809      	addeq	r1, r1, r0
 801109e:	6021      	streq	r1, [r4, #0]
 80110a0:	6054      	str	r4, [r2, #4]
 80110a2:	e7ca      	b.n	801103a <_free_r+0x22>
 80110a4:	bd38      	pop	{r3, r4, r5, pc}
 80110a6:	bf00      	nop
 80110a8:	20012940 	.word	0x20012940

080110ac <__ssputs_r>:
 80110ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80110b0:	688e      	ldr	r6, [r1, #8]
 80110b2:	461f      	mov	r7, r3
 80110b4:	42be      	cmp	r6, r7
 80110b6:	680b      	ldr	r3, [r1, #0]
 80110b8:	4682      	mov	sl, r0
 80110ba:	460c      	mov	r4, r1
 80110bc:	4690      	mov	r8, r2
 80110be:	d82d      	bhi.n	801111c <__ssputs_r+0x70>
 80110c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80110c4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80110c8:	d026      	beq.n	8011118 <__ssputs_r+0x6c>
 80110ca:	6965      	ldr	r5, [r4, #20]
 80110cc:	6909      	ldr	r1, [r1, #16]
 80110ce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80110d2:	eba3 0901 	sub.w	r9, r3, r1
 80110d6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80110da:	1c7b      	adds	r3, r7, #1
 80110dc:	444b      	add	r3, r9
 80110de:	106d      	asrs	r5, r5, #1
 80110e0:	429d      	cmp	r5, r3
 80110e2:	bf38      	it	cc
 80110e4:	461d      	movcc	r5, r3
 80110e6:	0553      	lsls	r3, r2, #21
 80110e8:	d527      	bpl.n	801113a <__ssputs_r+0x8e>
 80110ea:	4629      	mov	r1, r5
 80110ec:	f000 f960 	bl	80113b0 <_malloc_r>
 80110f0:	4606      	mov	r6, r0
 80110f2:	b360      	cbz	r0, 801114e <__ssputs_r+0xa2>
 80110f4:	6921      	ldr	r1, [r4, #16]
 80110f6:	464a      	mov	r2, r9
 80110f8:	f7ff f933 	bl	8010362 <memcpy>
 80110fc:	89a3      	ldrh	r3, [r4, #12]
 80110fe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8011102:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011106:	81a3      	strh	r3, [r4, #12]
 8011108:	6126      	str	r6, [r4, #16]
 801110a:	6165      	str	r5, [r4, #20]
 801110c:	444e      	add	r6, r9
 801110e:	eba5 0509 	sub.w	r5, r5, r9
 8011112:	6026      	str	r6, [r4, #0]
 8011114:	60a5      	str	r5, [r4, #8]
 8011116:	463e      	mov	r6, r7
 8011118:	42be      	cmp	r6, r7
 801111a:	d900      	bls.n	801111e <__ssputs_r+0x72>
 801111c:	463e      	mov	r6, r7
 801111e:	6820      	ldr	r0, [r4, #0]
 8011120:	4632      	mov	r2, r6
 8011122:	4641      	mov	r1, r8
 8011124:	f000 fe6f 	bl	8011e06 <memmove>
 8011128:	68a3      	ldr	r3, [r4, #8]
 801112a:	1b9b      	subs	r3, r3, r6
 801112c:	60a3      	str	r3, [r4, #8]
 801112e:	6823      	ldr	r3, [r4, #0]
 8011130:	4433      	add	r3, r6
 8011132:	6023      	str	r3, [r4, #0]
 8011134:	2000      	movs	r0, #0
 8011136:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801113a:	462a      	mov	r2, r5
 801113c:	f000 fe35 	bl	8011daa <_realloc_r>
 8011140:	4606      	mov	r6, r0
 8011142:	2800      	cmp	r0, #0
 8011144:	d1e0      	bne.n	8011108 <__ssputs_r+0x5c>
 8011146:	6921      	ldr	r1, [r4, #16]
 8011148:	4650      	mov	r0, sl
 801114a:	f7ff ff65 	bl	8011018 <_free_r>
 801114e:	230c      	movs	r3, #12
 8011150:	f8ca 3000 	str.w	r3, [sl]
 8011154:	89a3      	ldrh	r3, [r4, #12]
 8011156:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801115a:	81a3      	strh	r3, [r4, #12]
 801115c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011160:	e7e9      	b.n	8011136 <__ssputs_r+0x8a>
	...

08011164 <_svfiprintf_r>:
 8011164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011168:	4698      	mov	r8, r3
 801116a:	898b      	ldrh	r3, [r1, #12]
 801116c:	061b      	lsls	r3, r3, #24
 801116e:	b09d      	sub	sp, #116	@ 0x74
 8011170:	4607      	mov	r7, r0
 8011172:	460d      	mov	r5, r1
 8011174:	4614      	mov	r4, r2
 8011176:	d510      	bpl.n	801119a <_svfiprintf_r+0x36>
 8011178:	690b      	ldr	r3, [r1, #16]
 801117a:	b973      	cbnz	r3, 801119a <_svfiprintf_r+0x36>
 801117c:	2140      	movs	r1, #64	@ 0x40
 801117e:	f000 f917 	bl	80113b0 <_malloc_r>
 8011182:	6028      	str	r0, [r5, #0]
 8011184:	6128      	str	r0, [r5, #16]
 8011186:	b930      	cbnz	r0, 8011196 <_svfiprintf_r+0x32>
 8011188:	230c      	movs	r3, #12
 801118a:	603b      	str	r3, [r7, #0]
 801118c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011190:	b01d      	add	sp, #116	@ 0x74
 8011192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011196:	2340      	movs	r3, #64	@ 0x40
 8011198:	616b      	str	r3, [r5, #20]
 801119a:	2300      	movs	r3, #0
 801119c:	9309      	str	r3, [sp, #36]	@ 0x24
 801119e:	2320      	movs	r3, #32
 80111a0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80111a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80111a8:	2330      	movs	r3, #48	@ 0x30
 80111aa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8011348 <_svfiprintf_r+0x1e4>
 80111ae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80111b2:	f04f 0901 	mov.w	r9, #1
 80111b6:	4623      	mov	r3, r4
 80111b8:	469a      	mov	sl, r3
 80111ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80111be:	b10a      	cbz	r2, 80111c4 <_svfiprintf_r+0x60>
 80111c0:	2a25      	cmp	r2, #37	@ 0x25
 80111c2:	d1f9      	bne.n	80111b8 <_svfiprintf_r+0x54>
 80111c4:	ebba 0b04 	subs.w	fp, sl, r4
 80111c8:	d00b      	beq.n	80111e2 <_svfiprintf_r+0x7e>
 80111ca:	465b      	mov	r3, fp
 80111cc:	4622      	mov	r2, r4
 80111ce:	4629      	mov	r1, r5
 80111d0:	4638      	mov	r0, r7
 80111d2:	f7ff ff6b 	bl	80110ac <__ssputs_r>
 80111d6:	3001      	adds	r0, #1
 80111d8:	f000 80a7 	beq.w	801132a <_svfiprintf_r+0x1c6>
 80111dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80111de:	445a      	add	r2, fp
 80111e0:	9209      	str	r2, [sp, #36]	@ 0x24
 80111e2:	f89a 3000 	ldrb.w	r3, [sl]
 80111e6:	2b00      	cmp	r3, #0
 80111e8:	f000 809f 	beq.w	801132a <_svfiprintf_r+0x1c6>
 80111ec:	2300      	movs	r3, #0
 80111ee:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80111f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80111f6:	f10a 0a01 	add.w	sl, sl, #1
 80111fa:	9304      	str	r3, [sp, #16]
 80111fc:	9307      	str	r3, [sp, #28]
 80111fe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011202:	931a      	str	r3, [sp, #104]	@ 0x68
 8011204:	4654      	mov	r4, sl
 8011206:	2205      	movs	r2, #5
 8011208:	f814 1b01 	ldrb.w	r1, [r4], #1
 801120c:	484e      	ldr	r0, [pc, #312]	@ (8011348 <_svfiprintf_r+0x1e4>)
 801120e:	f7ef f807 	bl	8000220 <memchr>
 8011212:	9a04      	ldr	r2, [sp, #16]
 8011214:	b9d8      	cbnz	r0, 801124e <_svfiprintf_r+0xea>
 8011216:	06d0      	lsls	r0, r2, #27
 8011218:	bf44      	itt	mi
 801121a:	2320      	movmi	r3, #32
 801121c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011220:	0711      	lsls	r1, r2, #28
 8011222:	bf44      	itt	mi
 8011224:	232b      	movmi	r3, #43	@ 0x2b
 8011226:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801122a:	f89a 3000 	ldrb.w	r3, [sl]
 801122e:	2b2a      	cmp	r3, #42	@ 0x2a
 8011230:	d015      	beq.n	801125e <_svfiprintf_r+0xfa>
 8011232:	9a07      	ldr	r2, [sp, #28]
 8011234:	4654      	mov	r4, sl
 8011236:	2000      	movs	r0, #0
 8011238:	f04f 0c0a 	mov.w	ip, #10
 801123c:	4621      	mov	r1, r4
 801123e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011242:	3b30      	subs	r3, #48	@ 0x30
 8011244:	2b09      	cmp	r3, #9
 8011246:	d94b      	bls.n	80112e0 <_svfiprintf_r+0x17c>
 8011248:	b1b0      	cbz	r0, 8011278 <_svfiprintf_r+0x114>
 801124a:	9207      	str	r2, [sp, #28]
 801124c:	e014      	b.n	8011278 <_svfiprintf_r+0x114>
 801124e:	eba0 0308 	sub.w	r3, r0, r8
 8011252:	fa09 f303 	lsl.w	r3, r9, r3
 8011256:	4313      	orrs	r3, r2
 8011258:	9304      	str	r3, [sp, #16]
 801125a:	46a2      	mov	sl, r4
 801125c:	e7d2      	b.n	8011204 <_svfiprintf_r+0xa0>
 801125e:	9b03      	ldr	r3, [sp, #12]
 8011260:	1d19      	adds	r1, r3, #4
 8011262:	681b      	ldr	r3, [r3, #0]
 8011264:	9103      	str	r1, [sp, #12]
 8011266:	2b00      	cmp	r3, #0
 8011268:	bfbb      	ittet	lt
 801126a:	425b      	neglt	r3, r3
 801126c:	f042 0202 	orrlt.w	r2, r2, #2
 8011270:	9307      	strge	r3, [sp, #28]
 8011272:	9307      	strlt	r3, [sp, #28]
 8011274:	bfb8      	it	lt
 8011276:	9204      	strlt	r2, [sp, #16]
 8011278:	7823      	ldrb	r3, [r4, #0]
 801127a:	2b2e      	cmp	r3, #46	@ 0x2e
 801127c:	d10a      	bne.n	8011294 <_svfiprintf_r+0x130>
 801127e:	7863      	ldrb	r3, [r4, #1]
 8011280:	2b2a      	cmp	r3, #42	@ 0x2a
 8011282:	d132      	bne.n	80112ea <_svfiprintf_r+0x186>
 8011284:	9b03      	ldr	r3, [sp, #12]
 8011286:	1d1a      	adds	r2, r3, #4
 8011288:	681b      	ldr	r3, [r3, #0]
 801128a:	9203      	str	r2, [sp, #12]
 801128c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011290:	3402      	adds	r4, #2
 8011292:	9305      	str	r3, [sp, #20]
 8011294:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8011358 <_svfiprintf_r+0x1f4>
 8011298:	7821      	ldrb	r1, [r4, #0]
 801129a:	2203      	movs	r2, #3
 801129c:	4650      	mov	r0, sl
 801129e:	f7ee ffbf 	bl	8000220 <memchr>
 80112a2:	b138      	cbz	r0, 80112b4 <_svfiprintf_r+0x150>
 80112a4:	9b04      	ldr	r3, [sp, #16]
 80112a6:	eba0 000a 	sub.w	r0, r0, sl
 80112aa:	2240      	movs	r2, #64	@ 0x40
 80112ac:	4082      	lsls	r2, r0
 80112ae:	4313      	orrs	r3, r2
 80112b0:	3401      	adds	r4, #1
 80112b2:	9304      	str	r3, [sp, #16]
 80112b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80112b8:	4824      	ldr	r0, [pc, #144]	@ (801134c <_svfiprintf_r+0x1e8>)
 80112ba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80112be:	2206      	movs	r2, #6
 80112c0:	f7ee ffae 	bl	8000220 <memchr>
 80112c4:	2800      	cmp	r0, #0
 80112c6:	d036      	beq.n	8011336 <_svfiprintf_r+0x1d2>
 80112c8:	4b21      	ldr	r3, [pc, #132]	@ (8011350 <_svfiprintf_r+0x1ec>)
 80112ca:	bb1b      	cbnz	r3, 8011314 <_svfiprintf_r+0x1b0>
 80112cc:	9b03      	ldr	r3, [sp, #12]
 80112ce:	3307      	adds	r3, #7
 80112d0:	f023 0307 	bic.w	r3, r3, #7
 80112d4:	3308      	adds	r3, #8
 80112d6:	9303      	str	r3, [sp, #12]
 80112d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80112da:	4433      	add	r3, r6
 80112dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80112de:	e76a      	b.n	80111b6 <_svfiprintf_r+0x52>
 80112e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80112e4:	460c      	mov	r4, r1
 80112e6:	2001      	movs	r0, #1
 80112e8:	e7a8      	b.n	801123c <_svfiprintf_r+0xd8>
 80112ea:	2300      	movs	r3, #0
 80112ec:	3401      	adds	r4, #1
 80112ee:	9305      	str	r3, [sp, #20]
 80112f0:	4619      	mov	r1, r3
 80112f2:	f04f 0c0a 	mov.w	ip, #10
 80112f6:	4620      	mov	r0, r4
 80112f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80112fc:	3a30      	subs	r2, #48	@ 0x30
 80112fe:	2a09      	cmp	r2, #9
 8011300:	d903      	bls.n	801130a <_svfiprintf_r+0x1a6>
 8011302:	2b00      	cmp	r3, #0
 8011304:	d0c6      	beq.n	8011294 <_svfiprintf_r+0x130>
 8011306:	9105      	str	r1, [sp, #20]
 8011308:	e7c4      	b.n	8011294 <_svfiprintf_r+0x130>
 801130a:	fb0c 2101 	mla	r1, ip, r1, r2
 801130e:	4604      	mov	r4, r0
 8011310:	2301      	movs	r3, #1
 8011312:	e7f0      	b.n	80112f6 <_svfiprintf_r+0x192>
 8011314:	ab03      	add	r3, sp, #12
 8011316:	9300      	str	r3, [sp, #0]
 8011318:	462a      	mov	r2, r5
 801131a:	4b0e      	ldr	r3, [pc, #56]	@ (8011354 <_svfiprintf_r+0x1f0>)
 801131c:	a904      	add	r1, sp, #16
 801131e:	4638      	mov	r0, r7
 8011320:	f7fe fadc 	bl	800f8dc <_printf_float>
 8011324:	1c42      	adds	r2, r0, #1
 8011326:	4606      	mov	r6, r0
 8011328:	d1d6      	bne.n	80112d8 <_svfiprintf_r+0x174>
 801132a:	89ab      	ldrh	r3, [r5, #12]
 801132c:	065b      	lsls	r3, r3, #25
 801132e:	f53f af2d 	bmi.w	801118c <_svfiprintf_r+0x28>
 8011332:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011334:	e72c      	b.n	8011190 <_svfiprintf_r+0x2c>
 8011336:	ab03      	add	r3, sp, #12
 8011338:	9300      	str	r3, [sp, #0]
 801133a:	462a      	mov	r2, r5
 801133c:	4b05      	ldr	r3, [pc, #20]	@ (8011354 <_svfiprintf_r+0x1f0>)
 801133e:	a904      	add	r1, sp, #16
 8011340:	4638      	mov	r0, r7
 8011342:	f7fe fd63 	bl	800fe0c <_printf_i>
 8011346:	e7ed      	b.n	8011324 <_svfiprintf_r+0x1c0>
 8011348:	080135f9 	.word	0x080135f9
 801134c:	08013603 	.word	0x08013603
 8011350:	0800f8dd 	.word	0x0800f8dd
 8011354:	080110ad 	.word	0x080110ad
 8011358:	080135ff 	.word	0x080135ff

0801135c <malloc>:
 801135c:	4b02      	ldr	r3, [pc, #8]	@ (8011368 <malloc+0xc>)
 801135e:	4601      	mov	r1, r0
 8011360:	6818      	ldr	r0, [r3, #0]
 8011362:	f000 b825 	b.w	80113b0 <_malloc_r>
 8011366:	bf00      	nop
 8011368:	200001b4 	.word	0x200001b4

0801136c <sbrk_aligned>:
 801136c:	b570      	push	{r4, r5, r6, lr}
 801136e:	4e0f      	ldr	r6, [pc, #60]	@ (80113ac <sbrk_aligned+0x40>)
 8011370:	460c      	mov	r4, r1
 8011372:	6831      	ldr	r1, [r6, #0]
 8011374:	4605      	mov	r5, r0
 8011376:	b911      	cbnz	r1, 801137e <sbrk_aligned+0x12>
 8011378:	f000 fd94 	bl	8011ea4 <_sbrk_r>
 801137c:	6030      	str	r0, [r6, #0]
 801137e:	4621      	mov	r1, r4
 8011380:	4628      	mov	r0, r5
 8011382:	f000 fd8f 	bl	8011ea4 <_sbrk_r>
 8011386:	1c43      	adds	r3, r0, #1
 8011388:	d103      	bne.n	8011392 <sbrk_aligned+0x26>
 801138a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801138e:	4620      	mov	r0, r4
 8011390:	bd70      	pop	{r4, r5, r6, pc}
 8011392:	1cc4      	adds	r4, r0, #3
 8011394:	f024 0403 	bic.w	r4, r4, #3
 8011398:	42a0      	cmp	r0, r4
 801139a:	d0f8      	beq.n	801138e <sbrk_aligned+0x22>
 801139c:	1a21      	subs	r1, r4, r0
 801139e:	4628      	mov	r0, r5
 80113a0:	f000 fd80 	bl	8011ea4 <_sbrk_r>
 80113a4:	3001      	adds	r0, #1
 80113a6:	d1f2      	bne.n	801138e <sbrk_aligned+0x22>
 80113a8:	e7ef      	b.n	801138a <sbrk_aligned+0x1e>
 80113aa:	bf00      	nop
 80113ac:	2001293c 	.word	0x2001293c

080113b0 <_malloc_r>:
 80113b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80113b4:	1ccd      	adds	r5, r1, #3
 80113b6:	f025 0503 	bic.w	r5, r5, #3
 80113ba:	3508      	adds	r5, #8
 80113bc:	2d0c      	cmp	r5, #12
 80113be:	bf38      	it	cc
 80113c0:	250c      	movcc	r5, #12
 80113c2:	2d00      	cmp	r5, #0
 80113c4:	4606      	mov	r6, r0
 80113c6:	db01      	blt.n	80113cc <_malloc_r+0x1c>
 80113c8:	42a9      	cmp	r1, r5
 80113ca:	d904      	bls.n	80113d6 <_malloc_r+0x26>
 80113cc:	230c      	movs	r3, #12
 80113ce:	6033      	str	r3, [r6, #0]
 80113d0:	2000      	movs	r0, #0
 80113d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80113d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80114ac <_malloc_r+0xfc>
 80113da:	f000 f915 	bl	8011608 <__malloc_lock>
 80113de:	f8d8 3000 	ldr.w	r3, [r8]
 80113e2:	461c      	mov	r4, r3
 80113e4:	bb44      	cbnz	r4, 8011438 <_malloc_r+0x88>
 80113e6:	4629      	mov	r1, r5
 80113e8:	4630      	mov	r0, r6
 80113ea:	f7ff ffbf 	bl	801136c <sbrk_aligned>
 80113ee:	1c43      	adds	r3, r0, #1
 80113f0:	4604      	mov	r4, r0
 80113f2:	d158      	bne.n	80114a6 <_malloc_r+0xf6>
 80113f4:	f8d8 4000 	ldr.w	r4, [r8]
 80113f8:	4627      	mov	r7, r4
 80113fa:	2f00      	cmp	r7, #0
 80113fc:	d143      	bne.n	8011486 <_malloc_r+0xd6>
 80113fe:	2c00      	cmp	r4, #0
 8011400:	d04b      	beq.n	801149a <_malloc_r+0xea>
 8011402:	6823      	ldr	r3, [r4, #0]
 8011404:	4639      	mov	r1, r7
 8011406:	4630      	mov	r0, r6
 8011408:	eb04 0903 	add.w	r9, r4, r3
 801140c:	f000 fd4a 	bl	8011ea4 <_sbrk_r>
 8011410:	4581      	cmp	r9, r0
 8011412:	d142      	bne.n	801149a <_malloc_r+0xea>
 8011414:	6821      	ldr	r1, [r4, #0]
 8011416:	1a6d      	subs	r5, r5, r1
 8011418:	4629      	mov	r1, r5
 801141a:	4630      	mov	r0, r6
 801141c:	f7ff ffa6 	bl	801136c <sbrk_aligned>
 8011420:	3001      	adds	r0, #1
 8011422:	d03a      	beq.n	801149a <_malloc_r+0xea>
 8011424:	6823      	ldr	r3, [r4, #0]
 8011426:	442b      	add	r3, r5
 8011428:	6023      	str	r3, [r4, #0]
 801142a:	f8d8 3000 	ldr.w	r3, [r8]
 801142e:	685a      	ldr	r2, [r3, #4]
 8011430:	bb62      	cbnz	r2, 801148c <_malloc_r+0xdc>
 8011432:	f8c8 7000 	str.w	r7, [r8]
 8011436:	e00f      	b.n	8011458 <_malloc_r+0xa8>
 8011438:	6822      	ldr	r2, [r4, #0]
 801143a:	1b52      	subs	r2, r2, r5
 801143c:	d420      	bmi.n	8011480 <_malloc_r+0xd0>
 801143e:	2a0b      	cmp	r2, #11
 8011440:	d917      	bls.n	8011472 <_malloc_r+0xc2>
 8011442:	1961      	adds	r1, r4, r5
 8011444:	42a3      	cmp	r3, r4
 8011446:	6025      	str	r5, [r4, #0]
 8011448:	bf18      	it	ne
 801144a:	6059      	strne	r1, [r3, #4]
 801144c:	6863      	ldr	r3, [r4, #4]
 801144e:	bf08      	it	eq
 8011450:	f8c8 1000 	streq.w	r1, [r8]
 8011454:	5162      	str	r2, [r4, r5]
 8011456:	604b      	str	r3, [r1, #4]
 8011458:	4630      	mov	r0, r6
 801145a:	f000 f8db 	bl	8011614 <__malloc_unlock>
 801145e:	f104 000b 	add.w	r0, r4, #11
 8011462:	1d23      	adds	r3, r4, #4
 8011464:	f020 0007 	bic.w	r0, r0, #7
 8011468:	1ac2      	subs	r2, r0, r3
 801146a:	bf1c      	itt	ne
 801146c:	1a1b      	subne	r3, r3, r0
 801146e:	50a3      	strne	r3, [r4, r2]
 8011470:	e7af      	b.n	80113d2 <_malloc_r+0x22>
 8011472:	6862      	ldr	r2, [r4, #4]
 8011474:	42a3      	cmp	r3, r4
 8011476:	bf0c      	ite	eq
 8011478:	f8c8 2000 	streq.w	r2, [r8]
 801147c:	605a      	strne	r2, [r3, #4]
 801147e:	e7eb      	b.n	8011458 <_malloc_r+0xa8>
 8011480:	4623      	mov	r3, r4
 8011482:	6864      	ldr	r4, [r4, #4]
 8011484:	e7ae      	b.n	80113e4 <_malloc_r+0x34>
 8011486:	463c      	mov	r4, r7
 8011488:	687f      	ldr	r7, [r7, #4]
 801148a:	e7b6      	b.n	80113fa <_malloc_r+0x4a>
 801148c:	461a      	mov	r2, r3
 801148e:	685b      	ldr	r3, [r3, #4]
 8011490:	42a3      	cmp	r3, r4
 8011492:	d1fb      	bne.n	801148c <_malloc_r+0xdc>
 8011494:	2300      	movs	r3, #0
 8011496:	6053      	str	r3, [r2, #4]
 8011498:	e7de      	b.n	8011458 <_malloc_r+0xa8>
 801149a:	230c      	movs	r3, #12
 801149c:	6033      	str	r3, [r6, #0]
 801149e:	4630      	mov	r0, r6
 80114a0:	f000 f8b8 	bl	8011614 <__malloc_unlock>
 80114a4:	e794      	b.n	80113d0 <_malloc_r+0x20>
 80114a6:	6005      	str	r5, [r0, #0]
 80114a8:	e7d6      	b.n	8011458 <_malloc_r+0xa8>
 80114aa:	bf00      	nop
 80114ac:	20012940 	.word	0x20012940

080114b0 <__sflush_r>:
 80114b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80114b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80114b8:	0716      	lsls	r6, r2, #28
 80114ba:	4605      	mov	r5, r0
 80114bc:	460c      	mov	r4, r1
 80114be:	d454      	bmi.n	801156a <__sflush_r+0xba>
 80114c0:	684b      	ldr	r3, [r1, #4]
 80114c2:	2b00      	cmp	r3, #0
 80114c4:	dc02      	bgt.n	80114cc <__sflush_r+0x1c>
 80114c6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80114c8:	2b00      	cmp	r3, #0
 80114ca:	dd48      	ble.n	801155e <__sflush_r+0xae>
 80114cc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80114ce:	2e00      	cmp	r6, #0
 80114d0:	d045      	beq.n	801155e <__sflush_r+0xae>
 80114d2:	2300      	movs	r3, #0
 80114d4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80114d8:	682f      	ldr	r7, [r5, #0]
 80114da:	6a21      	ldr	r1, [r4, #32]
 80114dc:	602b      	str	r3, [r5, #0]
 80114de:	d030      	beq.n	8011542 <__sflush_r+0x92>
 80114e0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80114e2:	89a3      	ldrh	r3, [r4, #12]
 80114e4:	0759      	lsls	r1, r3, #29
 80114e6:	d505      	bpl.n	80114f4 <__sflush_r+0x44>
 80114e8:	6863      	ldr	r3, [r4, #4]
 80114ea:	1ad2      	subs	r2, r2, r3
 80114ec:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80114ee:	b10b      	cbz	r3, 80114f4 <__sflush_r+0x44>
 80114f0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80114f2:	1ad2      	subs	r2, r2, r3
 80114f4:	2300      	movs	r3, #0
 80114f6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80114f8:	6a21      	ldr	r1, [r4, #32]
 80114fa:	4628      	mov	r0, r5
 80114fc:	47b0      	blx	r6
 80114fe:	1c43      	adds	r3, r0, #1
 8011500:	89a3      	ldrh	r3, [r4, #12]
 8011502:	d106      	bne.n	8011512 <__sflush_r+0x62>
 8011504:	6829      	ldr	r1, [r5, #0]
 8011506:	291d      	cmp	r1, #29
 8011508:	d82b      	bhi.n	8011562 <__sflush_r+0xb2>
 801150a:	4a2a      	ldr	r2, [pc, #168]	@ (80115b4 <__sflush_r+0x104>)
 801150c:	410a      	asrs	r2, r1
 801150e:	07d6      	lsls	r6, r2, #31
 8011510:	d427      	bmi.n	8011562 <__sflush_r+0xb2>
 8011512:	2200      	movs	r2, #0
 8011514:	6062      	str	r2, [r4, #4]
 8011516:	04d9      	lsls	r1, r3, #19
 8011518:	6922      	ldr	r2, [r4, #16]
 801151a:	6022      	str	r2, [r4, #0]
 801151c:	d504      	bpl.n	8011528 <__sflush_r+0x78>
 801151e:	1c42      	adds	r2, r0, #1
 8011520:	d101      	bne.n	8011526 <__sflush_r+0x76>
 8011522:	682b      	ldr	r3, [r5, #0]
 8011524:	b903      	cbnz	r3, 8011528 <__sflush_r+0x78>
 8011526:	6560      	str	r0, [r4, #84]	@ 0x54
 8011528:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801152a:	602f      	str	r7, [r5, #0]
 801152c:	b1b9      	cbz	r1, 801155e <__sflush_r+0xae>
 801152e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011532:	4299      	cmp	r1, r3
 8011534:	d002      	beq.n	801153c <__sflush_r+0x8c>
 8011536:	4628      	mov	r0, r5
 8011538:	f7ff fd6e 	bl	8011018 <_free_r>
 801153c:	2300      	movs	r3, #0
 801153e:	6363      	str	r3, [r4, #52]	@ 0x34
 8011540:	e00d      	b.n	801155e <__sflush_r+0xae>
 8011542:	2301      	movs	r3, #1
 8011544:	4628      	mov	r0, r5
 8011546:	47b0      	blx	r6
 8011548:	4602      	mov	r2, r0
 801154a:	1c50      	adds	r0, r2, #1
 801154c:	d1c9      	bne.n	80114e2 <__sflush_r+0x32>
 801154e:	682b      	ldr	r3, [r5, #0]
 8011550:	2b00      	cmp	r3, #0
 8011552:	d0c6      	beq.n	80114e2 <__sflush_r+0x32>
 8011554:	2b1d      	cmp	r3, #29
 8011556:	d001      	beq.n	801155c <__sflush_r+0xac>
 8011558:	2b16      	cmp	r3, #22
 801155a:	d11e      	bne.n	801159a <__sflush_r+0xea>
 801155c:	602f      	str	r7, [r5, #0]
 801155e:	2000      	movs	r0, #0
 8011560:	e022      	b.n	80115a8 <__sflush_r+0xf8>
 8011562:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011566:	b21b      	sxth	r3, r3
 8011568:	e01b      	b.n	80115a2 <__sflush_r+0xf2>
 801156a:	690f      	ldr	r7, [r1, #16]
 801156c:	2f00      	cmp	r7, #0
 801156e:	d0f6      	beq.n	801155e <__sflush_r+0xae>
 8011570:	0793      	lsls	r3, r2, #30
 8011572:	680e      	ldr	r6, [r1, #0]
 8011574:	bf08      	it	eq
 8011576:	694b      	ldreq	r3, [r1, #20]
 8011578:	600f      	str	r7, [r1, #0]
 801157a:	bf18      	it	ne
 801157c:	2300      	movne	r3, #0
 801157e:	eba6 0807 	sub.w	r8, r6, r7
 8011582:	608b      	str	r3, [r1, #8]
 8011584:	f1b8 0f00 	cmp.w	r8, #0
 8011588:	dde9      	ble.n	801155e <__sflush_r+0xae>
 801158a:	6a21      	ldr	r1, [r4, #32]
 801158c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801158e:	4643      	mov	r3, r8
 8011590:	463a      	mov	r2, r7
 8011592:	4628      	mov	r0, r5
 8011594:	47b0      	blx	r6
 8011596:	2800      	cmp	r0, #0
 8011598:	dc08      	bgt.n	80115ac <__sflush_r+0xfc>
 801159a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801159e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80115a2:	81a3      	strh	r3, [r4, #12]
 80115a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80115a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80115ac:	4407      	add	r7, r0
 80115ae:	eba8 0800 	sub.w	r8, r8, r0
 80115b2:	e7e7      	b.n	8011584 <__sflush_r+0xd4>
 80115b4:	dfbffffe 	.word	0xdfbffffe

080115b8 <_fflush_r>:
 80115b8:	b538      	push	{r3, r4, r5, lr}
 80115ba:	690b      	ldr	r3, [r1, #16]
 80115bc:	4605      	mov	r5, r0
 80115be:	460c      	mov	r4, r1
 80115c0:	b913      	cbnz	r3, 80115c8 <_fflush_r+0x10>
 80115c2:	2500      	movs	r5, #0
 80115c4:	4628      	mov	r0, r5
 80115c6:	bd38      	pop	{r3, r4, r5, pc}
 80115c8:	b118      	cbz	r0, 80115d2 <_fflush_r+0x1a>
 80115ca:	6a03      	ldr	r3, [r0, #32]
 80115cc:	b90b      	cbnz	r3, 80115d2 <_fflush_r+0x1a>
 80115ce:	f7fe fdc9 	bl	8010164 <__sinit>
 80115d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	d0f3      	beq.n	80115c2 <_fflush_r+0xa>
 80115da:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80115dc:	07d0      	lsls	r0, r2, #31
 80115de:	d404      	bmi.n	80115ea <_fflush_r+0x32>
 80115e0:	0599      	lsls	r1, r3, #22
 80115e2:	d402      	bmi.n	80115ea <_fflush_r+0x32>
 80115e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80115e6:	f7fe feba 	bl	801035e <__retarget_lock_acquire_recursive>
 80115ea:	4628      	mov	r0, r5
 80115ec:	4621      	mov	r1, r4
 80115ee:	f7ff ff5f 	bl	80114b0 <__sflush_r>
 80115f2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80115f4:	07da      	lsls	r2, r3, #31
 80115f6:	4605      	mov	r5, r0
 80115f8:	d4e4      	bmi.n	80115c4 <_fflush_r+0xc>
 80115fa:	89a3      	ldrh	r3, [r4, #12]
 80115fc:	059b      	lsls	r3, r3, #22
 80115fe:	d4e1      	bmi.n	80115c4 <_fflush_r+0xc>
 8011600:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011602:	f7fe fead 	bl	8010360 <__retarget_lock_release_recursive>
 8011606:	e7dd      	b.n	80115c4 <_fflush_r+0xc>

08011608 <__malloc_lock>:
 8011608:	4801      	ldr	r0, [pc, #4]	@ (8011610 <__malloc_lock+0x8>)
 801160a:	f7fe bea8 	b.w	801035e <__retarget_lock_acquire_recursive>
 801160e:	bf00      	nop
 8011610:	20012938 	.word	0x20012938

08011614 <__malloc_unlock>:
 8011614:	4801      	ldr	r0, [pc, #4]	@ (801161c <__malloc_unlock+0x8>)
 8011616:	f7fe bea3 	b.w	8010360 <__retarget_lock_release_recursive>
 801161a:	bf00      	nop
 801161c:	20012938 	.word	0x20012938

08011620 <_Balloc>:
 8011620:	b570      	push	{r4, r5, r6, lr}
 8011622:	69c6      	ldr	r6, [r0, #28]
 8011624:	4604      	mov	r4, r0
 8011626:	460d      	mov	r5, r1
 8011628:	b976      	cbnz	r6, 8011648 <_Balloc+0x28>
 801162a:	2010      	movs	r0, #16
 801162c:	f7ff fe96 	bl	801135c <malloc>
 8011630:	4602      	mov	r2, r0
 8011632:	61e0      	str	r0, [r4, #28]
 8011634:	b920      	cbnz	r0, 8011640 <_Balloc+0x20>
 8011636:	4b18      	ldr	r3, [pc, #96]	@ (8011698 <_Balloc+0x78>)
 8011638:	4818      	ldr	r0, [pc, #96]	@ (801169c <_Balloc+0x7c>)
 801163a:	216b      	movs	r1, #107	@ 0x6b
 801163c:	f000 fc54 	bl	8011ee8 <__assert_func>
 8011640:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011644:	6006      	str	r6, [r0, #0]
 8011646:	60c6      	str	r6, [r0, #12]
 8011648:	69e6      	ldr	r6, [r4, #28]
 801164a:	68f3      	ldr	r3, [r6, #12]
 801164c:	b183      	cbz	r3, 8011670 <_Balloc+0x50>
 801164e:	69e3      	ldr	r3, [r4, #28]
 8011650:	68db      	ldr	r3, [r3, #12]
 8011652:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011656:	b9b8      	cbnz	r0, 8011688 <_Balloc+0x68>
 8011658:	2101      	movs	r1, #1
 801165a:	fa01 f605 	lsl.w	r6, r1, r5
 801165e:	1d72      	adds	r2, r6, #5
 8011660:	0092      	lsls	r2, r2, #2
 8011662:	4620      	mov	r0, r4
 8011664:	f000 fc5e 	bl	8011f24 <_calloc_r>
 8011668:	b160      	cbz	r0, 8011684 <_Balloc+0x64>
 801166a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801166e:	e00e      	b.n	801168e <_Balloc+0x6e>
 8011670:	2221      	movs	r2, #33	@ 0x21
 8011672:	2104      	movs	r1, #4
 8011674:	4620      	mov	r0, r4
 8011676:	f000 fc55 	bl	8011f24 <_calloc_r>
 801167a:	69e3      	ldr	r3, [r4, #28]
 801167c:	60f0      	str	r0, [r6, #12]
 801167e:	68db      	ldr	r3, [r3, #12]
 8011680:	2b00      	cmp	r3, #0
 8011682:	d1e4      	bne.n	801164e <_Balloc+0x2e>
 8011684:	2000      	movs	r0, #0
 8011686:	bd70      	pop	{r4, r5, r6, pc}
 8011688:	6802      	ldr	r2, [r0, #0]
 801168a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801168e:	2300      	movs	r3, #0
 8011690:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011694:	e7f7      	b.n	8011686 <_Balloc+0x66>
 8011696:	bf00      	nop
 8011698:	08013579 	.word	0x08013579
 801169c:	0801360a 	.word	0x0801360a

080116a0 <_Bfree>:
 80116a0:	b570      	push	{r4, r5, r6, lr}
 80116a2:	69c6      	ldr	r6, [r0, #28]
 80116a4:	4605      	mov	r5, r0
 80116a6:	460c      	mov	r4, r1
 80116a8:	b976      	cbnz	r6, 80116c8 <_Bfree+0x28>
 80116aa:	2010      	movs	r0, #16
 80116ac:	f7ff fe56 	bl	801135c <malloc>
 80116b0:	4602      	mov	r2, r0
 80116b2:	61e8      	str	r0, [r5, #28]
 80116b4:	b920      	cbnz	r0, 80116c0 <_Bfree+0x20>
 80116b6:	4b09      	ldr	r3, [pc, #36]	@ (80116dc <_Bfree+0x3c>)
 80116b8:	4809      	ldr	r0, [pc, #36]	@ (80116e0 <_Bfree+0x40>)
 80116ba:	218f      	movs	r1, #143	@ 0x8f
 80116bc:	f000 fc14 	bl	8011ee8 <__assert_func>
 80116c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80116c4:	6006      	str	r6, [r0, #0]
 80116c6:	60c6      	str	r6, [r0, #12]
 80116c8:	b13c      	cbz	r4, 80116da <_Bfree+0x3a>
 80116ca:	69eb      	ldr	r3, [r5, #28]
 80116cc:	6862      	ldr	r2, [r4, #4]
 80116ce:	68db      	ldr	r3, [r3, #12]
 80116d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80116d4:	6021      	str	r1, [r4, #0]
 80116d6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80116da:	bd70      	pop	{r4, r5, r6, pc}
 80116dc:	08013579 	.word	0x08013579
 80116e0:	0801360a 	.word	0x0801360a

080116e4 <__multadd>:
 80116e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80116e8:	690d      	ldr	r5, [r1, #16]
 80116ea:	4607      	mov	r7, r0
 80116ec:	460c      	mov	r4, r1
 80116ee:	461e      	mov	r6, r3
 80116f0:	f101 0c14 	add.w	ip, r1, #20
 80116f4:	2000      	movs	r0, #0
 80116f6:	f8dc 3000 	ldr.w	r3, [ip]
 80116fa:	b299      	uxth	r1, r3
 80116fc:	fb02 6101 	mla	r1, r2, r1, r6
 8011700:	0c1e      	lsrs	r6, r3, #16
 8011702:	0c0b      	lsrs	r3, r1, #16
 8011704:	fb02 3306 	mla	r3, r2, r6, r3
 8011708:	b289      	uxth	r1, r1
 801170a:	3001      	adds	r0, #1
 801170c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011710:	4285      	cmp	r5, r0
 8011712:	f84c 1b04 	str.w	r1, [ip], #4
 8011716:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801171a:	dcec      	bgt.n	80116f6 <__multadd+0x12>
 801171c:	b30e      	cbz	r6, 8011762 <__multadd+0x7e>
 801171e:	68a3      	ldr	r3, [r4, #8]
 8011720:	42ab      	cmp	r3, r5
 8011722:	dc19      	bgt.n	8011758 <__multadd+0x74>
 8011724:	6861      	ldr	r1, [r4, #4]
 8011726:	4638      	mov	r0, r7
 8011728:	3101      	adds	r1, #1
 801172a:	f7ff ff79 	bl	8011620 <_Balloc>
 801172e:	4680      	mov	r8, r0
 8011730:	b928      	cbnz	r0, 801173e <__multadd+0x5a>
 8011732:	4602      	mov	r2, r0
 8011734:	4b0c      	ldr	r3, [pc, #48]	@ (8011768 <__multadd+0x84>)
 8011736:	480d      	ldr	r0, [pc, #52]	@ (801176c <__multadd+0x88>)
 8011738:	21ba      	movs	r1, #186	@ 0xba
 801173a:	f000 fbd5 	bl	8011ee8 <__assert_func>
 801173e:	6922      	ldr	r2, [r4, #16]
 8011740:	3202      	adds	r2, #2
 8011742:	f104 010c 	add.w	r1, r4, #12
 8011746:	0092      	lsls	r2, r2, #2
 8011748:	300c      	adds	r0, #12
 801174a:	f7fe fe0a 	bl	8010362 <memcpy>
 801174e:	4621      	mov	r1, r4
 8011750:	4638      	mov	r0, r7
 8011752:	f7ff ffa5 	bl	80116a0 <_Bfree>
 8011756:	4644      	mov	r4, r8
 8011758:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801175c:	3501      	adds	r5, #1
 801175e:	615e      	str	r6, [r3, #20]
 8011760:	6125      	str	r5, [r4, #16]
 8011762:	4620      	mov	r0, r4
 8011764:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011768:	080135e8 	.word	0x080135e8
 801176c:	0801360a 	.word	0x0801360a

08011770 <__hi0bits>:
 8011770:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8011774:	4603      	mov	r3, r0
 8011776:	bf36      	itet	cc
 8011778:	0403      	lslcc	r3, r0, #16
 801177a:	2000      	movcs	r0, #0
 801177c:	2010      	movcc	r0, #16
 801177e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8011782:	bf3c      	itt	cc
 8011784:	021b      	lslcc	r3, r3, #8
 8011786:	3008      	addcc	r0, #8
 8011788:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801178c:	bf3c      	itt	cc
 801178e:	011b      	lslcc	r3, r3, #4
 8011790:	3004      	addcc	r0, #4
 8011792:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011796:	bf3c      	itt	cc
 8011798:	009b      	lslcc	r3, r3, #2
 801179a:	3002      	addcc	r0, #2
 801179c:	2b00      	cmp	r3, #0
 801179e:	db05      	blt.n	80117ac <__hi0bits+0x3c>
 80117a0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80117a4:	f100 0001 	add.w	r0, r0, #1
 80117a8:	bf08      	it	eq
 80117aa:	2020      	moveq	r0, #32
 80117ac:	4770      	bx	lr

080117ae <__lo0bits>:
 80117ae:	6803      	ldr	r3, [r0, #0]
 80117b0:	4602      	mov	r2, r0
 80117b2:	f013 0007 	ands.w	r0, r3, #7
 80117b6:	d00b      	beq.n	80117d0 <__lo0bits+0x22>
 80117b8:	07d9      	lsls	r1, r3, #31
 80117ba:	d421      	bmi.n	8011800 <__lo0bits+0x52>
 80117bc:	0798      	lsls	r0, r3, #30
 80117be:	bf49      	itett	mi
 80117c0:	085b      	lsrmi	r3, r3, #1
 80117c2:	089b      	lsrpl	r3, r3, #2
 80117c4:	2001      	movmi	r0, #1
 80117c6:	6013      	strmi	r3, [r2, #0]
 80117c8:	bf5c      	itt	pl
 80117ca:	6013      	strpl	r3, [r2, #0]
 80117cc:	2002      	movpl	r0, #2
 80117ce:	4770      	bx	lr
 80117d0:	b299      	uxth	r1, r3
 80117d2:	b909      	cbnz	r1, 80117d8 <__lo0bits+0x2a>
 80117d4:	0c1b      	lsrs	r3, r3, #16
 80117d6:	2010      	movs	r0, #16
 80117d8:	b2d9      	uxtb	r1, r3
 80117da:	b909      	cbnz	r1, 80117e0 <__lo0bits+0x32>
 80117dc:	3008      	adds	r0, #8
 80117de:	0a1b      	lsrs	r3, r3, #8
 80117e0:	0719      	lsls	r1, r3, #28
 80117e2:	bf04      	itt	eq
 80117e4:	091b      	lsreq	r3, r3, #4
 80117e6:	3004      	addeq	r0, #4
 80117e8:	0799      	lsls	r1, r3, #30
 80117ea:	bf04      	itt	eq
 80117ec:	089b      	lsreq	r3, r3, #2
 80117ee:	3002      	addeq	r0, #2
 80117f0:	07d9      	lsls	r1, r3, #31
 80117f2:	d403      	bmi.n	80117fc <__lo0bits+0x4e>
 80117f4:	085b      	lsrs	r3, r3, #1
 80117f6:	f100 0001 	add.w	r0, r0, #1
 80117fa:	d003      	beq.n	8011804 <__lo0bits+0x56>
 80117fc:	6013      	str	r3, [r2, #0]
 80117fe:	4770      	bx	lr
 8011800:	2000      	movs	r0, #0
 8011802:	4770      	bx	lr
 8011804:	2020      	movs	r0, #32
 8011806:	4770      	bx	lr

08011808 <__i2b>:
 8011808:	b510      	push	{r4, lr}
 801180a:	460c      	mov	r4, r1
 801180c:	2101      	movs	r1, #1
 801180e:	f7ff ff07 	bl	8011620 <_Balloc>
 8011812:	4602      	mov	r2, r0
 8011814:	b928      	cbnz	r0, 8011822 <__i2b+0x1a>
 8011816:	4b05      	ldr	r3, [pc, #20]	@ (801182c <__i2b+0x24>)
 8011818:	4805      	ldr	r0, [pc, #20]	@ (8011830 <__i2b+0x28>)
 801181a:	f240 1145 	movw	r1, #325	@ 0x145
 801181e:	f000 fb63 	bl	8011ee8 <__assert_func>
 8011822:	2301      	movs	r3, #1
 8011824:	6144      	str	r4, [r0, #20]
 8011826:	6103      	str	r3, [r0, #16]
 8011828:	bd10      	pop	{r4, pc}
 801182a:	bf00      	nop
 801182c:	080135e8 	.word	0x080135e8
 8011830:	0801360a 	.word	0x0801360a

08011834 <__multiply>:
 8011834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011838:	4614      	mov	r4, r2
 801183a:	690a      	ldr	r2, [r1, #16]
 801183c:	6923      	ldr	r3, [r4, #16]
 801183e:	429a      	cmp	r2, r3
 8011840:	bfa8      	it	ge
 8011842:	4623      	movge	r3, r4
 8011844:	460f      	mov	r7, r1
 8011846:	bfa4      	itt	ge
 8011848:	460c      	movge	r4, r1
 801184a:	461f      	movge	r7, r3
 801184c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8011850:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8011854:	68a3      	ldr	r3, [r4, #8]
 8011856:	6861      	ldr	r1, [r4, #4]
 8011858:	eb0a 0609 	add.w	r6, sl, r9
 801185c:	42b3      	cmp	r3, r6
 801185e:	b085      	sub	sp, #20
 8011860:	bfb8      	it	lt
 8011862:	3101      	addlt	r1, #1
 8011864:	f7ff fedc 	bl	8011620 <_Balloc>
 8011868:	b930      	cbnz	r0, 8011878 <__multiply+0x44>
 801186a:	4602      	mov	r2, r0
 801186c:	4b44      	ldr	r3, [pc, #272]	@ (8011980 <__multiply+0x14c>)
 801186e:	4845      	ldr	r0, [pc, #276]	@ (8011984 <__multiply+0x150>)
 8011870:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8011874:	f000 fb38 	bl	8011ee8 <__assert_func>
 8011878:	f100 0514 	add.w	r5, r0, #20
 801187c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011880:	462b      	mov	r3, r5
 8011882:	2200      	movs	r2, #0
 8011884:	4543      	cmp	r3, r8
 8011886:	d321      	bcc.n	80118cc <__multiply+0x98>
 8011888:	f107 0114 	add.w	r1, r7, #20
 801188c:	f104 0214 	add.w	r2, r4, #20
 8011890:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8011894:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8011898:	9302      	str	r3, [sp, #8]
 801189a:	1b13      	subs	r3, r2, r4
 801189c:	3b15      	subs	r3, #21
 801189e:	f023 0303 	bic.w	r3, r3, #3
 80118a2:	3304      	adds	r3, #4
 80118a4:	f104 0715 	add.w	r7, r4, #21
 80118a8:	42ba      	cmp	r2, r7
 80118aa:	bf38      	it	cc
 80118ac:	2304      	movcc	r3, #4
 80118ae:	9301      	str	r3, [sp, #4]
 80118b0:	9b02      	ldr	r3, [sp, #8]
 80118b2:	9103      	str	r1, [sp, #12]
 80118b4:	428b      	cmp	r3, r1
 80118b6:	d80c      	bhi.n	80118d2 <__multiply+0x9e>
 80118b8:	2e00      	cmp	r6, #0
 80118ba:	dd03      	ble.n	80118c4 <__multiply+0x90>
 80118bc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80118c0:	2b00      	cmp	r3, #0
 80118c2:	d05b      	beq.n	801197c <__multiply+0x148>
 80118c4:	6106      	str	r6, [r0, #16]
 80118c6:	b005      	add	sp, #20
 80118c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80118cc:	f843 2b04 	str.w	r2, [r3], #4
 80118d0:	e7d8      	b.n	8011884 <__multiply+0x50>
 80118d2:	f8b1 a000 	ldrh.w	sl, [r1]
 80118d6:	f1ba 0f00 	cmp.w	sl, #0
 80118da:	d024      	beq.n	8011926 <__multiply+0xf2>
 80118dc:	f104 0e14 	add.w	lr, r4, #20
 80118e0:	46a9      	mov	r9, r5
 80118e2:	f04f 0c00 	mov.w	ip, #0
 80118e6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80118ea:	f8d9 3000 	ldr.w	r3, [r9]
 80118ee:	fa1f fb87 	uxth.w	fp, r7
 80118f2:	b29b      	uxth	r3, r3
 80118f4:	fb0a 330b 	mla	r3, sl, fp, r3
 80118f8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80118fc:	f8d9 7000 	ldr.w	r7, [r9]
 8011900:	4463      	add	r3, ip
 8011902:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8011906:	fb0a c70b 	mla	r7, sl, fp, ip
 801190a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801190e:	b29b      	uxth	r3, r3
 8011910:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8011914:	4572      	cmp	r2, lr
 8011916:	f849 3b04 	str.w	r3, [r9], #4
 801191a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801191e:	d8e2      	bhi.n	80118e6 <__multiply+0xb2>
 8011920:	9b01      	ldr	r3, [sp, #4]
 8011922:	f845 c003 	str.w	ip, [r5, r3]
 8011926:	9b03      	ldr	r3, [sp, #12]
 8011928:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801192c:	3104      	adds	r1, #4
 801192e:	f1b9 0f00 	cmp.w	r9, #0
 8011932:	d021      	beq.n	8011978 <__multiply+0x144>
 8011934:	682b      	ldr	r3, [r5, #0]
 8011936:	f104 0c14 	add.w	ip, r4, #20
 801193a:	46ae      	mov	lr, r5
 801193c:	f04f 0a00 	mov.w	sl, #0
 8011940:	f8bc b000 	ldrh.w	fp, [ip]
 8011944:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8011948:	fb09 770b 	mla	r7, r9, fp, r7
 801194c:	4457      	add	r7, sl
 801194e:	b29b      	uxth	r3, r3
 8011950:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8011954:	f84e 3b04 	str.w	r3, [lr], #4
 8011958:	f85c 3b04 	ldr.w	r3, [ip], #4
 801195c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011960:	f8be 3000 	ldrh.w	r3, [lr]
 8011964:	fb09 330a 	mla	r3, r9, sl, r3
 8011968:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801196c:	4562      	cmp	r2, ip
 801196e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011972:	d8e5      	bhi.n	8011940 <__multiply+0x10c>
 8011974:	9f01      	ldr	r7, [sp, #4]
 8011976:	51eb      	str	r3, [r5, r7]
 8011978:	3504      	adds	r5, #4
 801197a:	e799      	b.n	80118b0 <__multiply+0x7c>
 801197c:	3e01      	subs	r6, #1
 801197e:	e79b      	b.n	80118b8 <__multiply+0x84>
 8011980:	080135e8 	.word	0x080135e8
 8011984:	0801360a 	.word	0x0801360a

08011988 <__pow5mult>:
 8011988:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801198c:	4615      	mov	r5, r2
 801198e:	f012 0203 	ands.w	r2, r2, #3
 8011992:	4607      	mov	r7, r0
 8011994:	460e      	mov	r6, r1
 8011996:	d007      	beq.n	80119a8 <__pow5mult+0x20>
 8011998:	4c25      	ldr	r4, [pc, #148]	@ (8011a30 <__pow5mult+0xa8>)
 801199a:	3a01      	subs	r2, #1
 801199c:	2300      	movs	r3, #0
 801199e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80119a2:	f7ff fe9f 	bl	80116e4 <__multadd>
 80119a6:	4606      	mov	r6, r0
 80119a8:	10ad      	asrs	r5, r5, #2
 80119aa:	d03d      	beq.n	8011a28 <__pow5mult+0xa0>
 80119ac:	69fc      	ldr	r4, [r7, #28]
 80119ae:	b97c      	cbnz	r4, 80119d0 <__pow5mult+0x48>
 80119b0:	2010      	movs	r0, #16
 80119b2:	f7ff fcd3 	bl	801135c <malloc>
 80119b6:	4602      	mov	r2, r0
 80119b8:	61f8      	str	r0, [r7, #28]
 80119ba:	b928      	cbnz	r0, 80119c8 <__pow5mult+0x40>
 80119bc:	4b1d      	ldr	r3, [pc, #116]	@ (8011a34 <__pow5mult+0xac>)
 80119be:	481e      	ldr	r0, [pc, #120]	@ (8011a38 <__pow5mult+0xb0>)
 80119c0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80119c4:	f000 fa90 	bl	8011ee8 <__assert_func>
 80119c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80119cc:	6004      	str	r4, [r0, #0]
 80119ce:	60c4      	str	r4, [r0, #12]
 80119d0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80119d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80119d8:	b94c      	cbnz	r4, 80119ee <__pow5mult+0x66>
 80119da:	f240 2171 	movw	r1, #625	@ 0x271
 80119de:	4638      	mov	r0, r7
 80119e0:	f7ff ff12 	bl	8011808 <__i2b>
 80119e4:	2300      	movs	r3, #0
 80119e6:	f8c8 0008 	str.w	r0, [r8, #8]
 80119ea:	4604      	mov	r4, r0
 80119ec:	6003      	str	r3, [r0, #0]
 80119ee:	f04f 0900 	mov.w	r9, #0
 80119f2:	07eb      	lsls	r3, r5, #31
 80119f4:	d50a      	bpl.n	8011a0c <__pow5mult+0x84>
 80119f6:	4631      	mov	r1, r6
 80119f8:	4622      	mov	r2, r4
 80119fa:	4638      	mov	r0, r7
 80119fc:	f7ff ff1a 	bl	8011834 <__multiply>
 8011a00:	4631      	mov	r1, r6
 8011a02:	4680      	mov	r8, r0
 8011a04:	4638      	mov	r0, r7
 8011a06:	f7ff fe4b 	bl	80116a0 <_Bfree>
 8011a0a:	4646      	mov	r6, r8
 8011a0c:	106d      	asrs	r5, r5, #1
 8011a0e:	d00b      	beq.n	8011a28 <__pow5mult+0xa0>
 8011a10:	6820      	ldr	r0, [r4, #0]
 8011a12:	b938      	cbnz	r0, 8011a24 <__pow5mult+0x9c>
 8011a14:	4622      	mov	r2, r4
 8011a16:	4621      	mov	r1, r4
 8011a18:	4638      	mov	r0, r7
 8011a1a:	f7ff ff0b 	bl	8011834 <__multiply>
 8011a1e:	6020      	str	r0, [r4, #0]
 8011a20:	f8c0 9000 	str.w	r9, [r0]
 8011a24:	4604      	mov	r4, r0
 8011a26:	e7e4      	b.n	80119f2 <__pow5mult+0x6a>
 8011a28:	4630      	mov	r0, r6
 8011a2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011a2e:	bf00      	nop
 8011a30:	08013664 	.word	0x08013664
 8011a34:	08013579 	.word	0x08013579
 8011a38:	0801360a 	.word	0x0801360a

08011a3c <__lshift>:
 8011a3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011a40:	460c      	mov	r4, r1
 8011a42:	6849      	ldr	r1, [r1, #4]
 8011a44:	6923      	ldr	r3, [r4, #16]
 8011a46:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011a4a:	68a3      	ldr	r3, [r4, #8]
 8011a4c:	4607      	mov	r7, r0
 8011a4e:	4691      	mov	r9, r2
 8011a50:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011a54:	f108 0601 	add.w	r6, r8, #1
 8011a58:	42b3      	cmp	r3, r6
 8011a5a:	db0b      	blt.n	8011a74 <__lshift+0x38>
 8011a5c:	4638      	mov	r0, r7
 8011a5e:	f7ff fddf 	bl	8011620 <_Balloc>
 8011a62:	4605      	mov	r5, r0
 8011a64:	b948      	cbnz	r0, 8011a7a <__lshift+0x3e>
 8011a66:	4602      	mov	r2, r0
 8011a68:	4b28      	ldr	r3, [pc, #160]	@ (8011b0c <__lshift+0xd0>)
 8011a6a:	4829      	ldr	r0, [pc, #164]	@ (8011b10 <__lshift+0xd4>)
 8011a6c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8011a70:	f000 fa3a 	bl	8011ee8 <__assert_func>
 8011a74:	3101      	adds	r1, #1
 8011a76:	005b      	lsls	r3, r3, #1
 8011a78:	e7ee      	b.n	8011a58 <__lshift+0x1c>
 8011a7a:	2300      	movs	r3, #0
 8011a7c:	f100 0114 	add.w	r1, r0, #20
 8011a80:	f100 0210 	add.w	r2, r0, #16
 8011a84:	4618      	mov	r0, r3
 8011a86:	4553      	cmp	r3, sl
 8011a88:	db33      	blt.n	8011af2 <__lshift+0xb6>
 8011a8a:	6920      	ldr	r0, [r4, #16]
 8011a8c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011a90:	f104 0314 	add.w	r3, r4, #20
 8011a94:	f019 091f 	ands.w	r9, r9, #31
 8011a98:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011a9c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011aa0:	d02b      	beq.n	8011afa <__lshift+0xbe>
 8011aa2:	f1c9 0e20 	rsb	lr, r9, #32
 8011aa6:	468a      	mov	sl, r1
 8011aa8:	2200      	movs	r2, #0
 8011aaa:	6818      	ldr	r0, [r3, #0]
 8011aac:	fa00 f009 	lsl.w	r0, r0, r9
 8011ab0:	4310      	orrs	r0, r2
 8011ab2:	f84a 0b04 	str.w	r0, [sl], #4
 8011ab6:	f853 2b04 	ldr.w	r2, [r3], #4
 8011aba:	459c      	cmp	ip, r3
 8011abc:	fa22 f20e 	lsr.w	r2, r2, lr
 8011ac0:	d8f3      	bhi.n	8011aaa <__lshift+0x6e>
 8011ac2:	ebac 0304 	sub.w	r3, ip, r4
 8011ac6:	3b15      	subs	r3, #21
 8011ac8:	f023 0303 	bic.w	r3, r3, #3
 8011acc:	3304      	adds	r3, #4
 8011ace:	f104 0015 	add.w	r0, r4, #21
 8011ad2:	4584      	cmp	ip, r0
 8011ad4:	bf38      	it	cc
 8011ad6:	2304      	movcc	r3, #4
 8011ad8:	50ca      	str	r2, [r1, r3]
 8011ada:	b10a      	cbz	r2, 8011ae0 <__lshift+0xa4>
 8011adc:	f108 0602 	add.w	r6, r8, #2
 8011ae0:	3e01      	subs	r6, #1
 8011ae2:	4638      	mov	r0, r7
 8011ae4:	612e      	str	r6, [r5, #16]
 8011ae6:	4621      	mov	r1, r4
 8011ae8:	f7ff fdda 	bl	80116a0 <_Bfree>
 8011aec:	4628      	mov	r0, r5
 8011aee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011af2:	f842 0f04 	str.w	r0, [r2, #4]!
 8011af6:	3301      	adds	r3, #1
 8011af8:	e7c5      	b.n	8011a86 <__lshift+0x4a>
 8011afa:	3904      	subs	r1, #4
 8011afc:	f853 2b04 	ldr.w	r2, [r3], #4
 8011b00:	f841 2f04 	str.w	r2, [r1, #4]!
 8011b04:	459c      	cmp	ip, r3
 8011b06:	d8f9      	bhi.n	8011afc <__lshift+0xc0>
 8011b08:	e7ea      	b.n	8011ae0 <__lshift+0xa4>
 8011b0a:	bf00      	nop
 8011b0c:	080135e8 	.word	0x080135e8
 8011b10:	0801360a 	.word	0x0801360a

08011b14 <__mcmp>:
 8011b14:	690a      	ldr	r2, [r1, #16]
 8011b16:	4603      	mov	r3, r0
 8011b18:	6900      	ldr	r0, [r0, #16]
 8011b1a:	1a80      	subs	r0, r0, r2
 8011b1c:	b530      	push	{r4, r5, lr}
 8011b1e:	d10e      	bne.n	8011b3e <__mcmp+0x2a>
 8011b20:	3314      	adds	r3, #20
 8011b22:	3114      	adds	r1, #20
 8011b24:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8011b28:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8011b2c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011b30:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8011b34:	4295      	cmp	r5, r2
 8011b36:	d003      	beq.n	8011b40 <__mcmp+0x2c>
 8011b38:	d205      	bcs.n	8011b46 <__mcmp+0x32>
 8011b3a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011b3e:	bd30      	pop	{r4, r5, pc}
 8011b40:	42a3      	cmp	r3, r4
 8011b42:	d3f3      	bcc.n	8011b2c <__mcmp+0x18>
 8011b44:	e7fb      	b.n	8011b3e <__mcmp+0x2a>
 8011b46:	2001      	movs	r0, #1
 8011b48:	e7f9      	b.n	8011b3e <__mcmp+0x2a>
	...

08011b4c <__mdiff>:
 8011b4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b50:	4689      	mov	r9, r1
 8011b52:	4606      	mov	r6, r0
 8011b54:	4611      	mov	r1, r2
 8011b56:	4648      	mov	r0, r9
 8011b58:	4614      	mov	r4, r2
 8011b5a:	f7ff ffdb 	bl	8011b14 <__mcmp>
 8011b5e:	1e05      	subs	r5, r0, #0
 8011b60:	d112      	bne.n	8011b88 <__mdiff+0x3c>
 8011b62:	4629      	mov	r1, r5
 8011b64:	4630      	mov	r0, r6
 8011b66:	f7ff fd5b 	bl	8011620 <_Balloc>
 8011b6a:	4602      	mov	r2, r0
 8011b6c:	b928      	cbnz	r0, 8011b7a <__mdiff+0x2e>
 8011b6e:	4b3f      	ldr	r3, [pc, #252]	@ (8011c6c <__mdiff+0x120>)
 8011b70:	f240 2137 	movw	r1, #567	@ 0x237
 8011b74:	483e      	ldr	r0, [pc, #248]	@ (8011c70 <__mdiff+0x124>)
 8011b76:	f000 f9b7 	bl	8011ee8 <__assert_func>
 8011b7a:	2301      	movs	r3, #1
 8011b7c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011b80:	4610      	mov	r0, r2
 8011b82:	b003      	add	sp, #12
 8011b84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b88:	bfbc      	itt	lt
 8011b8a:	464b      	movlt	r3, r9
 8011b8c:	46a1      	movlt	r9, r4
 8011b8e:	4630      	mov	r0, r6
 8011b90:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8011b94:	bfba      	itte	lt
 8011b96:	461c      	movlt	r4, r3
 8011b98:	2501      	movlt	r5, #1
 8011b9a:	2500      	movge	r5, #0
 8011b9c:	f7ff fd40 	bl	8011620 <_Balloc>
 8011ba0:	4602      	mov	r2, r0
 8011ba2:	b918      	cbnz	r0, 8011bac <__mdiff+0x60>
 8011ba4:	4b31      	ldr	r3, [pc, #196]	@ (8011c6c <__mdiff+0x120>)
 8011ba6:	f240 2145 	movw	r1, #581	@ 0x245
 8011baa:	e7e3      	b.n	8011b74 <__mdiff+0x28>
 8011bac:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8011bb0:	6926      	ldr	r6, [r4, #16]
 8011bb2:	60c5      	str	r5, [r0, #12]
 8011bb4:	f109 0310 	add.w	r3, r9, #16
 8011bb8:	f109 0514 	add.w	r5, r9, #20
 8011bbc:	f104 0e14 	add.w	lr, r4, #20
 8011bc0:	f100 0b14 	add.w	fp, r0, #20
 8011bc4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8011bc8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8011bcc:	9301      	str	r3, [sp, #4]
 8011bce:	46d9      	mov	r9, fp
 8011bd0:	f04f 0c00 	mov.w	ip, #0
 8011bd4:	9b01      	ldr	r3, [sp, #4]
 8011bd6:	f85e 0b04 	ldr.w	r0, [lr], #4
 8011bda:	f853 af04 	ldr.w	sl, [r3, #4]!
 8011bde:	9301      	str	r3, [sp, #4]
 8011be0:	fa1f f38a 	uxth.w	r3, sl
 8011be4:	4619      	mov	r1, r3
 8011be6:	b283      	uxth	r3, r0
 8011be8:	1acb      	subs	r3, r1, r3
 8011bea:	0c00      	lsrs	r0, r0, #16
 8011bec:	4463      	add	r3, ip
 8011bee:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8011bf2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8011bf6:	b29b      	uxth	r3, r3
 8011bf8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8011bfc:	4576      	cmp	r6, lr
 8011bfe:	f849 3b04 	str.w	r3, [r9], #4
 8011c02:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011c06:	d8e5      	bhi.n	8011bd4 <__mdiff+0x88>
 8011c08:	1b33      	subs	r3, r6, r4
 8011c0a:	3b15      	subs	r3, #21
 8011c0c:	f023 0303 	bic.w	r3, r3, #3
 8011c10:	3415      	adds	r4, #21
 8011c12:	3304      	adds	r3, #4
 8011c14:	42a6      	cmp	r6, r4
 8011c16:	bf38      	it	cc
 8011c18:	2304      	movcc	r3, #4
 8011c1a:	441d      	add	r5, r3
 8011c1c:	445b      	add	r3, fp
 8011c1e:	461e      	mov	r6, r3
 8011c20:	462c      	mov	r4, r5
 8011c22:	4544      	cmp	r4, r8
 8011c24:	d30e      	bcc.n	8011c44 <__mdiff+0xf8>
 8011c26:	f108 0103 	add.w	r1, r8, #3
 8011c2a:	1b49      	subs	r1, r1, r5
 8011c2c:	f021 0103 	bic.w	r1, r1, #3
 8011c30:	3d03      	subs	r5, #3
 8011c32:	45a8      	cmp	r8, r5
 8011c34:	bf38      	it	cc
 8011c36:	2100      	movcc	r1, #0
 8011c38:	440b      	add	r3, r1
 8011c3a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011c3e:	b191      	cbz	r1, 8011c66 <__mdiff+0x11a>
 8011c40:	6117      	str	r7, [r2, #16]
 8011c42:	e79d      	b.n	8011b80 <__mdiff+0x34>
 8011c44:	f854 1b04 	ldr.w	r1, [r4], #4
 8011c48:	46e6      	mov	lr, ip
 8011c4a:	0c08      	lsrs	r0, r1, #16
 8011c4c:	fa1c fc81 	uxtah	ip, ip, r1
 8011c50:	4471      	add	r1, lr
 8011c52:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8011c56:	b289      	uxth	r1, r1
 8011c58:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8011c5c:	f846 1b04 	str.w	r1, [r6], #4
 8011c60:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011c64:	e7dd      	b.n	8011c22 <__mdiff+0xd6>
 8011c66:	3f01      	subs	r7, #1
 8011c68:	e7e7      	b.n	8011c3a <__mdiff+0xee>
 8011c6a:	bf00      	nop
 8011c6c:	080135e8 	.word	0x080135e8
 8011c70:	0801360a 	.word	0x0801360a

08011c74 <__d2b>:
 8011c74:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011c78:	460f      	mov	r7, r1
 8011c7a:	2101      	movs	r1, #1
 8011c7c:	ec59 8b10 	vmov	r8, r9, d0
 8011c80:	4616      	mov	r6, r2
 8011c82:	f7ff fccd 	bl	8011620 <_Balloc>
 8011c86:	4604      	mov	r4, r0
 8011c88:	b930      	cbnz	r0, 8011c98 <__d2b+0x24>
 8011c8a:	4602      	mov	r2, r0
 8011c8c:	4b23      	ldr	r3, [pc, #140]	@ (8011d1c <__d2b+0xa8>)
 8011c8e:	4824      	ldr	r0, [pc, #144]	@ (8011d20 <__d2b+0xac>)
 8011c90:	f240 310f 	movw	r1, #783	@ 0x30f
 8011c94:	f000 f928 	bl	8011ee8 <__assert_func>
 8011c98:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011c9c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011ca0:	b10d      	cbz	r5, 8011ca6 <__d2b+0x32>
 8011ca2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8011ca6:	9301      	str	r3, [sp, #4]
 8011ca8:	f1b8 0300 	subs.w	r3, r8, #0
 8011cac:	d023      	beq.n	8011cf6 <__d2b+0x82>
 8011cae:	4668      	mov	r0, sp
 8011cb0:	9300      	str	r3, [sp, #0]
 8011cb2:	f7ff fd7c 	bl	80117ae <__lo0bits>
 8011cb6:	e9dd 1200 	ldrd	r1, r2, [sp]
 8011cba:	b1d0      	cbz	r0, 8011cf2 <__d2b+0x7e>
 8011cbc:	f1c0 0320 	rsb	r3, r0, #32
 8011cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8011cc4:	430b      	orrs	r3, r1
 8011cc6:	40c2      	lsrs	r2, r0
 8011cc8:	6163      	str	r3, [r4, #20]
 8011cca:	9201      	str	r2, [sp, #4]
 8011ccc:	9b01      	ldr	r3, [sp, #4]
 8011cce:	61a3      	str	r3, [r4, #24]
 8011cd0:	2b00      	cmp	r3, #0
 8011cd2:	bf0c      	ite	eq
 8011cd4:	2201      	moveq	r2, #1
 8011cd6:	2202      	movne	r2, #2
 8011cd8:	6122      	str	r2, [r4, #16]
 8011cda:	b1a5      	cbz	r5, 8011d06 <__d2b+0x92>
 8011cdc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8011ce0:	4405      	add	r5, r0
 8011ce2:	603d      	str	r5, [r7, #0]
 8011ce4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8011ce8:	6030      	str	r0, [r6, #0]
 8011cea:	4620      	mov	r0, r4
 8011cec:	b003      	add	sp, #12
 8011cee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011cf2:	6161      	str	r1, [r4, #20]
 8011cf4:	e7ea      	b.n	8011ccc <__d2b+0x58>
 8011cf6:	a801      	add	r0, sp, #4
 8011cf8:	f7ff fd59 	bl	80117ae <__lo0bits>
 8011cfc:	9b01      	ldr	r3, [sp, #4]
 8011cfe:	6163      	str	r3, [r4, #20]
 8011d00:	3020      	adds	r0, #32
 8011d02:	2201      	movs	r2, #1
 8011d04:	e7e8      	b.n	8011cd8 <__d2b+0x64>
 8011d06:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011d0a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8011d0e:	6038      	str	r0, [r7, #0]
 8011d10:	6918      	ldr	r0, [r3, #16]
 8011d12:	f7ff fd2d 	bl	8011770 <__hi0bits>
 8011d16:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011d1a:	e7e5      	b.n	8011ce8 <__d2b+0x74>
 8011d1c:	080135e8 	.word	0x080135e8
 8011d20:	0801360a 	.word	0x0801360a

08011d24 <__sread>:
 8011d24:	b510      	push	{r4, lr}
 8011d26:	460c      	mov	r4, r1
 8011d28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011d2c:	f000 f8a8 	bl	8011e80 <_read_r>
 8011d30:	2800      	cmp	r0, #0
 8011d32:	bfab      	itete	ge
 8011d34:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8011d36:	89a3      	ldrhlt	r3, [r4, #12]
 8011d38:	181b      	addge	r3, r3, r0
 8011d3a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8011d3e:	bfac      	ite	ge
 8011d40:	6563      	strge	r3, [r4, #84]	@ 0x54
 8011d42:	81a3      	strhlt	r3, [r4, #12]
 8011d44:	bd10      	pop	{r4, pc}

08011d46 <__swrite>:
 8011d46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d4a:	461f      	mov	r7, r3
 8011d4c:	898b      	ldrh	r3, [r1, #12]
 8011d4e:	05db      	lsls	r3, r3, #23
 8011d50:	4605      	mov	r5, r0
 8011d52:	460c      	mov	r4, r1
 8011d54:	4616      	mov	r6, r2
 8011d56:	d505      	bpl.n	8011d64 <__swrite+0x1e>
 8011d58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011d5c:	2302      	movs	r3, #2
 8011d5e:	2200      	movs	r2, #0
 8011d60:	f000 f87c 	bl	8011e5c <_lseek_r>
 8011d64:	89a3      	ldrh	r3, [r4, #12]
 8011d66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011d6a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8011d6e:	81a3      	strh	r3, [r4, #12]
 8011d70:	4632      	mov	r2, r6
 8011d72:	463b      	mov	r3, r7
 8011d74:	4628      	mov	r0, r5
 8011d76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011d7a:	f000 b8a3 	b.w	8011ec4 <_write_r>

08011d7e <__sseek>:
 8011d7e:	b510      	push	{r4, lr}
 8011d80:	460c      	mov	r4, r1
 8011d82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011d86:	f000 f869 	bl	8011e5c <_lseek_r>
 8011d8a:	1c43      	adds	r3, r0, #1
 8011d8c:	89a3      	ldrh	r3, [r4, #12]
 8011d8e:	bf15      	itete	ne
 8011d90:	6560      	strne	r0, [r4, #84]	@ 0x54
 8011d92:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8011d96:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8011d9a:	81a3      	strheq	r3, [r4, #12]
 8011d9c:	bf18      	it	ne
 8011d9e:	81a3      	strhne	r3, [r4, #12]
 8011da0:	bd10      	pop	{r4, pc}

08011da2 <__sclose>:
 8011da2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011da6:	f000 b849 	b.w	8011e3c <_close_r>

08011daa <_realloc_r>:
 8011daa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011dae:	4680      	mov	r8, r0
 8011db0:	4615      	mov	r5, r2
 8011db2:	460c      	mov	r4, r1
 8011db4:	b921      	cbnz	r1, 8011dc0 <_realloc_r+0x16>
 8011db6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011dba:	4611      	mov	r1, r2
 8011dbc:	f7ff baf8 	b.w	80113b0 <_malloc_r>
 8011dc0:	b92a      	cbnz	r2, 8011dce <_realloc_r+0x24>
 8011dc2:	f7ff f929 	bl	8011018 <_free_r>
 8011dc6:	2400      	movs	r4, #0
 8011dc8:	4620      	mov	r0, r4
 8011dca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011dce:	f000 f8cf 	bl	8011f70 <_malloc_usable_size_r>
 8011dd2:	4285      	cmp	r5, r0
 8011dd4:	4606      	mov	r6, r0
 8011dd6:	d802      	bhi.n	8011dde <_realloc_r+0x34>
 8011dd8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8011ddc:	d8f4      	bhi.n	8011dc8 <_realloc_r+0x1e>
 8011dde:	4629      	mov	r1, r5
 8011de0:	4640      	mov	r0, r8
 8011de2:	f7ff fae5 	bl	80113b0 <_malloc_r>
 8011de6:	4607      	mov	r7, r0
 8011de8:	2800      	cmp	r0, #0
 8011dea:	d0ec      	beq.n	8011dc6 <_realloc_r+0x1c>
 8011dec:	42b5      	cmp	r5, r6
 8011dee:	462a      	mov	r2, r5
 8011df0:	4621      	mov	r1, r4
 8011df2:	bf28      	it	cs
 8011df4:	4632      	movcs	r2, r6
 8011df6:	f7fe fab4 	bl	8010362 <memcpy>
 8011dfa:	4621      	mov	r1, r4
 8011dfc:	4640      	mov	r0, r8
 8011dfe:	f7ff f90b 	bl	8011018 <_free_r>
 8011e02:	463c      	mov	r4, r7
 8011e04:	e7e0      	b.n	8011dc8 <_realloc_r+0x1e>

08011e06 <memmove>:
 8011e06:	4288      	cmp	r0, r1
 8011e08:	b510      	push	{r4, lr}
 8011e0a:	eb01 0402 	add.w	r4, r1, r2
 8011e0e:	d902      	bls.n	8011e16 <memmove+0x10>
 8011e10:	4284      	cmp	r4, r0
 8011e12:	4623      	mov	r3, r4
 8011e14:	d807      	bhi.n	8011e26 <memmove+0x20>
 8011e16:	1e43      	subs	r3, r0, #1
 8011e18:	42a1      	cmp	r1, r4
 8011e1a:	d008      	beq.n	8011e2e <memmove+0x28>
 8011e1c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011e20:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011e24:	e7f8      	b.n	8011e18 <memmove+0x12>
 8011e26:	4402      	add	r2, r0
 8011e28:	4601      	mov	r1, r0
 8011e2a:	428a      	cmp	r2, r1
 8011e2c:	d100      	bne.n	8011e30 <memmove+0x2a>
 8011e2e:	bd10      	pop	{r4, pc}
 8011e30:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011e34:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011e38:	e7f7      	b.n	8011e2a <memmove+0x24>
	...

08011e3c <_close_r>:
 8011e3c:	b538      	push	{r3, r4, r5, lr}
 8011e3e:	4d06      	ldr	r5, [pc, #24]	@ (8011e58 <_close_r+0x1c>)
 8011e40:	2300      	movs	r3, #0
 8011e42:	4604      	mov	r4, r0
 8011e44:	4608      	mov	r0, r1
 8011e46:	602b      	str	r3, [r5, #0]
 8011e48:	f7f1 faec 	bl	8003424 <_close>
 8011e4c:	1c43      	adds	r3, r0, #1
 8011e4e:	d102      	bne.n	8011e56 <_close_r+0x1a>
 8011e50:	682b      	ldr	r3, [r5, #0]
 8011e52:	b103      	cbz	r3, 8011e56 <_close_r+0x1a>
 8011e54:	6023      	str	r3, [r4, #0]
 8011e56:	bd38      	pop	{r3, r4, r5, pc}
 8011e58:	20012934 	.word	0x20012934

08011e5c <_lseek_r>:
 8011e5c:	b538      	push	{r3, r4, r5, lr}
 8011e5e:	4d07      	ldr	r5, [pc, #28]	@ (8011e7c <_lseek_r+0x20>)
 8011e60:	4604      	mov	r4, r0
 8011e62:	4608      	mov	r0, r1
 8011e64:	4611      	mov	r1, r2
 8011e66:	2200      	movs	r2, #0
 8011e68:	602a      	str	r2, [r5, #0]
 8011e6a:	461a      	mov	r2, r3
 8011e6c:	f7f1 fb01 	bl	8003472 <_lseek>
 8011e70:	1c43      	adds	r3, r0, #1
 8011e72:	d102      	bne.n	8011e7a <_lseek_r+0x1e>
 8011e74:	682b      	ldr	r3, [r5, #0]
 8011e76:	b103      	cbz	r3, 8011e7a <_lseek_r+0x1e>
 8011e78:	6023      	str	r3, [r4, #0]
 8011e7a:	bd38      	pop	{r3, r4, r5, pc}
 8011e7c:	20012934 	.word	0x20012934

08011e80 <_read_r>:
 8011e80:	b538      	push	{r3, r4, r5, lr}
 8011e82:	4d07      	ldr	r5, [pc, #28]	@ (8011ea0 <_read_r+0x20>)
 8011e84:	4604      	mov	r4, r0
 8011e86:	4608      	mov	r0, r1
 8011e88:	4611      	mov	r1, r2
 8011e8a:	2200      	movs	r2, #0
 8011e8c:	602a      	str	r2, [r5, #0]
 8011e8e:	461a      	mov	r2, r3
 8011e90:	f7f1 fa8f 	bl	80033b2 <_read>
 8011e94:	1c43      	adds	r3, r0, #1
 8011e96:	d102      	bne.n	8011e9e <_read_r+0x1e>
 8011e98:	682b      	ldr	r3, [r5, #0]
 8011e9a:	b103      	cbz	r3, 8011e9e <_read_r+0x1e>
 8011e9c:	6023      	str	r3, [r4, #0]
 8011e9e:	bd38      	pop	{r3, r4, r5, pc}
 8011ea0:	20012934 	.word	0x20012934

08011ea4 <_sbrk_r>:
 8011ea4:	b538      	push	{r3, r4, r5, lr}
 8011ea6:	4d06      	ldr	r5, [pc, #24]	@ (8011ec0 <_sbrk_r+0x1c>)
 8011ea8:	2300      	movs	r3, #0
 8011eaa:	4604      	mov	r4, r0
 8011eac:	4608      	mov	r0, r1
 8011eae:	602b      	str	r3, [r5, #0]
 8011eb0:	f7f1 faec 	bl	800348c <_sbrk>
 8011eb4:	1c43      	adds	r3, r0, #1
 8011eb6:	d102      	bne.n	8011ebe <_sbrk_r+0x1a>
 8011eb8:	682b      	ldr	r3, [r5, #0]
 8011eba:	b103      	cbz	r3, 8011ebe <_sbrk_r+0x1a>
 8011ebc:	6023      	str	r3, [r4, #0]
 8011ebe:	bd38      	pop	{r3, r4, r5, pc}
 8011ec0:	20012934 	.word	0x20012934

08011ec4 <_write_r>:
 8011ec4:	b538      	push	{r3, r4, r5, lr}
 8011ec6:	4d07      	ldr	r5, [pc, #28]	@ (8011ee4 <_write_r+0x20>)
 8011ec8:	4604      	mov	r4, r0
 8011eca:	4608      	mov	r0, r1
 8011ecc:	4611      	mov	r1, r2
 8011ece:	2200      	movs	r2, #0
 8011ed0:	602a      	str	r2, [r5, #0]
 8011ed2:	461a      	mov	r2, r3
 8011ed4:	f7f1 fa8a 	bl	80033ec <_write>
 8011ed8:	1c43      	adds	r3, r0, #1
 8011eda:	d102      	bne.n	8011ee2 <_write_r+0x1e>
 8011edc:	682b      	ldr	r3, [r5, #0]
 8011ede:	b103      	cbz	r3, 8011ee2 <_write_r+0x1e>
 8011ee0:	6023      	str	r3, [r4, #0]
 8011ee2:	bd38      	pop	{r3, r4, r5, pc}
 8011ee4:	20012934 	.word	0x20012934

08011ee8 <__assert_func>:
 8011ee8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011eea:	4614      	mov	r4, r2
 8011eec:	461a      	mov	r2, r3
 8011eee:	4b09      	ldr	r3, [pc, #36]	@ (8011f14 <__assert_func+0x2c>)
 8011ef0:	681b      	ldr	r3, [r3, #0]
 8011ef2:	4605      	mov	r5, r0
 8011ef4:	68d8      	ldr	r0, [r3, #12]
 8011ef6:	b954      	cbnz	r4, 8011f0e <__assert_func+0x26>
 8011ef8:	4b07      	ldr	r3, [pc, #28]	@ (8011f18 <__assert_func+0x30>)
 8011efa:	461c      	mov	r4, r3
 8011efc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011f00:	9100      	str	r1, [sp, #0]
 8011f02:	462b      	mov	r3, r5
 8011f04:	4905      	ldr	r1, [pc, #20]	@ (8011f1c <__assert_func+0x34>)
 8011f06:	f000 f83b 	bl	8011f80 <fiprintf>
 8011f0a:	f000 f858 	bl	8011fbe <abort>
 8011f0e:	4b04      	ldr	r3, [pc, #16]	@ (8011f20 <__assert_func+0x38>)
 8011f10:	e7f4      	b.n	8011efc <__assert_func+0x14>
 8011f12:	bf00      	nop
 8011f14:	200001b4 	.word	0x200001b4
 8011f18:	080138a6 	.word	0x080138a6
 8011f1c:	08013878 	.word	0x08013878
 8011f20:	0801386b 	.word	0x0801386b

08011f24 <_calloc_r>:
 8011f24:	b570      	push	{r4, r5, r6, lr}
 8011f26:	fba1 5402 	umull	r5, r4, r1, r2
 8011f2a:	b93c      	cbnz	r4, 8011f3c <_calloc_r+0x18>
 8011f2c:	4629      	mov	r1, r5
 8011f2e:	f7ff fa3f 	bl	80113b0 <_malloc_r>
 8011f32:	4606      	mov	r6, r0
 8011f34:	b928      	cbnz	r0, 8011f42 <_calloc_r+0x1e>
 8011f36:	2600      	movs	r6, #0
 8011f38:	4630      	mov	r0, r6
 8011f3a:	bd70      	pop	{r4, r5, r6, pc}
 8011f3c:	220c      	movs	r2, #12
 8011f3e:	6002      	str	r2, [r0, #0]
 8011f40:	e7f9      	b.n	8011f36 <_calloc_r+0x12>
 8011f42:	462a      	mov	r2, r5
 8011f44:	4621      	mov	r1, r4
 8011f46:	f7fe f97d 	bl	8010244 <memset>
 8011f4a:	e7f5      	b.n	8011f38 <_calloc_r+0x14>

08011f4c <__ascii_mbtowc>:
 8011f4c:	b082      	sub	sp, #8
 8011f4e:	b901      	cbnz	r1, 8011f52 <__ascii_mbtowc+0x6>
 8011f50:	a901      	add	r1, sp, #4
 8011f52:	b142      	cbz	r2, 8011f66 <__ascii_mbtowc+0x1a>
 8011f54:	b14b      	cbz	r3, 8011f6a <__ascii_mbtowc+0x1e>
 8011f56:	7813      	ldrb	r3, [r2, #0]
 8011f58:	600b      	str	r3, [r1, #0]
 8011f5a:	7812      	ldrb	r2, [r2, #0]
 8011f5c:	1e10      	subs	r0, r2, #0
 8011f5e:	bf18      	it	ne
 8011f60:	2001      	movne	r0, #1
 8011f62:	b002      	add	sp, #8
 8011f64:	4770      	bx	lr
 8011f66:	4610      	mov	r0, r2
 8011f68:	e7fb      	b.n	8011f62 <__ascii_mbtowc+0x16>
 8011f6a:	f06f 0001 	mvn.w	r0, #1
 8011f6e:	e7f8      	b.n	8011f62 <__ascii_mbtowc+0x16>

08011f70 <_malloc_usable_size_r>:
 8011f70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011f74:	1f18      	subs	r0, r3, #4
 8011f76:	2b00      	cmp	r3, #0
 8011f78:	bfbc      	itt	lt
 8011f7a:	580b      	ldrlt	r3, [r1, r0]
 8011f7c:	18c0      	addlt	r0, r0, r3
 8011f7e:	4770      	bx	lr

08011f80 <fiprintf>:
 8011f80:	b40e      	push	{r1, r2, r3}
 8011f82:	b503      	push	{r0, r1, lr}
 8011f84:	4601      	mov	r1, r0
 8011f86:	ab03      	add	r3, sp, #12
 8011f88:	4805      	ldr	r0, [pc, #20]	@ (8011fa0 <fiprintf+0x20>)
 8011f8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8011f8e:	6800      	ldr	r0, [r0, #0]
 8011f90:	9301      	str	r3, [sp, #4]
 8011f92:	f000 f845 	bl	8012020 <_vfiprintf_r>
 8011f96:	b002      	add	sp, #8
 8011f98:	f85d eb04 	ldr.w	lr, [sp], #4
 8011f9c:	b003      	add	sp, #12
 8011f9e:	4770      	bx	lr
 8011fa0:	200001b4 	.word	0x200001b4

08011fa4 <__ascii_wctomb>:
 8011fa4:	4603      	mov	r3, r0
 8011fa6:	4608      	mov	r0, r1
 8011fa8:	b141      	cbz	r1, 8011fbc <__ascii_wctomb+0x18>
 8011faa:	2aff      	cmp	r2, #255	@ 0xff
 8011fac:	d904      	bls.n	8011fb8 <__ascii_wctomb+0x14>
 8011fae:	228a      	movs	r2, #138	@ 0x8a
 8011fb0:	601a      	str	r2, [r3, #0]
 8011fb2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011fb6:	4770      	bx	lr
 8011fb8:	700a      	strb	r2, [r1, #0]
 8011fba:	2001      	movs	r0, #1
 8011fbc:	4770      	bx	lr

08011fbe <abort>:
 8011fbe:	b508      	push	{r3, lr}
 8011fc0:	2006      	movs	r0, #6
 8011fc2:	f000 fa85 	bl	80124d0 <raise>
 8011fc6:	2001      	movs	r0, #1
 8011fc8:	f7f1 f9e8 	bl	800339c <_exit>

08011fcc <__sfputc_r>:
 8011fcc:	6893      	ldr	r3, [r2, #8]
 8011fce:	3b01      	subs	r3, #1
 8011fd0:	2b00      	cmp	r3, #0
 8011fd2:	b410      	push	{r4}
 8011fd4:	6093      	str	r3, [r2, #8]
 8011fd6:	da08      	bge.n	8011fea <__sfputc_r+0x1e>
 8011fd8:	6994      	ldr	r4, [r2, #24]
 8011fda:	42a3      	cmp	r3, r4
 8011fdc:	db01      	blt.n	8011fe2 <__sfputc_r+0x16>
 8011fde:	290a      	cmp	r1, #10
 8011fe0:	d103      	bne.n	8011fea <__sfputc_r+0x1e>
 8011fe2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011fe6:	f000 b933 	b.w	8012250 <__swbuf_r>
 8011fea:	6813      	ldr	r3, [r2, #0]
 8011fec:	1c58      	adds	r0, r3, #1
 8011fee:	6010      	str	r0, [r2, #0]
 8011ff0:	7019      	strb	r1, [r3, #0]
 8011ff2:	4608      	mov	r0, r1
 8011ff4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011ff8:	4770      	bx	lr

08011ffa <__sfputs_r>:
 8011ffa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011ffc:	4606      	mov	r6, r0
 8011ffe:	460f      	mov	r7, r1
 8012000:	4614      	mov	r4, r2
 8012002:	18d5      	adds	r5, r2, r3
 8012004:	42ac      	cmp	r4, r5
 8012006:	d101      	bne.n	801200c <__sfputs_r+0x12>
 8012008:	2000      	movs	r0, #0
 801200a:	e007      	b.n	801201c <__sfputs_r+0x22>
 801200c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012010:	463a      	mov	r2, r7
 8012012:	4630      	mov	r0, r6
 8012014:	f7ff ffda 	bl	8011fcc <__sfputc_r>
 8012018:	1c43      	adds	r3, r0, #1
 801201a:	d1f3      	bne.n	8012004 <__sfputs_r+0xa>
 801201c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012020 <_vfiprintf_r>:
 8012020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012024:	460d      	mov	r5, r1
 8012026:	b09d      	sub	sp, #116	@ 0x74
 8012028:	4614      	mov	r4, r2
 801202a:	4698      	mov	r8, r3
 801202c:	4606      	mov	r6, r0
 801202e:	b118      	cbz	r0, 8012038 <_vfiprintf_r+0x18>
 8012030:	6a03      	ldr	r3, [r0, #32]
 8012032:	b90b      	cbnz	r3, 8012038 <_vfiprintf_r+0x18>
 8012034:	f7fe f896 	bl	8010164 <__sinit>
 8012038:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801203a:	07d9      	lsls	r1, r3, #31
 801203c:	d405      	bmi.n	801204a <_vfiprintf_r+0x2a>
 801203e:	89ab      	ldrh	r3, [r5, #12]
 8012040:	059a      	lsls	r2, r3, #22
 8012042:	d402      	bmi.n	801204a <_vfiprintf_r+0x2a>
 8012044:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012046:	f7fe f98a 	bl	801035e <__retarget_lock_acquire_recursive>
 801204a:	89ab      	ldrh	r3, [r5, #12]
 801204c:	071b      	lsls	r3, r3, #28
 801204e:	d501      	bpl.n	8012054 <_vfiprintf_r+0x34>
 8012050:	692b      	ldr	r3, [r5, #16]
 8012052:	b99b      	cbnz	r3, 801207c <_vfiprintf_r+0x5c>
 8012054:	4629      	mov	r1, r5
 8012056:	4630      	mov	r0, r6
 8012058:	f000 f938 	bl	80122cc <__swsetup_r>
 801205c:	b170      	cbz	r0, 801207c <_vfiprintf_r+0x5c>
 801205e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012060:	07dc      	lsls	r4, r3, #31
 8012062:	d504      	bpl.n	801206e <_vfiprintf_r+0x4e>
 8012064:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012068:	b01d      	add	sp, #116	@ 0x74
 801206a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801206e:	89ab      	ldrh	r3, [r5, #12]
 8012070:	0598      	lsls	r0, r3, #22
 8012072:	d4f7      	bmi.n	8012064 <_vfiprintf_r+0x44>
 8012074:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012076:	f7fe f973 	bl	8010360 <__retarget_lock_release_recursive>
 801207a:	e7f3      	b.n	8012064 <_vfiprintf_r+0x44>
 801207c:	2300      	movs	r3, #0
 801207e:	9309      	str	r3, [sp, #36]	@ 0x24
 8012080:	2320      	movs	r3, #32
 8012082:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012086:	f8cd 800c 	str.w	r8, [sp, #12]
 801208a:	2330      	movs	r3, #48	@ 0x30
 801208c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801223c <_vfiprintf_r+0x21c>
 8012090:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012094:	f04f 0901 	mov.w	r9, #1
 8012098:	4623      	mov	r3, r4
 801209a:	469a      	mov	sl, r3
 801209c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80120a0:	b10a      	cbz	r2, 80120a6 <_vfiprintf_r+0x86>
 80120a2:	2a25      	cmp	r2, #37	@ 0x25
 80120a4:	d1f9      	bne.n	801209a <_vfiprintf_r+0x7a>
 80120a6:	ebba 0b04 	subs.w	fp, sl, r4
 80120aa:	d00b      	beq.n	80120c4 <_vfiprintf_r+0xa4>
 80120ac:	465b      	mov	r3, fp
 80120ae:	4622      	mov	r2, r4
 80120b0:	4629      	mov	r1, r5
 80120b2:	4630      	mov	r0, r6
 80120b4:	f7ff ffa1 	bl	8011ffa <__sfputs_r>
 80120b8:	3001      	adds	r0, #1
 80120ba:	f000 80a7 	beq.w	801220c <_vfiprintf_r+0x1ec>
 80120be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80120c0:	445a      	add	r2, fp
 80120c2:	9209      	str	r2, [sp, #36]	@ 0x24
 80120c4:	f89a 3000 	ldrb.w	r3, [sl]
 80120c8:	2b00      	cmp	r3, #0
 80120ca:	f000 809f 	beq.w	801220c <_vfiprintf_r+0x1ec>
 80120ce:	2300      	movs	r3, #0
 80120d0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80120d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80120d8:	f10a 0a01 	add.w	sl, sl, #1
 80120dc:	9304      	str	r3, [sp, #16]
 80120de:	9307      	str	r3, [sp, #28]
 80120e0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80120e4:	931a      	str	r3, [sp, #104]	@ 0x68
 80120e6:	4654      	mov	r4, sl
 80120e8:	2205      	movs	r2, #5
 80120ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80120ee:	4853      	ldr	r0, [pc, #332]	@ (801223c <_vfiprintf_r+0x21c>)
 80120f0:	f7ee f896 	bl	8000220 <memchr>
 80120f4:	9a04      	ldr	r2, [sp, #16]
 80120f6:	b9d8      	cbnz	r0, 8012130 <_vfiprintf_r+0x110>
 80120f8:	06d1      	lsls	r1, r2, #27
 80120fa:	bf44      	itt	mi
 80120fc:	2320      	movmi	r3, #32
 80120fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012102:	0713      	lsls	r3, r2, #28
 8012104:	bf44      	itt	mi
 8012106:	232b      	movmi	r3, #43	@ 0x2b
 8012108:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801210c:	f89a 3000 	ldrb.w	r3, [sl]
 8012110:	2b2a      	cmp	r3, #42	@ 0x2a
 8012112:	d015      	beq.n	8012140 <_vfiprintf_r+0x120>
 8012114:	9a07      	ldr	r2, [sp, #28]
 8012116:	4654      	mov	r4, sl
 8012118:	2000      	movs	r0, #0
 801211a:	f04f 0c0a 	mov.w	ip, #10
 801211e:	4621      	mov	r1, r4
 8012120:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012124:	3b30      	subs	r3, #48	@ 0x30
 8012126:	2b09      	cmp	r3, #9
 8012128:	d94b      	bls.n	80121c2 <_vfiprintf_r+0x1a2>
 801212a:	b1b0      	cbz	r0, 801215a <_vfiprintf_r+0x13a>
 801212c:	9207      	str	r2, [sp, #28]
 801212e:	e014      	b.n	801215a <_vfiprintf_r+0x13a>
 8012130:	eba0 0308 	sub.w	r3, r0, r8
 8012134:	fa09 f303 	lsl.w	r3, r9, r3
 8012138:	4313      	orrs	r3, r2
 801213a:	9304      	str	r3, [sp, #16]
 801213c:	46a2      	mov	sl, r4
 801213e:	e7d2      	b.n	80120e6 <_vfiprintf_r+0xc6>
 8012140:	9b03      	ldr	r3, [sp, #12]
 8012142:	1d19      	adds	r1, r3, #4
 8012144:	681b      	ldr	r3, [r3, #0]
 8012146:	9103      	str	r1, [sp, #12]
 8012148:	2b00      	cmp	r3, #0
 801214a:	bfbb      	ittet	lt
 801214c:	425b      	neglt	r3, r3
 801214e:	f042 0202 	orrlt.w	r2, r2, #2
 8012152:	9307      	strge	r3, [sp, #28]
 8012154:	9307      	strlt	r3, [sp, #28]
 8012156:	bfb8      	it	lt
 8012158:	9204      	strlt	r2, [sp, #16]
 801215a:	7823      	ldrb	r3, [r4, #0]
 801215c:	2b2e      	cmp	r3, #46	@ 0x2e
 801215e:	d10a      	bne.n	8012176 <_vfiprintf_r+0x156>
 8012160:	7863      	ldrb	r3, [r4, #1]
 8012162:	2b2a      	cmp	r3, #42	@ 0x2a
 8012164:	d132      	bne.n	80121cc <_vfiprintf_r+0x1ac>
 8012166:	9b03      	ldr	r3, [sp, #12]
 8012168:	1d1a      	adds	r2, r3, #4
 801216a:	681b      	ldr	r3, [r3, #0]
 801216c:	9203      	str	r2, [sp, #12]
 801216e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012172:	3402      	adds	r4, #2
 8012174:	9305      	str	r3, [sp, #20]
 8012176:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801224c <_vfiprintf_r+0x22c>
 801217a:	7821      	ldrb	r1, [r4, #0]
 801217c:	2203      	movs	r2, #3
 801217e:	4650      	mov	r0, sl
 8012180:	f7ee f84e 	bl	8000220 <memchr>
 8012184:	b138      	cbz	r0, 8012196 <_vfiprintf_r+0x176>
 8012186:	9b04      	ldr	r3, [sp, #16]
 8012188:	eba0 000a 	sub.w	r0, r0, sl
 801218c:	2240      	movs	r2, #64	@ 0x40
 801218e:	4082      	lsls	r2, r0
 8012190:	4313      	orrs	r3, r2
 8012192:	3401      	adds	r4, #1
 8012194:	9304      	str	r3, [sp, #16]
 8012196:	f814 1b01 	ldrb.w	r1, [r4], #1
 801219a:	4829      	ldr	r0, [pc, #164]	@ (8012240 <_vfiprintf_r+0x220>)
 801219c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80121a0:	2206      	movs	r2, #6
 80121a2:	f7ee f83d 	bl	8000220 <memchr>
 80121a6:	2800      	cmp	r0, #0
 80121a8:	d03f      	beq.n	801222a <_vfiprintf_r+0x20a>
 80121aa:	4b26      	ldr	r3, [pc, #152]	@ (8012244 <_vfiprintf_r+0x224>)
 80121ac:	bb1b      	cbnz	r3, 80121f6 <_vfiprintf_r+0x1d6>
 80121ae:	9b03      	ldr	r3, [sp, #12]
 80121b0:	3307      	adds	r3, #7
 80121b2:	f023 0307 	bic.w	r3, r3, #7
 80121b6:	3308      	adds	r3, #8
 80121b8:	9303      	str	r3, [sp, #12]
 80121ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80121bc:	443b      	add	r3, r7
 80121be:	9309      	str	r3, [sp, #36]	@ 0x24
 80121c0:	e76a      	b.n	8012098 <_vfiprintf_r+0x78>
 80121c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80121c6:	460c      	mov	r4, r1
 80121c8:	2001      	movs	r0, #1
 80121ca:	e7a8      	b.n	801211e <_vfiprintf_r+0xfe>
 80121cc:	2300      	movs	r3, #0
 80121ce:	3401      	adds	r4, #1
 80121d0:	9305      	str	r3, [sp, #20]
 80121d2:	4619      	mov	r1, r3
 80121d4:	f04f 0c0a 	mov.w	ip, #10
 80121d8:	4620      	mov	r0, r4
 80121da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80121de:	3a30      	subs	r2, #48	@ 0x30
 80121e0:	2a09      	cmp	r2, #9
 80121e2:	d903      	bls.n	80121ec <_vfiprintf_r+0x1cc>
 80121e4:	2b00      	cmp	r3, #0
 80121e6:	d0c6      	beq.n	8012176 <_vfiprintf_r+0x156>
 80121e8:	9105      	str	r1, [sp, #20]
 80121ea:	e7c4      	b.n	8012176 <_vfiprintf_r+0x156>
 80121ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80121f0:	4604      	mov	r4, r0
 80121f2:	2301      	movs	r3, #1
 80121f4:	e7f0      	b.n	80121d8 <_vfiprintf_r+0x1b8>
 80121f6:	ab03      	add	r3, sp, #12
 80121f8:	9300      	str	r3, [sp, #0]
 80121fa:	462a      	mov	r2, r5
 80121fc:	4b12      	ldr	r3, [pc, #72]	@ (8012248 <_vfiprintf_r+0x228>)
 80121fe:	a904      	add	r1, sp, #16
 8012200:	4630      	mov	r0, r6
 8012202:	f7fd fb6b 	bl	800f8dc <_printf_float>
 8012206:	4607      	mov	r7, r0
 8012208:	1c78      	adds	r0, r7, #1
 801220a:	d1d6      	bne.n	80121ba <_vfiprintf_r+0x19a>
 801220c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801220e:	07d9      	lsls	r1, r3, #31
 8012210:	d405      	bmi.n	801221e <_vfiprintf_r+0x1fe>
 8012212:	89ab      	ldrh	r3, [r5, #12]
 8012214:	059a      	lsls	r2, r3, #22
 8012216:	d402      	bmi.n	801221e <_vfiprintf_r+0x1fe>
 8012218:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801221a:	f7fe f8a1 	bl	8010360 <__retarget_lock_release_recursive>
 801221e:	89ab      	ldrh	r3, [r5, #12]
 8012220:	065b      	lsls	r3, r3, #25
 8012222:	f53f af1f 	bmi.w	8012064 <_vfiprintf_r+0x44>
 8012226:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012228:	e71e      	b.n	8012068 <_vfiprintf_r+0x48>
 801222a:	ab03      	add	r3, sp, #12
 801222c:	9300      	str	r3, [sp, #0]
 801222e:	462a      	mov	r2, r5
 8012230:	4b05      	ldr	r3, [pc, #20]	@ (8012248 <_vfiprintf_r+0x228>)
 8012232:	a904      	add	r1, sp, #16
 8012234:	4630      	mov	r0, r6
 8012236:	f7fd fde9 	bl	800fe0c <_printf_i>
 801223a:	e7e4      	b.n	8012206 <_vfiprintf_r+0x1e6>
 801223c:	080135f9 	.word	0x080135f9
 8012240:	08013603 	.word	0x08013603
 8012244:	0800f8dd 	.word	0x0800f8dd
 8012248:	08011ffb 	.word	0x08011ffb
 801224c:	080135ff 	.word	0x080135ff

08012250 <__swbuf_r>:
 8012250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012252:	460e      	mov	r6, r1
 8012254:	4614      	mov	r4, r2
 8012256:	4605      	mov	r5, r0
 8012258:	b118      	cbz	r0, 8012262 <__swbuf_r+0x12>
 801225a:	6a03      	ldr	r3, [r0, #32]
 801225c:	b90b      	cbnz	r3, 8012262 <__swbuf_r+0x12>
 801225e:	f7fd ff81 	bl	8010164 <__sinit>
 8012262:	69a3      	ldr	r3, [r4, #24]
 8012264:	60a3      	str	r3, [r4, #8]
 8012266:	89a3      	ldrh	r3, [r4, #12]
 8012268:	071a      	lsls	r2, r3, #28
 801226a:	d501      	bpl.n	8012270 <__swbuf_r+0x20>
 801226c:	6923      	ldr	r3, [r4, #16]
 801226e:	b943      	cbnz	r3, 8012282 <__swbuf_r+0x32>
 8012270:	4621      	mov	r1, r4
 8012272:	4628      	mov	r0, r5
 8012274:	f000 f82a 	bl	80122cc <__swsetup_r>
 8012278:	b118      	cbz	r0, 8012282 <__swbuf_r+0x32>
 801227a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801227e:	4638      	mov	r0, r7
 8012280:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012282:	6823      	ldr	r3, [r4, #0]
 8012284:	6922      	ldr	r2, [r4, #16]
 8012286:	1a98      	subs	r0, r3, r2
 8012288:	6963      	ldr	r3, [r4, #20]
 801228a:	b2f6      	uxtb	r6, r6
 801228c:	4283      	cmp	r3, r0
 801228e:	4637      	mov	r7, r6
 8012290:	dc05      	bgt.n	801229e <__swbuf_r+0x4e>
 8012292:	4621      	mov	r1, r4
 8012294:	4628      	mov	r0, r5
 8012296:	f7ff f98f 	bl	80115b8 <_fflush_r>
 801229a:	2800      	cmp	r0, #0
 801229c:	d1ed      	bne.n	801227a <__swbuf_r+0x2a>
 801229e:	68a3      	ldr	r3, [r4, #8]
 80122a0:	3b01      	subs	r3, #1
 80122a2:	60a3      	str	r3, [r4, #8]
 80122a4:	6823      	ldr	r3, [r4, #0]
 80122a6:	1c5a      	adds	r2, r3, #1
 80122a8:	6022      	str	r2, [r4, #0]
 80122aa:	701e      	strb	r6, [r3, #0]
 80122ac:	6962      	ldr	r2, [r4, #20]
 80122ae:	1c43      	adds	r3, r0, #1
 80122b0:	429a      	cmp	r2, r3
 80122b2:	d004      	beq.n	80122be <__swbuf_r+0x6e>
 80122b4:	89a3      	ldrh	r3, [r4, #12]
 80122b6:	07db      	lsls	r3, r3, #31
 80122b8:	d5e1      	bpl.n	801227e <__swbuf_r+0x2e>
 80122ba:	2e0a      	cmp	r6, #10
 80122bc:	d1df      	bne.n	801227e <__swbuf_r+0x2e>
 80122be:	4621      	mov	r1, r4
 80122c0:	4628      	mov	r0, r5
 80122c2:	f7ff f979 	bl	80115b8 <_fflush_r>
 80122c6:	2800      	cmp	r0, #0
 80122c8:	d0d9      	beq.n	801227e <__swbuf_r+0x2e>
 80122ca:	e7d6      	b.n	801227a <__swbuf_r+0x2a>

080122cc <__swsetup_r>:
 80122cc:	b538      	push	{r3, r4, r5, lr}
 80122ce:	4b29      	ldr	r3, [pc, #164]	@ (8012374 <__swsetup_r+0xa8>)
 80122d0:	4605      	mov	r5, r0
 80122d2:	6818      	ldr	r0, [r3, #0]
 80122d4:	460c      	mov	r4, r1
 80122d6:	b118      	cbz	r0, 80122e0 <__swsetup_r+0x14>
 80122d8:	6a03      	ldr	r3, [r0, #32]
 80122da:	b90b      	cbnz	r3, 80122e0 <__swsetup_r+0x14>
 80122dc:	f7fd ff42 	bl	8010164 <__sinit>
 80122e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80122e4:	0719      	lsls	r1, r3, #28
 80122e6:	d422      	bmi.n	801232e <__swsetup_r+0x62>
 80122e8:	06da      	lsls	r2, r3, #27
 80122ea:	d407      	bmi.n	80122fc <__swsetup_r+0x30>
 80122ec:	2209      	movs	r2, #9
 80122ee:	602a      	str	r2, [r5, #0]
 80122f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80122f4:	81a3      	strh	r3, [r4, #12]
 80122f6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80122fa:	e033      	b.n	8012364 <__swsetup_r+0x98>
 80122fc:	0758      	lsls	r0, r3, #29
 80122fe:	d512      	bpl.n	8012326 <__swsetup_r+0x5a>
 8012300:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012302:	b141      	cbz	r1, 8012316 <__swsetup_r+0x4a>
 8012304:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012308:	4299      	cmp	r1, r3
 801230a:	d002      	beq.n	8012312 <__swsetup_r+0x46>
 801230c:	4628      	mov	r0, r5
 801230e:	f7fe fe83 	bl	8011018 <_free_r>
 8012312:	2300      	movs	r3, #0
 8012314:	6363      	str	r3, [r4, #52]	@ 0x34
 8012316:	89a3      	ldrh	r3, [r4, #12]
 8012318:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801231c:	81a3      	strh	r3, [r4, #12]
 801231e:	2300      	movs	r3, #0
 8012320:	6063      	str	r3, [r4, #4]
 8012322:	6923      	ldr	r3, [r4, #16]
 8012324:	6023      	str	r3, [r4, #0]
 8012326:	89a3      	ldrh	r3, [r4, #12]
 8012328:	f043 0308 	orr.w	r3, r3, #8
 801232c:	81a3      	strh	r3, [r4, #12]
 801232e:	6923      	ldr	r3, [r4, #16]
 8012330:	b94b      	cbnz	r3, 8012346 <__swsetup_r+0x7a>
 8012332:	89a3      	ldrh	r3, [r4, #12]
 8012334:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8012338:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801233c:	d003      	beq.n	8012346 <__swsetup_r+0x7a>
 801233e:	4621      	mov	r1, r4
 8012340:	4628      	mov	r0, r5
 8012342:	f000 f83f 	bl	80123c4 <__smakebuf_r>
 8012346:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801234a:	f013 0201 	ands.w	r2, r3, #1
 801234e:	d00a      	beq.n	8012366 <__swsetup_r+0x9a>
 8012350:	2200      	movs	r2, #0
 8012352:	60a2      	str	r2, [r4, #8]
 8012354:	6962      	ldr	r2, [r4, #20]
 8012356:	4252      	negs	r2, r2
 8012358:	61a2      	str	r2, [r4, #24]
 801235a:	6922      	ldr	r2, [r4, #16]
 801235c:	b942      	cbnz	r2, 8012370 <__swsetup_r+0xa4>
 801235e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8012362:	d1c5      	bne.n	80122f0 <__swsetup_r+0x24>
 8012364:	bd38      	pop	{r3, r4, r5, pc}
 8012366:	0799      	lsls	r1, r3, #30
 8012368:	bf58      	it	pl
 801236a:	6962      	ldrpl	r2, [r4, #20]
 801236c:	60a2      	str	r2, [r4, #8]
 801236e:	e7f4      	b.n	801235a <__swsetup_r+0x8e>
 8012370:	2000      	movs	r0, #0
 8012372:	e7f7      	b.n	8012364 <__swsetup_r+0x98>
 8012374:	200001b4 	.word	0x200001b4

08012378 <__swhatbuf_r>:
 8012378:	b570      	push	{r4, r5, r6, lr}
 801237a:	460c      	mov	r4, r1
 801237c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012380:	2900      	cmp	r1, #0
 8012382:	b096      	sub	sp, #88	@ 0x58
 8012384:	4615      	mov	r5, r2
 8012386:	461e      	mov	r6, r3
 8012388:	da0d      	bge.n	80123a6 <__swhatbuf_r+0x2e>
 801238a:	89a3      	ldrh	r3, [r4, #12]
 801238c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8012390:	f04f 0100 	mov.w	r1, #0
 8012394:	bf14      	ite	ne
 8012396:	2340      	movne	r3, #64	@ 0x40
 8012398:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801239c:	2000      	movs	r0, #0
 801239e:	6031      	str	r1, [r6, #0]
 80123a0:	602b      	str	r3, [r5, #0]
 80123a2:	b016      	add	sp, #88	@ 0x58
 80123a4:	bd70      	pop	{r4, r5, r6, pc}
 80123a6:	466a      	mov	r2, sp
 80123a8:	f000 f848 	bl	801243c <_fstat_r>
 80123ac:	2800      	cmp	r0, #0
 80123ae:	dbec      	blt.n	801238a <__swhatbuf_r+0x12>
 80123b0:	9901      	ldr	r1, [sp, #4]
 80123b2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80123b6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80123ba:	4259      	negs	r1, r3
 80123bc:	4159      	adcs	r1, r3
 80123be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80123c2:	e7eb      	b.n	801239c <__swhatbuf_r+0x24>

080123c4 <__smakebuf_r>:
 80123c4:	898b      	ldrh	r3, [r1, #12]
 80123c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80123c8:	079d      	lsls	r5, r3, #30
 80123ca:	4606      	mov	r6, r0
 80123cc:	460c      	mov	r4, r1
 80123ce:	d507      	bpl.n	80123e0 <__smakebuf_r+0x1c>
 80123d0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80123d4:	6023      	str	r3, [r4, #0]
 80123d6:	6123      	str	r3, [r4, #16]
 80123d8:	2301      	movs	r3, #1
 80123da:	6163      	str	r3, [r4, #20]
 80123dc:	b003      	add	sp, #12
 80123de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80123e0:	ab01      	add	r3, sp, #4
 80123e2:	466a      	mov	r2, sp
 80123e4:	f7ff ffc8 	bl	8012378 <__swhatbuf_r>
 80123e8:	9f00      	ldr	r7, [sp, #0]
 80123ea:	4605      	mov	r5, r0
 80123ec:	4639      	mov	r1, r7
 80123ee:	4630      	mov	r0, r6
 80123f0:	f7fe ffde 	bl	80113b0 <_malloc_r>
 80123f4:	b948      	cbnz	r0, 801240a <__smakebuf_r+0x46>
 80123f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80123fa:	059a      	lsls	r2, r3, #22
 80123fc:	d4ee      	bmi.n	80123dc <__smakebuf_r+0x18>
 80123fe:	f023 0303 	bic.w	r3, r3, #3
 8012402:	f043 0302 	orr.w	r3, r3, #2
 8012406:	81a3      	strh	r3, [r4, #12]
 8012408:	e7e2      	b.n	80123d0 <__smakebuf_r+0xc>
 801240a:	89a3      	ldrh	r3, [r4, #12]
 801240c:	6020      	str	r0, [r4, #0]
 801240e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012412:	81a3      	strh	r3, [r4, #12]
 8012414:	9b01      	ldr	r3, [sp, #4]
 8012416:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801241a:	b15b      	cbz	r3, 8012434 <__smakebuf_r+0x70>
 801241c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012420:	4630      	mov	r0, r6
 8012422:	f000 f81d 	bl	8012460 <_isatty_r>
 8012426:	b128      	cbz	r0, 8012434 <__smakebuf_r+0x70>
 8012428:	89a3      	ldrh	r3, [r4, #12]
 801242a:	f023 0303 	bic.w	r3, r3, #3
 801242e:	f043 0301 	orr.w	r3, r3, #1
 8012432:	81a3      	strh	r3, [r4, #12]
 8012434:	89a3      	ldrh	r3, [r4, #12]
 8012436:	431d      	orrs	r5, r3
 8012438:	81a5      	strh	r5, [r4, #12]
 801243a:	e7cf      	b.n	80123dc <__smakebuf_r+0x18>

0801243c <_fstat_r>:
 801243c:	b538      	push	{r3, r4, r5, lr}
 801243e:	4d07      	ldr	r5, [pc, #28]	@ (801245c <_fstat_r+0x20>)
 8012440:	2300      	movs	r3, #0
 8012442:	4604      	mov	r4, r0
 8012444:	4608      	mov	r0, r1
 8012446:	4611      	mov	r1, r2
 8012448:	602b      	str	r3, [r5, #0]
 801244a:	f7f0 fff7 	bl	800343c <_fstat>
 801244e:	1c43      	adds	r3, r0, #1
 8012450:	d102      	bne.n	8012458 <_fstat_r+0x1c>
 8012452:	682b      	ldr	r3, [r5, #0]
 8012454:	b103      	cbz	r3, 8012458 <_fstat_r+0x1c>
 8012456:	6023      	str	r3, [r4, #0]
 8012458:	bd38      	pop	{r3, r4, r5, pc}
 801245a:	bf00      	nop
 801245c:	20012934 	.word	0x20012934

08012460 <_isatty_r>:
 8012460:	b538      	push	{r3, r4, r5, lr}
 8012462:	4d06      	ldr	r5, [pc, #24]	@ (801247c <_isatty_r+0x1c>)
 8012464:	2300      	movs	r3, #0
 8012466:	4604      	mov	r4, r0
 8012468:	4608      	mov	r0, r1
 801246a:	602b      	str	r3, [r5, #0]
 801246c:	f7f0 fff6 	bl	800345c <_isatty>
 8012470:	1c43      	adds	r3, r0, #1
 8012472:	d102      	bne.n	801247a <_isatty_r+0x1a>
 8012474:	682b      	ldr	r3, [r5, #0]
 8012476:	b103      	cbz	r3, 801247a <_isatty_r+0x1a>
 8012478:	6023      	str	r3, [r4, #0]
 801247a:	bd38      	pop	{r3, r4, r5, pc}
 801247c:	20012934 	.word	0x20012934

08012480 <_raise_r>:
 8012480:	291f      	cmp	r1, #31
 8012482:	b538      	push	{r3, r4, r5, lr}
 8012484:	4605      	mov	r5, r0
 8012486:	460c      	mov	r4, r1
 8012488:	d904      	bls.n	8012494 <_raise_r+0x14>
 801248a:	2316      	movs	r3, #22
 801248c:	6003      	str	r3, [r0, #0]
 801248e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012492:	bd38      	pop	{r3, r4, r5, pc}
 8012494:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8012496:	b112      	cbz	r2, 801249e <_raise_r+0x1e>
 8012498:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801249c:	b94b      	cbnz	r3, 80124b2 <_raise_r+0x32>
 801249e:	4628      	mov	r0, r5
 80124a0:	f000 f830 	bl	8012504 <_getpid_r>
 80124a4:	4622      	mov	r2, r4
 80124a6:	4601      	mov	r1, r0
 80124a8:	4628      	mov	r0, r5
 80124aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80124ae:	f000 b817 	b.w	80124e0 <_kill_r>
 80124b2:	2b01      	cmp	r3, #1
 80124b4:	d00a      	beq.n	80124cc <_raise_r+0x4c>
 80124b6:	1c59      	adds	r1, r3, #1
 80124b8:	d103      	bne.n	80124c2 <_raise_r+0x42>
 80124ba:	2316      	movs	r3, #22
 80124bc:	6003      	str	r3, [r0, #0]
 80124be:	2001      	movs	r0, #1
 80124c0:	e7e7      	b.n	8012492 <_raise_r+0x12>
 80124c2:	2100      	movs	r1, #0
 80124c4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80124c8:	4620      	mov	r0, r4
 80124ca:	4798      	blx	r3
 80124cc:	2000      	movs	r0, #0
 80124ce:	e7e0      	b.n	8012492 <_raise_r+0x12>

080124d0 <raise>:
 80124d0:	4b02      	ldr	r3, [pc, #8]	@ (80124dc <raise+0xc>)
 80124d2:	4601      	mov	r1, r0
 80124d4:	6818      	ldr	r0, [r3, #0]
 80124d6:	f7ff bfd3 	b.w	8012480 <_raise_r>
 80124da:	bf00      	nop
 80124dc:	200001b4 	.word	0x200001b4

080124e0 <_kill_r>:
 80124e0:	b538      	push	{r3, r4, r5, lr}
 80124e2:	4d07      	ldr	r5, [pc, #28]	@ (8012500 <_kill_r+0x20>)
 80124e4:	2300      	movs	r3, #0
 80124e6:	4604      	mov	r4, r0
 80124e8:	4608      	mov	r0, r1
 80124ea:	4611      	mov	r1, r2
 80124ec:	602b      	str	r3, [r5, #0]
 80124ee:	f7f0 ff45 	bl	800337c <_kill>
 80124f2:	1c43      	adds	r3, r0, #1
 80124f4:	d102      	bne.n	80124fc <_kill_r+0x1c>
 80124f6:	682b      	ldr	r3, [r5, #0]
 80124f8:	b103      	cbz	r3, 80124fc <_kill_r+0x1c>
 80124fa:	6023      	str	r3, [r4, #0]
 80124fc:	bd38      	pop	{r3, r4, r5, pc}
 80124fe:	bf00      	nop
 8012500:	20012934 	.word	0x20012934

08012504 <_getpid_r>:
 8012504:	f7f0 bf32 	b.w	800336c <_getpid>

08012508 <powf>:
 8012508:	b508      	push	{r3, lr}
 801250a:	ed2d 8b04 	vpush	{d8-d9}
 801250e:	eeb0 8a60 	vmov.f32	s16, s1
 8012512:	eeb0 9a40 	vmov.f32	s18, s0
 8012516:	f000 f87b 	bl	8012610 <__ieee754_powf>
 801251a:	eeb4 8a48 	vcmp.f32	s16, s16
 801251e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012522:	eef0 8a40 	vmov.f32	s17, s0
 8012526:	d63e      	bvs.n	80125a6 <powf+0x9e>
 8012528:	eeb5 9a40 	vcmp.f32	s18, #0.0
 801252c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012530:	d112      	bne.n	8012558 <powf+0x50>
 8012532:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8012536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801253a:	d039      	beq.n	80125b0 <powf+0xa8>
 801253c:	eeb0 0a48 	vmov.f32	s0, s16
 8012540:	f000 f858 	bl	80125f4 <finitef>
 8012544:	b378      	cbz	r0, 80125a6 <powf+0x9e>
 8012546:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801254a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801254e:	d52a      	bpl.n	80125a6 <powf+0x9e>
 8012550:	f7fd feda 	bl	8010308 <__errno>
 8012554:	2322      	movs	r3, #34	@ 0x22
 8012556:	e014      	b.n	8012582 <powf+0x7a>
 8012558:	f000 f84c 	bl	80125f4 <finitef>
 801255c:	b998      	cbnz	r0, 8012586 <powf+0x7e>
 801255e:	eeb0 0a49 	vmov.f32	s0, s18
 8012562:	f000 f847 	bl	80125f4 <finitef>
 8012566:	b170      	cbz	r0, 8012586 <powf+0x7e>
 8012568:	eeb0 0a48 	vmov.f32	s0, s16
 801256c:	f000 f842 	bl	80125f4 <finitef>
 8012570:	b148      	cbz	r0, 8012586 <powf+0x7e>
 8012572:	eef4 8a68 	vcmp.f32	s17, s17
 8012576:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801257a:	d7e9      	bvc.n	8012550 <powf+0x48>
 801257c:	f7fd fec4 	bl	8010308 <__errno>
 8012580:	2321      	movs	r3, #33	@ 0x21
 8012582:	6003      	str	r3, [r0, #0]
 8012584:	e00f      	b.n	80125a6 <powf+0x9e>
 8012586:	eef5 8a40 	vcmp.f32	s17, #0.0
 801258a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801258e:	d10a      	bne.n	80125a6 <powf+0x9e>
 8012590:	eeb0 0a49 	vmov.f32	s0, s18
 8012594:	f000 f82e 	bl	80125f4 <finitef>
 8012598:	b128      	cbz	r0, 80125a6 <powf+0x9e>
 801259a:	eeb0 0a48 	vmov.f32	s0, s16
 801259e:	f000 f829 	bl	80125f4 <finitef>
 80125a2:	2800      	cmp	r0, #0
 80125a4:	d1d4      	bne.n	8012550 <powf+0x48>
 80125a6:	eeb0 0a68 	vmov.f32	s0, s17
 80125aa:	ecbd 8b04 	vpop	{d8-d9}
 80125ae:	bd08      	pop	{r3, pc}
 80125b0:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 80125b4:	e7f7      	b.n	80125a6 <powf+0x9e>
	...

080125b8 <sqrtf>:
 80125b8:	b508      	push	{r3, lr}
 80125ba:	ed2d 8b02 	vpush	{d8}
 80125be:	eeb0 8a40 	vmov.f32	s16, s0
 80125c2:	f000 f821 	bl	8012608 <__ieee754_sqrtf>
 80125c6:	eeb4 8a48 	vcmp.f32	s16, s16
 80125ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125ce:	d60c      	bvs.n	80125ea <sqrtf+0x32>
 80125d0:	eddf 8a07 	vldr	s17, [pc, #28]	@ 80125f0 <sqrtf+0x38>
 80125d4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80125d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125dc:	d505      	bpl.n	80125ea <sqrtf+0x32>
 80125de:	f7fd fe93 	bl	8010308 <__errno>
 80125e2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80125e6:	2321      	movs	r3, #33	@ 0x21
 80125e8:	6003      	str	r3, [r0, #0]
 80125ea:	ecbd 8b02 	vpop	{d8}
 80125ee:	bd08      	pop	{r3, pc}
 80125f0:	00000000 	.word	0x00000000

080125f4 <finitef>:
 80125f4:	ee10 3a10 	vmov	r3, s0
 80125f8:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 80125fc:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8012600:	bfac      	ite	ge
 8012602:	2000      	movge	r0, #0
 8012604:	2001      	movlt	r0, #1
 8012606:	4770      	bx	lr

08012608 <__ieee754_sqrtf>:
 8012608:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801260c:	4770      	bx	lr
	...

08012610 <__ieee754_powf>:
 8012610:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012614:	ee10 4a90 	vmov	r4, s1
 8012618:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 801261c:	ed2d 8b02 	vpush	{d8}
 8012620:	ee10 6a10 	vmov	r6, s0
 8012624:	eeb0 8a40 	vmov.f32	s16, s0
 8012628:	eef0 8a60 	vmov.f32	s17, s1
 801262c:	d10c      	bne.n	8012648 <__ieee754_powf+0x38>
 801262e:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 8012632:	0076      	lsls	r6, r6, #1
 8012634:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 8012638:	f240 829c 	bls.w	8012b74 <__ieee754_powf+0x564>
 801263c:	ee38 0a28 	vadd.f32	s0, s16, s17
 8012640:	ecbd 8b02 	vpop	{d8}
 8012644:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012648:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 801264c:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 8012650:	d802      	bhi.n	8012658 <__ieee754_powf+0x48>
 8012652:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8012656:	d908      	bls.n	801266a <__ieee754_powf+0x5a>
 8012658:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 801265c:	d1ee      	bne.n	801263c <__ieee754_powf+0x2c>
 801265e:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 8012662:	0064      	lsls	r4, r4, #1
 8012664:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 8012668:	e7e6      	b.n	8012638 <__ieee754_powf+0x28>
 801266a:	2e00      	cmp	r6, #0
 801266c:	da1e      	bge.n	80126ac <__ieee754_powf+0x9c>
 801266e:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 8012672:	d22b      	bcs.n	80126cc <__ieee754_powf+0xbc>
 8012674:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8012678:	d332      	bcc.n	80126e0 <__ieee754_powf+0xd0>
 801267a:	ea4f 53e9 	mov.w	r3, r9, asr #23
 801267e:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 8012682:	fa49 f503 	asr.w	r5, r9, r3
 8012686:	fa05 f303 	lsl.w	r3, r5, r3
 801268a:	454b      	cmp	r3, r9
 801268c:	d126      	bne.n	80126dc <__ieee754_powf+0xcc>
 801268e:	f005 0501 	and.w	r5, r5, #1
 8012692:	f1c5 0502 	rsb	r5, r5, #2
 8012696:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 801269a:	d122      	bne.n	80126e2 <__ieee754_powf+0xd2>
 801269c:	2c00      	cmp	r4, #0
 801269e:	f280 826f 	bge.w	8012b80 <__ieee754_powf+0x570>
 80126a2:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80126a6:	ee87 0a88 	vdiv.f32	s0, s15, s16
 80126aa:	e7c9      	b.n	8012640 <__ieee754_powf+0x30>
 80126ac:	2500      	movs	r5, #0
 80126ae:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 80126b2:	d1f0      	bne.n	8012696 <__ieee754_powf+0x86>
 80126b4:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 80126b8:	f000 825c 	beq.w	8012b74 <__ieee754_powf+0x564>
 80126bc:	d908      	bls.n	80126d0 <__ieee754_powf+0xc0>
 80126be:	ed9f 0ad8 	vldr	s0, [pc, #864]	@ 8012a20 <__ieee754_powf+0x410>
 80126c2:	2c00      	cmp	r4, #0
 80126c4:	bfa8      	it	ge
 80126c6:	eeb0 0a68 	vmovge.f32	s0, s17
 80126ca:	e7b9      	b.n	8012640 <__ieee754_powf+0x30>
 80126cc:	2502      	movs	r5, #2
 80126ce:	e7ee      	b.n	80126ae <__ieee754_powf+0x9e>
 80126d0:	2c00      	cmp	r4, #0
 80126d2:	f280 8252 	bge.w	8012b7a <__ieee754_powf+0x56a>
 80126d6:	eeb1 0a68 	vneg.f32	s0, s17
 80126da:	e7b1      	b.n	8012640 <__ieee754_powf+0x30>
 80126dc:	2500      	movs	r5, #0
 80126de:	e7da      	b.n	8012696 <__ieee754_powf+0x86>
 80126e0:	2500      	movs	r5, #0
 80126e2:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 80126e6:	d102      	bne.n	80126ee <__ieee754_powf+0xde>
 80126e8:	ee28 0a08 	vmul.f32	s0, s16, s16
 80126ec:	e7a8      	b.n	8012640 <__ieee754_powf+0x30>
 80126ee:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 80126f2:	d109      	bne.n	8012708 <__ieee754_powf+0xf8>
 80126f4:	2e00      	cmp	r6, #0
 80126f6:	db07      	blt.n	8012708 <__ieee754_powf+0xf8>
 80126f8:	eeb0 0a48 	vmov.f32	s0, s16
 80126fc:	ecbd 8b02 	vpop	{d8}
 8012700:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012704:	f7ff bf80 	b.w	8012608 <__ieee754_sqrtf>
 8012708:	eeb0 0a48 	vmov.f32	s0, s16
 801270c:	f000 fadc 	bl	8012cc8 <fabsf>
 8012710:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 8012714:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 8012718:	4647      	mov	r7, r8
 801271a:	d002      	beq.n	8012722 <__ieee754_powf+0x112>
 801271c:	f1b8 0f00 	cmp.w	r8, #0
 8012720:	d117      	bne.n	8012752 <__ieee754_powf+0x142>
 8012722:	2c00      	cmp	r4, #0
 8012724:	bfbc      	itt	lt
 8012726:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 801272a:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 801272e:	2e00      	cmp	r6, #0
 8012730:	da86      	bge.n	8012640 <__ieee754_powf+0x30>
 8012732:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 8012736:	ea58 0805 	orrs.w	r8, r8, r5
 801273a:	d104      	bne.n	8012746 <__ieee754_powf+0x136>
 801273c:	ee70 7a40 	vsub.f32	s15, s0, s0
 8012740:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8012744:	e77c      	b.n	8012640 <__ieee754_powf+0x30>
 8012746:	2d01      	cmp	r5, #1
 8012748:	f47f af7a 	bne.w	8012640 <__ieee754_powf+0x30>
 801274c:	eeb1 0a40 	vneg.f32	s0, s0
 8012750:	e776      	b.n	8012640 <__ieee754_powf+0x30>
 8012752:	0ff0      	lsrs	r0, r6, #31
 8012754:	3801      	subs	r0, #1
 8012756:	ea55 0300 	orrs.w	r3, r5, r0
 801275a:	d104      	bne.n	8012766 <__ieee754_powf+0x156>
 801275c:	ee38 8a48 	vsub.f32	s16, s16, s16
 8012760:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8012764:	e76c      	b.n	8012640 <__ieee754_powf+0x30>
 8012766:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 801276a:	d973      	bls.n	8012854 <__ieee754_powf+0x244>
 801276c:	4bad      	ldr	r3, [pc, #692]	@ (8012a24 <__ieee754_powf+0x414>)
 801276e:	4598      	cmp	r8, r3
 8012770:	d808      	bhi.n	8012784 <__ieee754_powf+0x174>
 8012772:	2c00      	cmp	r4, #0
 8012774:	da0b      	bge.n	801278e <__ieee754_powf+0x17e>
 8012776:	2000      	movs	r0, #0
 8012778:	ecbd 8b02 	vpop	{d8}
 801277c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012780:	f000 ba36 	b.w	8012bf0 <__math_oflowf>
 8012784:	4ba8      	ldr	r3, [pc, #672]	@ (8012a28 <__ieee754_powf+0x418>)
 8012786:	4598      	cmp	r8, r3
 8012788:	d908      	bls.n	801279c <__ieee754_powf+0x18c>
 801278a:	2c00      	cmp	r4, #0
 801278c:	dcf3      	bgt.n	8012776 <__ieee754_powf+0x166>
 801278e:	2000      	movs	r0, #0
 8012790:	ecbd 8b02 	vpop	{d8}
 8012794:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012798:	f000 ba24 	b.w	8012be4 <__math_uflowf>
 801279c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80127a0:	ee30 0a67 	vsub.f32	s0, s0, s15
 80127a4:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 8012a2c <__ieee754_powf+0x41c>
 80127a8:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 80127ac:	eee0 6a67 	vfms.f32	s13, s0, s15
 80127b0:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80127b4:	eee6 7ac0 	vfms.f32	s15, s13, s0
 80127b8:	ee20 7a00 	vmul.f32	s14, s0, s0
 80127bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80127c0:	eddf 7a9b 	vldr	s15, [pc, #620]	@ 8012a30 <__ieee754_powf+0x420>
 80127c4:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 80127c8:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 8012a34 <__ieee754_powf+0x424>
 80127cc:	eee0 7a07 	vfma.f32	s15, s0, s14
 80127d0:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 8012a38 <__ieee754_powf+0x428>
 80127d4:	eef0 6a67 	vmov.f32	s13, s15
 80127d8:	eee0 6a07 	vfma.f32	s13, s0, s14
 80127dc:	ee16 3a90 	vmov	r3, s13
 80127e0:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80127e4:	f023 030f 	bic.w	r3, r3, #15
 80127e8:	ee06 3a90 	vmov	s13, r3
 80127ec:	eee0 6a47 	vfms.f32	s13, s0, s14
 80127f0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80127f4:	3d01      	subs	r5, #1
 80127f6:	f424 647f 	bic.w	r4, r4, #4080	@ 0xff0
 80127fa:	4305      	orrs	r5, r0
 80127fc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8012800:	f024 040f 	bic.w	r4, r4, #15
 8012804:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 8012808:	bf18      	it	ne
 801280a:	eeb0 8a47 	vmovne.f32	s16, s14
 801280e:	ee07 4a10 	vmov	s14, r4
 8012812:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8012816:	ee38 7ac7 	vsub.f32	s14, s17, s14
 801281a:	ee07 3a90 	vmov	s15, r3
 801281e:	eee7 0a27 	vfma.f32	s1, s14, s15
 8012822:	ee07 4a10 	vmov	s14, r4
 8012826:	ee67 7a87 	vmul.f32	s15, s15, s14
 801282a:	ee30 7aa7 	vadd.f32	s14, s1, s15
 801282e:	ee17 1a10 	vmov	r1, s14
 8012832:	2900      	cmp	r1, #0
 8012834:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8012838:	f340 80dd 	ble.w	80129f6 <__ieee754_powf+0x3e6>
 801283c:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 8012840:	f240 80ca 	bls.w	80129d8 <__ieee754_powf+0x3c8>
 8012844:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8012848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801284c:	bf4c      	ite	mi
 801284e:	2001      	movmi	r0, #1
 8012850:	2000      	movpl	r0, #0
 8012852:	e791      	b.n	8012778 <__ieee754_powf+0x168>
 8012854:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 8012858:	bf01      	itttt	eq
 801285a:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 8012a3c <__ieee754_powf+0x42c>
 801285e:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8012862:	f06f 0317 	mvneq.w	r3, #23
 8012866:	ee17 7a90 	vmoveq	r7, s15
 801286a:	ea4f 52e7 	mov.w	r2, r7, asr #23
 801286e:	bf18      	it	ne
 8012870:	2300      	movne	r3, #0
 8012872:	3a7f      	subs	r2, #127	@ 0x7f
 8012874:	441a      	add	r2, r3
 8012876:	4b72      	ldr	r3, [pc, #456]	@ (8012a40 <__ieee754_powf+0x430>)
 8012878:	f3c7 0716 	ubfx	r7, r7, #0, #23
 801287c:	429f      	cmp	r7, r3
 801287e:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 8012882:	dd06      	ble.n	8012892 <__ieee754_powf+0x282>
 8012884:	4b6f      	ldr	r3, [pc, #444]	@ (8012a44 <__ieee754_powf+0x434>)
 8012886:	429f      	cmp	r7, r3
 8012888:	f340 80a4 	ble.w	80129d4 <__ieee754_powf+0x3c4>
 801288c:	3201      	adds	r2, #1
 801288e:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 8012892:	2600      	movs	r6, #0
 8012894:	4b6c      	ldr	r3, [pc, #432]	@ (8012a48 <__ieee754_powf+0x438>)
 8012896:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 801289a:	ee07 1a10 	vmov	s14, r1
 801289e:	edd3 5a00 	vldr	s11, [r3]
 80128a2:	4b6a      	ldr	r3, [pc, #424]	@ (8012a4c <__ieee754_powf+0x43c>)
 80128a4:	ee75 7a87 	vadd.f32	s15, s11, s14
 80128a8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80128ac:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 80128b0:	1049      	asrs	r1, r1, #1
 80128b2:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 80128b6:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 80128ba:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 80128be:	ee37 6a65 	vsub.f32	s12, s14, s11
 80128c2:	ee07 1a90 	vmov	s15, r1
 80128c6:	ee26 5a24 	vmul.f32	s10, s12, s9
 80128ca:	ee77 5ae5 	vsub.f32	s11, s15, s11
 80128ce:	ee15 7a10 	vmov	r7, s10
 80128d2:	401f      	ands	r7, r3
 80128d4:	ee06 7a90 	vmov	s13, r7
 80128d8:	eea6 6ae7 	vfms.f32	s12, s13, s15
 80128dc:	ee37 7a65 	vsub.f32	s14, s14, s11
 80128e0:	ee65 7a05 	vmul.f32	s15, s10, s10
 80128e4:	eea6 6ac7 	vfms.f32	s12, s13, s14
 80128e8:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8012a50 <__ieee754_powf+0x440>
 80128ec:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8012a54 <__ieee754_powf+0x444>
 80128f0:	eee7 5a87 	vfma.f32	s11, s15, s14
 80128f4:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8012a58 <__ieee754_powf+0x448>
 80128f8:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80128fc:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 8012a2c <__ieee754_powf+0x41c>
 8012900:	eee7 5a27 	vfma.f32	s11, s14, s15
 8012904:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8012a5c <__ieee754_powf+0x44c>
 8012908:	eea5 7aa7 	vfma.f32	s14, s11, s15
 801290c:	eddf 5a54 	vldr	s11, [pc, #336]	@ 8012a60 <__ieee754_powf+0x450>
 8012910:	ee26 6a24 	vmul.f32	s12, s12, s9
 8012914:	eee7 5a27 	vfma.f32	s11, s14, s15
 8012918:	ee35 7a26 	vadd.f32	s14, s10, s13
 801291c:	ee67 4aa7 	vmul.f32	s9, s15, s15
 8012920:	ee27 7a06 	vmul.f32	s14, s14, s12
 8012924:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 8012928:	eea4 7aa5 	vfma.f32	s14, s9, s11
 801292c:	eef0 5a67 	vmov.f32	s11, s15
 8012930:	eee6 5aa6 	vfma.f32	s11, s13, s13
 8012934:	ee75 5a87 	vadd.f32	s11, s11, s14
 8012938:	ee15 1a90 	vmov	r1, s11
 801293c:	4019      	ands	r1, r3
 801293e:	ee05 1a90 	vmov	s11, r1
 8012942:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8012946:	eee6 7ae6 	vfms.f32	s15, s13, s13
 801294a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801294e:	ee67 7a85 	vmul.f32	s15, s15, s10
 8012952:	eee6 7a25 	vfma.f32	s15, s12, s11
 8012956:	eeb0 6a67 	vmov.f32	s12, s15
 801295a:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801295e:	ee16 1a10 	vmov	r1, s12
 8012962:	4019      	ands	r1, r3
 8012964:	ee06 1a10 	vmov	s12, r1
 8012968:	eeb0 7a46 	vmov.f32	s14, s12
 801296c:	eea6 7ae5 	vfms.f32	s14, s13, s11
 8012970:	493c      	ldr	r1, [pc, #240]	@ (8012a64 <__ieee754_powf+0x454>)
 8012972:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 8012976:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801297a:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8012a68 <__ieee754_powf+0x458>
 801297e:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 8012a6c <__ieee754_powf+0x45c>
 8012982:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012986:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8012a70 <__ieee754_powf+0x460>
 801298a:	eee6 7a07 	vfma.f32	s15, s12, s14
 801298e:	ed91 7a00 	vldr	s14, [r1]
 8012992:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012996:	ee07 2a10 	vmov	s14, r2
 801299a:	eef0 6a67 	vmov.f32	s13, s15
 801299e:	4a35      	ldr	r2, [pc, #212]	@ (8012a74 <__ieee754_powf+0x464>)
 80129a0:	eee6 6a25 	vfma.f32	s13, s12, s11
 80129a4:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 80129a8:	ed92 5a00 	vldr	s10, [r2]
 80129ac:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80129b0:	ee76 6a85 	vadd.f32	s13, s13, s10
 80129b4:	ee76 6a87 	vadd.f32	s13, s13, s14
 80129b8:	ee16 2a90 	vmov	r2, s13
 80129bc:	4013      	ands	r3, r2
 80129be:	ee06 3a90 	vmov	s13, r3
 80129c2:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80129c6:	ee37 7a45 	vsub.f32	s14, s14, s10
 80129ca:	eea6 7a65 	vfms.f32	s14, s12, s11
 80129ce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80129d2:	e70f      	b.n	80127f4 <__ieee754_powf+0x1e4>
 80129d4:	2601      	movs	r6, #1
 80129d6:	e75d      	b.n	8012894 <__ieee754_powf+0x284>
 80129d8:	d152      	bne.n	8012a80 <__ieee754_powf+0x470>
 80129da:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8012a78 <__ieee754_powf+0x468>
 80129de:	ee37 7a67 	vsub.f32	s14, s14, s15
 80129e2:	ee70 6aa6 	vadd.f32	s13, s1, s13
 80129e6:	eef4 6ac7 	vcmpe.f32	s13, s14
 80129ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129ee:	f73f af29 	bgt.w	8012844 <__ieee754_powf+0x234>
 80129f2:	2386      	movs	r3, #134	@ 0x86
 80129f4:	e048      	b.n	8012a88 <__ieee754_powf+0x478>
 80129f6:	4a21      	ldr	r2, [pc, #132]	@ (8012a7c <__ieee754_powf+0x46c>)
 80129f8:	4293      	cmp	r3, r2
 80129fa:	d907      	bls.n	8012a0c <__ieee754_powf+0x3fc>
 80129fc:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8012a00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a04:	bf4c      	ite	mi
 8012a06:	2001      	movmi	r0, #1
 8012a08:	2000      	movpl	r0, #0
 8012a0a:	e6c1      	b.n	8012790 <__ieee754_powf+0x180>
 8012a0c:	d138      	bne.n	8012a80 <__ieee754_powf+0x470>
 8012a0e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012a12:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8012a16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a1a:	dbea      	blt.n	80129f2 <__ieee754_powf+0x3e2>
 8012a1c:	e7ee      	b.n	80129fc <__ieee754_powf+0x3ec>
 8012a1e:	bf00      	nop
 8012a20:	00000000 	.word	0x00000000
 8012a24:	3f7ffff3 	.word	0x3f7ffff3
 8012a28:	3f800007 	.word	0x3f800007
 8012a2c:	3eaaaaab 	.word	0x3eaaaaab
 8012a30:	3fb8aa3b 	.word	0x3fb8aa3b
 8012a34:	36eca570 	.word	0x36eca570
 8012a38:	3fb8aa00 	.word	0x3fb8aa00
 8012a3c:	4b800000 	.word	0x4b800000
 8012a40:	001cc471 	.word	0x001cc471
 8012a44:	005db3d6 	.word	0x005db3d6
 8012a48:	080138b8 	.word	0x080138b8
 8012a4c:	fffff000 	.word	0xfffff000
 8012a50:	3e6c3255 	.word	0x3e6c3255
 8012a54:	3e53f142 	.word	0x3e53f142
 8012a58:	3e8ba305 	.word	0x3e8ba305
 8012a5c:	3edb6db7 	.word	0x3edb6db7
 8012a60:	3f19999a 	.word	0x3f19999a
 8012a64:	080138a8 	.word	0x080138a8
 8012a68:	3f76384f 	.word	0x3f76384f
 8012a6c:	3f763800 	.word	0x3f763800
 8012a70:	369dc3a0 	.word	0x369dc3a0
 8012a74:	080138b0 	.word	0x080138b0
 8012a78:	3338aa3c 	.word	0x3338aa3c
 8012a7c:	43160000 	.word	0x43160000
 8012a80:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 8012a84:	d971      	bls.n	8012b6a <__ieee754_powf+0x55a>
 8012a86:	15db      	asrs	r3, r3, #23
 8012a88:	3b7e      	subs	r3, #126	@ 0x7e
 8012a8a:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8012a8e:	4118      	asrs	r0, r3
 8012a90:	4408      	add	r0, r1
 8012a92:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8012a96:	4a3c      	ldr	r2, [pc, #240]	@ (8012b88 <__ieee754_powf+0x578>)
 8012a98:	3b7f      	subs	r3, #127	@ 0x7f
 8012a9a:	411a      	asrs	r2, r3
 8012a9c:	4002      	ands	r2, r0
 8012a9e:	ee07 2a10 	vmov	s14, r2
 8012aa2:	f3c0 0016 	ubfx	r0, r0, #0, #23
 8012aa6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8012aaa:	f1c3 0317 	rsb	r3, r3, #23
 8012aae:	4118      	asrs	r0, r3
 8012ab0:	2900      	cmp	r1, #0
 8012ab2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012ab6:	bfb8      	it	lt
 8012ab8:	4240      	neglt	r0, r0
 8012aba:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8012abe:	eddf 6a33 	vldr	s13, [pc, #204]	@ 8012b8c <__ieee754_powf+0x57c>
 8012ac2:	ed9f 6a33 	vldr	s12, [pc, #204]	@ 8012b90 <__ieee754_powf+0x580>
 8012ac6:	ee17 3a10 	vmov	r3, s14
 8012aca:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8012ace:	f023 030f 	bic.w	r3, r3, #15
 8012ad2:	ee07 3a10 	vmov	s14, r3
 8012ad6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012ada:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8012ade:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8012ae2:	eddf 7a2c 	vldr	s15, [pc, #176]	@ 8012b94 <__ieee754_powf+0x584>
 8012ae6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012aea:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8012aee:	eef0 6a67 	vmov.f32	s13, s15
 8012af2:	eee7 6a06 	vfma.f32	s13, s14, s12
 8012af6:	eef0 5a66 	vmov.f32	s11, s13
 8012afa:	eee7 5a46 	vfms.f32	s11, s14, s12
 8012afe:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8012b02:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8012b06:	ed9f 6a24 	vldr	s12, [pc, #144]	@ 8012b98 <__ieee754_powf+0x588>
 8012b0a:	eddf 5a24 	vldr	s11, [pc, #144]	@ 8012b9c <__ieee754_powf+0x58c>
 8012b0e:	eea7 6a25 	vfma.f32	s12, s14, s11
 8012b12:	eddf 5a23 	vldr	s11, [pc, #140]	@ 8012ba0 <__ieee754_powf+0x590>
 8012b16:	eee6 5a07 	vfma.f32	s11, s12, s14
 8012b1a:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 8012ba4 <__ieee754_powf+0x594>
 8012b1e:	eea5 6a87 	vfma.f32	s12, s11, s14
 8012b22:	eddf 5a21 	vldr	s11, [pc, #132]	@ 8012ba8 <__ieee754_powf+0x598>
 8012b26:	eee6 5a07 	vfma.f32	s11, s12, s14
 8012b2a:	eeb0 6a66 	vmov.f32	s12, s13
 8012b2e:	eea5 6ac7 	vfms.f32	s12, s11, s14
 8012b32:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8012b36:	ee66 5a86 	vmul.f32	s11, s13, s12
 8012b3a:	ee36 6a47 	vsub.f32	s12, s12, s14
 8012b3e:	eee6 7aa7 	vfma.f32	s15, s13, s15
 8012b42:	ee85 7a86 	vdiv.f32	s14, s11, s12
 8012b46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012b4a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8012b4e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8012b52:	ee10 3a10 	vmov	r3, s0
 8012b56:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8012b5a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8012b5e:	da06      	bge.n	8012b6e <__ieee754_powf+0x55e>
 8012b60:	f000 f84c 	bl	8012bfc <scalbnf>
 8012b64:	ee20 0a08 	vmul.f32	s0, s0, s16
 8012b68:	e56a      	b.n	8012640 <__ieee754_powf+0x30>
 8012b6a:	2000      	movs	r0, #0
 8012b6c:	e7a5      	b.n	8012aba <__ieee754_powf+0x4aa>
 8012b6e:	ee00 3a10 	vmov	s0, r3
 8012b72:	e7f7      	b.n	8012b64 <__ieee754_powf+0x554>
 8012b74:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8012b78:	e562      	b.n	8012640 <__ieee754_powf+0x30>
 8012b7a:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 8012bac <__ieee754_powf+0x59c>
 8012b7e:	e55f      	b.n	8012640 <__ieee754_powf+0x30>
 8012b80:	eeb0 0a48 	vmov.f32	s0, s16
 8012b84:	e55c      	b.n	8012640 <__ieee754_powf+0x30>
 8012b86:	bf00      	nop
 8012b88:	ff800000 	.word	0xff800000
 8012b8c:	3f317218 	.word	0x3f317218
 8012b90:	3f317200 	.word	0x3f317200
 8012b94:	35bfbe8c 	.word	0x35bfbe8c
 8012b98:	b5ddea0e 	.word	0xb5ddea0e
 8012b9c:	3331bb4c 	.word	0x3331bb4c
 8012ba0:	388ab355 	.word	0x388ab355
 8012ba4:	bb360b61 	.word	0xbb360b61
 8012ba8:	3e2aaaab 	.word	0x3e2aaaab
 8012bac:	00000000 	.word	0x00000000

08012bb0 <with_errnof>:
 8012bb0:	b510      	push	{r4, lr}
 8012bb2:	ed2d 8b02 	vpush	{d8}
 8012bb6:	eeb0 8a40 	vmov.f32	s16, s0
 8012bba:	4604      	mov	r4, r0
 8012bbc:	f7fd fba4 	bl	8010308 <__errno>
 8012bc0:	eeb0 0a48 	vmov.f32	s0, s16
 8012bc4:	ecbd 8b02 	vpop	{d8}
 8012bc8:	6004      	str	r4, [r0, #0]
 8012bca:	bd10      	pop	{r4, pc}

08012bcc <xflowf>:
 8012bcc:	b130      	cbz	r0, 8012bdc <xflowf+0x10>
 8012bce:	eef1 7a40 	vneg.f32	s15, s0
 8012bd2:	ee27 0a80 	vmul.f32	s0, s15, s0
 8012bd6:	2022      	movs	r0, #34	@ 0x22
 8012bd8:	f7ff bfea 	b.w	8012bb0 <with_errnof>
 8012bdc:	eef0 7a40 	vmov.f32	s15, s0
 8012be0:	e7f7      	b.n	8012bd2 <xflowf+0x6>
	...

08012be4 <__math_uflowf>:
 8012be4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8012bec <__math_uflowf+0x8>
 8012be8:	f7ff bff0 	b.w	8012bcc <xflowf>
 8012bec:	10000000 	.word	0x10000000

08012bf0 <__math_oflowf>:
 8012bf0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8012bf8 <__math_oflowf+0x8>
 8012bf4:	f7ff bfea 	b.w	8012bcc <xflowf>
 8012bf8:	70000000 	.word	0x70000000

08012bfc <scalbnf>:
 8012bfc:	ee10 3a10 	vmov	r3, s0
 8012c00:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8012c04:	d02b      	beq.n	8012c5e <scalbnf+0x62>
 8012c06:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8012c0a:	d302      	bcc.n	8012c12 <scalbnf+0x16>
 8012c0c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8012c10:	4770      	bx	lr
 8012c12:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8012c16:	d123      	bne.n	8012c60 <scalbnf+0x64>
 8012c18:	4b24      	ldr	r3, [pc, #144]	@ (8012cac <scalbnf+0xb0>)
 8012c1a:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8012cb0 <scalbnf+0xb4>
 8012c1e:	4298      	cmp	r0, r3
 8012c20:	ee20 0a27 	vmul.f32	s0, s0, s15
 8012c24:	db17      	blt.n	8012c56 <scalbnf+0x5a>
 8012c26:	ee10 3a10 	vmov	r3, s0
 8012c2a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8012c2e:	3a19      	subs	r2, #25
 8012c30:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8012c34:	4288      	cmp	r0, r1
 8012c36:	dd15      	ble.n	8012c64 <scalbnf+0x68>
 8012c38:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8012cb4 <scalbnf+0xb8>
 8012c3c:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8012cb8 <scalbnf+0xbc>
 8012c40:	ee10 3a10 	vmov	r3, s0
 8012c44:	eeb0 7a67 	vmov.f32	s14, s15
 8012c48:	2b00      	cmp	r3, #0
 8012c4a:	bfb8      	it	lt
 8012c4c:	eef0 7a66 	vmovlt.f32	s15, s13
 8012c50:	ee27 0a87 	vmul.f32	s0, s15, s14
 8012c54:	4770      	bx	lr
 8012c56:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8012cbc <scalbnf+0xc0>
 8012c5a:	ee27 0a80 	vmul.f32	s0, s15, s0
 8012c5e:	4770      	bx	lr
 8012c60:	0dd2      	lsrs	r2, r2, #23
 8012c62:	e7e5      	b.n	8012c30 <scalbnf+0x34>
 8012c64:	4410      	add	r0, r2
 8012c66:	28fe      	cmp	r0, #254	@ 0xfe
 8012c68:	dce6      	bgt.n	8012c38 <scalbnf+0x3c>
 8012c6a:	2800      	cmp	r0, #0
 8012c6c:	dd06      	ble.n	8012c7c <scalbnf+0x80>
 8012c6e:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8012c72:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8012c76:	ee00 3a10 	vmov	s0, r3
 8012c7a:	4770      	bx	lr
 8012c7c:	f110 0f16 	cmn.w	r0, #22
 8012c80:	da09      	bge.n	8012c96 <scalbnf+0x9a>
 8012c82:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8012cbc <scalbnf+0xc0>
 8012c86:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8012cc0 <scalbnf+0xc4>
 8012c8a:	ee10 3a10 	vmov	r3, s0
 8012c8e:	eeb0 7a67 	vmov.f32	s14, s15
 8012c92:	2b00      	cmp	r3, #0
 8012c94:	e7d9      	b.n	8012c4a <scalbnf+0x4e>
 8012c96:	3019      	adds	r0, #25
 8012c98:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8012c9c:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8012ca0:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8012cc4 <scalbnf+0xc8>
 8012ca4:	ee07 3a90 	vmov	s15, r3
 8012ca8:	e7d7      	b.n	8012c5a <scalbnf+0x5e>
 8012caa:	bf00      	nop
 8012cac:	ffff3cb0 	.word	0xffff3cb0
 8012cb0:	4c000000 	.word	0x4c000000
 8012cb4:	7149f2ca 	.word	0x7149f2ca
 8012cb8:	f149f2ca 	.word	0xf149f2ca
 8012cbc:	0da24260 	.word	0x0da24260
 8012cc0:	8da24260 	.word	0x8da24260
 8012cc4:	33000000 	.word	0x33000000

08012cc8 <fabsf>:
 8012cc8:	ee10 3a10 	vmov	r3, s0
 8012ccc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8012cd0:	ee00 3a10 	vmov	s0, r3
 8012cd4:	4770      	bx	lr
	...

08012cd8 <_init>:
 8012cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012cda:	bf00      	nop
 8012cdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012cde:	bc08      	pop	{r3}
 8012ce0:	469e      	mov	lr, r3
 8012ce2:	4770      	bx	lr

08012ce4 <_fini>:
 8012ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012ce6:	bf00      	nop
 8012ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012cea:	bc08      	pop	{r3}
 8012cec:	469e      	mov	lr, r3
 8012cee:	4770      	bx	lr
