
FlightComputer25.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000109c4  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a20  08010ba4  08010ba4  00011ba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080115c4  080115c4  000131f8  2**0
                  CONTENTS
  4 .ARM          00000008  080115c4  080115c4  000125c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080115cc  080115cc  000131f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080115cc  080115cc  000125cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080115d0  080115d0  000125d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f8  20000000  080115d4  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000169c8  200001f8  080117cc  000131f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20016bc0  080117cc  00013bc0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000131f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029148  00000000  00000000  00013228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000613f  00000000  00000000  0003c370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002218  00000000  00000000  000424b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001a02  00000000  00000000  000446c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025378  00000000  00000000  000460ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028b46  00000000  00000000  0006b442  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e016a  00000000  00000000  00093f88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001740f2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000095a0  00000000  00000000  00174138  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  0017d6d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001f8 	.word	0x200001f8
 80001fc:	00000000 	.word	0x00000000
 8000200:	08010b8c 	.word	0x08010b8c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001fc 	.word	0x200001fc
 800021c:	08010b8c 	.word	0x08010b8c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <accel_read_reg>:
#include <Drivers/bmi088.h>

void accel_read_reg(BMI088 *imu, uint8_t regAddr, uint8_t *data) {
 8000638:	b580      	push	{r7, lr}
 800063a:	b088      	sub	sp, #32
 800063c:	af02      	add	r7, sp, #8
 800063e:	60f8      	str	r0, [r7, #12]
 8000640:	460b      	mov	r3, r1
 8000642:	607a      	str	r2, [r7, #4]
 8000644:	72fb      	strb	r3, [r7, #11]
	uint8_t tx[3] = {regAddr | 0x80, 0x00, 0x00};
 8000646:	7afb      	ldrb	r3, [r7, #11]
 8000648:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800064c:	b2db      	uxtb	r3, r3
 800064e:	753b      	strb	r3, [r7, #20]
 8000650:	2300      	movs	r3, #0
 8000652:	757b      	strb	r3, [r7, #21]
 8000654:	2300      	movs	r3, #0
 8000656:	75bb      	strb	r3, [r7, #22]
	uint8_t rx[3];

	HAL_GPIO_WritePin(imu->csAccelPinBank, imu->accelCSPin, GPIO_PIN_RESET);
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	6858      	ldr	r0, [r3, #4]
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	899b      	ldrh	r3, [r3, #12]
 8000660:	2200      	movs	r2, #0
 8000662:	4619      	mov	r1, r3
 8000664:	f003 ff04 	bl	8004470 <HAL_GPIO_WritePin>
	HAL_StatusTypeDef status = HAL_SPI_TransmitReceive(imu->hspi, tx, rx, 3, HAL_MAX_DELAY);
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	6818      	ldr	r0, [r3, #0]
 800066c:	f107 0210 	add.w	r2, r7, #16
 8000670:	f107 0114 	add.w	r1, r7, #20
 8000674:	f04f 33ff 	mov.w	r3, #4294967295
 8000678:	9300      	str	r3, [sp, #0]
 800067a:	2303      	movs	r3, #3
 800067c:	f006 ffbf 	bl	80075fe <HAL_SPI_TransmitReceive>
 8000680:	4603      	mov	r3, r0
 8000682:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(imu->csAccelPinBank, imu->accelCSPin, GPIO_PIN_SET);
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	6858      	ldr	r0, [r3, #4]
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	899b      	ldrh	r3, [r3, #12]
 800068c:	2201      	movs	r2, #1
 800068e:	4619      	mov	r1, r3
 8000690:	f003 feee 	bl	8004470 <HAL_GPIO_WritePin>
	if (status == HAL_OK) {
 8000694:	7dfb      	ldrb	r3, [r7, #23]
 8000696:	2b00      	cmp	r3, #0
 8000698:	d103      	bne.n	80006a2 <accel_read_reg+0x6a>
		*data = rx[2];
 800069a:	7cba      	ldrb	r2, [r7, #18]
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	701a      	strb	r2, [r3, #0]
	} else {
		debug_print("Error: 0x%02X\r\n", status);
	}
}
 80006a0:	e004      	b.n	80006ac <accel_read_reg+0x74>
		debug_print("Error: 0x%02X\r\n", status);
 80006a2:	7dfb      	ldrb	r3, [r7, #23]
 80006a4:	4619      	mov	r1, r3
 80006a6:	4803      	ldr	r0, [pc, #12]	@ (80006b4 <accel_read_reg+0x7c>)
 80006a8:	f001 ffa8 	bl	80025fc <debug_print>
}
 80006ac:	bf00      	nop
 80006ae:	3718      	adds	r7, #24
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	08010ba4 	.word	0x08010ba4

080006b8 <gyro_read_reg>:

void gyro_read_reg(BMI088 *imu, uint8_t regAddr, uint8_t *data) {
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b088      	sub	sp, #32
 80006bc:	af02      	add	r7, sp, #8
 80006be:	60f8      	str	r0, [r7, #12]
 80006c0:	460b      	mov	r3, r1
 80006c2:	607a      	str	r2, [r7, #4]
 80006c4:	72fb      	strb	r3, [r7, #11]
	uint8_t tx[2] = {regAddr | 0x80, 0x00};
 80006c6:	7afb      	ldrb	r3, [r7, #11]
 80006c8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	753b      	strb	r3, [r7, #20]
 80006d0:	2300      	movs	r3, #0
 80006d2:	757b      	strb	r3, [r7, #21]
	uint8_t rx[2];

	HAL_GPIO_WritePin(imu->csGyroPinBank, imu->gyroCSPin, GPIO_PIN_RESET);
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	6898      	ldr	r0, [r3, #8]
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	89db      	ldrh	r3, [r3, #14]
 80006dc:	2200      	movs	r2, #0
 80006de:	4619      	mov	r1, r3
 80006e0:	f003 fec6 	bl	8004470 <HAL_GPIO_WritePin>
	HAL_StatusTypeDef status = HAL_SPI_TransmitReceive(imu->hspi, tx, rx, 2, HAL_MAX_DELAY);
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	6818      	ldr	r0, [r3, #0]
 80006e8:	f107 0210 	add.w	r2, r7, #16
 80006ec:	f107 0114 	add.w	r1, r7, #20
 80006f0:	f04f 33ff 	mov.w	r3, #4294967295
 80006f4:	9300      	str	r3, [sp, #0]
 80006f6:	2302      	movs	r3, #2
 80006f8:	f006 ff81 	bl	80075fe <HAL_SPI_TransmitReceive>
 80006fc:	4603      	mov	r3, r0
 80006fe:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(imu->csGyroPinBank, imu->gyroCSPin, GPIO_PIN_SET);
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	6898      	ldr	r0, [r3, #8]
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	89db      	ldrh	r3, [r3, #14]
 8000708:	2201      	movs	r2, #1
 800070a:	4619      	mov	r1, r3
 800070c:	f003 feb0 	bl	8004470 <HAL_GPIO_WritePin>
	if (status == HAL_OK) {
 8000710:	7dfb      	ldrb	r3, [r7, #23]
 8000712:	2b00      	cmp	r3, #0
 8000714:	d103      	bne.n	800071e <gyro_read_reg+0x66>
		*data = rx[1];
 8000716:	7c7a      	ldrb	r2, [r7, #17]
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	701a      	strb	r2, [r3, #0]
	} else {
		debug_print("Error: 0x%02X\r\n", status);
	}
}
 800071c:	e004      	b.n	8000728 <gyro_read_reg+0x70>
		debug_print("Error: 0x%02X\r\n", status);
 800071e:	7dfb      	ldrb	r3, [r7, #23]
 8000720:	4619      	mov	r1, r3
 8000722:	4803      	ldr	r0, [pc, #12]	@ (8000730 <gyro_read_reg+0x78>)
 8000724:	f001 ff6a 	bl	80025fc <debug_print>
}
 8000728:	bf00      	nop
 800072a:	3718      	adds	r7, #24
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	08010ba4 	.word	0x08010ba4

08000734 <accel_write_reg>:

void accel_write_reg(BMI088 *imu, uint8_t regAddr, uint8_t data) {
 8000734:	b580      	push	{r7, lr}
 8000736:	b084      	sub	sp, #16
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
 800073c:	460b      	mov	r3, r1
 800073e:	70fb      	strb	r3, [r7, #3]
 8000740:	4613      	mov	r3, r2
 8000742:	70bb      	strb	r3, [r7, #2]
	uint8_t tx[2] = {regAddr, data};
 8000744:	78fb      	ldrb	r3, [r7, #3]
 8000746:	733b      	strb	r3, [r7, #12]
 8000748:	78bb      	ldrb	r3, [r7, #2]
 800074a:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(imu->csAccelPinBank, imu->accelCSPin, GPIO_PIN_RESET);
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	6858      	ldr	r0, [r3, #4]
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	899b      	ldrh	r3, [r3, #12]
 8000754:	2200      	movs	r2, #0
 8000756:	4619      	mov	r1, r3
 8000758:	f003 fe8a 	bl	8004470 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(imu->hspi, tx, 2, HAL_MAX_DELAY);
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	6818      	ldr	r0, [r3, #0]
 8000760:	f107 010c 	add.w	r1, r7, #12
 8000764:	f04f 33ff 	mov.w	r3, #4294967295
 8000768:	2202      	movs	r2, #2
 800076a:	f006 fc9a 	bl	80070a2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(imu->csAccelPinBank, imu->accelCSPin, GPIO_PIN_SET);
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	6858      	ldr	r0, [r3, #4]
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	899b      	ldrh	r3, [r3, #12]
 8000776:	2201      	movs	r2, #1
 8000778:	4619      	mov	r1, r3
 800077a:	f003 fe79 	bl	8004470 <HAL_GPIO_WritePin>
}
 800077e:	bf00      	nop
 8000780:	3710      	adds	r7, #16
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}

08000786 <gyro_write_reg>:

void gyro_write_reg(BMI088 *imu, uint8_t regAddr, uint8_t data) {
 8000786:	b580      	push	{r7, lr}
 8000788:	b084      	sub	sp, #16
 800078a:	af00      	add	r7, sp, #0
 800078c:	6078      	str	r0, [r7, #4]
 800078e:	460b      	mov	r3, r1
 8000790:	70fb      	strb	r3, [r7, #3]
 8000792:	4613      	mov	r3, r2
 8000794:	70bb      	strb	r3, [r7, #2]
	uint8_t tx[2] = {regAddr, data};
 8000796:	78fb      	ldrb	r3, [r7, #3]
 8000798:	733b      	strb	r3, [r7, #12]
 800079a:	78bb      	ldrb	r3, [r7, #2]
 800079c:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(imu->csGyroPinBank, imu->gyroCSPin, GPIO_PIN_RESET);
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	6898      	ldr	r0, [r3, #8]
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	89db      	ldrh	r3, [r3, #14]
 80007a6:	2200      	movs	r2, #0
 80007a8:	4619      	mov	r1, r3
 80007aa:	f003 fe61 	bl	8004470 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(imu->hspi, tx, 2, HAL_MAX_DELAY);
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	6818      	ldr	r0, [r3, #0]
 80007b2:	f107 010c 	add.w	r1, r7, #12
 80007b6:	f04f 33ff 	mov.w	r3, #4294967295
 80007ba:	2202      	movs	r2, #2
 80007bc:	f006 fc71 	bl	80070a2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(imu->csGyroPinBank, imu->gyroCSPin, GPIO_PIN_SET);
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	6898      	ldr	r0, [r3, #8]
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	89db      	ldrh	r3, [r3, #14]
 80007c8:	2201      	movs	r2, #1
 80007ca:	4619      	mov	r1, r3
 80007cc:	f003 fe50 	bl	8004470 <HAL_GPIO_WritePin>
}
 80007d0:	bf00      	nop
 80007d2:	3710      	adds	r7, #16
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}

080007d8 <bmi088_init>:
void bmi088_init(BMI088 *imu,
		SPI_HandleTypeDef *spi,
		GPIO_TypeDef *csAccelPinBank,
		GPIO_TypeDef *csGyroPinBank,
		uint16_t accelCSPin,
		uint16_t gyroCSPin) {
 80007d8:	b580      	push	{r7, lr}
 80007da:	b088      	sub	sp, #32
 80007dc:	af00      	add	r7, sp, #0
 80007de:	60f8      	str	r0, [r7, #12]
 80007e0:	60b9      	str	r1, [r7, #8]
 80007e2:	607a      	str	r2, [r7, #4]
 80007e4:	603b      	str	r3, [r7, #0]

	imu->hspi = spi;
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	68ba      	ldr	r2, [r7, #8]
 80007ea:	601a      	str	r2, [r3, #0]
	imu->csAccelPinBank = csAccelPinBank;
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	687a      	ldr	r2, [r7, #4]
 80007f0:	605a      	str	r2, [r3, #4]
	imu->csGyroPinBank = csGyroPinBank;
 80007f2:	68fb      	ldr	r3, [r7, #12]
 80007f4:	683a      	ldr	r2, [r7, #0]
 80007f6:	609a      	str	r2, [r3, #8]

	imu->accelCSPin = accelCSPin;
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80007fc:	819a      	strh	r2, [r3, #12]
	imu->gyroCSPin = gyroCSPin;
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8000802:	81da      	strh	r2, [r3, #14]

	float accel_multipilier = 1.0f/(1<<15) * (1<<(BMI088_ACC_24G_RANGE + 1)) * 1.5f;
 8000804:	f04f 5369 	mov.w	r3, #977272832	@ 0x3a400000
 8000808:	61fb      	str	r3, [r7, #28]
	imu->accelConversion = 9.80665f * accel_multipilier; // data sheet page 27
 800080a:	edd7 7a07 	vldr	s15, [r7, #28]
 800080e:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 80009c0 <bmi088_init+0x1e8>
 8000812:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
	imu->gyroConversion = 0.01745329251f * 1000.0f / 16384.0f; // data sheet page 39 (rad/s)
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	4a69      	ldr	r2, [pc, #420]	@ (80009c4 <bmi088_init+0x1ec>)
 8000820:	62da      	str	r2, [r3, #44]	@ 0x2c

	// accel setup
	HAL_GPIO_WritePin(imu->csAccelPinBank, imu->accelCSPin, GPIO_PIN_RESET);
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	6858      	ldr	r0, [r3, #4]
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	899b      	ldrh	r3, [r3, #12]
 800082a:	2200      	movs	r2, #0
 800082c:	4619      	mov	r1, r3
 800082e:	f003 fe1f 	bl	8004470 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000832:	2001      	movs	r0, #1
 8000834:	f003 f9dc 	bl	8003bf0 <HAL_Delay>
	HAL_GPIO_WritePin(imu->csAccelPinBank, imu->accelCSPin, GPIO_PIN_SET);
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	6858      	ldr	r0, [r3, #4]
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	899b      	ldrh	r3, [r3, #12]
 8000840:	2201      	movs	r2, #1
 8000842:	4619      	mov	r1, r3
 8000844:	f003 fe14 	bl	8004470 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8000848:	2032      	movs	r0, #50	@ 0x32
 800084a:	f003 f9d1 	bl	8003bf0 <HAL_Delay>

	//soft reset the accelerometer
	accel_write_reg(imu, BMI088_ACC_REG_SOFTRESET, 0xB6);
 800084e:	22b6      	movs	r2, #182	@ 0xb6
 8000850:	217e      	movs	r1, #126	@ 0x7e
 8000852:	68f8      	ldr	r0, [r7, #12]
 8000854:	f7ff ff6e 	bl	8000734 <accel_write_reg>
	HAL_Delay(50);
 8000858:	2032      	movs	r0, #50	@ 0x32
 800085a:	f003 f9c9 	bl	8003bf0 <HAL_Delay>

	uint8_t dummy;
	accel_read_reg(imu, BMI088_ACC_REG_CHIP_ID, &dummy);
 800085e:	f107 031b 	add.w	r3, r7, #27
 8000862:	461a      	mov	r2, r3
 8000864:	2100      	movs	r1, #0
 8000866:	68f8      	ldr	r0, [r7, #12]
 8000868:	f7ff fee6 	bl	8000638 <accel_read_reg>

	uint8_t chipID;
	accel_read_reg(imu, BMI088_ACC_REG_CHIP_ID, &chipID);
 800086c:	f107 031a 	add.w	r3, r7, #26
 8000870:	461a      	mov	r2, r3
 8000872:	2100      	movs	r1, #0
 8000874:	68f8      	ldr	r0, [r7, #12]
 8000876:	f7ff fedf 	bl	8000638 <accel_read_reg>
	if (chipID != 0x1E) {
 800087a:	7ebb      	ldrb	r3, [r7, #26]
 800087c:	2b1e      	cmp	r3, #30
 800087e:	d004      	beq.n	800088a <bmi088_init+0xb2>
		debug_print("Chip ID Reg Address: 0x%02X\r\n", chipID);
 8000880:	7ebb      	ldrb	r3, [r7, #26]
 8000882:	4619      	mov	r1, r3
 8000884:	4850      	ldr	r0, [pc, #320]	@ (80009c8 <bmi088_init+0x1f0>)
 8000886:	f001 feb9 	bl	80025fc <debug_print>
	}
	HAL_Delay(10);
 800088a:	200a      	movs	r0, #10
 800088c:	f003 f9b0 	bl	8003bf0 <HAL_Delay>

	gyro_read_reg(imu, BMI088_GYR_REG_CHIP_ID, &chipID);
 8000890:	f107 031a 	add.w	r3, r7, #26
 8000894:	461a      	mov	r2, r3
 8000896:	2100      	movs	r1, #0
 8000898:	68f8      	ldr	r0, [r7, #12]
 800089a:	f7ff ff0d 	bl	80006b8 <gyro_read_reg>
	if (chipID != 0x0F) {
 800089e:	7ebb      	ldrb	r3, [r7, #26]
 80008a0:	2b0f      	cmp	r3, #15
 80008a2:	d004      	beq.n	80008ae <bmi088_init+0xd6>
		debug_print("fuck fuck 0x%02X\r\n", chipID);
 80008a4:	7ebb      	ldrb	r3, [r7, #26]
 80008a6:	4619      	mov	r1, r3
 80008a8:	4848      	ldr	r0, [pc, #288]	@ (80009cc <bmi088_init+0x1f4>)
 80008aa:	f001 fea7 	bl	80025fc <debug_print>
	}
	HAL_Delay(10);
 80008ae:	200a      	movs	r0, #10
 80008b0:	f003 f99e 	bl	8003bf0 <HAL_Delay>

	accel_write_reg(imu, BMI088_ACC_REG_PWR_CONF, 0x00);
 80008b4:	2200      	movs	r2, #0
 80008b6:	217c      	movs	r1, #124	@ 0x7c
 80008b8:	68f8      	ldr	r0, [r7, #12]
 80008ba:	f7ff ff3b 	bl	8000734 <accel_write_reg>
	HAL_Delay(10);
 80008be:	200a      	movs	r0, #10
 80008c0:	f003 f996 	bl	8003bf0 <HAL_Delay>

	accel_write_reg(imu, BMI088_ACC_REG_RANGE, BMI088_ACC_24G_RANGE);
 80008c4:	2203      	movs	r2, #3
 80008c6:	2141      	movs	r1, #65	@ 0x41
 80008c8:	68f8      	ldr	r0, [r7, #12]
 80008ca:	f7ff ff33 	bl	8000734 <accel_write_reg>
	HAL_Delay(10);
 80008ce:	200a      	movs	r0, #10
 80008d0:	f003 f98e 	bl	8003bf0 <HAL_Delay>

	accel_write_reg(imu, BMI088_ACC_REG_CONF, BMI088_ACC_ODR_200Hz | BMI088_ACC_BWP_OSR4);
 80008d4:	2289      	movs	r2, #137	@ 0x89
 80008d6:	2140      	movs	r1, #64	@ 0x40
 80008d8:	68f8      	ldr	r0, [r7, #12]
 80008da:	f7ff ff2b 	bl	8000734 <accel_write_reg>
	HAL_Delay(10);
 80008de:	200a      	movs	r0, #10
 80008e0:	f003 f986 	bl	8003bf0 <HAL_Delay>


	accel_write_reg(imu, BMI088_ACC_REG_PWR_CTRL, 0x04);
 80008e4:	2204      	movs	r2, #4
 80008e6:	217d      	movs	r1, #125	@ 0x7d
 80008e8:	68f8      	ldr	r0, [r7, #12]
 80008ea:	f7ff ff23 	bl	8000734 <accel_write_reg>
	HAL_Delay(10);
 80008ee:	200a      	movs	r0, #10
 80008f0:	f003 f97e 	bl	8003bf0 <HAL_Delay>

	uint8_t range;
	accel_read_reg(imu, BMI088_ACC_REG_RANGE, &range);
 80008f4:	f107 0319 	add.w	r3, r7, #25
 80008f8:	461a      	mov	r2, r3
 80008fa:	2141      	movs	r1, #65	@ 0x41
 80008fc:	68f8      	ldr	r0, [r7, #12]
 80008fe:	f7ff fe9b 	bl	8000638 <accel_read_reg>
	if ((range & 0x03) != BMI088_ACC_24G_RANGE) {
 8000902:	7e7b      	ldrb	r3, [r7, #25]
 8000904:	f003 0303 	and.w	r3, r3, #3
 8000908:	2b03      	cmp	r3, #3
 800090a:	d005      	beq.n	8000918 <bmi088_init+0x140>
		debug_print("Wrong accel range set! 0x%02X\r\n", range);
 800090c:	7e7b      	ldrb	r3, [r7, #25]
 800090e:	4619      	mov	r1, r3
 8000910:	482f      	ldr	r0, [pc, #188]	@ (80009d0 <bmi088_init+0x1f8>)
 8000912:	f001 fe73 	bl	80025fc <debug_print>
 8000916:	e004      	b.n	8000922 <bmi088_init+0x14a>
	} else {
		debug_print("Correct accel range set! 0x%02X\r\n", range);
 8000918:	7e7b      	ldrb	r3, [r7, #25]
 800091a:	4619      	mov	r1, r3
 800091c:	482d      	ldr	r0, [pc, #180]	@ (80009d4 <bmi088_init+0x1fc>)
 800091e:	f001 fe6d 	bl	80025fc <debug_print>
	}

	uint8_t sampling;
	accel_read_reg(imu, BMI088_ACC_REG_CONF, &sampling);
 8000922:	f107 0318 	add.w	r3, r7, #24
 8000926:	461a      	mov	r2, r3
 8000928:	2140      	movs	r1, #64	@ 0x40
 800092a:	68f8      	ldr	r0, [r7, #12]
 800092c:	f7ff fe84 	bl	8000638 <accel_read_reg>
	if (sampling != (BMI088_ACC_ODR_200Hz | BMI088_ACC_BWP_OSR4)) {
 8000930:	7e3b      	ldrb	r3, [r7, #24]
 8000932:	2b89      	cmp	r3, #137	@ 0x89
 8000934:	d005      	beq.n	8000942 <bmi088_init+0x16a>
		debug_print("Wrong accel sampling set! 0x%02X\r\n", sampling);
 8000936:	7e3b      	ldrb	r3, [r7, #24]
 8000938:	4619      	mov	r1, r3
 800093a:	4827      	ldr	r0, [pc, #156]	@ (80009d8 <bmi088_init+0x200>)
 800093c:	f001 fe5e 	bl	80025fc <debug_print>
 8000940:	e004      	b.n	800094c <bmi088_init+0x174>
	} else {
		debug_print("Correct accel sampling set! 0x%02X\r\n", sampling);
 8000942:	7e3b      	ldrb	r3, [r7, #24]
 8000944:	4619      	mov	r1, r3
 8000946:	4825      	ldr	r0, [pc, #148]	@ (80009dc <bmi088_init+0x204>)
 8000948:	f001 fe58 	bl	80025fc <debug_print>
	}

	uint8_t isOn;
	accel_read_reg(imu, BMI088_ACC_REG_PWR_CTRL, &isOn);
 800094c:	f107 0317 	add.w	r3, r7, #23
 8000950:	461a      	mov	r2, r3
 8000952:	217d      	movs	r1, #125	@ 0x7d
 8000954:	68f8      	ldr	r0, [r7, #12]
 8000956:	f7ff fe6f 	bl	8000638 <accel_read_reg>
	if (isOn != 0x04) {
 800095a:	7dfb      	ldrb	r3, [r7, #23]
 800095c:	2b04      	cmp	r3, #4
 800095e:	d005      	beq.n	800096c <bmi088_init+0x194>
		debug_print("Accel not turned on! 0x%02X\r\n", isOn);
 8000960:	7dfb      	ldrb	r3, [r7, #23]
 8000962:	4619      	mov	r1, r3
 8000964:	481e      	ldr	r0, [pc, #120]	@ (80009e0 <bmi088_init+0x208>)
 8000966:	f001 fe49 	bl	80025fc <debug_print>
 800096a:	e004      	b.n	8000976 <bmi088_init+0x19e>
	} else {
		debug_print("Accel turned on! 0x%02X\r\n", isOn);
 800096c:	7dfb      	ldrb	r3, [r7, #23]
 800096e:	4619      	mov	r1, r3
 8000970:	481c      	ldr	r0, [pc, #112]	@ (80009e4 <bmi088_init+0x20c>)
 8000972:	f001 fe43 	bl	80025fc <debug_print>
	}

	// gyro setup
	HAL_GPIO_WritePin(imu->csGyroPinBank, imu->gyroCSPin, GPIO_PIN_SET);
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	6898      	ldr	r0, [r3, #8]
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	89db      	ldrh	r3, [r3, #14]
 800097e:	2201      	movs	r2, #1
 8000980:	4619      	mov	r1, r3
 8000982:	f003 fd75 	bl	8004470 <HAL_GPIO_WritePin>

	gyro_write_reg(imu, BMI088_GYR_REG_SOFTRESET, 0xB6);
 8000986:	22b6      	movs	r2, #182	@ 0xb6
 8000988:	2114      	movs	r1, #20
 800098a:	68f8      	ldr	r0, [r7, #12]
 800098c:	f7ff fefb 	bl	8000786 <gyro_write_reg>
	HAL_Delay(250);
 8000990:	20fa      	movs	r0, #250	@ 0xfa
 8000992:	f003 f92d 	bl	8003bf0 <HAL_Delay>

	gyro_write_reg(imu, BMI088_GYR_REG_RANGE, BMI088_GYR_2000DPS_RANGE);
 8000996:	2200      	movs	r2, #0
 8000998:	210f      	movs	r1, #15
 800099a:	68f8      	ldr	r0, [r7, #12]
 800099c:	f7ff fef3 	bl	8000786 <gyro_write_reg>
	HAL_Delay(10);
 80009a0:	200a      	movs	r0, #10
 80009a2:	f003 f925 	bl	8003bf0 <HAL_Delay>

	gyro_write_reg(imu, BMI088_GYR_REG_BANDWIDTH, BMI088_GYR_ODR_100Hz_BW_32Hz);
 80009a6:	2207      	movs	r2, #7
 80009a8:	2110      	movs	r1, #16
 80009aa:	68f8      	ldr	r0, [r7, #12]
 80009ac:	f7ff feeb 	bl	8000786 <gyro_write_reg>
	HAL_Delay(10);
 80009b0:	200a      	movs	r0, #10
 80009b2:	f003 f91d 	bl	8003bf0 <HAL_Delay>
}
 80009b6:	bf00      	nop
 80009b8:	3720      	adds	r7, #32
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	411ce80a 	.word	0x411ce80a
 80009c4:	3a8ba058 	.word	0x3a8ba058
 80009c8:	08010bb4 	.word	0x08010bb4
 80009cc:	08010bd4 	.word	0x08010bd4
 80009d0:	08010be8 	.word	0x08010be8
 80009d4:	08010c08 	.word	0x08010c08
 80009d8:	08010c2c 	.word	0x08010c2c
 80009dc:	08010c50 	.word	0x08010c50
 80009e0:	08010c78 	.word	0x08010c78
 80009e4:	08010c98 	.word	0x08010c98

080009e8 <accel_step>:

void accel_step(BMI088 *imu) {
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b08a      	sub	sp, #40	@ 0x28
 80009ec:	af02      	add	r7, sp, #8
 80009ee:	6078      	str	r0, [r7, #4]
	uint8_t tx[8] = {(BMI088_ACC_REG_DATA | 0x80), 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 80009f0:	4a32      	ldr	r2, [pc, #200]	@ (8000abc <accel_step+0xd4>)
 80009f2:	f107 0310 	add.w	r3, r7, #16
 80009f6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009fa:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t rx[8];

	HAL_GPIO_WritePin(imu->csAccelPinBank, imu->accelCSPin, GPIO_PIN_RESET);
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	6858      	ldr	r0, [r3, #4]
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	899b      	ldrh	r3, [r3, #12]
 8000a06:	2200      	movs	r2, #0
 8000a08:	4619      	mov	r1, r3
 8000a0a:	f003 fd31 	bl	8004470 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(imu->hspi, tx, rx, 8, HAL_MAX_DELAY);
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	6818      	ldr	r0, [r3, #0]
 8000a12:	f107 0208 	add.w	r2, r7, #8
 8000a16:	f107 0110 	add.w	r1, r7, #16
 8000a1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a1e:	9300      	str	r3, [sp, #0]
 8000a20:	2308      	movs	r3, #8
 8000a22:	f006 fdec 	bl	80075fe <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(imu->csAccelPinBank, imu->accelCSPin, GPIO_PIN_SET);
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	6858      	ldr	r0, [r3, #4]
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	899b      	ldrh	r3, [r3, #12]
 8000a2e:	2201      	movs	r2, #1
 8000a30:	4619      	mov	r1, r3
 8000a32:	f003 fd1d 	bl	8004470 <HAL_GPIO_WritePin>

	int16_t raw_x = (int16_t) ((rx[3] << 8) | rx[2]);
 8000a36:	7afb      	ldrb	r3, [r7, #11]
 8000a38:	021b      	lsls	r3, r3, #8
 8000a3a:	b21a      	sxth	r2, r3
 8000a3c:	7abb      	ldrb	r3, [r7, #10]
 8000a3e:	b21b      	sxth	r3, r3
 8000a40:	4313      	orrs	r3, r2
 8000a42:	83fb      	strh	r3, [r7, #30]
	int16_t raw_y = (int16_t) ((rx[5] << 8) | rx[4]);
 8000a44:	7b7b      	ldrb	r3, [r7, #13]
 8000a46:	021b      	lsls	r3, r3, #8
 8000a48:	b21a      	sxth	r2, r3
 8000a4a:	7b3b      	ldrb	r3, [r7, #12]
 8000a4c:	b21b      	sxth	r3, r3
 8000a4e:	4313      	orrs	r3, r2
 8000a50:	83bb      	strh	r3, [r7, #28]
	int16_t raw_z = (int16_t) ((rx[7] << 8) | rx[6]);
 8000a52:	7bfb      	ldrb	r3, [r7, #15]
 8000a54:	021b      	lsls	r3, r3, #8
 8000a56:	b21a      	sxth	r2, r3
 8000a58:	7bbb      	ldrb	r3, [r7, #14]
 8000a5a:	b21b      	sxth	r3, r3
 8000a5c:	4313      	orrs	r3, r2
 8000a5e:	837b      	strh	r3, [r7, #26]

	imu->lastAccel[0] = raw_x * imu->accelConversion;
 8000a60:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000a64:	ee07 3a90 	vmov	s15, r3
 8000a68:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8000a72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	edc3 7a04 	vstr	s15, [r3, #16]
	imu->lastAccel[1] = raw_y * imu->accelConversion;
 8000a7c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000a80:	ee07 3a90 	vmov	s15, r3
 8000a84:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8000a8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	edc3 7a05 	vstr	s15, [r3, #20]
	imu->lastAccel[2] = raw_z * imu->accelConversion;
 8000a98:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000a9c:	ee07 3a90 	vmov	s15, r3
 8000aa0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8000aaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	edc3 7a06 	vstr	s15, [r3, #24]
}
 8000ab4:	bf00      	nop
 8000ab6:	3720      	adds	r7, #32
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	08010cb4 	.word	0x08010cb4

08000ac0 <gyro_step>:

void gyro_step(BMI088 *imu) {
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b08a      	sub	sp, #40	@ 0x28
 8000ac4:	af02      	add	r7, sp, #8
 8000ac6:	6078      	str	r0, [r7, #4]
	uint8_t tx[7] = {(BMI088_GYR_REG_DATA | 0x80), 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8000ac8:	4a34      	ldr	r2, [pc, #208]	@ (8000b9c <gyro_step+0xdc>)
 8000aca:	f107 0310 	add.w	r3, r7, #16
 8000ace:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ad2:	6018      	str	r0, [r3, #0]
 8000ad4:	3304      	adds	r3, #4
 8000ad6:	8019      	strh	r1, [r3, #0]
 8000ad8:	3302      	adds	r3, #2
 8000ada:	0c0a      	lsrs	r2, r1, #16
 8000adc:	701a      	strb	r2, [r3, #0]
	uint8_t rx[7];

	HAL_GPIO_WritePin(imu->csGyroPinBank, imu->gyroCSPin, GPIO_PIN_RESET);
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	6898      	ldr	r0, [r3, #8]
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	89db      	ldrh	r3, [r3, #14]
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	4619      	mov	r1, r3
 8000aea:	f003 fcc1 	bl	8004470 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(imu->hspi, tx, rx, 7, HAL_MAX_DELAY);
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	6818      	ldr	r0, [r3, #0]
 8000af2:	f107 0208 	add.w	r2, r7, #8
 8000af6:	f107 0110 	add.w	r1, r7, #16
 8000afa:	f04f 33ff 	mov.w	r3, #4294967295
 8000afe:	9300      	str	r3, [sp, #0]
 8000b00:	2307      	movs	r3, #7
 8000b02:	f006 fd7c 	bl	80075fe <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(imu->csGyroPinBank, imu->gyroCSPin, GPIO_PIN_SET);
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	6898      	ldr	r0, [r3, #8]
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	89db      	ldrh	r3, [r3, #14]
 8000b0e:	2201      	movs	r2, #1
 8000b10:	4619      	mov	r1, r3
 8000b12:	f003 fcad 	bl	8004470 <HAL_GPIO_WritePin>

	int16_t raw_x = (int16_t) ((rx[2] << 8) | rx[1]);
 8000b16:	7abb      	ldrb	r3, [r7, #10]
 8000b18:	021b      	lsls	r3, r3, #8
 8000b1a:	b21a      	sxth	r2, r3
 8000b1c:	7a7b      	ldrb	r3, [r7, #9]
 8000b1e:	b21b      	sxth	r3, r3
 8000b20:	4313      	orrs	r3, r2
 8000b22:	83fb      	strh	r3, [r7, #30]
	int16_t raw_y = (int16_t) ((rx[4] << 8) | rx[3]);
 8000b24:	7b3b      	ldrb	r3, [r7, #12]
 8000b26:	021b      	lsls	r3, r3, #8
 8000b28:	b21a      	sxth	r2, r3
 8000b2a:	7afb      	ldrb	r3, [r7, #11]
 8000b2c:	b21b      	sxth	r3, r3
 8000b2e:	4313      	orrs	r3, r2
 8000b30:	83bb      	strh	r3, [r7, #28]
	int16_t raw_z = (int16_t) ((rx[6] << 8) | rx[5]);
 8000b32:	7bbb      	ldrb	r3, [r7, #14]
 8000b34:	021b      	lsls	r3, r3, #8
 8000b36:	b21a      	sxth	r2, r3
 8000b38:	7b7b      	ldrb	r3, [r7, #13]
 8000b3a:	b21b      	sxth	r3, r3
 8000b3c:	4313      	orrs	r3, r2
 8000b3e:	837b      	strh	r3, [r7, #26]

	imu->lastGyro[0] = raw_x * imu->gyroConversion;
 8000b40:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000b44:	ee07 3a90 	vmov	s15, r3
 8000b48:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8000b52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	edc3 7a07 	vstr	s15, [r3, #28]
	imu->lastGyro[1] = raw_y * imu->gyroConversion;
 8000b5c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000b60:	ee07 3a90 	vmov	s15, r3
 8000b64:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8000b6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	edc3 7a08 	vstr	s15, [r3, #32]
	imu->lastGyro[2] = raw_z * imu->gyroConversion;
 8000b78:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000b7c:	ee07 3a90 	vmov	s15, r3
 8000b80:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8000b8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
}
 8000b94:	bf00      	nop
 8000b96:	3720      	adds	r7, #32
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	08010cbc 	.word	0x08010cbc

08000ba0 <accel_get>:

float *accel_get(BMI088 *imu) {
 8000ba0:	b480      	push	{r7}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
	return imu->lastAccel;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	3310      	adds	r3, #16
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	370c      	adds	r7, #12
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr

08000bb8 <gyro_get>:

float *gyro_get(BMI088 *imu) {
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
	return imu->lastGyro;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	331c      	adds	r3, #28
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	370c      	adds	r7, #12
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr

08000bd0 <bmp_read_reg>:
#define BMP390_STATUS_DRDY_PRES (1 << 5) // Data ready pressure bit
#define BMP390_STATUS_DRDY_TEMP (1 << 6) // Data ready temperature bit
#define BMP390_SPI_TIMEOUT      (100)


static bool bmp_read_reg(BMP390 *baro, uint8_t reg, uint8_t *data) {
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b088      	sub	sp, #32
 8000bd4:	af02      	add	r7, sp, #8
 8000bd6:	60f8      	str	r0, [r7, #12]
 8000bd8:	460b      	mov	r3, r1
 8000bda:	607a      	str	r2, [r7, #4]
 8000bdc:	72fb      	strb	r3, [r7, #11]
    uint8_t tx[3] = { reg | 0x80, 0x00, 0x00 };
 8000bde:	7afb      	ldrb	r3, [r7, #11]
 8000be0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000be4:	b2db      	uxtb	r3, r3
 8000be6:	753b      	strb	r3, [r7, #20]
 8000be8:	2300      	movs	r3, #0
 8000bea:	757b      	strb	r3, [r7, #21]
 8000bec:	2300      	movs	r3, #0
 8000bee:	75bb      	strb	r3, [r7, #22]
    uint8_t rx[3] = {0};
 8000bf0:	4b1a      	ldr	r3, [pc, #104]	@ (8000c5c <bmp_read_reg+0x8c>)
 8000bf2:	881b      	ldrh	r3, [r3, #0]
 8000bf4:	823b      	strh	r3, [r7, #16]
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	74bb      	strb	r3, [r7, #18]
    HAL_StatusTypeDef status;

    HAL_GPIO_WritePin(baro->csPort, baro->csPin, GPIO_PIN_RESET);
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	6858      	ldr	r0, [r3, #4]
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	891b      	ldrh	r3, [r3, #8]
 8000c02:	2200      	movs	r2, #0
 8000c04:	4619      	mov	r1, r3
 8000c06:	f003 fc33 	bl	8004470 <HAL_GPIO_WritePin>
    status = HAL_SPI_TransmitReceive(baro->hspi, tx, rx, 3, BMP390_SPI_TIMEOUT);
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	6818      	ldr	r0, [r3, #0]
 8000c0e:	f107 0210 	add.w	r2, r7, #16
 8000c12:	f107 0114 	add.w	r1, r7, #20
 8000c16:	2364      	movs	r3, #100	@ 0x64
 8000c18:	9300      	str	r3, [sp, #0]
 8000c1a:	2303      	movs	r3, #3
 8000c1c:	f006 fcef 	bl	80075fe <HAL_SPI_TransmitReceive>
 8000c20:	4603      	mov	r3, r0
 8000c22:	75fb      	strb	r3, [r7, #23]
    HAL_GPIO_WritePin(baro->csPort, baro->csPin, GPIO_PIN_SET);
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	6858      	ldr	r0, [r3, #4]
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	891b      	ldrh	r3, [r3, #8]
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	4619      	mov	r1, r3
 8000c30:	f003 fc1e 	bl	8004470 <HAL_GPIO_WritePin>

    if (status != HAL_OK) {
 8000c34:	7dfb      	ldrb	r3, [r7, #23]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d007      	beq.n	8000c4a <bmp_read_reg+0x7a>
        debug_print("BMP390 SPI Error (Read Reg 0x%02X): %d\r\n", reg, status);
 8000c3a:	7afb      	ldrb	r3, [r7, #11]
 8000c3c:	7dfa      	ldrb	r2, [r7, #23]
 8000c3e:	4619      	mov	r1, r3
 8000c40:	4807      	ldr	r0, [pc, #28]	@ (8000c60 <bmp_read_reg+0x90>)
 8000c42:	f001 fcdb 	bl	80025fc <debug_print>
        return false;
 8000c46:	2300      	movs	r3, #0
 8000c48:	e003      	b.n	8000c52 <bmp_read_reg+0x82>
    }

    *data = rx[2];
 8000c4a:	7cba      	ldrb	r2, [r7, #18]
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	701a      	strb	r2, [r3, #0]
    return true;
 8000c50:	2301      	movs	r3, #1
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3718      	adds	r7, #24
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	08010cf0 	.word	0x08010cf0
 8000c60:	08010cc4 	.word	0x08010cc4

08000c64 <bmp_write_reg>:

static bool bmp_write_reg(BMP390 *baro, uint8_t reg, uint8_t data) {
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b084      	sub	sp, #16
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
 8000c6c:	460b      	mov	r3, r1
 8000c6e:	70fb      	strb	r3, [r7, #3]
 8000c70:	4613      	mov	r3, r2
 8000c72:	70bb      	strb	r3, [r7, #2]
    uint8_t tx[2] = { reg & ~0x80, data };
 8000c74:	78fb      	ldrb	r3, [r7, #3]
 8000c76:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000c7a:	b2db      	uxtb	r3, r3
 8000c7c:	733b      	strb	r3, [r7, #12]
 8000c7e:	78bb      	ldrb	r3, [r7, #2]
 8000c80:	737b      	strb	r3, [r7, #13]
    HAL_StatusTypeDef status;

    HAL_GPIO_WritePin(baro->csPort, baro->csPin, GPIO_PIN_RESET);
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	6858      	ldr	r0, [r3, #4]
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	891b      	ldrh	r3, [r3, #8]
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	f003 fbef 	bl	8004470 <HAL_GPIO_WritePin>
    status = HAL_SPI_Transmit(baro->hspi, tx, 2, BMP390_SPI_TIMEOUT);
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	6818      	ldr	r0, [r3, #0]
 8000c96:	f107 010c 	add.w	r1, r7, #12
 8000c9a:	2364      	movs	r3, #100	@ 0x64
 8000c9c:	2202      	movs	r2, #2
 8000c9e:	f006 fa00 	bl	80070a2 <HAL_SPI_Transmit>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(baro->csPort, baro->csPin, GPIO_PIN_SET);
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	6858      	ldr	r0, [r3, #4]
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	891b      	ldrh	r3, [r3, #8]
 8000cae:	2201      	movs	r2, #1
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	f003 fbdd 	bl	8004470 <HAL_GPIO_WritePin>

    if (status != HAL_OK) {
 8000cb6:	7bfb      	ldrb	r3, [r7, #15]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d007      	beq.n	8000ccc <bmp_write_reg+0x68>
        debug_print("BMP390 SPI Error (Write Reg 0x%02X): %d\r\n", reg, status);
 8000cbc:	78fb      	ldrb	r3, [r7, #3]
 8000cbe:	7bfa      	ldrb	r2, [r7, #15]
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	4805      	ldr	r0, [pc, #20]	@ (8000cd8 <bmp_write_reg+0x74>)
 8000cc4:	f001 fc9a 	bl	80025fc <debug_print>
        return false;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	e000      	b.n	8000cce <bmp_write_reg+0x6a>
    }
    return true;
 8000ccc:	2301      	movs	r3, #1
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3710      	adds	r7, #16
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	08010cf4 	.word	0x08010cf4

08000cdc <bmp_read_buf>:

static bool bmp_read_buf(BMP390 *baro, uint8_t reg, uint8_t *data, uint8_t len) {
 8000cdc:	b590      	push	{r4, r7, lr}
 8000cde:	b099      	sub	sp, #100	@ 0x64
 8000ce0:	af02      	add	r7, sp, #8
 8000ce2:	60f8      	str	r0, [r7, #12]
 8000ce4:	607a      	str	r2, [r7, #4]
 8000ce6:	461a      	mov	r2, r3
 8000ce8:	460b      	mov	r3, r1
 8000cea:	72fb      	strb	r3, [r7, #11]
 8000cec:	4613      	mov	r3, r2
 8000cee:	72bb      	strb	r3, [r7, #10]
    if (len == 0) return true;
 8000cf0:	7abb      	ldrb	r3, [r7, #10]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d101      	bne.n	8000cfa <bmp_read_buf+0x1e>
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	e061      	b.n	8000dbe <bmp_read_buf+0xe2>

    #define MAX_SPI_BUF_LEN 32
    if (len > MAX_SPI_BUF_LEN - 2) {
 8000cfa:	7abb      	ldrb	r3, [r7, #10]
 8000cfc:	2b1e      	cmp	r3, #30
 8000cfe:	d906      	bls.n	8000d0e <bmp_read_buf+0x32>
         debug_print("BMP390 Read Buf Error: len %d too large\r\n", len);
 8000d00:	7abb      	ldrb	r3, [r7, #10]
 8000d02:	4619      	mov	r1, r3
 8000d04:	4830      	ldr	r0, [pc, #192]	@ (8000dc8 <bmp_read_buf+0xec>)
 8000d06:	f001 fc79 	bl	80025fc <debug_print>
         return false;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	e057      	b.n	8000dbe <bmp_read_buf+0xe2>
    }

    uint8_t total = 2 + len;
 8000d0e:	7abb      	ldrb	r3, [r7, #10]
 8000d10:	3302      	adds	r3, #2
 8000d12:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    uint8_t tx[MAX_SPI_BUF_LEN] = {0};
 8000d16:	2300      	movs	r3, #0
 8000d18:	637b      	str	r3, [r7, #52]	@ 0x34
 8000d1a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000d1e:	2200      	movs	r2, #0
 8000d20:	601a      	str	r2, [r3, #0]
 8000d22:	605a      	str	r2, [r3, #4]
 8000d24:	609a      	str	r2, [r3, #8]
 8000d26:	60da      	str	r2, [r3, #12]
 8000d28:	611a      	str	r2, [r3, #16]
 8000d2a:	615a      	str	r2, [r3, #20]
 8000d2c:	619a      	str	r2, [r3, #24]
    uint8_t rx[MAX_SPI_BUF_LEN] = {0};
 8000d2e:	2300      	movs	r3, #0
 8000d30:	617b      	str	r3, [r7, #20]
 8000d32:	f107 0318 	add.w	r3, r7, #24
 8000d36:	2200      	movs	r2, #0
 8000d38:	601a      	str	r2, [r3, #0]
 8000d3a:	605a      	str	r2, [r3, #4]
 8000d3c:	609a      	str	r2, [r3, #8]
 8000d3e:	60da      	str	r2, [r3, #12]
 8000d40:	611a      	str	r2, [r3, #16]
 8000d42:	615a      	str	r2, [r3, #20]
 8000d44:	619a      	str	r2, [r3, #24]
    HAL_StatusTypeDef status;

    tx[0] = reg | 0x80;
 8000d46:	7afb      	ldrb	r3, [r7, #11]
 8000d48:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000d4c:	b2db      	uxtb	r3, r3
 8000d4e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    HAL_GPIO_WritePin(baro->csPort, baro->csPin, GPIO_PIN_RESET);
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	6858      	ldr	r0, [r3, #4]
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	891b      	ldrh	r3, [r3, #8]
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	f003 fb87 	bl	8004470 <HAL_GPIO_WritePin>
    status = HAL_SPI_TransmitReceive(baro->hspi, tx, rx, total, BMP390_SPI_TIMEOUT);
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	6818      	ldr	r0, [r3, #0]
 8000d66:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8000d6a:	b29b      	uxth	r3, r3
 8000d6c:	f107 0214 	add.w	r2, r7, #20
 8000d70:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8000d74:	2464      	movs	r4, #100	@ 0x64
 8000d76:	9400      	str	r4, [sp, #0]
 8000d78:	f006 fc41 	bl	80075fe <HAL_SPI_TransmitReceive>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
    HAL_GPIO_WritePin(baro->csPort, baro->csPin, GPIO_PIN_SET);
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	6858      	ldr	r0, [r3, #4]
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	891b      	ldrh	r3, [r3, #8]
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	f003 fb6f 	bl	8004470 <HAL_GPIO_WritePin>

    if (status != HAL_OK) {
 8000d92:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d008      	beq.n	8000dac <bmp_read_buf+0xd0>
        debug_print("BMP390 SPI Error (Read Buf 0x%02X, len %d): %d\r\n", reg, len, status);
 8000d9a:	7af9      	ldrb	r1, [r7, #11]
 8000d9c:	7aba      	ldrb	r2, [r7, #10]
 8000d9e:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8000da2:	480a      	ldr	r0, [pc, #40]	@ (8000dcc <bmp_read_buf+0xf0>)
 8000da4:	f001 fc2a 	bl	80025fc <debug_print>
        return false;
 8000da8:	2300      	movs	r3, #0
 8000daa:	e008      	b.n	8000dbe <bmp_read_buf+0xe2>
    }

    memcpy(data, rx + 2, len);
 8000dac:	f107 0314 	add.w	r3, r7, #20
 8000db0:	3302      	adds	r3, #2
 8000db2:	7aba      	ldrb	r2, [r7, #10]
 8000db4:	4619      	mov	r1, r3
 8000db6:	6878      	ldr	r0, [r7, #4]
 8000db8:	f00e feb4 	bl	800fb24 <memcpy>
    return true;
 8000dbc:	2301      	movs	r3, #1
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	375c      	adds	r7, #92	@ 0x5c
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd90      	pop	{r4, r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	08010d20 	.word	0x08010d20
 8000dcc:	08010d4c 	.word	0x08010d4c

08000dd0 <bmp_parse_calib>:

static void bmp_parse_calib(BMP390 *baro, uint8_t *raw) {
 8000dd0:	b480      	push	{r7}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
 8000dd8:	6039      	str	r1, [r7, #0]
    baro->raw_calib.nvm_par_t1 = BMP390_CONCAT2BYTES(raw[1], raw[0]);
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	3301      	adds	r3, #1
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	021b      	lsls	r3, r3, #8
 8000de2:	b21a      	sxth	r2, r3
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	b21b      	sxth	r3, r3
 8000dea:	4313      	orrs	r3, r2
 8000dec:	b21b      	sxth	r3, r3
 8000dee:	b29a      	uxth	r2, r3
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	82da      	strh	r2, [r3, #22]
    baro->calib.par_t1 = (float)baro->raw_calib.nvm_par_t1 / powf(2, -8);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	8adb      	ldrh	r3, [r3, #22]
 8000df8:	ee07 3a90 	vmov	s15, r3
 8000dfc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000e00:	eddf 6aa4 	vldr	s13, [pc, #656]	@ 8001094 <bmp_parse_calib+0x2c4>
 8000e04:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

    baro->raw_calib.nvm_par_t2 = BMP390_CONCAT2BYTES(raw[3], raw[2]);
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	3303      	adds	r3, #3
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	021b      	lsls	r3, r3, #8
 8000e16:	b21a      	sxth	r2, r3
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	3302      	adds	r3, #2
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	b21b      	sxth	r3, r3
 8000e20:	4313      	orrs	r3, r2
 8000e22:	b21b      	sxth	r3, r3
 8000e24:	b29a      	uxth	r2, r3
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	831a      	strh	r2, [r3, #24]
    baro->calib.par_t2 = (float)baro->raw_calib.nvm_par_t2 / powf(2, 30);
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	8b1b      	ldrh	r3, [r3, #24]
 8000e2e:	ee07 3a90 	vmov	s15, r3
 8000e32:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000e36:	eddf 6a98 	vldr	s13, [pc, #608]	@ 8001098 <bmp_parse_calib+0x2c8>
 8000e3a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30

    baro->raw_calib.nvm_par_t3 = (int8_t)raw[4];
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	3304      	adds	r3, #4
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	b25a      	sxtb	r2, r3
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	769a      	strb	r2, [r3, #26]
    baro->calib.par_t3 = (float)baro->raw_calib.nvm_par_t3 / powf(2, 48);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	f993 301a 	ldrsb.w	r3, [r3, #26]
 8000e56:	ee07 3a90 	vmov	s15, r3
 8000e5a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e5e:	eddf 6a8f 	vldr	s13, [pc, #572]	@ 800109c <bmp_parse_calib+0x2cc>
 8000e62:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34

    baro->raw_calib.nvm_par_p1 = (int16_t)BMP390_CONCAT2BYTES(raw[6], raw[5]);
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	3306      	adds	r3, #6
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	021b      	lsls	r3, r3, #8
 8000e74:	b21a      	sxth	r2, r3
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	3305      	adds	r3, #5
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	b21b      	sxth	r3, r3
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	b21a      	sxth	r2, r3
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	839a      	strh	r2, [r3, #28]
    baro->calib.par_p1 = (((float)baro->raw_calib.nvm_par_p1) - powf(2,14)) / powf(2,20);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8000e8c:	ee07 3a90 	vmov	s15, r3
 8000e90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e94:	ed9f 7a82 	vldr	s14, [pc, #520]	@ 80010a0 <bmp_parse_calib+0x2d0>
 8000e98:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8000e9c:	eddf 6a81 	vldr	s13, [pc, #516]	@ 80010a4 <bmp_parse_calib+0x2d4>
 8000ea0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38

    baro->raw_calib.nvm_par_p2 = (int16_t)BMP390_CONCAT2BYTES(raw[8], raw[7]);
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	3308      	adds	r3, #8
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	021b      	lsls	r3, r3, #8
 8000eb2:	b21a      	sxth	r2, r3
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	3307      	adds	r3, #7
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	b21b      	sxth	r3, r3
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	b21a      	sxth	r2, r3
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	83da      	strh	r2, [r3, #30]
    baro->calib.par_p2 = (((float)baro->raw_calib.nvm_par_p2) - powf(2,14)) / powf(2,29);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8000eca:	ee07 3a90 	vmov	s15, r3
 8000ece:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ed2:	ed9f 7a73 	vldr	s14, [pc, #460]	@ 80010a0 <bmp_parse_calib+0x2d0>
 8000ed6:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8000eda:	eddf 6a73 	vldr	s13, [pc, #460]	@ 80010a8 <bmp_parse_calib+0x2d8>
 8000ede:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c

    baro->raw_calib.nvm_par_p3 = (int8_t)raw[9];
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	3309      	adds	r3, #9
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	b25a      	sxtb	r2, r3
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	f883 2020 	strb.w	r2, [r3, #32]
    baro->calib.par_p3 = (float)baro->raw_calib.nvm_par_p3 / powf(2,32);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	f993 3020 	ldrsb.w	r3, [r3, #32]
 8000efc:	ee07 3a90 	vmov	s15, r3
 8000f00:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f04:	eddf 6a69 	vldr	s13, [pc, #420]	@ 80010ac <bmp_parse_calib+0x2dc>
 8000f08:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40

    baro->raw_calib.nvm_par_p4 = (int8_t)raw[10];
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	330a      	adds	r3, #10
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	b25a      	sxtb	r2, r3
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    baro->calib.par_p4 = (float)baro->raw_calib.nvm_par_p4 / powf(2,37);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	f993 3021 	ldrsb.w	r3, [r3, #33]	@ 0x21
 8000f26:	ee07 3a90 	vmov	s15, r3
 8000f2a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f2e:	eddf 6a60 	vldr	s13, [pc, #384]	@ 80010b0 <bmp_parse_calib+0x2e0>
 8000f32:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44

    baro->raw_calib.nvm_par_p5 = BMP390_CONCAT2BYTES(raw[12], raw[11]);
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	330c      	adds	r3, #12
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	021b      	lsls	r3, r3, #8
 8000f44:	b21a      	sxth	r2, r3
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	330b      	adds	r3, #11
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	b21b      	sxth	r3, r3
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	b21b      	sxth	r3, r3
 8000f52:	b29a      	uxth	r2, r3
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	845a      	strh	r2, [r3, #34]	@ 0x22
    baro->calib.par_p5 = (float)baro->raw_calib.nvm_par_p5 / powf(2, -3);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8000f5c:	ee07 3a90 	vmov	s15, r3
 8000f60:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f64:	eef4 6a00 	vmov.f32	s13, #64	@ 0x3e000000  0.125
 8000f68:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48

    baro->raw_calib.nvm_par_p6 = BMP390_CONCAT2BYTES(raw[14], raw[13]);
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	330e      	adds	r3, #14
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	021b      	lsls	r3, r3, #8
 8000f7a:	b21a      	sxth	r2, r3
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	330d      	adds	r3, #13
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	b21b      	sxth	r3, r3
 8000f84:	4313      	orrs	r3, r2
 8000f86:	b21b      	sxth	r3, r3
 8000f88:	b29a      	uxth	r2, r3
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	849a      	strh	r2, [r3, #36]	@ 0x24
    baro->calib.par_p6 = (float)baro->raw_calib.nvm_par_p6 / powf(2,6);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000f92:	ee07 3a90 	vmov	s15, r3
 8000f96:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f9a:	eddf 6a46 	vldr	s13, [pc, #280]	@ 80010b4 <bmp_parse_calib+0x2e4>
 8000f9e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c

    baro->raw_calib.nvm_par_p7 = (int8_t)raw[15];
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	330f      	adds	r3, #15
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	b25a      	sxtb	r2, r3
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
    baro->calib.par_p7 = (float)baro->raw_calib.nvm_par_p7 / powf(2,8);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	f993 3026 	ldrsb.w	r3, [r3, #38]	@ 0x26
 8000fbc:	ee07 3a90 	vmov	s15, r3
 8000fc0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fc4:	eddf 6a3c 	vldr	s13, [pc, #240]	@ 80010b8 <bmp_parse_calib+0x2e8>
 8000fc8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50

    baro->raw_calib.nvm_par_p8 = (int8_t)raw[16];
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	3310      	adds	r3, #16
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	b25a      	sxtb	r2, r3
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
    baro->calib.par_p8 = (float)baro->raw_calib.nvm_par_p8 / powf(2,15);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	f993 3027 	ldrsb.w	r3, [r3, #39]	@ 0x27
 8000fe6:	ee07 3a90 	vmov	s15, r3
 8000fea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fee:	eddf 6a33 	vldr	s13, [pc, #204]	@ 80010bc <bmp_parse_calib+0x2ec>
 8000ff2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	edc3 7a15 	vstr	s15, [r3, #84]	@ 0x54

    baro->raw_calib.nvm_par_p9 = (int16_t)BMP390_CONCAT2BYTES(raw[18], raw[17]);
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	3312      	adds	r3, #18
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	021b      	lsls	r3, r3, #8
 8001004:	b21a      	sxth	r2, r3
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	3311      	adds	r3, #17
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	b21b      	sxth	r3, r3
 800100e:	4313      	orrs	r3, r2
 8001010:	b21a      	sxth	r2, r3
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	851a      	strh	r2, [r3, #40]	@ 0x28
    baro->calib.par_p9 = (float)baro->raw_calib.nvm_par_p9 / powf(2,48);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	@ 0x28
 800101c:	ee07 3a90 	vmov	s15, r3
 8001020:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001024:	eddf 6a1d 	vldr	s13, [pc, #116]	@ 800109c <bmp_parse_calib+0x2cc>
 8001028:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	edc3 7a16 	vstr	s15, [r3, #88]	@ 0x58

    baro->raw_calib.nvm_par_p10 = (int8_t)raw[19];
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	3313      	adds	r3, #19
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	b25a      	sxtb	r2, r3
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
    baro->calib.par_p10 = (float)baro->raw_calib.nvm_par_p10 / powf(2,48);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	f993 302a 	ldrsb.w	r3, [r3, #42]	@ 0x2a
 8001046:	ee07 3a90 	vmov	s15, r3
 800104a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800104e:	eddf 6a13 	vldr	s13, [pc, #76]	@ 800109c <bmp_parse_calib+0x2cc>
 8001052:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	edc3 7a17 	vstr	s15, [r3, #92]	@ 0x5c

    baro->raw_calib.nvm_par_p11 = (int8_t)raw[20];
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	3314      	adds	r3, #20
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	b25a      	sxtb	r2, r3
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
    baro->calib.par_p11 = (float)baro->raw_calib.nvm_par_p11 / powf(2,65);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	f993 302b 	ldrsb.w	r3, [r3, #43]	@ 0x2b
 8001070:	ee07 3a90 	vmov	s15, r3
 8001074:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001078:	eddf 6a11 	vldr	s13, [pc, #68]	@ 80010c0 <bmp_parse_calib+0x2f0>
 800107c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	edc3 7a18 	vstr	s15, [r3, #96]	@ 0x60
}
 8001086:	bf00      	nop
 8001088:	370c      	adds	r7, #12
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	3b800000 	.word	0x3b800000
 8001098:	4e800000 	.word	0x4e800000
 800109c:	57800000 	.word	0x57800000
 80010a0:	46800000 	.word	0x46800000
 80010a4:	49800000 	.word	0x49800000
 80010a8:	4e000000 	.word	0x4e000000
 80010ac:	4f800000 	.word	0x4f800000
 80010b0:	52000000 	.word	0x52000000
 80010b4:	42800000 	.word	0x42800000
 80010b8:	43800000 	.word	0x43800000
 80010bc:	47000000 	.word	0x47000000
 80010c0:	60000000 	.word	0x60000000

080010c4 <bmp_compensate_temperature>:

static float bmp_compensate_temperature(BMP390 *baro, uint32_t uncomp_temp) {
 80010c4:	b480      	push	{r7}
 80010c6:	b085      	sub	sp, #20
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	6039      	str	r1, [r7, #0]
    float partial1 = (float)uncomp_temp - baro->calib.par_t1;
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	ee07 3a90 	vmov	s15, r3
 80010d4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80010de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010e2:	edc7 7a03 	vstr	s15, [r7, #12]
    float partial2 = partial1 * baro->calib.par_t2;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80010ec:	ed97 7a03 	vldr	s14, [r7, #12]
 80010f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010f4:	edc7 7a02 	vstr	s15, [r7, #8]
    baro->calib.t_lin = partial2 + (partial1 * partial1) * baro->calib.par_t3;
 80010f8:	edd7 7a03 	vldr	s15, [r7, #12]
 80010fc:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8001106:	ee27 7a27 	vmul.f32	s14, s14, s15
 800110a:	edd7 7a02 	vldr	s15, [r7, #8]
 800110e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	edc3 7a19 	vstr	s15, [r3, #100]	@ 0x64
    return baro->calib.t_lin;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800111c:	ee07 3a90 	vmov	s15, r3
}
 8001120:	eeb0 0a67 	vmov.f32	s0, s15
 8001124:	3714      	adds	r7, #20
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr

0800112e <bmp_compensate_pressure>:

static float bmp_compensate_pressure(BMP390 *baro, uint32_t uncomp_press) {
 800112e:	b480      	push	{r7}
 8001130:	b091      	sub	sp, #68	@ 0x44
 8001132:	af00      	add	r7, sp, #0
 8001134:	6078      	str	r0, [r7, #4]
 8001136:	6039      	str	r1, [r7, #0]
    float partial_data1 = baro->calib.par_p6 * baro->calib.t_lin;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	ed93 7a13 	vldr	s14, [r3, #76]	@ 0x4c
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 8001144:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001148:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    float partial_data2 = baro->calib.par_p7 * (baro->calib.t_lin * baro->calib.t_lin);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	ed93 7a14 	vldr	s14, [r3, #80]	@ 0x50
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	edd3 6a19 	vldr	s13, [r3, #100]	@ 0x64
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 800115e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001162:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001166:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
    float partial_data3 = baro->calib.par_p8 * (baro->calib.t_lin * baro->calib.t_lin * baro->calib.t_lin);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	ed93 7a15 	vldr	s14, [r3, #84]	@ 0x54
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	edd3 6a19 	vldr	s13, [r3, #100]	@ 0x64
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 800117c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 8001186:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800118a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800118e:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    float partial_out1 = baro->calib.par_p5 + partial_data1 + partial_data2 + partial_data3;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 8001198:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800119c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80011a0:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80011a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011a8:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80011ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011b0:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

    float flt_uncomp_press = (float)uncomp_press;
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	ee07 3a90 	vmov	s15, r3
 80011ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011be:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

    float partial_data1_p = baro->calib.par_p2 * baro->calib.t_lin;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 80011ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011d2:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    float partial_data2_p = baro->calib.par_p3 * (baro->calib.t_lin * baro->calib.t_lin);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	edd3 6a19 	vldr	s13, [r3, #100]	@ 0x64
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 80011e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011f0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    float partial_data3_p = baro->calib.par_p4 * (baro->calib.t_lin * baro->calib.t_lin * baro->calib.t_lin);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	edd3 6a19 	vldr	s13, [r3, #100]	@ 0x64
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 8001206:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 8001210:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001214:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001218:	edc7 7a08 	vstr	s15, [r7, #32]
    float partial_out2 = flt_uncomp_press * (baro->calib.par_p1 + partial_data1_p + partial_data2_p + partial_data3_p);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 8001222:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001226:	ee37 7a27 	vadd.f32	s14, s14, s15
 800122a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800122e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001232:	edd7 7a08 	vldr	s15, [r7, #32]
 8001236:	ee77 7a27 	vadd.f32	s15, s14, s15
 800123a:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800123e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001242:	edc7 7a07 	vstr	s15, [r7, #28]


    float partial_data1_p2 = flt_uncomp_press * flt_uncomp_press;
 8001246:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800124a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800124e:	edc7 7a06 	vstr	s15, [r7, #24]
    float partial_data2_p2 = baro->calib.par_p9 + baro->calib.par_p10 * baro->calib.t_lin;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	ed93 7a16 	vldr	s14, [r3, #88]	@ 0x58
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	edd3 6a17 	vldr	s13, [r3, #92]	@ 0x5c
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 8001264:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001268:	ee77 7a27 	vadd.f32	s15, s14, s15
 800126c:	edc7 7a05 	vstr	s15, [r7, #20]
    float partial_data3_p2 = partial_data1_p2 * partial_data2_p2;
 8001270:	ed97 7a06 	vldr	s14, [r7, #24]
 8001274:	edd7 7a05 	vldr	s15, [r7, #20]
 8001278:	ee67 7a27 	vmul.f32	s15, s14, s15
 800127c:	edc7 7a04 	vstr	s15, [r7, #16]
    float partial_data4_p2 = partial_data3_p2 + (flt_uncomp_press * flt_uncomp_press * flt_uncomp_press) * baro->calib.par_p11;
 8001280:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001284:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001288:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800128c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 8001296:	ee67 7a27 	vmul.f32	s15, s14, s15
 800129a:	ed97 7a04 	vldr	s14, [r7, #16]
 800129e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012a2:	edc7 7a03 	vstr	s15, [r7, #12]

    float comp_press = partial_out1 + partial_out2 + partial_data4_p2;
 80012a6:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 80012aa:	edd7 7a07 	vldr	s15, [r7, #28]
 80012ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012b2:	ed97 7a03 	vldr	s14, [r7, #12]
 80012b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012ba:	edc7 7a02 	vstr	s15, [r7, #8]

    return comp_press;
 80012be:	68bb      	ldr	r3, [r7, #8]
 80012c0:	ee07 3a90 	vmov	s15, r3
}
 80012c4:	eeb0 0a67 	vmov.f32	s0, s15
 80012c8:	3744      	adds	r7, #68	@ 0x44
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
	...

080012d4 <bmp_init>:

bool bmp_init(BMP390 *baro, SPI_HandleTypeDef *hspi, GPIO_TypeDef *csPort, uint16_t csPin) {
 80012d4:	b5b0      	push	{r4, r5, r7, lr}
 80012d6:	b090      	sub	sp, #64	@ 0x40
 80012d8:	af04      	add	r7, sp, #16
 80012da:	60f8      	str	r0, [r7, #12]
 80012dc:	60b9      	str	r1, [r7, #8]
 80012de:	607a      	str	r2, [r7, #4]
 80012e0:	807b      	strh	r3, [r7, #2]
    baro->hspi = hspi;
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	68ba      	ldr	r2, [r7, #8]
 80012e6:	601a      	str	r2, [r3, #0]
    baro->csPort = csPort;
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	687a      	ldr	r2, [r7, #4]
 80012ec:	605a      	str	r2, [r3, #4]
    baro->csPin = csPin;
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	887a      	ldrh	r2, [r7, #2]
 80012f2:	811a      	strh	r2, [r3, #8]
    baro->last_press = NAN;
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	4aa6      	ldr	r2, [pc, #664]	@ (8001590 <bmp_init+0x2bc>)
 80012f8:	60da      	str	r2, [r3, #12]
    baro->last_alt   = NAN;
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	4aa4      	ldr	r2, [pc, #656]	@ (8001590 <bmp_init+0x2bc>)
 80012fe:	611a      	str	r2, [r3, #16]
    baro->last_temp  = INT16_MIN;
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001306:	829a      	strh	r2, [r3, #20]

    HAL_GPIO_WritePin(baro->csPort, baro->csPin, GPIO_PIN_SET);
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	6858      	ldr	r0, [r3, #4]
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	891b      	ldrh	r3, [r3, #8]
 8001310:	2201      	movs	r2, #1
 8001312:	4619      	mov	r1, r3
 8001314:	f003 f8ac 	bl	8004470 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8001318:	200a      	movs	r0, #10
 800131a:	f002 fc69 	bl	8003bf0 <HAL_Delay>

    uint8_t chip_id = 0;
 800131e:	2300      	movs	r3, #0
 8001320:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    debug_print("BMP390 Init: Reading Chip ID...\r\n");
 8001324:	489b      	ldr	r0, [pc, #620]	@ (8001594 <bmp_init+0x2c0>)
 8001326:	f001 f969 	bl	80025fc <debug_print>
    if (!bmp_read_reg(baro, BMP390_REG_CHIP_ID, &chip_id)) {
 800132a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800132e:	461a      	mov	r2, r3
 8001330:	2100      	movs	r1, #0
 8001332:	68f8      	ldr	r0, [r7, #12]
 8001334:	f7ff fc4c 	bl	8000bd0 <bmp_read_reg>
 8001338:	4603      	mov	r3, r0
 800133a:	f083 0301 	eor.w	r3, r3, #1
 800133e:	b2db      	uxtb	r3, r3
 8001340:	2b00      	cmp	r3, #0
 8001342:	d004      	beq.n	800134e <bmp_init+0x7a>
        debug_print("BMP390 Init ERROR: Failed SPI read for Chip ID\r\n");
 8001344:	4894      	ldr	r0, [pc, #592]	@ (8001598 <bmp_init+0x2c4>)
 8001346:	f001 f959 	bl	80025fc <debug_print>
        return false;
 800134a:	2300      	movs	r3, #0
 800134c:	e11c      	b.n	8001588 <bmp_init+0x2b4>
    }
    if (chip_id != BMP390_CHIP_ID) {
 800134e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001352:	2b60      	cmp	r3, #96	@ 0x60
 8001354:	d008      	beq.n	8001368 <bmp_init+0x94>
        debug_print("BMP390 Init ERROR: Chip ID Mismatch! Read: 0x%02X Expected: 0x%02X\r\n", chip_id, BMP390_CHIP_ID);
 8001356:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800135a:	2260      	movs	r2, #96	@ 0x60
 800135c:	4619      	mov	r1, r3
 800135e:	488f      	ldr	r0, [pc, #572]	@ (800159c <bmp_init+0x2c8>)
 8001360:	f001 f94c 	bl	80025fc <debug_print>
        return false;
 8001364:	2300      	movs	r3, #0
 8001366:	e10f      	b.n	8001588 <bmp_init+0x2b4>
    }
    debug_print("BMP390 Init: Chip ID OK (0x%02X).\r\n", chip_id);
 8001368:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800136c:	4619      	mov	r1, r3
 800136e:	488c      	ldr	r0, [pc, #560]	@ (80015a0 <bmp_init+0x2cc>)
 8001370:	f001 f944 	bl	80025fc <debug_print>


    debug_print("BMP390 Init: Sending Soft Reset...\r\n");
 8001374:	488b      	ldr	r0, [pc, #556]	@ (80015a4 <bmp_init+0x2d0>)
 8001376:	f001 f941 	bl	80025fc <debug_print>
    if (!bmp_write_reg(baro, BMP390_REG_CMD, SOFT_RESET)) {
 800137a:	22b6      	movs	r2, #182	@ 0xb6
 800137c:	217e      	movs	r1, #126	@ 0x7e
 800137e:	68f8      	ldr	r0, [r7, #12]
 8001380:	f7ff fc70 	bl	8000c64 <bmp_write_reg>
 8001384:	4603      	mov	r3, r0
 8001386:	f083 0301 	eor.w	r3, r3, #1
 800138a:	b2db      	uxtb	r3, r3
 800138c:	2b00      	cmp	r3, #0
 800138e:	d004      	beq.n	800139a <bmp_init+0xc6>
         debug_print("BMP390 Init ERROR: Failed SPI write for Soft Reset\r\n");
 8001390:	4885      	ldr	r0, [pc, #532]	@ (80015a8 <bmp_init+0x2d4>)
 8001392:	f001 f933 	bl	80025fc <debug_print>
         return false;
 8001396:	2300      	movs	r3, #0
 8001398:	e0f6      	b.n	8001588 <bmp_init+0x2b4>
    }
    HAL_Delay(50);
 800139a:	2032      	movs	r0, #50	@ 0x32
 800139c:	f002 fc28 	bl	8003bf0 <HAL_Delay>

    uint8_t power_conf = ENABLE_PRESSURE | ENABLE_TEMP | ENABLE_SENSOR; // 0x33
 80013a0:	2333      	movs	r3, #51	@ 0x33
 80013a2:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    debug_print("BMP390 Init: Writing PWR_CTRL = 0x%02X...\r\n", power_conf);
 80013a6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80013aa:	4619      	mov	r1, r3
 80013ac:	487f      	ldr	r0, [pc, #508]	@ (80015ac <bmp_init+0x2d8>)
 80013ae:	f001 f925 	bl	80025fc <debug_print>
    if (!bmp_write_reg(baro, BMP390_REG_PWR_CTRL, power_conf)) {
 80013b2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80013b6:	461a      	mov	r2, r3
 80013b8:	211b      	movs	r1, #27
 80013ba:	68f8      	ldr	r0, [r7, #12]
 80013bc:	f7ff fc52 	bl	8000c64 <bmp_write_reg>
 80013c0:	4603      	mov	r3, r0
 80013c2:	f083 0301 	eor.w	r3, r3, #1
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d004      	beq.n	80013d6 <bmp_init+0x102>
         debug_print("BMP390 Init ERROR: Failed SPI write for PWR_CTRL\r\n");
 80013cc:	4878      	ldr	r0, [pc, #480]	@ (80015b0 <bmp_init+0x2dc>)
 80013ce:	f001 f915 	bl	80025fc <debug_print>
         return false;
 80013d2:	2300      	movs	r3, #0
 80013d4:	e0d8      	b.n	8001588 <bmp_init+0x2b4>
    }
    HAL_Delay(5);
 80013d6:	2005      	movs	r0, #5
 80013d8:	f002 fc0a 	bl	8003bf0 <HAL_Delay>

    uint8_t osr_conf = (OSR_TEMP_X2 << 3) | OSR_PRESSURE_X32; // 0x0D
 80013dc:	230d      	movs	r3, #13
 80013de:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    debug_print("BMP390 Init: Writing OSR = 0x%02X...\r\n", osr_conf);
 80013e2:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80013e6:	4619      	mov	r1, r3
 80013e8:	4872      	ldr	r0, [pc, #456]	@ (80015b4 <bmp_init+0x2e0>)
 80013ea:	f001 f907 	bl	80025fc <debug_print>
    if (!bmp_write_reg(baro, BMP390_REG_OSR, osr_conf)) {
 80013ee:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80013f2:	461a      	mov	r2, r3
 80013f4:	211c      	movs	r1, #28
 80013f6:	68f8      	ldr	r0, [r7, #12]
 80013f8:	f7ff fc34 	bl	8000c64 <bmp_write_reg>
 80013fc:	4603      	mov	r3, r0
 80013fe:	f083 0301 	eor.w	r3, r3, #1
 8001402:	b2db      	uxtb	r3, r3
 8001404:	2b00      	cmp	r3, #0
 8001406:	d004      	beq.n	8001412 <bmp_init+0x13e>
        debug_print("BMP390 Init ERROR: Failed SPI write for OSR\r\n");
 8001408:	486b      	ldr	r0, [pc, #428]	@ (80015b8 <bmp_init+0x2e4>)
 800140a:	f001 f8f7 	bl	80025fc <debug_print>
        return false;
 800140e:	2300      	movs	r3, #0
 8001410:	e0ba      	b.n	8001588 <bmp_init+0x2b4>
    }

    debug_print("BMP390 Init: Writing ODR = 0x%02X...\r\n", ODR_12p5_HZ); // 0x04
 8001412:	2104      	movs	r1, #4
 8001414:	4869      	ldr	r0, [pc, #420]	@ (80015bc <bmp_init+0x2e8>)
 8001416:	f001 f8f1 	bl	80025fc <debug_print>
    if (!bmp_write_reg(baro, BMP390_REG_ODR, ODR_12p5_HZ)) {
 800141a:	2204      	movs	r2, #4
 800141c:	211d      	movs	r1, #29
 800141e:	68f8      	ldr	r0, [r7, #12]
 8001420:	f7ff fc20 	bl	8000c64 <bmp_write_reg>
 8001424:	4603      	mov	r3, r0
 8001426:	f083 0301 	eor.w	r3, r3, #1
 800142a:	b2db      	uxtb	r3, r3
 800142c:	2b00      	cmp	r3, #0
 800142e:	d004      	beq.n	800143a <bmp_init+0x166>
        debug_print("BMP390 Init ERROR: Failed SPI write for ODR\r\n");
 8001430:	4863      	ldr	r0, [pc, #396]	@ (80015c0 <bmp_init+0x2ec>)
 8001432:	f001 f8e3 	bl	80025fc <debug_print>
        return false;
 8001436:	2300      	movs	r3, #0
 8001438:	e0a6      	b.n	8001588 <bmp_init+0x2b4>
    }
    HAL_Delay(5);
 800143a:	2005      	movs	r0, #5
 800143c:	f002 fbd8 	bl	8003bf0 <HAL_Delay>

    uint8_t read_pwr = 0, read_osr = 0, read_odr = 0;
 8001440:	2300      	movs	r3, #0
 8001442:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001446:	2300      	movs	r3, #0
 8001448:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800144c:	2300      	movs	r3, #0
 800144e:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
    bool readback_ok = true;
 8001452:	2301      	movs	r3, #1
 8001454:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    debug_print("BMP390 Init: Reading back configuration...\r\n");
 8001458:	485a      	ldr	r0, [pc, #360]	@ (80015c4 <bmp_init+0x2f0>)
 800145a:	f001 f8cf 	bl	80025fc <debug_print>
    if (!bmp_read_reg(baro, BMP390_REG_PWR_CTRL, &read_pwr)) readback_ok = false;
 800145e:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 8001462:	461a      	mov	r2, r3
 8001464:	211b      	movs	r1, #27
 8001466:	68f8      	ldr	r0, [r7, #12]
 8001468:	f7ff fbb2 	bl	8000bd0 <bmp_read_reg>
 800146c:	4603      	mov	r3, r0
 800146e:	f083 0301 	eor.w	r3, r3, #1
 8001472:	b2db      	uxtb	r3, r3
 8001474:	2b00      	cmp	r3, #0
 8001476:	d002      	beq.n	800147e <bmp_init+0x1aa>
 8001478:	2300      	movs	r3, #0
 800147a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (!bmp_read_reg(baro, BMP390_REG_OSR, &read_osr)) readback_ok = false;
 800147e:	f107 032a 	add.w	r3, r7, #42	@ 0x2a
 8001482:	461a      	mov	r2, r3
 8001484:	211c      	movs	r1, #28
 8001486:	68f8      	ldr	r0, [r7, #12]
 8001488:	f7ff fba2 	bl	8000bd0 <bmp_read_reg>
 800148c:	4603      	mov	r3, r0
 800148e:	f083 0301 	eor.w	r3, r3, #1
 8001492:	b2db      	uxtb	r3, r3
 8001494:	2b00      	cmp	r3, #0
 8001496:	d002      	beq.n	800149e <bmp_init+0x1ca>
 8001498:	2300      	movs	r3, #0
 800149a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (!bmp_read_reg(baro, BMP390_REG_ODR, &read_odr)) readback_ok = false;
 800149e:	f107 0329 	add.w	r3, r7, #41	@ 0x29
 80014a2:	461a      	mov	r2, r3
 80014a4:	211d      	movs	r1, #29
 80014a6:	68f8      	ldr	r0, [r7, #12]
 80014a8:	f7ff fb92 	bl	8000bd0 <bmp_read_reg>
 80014ac:	4603      	mov	r3, r0
 80014ae:	f083 0301 	eor.w	r3, r3, #1
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d002      	beq.n	80014be <bmp_init+0x1ea>
 80014b8:	2300      	movs	r3, #0
 80014ba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    if (!readback_ok) {
 80014be:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80014c2:	f083 0301 	eor.w	r3, r3, #1
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d004      	beq.n	80014d6 <bmp_init+0x202>
        debug_print("BMP390 Init ERROR: Failed SPI read during configuration readback!\r\n");
 80014cc:	483e      	ldr	r0, [pc, #248]	@ (80015c8 <bmp_init+0x2f4>)
 80014ce:	f001 f895 	bl	80025fc <debug_print>
        return false;
 80014d2:	2300      	movs	r3, #0
 80014d4:	e058      	b.n	8001588 <bmp_init+0x2b4>
    }

    debug_print("BMP390 Init Readback: PWR_CTRL=0x%02X (W:0x%02X), OSR=0x%02X (W:0x%02X), ODR=0x%02X (W:0x%02X)\r\n",
 80014d6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80014da:	461c      	mov	r4, r3
 80014dc:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 80014e0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80014e4:	461d      	mov	r5, r3
 80014e6:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80014ea:	f897 1029 	ldrb.w	r1, [r7, #41]	@ 0x29
 80014ee:	4608      	mov	r0, r1
 80014f0:	2104      	movs	r1, #4
 80014f2:	9102      	str	r1, [sp, #8]
 80014f4:	9001      	str	r0, [sp, #4]
 80014f6:	9300      	str	r3, [sp, #0]
 80014f8:	462b      	mov	r3, r5
 80014fa:	4621      	mov	r1, r4
 80014fc:	4833      	ldr	r0, [pc, #204]	@ (80015cc <bmp_init+0x2f8>)
 80014fe:	f001 f87d 	bl	80025fc <debug_print>
                read_pwr, power_conf, read_osr, osr_conf, read_odr, ODR_12p5_HZ);

    if (read_pwr != power_conf || read_osr != osr_conf || read_odr != ODR_12p5_HZ) {
 8001502:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001506:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 800150a:	429a      	cmp	r2, r3
 800150c:	d109      	bne.n	8001522 <bmp_init+0x24e>
 800150e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8001512:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8001516:	429a      	cmp	r2, r3
 8001518:	d103      	bne.n	8001522 <bmp_init+0x24e>
 800151a:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800151e:	2b04      	cmp	r3, #4
 8001520:	d003      	beq.n	800152a <bmp_init+0x256>
        debug_print("BMP390 Init WARNING: Configuration Readback Mismatch! Sensor may not operate as expected.\r\n");
 8001522:	482b      	ldr	r0, [pc, #172]	@ (80015d0 <bmp_init+0x2fc>)
 8001524:	f001 f86a 	bl	80025fc <debug_print>
 8001528:	e002      	b.n	8001530 <bmp_init+0x25c>
    } else {
        debug_print("BMP390 Init: Configuration Readback OK.\r\n");
 800152a:	482a      	ldr	r0, [pc, #168]	@ (80015d4 <bmp_init+0x300>)
 800152c:	f001 f866 	bl	80025fc <debug_print>
    }

    uint8_t calib_raw[21] = {0};
 8001530:	2300      	movs	r3, #0
 8001532:	617b      	str	r3, [r7, #20]
 8001534:	f107 0318 	add.w	r3, r7, #24
 8001538:	2200      	movs	r2, #0
 800153a:	601a      	str	r2, [r3, #0]
 800153c:	605a      	str	r2, [r3, #4]
 800153e:	609a      	str	r2, [r3, #8]
 8001540:	60da      	str	r2, [r3, #12]
 8001542:	741a      	strb	r2, [r3, #16]
    debug_print("BMP390 Init: Reading Calibration Data...\r\n");
 8001544:	4824      	ldr	r0, [pc, #144]	@ (80015d8 <bmp_init+0x304>)
 8001546:	f001 f859 	bl	80025fc <debug_print>
    if (!bmp_read_buf(baro, BMP390_REG_CAL, calib_raw, 21)) {
 800154a:	f107 0214 	add.w	r2, r7, #20
 800154e:	2315      	movs	r3, #21
 8001550:	2131      	movs	r1, #49	@ 0x31
 8001552:	68f8      	ldr	r0, [r7, #12]
 8001554:	f7ff fbc2 	bl	8000cdc <bmp_read_buf>
 8001558:	4603      	mov	r3, r0
 800155a:	f083 0301 	eor.w	r3, r3, #1
 800155e:	b2db      	uxtb	r3, r3
 8001560:	2b00      	cmp	r3, #0
 8001562:	d004      	beq.n	800156e <bmp_init+0x29a>
        debug_print("BMP390 Init ERROR: Failed SPI read for Calibration Data\r\n");
 8001564:	481d      	ldr	r0, [pc, #116]	@ (80015dc <bmp_init+0x308>)
 8001566:	f001 f849 	bl	80025fc <debug_print>
        return false;
 800156a:	2300      	movs	r3, #0
 800156c:	e00c      	b.n	8001588 <bmp_init+0x2b4>
    }
    bmp_parse_calib(baro, calib_raw);
 800156e:	f107 0314 	add.w	r3, r7, #20
 8001572:	4619      	mov	r1, r3
 8001574:	68f8      	ldr	r0, [r7, #12]
 8001576:	f7ff fc2b 	bl	8000dd0 <bmp_parse_calib>

    HAL_Delay(100);
 800157a:	2064      	movs	r0, #100	@ 0x64
 800157c:	f002 fb38 	bl	8003bf0 <HAL_Delay>

    baro_step(baro);
 8001580:	68f8      	ldr	r0, [r7, #12]
 8001582:	f000 f82d 	bl	80015e0 <baro_step>

    return true;
 8001586:	2301      	movs	r3, #1
}
 8001588:	4618      	mov	r0, r3
 800158a:	3730      	adds	r7, #48	@ 0x30
 800158c:	46bd      	mov	sp, r7
 800158e:	bdb0      	pop	{r4, r5, r7, pc}
 8001590:	7fc00000 	.word	0x7fc00000
 8001594:	08010d80 	.word	0x08010d80
 8001598:	08010da4 	.word	0x08010da4
 800159c:	08010dd8 	.word	0x08010dd8
 80015a0:	08010e20 	.word	0x08010e20
 80015a4:	08010e44 	.word	0x08010e44
 80015a8:	08010e6c 	.word	0x08010e6c
 80015ac:	08010ea4 	.word	0x08010ea4
 80015b0:	08010ed0 	.word	0x08010ed0
 80015b4:	08010f04 	.word	0x08010f04
 80015b8:	08010f2c 	.word	0x08010f2c
 80015bc:	08010f5c 	.word	0x08010f5c
 80015c0:	08010f84 	.word	0x08010f84
 80015c4:	08010fb4 	.word	0x08010fb4
 80015c8:	08010fe4 	.word	0x08010fe4
 80015cc:	08011028 	.word	0x08011028
 80015d0:	0801108c 	.word	0x0801108c
 80015d4:	080110e8 	.word	0x080110e8
 80015d8:	08011114 	.word	0x08011114
 80015dc:	08011140 	.word	0x08011140

080015e0 <baro_step>:

void baro_step(BMP390 *baro) {
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b088      	sub	sp, #32
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
    uint8_t status_reg = 0;
 80015e8:	2300      	movs	r3, #0
 80015ea:	73fb      	strb	r3, [r7, #15]
    uint8_t data[6] = {0};
 80015ec:	2300      	movs	r3, #0
 80015ee:	60bb      	str	r3, [r7, #8]
 80015f0:	2300      	movs	r3, #0
 80015f2:	81bb      	strh	r3, [r7, #12]

    if (!bmp_read_reg(baro, BMP390_REG_STATUS, &status_reg)) {
 80015f4:	f107 030f 	add.w	r3, r7, #15
 80015f8:	461a      	mov	r2, r3
 80015fa:	2103      	movs	r1, #3
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f7ff fae7 	bl	8000bd0 <bmp_read_reg>
 8001602:	4603      	mov	r3, r0
 8001604:	f083 0301 	eor.w	r3, r3, #1
 8001608:	b2db      	uxtb	r3, r3
 800160a:	2b00      	cmp	r3, #0
 800160c:	d003      	beq.n	8001616 <baro_step+0x36>
        debug_print("baro_step ERROR: Failed to read STATUS register.\r\n");
 800160e:	483a      	ldr	r0, [pc, #232]	@ (80016f8 <baro_step+0x118>)
 8001610:	f000 fff4 	bl	80025fc <debug_print>
        return;
 8001614:	e06c      	b.n	80016f0 <baro_step+0x110>
    }

    if (!(status_reg & BMP390_STATUS_DRDY_PRES) || !(status_reg & BMP390_STATUS_DRDY_TEMP)) {
 8001616:	7bfb      	ldrb	r3, [r7, #15]
 8001618:	f003 0320 	and.w	r3, r3, #32
 800161c:	2b00      	cmp	r3, #0
 800161e:	d066      	beq.n	80016ee <baro_step+0x10e>
 8001620:	7bfb      	ldrb	r3, [r7, #15]
 8001622:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001626:	2b00      	cmp	r3, #0
 8001628:	d061      	beq.n	80016ee <baro_step+0x10e>
        return;
    }

    if (!bmp_read_buf(baro, BMP390_REG_DATA, data, 6)) {
 800162a:	f107 0208 	add.w	r2, r7, #8
 800162e:	2306      	movs	r3, #6
 8001630:	2104      	movs	r1, #4
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f7ff fb52 	bl	8000cdc <bmp_read_buf>
 8001638:	4603      	mov	r3, r0
 800163a:	f083 0301 	eor.w	r3, r3, #1
 800163e:	b2db      	uxtb	r3, r3
 8001640:	2b00      	cmp	r3, #0
 8001642:	d003      	beq.n	800164c <baro_step+0x6c>
        debug_print("baro_step ERROR: Failed to read DATA registers after DRDY set!\r\n");
 8001644:	482d      	ldr	r0, [pc, #180]	@ (80016fc <baro_step+0x11c>)
 8001646:	f000 ffd9 	bl	80025fc <debug_print>
        return;
 800164a:	e051      	b.n	80016f0 <baro_step+0x110>
    }

    uint32_t uncomp_press = BMP390_CONCAT3BYTES(data[2], data[1], data[0]);
 800164c:	7abb      	ldrb	r3, [r7, #10]
 800164e:	041a      	lsls	r2, r3, #16
 8001650:	7a7b      	ldrb	r3, [r7, #9]
 8001652:	021b      	lsls	r3, r3, #8
 8001654:	4313      	orrs	r3, r2
 8001656:	7a3a      	ldrb	r2, [r7, #8]
 8001658:	4313      	orrs	r3, r2
 800165a:	61fb      	str	r3, [r7, #28]
    uint32_t uncomp_temp  = BMP390_CONCAT3BYTES(data[5], data[4], data[3]);
 800165c:	7b7b      	ldrb	r3, [r7, #13]
 800165e:	041a      	lsls	r2, r3, #16
 8001660:	7b3b      	ldrb	r3, [r7, #12]
 8001662:	021b      	lsls	r3, r3, #8
 8001664:	4313      	orrs	r3, r2
 8001666:	7afa      	ldrb	r2, [r7, #11]
 8001668:	4313      	orrs	r3, r2
 800166a:	61bb      	str	r3, [r7, #24]

    if (uncomp_press == 8388608 || uncomp_temp == 8388608) {
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001672:	d003      	beq.n	800167c <baro_step+0x9c>
 8001674:	69bb      	ldr	r3, [r7, #24]
 8001676:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800167a:	d102      	bne.n	8001682 <baro_step+0xa2>
         debug_print("BMP390 WARN: Read reset value (8388608) despite DRDY flags being set!\r\n");
 800167c:	4820      	ldr	r0, [pc, #128]	@ (8001700 <baro_step+0x120>)
 800167e:	f000 ffbd 	bl	80025fc <debug_print>
    }

    float t_lin = bmp_compensate_temperature(baro, uncomp_temp);
 8001682:	69b9      	ldr	r1, [r7, #24]
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	f7ff fd1d 	bl	80010c4 <bmp_compensate_temperature>
 800168a:	ed87 0a05 	vstr	s0, [r7, #20]
    baro->last_temp = (int16_t)(t_lin * 100.0f);
 800168e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001692:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8001704 <baro_step+0x124>
 8001696:	ee67 7a87 	vmul.f32	s15, s15, s14
 800169a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800169e:	ee17 3a90 	vmov	r3, s15
 80016a2:	b21a      	sxth	r2, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	829a      	strh	r2, [r3, #20]

    float comp_press = bmp_compensate_pressure(baro, uncomp_press);
 80016a8:	69f9      	ldr	r1, [r7, #28]
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f7ff fd3f 	bl	800112e <bmp_compensate_pressure>
 80016b0:	ed87 0a04 	vstr	s0, [r7, #16]
    baro->last_press = comp_press;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	693a      	ldr	r2, [r7, #16]
 80016b8:	60da      	str	r2, [r3, #12]

    baro->last_alt = 44330.0f * (1.0f - powf(comp_press / 101325.0f, 1.0f / 5.255f));
 80016ba:	edd7 7a04 	vldr	s15, [r7, #16]
 80016be:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8001708 <baro_step+0x128>
 80016c2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80016c6:	eddf 0a11 	vldr	s1, [pc, #68]	@ 800170c <baro_step+0x12c>
 80016ca:	eeb0 0a47 	vmov.f32	s0, s14
 80016ce:	f00e fe75 	bl	80103bc <powf>
 80016d2:	eef0 7a40 	vmov.f32	s15, s0
 80016d6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80016da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016de:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8001710 <baro_step+0x130>
 80016e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	edc3 7a04 	vstr	s15, [r3, #16]
 80016ec:	e000      	b.n	80016f0 <baro_step+0x110>
        return;
 80016ee:	bf00      	nop
}
 80016f0:	3720      	adds	r7, #32
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	0801117c 	.word	0x0801117c
 80016fc:	080111b0 	.word	0x080111b0
 8001700:	080111f4 	.word	0x080111f4
 8001704:	42c80000 	.word	0x42c80000
 8001708:	47c5e680 	.word	0x47c5e680
 800170c:	3e42dcae 	.word	0x3e42dcae
 8001710:	472d2a00 	.word	0x472d2a00

08001714 <baro_get_altitude>:

float baro_get_altitude(BMP390 *baro) {
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
    return baro->last_alt;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	691b      	ldr	r3, [r3, #16]
 8001720:	ee07 3a90 	vmov	s15, r3
}
 8001724:	eeb0 0a67 	vmov.f32	s0, s15
 8001728:	370c      	adds	r7, #12
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr

08001732 <baro_get_temp>:

int16_t baro_get_temp(BMP390 *baro) {
 8001732:	b480      	push	{r7}
 8001734:	b083      	sub	sp, #12
 8001736:	af00      	add	r7, sp, #0
 8001738:	6078      	str	r0, [r7, #4]
    return baro->last_temp;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
}
 8001740:	4618      	mov	r0, r3
 8001742:	370c      	adds	r7, #12
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr

0800174c <baro_get_pressure>:

float baro_get_pressure(BMP390 *baro) {
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
    return baro->last_press;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	ee07 3a90 	vmov	s15, r3
}
 800175c:	eeb0 0a67 	vmov.f32	s0, s15
 8001760:	370c      	adds	r7, #12
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
	...

0800176c <spi_begin>:

//--------------------------------------------------------------------
// Static helper functions
//--------------------------------------------------------------------
static void spi_begin(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(flash_cs_port, flash_cs_pin, GPIO_PIN_RESET);
 8001770:	4b04      	ldr	r3, [pc, #16]	@ (8001784 <spi_begin+0x18>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a04      	ldr	r2, [pc, #16]	@ (8001788 <spi_begin+0x1c>)
 8001776:	8811      	ldrh	r1, [r2, #0]
 8001778:	2200      	movs	r2, #0
 800177a:	4618      	mov	r0, r3
 800177c:	f002 fe78 	bl	8004470 <HAL_GPIO_WritePin>
}
 8001780:	bf00      	nop
 8001782:	bd80      	pop	{r7, pc}
 8001784:	20000218 	.word	0x20000218
 8001788:	2000021c 	.word	0x2000021c

0800178c <spi_end>:

static void spi_end(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(flash_cs_port, flash_cs_pin, GPIO_PIN_SET);
 8001790:	4b04      	ldr	r3, [pc, #16]	@ (80017a4 <spi_end+0x18>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a04      	ldr	r2, [pc, #16]	@ (80017a8 <spi_end+0x1c>)
 8001796:	8811      	ldrh	r1, [r2, #0]
 8001798:	2201      	movs	r2, #1
 800179a:	4618      	mov	r0, r3
 800179c:	f002 fe68 	bl	8004470 <HAL_GPIO_WritePin>
}
 80017a0:	bf00      	nop
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	20000218 	.word	0x20000218
 80017a8:	2000021c 	.word	0x2000021c

080017ac <flash_status_1>:

static uint8_t flash_status_1(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
    uint8_t cmd = FLASH_CMD_READ_STATUS_REGISTER;
 80017b2:	2305      	movs	r3, #5
 80017b4:	71fb      	strb	r3, [r7, #7]
    uint8_t status = 0;
 80017b6:	2300      	movs	r3, #0
 80017b8:	71bb      	strb	r3, [r7, #6]

    spi_begin();
 80017ba:	f7ff ffd7 	bl	800176c <spi_begin>
    HAL_SPI_Transmit(flash_hspi, &cmd, 1, HAL_MAX_DELAY);
 80017be:	4b0b      	ldr	r3, [pc, #44]	@ (80017ec <flash_status_1+0x40>)
 80017c0:	6818      	ldr	r0, [r3, #0]
 80017c2:	1df9      	adds	r1, r7, #7
 80017c4:	f04f 33ff 	mov.w	r3, #4294967295
 80017c8:	2201      	movs	r2, #1
 80017ca:	f005 fc6a 	bl	80070a2 <HAL_SPI_Transmit>
    HAL_SPI_Receive(flash_hspi, &status, 1, HAL_MAX_DELAY);
 80017ce:	4b07      	ldr	r3, [pc, #28]	@ (80017ec <flash_status_1+0x40>)
 80017d0:	6818      	ldr	r0, [r3, #0]
 80017d2:	1db9      	adds	r1, r7, #6
 80017d4:	f04f 33ff 	mov.w	r3, #4294967295
 80017d8:	2201      	movs	r2, #1
 80017da:	f005 fdd8 	bl	800738e <HAL_SPI_Receive>
    spi_end();
 80017de:	f7ff ffd5 	bl	800178c <spi_end>

    return status;
 80017e2:	79bb      	ldrb	r3, [r7, #6]
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3708      	adds	r7, #8
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	20000214 	.word	0x20000214

080017f0 <flash_write_enable>:

static void flash_write_enable(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
    uint8_t cmd = FLASH_CMD_WRITE_ENABLE;
 80017f6:	2306      	movs	r3, #6
 80017f8:	71fb      	strb	r3, [r7, #7]
    spi_begin();
 80017fa:	f7ff ffb7 	bl	800176c <spi_begin>
    HAL_SPI_Transmit(flash_hspi, &cmd, 1, HAL_MAX_DELAY);
 80017fe:	4b07      	ldr	r3, [pc, #28]	@ (800181c <flash_write_enable+0x2c>)
 8001800:	6818      	ldr	r0, [r3, #0]
 8001802:	1df9      	adds	r1, r7, #7
 8001804:	f04f 33ff 	mov.w	r3, #4294967295
 8001808:	2201      	movs	r2, #1
 800180a:	f005 fc4a 	bl	80070a2 <HAL_SPI_Transmit>
    spi_end();
 800180e:	f7ff ffbd 	bl	800178c <spi_end>
}
 8001812:	bf00      	nop
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	20000214 	.word	0x20000214

08001820 <Flash_Setup>:

void Flash_Setup(SPI_HandleTypeDef *hspi, GPIO_TypeDef *CS_GPIO_Port, uint16_t CS_Pin)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b086      	sub	sp, #24
 8001824:	af00      	add	r7, sp, #0
 8001826:	60f8      	str	r0, [r7, #12]
 8001828:	60b9      	str	r1, [r7, #8]
 800182a:	4613      	mov	r3, r2
 800182c:	80fb      	strh	r3, [r7, #6]
    uint8_t cmd;
    uint8_t dummy[3] = {0, 0, 0};
 800182e:	4a20      	ldr	r2, [pc, #128]	@ (80018b0 <Flash_Setup+0x90>)
 8001830:	f107 0314 	add.w	r3, r7, #20
 8001834:	6812      	ldr	r2, [r2, #0]
 8001836:	4611      	mov	r1, r2
 8001838:	8019      	strh	r1, [r3, #0]
 800183a:	3302      	adds	r3, #2
 800183c:	0c12      	lsrs	r2, r2, #16
 800183e:	701a      	strb	r2, [r3, #0]
    uint8_t device_id = 0;
 8001840:	2300      	movs	r3, #0
 8001842:	74fb      	strb	r3, [r7, #19]

    // Save the provided configuration for later use.
    flash_hspi = hspi;
 8001844:	4a1b      	ldr	r2, [pc, #108]	@ (80018b4 <Flash_Setup+0x94>)
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	6013      	str	r3, [r2, #0]
    flash_cs_port = CS_GPIO_Port;
 800184a:	4a1b      	ldr	r2, [pc, #108]	@ (80018b8 <Flash_Setup+0x98>)
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	6013      	str	r3, [r2, #0]
    flash_cs_pin = CS_Pin;
 8001850:	4a1a      	ldr	r2, [pc, #104]	@ (80018bc <Flash_Setup+0x9c>)
 8001852:	88fb      	ldrh	r3, [r7, #6]
 8001854:	8013      	strh	r3, [r2, #0]

    // Ensure CS is high initially.
    HAL_GPIO_WritePin(flash_cs_port, flash_cs_pin, GPIO_PIN_SET);
 8001856:	4b18      	ldr	r3, [pc, #96]	@ (80018b8 <Flash_Setup+0x98>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a18      	ldr	r2, [pc, #96]	@ (80018bc <Flash_Setup+0x9c>)
 800185c:	8811      	ldrh	r1, [r2, #0]
 800185e:	2201      	movs	r2, #1
 8001860:	4618      	mov	r0, r3
 8001862:	f002 fe05 	bl	8004470 <HAL_GPIO_WritePin>

    // Release flash from power-down.
    cmd = FLASH_CMD_RELEASE_POWER_DOWN;
 8001866:	23ab      	movs	r3, #171	@ 0xab
 8001868:	75fb      	strb	r3, [r7, #23]
    spi_begin();
 800186a:	f7ff ff7f 	bl	800176c <spi_begin>
    HAL_SPI_Transmit(flash_hspi, &cmd, 1, HAL_MAX_DELAY);
 800186e:	4b11      	ldr	r3, [pc, #68]	@ (80018b4 <Flash_Setup+0x94>)
 8001870:	6818      	ldr	r0, [r3, #0]
 8001872:	f107 0117 	add.w	r1, r7, #23
 8001876:	f04f 33ff 	mov.w	r3, #4294967295
 800187a:	2201      	movs	r2, #1
 800187c:	f005 fc11 	bl	80070a2 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(flash_hspi, dummy, 3, HAL_MAX_DELAY);
 8001880:	4b0c      	ldr	r3, [pc, #48]	@ (80018b4 <Flash_Setup+0x94>)
 8001882:	6818      	ldr	r0, [r3, #0]
 8001884:	f107 0114 	add.w	r1, r7, #20
 8001888:	f04f 33ff 	mov.w	r3, #4294967295
 800188c:	2203      	movs	r2, #3
 800188e:	f005 fc08 	bl	80070a2 <HAL_SPI_Transmit>
    HAL_SPI_Receive(flash_hspi, &device_id, 1, HAL_MAX_DELAY);
 8001892:	4b08      	ldr	r3, [pc, #32]	@ (80018b4 <Flash_Setup+0x94>)
 8001894:	6818      	ldr	r0, [r3, #0]
 8001896:	f107 0113 	add.w	r1, r7, #19
 800189a:	f04f 33ff 	mov.w	r3, #4294967295
 800189e:	2201      	movs	r2, #1
 80018a0:	f005 fd75 	bl	800738e <HAL_SPI_Receive>
    spi_end();
 80018a4:	f7ff ff72 	bl	800178c <spi_end>

    // (Optional) Compare device_id with W25Q32JV_DEVICE_ID to verify correct flash.
}
 80018a8:	bf00      	nop
 80018aa:	3718      	adds	r7, #24
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	0801123c 	.word	0x0801123c
 80018b4:	20000214 	.word	0x20000214
 80018b8:	20000218 	.word	0x20000218
 80018bc:	2000021c 	.word	0x2000021c

080018c0 <Flash_Busy>:

bool Flash_Busy(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
    // Return true if the busy bit is set in the status register.
    return ((flash_status_1() & FLASH_BUSY_MASK) != 0);
 80018c4:	f7ff ff72 	bl	80017ac <flash_status_1>
 80018c8:	4603      	mov	r3, r0
 80018ca:	f003 0301 	and.w	r3, r3, #1
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	bf14      	ite	ne
 80018d2:	2301      	movne	r3, #1
 80018d4:	2300      	moveq	r3, #0
 80018d6:	b2db      	uxtb	r3, r3
}
 80018d8:	4618      	mov	r0, r3
 80018da:	bd80      	pop	{r7, pc}

080018dc <Flash_Write>:

void Flash_Write(uint32_t page_addr, uint8_t page[EXT_FLASH_PAGE_SIZE])
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	6039      	str	r1, [r7, #0]
    uint8_t cmd;
    uint8_t addr[3];

    flash_write_enable();
 80018e6:	f7ff ff83 	bl	80017f0 <flash_write_enable>

    cmd = FLASH_CMD_PAGE_PROGRAM;
 80018ea:	2302      	movs	r3, #2
 80018ec:	73fb      	strb	r3, [r7, #15]
    // Convert the page index into a 24-bit address.
    // Here the page index corresponds to a byte address of (page_addr << 8).
    addr[0] = (uint8_t)((page_addr >> 8) & 0xFF);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	0a1b      	lsrs	r3, r3, #8
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	733b      	strb	r3, [r7, #12]
    addr[1] = (uint8_t)(page_addr & 0xFF);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	737b      	strb	r3, [r7, #13]
    addr[2] = 0;
 80018fc:	2300      	movs	r3, #0
 80018fe:	73bb      	strb	r3, [r7, #14]

    spi_begin();
 8001900:	f7ff ff34 	bl	800176c <spi_begin>
    HAL_SPI_Transmit(flash_hspi, &cmd, 1, HAL_MAX_DELAY);
 8001904:	4b15      	ldr	r3, [pc, #84]	@ (800195c <Flash_Write+0x80>)
 8001906:	6818      	ldr	r0, [r3, #0]
 8001908:	f107 010f 	add.w	r1, r7, #15
 800190c:	f04f 33ff 	mov.w	r3, #4294967295
 8001910:	2201      	movs	r2, #1
 8001912:	f005 fbc6 	bl	80070a2 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(flash_hspi, addr, 3, HAL_MAX_DELAY);
 8001916:	4b11      	ldr	r3, [pc, #68]	@ (800195c <Flash_Write+0x80>)
 8001918:	6818      	ldr	r0, [r3, #0]
 800191a:	f107 010c 	add.w	r1, r7, #12
 800191e:	f04f 33ff 	mov.w	r3, #4294967295
 8001922:	2203      	movs	r2, #3
 8001924:	f005 fbbd 	bl	80070a2 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(flash_hspi, page, EXT_FLASH_PAGE_SIZE, HAL_MAX_DELAY);
 8001928:	4b0c      	ldr	r3, [pc, #48]	@ (800195c <Flash_Write+0x80>)
 800192a:	6818      	ldr	r0, [r3, #0]
 800192c:	f04f 33ff 	mov.w	r3, #4294967295
 8001930:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001934:	6839      	ldr	r1, [r7, #0]
 8001936:	f005 fbb4 	bl	80070a2 <HAL_SPI_Transmit>
    spi_end();
 800193a:	f7ff ff27 	bl	800178c <spi_end>

    // Wait for the write operation to complete.
    while (Flash_Busy())
 800193e:	e002      	b.n	8001946 <Flash_Write+0x6a>
    {
        HAL_Delay(1);
 8001940:	2001      	movs	r0, #1
 8001942:	f002 f955 	bl	8003bf0 <HAL_Delay>
    while (Flash_Busy())
 8001946:	f7ff ffbb 	bl	80018c0 <Flash_Busy>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d1f7      	bne.n	8001940 <Flash_Write+0x64>
    }
}
 8001950:	bf00      	nop
 8001952:	bf00      	nop
 8001954:	3710      	adds	r7, #16
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	20000214 	.word	0x20000214

08001960 <Flash_Read>:

void Flash_Read(uint32_t page_addr, uint8_t page[EXT_FLASH_PAGE_SIZE])
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
 8001968:	6039      	str	r1, [r7, #0]
    uint8_t cmd;
    uint8_t addr[3];

    cmd = FLASH_CMD_READ_DATA;
 800196a:	2303      	movs	r3, #3
 800196c:	73fb      	strb	r3, [r7, #15]
    addr[0] = (uint8_t)((page_addr >> 8) & 0xFF);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	0a1b      	lsrs	r3, r3, #8
 8001972:	b2db      	uxtb	r3, r3
 8001974:	733b      	strb	r3, [r7, #12]
    addr[1] = (uint8_t)(page_addr & 0xFF);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	b2db      	uxtb	r3, r3
 800197a:	737b      	strb	r3, [r7, #13]
    addr[2] = 0;
 800197c:	2300      	movs	r3, #0
 800197e:	73bb      	strb	r3, [r7, #14]

    spi_begin();
 8001980:	f7ff fef4 	bl	800176c <spi_begin>
    HAL_SPI_Transmit(flash_hspi, &cmd, 1, HAL_MAX_DELAY);
 8001984:	4b10      	ldr	r3, [pc, #64]	@ (80019c8 <Flash_Read+0x68>)
 8001986:	6818      	ldr	r0, [r3, #0]
 8001988:	f107 010f 	add.w	r1, r7, #15
 800198c:	f04f 33ff 	mov.w	r3, #4294967295
 8001990:	2201      	movs	r2, #1
 8001992:	f005 fb86 	bl	80070a2 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(flash_hspi, addr, 3, HAL_MAX_DELAY);
 8001996:	4b0c      	ldr	r3, [pc, #48]	@ (80019c8 <Flash_Read+0x68>)
 8001998:	6818      	ldr	r0, [r3, #0]
 800199a:	f107 010c 	add.w	r1, r7, #12
 800199e:	f04f 33ff 	mov.w	r3, #4294967295
 80019a2:	2203      	movs	r2, #3
 80019a4:	f005 fb7d 	bl	80070a2 <HAL_SPI_Transmit>
    HAL_SPI_Receive(flash_hspi, page, EXT_FLASH_PAGE_SIZE, HAL_MAX_DELAY);
 80019a8:	4b07      	ldr	r3, [pc, #28]	@ (80019c8 <Flash_Read+0x68>)
 80019aa:	6818      	ldr	r0, [r3, #0]
 80019ac:	f04f 33ff 	mov.w	r3, #4294967295
 80019b0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80019b4:	6839      	ldr	r1, [r7, #0]
 80019b6:	f005 fcea 	bl	800738e <HAL_SPI_Receive>
    spi_end();
 80019ba:	f7ff fee7 	bl	800178c <spi_end>
}
 80019be:	bf00      	nop
 80019c0:	3710      	adds	r7, #16
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	20000214 	.word	0x20000214

080019cc <Flash_Erase>:

void Flash_Erase(uint32_t page_addr)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
    uint8_t cmd;
    uint8_t addr[3];

    flash_write_enable();
 80019d4:	f7ff ff0c 	bl	80017f0 <flash_write_enable>

    cmd = FLASH_CMD_BLOCK_ERASE_32KB;
 80019d8:	2352      	movs	r3, #82	@ 0x52
 80019da:	73fb      	strb	r3, [r7, #15]
    addr[0] = (uint8_t)((page_addr >> 8) & 0xFF);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	0a1b      	lsrs	r3, r3, #8
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	733b      	strb	r3, [r7, #12]
    addr[1] = (uint8_t)(page_addr & 0xFF);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	737b      	strb	r3, [r7, #13]
    addr[2] = 0;
 80019ea:	2300      	movs	r3, #0
 80019ec:	73bb      	strb	r3, [r7, #14]

    spi_begin();
 80019ee:	f7ff febd 	bl	800176c <spi_begin>
    HAL_SPI_Transmit(flash_hspi, &cmd, 1, HAL_MAX_DELAY);
 80019f2:	4b11      	ldr	r3, [pc, #68]	@ (8001a38 <Flash_Erase+0x6c>)
 80019f4:	6818      	ldr	r0, [r3, #0]
 80019f6:	f107 010f 	add.w	r1, r7, #15
 80019fa:	f04f 33ff 	mov.w	r3, #4294967295
 80019fe:	2201      	movs	r2, #1
 8001a00:	f005 fb4f 	bl	80070a2 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(flash_hspi, addr, 3, HAL_MAX_DELAY);
 8001a04:	4b0c      	ldr	r3, [pc, #48]	@ (8001a38 <Flash_Erase+0x6c>)
 8001a06:	6818      	ldr	r0, [r3, #0]
 8001a08:	f107 010c 	add.w	r1, r7, #12
 8001a0c:	f04f 33ff 	mov.w	r3, #4294967295
 8001a10:	2203      	movs	r2, #3
 8001a12:	f005 fb46 	bl	80070a2 <HAL_SPI_Transmit>
    spi_end();
 8001a16:	f7ff feb9 	bl	800178c <spi_end>

    // Wait for the erase operation to complete.
    while (Flash_Busy())
 8001a1a:	e002      	b.n	8001a22 <Flash_Erase+0x56>
    {
        HAL_Delay(1);
 8001a1c:	2001      	movs	r0, #1
 8001a1e:	f002 f8e7 	bl	8003bf0 <HAL_Delay>
    while (Flash_Busy())
 8001a22:	f7ff ff4d 	bl	80018c0 <Flash_Busy>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d1f7      	bne.n	8001a1c <Flash_Erase+0x50>
    }
}
 8001a2c:	bf00      	nop
 8001a2e:	bf00      	nop
 8001a30:	3710      	adds	r7, #16
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	20000214 	.word	0x20000214

08001a3c <calculate_gain>:

// Helper function to compute the Kalman gain iteratively.
// This function uses the current state transition matrix (stm) stored in kf,
// and the measurement and process noise variances (computed as sigma^2).
static void calculate_gain(KalmanFilter *kf, float alt_sigma, float accel_sigma, float model_sigma)
{
 8001a3c:	b5b0      	push	{r4, r5, r7, lr}
 8001a3e:	b0c0      	sub	sp, #256	@ 0x100
 8001a40:	af02      	add	r7, sp, #8
 8001a42:	60f8      	str	r0, [r7, #12]
 8001a44:	ed87 0a02 	vstr	s0, [r7, #8]
 8001a48:	edc7 0a01 	vstr	s1, [r7, #4]
 8001a4c:	ed87 1a00 	vstr	s2, [r7]
    float alt_variance   = alt_sigma * alt_sigma;
 8001a50:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a54:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001a58:	edc7 7a39 	vstr	s15, [r7, #228]	@ 0xe4
    float accel_variance = accel_sigma * accel_sigma;
 8001a5c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a60:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001a64:	edc7 7a38 	vstr	s15, [r7, #224]	@ 0xe0
    float model_variance = model_sigma * model_sigma;
 8001a68:	edd7 7a00 	vldr	s15, [r7]
 8001a6c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001a70:	edc7 7a37 	vstr	s15, [r7, #220]	@ 0xdc

    // Compute the transpose of the state transition matrix (3x3).
    float stm_t[9];
    matrix_transpose(kf->stm, stm_t, 3, 3);
 8001a74:	68f8      	ldr	r0, [r7, #12]
 8001a76:	f107 01ac 	add.w	r1, r7, #172	@ 0xac
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	2203      	movs	r2, #3
 8001a7e:	f001 fe33 	bl	80036e8 <matrix_transpose>

    // Copy the current gain into last_kgain for convergence checking.
    float last_kgain[6] = { 0 };
 8001a82:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001a86:	2200      	movs	r2, #0
 8001a88:	601a      	str	r2, [r3, #0]
 8001a8a:	605a      	str	r2, [r3, #4]
 8001a8c:	609a      	str	r2, [r3, #8]
 8001a8e:	60da      	str	r2, [r3, #12]
 8001a90:	611a      	str	r2, [r3, #16]
 8001a92:	615a      	str	r2, [r3, #20]
    for (int i = 0; i < 6; i++) {
 8001a94:	2300      	movs	r3, #0
 8001a96:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8001a9a:	e013      	b.n	8001ac4 <calculate_gain+0x88>
        last_kgain[i] = kf->kgain[i];
 8001a9c:	68fa      	ldr	r2, [r7, #12]
 8001a9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001aa2:	3308      	adds	r3, #8
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	4413      	add	r3, r2
 8001aa8:	3304      	adds	r3, #4
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	33f8      	adds	r3, #248	@ 0xf8
 8001ab4:	443b      	add	r3, r7
 8001ab6:	3b64      	subs	r3, #100	@ 0x64
 8001ab8:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 6; i++) {
 8001aba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001abe:	3301      	adds	r3, #1
 8001ac0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8001ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ac8:	2b05      	cmp	r3, #5
 8001aca:	dde7      	ble.n	8001a9c <calculate_gain+0x60>
    }

    unsigned int iterations = 0;
 8001acc:	2300      	movs	r3, #0
 8001ace:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    // pest: state covariance estimate (3x3); initialize as given.
    float pest[9]  = { 2.0f, 0.0f, 0.0f,
 8001ad2:	4bdd      	ldr	r3, [pc, #884]	@ (8001e48 <calculate_gain+0x40c>)
 8001ad4:	f107 0470 	add.w	r4, r7, #112	@ 0x70
 8001ad8:	461d      	mov	r5, r3
 8001ada:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001adc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ade:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ae0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ae2:	682b      	ldr	r3, [r5, #0]
 8001ae4:	6023      	str	r3, [r4, #0]
                       0.0f, 9.0f, 0.0f,
                       0.0f, 0.0f, 9.0f };
    float pestp[9] = { 0.0f }; // predicted covariance matrix
 8001ae6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001aea:	2224      	movs	r2, #36	@ 0x24
 8001aec:	2100      	movs	r1, #0
 8001aee:	4618      	mov	r0, r3
 8001af0:	f00d ff8e 	bl	800fa10 <memset>

    while (1)
    {
        // Propagate state covariance:
        // term = stm * pest
        matrix_multiply(kf->stm, pest, term, 3, 3, 3);
 8001af4:	68f8      	ldr	r0, [r7, #12]
 8001af6:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8001afa:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 8001afe:	2303      	movs	r3, #3
 8001b00:	9301      	str	r3, [sp, #4]
 8001b02:	2303      	movs	r3, #3
 8001b04:	9300      	str	r3, [sp, #0]
 8001b06:	2303      	movs	r3, #3
 8001b08:	f001 fd86 	bl	8003618 <matrix_multiply>
        // pestp = term * stm_t
        matrix_multiply(term, stm_t, pestp, 3, 3, 3);
 8001b0c:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8001b10:	f107 01ac 	add.w	r1, r7, #172	@ 0xac
 8001b14:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8001b18:	2303      	movs	r3, #3
 8001b1a:	9301      	str	r3, [sp, #4]
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	9300      	str	r3, [sp, #0]
 8001b20:	2303      	movs	r3, #3
 8001b22:	f001 fd79 	bl	8003618 <matrix_multiply>
        // Add process noise to the (2,2) element.
        pestp[8] += model_variance;  // (2,2) element in row-major index: 2*3+2 = 8
 8001b26:	ed97 7a1b 	vldr	s14, [r7, #108]	@ 0x6c
 8001b2a:	edd7 7a37 	vldr	s15, [r7, #220]	@ 0xdc
 8001b2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b32:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c

        // Compute the innovation covariance determinant.
        // Using pestp(0,0), pestp(2,2), pestp(2,0) and pestp(0,2):
        float det = (pestp[0] + alt_variance) * (pestp[8] + accel_variance) - pestp[6] * pestp[2];
 8001b36:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001b3a:	edd7 7a39 	vldr	s15, [r7, #228]	@ 0xe4
 8001b3e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b42:	edd7 6a1b 	vldr	s13, [r7, #108]	@ 0x6c
 8001b46:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8001b4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001b4e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b52:	edd7 6a19 	vldr	s13, [r7, #100]	@ 0x64
 8001b56:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8001b5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b62:	edc7 7a36 	vstr	s15, [r7, #216]	@ 0xd8

        // Update Kalman gain (kgain is 3x2, row-major).
        // Row 0:
        kf->kgain[0] = (pestp[0] * (pestp[8] + accel_variance) - pestp[2] * pestp[6]) / det;
 8001b66:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001b6a:	edd7 6a1b 	vldr	s13, [r7, #108]	@ 0x6c
 8001b6e:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8001b72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001b76:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b7a:	edd7 6a15 	vldr	s13, [r7, #84]	@ 0x54
 8001b7e:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8001b82:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b86:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001b8a:	ed97 7a36 	vldr	s14, [r7, #216]	@ 0xd8
 8001b8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
        kf->kgain[1] = (pestp[0] * (-pestp[2]) + pestp[2] * (pestp[0] + alt_variance)) / det;
 8001b98:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001b9c:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8001ba0:	eef1 7a67 	vneg.f32	s15, s15
 8001ba4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ba8:	edd7 6a15 	vldr	s13, [r7, #84]	@ 0x54
 8001bac:	ed97 6a13 	vldr	s12, [r7, #76]	@ 0x4c
 8001bb0:	edd7 7a39 	vldr	s15, [r7, #228]	@ 0xe4
 8001bb4:	ee76 7a27 	vadd.f32	s15, s12, s15
 8001bb8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bbc:	ee77 6a27 	vadd.f32	s13, s14, s15
 8001bc0:	ed97 7a36 	vldr	s14, [r7, #216]	@ 0xd8
 8001bc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
        // Row 1:
        kf->kgain[2] = (pestp[3] * (pestp[8] + accel_variance) - pestp[5] * pestp[6]) / det;
 8001bce:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8001bd2:	edd7 6a1b 	vldr	s13, [r7, #108]	@ 0x6c
 8001bd6:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8001bda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001bde:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001be2:	edd7 6a18 	vldr	s13, [r7, #96]	@ 0x60
 8001be6:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8001bea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bee:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001bf2:	ed97 7a36 	vldr	s14, [r7, #216]	@ 0xd8
 8001bf6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
        kf->kgain[3] = (pestp[3] * (-pestp[2]) + pestp[5] * (pestp[0] + alt_variance)) / det;
 8001c00:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8001c04:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8001c08:	eef1 7a67 	vneg.f32	s15, s15
 8001c0c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c10:	edd7 6a18 	vldr	s13, [r7, #96]	@ 0x60
 8001c14:	ed97 6a13 	vldr	s12, [r7, #76]	@ 0x4c
 8001c18:	edd7 7a39 	vldr	s15, [r7, #228]	@ 0xe4
 8001c1c:	ee76 7a27 	vadd.f32	s15, s12, s15
 8001c20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c24:	ee77 6a27 	vadd.f32	s13, s14, s15
 8001c28:	ed97 7a36 	vldr	s14, [r7, #216]	@ 0xd8
 8001c2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
        // Row 2:
        kf->kgain[4] = (pestp[6] * (pestp[8] + accel_variance) - pestp[8] * pestp[6]) / det;
 8001c36:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 8001c3a:	edd7 6a1b 	vldr	s13, [r7, #108]	@ 0x6c
 8001c3e:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8001c42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001c46:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c4a:	edd7 6a1b 	vldr	s13, [r7, #108]	@ 0x6c
 8001c4e:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8001c52:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c56:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001c5a:	ed97 7a36 	vldr	s14, [r7, #216]	@ 0xd8
 8001c5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
        kf->kgain[5] = (pestp[6] * (-pestp[2]) + pestp[8] * (pestp[0] + alt_variance)) / det;
 8001c68:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 8001c6c:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8001c70:	eef1 7a67 	vneg.f32	s15, s15
 8001c74:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c78:	edd7 6a1b 	vldr	s13, [r7, #108]	@ 0x6c
 8001c7c:	ed97 6a13 	vldr	s12, [r7, #76]	@ 0x4c
 8001c80:	edd7 7a39 	vldr	s15, [r7, #228]	@ 0xe4
 8001c84:	ee76 7a27 	vadd.f32	s15, s12, s15
 8001c88:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c8c:	ee77 6a27 	vadd.f32	s13, s14, s15
 8001c90:	ed97 7a36 	vldr	s14, [r7, #216]	@ 0xd8
 8001c94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38

        // Update covariance: pest = f(pestp, kgain)
        // Row 0:
        pest[0] = pestp[0] * (1.0f - kf->kgain[0]) - kf->kgain[1] * pestp[6];
 8001c9e:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001ca8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001cac:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001cb0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 8001cba:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8001cbe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cc2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cc6:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
        pest[1] = pestp[1] * (1.0f - kf->kgain[0]) - kf->kgain[1] * pestp[7];
 8001cca:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001cd4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001cd8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001cdc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 8001ce6:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8001cea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cf2:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
        pest[2] = pestp[2] * (1.0f - kf->kgain[0]) - kf->kgain[1] * pestp[8];
 8001cf6:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001d00:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001d04:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001d08:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 8001d12:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8001d16:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d1e:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
        // Row 1:
        pest[3] = pestp[0] * (-kf->kgain[2]) + pestp[3] - kf->kgain[3] * pestp[6];
 8001d22:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001d2c:	eef1 7a67 	vneg.f32	s15, s15
 8001d30:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d34:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8001d38:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 8001d42:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8001d46:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d4e:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
        pest[4] = pestp[1] * (-kf->kgain[2]) + pestp[4] - kf->kgain[3] * pestp[7];
 8001d52:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001d5c:	eef1 7a67 	vneg.f32	s15, s15
 8001d60:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d64:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8001d68:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 8001d72:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8001d76:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d7e:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
        pest[5] = pestp[2] * (-kf->kgain[2]) + pestp[5] - kf->kgain[3] * pestp[8];
 8001d82:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001d8c:	eef1 7a67 	vneg.f32	s15, s15
 8001d90:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d94:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8001d98:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 8001da2:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8001da6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001daa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dae:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
        // Row 2:
        pest[6] = (1.0f - kf->kgain[5]) * pestp[6] - kf->kgain[4] * pestp[6];
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8001db8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001dbc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001dc0:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8001dc4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	edd3 6a0d 	vldr	s13, [r3, #52]	@ 0x34
 8001dce:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8001dd2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dd6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dda:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88
        pest[7] = (1.0f - kf->kgain[5]) * pestp[7] - kf->kgain[4] * pestp[7];
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8001de4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001de8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001dec:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8001df0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	edd3 6a0d 	vldr	s13, [r3, #52]	@ 0x34
 8001dfa:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8001dfe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e06:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
        pest[8] = (1.0f - kf->kgain[5]) * pestp[8] - kf->kgain[4] * pestp[8];
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8001e10:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001e14:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e18:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8001e1c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	edd3 6a0d 	vldr	s13, [r3, #52]	@ 0x34
 8001e26:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8001e2a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e32:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90

        iterations++;
 8001e36:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0

        // Check for convergence.
        // Compute the difference norm between current kgain and last_kgain.
        float diff[6];
        for (int i = 0; i < 6; i++) {
 8001e40:	2300      	movs	r3, #0
 8001e42:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001e46:	e023      	b.n	8001e90 <calculate_gain+0x454>
 8001e48:	08011240 	.word	0x08011240
 8001e4c:	2b8cbccc 	.word	0x2b8cbccc
            diff[i] = kf->kgain[i] - last_kgain[i];
 8001e50:	68fa      	ldr	r2, [r7, #12]
 8001e52:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8001e56:	3308      	adds	r3, #8
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	4413      	add	r3, r2
 8001e5c:	3304      	adds	r3, #4
 8001e5e:	ed93 7a00 	vldr	s14, [r3]
 8001e62:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	33f8      	adds	r3, #248	@ 0xf8
 8001e6a:	443b      	add	r3, r7
 8001e6c:	3b64      	subs	r3, #100	@ 0x64
 8001e6e:	edd3 7a00 	vldr	s15, [r3]
 8001e72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e76:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	33f8      	adds	r3, #248	@ 0xf8
 8001e7e:	443b      	add	r3, r7
 8001e80:	3be8      	subs	r3, #232	@ 0xe8
 8001e82:	edc3 7a00 	vstr	s15, [r3]
        for (int i = 0; i < 6; i++) {
 8001e86:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001e90:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8001e94:	2b05      	cmp	r3, #5
 8001e96:	dddb      	ble.n	8001e50 <calculate_gain+0x414>
        }
        float norm_diff = matrix_norm_sq(diff, 1, 6);
 8001e98:	f107 0310 	add.w	r3, r7, #16
 8001e9c:	2206      	movs	r2, #6
 8001e9e:	2101      	movs	r1, #1
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f001 fc57 	bl	8003754 <matrix_norm_sq>
 8001ea6:	ed87 0a35 	vstr	s0, [r7, #212]	@ 0xd4
        float norm_last = matrix_norm_sq(last_kgain, 1, 6);
 8001eaa:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001eae:	2206      	movs	r2, #6
 8001eb0:	2101      	movs	r1, #1
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f001 fc4e 	bl	8003754 <matrix_norm_sq>
 8001eb8:	ed87 0a34 	vstr	s0, [r7, #208]	@ 0xd0
        if (norm_last > 0 && (norm_diff / norm_last) < 1e-12f) {
 8001ebc:	edd7 7a34 	vldr	s15, [r7, #208]	@ 0xd0
 8001ec0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ec4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ec8:	dd0c      	ble.n	8001ee4 <calculate_gain+0x4a8>
 8001eca:	edd7 6a35 	vldr	s13, [r7, #212]	@ 0xd4
 8001ece:	ed97 7a34 	vldr	s14, [r7, #208]	@ 0xd0
 8001ed2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ed6:	ed1f 7a23 	vldr	s14, [pc, #-140]	@ 8001e4c <calculate_gain+0x410>
 8001eda:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ee2:	d41c      	bmi.n	8001f1e <calculate_gain+0x4e2>
            break;
        }
        // Update last_kgain.
        for (int i = 0; i < 6; i++) {
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001eea:	e013      	b.n	8001f14 <calculate_gain+0x4d8>
            last_kgain[i] = kf->kgain[i];
 8001eec:	68fa      	ldr	r2, [r7, #12]
 8001eee:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8001ef2:	3308      	adds	r3, #8
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	4413      	add	r3, r2
 8001ef8:	3304      	adds	r3, #4
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	33f8      	adds	r3, #248	@ 0xf8
 8001f04:	443b      	add	r3, r7
 8001f06:	3b64      	subs	r3, #100	@ 0x64
 8001f08:	601a      	str	r2, [r3, #0]
        for (int i = 0; i < 6; i++) {
 8001f0a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8001f0e:	3301      	adds	r3, #1
 8001f10:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001f14:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8001f18:	2b05      	cmp	r3, #5
 8001f1a:	dde7      	ble.n	8001eec <calculate_gain+0x4b0>
    {
 8001f1c:	e5ea      	b.n	8001af4 <calculate_gain+0xb8>
        }
    }
    // (Optionally, you can log the number of iterations for debugging.)
}
 8001f1e:	bf00      	nop
 8001f20:	37f8      	adds	r7, #248	@ 0xf8
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bdb0      	pop	{r4, r5, r7, pc}
 8001f26:	bf00      	nop

08001f28 <KalmanFilter_init>:

void KalmanFilter_init(KalmanFilter *kf, float time_step, float alt_sigma, float accel_sigma, float model_sigma)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b088      	sub	sp, #32
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6178      	str	r0, [r7, #20]
 8001f30:	ed87 0a04 	vstr	s0, [r7, #16]
 8001f34:	edc7 0a03 	vstr	s1, [r7, #12]
 8001f38:	ed87 1a02 	vstr	s2, [r7, #8]
 8001f3c:	edc7 1a01 	vstr	s3, [r7, #4]
    // Initialize the state transition matrix (stm) for constant acceleration model.
    // [1, time_step, time_step^2/2;
    //  0, 1,        time_step;
    //  0, 0,        1]
    kf->stm[0] = 1.0f;
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001f46:	601a      	str	r2, [r3, #0]
    kf->stm[1] = time_step;
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	693a      	ldr	r2, [r7, #16]
 8001f4c:	605a      	str	r2, [r3, #4]
    kf->stm[2] = (time_step * time_step) / 2.0f;
 8001f4e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001f52:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001f56:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001f5a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	edc3 7a02 	vstr	s15, [r3, #8]

    kf->stm[3] = 0.0f;
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	f04f 0200 	mov.w	r2, #0
 8001f6a:	60da      	str	r2, [r3, #12]
    kf->stm[4] = 1.0f;
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001f72:	611a      	str	r2, [r3, #16]
    kf->stm[5] = time_step;
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	693a      	ldr	r2, [r7, #16]
 8001f78:	615a      	str	r2, [r3, #20]

    kf->stm[6] = 0.0f;
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	f04f 0200 	mov.w	r2, #0
 8001f80:	619a      	str	r2, [r3, #24]
    kf->stm[7] = 0.0f;
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	f04f 0200 	mov.w	r2, #0
 8001f88:	61da      	str	r2, [r3, #28]
    kf->stm[8] = 1.0f;
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001f90:	621a      	str	r2, [r3, #32]

    // Mark that this is the first step.
    kf->first_step = 1;
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	2201      	movs	r2, #1
 8001f96:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    // Initialize the state estimates (est and estp) to zero.
    for (int i = 0; i < 3; i++) {
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	61fb      	str	r3, [r7, #28]
 8001f9e:	e013      	b.n	8001fc8 <KalmanFilter_init+0xa0>
        kf->est[i] = 0.0f;
 8001fa0:	697a      	ldr	r2, [r7, #20]
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	3312      	adds	r3, #18
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	4413      	add	r3, r2
 8001faa:	f04f 0200 	mov.w	r2, #0
 8001fae:	601a      	str	r2, [r3, #0]
        kf->estp[i] = 0.0f;
 8001fb0:	697a      	ldr	r2, [r7, #20]
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	330e      	adds	r3, #14
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	4413      	add	r3, r2
 8001fba:	3304      	adds	r3, #4
 8001fbc:	f04f 0200 	mov.w	r2, #0
 8001fc0:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	3301      	adds	r3, #1
 8001fc6:	61fb      	str	r3, [r7, #28]
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	dde8      	ble.n	8001fa0 <KalmanFilter_init+0x78>
    }

    // Initialize Kalman gain (kgain) to zero.
    for (int i = 0; i < 6; i++) {
 8001fce:	2300      	movs	r3, #0
 8001fd0:	61bb      	str	r3, [r7, #24]
 8001fd2:	e00b      	b.n	8001fec <KalmanFilter_init+0xc4>
        kf->kgain[i] = 0.0f;
 8001fd4:	697a      	ldr	r2, [r7, #20]
 8001fd6:	69bb      	ldr	r3, [r7, #24]
 8001fd8:	3308      	adds	r3, #8
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	4413      	add	r3, r2
 8001fde:	3304      	adds	r3, #4
 8001fe0:	f04f 0200 	mov.w	r2, #0
 8001fe4:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 6; i++) {
 8001fe6:	69bb      	ldr	r3, [r7, #24]
 8001fe8:	3301      	adds	r3, #1
 8001fea:	61bb      	str	r3, [r7, #24]
 8001fec:	69bb      	ldr	r3, [r7, #24]
 8001fee:	2b05      	cmp	r3, #5
 8001ff0:	ddf0      	ble.n	8001fd4 <KalmanFilter_init+0xac>
    }

    // Calculate the initial Kalman gain using the provided noise parameters.
    calculate_gain(kf, alt_sigma, accel_sigma, model_sigma);
 8001ff2:	ed97 1a01 	vldr	s2, [r7, #4]
 8001ff6:	edd7 0a02 	vldr	s1, [r7, #8]
 8001ffa:	ed97 0a03 	vldr	s0, [r7, #12]
 8001ffe:	6978      	ldr	r0, [r7, #20]
 8002000:	f7ff fd1c 	bl	8001a3c <calculate_gain>
}
 8002004:	bf00      	nop
 8002006:	3720      	adds	r7, #32
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}

0800200c <KalmanFilter_step>:

void KalmanFilter_step(KalmanFilter *kf, float accel, float altitude)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b08e      	sub	sp, #56	@ 0x38
 8002010:	af02      	add	r7, sp, #8
 8002012:	60f8      	str	r0, [r7, #12]
 8002014:	ed87 0a02 	vstr	s0, [r7, #8]
 8002018:	edc7 0a01 	vstr	s1, [r7, #4]
    // On the very first step, use the measured altitude to initialize the position.
    if (kf->first_step) {
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002022:	2b00      	cmp	r3, #0
 8002024:	d006      	beq.n	8002034 <KalmanFilter_step+0x28>
        kf->first_step = 0;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2200      	movs	r2, #0
 800202a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        kf->est[0] = altitude;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	687a      	ldr	r2, [r7, #4]
 8002032:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    // Compute the innovation (measurement residuals):
    // alt_innovation = measured altitude - predicted altitude (first element of estp)
    // accel_innovation = measured acceleration - predicted acceleration (third element of estp)
    float alt_innovation   = altitude - kf->estp[0];
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 800203a:	ed97 7a01 	vldr	s14, [r7, #4]
 800203e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002042:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    float accel_innovation = accel - kf->estp[2];
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 800204c:	ed97 7a02 	vldr	s14, [r7, #8]
 8002050:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002054:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    // Special-case handling for transonic effects.
    // If the altitude error is large and the predicted velocity is in a narrow range,
    // then—if the predicted acceleration is negative—trust the altitude measurement.
    if (fabsf(alt_innovation) > 30.0f && kf->estp[1] > 300.0f && kf->estp[1] < 400.0f) {
 8002058:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800205c:	eef0 7ae7 	vabs.f32	s15, s15
 8002060:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002064:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002068:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800206c:	dd21      	ble.n	80020b2 <KalmanFilter_step+0xa6>
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8002074:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8002158 <KalmanFilter_step+0x14c>
 8002078:	eef4 7ac7 	vcmpe.f32	s15, s14
 800207c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002080:	dd17      	ble.n	80020b2 <KalmanFilter_step+0xa6>
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8002088:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800215c <KalmanFilter_step+0x150>
 800208c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002090:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002094:	d50d      	bpl.n	80020b2 <KalmanFilter_step+0xa6>
        if (kf->estp[2] < 0.0f) {
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 800209c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80020a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020a4:	d505      	bpl.n	80020b2 <KalmanFilter_step+0xa6>
            kf->est[0] = altitude;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	649a      	str	r2, [r3, #72]	@ 0x48
            alt_innovation = 0.0f;
 80020ac:	f04f 0300 	mov.w	r3, #0
 80020b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
    }

    // Ignore altitude innovations if the measurement is out of range.
    if (altitude > 12000.0f) {
 80020b2:	edd7 7a01 	vldr	s15, [r7, #4]
 80020b6:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8002160 <KalmanFilter_step+0x154>
 80020ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020c2:	dd02      	ble.n	80020ca <KalmanFilter_step+0xbe>
        alt_innovation = 0.0f;
 80020c4:	f04f 0300 	mov.w	r3, #0
 80020c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }

    // Propagate the state: predicted state estp = stm * est.
    // Here, stm is 3x3 and est is 3x1.
    matrix_multiply(kf->stm, kf->est, kf->estp, 3, 3, 1);
 80020ca:	68f8      	ldr	r0, [r7, #12]
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 80020d8:	2301      	movs	r3, #1
 80020da:	9301      	str	r3, [sp, #4]
 80020dc:	2303      	movs	r3, #3
 80020de:	9300      	str	r3, [sp, #0]
 80020e0:	2303      	movs	r3, #3
 80020e2:	f001 fa99 	bl	8003618 <matrix_multiply>

    // Form the innovation vector (2x1) from altitude and acceleration innovations.
    float innov[2] = { alt_innovation, accel_innovation };
 80020e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020e8:	61fb      	str	r3, [r7, #28]
 80020ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ec:	623b      	str	r3, [r7, #32]

    // Compute the correction: correction = kgain * innov.
    // kgain is 3x2 and innov is 2x1, yielding a 3x1 correction.
    float correction[3];
    matrix_multiply(kf->kgain, innov, correction, 3, 2, 1);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 80020f4:	f107 0210 	add.w	r2, r7, #16
 80020f8:	f107 011c 	add.w	r1, r7, #28
 80020fc:	2301      	movs	r3, #1
 80020fe:	9301      	str	r3, [sp, #4]
 8002100:	2302      	movs	r3, #2
 8002102:	9300      	str	r3, [sp, #0]
 8002104:	2303      	movs	r3, #3
 8002106:	f001 fa87 	bl	8003618 <matrix_multiply>

    // Update the state estimate: est = estp + correction.
    for (int i = 0; i < 3; i++) {
 800210a:	2300      	movs	r3, #0
 800210c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800210e:	e01a      	b.n	8002146 <KalmanFilter_step+0x13a>
        kf->est[i] = kf->estp[i] + correction[i];
 8002110:	68fa      	ldr	r2, [r7, #12]
 8002112:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002114:	330e      	adds	r3, #14
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	4413      	add	r3, r2
 800211a:	3304      	adds	r3, #4
 800211c:	ed93 7a00 	vldr	s14, [r3]
 8002120:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	3330      	adds	r3, #48	@ 0x30
 8002126:	443b      	add	r3, r7
 8002128:	3b20      	subs	r3, #32
 800212a:	edd3 7a00 	vldr	s15, [r3]
 800212e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002132:	68fa      	ldr	r2, [r7, #12]
 8002134:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002136:	3312      	adds	r3, #18
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	4413      	add	r3, r2
 800213c:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 3; i++) {
 8002140:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002142:	3301      	adds	r3, #1
 8002144:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002146:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002148:	2b02      	cmp	r3, #2
 800214a:	dde1      	ble.n	8002110 <KalmanFilter_step+0x104>
    }

    // (Optional: Insert logging or debugging output here.)
}
 800214c:	bf00      	nop
 800214e:	bf00      	nop
 8002150:	3730      	adds	r7, #48	@ 0x30
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	43960000 	.word	0x43960000
 800215c:	43c80000 	.word	0x43c80000
 8002160:	463b8000 	.word	0x463b8000

08002164 <ring_buffer_available>:
    uint8_t *buf;     // Pointer to the buffer memory.
} RingBuffer;

void ring_buffer_init(RingBuffer *rb, void *buffer, size_t capacity, size_t elem_size);

static inline size_t ring_buffer_available(const RingBuffer *rb) {
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
    return rb->capacity - rb->size;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	68da      	ldr	r2, [r3, #12]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	1ad3      	subs	r3, r2, r3
}
 8002176:	4618      	mov	r0, r3
 8002178:	370c      	adds	r7, #12
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr

08002182 <ring_buffer_used>:

static inline size_t ring_buffer_used(const RingBuffer *rb) {
 8002182:	b480      	push	{r7}
 8002184:	b083      	sub	sp, #12
 8002186:	af00      	add	r7, sp, #0
 8002188:	6078      	str	r0, [r7, #4]
    return rb->size;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	689b      	ldr	r3, [r3, #8]
}
 800218e:	4618      	mov	r0, r3
 8002190:	370c      	adds	r7, #12
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
	...

0800219c <log_setup>:
/*----------------------------------------------------------------------------
  Public Logging Functions
----------------------------------------------------------------------------*/

void log_setup(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	af00      	add	r7, sp, #0
    // Initialize ring buffers.
    ring_buffer_init(&logBuffer, logBufferStorage, LOG_BUF_SIZE, sizeof(LogMessage));
 80021a0:	2344      	movs	r3, #68	@ 0x44
 80021a2:	2280      	movs	r2, #128	@ 0x80
 80021a4:	490a      	ldr	r1, [pc, #40]	@ (80021d0 <log_setup+0x34>)
 80021a6:	480b      	ldr	r0, [pc, #44]	@ (80021d4 <log_setup+0x38>)
 80021a8:	f001 fb1e 	bl	80037e8 <ring_buffer_init>
    ring_buffer_init(&writeBuffer, writeBufferStorage, LOG_WRITE_BUF_SIZE, sizeof(uint8_t));
 80021ac:	2301      	movs	r3, #1
 80021ae:	f44f 5208 	mov.w	r2, #8704	@ 0x2200
 80021b2:	4909      	ldr	r1, [pc, #36]	@ (80021d8 <log_setup+0x3c>)
 80021b4:	4809      	ldr	r0, [pc, #36]	@ (80021dc <log_setup+0x40>)
 80021b6:	f001 fb17 	bl	80037e8 <ring_buffer_init>

    // Reset flash write pointer.
    current_page = 0;
 80021ba:	4b09      	ldr	r3, [pc, #36]	@ (80021e0 <log_setup+0x44>)
 80021bc:	2200      	movs	r2, #0
 80021be:	601a      	str	r2, [r3, #0]
    written_pages = 0;
 80021c0:	4b08      	ldr	r3, [pc, #32]	@ (80021e4 <log_setup+0x48>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	601a      	str	r2, [r3, #0]

    // Optionally, if desired, erase the flash log area now.
     log_erase();  // Uncomment if you want to start with a blank flash.
 80021c6:	f000 f849 	bl	800225c <log_erase>
}
 80021ca:	bf00      	nop
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	20000220 	.word	0x20000220
 80021d4:	20002420 	.word	0x20002420
 80021d8:	20002438 	.word	0x20002438
 80021dc:	20004638 	.word	0x20004638
 80021e0:	20004654 	.word	0x20004654
 80021e4:	20004658 	.word	0x20004658

080021e8 <log_start>:

void log_start(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
    write_enabled = true;
 80021ec:	4b03      	ldr	r3, [pc, #12]	@ (80021fc <log_start+0x14>)
 80021ee:	2201      	movs	r2, #1
 80021f0:	701a      	strb	r2, [r3, #0]
    // Immediately call log_step() to process any queued log messages.
    log_step();
 80021f2:	f000 f8df 	bl	80023b4 <log_step>
}
 80021f6:	bf00      	nop
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	20004650 	.word	0x20004650

08002200 <log_stop>:

void log_stop(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
    write_enabled = false;
 8002204:	4b03      	ldr	r3, [pc, #12]	@ (8002214 <log_stop+0x14>)
 8002206:	2200      	movs	r2, #0
 8002208:	701a      	strb	r2, [r3, #0]
}
 800220a:	bf00      	nop
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr
 8002214:	20004650 	.word	0x20004650

08002218 <log_add>:

void log_add(const LogMessage *data)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b084      	sub	sp, #16
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
    // Attempt to push the log record into the ring buffer.
    // (If buffer is full and overwrite is enabled, data will be overwritten.)
    bool ok = ring_buffer_push(&logBuffer, data, true);
 8002220:	2201      	movs	r2, #1
 8002222:	6879      	ldr	r1, [r7, #4]
 8002224:	480a      	ldr	r0, [pc, #40]	@ (8002250 <log_add+0x38>)
 8002226:	f001 fafe 	bl	8003826 <ring_buffer_push>
 800222a:	4603      	mov	r3, r0
 800222c:	73fb      	strb	r3, [r7, #15]
    if (!ok && write_enabled) {
 800222e:	7bfb      	ldrb	r3, [r7, #15]
 8002230:	f083 0301 	eor.w	r3, r3, #1
 8002234:	b2db      	uxtb	r3, r3
 8002236:	2b00      	cmp	r3, #0
 8002238:	d006      	beq.n	8002248 <log_add+0x30>
 800223a:	4b06      	ldr	r3, [pc, #24]	@ (8002254 <log_add+0x3c>)
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d002      	beq.n	8002248 <log_add+0x30>
        // In a real system you might log an error message
        debug_print("Log buffer overflow!\r\n");
 8002242:	4805      	ldr	r0, [pc, #20]	@ (8002258 <log_add+0x40>)
 8002244:	f000 f9da 	bl	80025fc <debug_print>
    }
}
 8002248:	bf00      	nop
 800224a:	3710      	adds	r7, #16
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	20002420 	.word	0x20002420
 8002254:	20004650 	.word	0x20004650
 8002258:	08011264 	.word	0x08011264

0800225c <log_erase>:
/*
 * Erase the entire flash log area.
 * This iterates over all flash blocks and erases them.
 */
void log_erase(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b084      	sub	sp, #16
 8002260:	af00      	add	r7, sp, #0
    size_t total_blocks = FLASH_PAGE_COUNT / FLASH_PAGES_PER_BLOCK;
 8002262:	2340      	movs	r3, #64	@ 0x40
 8002264:	60bb      	str	r3, [r7, #8]
    for (size_t block = 0; block < total_blocks; ++block) {
 8002266:	2300      	movs	r3, #0
 8002268:	60fb      	str	r3, [r7, #12]
 800226a:	e008      	b.n	800227e <log_erase+0x22>
        // Calculate starting page for this block.
        size_t page_addr = block * FLASH_PAGES_PER_BLOCK;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	021b      	lsls	r3, r3, #8
 8002270:	607b      	str	r3, [r7, #4]
        Flash_Erase(page_addr);
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f7ff fbaa 	bl	80019cc <Flash_Erase>
    for (size_t block = 0; block < total_blocks; ++block) {
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	3301      	adds	r3, #1
 800227c:	60fb      	str	r3, [r7, #12]
 800227e:	68fa      	ldr	r2, [r7, #12]
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	429a      	cmp	r2, r3
 8002284:	d3f2      	bcc.n	800226c <log_erase+0x10>
    }
    // Reset write pointer.
    current_page = 0;
 8002286:	4b05      	ldr	r3, [pc, #20]	@ (800229c <log_erase+0x40>)
 8002288:	2200      	movs	r2, #0
 800228a:	601a      	str	r2, [r3, #0]
    written_pages = 0;
 800228c:	4b04      	ldr	r3, [pc, #16]	@ (80022a0 <log_erase+0x44>)
 800228e:	2200      	movs	r2, #0
 8002290:	601a      	str	r2, [r3, #0]
}
 8002292:	bf00      	nop
 8002294:	3710      	adds	r7, #16
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	20004654 	.word	0x20004654
 80022a0:	20004658 	.word	0x20004658

080022a4 <log_print_all>:
/*
 * Print all logged data from flash.
 * This function reads from flash pages [0, written_pages) and prints records.
 */
void log_print_all(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	f5ad 5d0d 	sub.w	sp, sp, #9024	@ 0x2340
 80022aa:	b088      	sub	sp, #32
 80022ac:	af00      	add	r7, sp, #0
    if (write_enabled) {
 80022ae:	4b3d      	ldr	r3, [pc, #244]	@ (80023a4 <log_print_all+0x100>)
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d003      	beq.n	80022be <log_print_all+0x1a>
        debug_print("Cannot read while logging is active!\r\n");
 80022b6:	483c      	ldr	r0, [pc, #240]	@ (80023a8 <log_print_all+0x104>)
 80022b8:	f000 f9a0 	bl	80025fc <debug_print>
 80022bc:	e06c      	b.n	8002398 <log_print_all+0xf4>
    uint8_t page[EXT_FLASH_PAGE_SIZE];
    // Create a temporary ring buffer to parse the flash content.
    RingBuffer readBuffer;
    // Allocate storage for read buffer equal to one flash page write buffer.
    uint8_t readBufferStorage[LOG_WRITE_BUF_SIZE];
    ring_buffer_init(&readBuffer, readBufferStorage, LOG_WRITE_BUF_SIZE, sizeof(uint8_t));
 80022be:	f107 0160 	add.w	r1, r7, #96	@ 0x60
 80022c2:	391c      	subs	r1, #28
 80022c4:	f507 5009 	add.w	r0, r7, #8768	@ 0x2240
 80022c8:	f100 0004 	add.w	r0, r0, #4
 80022cc:	2301      	movs	r3, #1
 80022ce:	f44f 5208 	mov.w	r2, #8704	@ 0x2200
 80022d2:	f001 fa89 	bl	80037e8 <ring_buffer_init>

    LogMessage msg;
    // Loop over all written pages.
    for (size_t page_i = 0; page_i < written_pages; ++page_i) {
 80022d6:	2300      	movs	r3, #0
 80022d8:	f507 520d 	add.w	r2, r7, #9024	@ 0x2340
 80022dc:	f102 021c 	add.w	r2, r2, #28
 80022e0:	6013      	str	r3, [r2, #0]
 80022e2:	e050      	b.n	8002386 <log_print_all+0xe2>
        // Read a page from flash.
        Flash_Read(page_i, page);
 80022e4:	f507 5309 	add.w	r3, r7, #8768	@ 0x2240
 80022e8:	f103 031c 	add.w	r3, r3, #28
 80022ec:	4619      	mov	r1, r3
 80022ee:	f507 530d 	add.w	r3, r7, #9024	@ 0x2340
 80022f2:	f103 031c 	add.w	r3, r3, #28
 80022f6:	6818      	ldr	r0, [r3, #0]
 80022f8:	f7ff fb32 	bl	8001960 <Flash_Read>
        // Push this page into the read buffer.
        if (!ring_buffer_push_array(&readBuffer, page, EXT_FLASH_PAGE_SIZE, false)) {
 80022fc:	f507 5109 	add.w	r1, r7, #8768	@ 0x2240
 8002300:	f101 011c 	add.w	r1, r1, #28
 8002304:	f507 5009 	add.w	r0, r7, #8768	@ 0x2240
 8002308:	f100 0004 	add.w	r0, r0, #4
 800230c:	2300      	movs	r3, #0
 800230e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002312:	f001 fb03 	bl	800391c <ring_buffer_push_array>
 8002316:	4603      	mov	r3, r0
 8002318:	f083 0301 	eor.w	r3, r3, #1
 800231c:	b2db      	uxtb	r3, r3
 800231e:	2b00      	cmp	r3, #0
 8002320:	d01a      	beq.n	8002358 <log_print_all+0xb4>
            debug_print("Read buffer error.\r\n");
 8002322:	4822      	ldr	r0, [pc, #136]	@ (80023ac <log_print_all+0x108>)
 8002324:	f000 f96a 	bl	80025fc <debug_print>
            break;
 8002328:	e036      	b.n	8002398 <log_print_all+0xf4>
        }

        // While there is at least one complete LogMessage in the read buffer,
        // pop it and print.
        while (ring_buffer_used(&readBuffer) >= sizeof(LogMessage)) {
            if (!ring_buffer_pop_array(&readBuffer, (uint8_t *)&msg, sizeof(LogMessage))) {
 800232a:	f107 0320 	add.w	r3, r7, #32
 800232e:	3b20      	subs	r3, #32
 8002330:	f507 5009 	add.w	r0, r7, #8768	@ 0x2240
 8002334:	f100 0004 	add.w	r0, r0, #4
 8002338:	2244      	movs	r2, #68	@ 0x44
 800233a:	4619      	mov	r1, r3
 800233c:	f001 fb8d 	bl	8003a5a <ring_buffer_pop_array>
 8002340:	4603      	mov	r3, r0
 8002342:	f083 0301 	eor.w	r3, r3, #1
 8002346:	b2db      	uxtb	r3, r3
 8002348:	2b00      	cmp	r3, #0
 800234a:	d110      	bne.n	800236e <log_print_all+0xca>
                break;
            }
            log_print_msg(&msg);
 800234c:	f107 0320 	add.w	r3, r7, #32
 8002350:	3b20      	subs	r3, #32
 8002352:	4618      	mov	r0, r3
 8002354:	f000 f898 	bl	8002488 <log_print_msg>
        while (ring_buffer_used(&readBuffer) >= sizeof(LogMessage)) {
 8002358:	f507 5309 	add.w	r3, r7, #8768	@ 0x2240
 800235c:	f103 0304 	add.w	r3, r3, #4
 8002360:	4618      	mov	r0, r3
 8002362:	f7ff ff0e 	bl	8002182 <ring_buffer_used>
 8002366:	4603      	mov	r3, r0
 8002368:	2b43      	cmp	r3, #67	@ 0x43
 800236a:	d8de      	bhi.n	800232a <log_print_all+0x86>
 800236c:	e000      	b.n	8002370 <log_print_all+0xcc>
                break;
 800236e:	bf00      	nop
    for (size_t page_i = 0; page_i < written_pages; ++page_i) {
 8002370:	f507 530d 	add.w	r3, r7, #9024	@ 0x2340
 8002374:	f103 031c 	add.w	r3, r3, #28
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	3301      	adds	r3, #1
 800237c:	f507 520d 	add.w	r2, r7, #9024	@ 0x2340
 8002380:	f102 021c 	add.w	r2, r2, #28
 8002384:	6013      	str	r3, [r2, #0]
 8002386:	4b0a      	ldr	r3, [pc, #40]	@ (80023b0 <log_print_all+0x10c>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f507 520d 	add.w	r2, r7, #9024	@ 0x2340
 800238e:	f102 021c 	add.w	r2, r2, #28
 8002392:	6812      	ldr	r2, [r2, #0]
 8002394:	429a      	cmp	r2, r3
 8002396:	d3a5      	bcc.n	80022e4 <log_print_all+0x40>
        }
    }
}
 8002398:	f507 570d 	add.w	r7, r7, #9024	@ 0x2340
 800239c:	3720      	adds	r7, #32
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	20004650 	.word	0x20004650
 80023a8:	0801127c 	.word	0x0801127c
 80023ac:	080112a4 	.word	0x080112a4
 80023b0:	20004658 	.word	0x20004658

080023b4 <log_step>:
 * This function transfers log messages from the log ring buffer (RAM) into the
 * write ring buffer (a byte stream). When at least one full flash page of data is
 * available in the write buffer, it writes it to flash.
 */
void log_step(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b0d2      	sub	sp, #328	@ 0x148
 80023b8:	af00      	add	r7, sp, #0
    if (!write_enabled || written_pages >= FLASH_PAGE_COUNT) {
 80023ba:	4b2e      	ldr	r3, [pc, #184]	@ (8002474 <log_step+0xc0>)
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	f083 0301 	eor.w	r3, r3, #1
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d14d      	bne.n	8002464 <log_step+0xb0>
 80023c8:	4b2b      	ldr	r3, [pc, #172]	@ (8002478 <log_step+0xc4>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80023d0:	d248      	bcs.n	8002464 <log_step+0xb0>
    }

    LogMessage temp;
    // Transfer as many LogMessage records as possible from logBuffer to writeBuffer.
    // (We treat the record as a raw block of bytes.)
    while (ring_buffer_available(&writeBuffer) >= sizeof(LogMessage)) {
 80023d2:	e012      	b.n	80023fa <log_step+0x46>
        if (!ring_buffer_pop(&logBuffer, &temp)) {
 80023d4:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 80023d8:	4619      	mov	r1, r3
 80023da:	4828      	ldr	r0, [pc, #160]	@ (800247c <log_step+0xc8>)
 80023dc:	f001 fa6f 	bl	80038be <ring_buffer_pop>
 80023e0:	4603      	mov	r3, r0
 80023e2:	f083 0301 	eor.w	r3, r3, #1
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d10d      	bne.n	8002408 <log_step+0x54>
            break;
        }
        // Push raw bytes of the log message into the write buffer.
        ring_buffer_push_array(&writeBuffer, (uint8_t *)&temp, sizeof(temp), false);
 80023ec:	f507 7182 	add.w	r1, r7, #260	@ 0x104
 80023f0:	2300      	movs	r3, #0
 80023f2:	2244      	movs	r2, #68	@ 0x44
 80023f4:	4822      	ldr	r0, [pc, #136]	@ (8002480 <log_step+0xcc>)
 80023f6:	f001 fa91 	bl	800391c <ring_buffer_push_array>
    while (ring_buffer_available(&writeBuffer) >= sizeof(LogMessage)) {
 80023fa:	4821      	ldr	r0, [pc, #132]	@ (8002480 <log_step+0xcc>)
 80023fc:	f7ff feb2 	bl	8002164 <ring_buffer_available>
 8002400:	4603      	mov	r3, r0
 8002402:	2b43      	cmp	r3, #67	@ 0x43
 8002404:	d8e6      	bhi.n	80023d4 <log_step+0x20>
 8002406:	e01f      	b.n	8002448 <log_step+0x94>
            break;
 8002408:	bf00      	nop
    }

    uint8_t page[EXT_FLASH_PAGE_SIZE];
    // Write out full flash pages from the write buffer.
    while (written_pages < FLASH_PAGE_COUNT && !Flash_Busy()) {
 800240a:	e01d      	b.n	8002448 <log_step+0x94>
        // (Optionally, if your flash requires erasing each block before writing,
        // you could check for block boundaries here and erase accordingly.
        // In this implementation, it is assumed that a full erase was done before logging.)

        // Check if a full page is available in the write buffer.
        if (ring_buffer_used(&writeBuffer) < EXT_FLASH_PAGE_SIZE) {
 800240c:	481c      	ldr	r0, [pc, #112]	@ (8002480 <log_step+0xcc>)
 800240e:	f7ff feb8 	bl	8002182 <ring_buffer_used>
 8002412:	4603      	mov	r3, r0
 8002414:	2bff      	cmp	r3, #255	@ 0xff
 8002416:	d927      	bls.n	8002468 <log_step+0xb4>
            break;  // Not enough data yet.
        }

        // Pop one flash page worth of data.
        ring_buffer_pop_array(&writeBuffer, page, EXT_FLASH_PAGE_SIZE);
 8002418:	1d3b      	adds	r3, r7, #4
 800241a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800241e:	4619      	mov	r1, r3
 8002420:	4817      	ldr	r0, [pc, #92]	@ (8002480 <log_step+0xcc>)
 8002422:	f001 fb1a 	bl	8003a5a <ring_buffer_pop_array>

        // Write this page to flash.
        Flash_Write(current_page, page);
 8002426:	4b17      	ldr	r3, [pc, #92]	@ (8002484 <log_step+0xd0>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	1d3a      	adds	r2, r7, #4
 800242c:	4611      	mov	r1, r2
 800242e:	4618      	mov	r0, r3
 8002430:	f7ff fa54 	bl	80018dc <Flash_Write>

        current_page++;
 8002434:	4b13      	ldr	r3, [pc, #76]	@ (8002484 <log_step+0xd0>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	3301      	adds	r3, #1
 800243a:	4a12      	ldr	r2, [pc, #72]	@ (8002484 <log_step+0xd0>)
 800243c:	6013      	str	r3, [r2, #0]
        written_pages++;
 800243e:	4b0e      	ldr	r3, [pc, #56]	@ (8002478 <log_step+0xc4>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	3301      	adds	r3, #1
 8002444:	4a0c      	ldr	r2, [pc, #48]	@ (8002478 <log_step+0xc4>)
 8002446:	6013      	str	r3, [r2, #0]
    while (written_pages < FLASH_PAGE_COUNT && !Flash_Busy()) {
 8002448:	4b0b      	ldr	r3, [pc, #44]	@ (8002478 <log_step+0xc4>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002450:	d20b      	bcs.n	800246a <log_step+0xb6>
 8002452:	f7ff fa35 	bl	80018c0 <Flash_Busy>
 8002456:	4603      	mov	r3, r0
 8002458:	f083 0301 	eor.w	r3, r3, #1
 800245c:	b2db      	uxtb	r3, r3
 800245e:	2b00      	cmp	r3, #0
 8002460:	d1d4      	bne.n	800240c <log_step+0x58>
 8002462:	e002      	b.n	800246a <log_step+0xb6>
        return;
 8002464:	bf00      	nop
 8002466:	e000      	b.n	800246a <log_step+0xb6>
            break;  // Not enough data yet.
 8002468:	bf00      	nop
    }
}
 800246a:	f507 77a4 	add.w	r7, r7, #328	@ 0x148
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	20004650 	.word	0x20004650
 8002478:	20004658 	.word	0x20004658
 800247c:	20002420 	.word	0x20002420
 8002480:	20004638 	.word	0x20004638
 8002484:	20004654 	.word	0x20004654

08002488 <log_print_msg>:
/*
 * log_print_msg:
 * Prints a log message in CSV format.
 */
static void log_print_msg(const LogMessage *msg)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
    // Print time in milliseconds.
    debug_print("%lu,", (unsigned long) msg->time_ms);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4619      	mov	r1, r3
 8002496:	4855      	ldr	r0, [pc, #340]	@ (80025ec <log_print_msg+0x164>)
 8002498:	f000 f8b0 	bl	80025fc <debug_print>
    // Print flight phase (assuming FlightPhase is an enum; cast to int).
    debug_print("%d,", (int) msg->phase);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	791b      	ldrb	r3, [r3, #4]
 80024a0:	4619      	mov	r1, r3
 80024a2:	4853      	ldr	r0, [pc, #332]	@ (80025f0 <log_print_msg+0x168>)
 80024a4:	f000 f8aa 	bl	80025fc <debug_print>
    // Print the state vector components.
    debug_print("%.2f,", msg->kf_pos);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	4618      	mov	r0, r3
 80024ae:	f7fe f86b 	bl	8000588 <__aeabi_f2d>
 80024b2:	4602      	mov	r2, r0
 80024b4:	460b      	mov	r3, r1
 80024b6:	ec43 2b10 	vmov	d0, r2, r3
 80024ba:	484e      	ldr	r0, [pc, #312]	@ (80025f4 <log_print_msg+0x16c>)
 80024bc:	f000 f89e 	bl	80025fc <debug_print>
    debug_print("%.2f,", msg->kf_vel);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7fe f85f 	bl	8000588 <__aeabi_f2d>
 80024ca:	4602      	mov	r2, r0
 80024cc:	460b      	mov	r3, r1
 80024ce:	ec43 2b10 	vmov	d0, r2, r3
 80024d2:	4848      	ldr	r0, [pc, #288]	@ (80025f4 <log_print_msg+0x16c>)
 80024d4:	f000 f892 	bl	80025fc <debug_print>
    debug_print("%.2f,", msg->kf_accel);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	691b      	ldr	r3, [r3, #16]
 80024dc:	4618      	mov	r0, r3
 80024de:	f7fe f853 	bl	8000588 <__aeabi_f2d>
 80024e2:	4602      	mov	r2, r0
 80024e4:	460b      	mov	r3, r1
 80024e6:	ec43 2b10 	vmov	d0, r2, r3
 80024ea:	4842      	ldr	r0, [pc, #264]	@ (80025f4 <log_print_msg+0x16c>)
 80024ec:	f000 f886 	bl	80025fc <debug_print>
    // Print altitude.
    debug_print("%.2f,", msg->altitude);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	695b      	ldr	r3, [r3, #20]
 80024f4:	4618      	mov	r0, r3
 80024f6:	f7fe f847 	bl	8000588 <__aeabi_f2d>
 80024fa:	4602      	mov	r2, r0
 80024fc:	460b      	mov	r3, r1
 80024fe:	ec43 2b10 	vmov	d0, r2, r3
 8002502:	483c      	ldr	r0, [pc, #240]	@ (80025f4 <log_print_msg+0x16c>)
 8002504:	f000 f87a 	bl	80025fc <debug_print>
    // Print acceleration values.
    debug_print("%.2f,", msg->accel_x);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	699b      	ldr	r3, [r3, #24]
 800250c:	4618      	mov	r0, r3
 800250e:	f7fe f83b 	bl	8000588 <__aeabi_f2d>
 8002512:	4602      	mov	r2, r0
 8002514:	460b      	mov	r3, r1
 8002516:	ec43 2b10 	vmov	d0, r2, r3
 800251a:	4836      	ldr	r0, [pc, #216]	@ (80025f4 <log_print_msg+0x16c>)
 800251c:	f000 f86e 	bl	80025fc <debug_print>
    debug_print("%.2f,", msg->accel_y);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	69db      	ldr	r3, [r3, #28]
 8002524:	4618      	mov	r0, r3
 8002526:	f7fe f82f 	bl	8000588 <__aeabi_f2d>
 800252a:	4602      	mov	r2, r0
 800252c:	460b      	mov	r3, r1
 800252e:	ec43 2b10 	vmov	d0, r2, r3
 8002532:	4830      	ldr	r0, [pc, #192]	@ (80025f4 <log_print_msg+0x16c>)
 8002534:	f000 f862 	bl	80025fc <debug_print>
    debug_print("%.2f,", msg->accel_z);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6a1b      	ldr	r3, [r3, #32]
 800253c:	4618      	mov	r0, r3
 800253e:	f7fe f823 	bl	8000588 <__aeabi_f2d>
 8002542:	4602      	mov	r2, r0
 8002544:	460b      	mov	r3, r1
 8002546:	ec43 2b10 	vmov	d0, r2, r3
 800254a:	482a      	ldr	r0, [pc, #168]	@ (80025f4 <log_print_msg+0x16c>)
 800254c:	f000 f856 	bl	80025fc <debug_print>
    // Print gyro values.
    debug_print("%.2f,", msg->gyro_x);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002554:	4618      	mov	r0, r3
 8002556:	f7fe f817 	bl	8000588 <__aeabi_f2d>
 800255a:	4602      	mov	r2, r0
 800255c:	460b      	mov	r3, r1
 800255e:	ec43 2b10 	vmov	d0, r2, r3
 8002562:	4824      	ldr	r0, [pc, #144]	@ (80025f4 <log_print_msg+0x16c>)
 8002564:	f000 f84a 	bl	80025fc <debug_print>
    debug_print("%.2f,", msg->gyro_y);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800256c:	4618      	mov	r0, r3
 800256e:	f7fe f80b 	bl	8000588 <__aeabi_f2d>
 8002572:	4602      	mov	r2, r0
 8002574:	460b      	mov	r3, r1
 8002576:	ec43 2b10 	vmov	d0, r2, r3
 800257a:	481e      	ldr	r0, [pc, #120]	@ (80025f4 <log_print_msg+0x16c>)
 800257c:	f000 f83e 	bl	80025fc <debug_print>
    debug_print("%.2f,", msg->gyro_z);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002584:	4618      	mov	r0, r3
 8002586:	f7fd ffff 	bl	8000588 <__aeabi_f2d>
 800258a:	4602      	mov	r2, r0
 800258c:	460b      	mov	r3, r1
 800258e:	ec43 2b10 	vmov	d0, r2, r3
 8002592:	4818      	ldr	r0, [pc, #96]	@ (80025f4 <log_print_msg+0x16c>)
 8002594:	f000 f832 	bl	80025fc <debug_print>
    // Print pressure.
    debug_print("%.2f,", msg->pressure);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800259c:	4618      	mov	r0, r3
 800259e:	f7fd fff3 	bl	8000588 <__aeabi_f2d>
 80025a2:	4602      	mov	r2, r0
 80025a4:	460b      	mov	r3, r1
 80025a6:	ec43 2b10 	vmov	d0, r2, r3
 80025aa:	4812      	ldr	r0, [pc, #72]	@ (80025f4 <log_print_msg+0x16c>)
 80025ac:	f000 f826 	bl	80025fc <debug_print>
    // Print temperature.
    debug_print("%d,", msg->temp);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	@ 0x34
 80025b6:	4619      	mov	r1, r3
 80025b8:	480d      	ldr	r0, [pc, #52]	@ (80025f0 <log_print_msg+0x168>)
 80025ba:	f000 f81f 	bl	80025fc <debug_print>
    // Print apogee.
    debug_print("%lu,", (unsigned long) msg->apogee);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025c2:	4619      	mov	r1, r3
 80025c4:	4809      	ldr	r0, [pc, #36]	@ (80025ec <log_print_msg+0x164>)
 80025c6:	f000 f819 	bl	80025fc <debug_print>
    // Print launched flag as an integer (0 or 1).
    debug_print("%d,", (int) msg->launched);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80025d0:	4619      	mov	r1, r3
 80025d2:	4807      	ldr	r0, [pc, #28]	@ (80025f0 <log_print_msg+0x168>)
 80025d4:	f000 f812 	bl	80025fc <debug_print>
    // Print landed_time.
    debug_print("%lu\r\n", (unsigned long) msg->landed_time);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025dc:	4619      	mov	r1, r3
 80025de:	4806      	ldr	r0, [pc, #24]	@ (80025f8 <log_print_msg+0x170>)
 80025e0:	f000 f80c 	bl	80025fc <debug_print>
}
 80025e4:	bf00      	nop
 80025e6:	3708      	adds	r7, #8
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	080112bc 	.word	0x080112bc
 80025f0:	080112c4 	.word	0x080112c4
 80025f4:	080112c8 	.word	0x080112c8
 80025f8:	080112d0 	.word	0x080112d0

080025fc <debug_print>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
extern void debug_print(const char *format, ...) {
 80025fc:	b40f      	push	{r0, r1, r2, r3}
 80025fe:	b580      	push	{r7, lr}
 8002600:	b0c2      	sub	sp, #264	@ 0x108
 8002602:	af00      	add	r7, sp, #0
	char buf[PRINT_BUFFER_SIZE];
	va_list args;
	va_start(args, format);
 8002604:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 8002608:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800260c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002610:	601a      	str	r2, [r3, #0]
	int n = vsnprintf(buf, sizeof(buf), format, args);
 8002612:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002616:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800261a:	1d38      	adds	r0, r7, #4
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8002622:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002626:	f00d f9e5 	bl	800f9f4 <vsniprintf>
 800262a:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
	CDC_Transmit_FS(buf, n);
 800262e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002632:	b29a      	uxth	r2, r3
 8002634:	1d3b      	adds	r3, r7, #4
 8002636:	4611      	mov	r1, r2
 8002638:	4618      	mov	r0, r3
 800263a:	f00c fd63 	bl	800f104 <CDC_Transmit_FS>
	va_end(args);
}
 800263e:	bf00      	nop
 8002640:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8002644:	46bd      	mov	sp, r7
 8002646:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800264a:	b004      	add	sp, #16
 800264c:	4770      	bx	lr
	...

08002650 <channel_fire>:

void channel_fire(uint8_t index) {
 8002650:	b590      	push	{r4, r7, lr}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	4603      	mov	r3, r0
 8002658:	71fb      	strb	r3, [r7, #7]
	if (index >= CHANNEL_COUNT) return;
 800265a:	79fb      	ldrb	r3, [r7, #7]
 800265c:	2b01      	cmp	r3, #1
 800265e:	d81f      	bhi.n	80026a0 <channel_fire+0x50>
	pyros[index].firing = true;
 8002660:	79fb      	ldrb	r3, [r7, #7]
 8002662:	4a11      	ldr	r2, [pc, #68]	@ (80026a8 <channel_fire+0x58>)
 8002664:	011b      	lsls	r3, r3, #4
 8002666:	4413      	add	r3, r2
 8002668:	330c      	adds	r3, #12
 800266a:	2201      	movs	r2, #1
 800266c:	701a      	strb	r2, [r3, #0]
	pyros[index].fire_time = HAL_GetTick();
 800266e:	79fc      	ldrb	r4, [r7, #7]
 8002670:	f001 fab2 	bl	8003bd8 <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	490c      	ldr	r1, [pc, #48]	@ (80026a8 <channel_fire+0x58>)
 8002678:	0123      	lsls	r3, r4, #4
 800267a:	440b      	add	r3, r1
 800267c:	3308      	adds	r3, #8
 800267e:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(pyros[index].port, pyros[index].pin, GPIO_PIN_SET);
 8002680:	79fb      	ldrb	r3, [r7, #7]
 8002682:	4a09      	ldr	r2, [pc, #36]	@ (80026a8 <channel_fire+0x58>)
 8002684:	011b      	lsls	r3, r3, #4
 8002686:	4413      	add	r3, r2
 8002688:	6818      	ldr	r0, [r3, #0]
 800268a:	79fb      	ldrb	r3, [r7, #7]
 800268c:	4a06      	ldr	r2, [pc, #24]	@ (80026a8 <channel_fire+0x58>)
 800268e:	011b      	lsls	r3, r3, #4
 8002690:	4413      	add	r3, r2
 8002692:	3304      	adds	r3, #4
 8002694:	881b      	ldrh	r3, [r3, #0]
 8002696:	2201      	movs	r2, #1
 8002698:	4619      	mov	r1, r3
 800269a:	f001 fee9 	bl	8004470 <HAL_GPIO_WritePin>
 800269e:	e000      	b.n	80026a2 <channel_fire+0x52>
	if (index >= CHANNEL_COUNT) return;
 80026a0:	bf00      	nop
}
 80026a2:	370c      	adds	r7, #12
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd90      	pop	{r4, r7, pc}
 80026a8:	20000000 	.word	0x20000000

080026ac <channel_update>:

void channel_update(void) {
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
	uint32_t now = HAL_GetTick();
 80026b2:	f001 fa91 	bl	8003bd8 <HAL_GetTick>
 80026b6:	6038      	str	r0, [r7, #0]
	for (uint8_t i = 0; i < CHANNEL_COUNT; i++) {
 80026b8:	2300      	movs	r3, #0
 80026ba:	71fb      	strb	r3, [r7, #7]
 80026bc:	e02b      	b.n	8002716 <channel_update+0x6a>
		if (pyros[i].firing && (now - pyros[i].fire_time >= CHANNEL_FIRE_TIME)) {
 80026be:	79fb      	ldrb	r3, [r7, #7]
 80026c0:	4a19      	ldr	r2, [pc, #100]	@ (8002728 <channel_update+0x7c>)
 80026c2:	011b      	lsls	r3, r3, #4
 80026c4:	4413      	add	r3, r2
 80026c6:	330c      	adds	r3, #12
 80026c8:	781b      	ldrb	r3, [r3, #0]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d020      	beq.n	8002710 <channel_update+0x64>
 80026ce:	79fb      	ldrb	r3, [r7, #7]
 80026d0:	4a15      	ldr	r2, [pc, #84]	@ (8002728 <channel_update+0x7c>)
 80026d2:	011b      	lsls	r3, r3, #4
 80026d4:	4413      	add	r3, r2
 80026d6:	3308      	adds	r3, #8
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	683a      	ldr	r2, [r7, #0]
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80026e2:	d315      	bcc.n	8002710 <channel_update+0x64>
			pyros[i].firing = false;
 80026e4:	79fb      	ldrb	r3, [r7, #7]
 80026e6:	4a10      	ldr	r2, [pc, #64]	@ (8002728 <channel_update+0x7c>)
 80026e8:	011b      	lsls	r3, r3, #4
 80026ea:	4413      	add	r3, r2
 80026ec:	330c      	adds	r3, #12
 80026ee:	2200      	movs	r2, #0
 80026f0:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(pyros[i].port, pyros[i].pin, GPIO_PIN_RESET);
 80026f2:	79fb      	ldrb	r3, [r7, #7]
 80026f4:	4a0c      	ldr	r2, [pc, #48]	@ (8002728 <channel_update+0x7c>)
 80026f6:	011b      	lsls	r3, r3, #4
 80026f8:	4413      	add	r3, r2
 80026fa:	6818      	ldr	r0, [r3, #0]
 80026fc:	79fb      	ldrb	r3, [r7, #7]
 80026fe:	4a0a      	ldr	r2, [pc, #40]	@ (8002728 <channel_update+0x7c>)
 8002700:	011b      	lsls	r3, r3, #4
 8002702:	4413      	add	r3, r2
 8002704:	3304      	adds	r3, #4
 8002706:	881b      	ldrh	r3, [r3, #0]
 8002708:	2200      	movs	r2, #0
 800270a:	4619      	mov	r1, r3
 800270c:	f001 feb0 	bl	8004470 <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i < CHANNEL_COUNT; i++) {
 8002710:	79fb      	ldrb	r3, [r7, #7]
 8002712:	3301      	adds	r3, #1
 8002714:	71fb      	strb	r3, [r7, #7]
 8002716:	79fb      	ldrb	r3, [r7, #7]
 8002718:	2b01      	cmp	r3, #1
 800271a:	d9d0      	bls.n	80026be <channel_update+0x12>

		}
	}
}
 800271c:	bf00      	nop
 800271e:	bf00      	nop
 8002720:	3708      	adds	r7, #8
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	20000000 	.word	0x20000000

0800272c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b082      	sub	sp, #8
 8002730:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002732:	f001 fa26 	bl	8003b82 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002736:	f000 f8b7 	bl	80028a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800273a:	f000 f97b 	bl	8002a34 <MX_GPIO_Init>
  MX_SPI1_Init();
 800273e:	f000 f93b 	bl	80029b8 <MX_SPI1_Init>
  MX_FDCAN2_Init();
 8002742:	f000 f8f3 	bl	800292c <MX_FDCAN2_Init>
  MX_USB_Device_Init();
 8002746:	f00c fc1f 	bl	800ef88 <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(ACCEL_nCS_GPIO_Port, ACCEL_nCS_Pin, GPIO_PIN_SET);
 800274a:	2201      	movs	r2, #1
 800274c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002750:	483f      	ldr	r0, [pc, #252]	@ (8002850 <main+0x124>)
 8002752:	f001 fe8d 	bl	8004470 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GYRO_nCS_GPIO_Port, GYRO_nCS_Pin, GPIO_PIN_SET);
 8002756:	2201      	movs	r2, #1
 8002758:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800275c:	483c      	ldr	r0, [pc, #240]	@ (8002850 <main+0x124>)
 800275e:	f001 fe87 	bl	8004470 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(FLASH_nCS_GPIO_Port, FLASH_nCS_Pin, GPIO_PIN_SET);
 8002762:	2201      	movs	r2, #1
 8002764:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002768:	4839      	ldr	r0, [pc, #228]	@ (8002850 <main+0x124>)
 800276a:	f001 fe81 	bl	8004470 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BARO_nCS_GPIO_Port, BARO_nCS_Pin, GPIO_PIN_SET);
 800276e:	2201      	movs	r2, #1
 8002770:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002774:	4836      	ldr	r0, [pc, #216]	@ (8002850 <main+0x124>)
 8002776:	f001 fe7b 	bl	8004470 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Backlight_GPIO_Port, Backlight_Pin, GPIO_PIN_SET);
 800277a:	2201      	movs	r2, #1
 800277c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002780:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002784:	f001 fe74 	bl	8004470 <HAL_GPIO_WritePin>
  HAL_Delay(50);
 8002788:	2032      	movs	r0, #50	@ 0x32
 800278a:	f001 fa31 	bl	8003bf0 <HAL_Delay>

  bmi088_init(&imu, &hspi1, ACCEL_nCS_GPIO_Port, GYRO_nCS_GPIO_Port, ACCEL_nCS_Pin, GYRO_nCS_Pin);
 800278e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002792:	9301      	str	r3, [sp, #4]
 8002794:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002798:	9300      	str	r3, [sp, #0]
 800279a:	4b2d      	ldr	r3, [pc, #180]	@ (8002850 <main+0x124>)
 800279c:	4a2c      	ldr	r2, [pc, #176]	@ (8002850 <main+0x124>)
 800279e:	492d      	ldr	r1, [pc, #180]	@ (8002854 <main+0x128>)
 80027a0:	482d      	ldr	r0, [pc, #180]	@ (8002858 <main+0x12c>)
 80027a2:	f7fe f819 	bl	80007d8 <bmi088_init>
  bmp_init(&baro, &hspi1, BARO_nCS_GPIO_Port, BARO_nCS_Pin);
 80027a6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80027aa:	4a29      	ldr	r2, [pc, #164]	@ (8002850 <main+0x124>)
 80027ac:	4929      	ldr	r1, [pc, #164]	@ (8002854 <main+0x128>)
 80027ae:	482b      	ldr	r0, [pc, #172]	@ (800285c <main+0x130>)
 80027b0:	f7fe fd90 	bl	80012d4 <bmp_init>
  KalmanFilter_init(&kf, KALMAN_PERIOD, ALTITUDE_SIGMA, ACCELERATION_SIGMA, MODEL_SIGMA);
 80027b4:	eef7 1a00 	vmov.f32	s3, #112	@ 0x3f800000  1.0
 80027b8:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 80027bc:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 80027c0:	ed9f 0a27 	vldr	s0, [pc, #156]	@ 8002860 <main+0x134>
 80027c4:	4827      	ldr	r0, [pc, #156]	@ (8002864 <main+0x138>)
 80027c6:	f7ff fbaf 	bl	8001f28 <KalmanFilter_init>
  Flash_Setup(&hspi1, FLASH_nCS_GPIO_Port, FLASH_nCS_Pin);
 80027ca:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80027ce:	4920      	ldr	r1, [pc, #128]	@ (8002850 <main+0x124>)
 80027d0:	4820      	ldr	r0, [pc, #128]	@ (8002854 <main+0x128>)
 80027d2:	f7ff f825 	bl	8001820 <Flash_Setup>

  HAL_Delay(2000);
 80027d6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80027da:	f001 fa09 	bl	8003bf0 <HAL_Delay>
  debug_print("Starting print\r\n");
 80027de:	4822      	ldr	r0, [pc, #136]	@ (8002868 <main+0x13c>)
 80027e0:	f7ff ff0c 	bl	80025fc <debug_print>
  log_print_all();
 80027e4:	f7ff fd5e 	bl	80022a4 <log_print_all>
  debug_print("End print\r\n");
 80027e8:	4820      	ldr	r0, [pc, #128]	@ (800286c <main+0x140>)
 80027ea:	f7ff ff07 	bl	80025fc <debug_print>
  log_setup();
 80027ee:	f7ff fcd5 	bl	800219c <log_setup>
  log_start();
 80027f2:	f7ff fcf9 	bl	80021e8 <log_start>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80027f6:	f009 f935 	bl	800ba64 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of sensorData */
  sensorDataHandle = osMutexNew(&sensorData_attributes);
 80027fa:	481d      	ldr	r0, [pc, #116]	@ (8002870 <main+0x144>)
 80027fc:	f009 fa56 	bl	800bcac <osMutexNew>
 8002800:	4603      	mov	r3, r0
 8002802:	4a1c      	ldr	r2, [pc, #112]	@ (8002874 <main+0x148>)
 8002804:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of printTask */
  printTaskHandle = osThreadNew(StartPrintTask, NULL, &printTask_attributes);
 8002806:	4a1c      	ldr	r2, [pc, #112]	@ (8002878 <main+0x14c>)
 8002808:	2100      	movs	r1, #0
 800280a:	481c      	ldr	r0, [pc, #112]	@ (800287c <main+0x150>)
 800280c:	f009 f974 	bl	800baf8 <osThreadNew>
 8002810:	4603      	mov	r3, r0
 8002812:	4a1b      	ldr	r2, [pc, #108]	@ (8002880 <main+0x154>)
 8002814:	6013      	str	r3, [r2, #0]

  /* creation of readSensors */
  readSensorsHandle = osThreadNew(StartReadSensors, NULL, &readSensors_attributes);
 8002816:	4a1b      	ldr	r2, [pc, #108]	@ (8002884 <main+0x158>)
 8002818:	2100      	movs	r1, #0
 800281a:	481b      	ldr	r0, [pc, #108]	@ (8002888 <main+0x15c>)
 800281c:	f009 f96c 	bl	800baf8 <osThreadNew>
 8002820:	4603      	mov	r3, r0
 8002822:	4a1a      	ldr	r2, [pc, #104]	@ (800288c <main+0x160>)
 8002824:	6013      	str	r3, [r2, #0]

  /* creation of deploymentTask */
  deploymentTaskHandle = osThreadNew(StartDeployment, NULL, &deploymentTask_attributes);
 8002826:	4a1a      	ldr	r2, [pc, #104]	@ (8002890 <main+0x164>)
 8002828:	2100      	movs	r1, #0
 800282a:	481a      	ldr	r0, [pc, #104]	@ (8002894 <main+0x168>)
 800282c:	f009 f964 	bl	800baf8 <osThreadNew>
 8002830:	4603      	mov	r3, r0
 8002832:	4a19      	ldr	r2, [pc, #100]	@ (8002898 <main+0x16c>)
 8002834:	6013      	str	r3, [r2, #0]

  /* creation of logTask */
  logTaskHandle = osThreadNew(StartLog, NULL, &logTask_attributes);
 8002836:	4a19      	ldr	r2, [pc, #100]	@ (800289c <main+0x170>)
 8002838:	2100      	movs	r1, #0
 800283a:	4819      	ldr	r0, [pc, #100]	@ (80028a0 <main+0x174>)
 800283c:	f009 f95c 	bl	800baf8 <osThreadNew>
 8002840:	4603      	mov	r3, r0
 8002842:	4a18      	ldr	r2, [pc, #96]	@ (80028a4 <main+0x178>)
 8002844:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8002846:	f009 f931 	bl	800baac <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800284a:	bf00      	nop
 800284c:	e7fd      	b.n	800284a <main+0x11e>
 800284e:	bf00      	nop
 8002850:	48000400 	.word	0x48000400
 8002854:	200046c0 	.word	0x200046c0
 8002858:	20004738 	.word	0x20004738
 800285c:	20004780 	.word	0x20004780
 8002860:	3dcccccd 	.word	0x3dcccccd
 8002864:	200047f4 	.word	0x200047f4
 8002868:	08011314 	.word	0x08011314
 800286c:	08011328 	.word	0x08011328
 8002870:	08011550 	.word	0x08011550
 8002874:	20004734 	.word	0x20004734
 8002878:	080114c0 	.word	0x080114c0
 800287c:	08002b15 	.word	0x08002b15
 8002880:	20004724 	.word	0x20004724
 8002884:	080114e4 	.word	0x080114e4
 8002888:	08002c9d 	.word	0x08002c9d
 800288c:	20004728 	.word	0x20004728
 8002890:	08011508 	.word	0x08011508
 8002894:	08002d69 	.word	0x08002d69
 8002898:	2000472c 	.word	0x2000472c
 800289c:	0801152c 	.word	0x0801152c
 80028a0:	08003159 	.word	0x08003159
 80028a4:	20004730 	.word	0x20004730

080028a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b094      	sub	sp, #80	@ 0x50
 80028ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80028ae:	f107 0318 	add.w	r3, r7, #24
 80028b2:	2238      	movs	r2, #56	@ 0x38
 80028b4:	2100      	movs	r1, #0
 80028b6:	4618      	mov	r0, r3
 80028b8:	f00d f8aa 	bl	800fa10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80028bc:	1d3b      	adds	r3, r7, #4
 80028be:	2200      	movs	r2, #0
 80028c0:	601a      	str	r2, [r3, #0]
 80028c2:	605a      	str	r2, [r3, #4]
 80028c4:	609a      	str	r2, [r3, #8]
 80028c6:	60da      	str	r2, [r3, #12]
 80028c8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80028ca:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80028ce:	f003 fb03 	bl	8005ed8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 80028d2:	2322      	movs	r3, #34	@ 0x22
 80028d4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80028d6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80028da:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80028dc:	2340      	movs	r3, #64	@ 0x40
 80028de:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80028e0:	2301      	movs	r3, #1
 80028e2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80028e4:	2300      	movs	r3, #0
 80028e6:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80028e8:	f107 0318 	add.w	r3, r7, #24
 80028ec:	4618      	mov	r0, r3
 80028ee:	f003 fba7 	bl	8006040 <HAL_RCC_OscConfig>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d001      	beq.n	80028fc <SystemClock_Config+0x54>
  {
    Error_Handler();
 80028f8:	f000 fc4c 	bl	8003194 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80028fc:	230f      	movs	r3, #15
 80028fe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002900:	2301      	movs	r3, #1
 8002902:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002904:	2300      	movs	r3, #0
 8002906:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002908:	2300      	movs	r3, #0
 800290a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800290c:	2300      	movs	r3, #0
 800290e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002910:	1d3b      	adds	r3, r7, #4
 8002912:	2100      	movs	r1, #0
 8002914:	4618      	mov	r0, r3
 8002916:	f003 fea5 	bl	8006664 <HAL_RCC_ClockConfig>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d001      	beq.n	8002924 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8002920:	f000 fc38 	bl	8003194 <Error_Handler>
  }
}
 8002924:	bf00      	nop
 8002926:	3750      	adds	r7, #80	@ 0x50
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}

0800292c <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8002930:	4b1f      	ldr	r3, [pc, #124]	@ (80029b0 <MX_FDCAN2_Init+0x84>)
 8002932:	4a20      	ldr	r2, [pc, #128]	@ (80029b4 <MX_FDCAN2_Init+0x88>)
 8002934:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8002936:	4b1e      	ldr	r3, [pc, #120]	@ (80029b0 <MX_FDCAN2_Init+0x84>)
 8002938:	2200      	movs	r2, #0
 800293a:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800293c:	4b1c      	ldr	r3, [pc, #112]	@ (80029b0 <MX_FDCAN2_Init+0x84>)
 800293e:	2200      	movs	r2, #0
 8002940:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8002942:	4b1b      	ldr	r3, [pc, #108]	@ (80029b0 <MX_FDCAN2_Init+0x84>)
 8002944:	2200      	movs	r2, #0
 8002946:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8002948:	4b19      	ldr	r3, [pc, #100]	@ (80029b0 <MX_FDCAN2_Init+0x84>)
 800294a:	2200      	movs	r2, #0
 800294c:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 800294e:	4b18      	ldr	r3, [pc, #96]	@ (80029b0 <MX_FDCAN2_Init+0x84>)
 8002950:	2200      	movs	r2, #0
 8002952:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8002954:	4b16      	ldr	r3, [pc, #88]	@ (80029b0 <MX_FDCAN2_Init+0x84>)
 8002956:	2200      	movs	r2, #0
 8002958:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 800295a:	4b15      	ldr	r3, [pc, #84]	@ (80029b0 <MX_FDCAN2_Init+0x84>)
 800295c:	2210      	movs	r2, #16
 800295e:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8002960:	4b13      	ldr	r3, [pc, #76]	@ (80029b0 <MX_FDCAN2_Init+0x84>)
 8002962:	2201      	movs	r2, #1
 8002964:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 1;
 8002966:	4b12      	ldr	r3, [pc, #72]	@ (80029b0 <MX_FDCAN2_Init+0x84>)
 8002968:	2201      	movs	r2, #1
 800296a:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 1;
 800296c:	4b10      	ldr	r3, [pc, #64]	@ (80029b0 <MX_FDCAN2_Init+0x84>)
 800296e:	2201      	movs	r2, #1
 8002970:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8002972:	4b0f      	ldr	r3, [pc, #60]	@ (80029b0 <MX_FDCAN2_Init+0x84>)
 8002974:	2201      	movs	r2, #1
 8002976:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8002978:	4b0d      	ldr	r3, [pc, #52]	@ (80029b0 <MX_FDCAN2_Init+0x84>)
 800297a:	2201      	movs	r2, #1
 800297c:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 800297e:	4b0c      	ldr	r3, [pc, #48]	@ (80029b0 <MX_FDCAN2_Init+0x84>)
 8002980:	2201      	movs	r2, #1
 8002982:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8002984:	4b0a      	ldr	r3, [pc, #40]	@ (80029b0 <MX_FDCAN2_Init+0x84>)
 8002986:	2201      	movs	r2, #1
 8002988:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.StdFiltersNbr = 0;
 800298a:	4b09      	ldr	r3, [pc, #36]	@ (80029b0 <MX_FDCAN2_Init+0x84>)
 800298c:	2200      	movs	r2, #0
 800298e:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 8002990:	4b07      	ldr	r3, [pc, #28]	@ (80029b0 <MX_FDCAN2_Init+0x84>)
 8002992:	2200      	movs	r2, #0
 8002994:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8002996:	4b06      	ldr	r3, [pc, #24]	@ (80029b0 <MX_FDCAN2_Init+0x84>)
 8002998:	2200      	movs	r2, #0
 800299a:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 800299c:	4804      	ldr	r0, [pc, #16]	@ (80029b0 <MX_FDCAN2_Init+0x84>)
 800299e:	f001 fa29 	bl	8003df4 <HAL_FDCAN_Init>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d001      	beq.n	80029ac <MX_FDCAN2_Init+0x80>
  {
    Error_Handler();
 80029a8:	f000 fbf4 	bl	8003194 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 80029ac:	bf00      	nop
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	2000465c 	.word	0x2000465c
 80029b4:	40006800 	.word	0x40006800

080029b8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80029bc:	4b1b      	ldr	r3, [pc, #108]	@ (8002a2c <MX_SPI1_Init+0x74>)
 80029be:	4a1c      	ldr	r2, [pc, #112]	@ (8002a30 <MX_SPI1_Init+0x78>)
 80029c0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80029c2:	4b1a      	ldr	r3, [pc, #104]	@ (8002a2c <MX_SPI1_Init+0x74>)
 80029c4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80029c8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80029ca:	4b18      	ldr	r3, [pc, #96]	@ (8002a2c <MX_SPI1_Init+0x74>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80029d0:	4b16      	ldr	r3, [pc, #88]	@ (8002a2c <MX_SPI1_Init+0x74>)
 80029d2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80029d6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80029d8:	4b14      	ldr	r3, [pc, #80]	@ (8002a2c <MX_SPI1_Init+0x74>)
 80029da:	2200      	movs	r2, #0
 80029dc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80029de:	4b13      	ldr	r3, [pc, #76]	@ (8002a2c <MX_SPI1_Init+0x74>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80029e4:	4b11      	ldr	r3, [pc, #68]	@ (8002a2c <MX_SPI1_Init+0x74>)
 80029e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80029ea:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80029ec:	4b0f      	ldr	r3, [pc, #60]	@ (8002a2c <MX_SPI1_Init+0x74>)
 80029ee:	2220      	movs	r2, #32
 80029f0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80029f2:	4b0e      	ldr	r3, [pc, #56]	@ (8002a2c <MX_SPI1_Init+0x74>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80029f8:	4b0c      	ldr	r3, [pc, #48]	@ (8002a2c <MX_SPI1_Init+0x74>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029fe:	4b0b      	ldr	r3, [pc, #44]	@ (8002a2c <MX_SPI1_Init+0x74>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002a04:	4b09      	ldr	r3, [pc, #36]	@ (8002a2c <MX_SPI1_Init+0x74>)
 8002a06:	2207      	movs	r2, #7
 8002a08:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002a0a:	4b08      	ldr	r3, [pc, #32]	@ (8002a2c <MX_SPI1_Init+0x74>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002a10:	4b06      	ldr	r3, [pc, #24]	@ (8002a2c <MX_SPI1_Init+0x74>)
 8002a12:	2208      	movs	r2, #8
 8002a14:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002a16:	4805      	ldr	r0, [pc, #20]	@ (8002a2c <MX_SPI1_Init+0x74>)
 8002a18:	f004 fa98 	bl	8006f4c <HAL_SPI_Init>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d001      	beq.n	8002a26 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002a22:	f000 fbb7 	bl	8003194 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002a26:	bf00      	nop
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	200046c0 	.word	0x200046c0
 8002a30:	40013000 	.word	0x40013000

08002a34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b08a      	sub	sp, #40	@ 0x28
 8002a38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a3a:	f107 0314 	add.w	r3, r7, #20
 8002a3e:	2200      	movs	r2, #0
 8002a40:	601a      	str	r2, [r3, #0]
 8002a42:	605a      	str	r2, [r3, #4]
 8002a44:	609a      	str	r2, [r3, #8]
 8002a46:	60da      	str	r2, [r3, #12]
 8002a48:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a4a:	4b30      	ldr	r3, [pc, #192]	@ (8002b0c <MX_GPIO_Init+0xd8>)
 8002a4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a4e:	4a2f      	ldr	r2, [pc, #188]	@ (8002b0c <MX_GPIO_Init+0xd8>)
 8002a50:	f043 0304 	orr.w	r3, r3, #4
 8002a54:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a56:	4b2d      	ldr	r3, [pc, #180]	@ (8002b0c <MX_GPIO_Init+0xd8>)
 8002a58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a5a:	f003 0304 	and.w	r3, r3, #4
 8002a5e:	613b      	str	r3, [r7, #16]
 8002a60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002a62:	4b2a      	ldr	r3, [pc, #168]	@ (8002b0c <MX_GPIO_Init+0xd8>)
 8002a64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a66:	4a29      	ldr	r2, [pc, #164]	@ (8002b0c <MX_GPIO_Init+0xd8>)
 8002a68:	f043 0320 	orr.w	r3, r3, #32
 8002a6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a6e:	4b27      	ldr	r3, [pc, #156]	@ (8002b0c <MX_GPIO_Init+0xd8>)
 8002a70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a72:	f003 0320 	and.w	r3, r3, #32
 8002a76:	60fb      	str	r3, [r7, #12]
 8002a78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a7a:	4b24      	ldr	r3, [pc, #144]	@ (8002b0c <MX_GPIO_Init+0xd8>)
 8002a7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a7e:	4a23      	ldr	r2, [pc, #140]	@ (8002b0c <MX_GPIO_Init+0xd8>)
 8002a80:	f043 0301 	orr.w	r3, r3, #1
 8002a84:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a86:	4b21      	ldr	r3, [pc, #132]	@ (8002b0c <MX_GPIO_Init+0xd8>)
 8002a88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a8a:	f003 0301 	and.w	r3, r3, #1
 8002a8e:	60bb      	str	r3, [r7, #8]
 8002a90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a92:	4b1e      	ldr	r3, [pc, #120]	@ (8002b0c <MX_GPIO_Init+0xd8>)
 8002a94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a96:	4a1d      	ldr	r2, [pc, #116]	@ (8002b0c <MX_GPIO_Init+0xd8>)
 8002a98:	f043 0302 	orr.w	r3, r3, #2
 8002a9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a9e:	4b1b      	ldr	r3, [pc, #108]	@ (8002b0c <MX_GPIO_Init+0xd8>)
 8002aa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002aa2:	f003 0302 	and.w	r3, r3, #2
 8002aa6:	607b      	str	r3, [r7, #4]
 8002aa8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ACCEL_nCS_Pin|GYRO_nCS_Pin|BARO_nCS_Pin|FLASH_nCS_Pin
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f64f 0180 	movw	r1, #63616	@ 0xf880
 8002ab0:	4817      	ldr	r0, [pc, #92]	@ (8002b10 <MX_GPIO_Init+0xdc>)
 8002ab2:	f001 fcdd 	bl	8004470 <HAL_GPIO_WritePin>
                          |PIRANHA_Pin|RAPTOR_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, STATUS_LED_Pin|Backlight_Pin, GPIO_PIN_RESET);
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8002abc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002ac0:	f001 fcd6 	bl	8004470 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ACCEL_nCS_Pin GYRO_nCS_Pin BARO_nCS_Pin FLASH_nCS_Pin
                           PIRANHA_Pin RAPTOR_Pin */
  GPIO_InitStruct.Pin = ACCEL_nCS_Pin|GYRO_nCS_Pin|BARO_nCS_Pin|FLASH_nCS_Pin
 8002ac4:	f64f 0380 	movw	r3, #63616	@ 0xf880
 8002ac8:	617b      	str	r3, [r7, #20]
                          |PIRANHA_Pin|RAPTOR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002aca:	2301      	movs	r3, #1
 8002acc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ad6:	f107 0314 	add.w	r3, r7, #20
 8002ada:	4619      	mov	r1, r3
 8002adc:	480c      	ldr	r0, [pc, #48]	@ (8002b10 <MX_GPIO_Init+0xdc>)
 8002ade:	f001 fb45 	bl	800416c <HAL_GPIO_Init>

  /*Configure GPIO pins : STATUS_LED_Pin Backlight_Pin */
  GPIO_InitStruct.Pin = STATUS_LED_Pin|Backlight_Pin;
 8002ae2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002ae6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aec:	2300      	movs	r3, #0
 8002aee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002af0:	2300      	movs	r3, #0
 8002af2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002af4:	f107 0314 	add.w	r3, r7, #20
 8002af8:	4619      	mov	r1, r3
 8002afa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002afe:	f001 fb35 	bl	800416c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002b02:	bf00      	nop
 8002b04:	3728      	adds	r7, #40	@ 0x28
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	40021000 	.word	0x40021000
 8002b10:	48000400 	.word	0x48000400

08002b14 <StartPrintTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartPrintTask */
void StartPrintTask(void *argument)
{
 8002b14:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002b18:	b092      	sub	sp, #72	@ 0x48
 8002b1a:	af04      	add	r7, sp, #16
 8002b1c:	6078      	str	r0, [r7, #4]
  /* init code for USB_Device */
  MX_USB_Device_Init();
 8002b1e:	f00c fa33 	bl	800ef88 <MX_USB_Device_Init>
    float localAccel[3];
    float localGyro[3];
    float localPressure;
    int16_t localTemperature;
    float localBaroAltitude;
    uint32_t last_run_time = HAL_GetTick();
 8002b22:	f001 f859 	bl	8003bd8 <HAL_GetTick>
 8002b26:	6378      	str	r0, [r7, #52]	@ 0x34
    /* Infinite loop */
    for(;;) {
        if (osMutexAcquire(sensorDataHandle, osWaitForever) == osOK) {
 8002b28:	4b4d      	ldr	r3, [pc, #308]	@ (8002c60 <StartPrintTask+0x14c>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f04f 31ff 	mov.w	r1, #4294967295
 8002b30:	4618      	mov	r0, r3
 8002b32:	f009 f941 	bl	800bdb8 <osMutexAcquire>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	f040 8084 	bne.w	8002c46 <StartPrintTask+0x132>
            memcpy(localAccel, accelData, sizeof(accelData));
 8002b3e:	4a49      	ldr	r2, [pc, #292]	@ (8002c64 <StartPrintTask+0x150>)
 8002b40:	f107 0318 	add.w	r3, r7, #24
 8002b44:	ca07      	ldmia	r2, {r0, r1, r2}
 8002b46:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            memcpy(localGyro, gyroData, sizeof(gyroData));
 8002b4a:	4a47      	ldr	r2, [pc, #284]	@ (8002c68 <StartPrintTask+0x154>)
 8002b4c:	f107 030c 	add.w	r3, r7, #12
 8002b50:	ca07      	ldmia	r2, {r0, r1, r2}
 8002b52:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            localPressure = pressure;
 8002b56:	4b45      	ldr	r3, [pc, #276]	@ (8002c6c <StartPrintTask+0x158>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	633b      	str	r3, [r7, #48]	@ 0x30
            localBaroAltitude = baro_altitude;
 8002b5c:	4b44      	ldr	r3, [pc, #272]	@ (8002c70 <StartPrintTask+0x15c>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	62fb      	str	r3, [r7, #44]	@ 0x2c
            localTemperature = temp;
 8002b62:	4b44      	ldr	r3, [pc, #272]	@ (8002c74 <StartPrintTask+0x160>)
 8002b64:	881b      	ldrh	r3, [r3, #0]
 8002b66:	857b      	strh	r3, [r7, #42]	@ 0x2a
            osMutexRelease(sensorDataHandle);
 8002b68:	4b3d      	ldr	r3, [pc, #244]	@ (8002c60 <StartPrintTask+0x14c>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f009 f96e 	bl	800be4e <osMutexRelease>

            uint32_t current_tick = HAL_GetTick();
 8002b72:	f001 f831 	bl	8003bd8 <HAL_GetTick>
 8002b76:	6278      	str	r0, [r7, #36]	@ 0x24
            debug_print("--- Tick: %lu ---\r\n", current_tick);
 8002b78:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002b7a:	483f      	ldr	r0, [pc, #252]	@ (8002c78 <StartPrintTask+0x164>)
 8002b7c:	f7ff fd3e 	bl	80025fc <debug_print>
            debug_print("BMI088 Accel: X: %.2f Y: %.2f Z: %.2f g\r\n", localAccel[0], localAccel[1], localAccel[2]);
 8002b80:	69bb      	ldr	r3, [r7, #24]
 8002b82:	4618      	mov	r0, r3
 8002b84:	f7fd fd00 	bl	8000588 <__aeabi_f2d>
 8002b88:	4680      	mov	r8, r0
 8002b8a:	4689      	mov	r9, r1
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f7fd fcfa 	bl	8000588 <__aeabi_f2d>
 8002b94:	4604      	mov	r4, r0
 8002b96:	460d      	mov	r5, r1
 8002b98:	6a3b      	ldr	r3, [r7, #32]
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f7fd fcf4 	bl	8000588 <__aeabi_f2d>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	460b      	mov	r3, r1
 8002ba4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002ba8:	e9cd 4500 	strd	r4, r5, [sp]
 8002bac:	4642      	mov	r2, r8
 8002bae:	464b      	mov	r3, r9
 8002bb0:	4832      	ldr	r0, [pc, #200]	@ (8002c7c <StartPrintTask+0x168>)
 8002bb2:	f7ff fd23 	bl	80025fc <debug_print>
            debug_print("BMI088 Gyro:  X: %.2f Y: %.2f Z: %.2f dps\r\n", localGyro[0], localGyro[1], localGyro[2]);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f7fd fce5 	bl	8000588 <__aeabi_f2d>
 8002bbe:	4680      	mov	r8, r0
 8002bc0:	4689      	mov	r9, r1
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f7fd fcdf 	bl	8000588 <__aeabi_f2d>
 8002bca:	4604      	mov	r4, r0
 8002bcc:	460d      	mov	r5, r1
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f7fd fcd9 	bl	8000588 <__aeabi_f2d>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	460b      	mov	r3, r1
 8002bda:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002bde:	e9cd 4500 	strd	r4, r5, [sp]
 8002be2:	4642      	mov	r2, r8
 8002be4:	464b      	mov	r3, r9
 8002be6:	4826      	ldr	r0, [pc, #152]	@ (8002c80 <StartPrintTask+0x16c>)
 8002be8:	f7ff fd08 	bl	80025fc <debug_print>
            debug_print("BMP390 Alt:   %.2f m\r\n", localBaroAltitude);
 8002bec:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002bee:	f7fd fccb 	bl	8000588 <__aeabi_f2d>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	460b      	mov	r3, r1
 8002bf6:	4823      	ldr	r0, [pc, #140]	@ (8002c84 <StartPrintTask+0x170>)
 8002bf8:	f7ff fd00 	bl	80025fc <debug_print>
            debug_print("BMP390 Pres:  %.0f Pa\r\n", localPressure);
 8002bfc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002bfe:	f7fd fcc3 	bl	8000588 <__aeabi_f2d>
 8002c02:	4602      	mov	r2, r0
 8002c04:	460b      	mov	r3, r1
 8002c06:	4820      	ldr	r0, [pc, #128]	@ (8002c88 <StartPrintTask+0x174>)
 8002c08:	f7ff fcf8 	bl	80025fc <debug_print>
            debug_print("BMP390 Temp:  %.2f C\r\n", (float)localTemperature / 100.0f);
 8002c0c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8002c10:	ee07 3a90 	vmov	s15, r3
 8002c14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c18:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8002c8c <StartPrintTask+0x178>
 8002c1c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002c20:	ee16 0a90 	vmov	r0, s13
 8002c24:	f7fd fcb0 	bl	8000588 <__aeabi_f2d>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	460b      	mov	r3, r1
 8002c2c:	4818      	ldr	r0, [pc, #96]	@ (8002c90 <StartPrintTask+0x17c>)
 8002c2e:	f7ff fce5 	bl	80025fc <debug_print>
            debug_print("\r\n");
 8002c32:	4818      	ldr	r0, [pc, #96]	@ (8002c94 <StartPrintTask+0x180>)
 8002c34:	f7ff fce2 	bl	80025fc <debug_print>

            HAL_GPIO_TogglePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin);
 8002c38:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002c3c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002c40:	f001 fc2e 	bl	80044a0 <HAL_GPIO_TogglePin>
 8002c44:	e002      	b.n	8002c4c <StartPrintTask+0x138>

        } else {
            debug_print("PrintTask: Failed to acquire mutex!\r\n");
 8002c46:	4814      	ldr	r0, [pc, #80]	@ (8002c98 <StartPrintTask+0x184>)
 8002c48:	f7ff fcd8 	bl	80025fc <debug_print>
        }

        osDelayUntil(last_run_time + 500);
 8002c4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c4e:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8002c52:	4618      	mov	r0, r3
 8002c54:	f008 fffd 	bl	800bc52 <osDelayUntil>
        last_run_time = HAL_GetTick();
 8002c58:	f000 ffbe 	bl	8003bd8 <HAL_GetTick>
 8002c5c:	6378      	str	r0, [r7, #52]	@ 0x34
        if (osMutexAcquire(sensorDataHandle, osWaitForever) == osOK) {
 8002c5e:	e763      	b.n	8002b28 <StartPrintTask+0x14>
 8002c60:	20004734 	.word	0x20004734
 8002c64:	20004768 	.word	0x20004768
 8002c68:	20004774 	.word	0x20004774
 8002c6c:	200047e8 	.word	0x200047e8
 8002c70:	200047ec 	.word	0x200047ec
 8002c74:	200047f0 	.word	0x200047f0
 8002c78:	08011334 	.word	0x08011334
 8002c7c:	08011348 	.word	0x08011348
 8002c80:	08011374 	.word	0x08011374
 8002c84:	080113a0 	.word	0x080113a0
 8002c88:	080113b8 	.word	0x080113b8
 8002c8c:	42c80000 	.word	0x42c80000
 8002c90:	080113d0 	.word	0x080113d0
 8002c94:	080113e8 	.word	0x080113e8
 8002c98:	080113ec 	.word	0x080113ec

08002c9c <StartReadSensors>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadSensors */
void StartReadSensors(void *argument)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b088      	sub	sp, #32
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReadSensors */
  /* Infinite loop */
  for(;;)
  {
	 accel_step(&imu);
 8002ca4:	4828      	ldr	r0, [pc, #160]	@ (8002d48 <StartReadSensors+0xac>)
 8002ca6:	f7fd fe9f 	bl	80009e8 <accel_step>
	 gyro_step(&imu);
 8002caa:	4827      	ldr	r0, [pc, #156]	@ (8002d48 <StartReadSensors+0xac>)
 8002cac:	f7fd ff08 	bl	8000ac0 <gyro_step>
	 baro_step(&baro);
 8002cb0:	4826      	ldr	r0, [pc, #152]	@ (8002d4c <StartReadSensors+0xb0>)
 8002cb2:	f7fe fc95 	bl	80015e0 <baro_step>

	 float *accel = accel_get(&imu);
 8002cb6:	4824      	ldr	r0, [pc, #144]	@ (8002d48 <StartReadSensors+0xac>)
 8002cb8:	f7fd ff72 	bl	8000ba0 <accel_get>
 8002cbc:	61f8      	str	r0, [r7, #28]
	 float *gyro = gyro_get(&imu);
 8002cbe:	4822      	ldr	r0, [pc, #136]	@ (8002d48 <StartReadSensors+0xac>)
 8002cc0:	f7fd ff7a 	bl	8000bb8 <gyro_get>
 8002cc4:	61b8      	str	r0, [r7, #24]
	 float local_pressure = baro_get_pressure(&baro);
 8002cc6:	4821      	ldr	r0, [pc, #132]	@ (8002d4c <StartReadSensors+0xb0>)
 8002cc8:	f7fe fd40 	bl	800174c <baro_get_pressure>
 8002ccc:	ed87 0a05 	vstr	s0, [r7, #20]
	 float local_altitude = baro_get_altitude(&baro);
 8002cd0:	481e      	ldr	r0, [pc, #120]	@ (8002d4c <StartReadSensors+0xb0>)
 8002cd2:	f7fe fd1f 	bl	8001714 <baro_get_altitude>
 8002cd6:	ed87 0a04 	vstr	s0, [r7, #16]
	 int16_t local_temp = baro_get_temp(&baro);
 8002cda:	481c      	ldr	r0, [pc, #112]	@ (8002d4c <StartReadSensors+0xb0>)
 8002cdc:	f7fe fd29 	bl	8001732 <baro_get_temp>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	81fb      	strh	r3, [r7, #14]

	 osMutexAcquire(sensorDataHandle, osWaitForever);
 8002ce4:	4b1a      	ldr	r3, [pc, #104]	@ (8002d50 <StartReadSensors+0xb4>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f04f 31ff 	mov.w	r1, #4294967295
 8002cec:	4618      	mov	r0, r3
 8002cee:	f009 f863 	bl	800bdb8 <osMutexAcquire>

	 accelData[0] = accel[0];
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a17      	ldr	r2, [pc, #92]	@ (8002d54 <StartReadSensors+0xb8>)
 8002cf8:	6013      	str	r3, [r2, #0]
	 accelData[1] = accel[1];
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	4a15      	ldr	r2, [pc, #84]	@ (8002d54 <StartReadSensors+0xb8>)
 8002d00:	6053      	str	r3, [r2, #4]
	 accelData[2] = accel[2];
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	4a13      	ldr	r2, [pc, #76]	@ (8002d54 <StartReadSensors+0xb8>)
 8002d08:	6093      	str	r3, [r2, #8]

	 gyroData[0] = gyro[0];
 8002d0a:	69bb      	ldr	r3, [r7, #24]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a12      	ldr	r2, [pc, #72]	@ (8002d58 <StartReadSensors+0xbc>)
 8002d10:	6013      	str	r3, [r2, #0]
	 gyroData[1] = gyro[1];
 8002d12:	69bb      	ldr	r3, [r7, #24]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	4a10      	ldr	r2, [pc, #64]	@ (8002d58 <StartReadSensors+0xbc>)
 8002d18:	6053      	str	r3, [r2, #4]
	 gyroData[2] = gyro[2];
 8002d1a:	69bb      	ldr	r3, [r7, #24]
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	4a0e      	ldr	r2, [pc, #56]	@ (8002d58 <StartReadSensors+0xbc>)
 8002d20:	6093      	str	r3, [r2, #8]

	 pressure = local_pressure;
 8002d22:	4a0e      	ldr	r2, [pc, #56]	@ (8002d5c <StartReadSensors+0xc0>)
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	6013      	str	r3, [r2, #0]
	 baro_altitude = local_altitude;
 8002d28:	4a0d      	ldr	r2, [pc, #52]	@ (8002d60 <StartReadSensors+0xc4>)
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	6013      	str	r3, [r2, #0]
	 temp = local_temp;
 8002d2e:	4a0d      	ldr	r2, [pc, #52]	@ (8002d64 <StartReadSensors+0xc8>)
 8002d30:	89fb      	ldrh	r3, [r7, #14]
 8002d32:	8013      	strh	r3, [r2, #0]

	 osMutexRelease(sensorDataHandle);
 8002d34:	4b06      	ldr	r3, [pc, #24]	@ (8002d50 <StartReadSensors+0xb4>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f009 f888 	bl	800be4e <osMutexRelease>

	 osDelay(100);
 8002d3e:	2064      	movs	r0, #100	@ 0x64
 8002d40:	f008 ff6c 	bl	800bc1c <osDelay>
  {
 8002d44:	bf00      	nop
 8002d46:	e7ad      	b.n	8002ca4 <StartReadSensors+0x8>
 8002d48:	20004738 	.word	0x20004738
 8002d4c:	20004780 	.word	0x20004780
 8002d50:	20004734 	.word	0x20004734
 8002d54:	20004768 	.word	0x20004768
 8002d58:	20004774 	.word	0x20004774
 8002d5c:	200047e8 	.word	0x200047e8
 8002d60:	200047ec 	.word	0x200047ec
 8002d64:	200047f0 	.word	0x200047f0

08002d68 <StartDeployment>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDeployment */
void StartDeployment(void *argument)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b0a4      	sub	sp, #144	@ 0x90
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDeployment */
	FlightPhase phase = Startup;
 8002d70:	2300      	movs	r3, #0
 8002d72:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f

	// Running average for acceleration due to gravity
	static AvgHistory gravity_est_state;
	AvgHistory_Init(&gravity_est_state);
 8002d76:	48b8      	ldr	r0, [pc, #736]	@ (8003058 <StartDeployment+0x2f0>)
 8002d78:	f000 fbbc 	bl	80034f4 <AvgHistory_Init>

	// Running average for ground level at startup
	static AvgHistory ground_level_est_state;
	AvgHistory_Init(&ground_level_est_state);
 8002d7c:	48b7      	ldr	r0, [pc, #732]	@ (800305c <StartDeployment+0x2f4>)
 8002d7e:	f000 fbb9 	bl	80034f4 <AvgHistory_Init>

	float apogee = 0;
 8002d82:	f04f 0300 	mov.w	r3, #0
 8002d86:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
	uint32_t land_time = 0;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	bool launched_state = false;
 8002d90:	2300      	movs	r3, #0
 8002d92:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83

  /* Infinite loop */
  for(;;)
  {
	  uint32_t now = HAL_GetTick();
 8002d96:	f000 ff1f 	bl	8003bd8 <HAL_GetTick>
 8002d9a:	67f8      	str	r0, [r7, #124]	@ 0x7c
	  float currentAccel[3];
	  float currentGyro[3];

	  osMutexAcquire(sensorDataHandle, osWaitForever);
 8002d9c:	4bb0      	ldr	r3, [pc, #704]	@ (8003060 <StartDeployment+0x2f8>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f04f 31ff 	mov.w	r1, #4294967295
 8002da4:	4618      	mov	r0, r3
 8002da6:	f009 f807 	bl	800bdb8 <osMutexAcquire>
	  currentAccel[0] = accelData[0];
 8002daa:	4bae      	ldr	r3, [pc, #696]	@ (8003064 <StartDeployment+0x2fc>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	65bb      	str	r3, [r7, #88]	@ 0x58
	  currentAccel[1] = accelData[1];
 8002db0:	4bac      	ldr	r3, [pc, #688]	@ (8003064 <StartDeployment+0x2fc>)
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	65fb      	str	r3, [r7, #92]	@ 0x5c
	  currentAccel[2] = accelData[2];
 8002db6:	4bab      	ldr	r3, [pc, #684]	@ (8003064 <StartDeployment+0x2fc>)
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	663b      	str	r3, [r7, #96]	@ 0x60

	  currentGyro[0] = gyroData[0];
 8002dbc:	4baa      	ldr	r3, [pc, #680]	@ (8003068 <StartDeployment+0x300>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	64fb      	str	r3, [r7, #76]	@ 0x4c
	  currentGyro[1] = gyroData[1];
 8002dc2:	4ba9      	ldr	r3, [pc, #676]	@ (8003068 <StartDeployment+0x300>)
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	653b      	str	r3, [r7, #80]	@ 0x50
	  currentGyro[2] = gyroData[2];
 8002dc8:	4ba7      	ldr	r3, [pc, #668]	@ (8003068 <StartDeployment+0x300>)
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	657b      	str	r3, [r7, #84]	@ 0x54

	  float current_pressure = pressure;
 8002dce:	4ba7      	ldr	r3, [pc, #668]	@ (800306c <StartDeployment+0x304>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	67bb      	str	r3, [r7, #120]	@ 0x78
	  float raw_altitude = baro_altitude;
 8002dd4:	4ba6      	ldr	r3, [pc, #664]	@ (8003070 <StartDeployment+0x308>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	677b      	str	r3, [r7, #116]	@ 0x74
	  int16_t current_temp = temp;
 8002dda:	4ba6      	ldr	r3, [pc, #664]	@ (8003074 <StartDeployment+0x30c>)
 8002ddc:	881b      	ldrh	r3, [r3, #0]
 8002dde:	f8a7 3072 	strh.w	r3, [r7, #114]	@ 0x72
	  osMutexRelease(sensorDataHandle);
 8002de2:	4b9f      	ldr	r3, [pc, #636]	@ (8003060 <StartDeployment+0x2f8>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4618      	mov	r0, r3
 8002de8:	f009 f831 	bl	800be4e <osMutexRelease>

	  float accel_mag = sqrtf(currentAccel[0] * currentAccel[0] + currentAccel[1] * currentAccel[1] + currentAccel[2] * currentAccel[2]);
 8002dec:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8002df0:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8002df4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002df8:	edd7 6a17 	vldr	s13, [r7, #92]	@ 0x5c
 8002dfc:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8002e00:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e04:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e08:	edd7 6a18 	vldr	s13, [r7, #96]	@ 0x60
 8002e0c:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8002e10:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e18:	eeb0 0a67 	vmov.f32	s0, s15
 8002e1c:	f00d fb26 	bl	801046c <sqrtf>
 8002e20:	ed87 0a1b 	vstr	s0, [r7, #108]	@ 0x6c

	  if (phase < Launched) {
 8002e24:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d809      	bhi.n	8002e40 <StartDeployment+0xd8>
		  AvgHistory_Add(&gravity_est_state, accel_mag);
 8002e2c:	ed97 0a1b 	vldr	s0, [r7, #108]	@ 0x6c
 8002e30:	4889      	ldr	r0, [pc, #548]	@ (8003058 <StartDeployment+0x2f0>)
 8002e32:	f000 fb7f 	bl	8003534 <AvgHistory_Add>
		  AvgHistory_Add(&ground_level_est_state, raw_altitude);
 8002e36:	ed97 0a1d 	vldr	s0, [r7, #116]	@ 0x74
 8002e3a:	4888      	ldr	r0, [pc, #544]	@ (800305c <StartDeployment+0x2f4>)
 8002e3c:	f000 fb7a 	bl	8003534 <AvgHistory_Add>
	  }

	  if (phase == Startup) {
 8002e40:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d118      	bne.n	8002e7a <StartDeployment+0x112>
		  uint8_t ground_level_full = AvgHistory_Full(&ground_level_est_state);
 8002e48:	4884      	ldr	r0, [pc, #528]	@ (800305c <StartDeployment+0x2f4>)
 8002e4a:	f000 fbc5 	bl	80035d8 <AvgHistory_Full>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
		  uint8_t gravity_full = AvgHistory_Full(&gravity_est_state);
 8002e54:	4880      	ldr	r0, [pc, #512]	@ (8003058 <StartDeployment+0x2f0>)
 8002e56:	f000 fbbf 	bl	80035d8 <AvgHistory_Full>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	f887 306a 	strb.w	r3, [r7, #106]	@ 0x6a
		  if (!ground_level_full || !gravity_full) {
 8002e60:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	f000 816a 	beq.w	800313e <StartDeployment+0x3d6>
 8002e6a:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	f000 8165 	beq.w	800313e <StartDeployment+0x3d6>
			  // return?
			  continue;
		  }
		  phase = Idle;
 8002e74:	2301      	movs	r3, #1
 8002e76:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
	  }

	  accel_mag -= AvgHistory_OldAvg(&gravity_est_state);
 8002e7a:	4877      	ldr	r0, [pc, #476]	@ (8003058 <StartDeployment+0x2f0>)
 8002e7c:	f000 fbbd 	bl	80035fa <AvgHistory_OldAvg>
 8002e80:	eeb0 7a40 	vmov.f32	s14, s0
 8002e84:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8002e88:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002e8c:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
	  float curr_alt = raw_altitude - AvgHistory_OldAvg(&ground_level_est_state);
 8002e90:	4872      	ldr	r0, [pc, #456]	@ (800305c <StartDeployment+0x2f4>)
 8002e92:	f000 fbb2 	bl	80035fa <AvgHistory_OldAvg>
 8002e96:	eeb0 7a40 	vmov.f32	s14, s0
 8002e9a:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8002e9e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002ea2:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64

	  channel_update();
 8002ea6:	f7ff fc01 	bl	80026ac <channel_update>

	  bool any_channel_firing = false;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
	  for (uint8_t i = 0; i < CHANNEL_COUNT; i++) {
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
 8002eb6:	e011      	b.n	8002edc <StartDeployment+0x174>
		  if (pyros[i].firing) {
 8002eb8:	f897 3081 	ldrb.w	r3, [r7, #129]	@ 0x81
 8002ebc:	4a6e      	ldr	r2, [pc, #440]	@ (8003078 <StartDeployment+0x310>)
 8002ebe:	011b      	lsls	r3, r3, #4
 8002ec0:	4413      	add	r3, r2
 8002ec2:	330c      	adds	r3, #12
 8002ec4:	781b      	ldrb	r3, [r3, #0]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d003      	beq.n	8002ed2 <StartDeployment+0x16a>
			  any_channel_firing = true;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
			  break;
 8002ed0:	e008      	b.n	8002ee4 <StartDeployment+0x17c>
	  for (uint8_t i = 0; i < CHANNEL_COUNT; i++) {
 8002ed2:	f897 3081 	ldrb.w	r3, [r7, #129]	@ 0x81
 8002ed6:	3301      	adds	r3, #1
 8002ed8:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
 8002edc:	f897 3081 	ldrb.w	r3, [r7, #129]	@ 0x81
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d9e9      	bls.n	8002eb8 <StartDeployment+0x150>
		  }
	  }

	  if (!any_channel_firing) {
 8002ee4:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8002ee8:	f083 0301 	eor.w	r3, r3, #1
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d006      	beq.n	8002f00 <StartDeployment+0x198>
		  KalmanFilter_step(&kf, accel_mag, curr_alt);
 8002ef2:	edd7 0a19 	vldr	s1, [r7, #100]	@ 0x64
 8002ef6:	ed97 0a1b 	vldr	s0, [r7, #108]	@ 0x6c
 8002efa:	4860      	ldr	r0, [pc, #384]	@ (800307c <StartDeployment+0x314>)
 8002efc:	f7ff f886 	bl	800200c <KalmanFilter_step>
	  }

	  if (phase == Idle) {
 8002f00:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d11e      	bne.n	8002f46 <StartDeployment+0x1de>
		  if (kf.est[1] > LAUNCH_VELOCITY && kf.est[2] > LAUNCH_ACCEL) {
 8002f08:	4b5c      	ldr	r3, [pc, #368]	@ (800307c <StartDeployment+0x314>)
 8002f0a:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8002f0e:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 8002f12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f1a:	f340 80b4 	ble.w	8003086 <StartDeployment+0x31e>
 8002f1e:	4b57      	ldr	r3, [pc, #348]	@ (800307c <StartDeployment+0x314>)
 8002f20:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 8002f24:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8002f28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f30:	f340 80a9 	ble.w	8003086 <StartDeployment+0x31e>
			  phase = Launched;
 8002f34:	2302      	movs	r3, #2
 8002f36:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
			  log_start();
 8002f3a:	f7ff f955 	bl	80021e8 <log_start>
			  launched_state = true;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
 8002f44:	e09f      	b.n	8003086 <StartDeployment+0x31e>
		  }
	  } else if (phase == Launched) {
 8002f46:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	d113      	bne.n	8002f76 <StartDeployment+0x20e>
		  if (kf.est[1] < 0) {
 8002f4e:	4b4b      	ldr	r3, [pc, #300]	@ (800307c <StartDeployment+0x314>)
 8002f50:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8002f54:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002f58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f5c:	f140 8093 	bpl.w	8003086 <StartDeployment+0x31e>
			  apogee = kf.est[0];
 8002f60:	4b46      	ldr	r3, [pc, #280]	@ (800307c <StartDeployment+0x314>)
 8002f62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f64:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
			  channel_fire(SEPARATION_INDEX);
 8002f68:	2000      	movs	r0, #0
 8002f6a:	f7ff fb71 	bl	8002650 <channel_fire>
			  phase = DescendingAfterSeparation;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 8002f74:	e087      	b.n	8003086 <StartDeployment+0x31e>
		  }
	  } else if (phase == DescendingAfterSeparation) {
 8002f76:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8002f7a:	2b03      	cmp	r3, #3
 8002f7c:	d118      	bne.n	8002fb0 <StartDeployment+0x248>

		  if (kf.est[0] < REEFING_ALTITUDE && (now - pyros[SEPARATION_INDEX].fire_time) > 3000) {
 8002f7e:	4b3f      	ldr	r3, [pc, #252]	@ (800307c <StartDeployment+0x314>)
 8002f80:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8002f84:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 8003080 <StartDeployment+0x318>
 8002f88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f90:	d579      	bpl.n	8003086 <StartDeployment+0x31e>
 8002f92:	4b39      	ldr	r3, [pc, #228]	@ (8003078 <StartDeployment+0x310>)
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d971      	bls.n	8003086 <StartDeployment+0x31e>
			  channel_fire(REEFING_INDEX);
 8002fa2:	2001      	movs	r0, #1
 8002fa4:	f7ff fb54 	bl	8002650 <channel_fire>
			  phase = DescendingAfterReefing;
 8002fa8:	2304      	movs	r3, #4
 8002faa:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 8002fae:	e06a      	b.n	8003086 <StartDeployment+0x31e>
		  }
	  } else if (phase == DescendingAfterReefing) {
 8002fb0:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8002fb4:	2b04      	cmp	r3, #4
 8002fb6:	d166      	bne.n	8003086 <StartDeployment+0x31e>
		  if (kf.est[0] < LANDED_ALTITUDE && abs(kf.est[1]) < LANDED_VELOCITY && abs(kf.est[2]) < LANDED_ACCEL) {
 8002fb8:	4b30      	ldr	r3, [pc, #192]	@ (800307c <StartDeployment+0x314>)
 8002fba:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8002fbe:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002fc2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fca:	d541      	bpl.n	8003050 <StartDeployment+0x2e8>
 8002fcc:	4b2b      	ldr	r3, [pc, #172]	@ (800307c <StartDeployment+0x314>)
 8002fce:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8002fd2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002fd6:	ee17 3a90 	vmov	r3, s15
 8002fda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fde:	db37      	blt.n	8003050 <StartDeployment+0x2e8>
 8002fe0:	4b26      	ldr	r3, [pc, #152]	@ (800307c <StartDeployment+0x314>)
 8002fe2:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8002fe6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002fea:	ee17 3a90 	vmov	r3, s15
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	dc2e      	bgt.n	8003050 <StartDeployment+0x2e8>
 8002ff2:	4b22      	ldr	r3, [pc, #136]	@ (800307c <StartDeployment+0x314>)
 8002ff4:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 8002ff8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ffc:	ee17 3a90 	vmov	r3, s15
 8003000:	2b00      	cmp	r3, #0
 8003002:	db25      	blt.n	8003050 <StartDeployment+0x2e8>
 8003004:	4b1d      	ldr	r3, [pc, #116]	@ (800307c <StartDeployment+0x314>)
 8003006:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 800300a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800300e:	ee17 3a90 	vmov	r3, s15
 8003012:	2b00      	cmp	r3, #0
 8003014:	dc1c      	bgt.n	8003050 <StartDeployment+0x2e8>
			  if (land_time == 0) {
 8003016:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800301a:	2b00      	cmp	r3, #0
 800301c:	d10a      	bne.n	8003034 <StartDeployment+0x2cc>
				  land_time = now;
 800301e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003020:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
				  if (land_time == 0) {
 8003024:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003028:	2b00      	cmp	r3, #0
 800302a:	d12b      	bne.n	8003084 <StartDeployment+0x31c>
					  land_time = 1;
 800302c:	2301      	movs	r3, #1
 800302e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			  if (land_time == 0) {
 8003032:	e027      	b.n	8003084 <StartDeployment+0x31c>
				  }
			  } else if ((now - land_time) >= LANDED_TIME) {
 8003034:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003036:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8003040:	4293      	cmp	r3, r2
 8003042:	d91f      	bls.n	8003084 <StartDeployment+0x31c>
				  phase = Landed;
 8003044:	2305      	movs	r3, #5
 8003046:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
				  log_stop();
 800304a:	f7ff f8d9 	bl	8002200 <log_stop>
			  if (land_time == 0) {
 800304e:	e019      	b.n	8003084 <StartDeployment+0x31c>
			  }
		  } else {
			  land_time = 0;
 8003050:	2300      	movs	r3, #0
 8003052:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003056:	e016      	b.n	8003086 <StartDeployment+0x31e>
 8003058:	2000484c 	.word	0x2000484c
 800305c:	2000485c 	.word	0x2000485c
 8003060:	20004734 	.word	0x20004734
 8003064:	20004768 	.word	0x20004768
 8003068:	20004774 	.word	0x20004774
 800306c:	200047e8 	.word	0x200047e8
 8003070:	200047ec 	.word	0x200047ec
 8003074:	200047f0 	.word	0x200047f0
 8003078:	20000000 	.word	0x20000000
 800307c:	200047f4 	.word	0x200047f4
 8003080:	449c4000 	.word	0x449c4000
			  if (land_time == 0) {
 8003084:	bf00      	nop
		  }
	  }
	  LogMessage data;
	  data.time_ms = now;
 8003086:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003088:	60bb      	str	r3, [r7, #8]
	  data.phase = phase;
 800308a:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800308e:	733b      	strb	r3, [r7, #12]
	  data.kf_pos = kf.est[0];
 8003090:	4b2c      	ldr	r3, [pc, #176]	@ (8003144 <StartDeployment+0x3dc>)
 8003092:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003094:	613b      	str	r3, [r7, #16]
	  data.kf_vel = kf.est[1];
 8003096:	4b2b      	ldr	r3, [pc, #172]	@ (8003144 <StartDeployment+0x3dc>)
 8003098:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800309a:	617b      	str	r3, [r7, #20]
	  data.kf_accel = kf.est[2];
 800309c:	4b29      	ldr	r3, [pc, #164]	@ (8003144 <StartDeployment+0x3dc>)
 800309e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030a0:	61bb      	str	r3, [r7, #24]
	  data.altitude = raw_altitude;
 80030a2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80030a4:	61fb      	str	r3, [r7, #28]
	  data.accel_x = currentAccel[0];
 80030a6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80030a8:	623b      	str	r3, [r7, #32]
	  data.accel_y = currentAccel[1];
 80030aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80030ac:	627b      	str	r3, [r7, #36]	@ 0x24
	  data.accel_z = currentAccel[2];
 80030ae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80030b0:	62bb      	str	r3, [r7, #40]	@ 0x28
	  data.gyro_x = currentGyro[0];
 80030b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80030b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  data.gyro_y = currentGyro[0];
 80030b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80030b8:	633b      	str	r3, [r7, #48]	@ 0x30
	  data.gyro_z = currentGyro[0];
 80030ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80030bc:	637b      	str	r3, [r7, #52]	@ 0x34
	  data.pressure = current_pressure;
 80030be:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80030c0:	63bb      	str	r3, [r7, #56]	@ 0x38
	  data.temp = current_temp;
 80030c2:	f8b7 3072 	ldrh.w	r3, [r7, #114]	@ 0x72
 80030c6:	87bb      	strh	r3, [r7, #60]	@ 0x3c
	  data.apogee = apogee;
 80030c8:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 80030cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80030d0:	ee17 3a90 	vmov	r3, s15
 80030d4:	643b      	str	r3, [r7, #64]	@ 0x40
	  data.launched = launched_state;
 80030d6:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80030da:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
	  data.landed_time = land_time;
 80030de:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80030e2:	64bb      	str	r3, [r7, #72]	@ 0x48

	  log_add(&data);
 80030e4:	f107 0308 	add.w	r3, r7, #8
 80030e8:	4618      	mov	r0, r3
 80030ea:	f7ff f895 	bl	8002218 <log_add>
	  debug_print("Phase: %d\r\n",phase);
 80030ee:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 80030f2:	4619      	mov	r1, r3
 80030f4:	4814      	ldr	r0, [pc, #80]	@ (8003148 <StartDeployment+0x3e0>)
 80030f6:	f7ff fa81 	bl	80025fc <debug_print>
	  debug_print("kalman pos: %.2f\r\n",kf.est[0]);
 80030fa:	4b12      	ldr	r3, [pc, #72]	@ (8003144 <StartDeployment+0x3dc>)
 80030fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030fe:	4618      	mov	r0, r3
 8003100:	f7fd fa42 	bl	8000588 <__aeabi_f2d>
 8003104:	4602      	mov	r2, r0
 8003106:	460b      	mov	r3, r1
 8003108:	4810      	ldr	r0, [pc, #64]	@ (800314c <StartDeployment+0x3e4>)
 800310a:	f7ff fa77 	bl	80025fc <debug_print>
	  debug_print("kalman vel: %.2f\r\n",kf.est[1]);
 800310e:	4b0d      	ldr	r3, [pc, #52]	@ (8003144 <StartDeployment+0x3dc>)
 8003110:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003112:	4618      	mov	r0, r3
 8003114:	f7fd fa38 	bl	8000588 <__aeabi_f2d>
 8003118:	4602      	mov	r2, r0
 800311a:	460b      	mov	r3, r1
 800311c:	480c      	ldr	r0, [pc, #48]	@ (8003150 <StartDeployment+0x3e8>)
 800311e:	f7ff fa6d 	bl	80025fc <debug_print>
	  debug_print("kalman accel: %.2f\r\n",kf.est[2]);
 8003122:	4b08      	ldr	r3, [pc, #32]	@ (8003144 <StartDeployment+0x3dc>)
 8003124:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003126:	4618      	mov	r0, r3
 8003128:	f7fd fa2e 	bl	8000588 <__aeabi_f2d>
 800312c:	4602      	mov	r2, r0
 800312e:	460b      	mov	r3, r1
 8003130:	4808      	ldr	r0, [pc, #32]	@ (8003154 <StartDeployment+0x3ec>)
 8003132:	f7ff fa63 	bl	80025fc <debug_print>

    osDelay(100);
 8003136:	2064      	movs	r0, #100	@ 0x64
 8003138:	f008 fd70 	bl	800bc1c <osDelay>
 800313c:	e62b      	b.n	8002d96 <StartDeployment+0x2e>
			  continue;
 800313e:	bf00      	nop
  {
 8003140:	e629      	b.n	8002d96 <StartDeployment+0x2e>
 8003142:	bf00      	nop
 8003144:	200047f4 	.word	0x200047f4
 8003148:	08011414 	.word	0x08011414
 800314c:	08011420 	.word	0x08011420
 8003150:	08011434 	.word	0x08011434
 8003154:	08011448 	.word	0x08011448

08003158 <StartLog>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLog */
void StartLog(void *argument)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b082      	sub	sp, #8
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLog */
  /* Infinite loop */
  for(;;)
  {
    log_step();
 8003160:	f7ff f928 	bl	80023b4 <log_step>
    osDelay(500);
 8003164:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003168:	f008 fd58 	bl	800bc1c <osDelay>
    log_step();
 800316c:	bf00      	nop
 800316e:	e7f7      	b.n	8003160 <StartLog+0x8>

08003170 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a04      	ldr	r2, [pc, #16]	@ (8003190 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d101      	bne.n	8003186 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003182:	f000 fd17 	bl	8003bb4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003186:	bf00      	nop
 8003188:	3708      	adds	r7, #8
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	40012c00 	.word	0x40012c00

08003194 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003194:	b480      	push	{r7}
 8003196:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003198:	b672      	cpsid	i
}
 800319a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800319c:	bf00      	nop
 800319e:	e7fd      	b.n	800319c <Error_Handler+0x8>

080031a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b082      	sub	sp, #8
 80031a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031a6:	4b12      	ldr	r3, [pc, #72]	@ (80031f0 <HAL_MspInit+0x50>)
 80031a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031aa:	4a11      	ldr	r2, [pc, #68]	@ (80031f0 <HAL_MspInit+0x50>)
 80031ac:	f043 0301 	orr.w	r3, r3, #1
 80031b0:	6613      	str	r3, [r2, #96]	@ 0x60
 80031b2:	4b0f      	ldr	r3, [pc, #60]	@ (80031f0 <HAL_MspInit+0x50>)
 80031b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031b6:	f003 0301 	and.w	r3, r3, #1
 80031ba:	607b      	str	r3, [r7, #4]
 80031bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80031be:	4b0c      	ldr	r3, [pc, #48]	@ (80031f0 <HAL_MspInit+0x50>)
 80031c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031c2:	4a0b      	ldr	r2, [pc, #44]	@ (80031f0 <HAL_MspInit+0x50>)
 80031c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80031ca:	4b09      	ldr	r3, [pc, #36]	@ (80031f0 <HAL_MspInit+0x50>)
 80031cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031d2:	603b      	str	r3, [r7, #0]
 80031d4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80031d6:	2200      	movs	r2, #0
 80031d8:	210f      	movs	r1, #15
 80031da:	f06f 0001 	mvn.w	r0, #1
 80031de:	f000 fde1 	bl	8003da4 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80031e2:	f002 ff1d 	bl	8006020 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80031e6:	bf00      	nop
 80031e8:	3708      	adds	r7, #8
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	40021000 	.word	0x40021000

080031f4 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b09e      	sub	sp, #120	@ 0x78
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031fc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003200:	2200      	movs	r2, #0
 8003202:	601a      	str	r2, [r3, #0]
 8003204:	605a      	str	r2, [r3, #4]
 8003206:	609a      	str	r2, [r3, #8]
 8003208:	60da      	str	r2, [r3, #12]
 800320a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800320c:	f107 0314 	add.w	r3, r7, #20
 8003210:	2250      	movs	r2, #80	@ 0x50
 8003212:	2100      	movs	r1, #0
 8003214:	4618      	mov	r0, r3
 8003216:	f00c fbfb 	bl	800fa10 <memset>
  if(hfdcan->Instance==FDCAN2)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a1f      	ldr	r2, [pc, #124]	@ (800329c <HAL_FDCAN_MspInit+0xa8>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d137      	bne.n	8003294 <HAL_FDCAN_MspInit+0xa0>

  /* USER CODE END FDCAN2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8003224:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003228:	617b      	str	r3, [r7, #20]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 800322a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800322e:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003230:	f107 0314 	add.w	r3, r7, #20
 8003234:	4618      	mov	r0, r3
 8003236:	f003 fc4d 	bl	8006ad4 <HAL_RCCEx_PeriphCLKConfig>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d001      	beq.n	8003244 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8003240:	f7ff ffa8 	bl	8003194 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8003244:	4b16      	ldr	r3, [pc, #88]	@ (80032a0 <HAL_FDCAN_MspInit+0xac>)
 8003246:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003248:	4a15      	ldr	r2, [pc, #84]	@ (80032a0 <HAL_FDCAN_MspInit+0xac>)
 800324a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800324e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003250:	4b13      	ldr	r3, [pc, #76]	@ (80032a0 <HAL_FDCAN_MspInit+0xac>)
 8003252:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003254:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003258:	613b      	str	r3, [r7, #16]
 800325a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800325c:	4b10      	ldr	r3, [pc, #64]	@ (80032a0 <HAL_FDCAN_MspInit+0xac>)
 800325e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003260:	4a0f      	ldr	r2, [pc, #60]	@ (80032a0 <HAL_FDCAN_MspInit+0xac>)
 8003262:	f043 0302 	orr.w	r3, r3, #2
 8003266:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003268:	4b0d      	ldr	r3, [pc, #52]	@ (80032a0 <HAL_FDCAN_MspInit+0xac>)
 800326a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800326c:	f003 0302 	and.w	r3, r3, #2
 8003270:	60fb      	str	r3, [r7, #12]
 8003272:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN2 GPIO Configuration
    PB5     ------> FDCAN2_RX
    PB6     ------> FDCAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8003274:	2360      	movs	r3, #96	@ 0x60
 8003276:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003278:	2302      	movs	r3, #2
 800327a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800327c:	2300      	movs	r3, #0
 800327e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003280:	2300      	movs	r3, #0
 8003282:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8003284:	2309      	movs	r3, #9
 8003286:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003288:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800328c:	4619      	mov	r1, r3
 800328e:	4805      	ldr	r0, [pc, #20]	@ (80032a4 <HAL_FDCAN_MspInit+0xb0>)
 8003290:	f000 ff6c 	bl	800416c <HAL_GPIO_Init>

  /* USER CODE END FDCAN2_MspInit 1 */

  }

}
 8003294:	bf00      	nop
 8003296:	3778      	adds	r7, #120	@ 0x78
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}
 800329c:	40006800 	.word	0x40006800
 80032a0:	40021000 	.word	0x40021000
 80032a4:	48000400 	.word	0x48000400

080032a8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b08a      	sub	sp, #40	@ 0x28
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032b0:	f107 0314 	add.w	r3, r7, #20
 80032b4:	2200      	movs	r2, #0
 80032b6:	601a      	str	r2, [r3, #0]
 80032b8:	605a      	str	r2, [r3, #4]
 80032ba:	609a      	str	r2, [r3, #8]
 80032bc:	60da      	str	r2, [r3, #12]
 80032be:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a17      	ldr	r2, [pc, #92]	@ (8003324 <HAL_SPI_MspInit+0x7c>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d128      	bne.n	800331c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80032ca:	4b17      	ldr	r3, [pc, #92]	@ (8003328 <HAL_SPI_MspInit+0x80>)
 80032cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032ce:	4a16      	ldr	r2, [pc, #88]	@ (8003328 <HAL_SPI_MspInit+0x80>)
 80032d0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80032d4:	6613      	str	r3, [r2, #96]	@ 0x60
 80032d6:	4b14      	ldr	r3, [pc, #80]	@ (8003328 <HAL_SPI_MspInit+0x80>)
 80032d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032da:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80032de:	613b      	str	r3, [r7, #16]
 80032e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032e2:	4b11      	ldr	r3, [pc, #68]	@ (8003328 <HAL_SPI_MspInit+0x80>)
 80032e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032e6:	4a10      	ldr	r2, [pc, #64]	@ (8003328 <HAL_SPI_MspInit+0x80>)
 80032e8:	f043 0301 	orr.w	r3, r3, #1
 80032ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80032ee:	4b0e      	ldr	r3, [pc, #56]	@ (8003328 <HAL_SPI_MspInit+0x80>)
 80032f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032f2:	f003 0301 	and.w	r3, r3, #1
 80032f6:	60fb      	str	r3, [r7, #12]
 80032f8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80032fa:	23e0      	movs	r3, #224	@ 0xe0
 80032fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032fe:	2302      	movs	r3, #2
 8003300:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003302:	2300      	movs	r3, #0
 8003304:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003306:	2300      	movs	r3, #0
 8003308:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800330a:	2305      	movs	r3, #5
 800330c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800330e:	f107 0314 	add.w	r3, r7, #20
 8003312:	4619      	mov	r1, r3
 8003314:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003318:	f000 ff28 	bl	800416c <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800331c:	bf00      	nop
 800331e:	3728      	adds	r7, #40	@ 0x28
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}
 8003324:	40013000 	.word	0x40013000
 8003328:	40021000 	.word	0x40021000

0800332c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b08c      	sub	sp, #48	@ 0x30
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003334:	2300      	movs	r3, #0
 8003336:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8003338:	2300      	movs	r3, #0
 800333a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800333c:	4b2c      	ldr	r3, [pc, #176]	@ (80033f0 <HAL_InitTick+0xc4>)
 800333e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003340:	4a2b      	ldr	r2, [pc, #172]	@ (80033f0 <HAL_InitTick+0xc4>)
 8003342:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003346:	6613      	str	r3, [r2, #96]	@ 0x60
 8003348:	4b29      	ldr	r3, [pc, #164]	@ (80033f0 <HAL_InitTick+0xc4>)
 800334a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800334c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003350:	60bb      	str	r3, [r7, #8]
 8003352:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003354:	f107 020c 	add.w	r2, r7, #12
 8003358:	f107 0310 	add.w	r3, r7, #16
 800335c:	4611      	mov	r1, r2
 800335e:	4618      	mov	r0, r3
 8003360:	f003 fb40 	bl	80069e4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8003364:	f003 fb28 	bl	80069b8 <HAL_RCC_GetPCLK2Freq>
 8003368:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800336a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800336c:	4a21      	ldr	r2, [pc, #132]	@ (80033f4 <HAL_InitTick+0xc8>)
 800336e:	fba2 2303 	umull	r2, r3, r2, r3
 8003372:	0c9b      	lsrs	r3, r3, #18
 8003374:	3b01      	subs	r3, #1
 8003376:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8003378:	4b1f      	ldr	r3, [pc, #124]	@ (80033f8 <HAL_InitTick+0xcc>)
 800337a:	4a20      	ldr	r2, [pc, #128]	@ (80033fc <HAL_InitTick+0xd0>)
 800337c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800337e:	4b1e      	ldr	r3, [pc, #120]	@ (80033f8 <HAL_InitTick+0xcc>)
 8003380:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003384:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8003386:	4a1c      	ldr	r2, [pc, #112]	@ (80033f8 <HAL_InitTick+0xcc>)
 8003388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800338a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800338c:	4b1a      	ldr	r3, [pc, #104]	@ (80033f8 <HAL_InitTick+0xcc>)
 800338e:	2200      	movs	r2, #0
 8003390:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003392:	4b19      	ldr	r3, [pc, #100]	@ (80033f8 <HAL_InitTick+0xcc>)
 8003394:	2200      	movs	r2, #0
 8003396:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 8003398:	4817      	ldr	r0, [pc, #92]	@ (80033f8 <HAL_InitTick+0xcc>)
 800339a:	f004 fd0b 	bl	8007db4 <HAL_TIM_Base_Init>
 800339e:	4603      	mov	r3, r0
 80033a0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80033a4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d11b      	bne.n	80033e4 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80033ac:	4812      	ldr	r0, [pc, #72]	@ (80033f8 <HAL_InitTick+0xcc>)
 80033ae:	f004 fd63 	bl	8007e78 <HAL_TIM_Base_Start_IT>
 80033b2:	4603      	mov	r3, r0
 80033b4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80033b8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d111      	bne.n	80033e4 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80033c0:	2019      	movs	r0, #25
 80033c2:	f000 fd09 	bl	8003dd8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2b0f      	cmp	r3, #15
 80033ca:	d808      	bhi.n	80033de <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 80033cc:	2200      	movs	r2, #0
 80033ce:	6879      	ldr	r1, [r7, #4]
 80033d0:	2019      	movs	r0, #25
 80033d2:	f000 fce7 	bl	8003da4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80033d6:	4a0a      	ldr	r2, [pc, #40]	@ (8003400 <HAL_InitTick+0xd4>)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6013      	str	r3, [r2, #0]
 80033dc:	e002      	b.n	80033e4 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80033e4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3730      	adds	r7, #48	@ 0x30
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}
 80033f0:	40021000 	.word	0x40021000
 80033f4:	431bde83 	.word	0x431bde83
 80033f8:	2000486c 	.word	0x2000486c
 80033fc:	40012c00 	.word	0x40012c00
 8003400:	20000024 	.word	0x20000024

08003404 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003404:	b480      	push	{r7}
 8003406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003408:	bf00      	nop
 800340a:	e7fd      	b.n	8003408 <NMI_Handler+0x4>

0800340c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800340c:	b480      	push	{r7}
 800340e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003410:	bf00      	nop
 8003412:	e7fd      	b.n	8003410 <HardFault_Handler+0x4>

08003414 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003414:	b480      	push	{r7}
 8003416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003418:	bf00      	nop
 800341a:	e7fd      	b.n	8003418 <MemManage_Handler+0x4>

0800341c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800341c:	b480      	push	{r7}
 800341e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003420:	bf00      	nop
 8003422:	e7fd      	b.n	8003420 <BusFault_Handler+0x4>

08003424 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003424:	b480      	push	{r7}
 8003426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003428:	bf00      	nop
 800342a:	e7fd      	b.n	8003428 <UsageFault_Handler+0x4>

0800342c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800342c:	b480      	push	{r7}
 800342e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003430:	bf00      	nop
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr
	...

0800343c <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8003440:	4802      	ldr	r0, [pc, #8]	@ (800344c <USB_LP_IRQHandler+0x10>)
 8003442:	f001 f937 	bl	80046b4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8003446:	bf00      	nop
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	2001657c 	.word	0x2001657c

08003450 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003454:	4802      	ldr	r0, [pc, #8]	@ (8003460 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8003456:	f004 fd7f 	bl	8007f58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800345a:	bf00      	nop
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	2000486c 	.word	0x2000486c

08003464 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b086      	sub	sp, #24
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800346c:	4a14      	ldr	r2, [pc, #80]	@ (80034c0 <_sbrk+0x5c>)
 800346e:	4b15      	ldr	r3, [pc, #84]	@ (80034c4 <_sbrk+0x60>)
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003478:	4b13      	ldr	r3, [pc, #76]	@ (80034c8 <_sbrk+0x64>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d102      	bne.n	8003486 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003480:	4b11      	ldr	r3, [pc, #68]	@ (80034c8 <_sbrk+0x64>)
 8003482:	4a12      	ldr	r2, [pc, #72]	@ (80034cc <_sbrk+0x68>)
 8003484:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003486:	4b10      	ldr	r3, [pc, #64]	@ (80034c8 <_sbrk+0x64>)
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4413      	add	r3, r2
 800348e:	693a      	ldr	r2, [r7, #16]
 8003490:	429a      	cmp	r2, r3
 8003492:	d207      	bcs.n	80034a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003494:	f00c fb1a 	bl	800facc <__errno>
 8003498:	4603      	mov	r3, r0
 800349a:	220c      	movs	r2, #12
 800349c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800349e:	f04f 33ff 	mov.w	r3, #4294967295
 80034a2:	e009      	b.n	80034b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80034a4:	4b08      	ldr	r3, [pc, #32]	@ (80034c8 <_sbrk+0x64>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80034aa:	4b07      	ldr	r3, [pc, #28]	@ (80034c8 <_sbrk+0x64>)
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	4413      	add	r3, r2
 80034b2:	4a05      	ldr	r2, [pc, #20]	@ (80034c8 <_sbrk+0x64>)
 80034b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80034b6:	68fb      	ldr	r3, [r7, #12]
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	3718      	adds	r7, #24
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}
 80034c0:	2001c000 	.word	0x2001c000
 80034c4:	00000400 	.word	0x00000400
 80034c8:	200048b8 	.word	0x200048b8
 80034cc:	20016bc0 	.word	0x20016bc0

080034d0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80034d0:	b480      	push	{r7}
 80034d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80034d4:	4b06      	ldr	r3, [pc, #24]	@ (80034f0 <SystemInit+0x20>)
 80034d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034da:	4a05      	ldr	r2, [pc, #20]	@ (80034f0 <SystemInit+0x20>)
 80034dc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80034e0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80034e4:	bf00      	nop
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr
 80034ee:	bf00      	nop
 80034f0:	e000ed00 	.word	0xe000ed00

080034f4 <AvgHistory_Init>:
#include "util/avghistory.h"

#define MIN(a, b) (((a) < (b)) ? (a) : (b))

void AvgHistory_Init(AvgHistory *ah) {
 80034f4:	b480      	push	{r7}
 80034f6:	b085      	sub	sp, #20
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
    // Initialize history to zeros.
    for (size_t i = 0; i < AVG_HISTORY_LENGTH; i++) {
 80034fc:	2300      	movs	r3, #0
 80034fe:	60fb      	str	r3, [r7, #12]
 8003500:	e009      	b.n	8003516 <AvgHistory_Init+0x22>
        ah->avg_history[i] = 0.0f;
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	4413      	add	r3, r2
 800350a:	f04f 0200 	mov.w	r2, #0
 800350e:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < AVG_HISTORY_LENGTH; i++) {
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	3301      	adds	r3, #1
 8003514:	60fb      	str	r3, [r7, #12]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2b02      	cmp	r3, #2
 800351a:	d9f2      	bls.n	8003502 <AvgHistory_Init+0xe>
    }
    ah->hist_len = 0;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	731a      	strb	r2, [r3, #12]
    ah->count = 0;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	735a      	strb	r2, [r3, #13]
}
 8003528:	bf00      	nop
 800352a:	3714      	adds	r7, #20
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr

08003534 <AvgHistory_Add>:

void AvgHistory_Add(AvgHistory *ah, float reading) {
 8003534:	b480      	push	{r7}
 8003536:	b085      	sub	sp, #20
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	ed87 0a00 	vstr	s0, [r7]
    // If the number of samples in the current average is more than the threshold,
    // shift the history, commit the average, and reset the count.
    if (ah->count > AVG_HISTORY_SAMPLES) {
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	7b5b      	ldrb	r3, [r3, #13]
 8003544:	2b0a      	cmp	r3, #10
 8003546:	d920      	bls.n	800358a <AvgHistory_Add+0x56>
        for (int i = AVG_HISTORY_LENGTH - 1; i > 0; i--) {
 8003548:	2302      	movs	r3, #2
 800354a:	60fb      	str	r3, [r7, #12]
 800354c:	e00d      	b.n	800356a <AvgHistory_Add+0x36>
            ah->avg_history[i] = ah->avg_history[i - 1];
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	3b01      	subs	r3, #1
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	009b      	lsls	r3, r3, #2
 8003556:	4413      	add	r3, r2
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	6879      	ldr	r1, [r7, #4]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	440b      	add	r3, r1
 8003562:	601a      	str	r2, [r3, #0]
        for (int i = AVG_HISTORY_LENGTH - 1; i > 0; i--) {
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	3b01      	subs	r3, #1
 8003568:	60fb      	str	r3, [r7, #12]
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2b00      	cmp	r3, #0
 800356e:	dcee      	bgt.n	800354e <AvgHistory_Add+0x1a>
        }
        ah->count = 1;  // Reset count; we start a new average with the current reading.
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2201      	movs	r2, #1
 8003574:	735a      	strb	r2, [r3, #13]
        ah->hist_len = MIN(AVG_HISTORY_LENGTH - 1, ah->hist_len + 1);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	7b1b      	ldrb	r3, [r3, #12]
 800357a:	2b01      	cmp	r3, #1
 800357c:	bf28      	it	cs
 800357e:	2301      	movcs	r3, #1
 8003580:	b2db      	uxtb	r3, r3
 8003582:	3301      	adds	r3, #1
 8003584:	b2da      	uxtb	r2, r3
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	731a      	strb	r2, [r3, #12]
    }
    // Update the running average stored in avg_history[0]:
    // new_average = (current_average * count + new_reading) / (count + 1)
    ah->avg_history[0] = (ah->avg_history[0] * ah->count + reading) / (ah->count + 1);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	ed93 7a00 	vldr	s14, [r3]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	7b5b      	ldrb	r3, [r3, #13]
 8003594:	ee07 3a90 	vmov	s15, r3
 8003598:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800359c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80035a0:	edd7 7a00 	vldr	s15, [r7]
 80035a4:	ee77 6a27 	vadd.f32	s13, s14, s15
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	7b5b      	ldrb	r3, [r3, #13]
 80035ac:	3301      	adds	r3, #1
 80035ae:	ee07 3a90 	vmov	s15, r3
 80035b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80035b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	edc3 7a00 	vstr	s15, [r3]
    ah->count++;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	7b5b      	ldrb	r3, [r3, #13]
 80035c4:	3301      	adds	r3, #1
 80035c6:	b2da      	uxtb	r2, r3
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	735a      	strb	r2, [r3, #13]
}
 80035cc:	bf00      	nop
 80035ce:	3714      	adds	r7, #20
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr

080035d8 <AvgHistory_Full>:

int AvgHistory_Full(AvgHistory *ah) {
 80035d8:	b480      	push	{r7}
 80035da:	b083      	sub	sp, #12
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
    // Consider the history full if we have at least (AVG_HISTORY_LENGTH-1) committed averages.
    return (ah->hist_len >= (AVG_HISTORY_LENGTH - 1));
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	7b1b      	ldrb	r3, [r3, #12]
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	bf8c      	ite	hi
 80035e8:	2301      	movhi	r3, #1
 80035ea:	2300      	movls	r3, #0
 80035ec:	b2db      	uxtb	r3, r3
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	370c      	adds	r7, #12
 80035f2:	46bd      	mov	sp, r7
 80035f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f8:	4770      	bx	lr

080035fa <AvgHistory_OldAvg>:

float AvgHistory_OldAvg(AvgHistory *ah) {
 80035fa:	b480      	push	{r7}
 80035fc:	b083      	sub	sp, #12
 80035fe:	af00      	add	r7, sp, #0
 8003600:	6078      	str	r0, [r7, #4]
    // Returns the oldest committed average in the history.
    return ah->avg_history[AVG_HISTORY_LENGTH - 1];
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	ee07 3a90 	vmov	s15, r3
}
 800360a:	eeb0 0a67 	vmov.f32	s0, s15
 800360e:	370c      	adds	r7, #12
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr

08003618 <matrix_multiply>:
#include "util/matrix.h"

void matrix_multiply(const mfloat_t* A, const mfloat_t* B, mfloat_t* C,
                     size_t m, size_t n, size_t p)
{
 8003618:	b480      	push	{r7}
 800361a:	b089      	sub	sp, #36	@ 0x24
 800361c:	af00      	add	r7, sp, #0
 800361e:	60f8      	str	r0, [r7, #12]
 8003620:	60b9      	str	r1, [r7, #8]
 8003622:	607a      	str	r2, [r7, #4]
 8003624:	603b      	str	r3, [r7, #0]
    for (size_t i = 0; i < m; i++) {
 8003626:	2300      	movs	r3, #0
 8003628:	61fb      	str	r3, [r7, #28]
 800362a:	e052      	b.n	80036d2 <matrix_multiply+0xba>
        for (size_t j = 0; j < p; j++) {
 800362c:	2300      	movs	r3, #0
 800362e:	61bb      	str	r3, [r7, #24]
 8003630:	e048      	b.n	80036c4 <matrix_multiply+0xac>
            C[i * p + j] = 0;
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003636:	fb03 f202 	mul.w	r2, r3, r2
 800363a:	69bb      	ldr	r3, [r7, #24]
 800363c:	4413      	add	r3, r2
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	687a      	ldr	r2, [r7, #4]
 8003642:	4413      	add	r3, r2
 8003644:	f04f 0200 	mov.w	r2, #0
 8003648:	601a      	str	r2, [r3, #0]
            for (size_t k = 0; k < n; k++) {
 800364a:	2300      	movs	r3, #0
 800364c:	617b      	str	r3, [r7, #20]
 800364e:	e032      	b.n	80036b6 <matrix_multiply+0x9e>
                C[i * p + j] += A[i * n + k] * B[k * p + j];
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003654:	fb03 f202 	mul.w	r2, r3, r2
 8003658:	69bb      	ldr	r3, [r7, #24]
 800365a:	4413      	add	r3, r2
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	4413      	add	r3, r2
 8003662:	ed93 7a00 	vldr	s14, [r3]
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800366a:	fb03 f202 	mul.w	r2, r3, r2
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	4413      	add	r3, r2
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	68fa      	ldr	r2, [r7, #12]
 8003676:	4413      	add	r3, r2
 8003678:	edd3 6a00 	vldr	s13, [r3]
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003680:	fb03 f202 	mul.w	r2, r3, r2
 8003684:	69bb      	ldr	r3, [r7, #24]
 8003686:	4413      	add	r3, r2
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	68ba      	ldr	r2, [r7, #8]
 800368c:	4413      	add	r3, r2
 800368e:	edd3 7a00 	vldr	s15, [r3]
 8003692:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003696:	69fb      	ldr	r3, [r7, #28]
 8003698:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800369a:	fb03 f202 	mul.w	r2, r3, r2
 800369e:	69bb      	ldr	r3, [r7, #24]
 80036a0:	4413      	add	r3, r2
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	687a      	ldr	r2, [r7, #4]
 80036a6:	4413      	add	r3, r2
 80036a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036ac:	edc3 7a00 	vstr	s15, [r3]
            for (size_t k = 0; k < n; k++) {
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	3301      	adds	r3, #1
 80036b4:	617b      	str	r3, [r7, #20]
 80036b6:	697a      	ldr	r2, [r7, #20]
 80036b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d3c8      	bcc.n	8003650 <matrix_multiply+0x38>
        for (size_t j = 0; j < p; j++) {
 80036be:	69bb      	ldr	r3, [r7, #24]
 80036c0:	3301      	adds	r3, #1
 80036c2:	61bb      	str	r3, [r7, #24]
 80036c4:	69ba      	ldr	r2, [r7, #24]
 80036c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d3b2      	bcc.n	8003632 <matrix_multiply+0x1a>
    for (size_t i = 0; i < m; i++) {
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	3301      	adds	r3, #1
 80036d0:	61fb      	str	r3, [r7, #28]
 80036d2:	69fa      	ldr	r2, [r7, #28]
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d3a8      	bcc.n	800362c <matrix_multiply+0x14>
            }
        }
    }
}
 80036da:	bf00      	nop
 80036dc:	bf00      	nop
 80036de:	3724      	adds	r7, #36	@ 0x24
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr

080036e8 <matrix_transpose>:
    }
}

void matrix_transpose(const mfloat_t* A, mfloat_t* T,
                      size_t m, size_t n)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b087      	sub	sp, #28
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	60f8      	str	r0, [r7, #12]
 80036f0:	60b9      	str	r1, [r7, #8]
 80036f2:	607a      	str	r2, [r7, #4]
 80036f4:	603b      	str	r3, [r7, #0]
    for (size_t i = 0; i < m; i++) {
 80036f6:	2300      	movs	r3, #0
 80036f8:	617b      	str	r3, [r7, #20]
 80036fa:	e020      	b.n	800373e <matrix_transpose+0x56>
        for (size_t j = 0; j < n; j++) {
 80036fc:	2300      	movs	r3, #0
 80036fe:	613b      	str	r3, [r7, #16]
 8003700:	e016      	b.n	8003730 <matrix_transpose+0x48>
            T[j * m + i] = A[i * n + j];
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	683a      	ldr	r2, [r7, #0]
 8003706:	fb03 f202 	mul.w	r2, r3, r2
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	4413      	add	r3, r2
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	68fa      	ldr	r2, [r7, #12]
 8003712:	441a      	add	r2, r3
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	6879      	ldr	r1, [r7, #4]
 8003718:	fb03 f101 	mul.w	r1, r3, r1
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	440b      	add	r3, r1
 8003720:	009b      	lsls	r3, r3, #2
 8003722:	68b9      	ldr	r1, [r7, #8]
 8003724:	440b      	add	r3, r1
 8003726:	6812      	ldr	r2, [r2, #0]
 8003728:	601a      	str	r2, [r3, #0]
        for (size_t j = 0; j < n; j++) {
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	3301      	adds	r3, #1
 800372e:	613b      	str	r3, [r7, #16]
 8003730:	693a      	ldr	r2, [r7, #16]
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	429a      	cmp	r2, r3
 8003736:	d3e4      	bcc.n	8003702 <matrix_transpose+0x1a>
    for (size_t i = 0; i < m; i++) {
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	3301      	adds	r3, #1
 800373c:	617b      	str	r3, [r7, #20]
 800373e:	697a      	ldr	r2, [r7, #20]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	429a      	cmp	r2, r3
 8003744:	d3da      	bcc.n	80036fc <matrix_transpose+0x14>
        }
    }
}
 8003746:	bf00      	nop
 8003748:	bf00      	nop
 800374a:	371c      	adds	r7, #28
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr

08003754 <matrix_norm_sq>:

mfloat_t matrix_norm_sq(const mfloat_t* A, size_t m, size_t n)
{
 8003754:	b480      	push	{r7}
 8003756:	b087      	sub	sp, #28
 8003758:	af00      	add	r7, sp, #0
 800375a:	60f8      	str	r0, [r7, #12]
 800375c:	60b9      	str	r1, [r7, #8]
 800375e:	607a      	str	r2, [r7, #4]
    mfloat_t sum = 0;
 8003760:	f04f 0300 	mov.w	r3, #0
 8003764:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < m * n; i++) {
 8003766:	2300      	movs	r3, #0
 8003768:	613b      	str	r3, [r7, #16]
 800376a:	e016      	b.n	800379a <matrix_norm_sq+0x46>
        sum += A[i] * A[i];
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	68fa      	ldr	r2, [r7, #12]
 8003772:	4413      	add	r3, r2
 8003774:	ed93 7a00 	vldr	s14, [r3]
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	68fa      	ldr	r2, [r7, #12]
 800377e:	4413      	add	r3, r2
 8003780:	edd3 7a00 	vldr	s15, [r3]
 8003784:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003788:	ed97 7a05 	vldr	s14, [r7, #20]
 800378c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003790:	edc7 7a05 	vstr	s15, [r7, #20]
    for (size_t i = 0; i < m * n; i++) {
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	3301      	adds	r3, #1
 8003798:	613b      	str	r3, [r7, #16]
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	fb02 f303 	mul.w	r3, r2, r3
 80037a2:	693a      	ldr	r2, [r7, #16]
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d3e1      	bcc.n	800376c <matrix_norm_sq+0x18>
    }
    return sum;
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	ee07 3a90 	vmov	s15, r3
}
 80037ae:	eeb0 0a67 	vmov.f32	s0, s15
 80037b2:	371c      	adds	r7, #28
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr

080037bc <wrapping_add>:
#include "util/ring_buffer.h"
#include <string.h>

static inline size_t wrapping_add(size_t val, size_t increment, size_t max) {
 80037bc:	b480      	push	{r7}
 80037be:	b085      	sub	sp, #20
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	60f8      	str	r0, [r7, #12]
 80037c4:	60b9      	str	r1, [r7, #8]
 80037c6:	607a      	str	r2, [r7, #4]
    return (val + increment) % max;
 80037c8:	68fa      	ldr	r2, [r7, #12]
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	4413      	add	r3, r2
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	fbb3 f2f2 	udiv	r2, r3, r2
 80037d4:	6879      	ldr	r1, [r7, #4]
 80037d6:	fb01 f202 	mul.w	r2, r1, r2
 80037da:	1a9b      	subs	r3, r3, r2
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3714      	adds	r7, #20
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr

080037e8 <ring_buffer_init>:

void ring_buffer_init(RingBuffer *rb, void *buffer, size_t capacity, size_t elem_size) {
 80037e8:	b480      	push	{r7}
 80037ea:	b085      	sub	sp, #20
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	60f8      	str	r0, [r7, #12]
 80037f0:	60b9      	str	r1, [r7, #8]
 80037f2:	607a      	str	r2, [r7, #4]
 80037f4:	603b      	str	r3, [r7, #0]
    rb->head = 0;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2200      	movs	r2, #0
 80037fa:	601a      	str	r2, [r3, #0]
    rb->tail = 0;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2200      	movs	r2, #0
 8003800:	605a      	str	r2, [r3, #4]
    rb->size = 0;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2200      	movs	r2, #0
 8003806:	609a      	str	r2, [r3, #8]
    rb->capacity = capacity;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	60da      	str	r2, [r3, #12]
    rb->elem_size = elem_size;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	683a      	ldr	r2, [r7, #0]
 8003812:	611a      	str	r2, [r3, #16]
    rb->buf = (uint8_t *)buffer;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	68ba      	ldr	r2, [r7, #8]
 8003818:	615a      	str	r2, [r3, #20]
}
 800381a:	bf00      	nop
 800381c:	3714      	adds	r7, #20
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr

08003826 <ring_buffer_push>:

bool ring_buffer_push(RingBuffer *rb, const void *val, bool overwrite) {
 8003826:	b580      	push	{r7, lr}
 8003828:	b084      	sub	sp, #16
 800382a:	af00      	add	r7, sp, #0
 800382c:	60f8      	str	r0, [r7, #12]
 800382e:	60b9      	str	r1, [r7, #8]
 8003830:	4613      	mov	r3, r2
 8003832:	71fb      	strb	r3, [r7, #7]
    if (rb->size == rb->capacity && !overwrite) {
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	689a      	ldr	r2, [r3, #8]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	429a      	cmp	r2, r3
 800383e:	d107      	bne.n	8003850 <ring_buffer_push+0x2a>
 8003840:	79fb      	ldrb	r3, [r7, #7]
 8003842:	f083 0301 	eor.w	r3, r3, #1
 8003846:	b2db      	uxtb	r3, r3
 8003848:	2b00      	cmp	r3, #0
 800384a:	d001      	beq.n	8003850 <ring_buffer_push+0x2a>
        return false;
 800384c:	2300      	movs	r3, #0
 800384e:	e032      	b.n	80038b6 <ring_buffer_push+0x90>
    }
    /* Copy the new element into the tail position */
    memcpy(rb->buf + rb->tail * rb->elem_size, val, rb->elem_size);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	695a      	ldr	r2, [r3, #20]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	68f9      	ldr	r1, [r7, #12]
 800385a:	6909      	ldr	r1, [r1, #16]
 800385c:	fb01 f303 	mul.w	r3, r1, r3
 8003860:	18d0      	adds	r0, r2, r3
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	691b      	ldr	r3, [r3, #16]
 8003866:	461a      	mov	r2, r3
 8003868:	68b9      	ldr	r1, [r7, #8]
 800386a:	f00c f95b 	bl	800fb24 <memcpy>
    rb->tail = wrapping_add(rb->tail, 1, rb->capacity);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	6858      	ldr	r0, [r3, #4]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	68db      	ldr	r3, [r3, #12]
 8003876:	461a      	mov	r2, r3
 8003878:	2101      	movs	r1, #1
 800387a:	f7ff ff9f 	bl	80037bc <wrapping_add>
 800387e:	4602      	mov	r2, r0
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	605a      	str	r2, [r3, #4]
    if (rb->size < rb->capacity) {
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	689a      	ldr	r2, [r3, #8]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	429a      	cmp	r2, r3
 800388e:	d206      	bcs.n	800389e <ring_buffer_push+0x78>
        rb->size++;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	1c5a      	adds	r2, r3, #1
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	609a      	str	r2, [r3, #8]
        return true;
 800389a:	2301      	movs	r3, #1
 800389c:	e00b      	b.n	80038b6 <ring_buffer_push+0x90>
    } else {
        /* Buffer was full; overwrite the oldest data */
        rb->head = wrapping_add(rb->head, 1, rb->capacity);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	6818      	ldr	r0, [r3, #0]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	68db      	ldr	r3, [r3, #12]
 80038a6:	461a      	mov	r2, r3
 80038a8:	2101      	movs	r1, #1
 80038aa:	f7ff ff87 	bl	80037bc <wrapping_add>
 80038ae:	4602      	mov	r2, r0
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	601a      	str	r2, [r3, #0]
        return false;
 80038b4:	2300      	movs	r3, #0
    }
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3710      	adds	r7, #16
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}

080038be <ring_buffer_pop>:

bool ring_buffer_pop(RingBuffer *rb, void *val) {
 80038be:	b580      	push	{r7, lr}
 80038c0:	b082      	sub	sp, #8
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	6078      	str	r0, [r7, #4]
 80038c6:	6039      	str	r1, [r7, #0]
    if (rb->size == 0) {
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d101      	bne.n	80038d4 <ring_buffer_pop+0x16>
        return false;
 80038d0:	2300      	movs	r3, #0
 80038d2:	e01f      	b.n	8003914 <ring_buffer_pop+0x56>
    }
    memcpy(val, rb->buf + rb->head * rb->elem_size, rb->elem_size);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	695a      	ldr	r2, [r3, #20]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	6879      	ldr	r1, [r7, #4]
 80038de:	6909      	ldr	r1, [r1, #16]
 80038e0:	fb01 f303 	mul.w	r3, r1, r3
 80038e4:	18d1      	adds	r1, r2, r3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	691b      	ldr	r3, [r3, #16]
 80038ea:	461a      	mov	r2, r3
 80038ec:	6838      	ldr	r0, [r7, #0]
 80038ee:	f00c f919 	bl	800fb24 <memcpy>
    rb->head = wrapping_add(rb->head, 1, rb->capacity);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6818      	ldr	r0, [r3, #0]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	68db      	ldr	r3, [r3, #12]
 80038fa:	461a      	mov	r2, r3
 80038fc:	2101      	movs	r1, #1
 80038fe:	f7ff ff5d 	bl	80037bc <wrapping_add>
 8003902:	4602      	mov	r2, r0
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	601a      	str	r2, [r3, #0]
    rb->size--;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	1e5a      	subs	r2, r3, #1
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	609a      	str	r2, [r3, #8]
    return true;
 8003912:	2301      	movs	r3, #1
}
 8003914:	4618      	mov	r0, r3
 8003916:	3708      	adds	r7, #8
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}

0800391c <ring_buffer_push_array>:

bool ring_buffer_push_array(RingBuffer *rb, const void *data, size_t count, bool overwrite) {
 800391c:	b580      	push	{r7, lr}
 800391e:	b088      	sub	sp, #32
 8003920:	af00      	add	r7, sp, #0
 8003922:	60f8      	str	r0, [r7, #12]
 8003924:	60b9      	str	r1, [r7, #8]
 8003926:	607a      	str	r2, [r7, #4]
 8003928:	70fb      	strb	r3, [r7, #3]
    if (rb->size + count > rb->capacity && !overwrite) {
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	689a      	ldr	r2, [r3, #8]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	441a      	add	r2, r3
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	429a      	cmp	r2, r3
 8003938:	d907      	bls.n	800394a <ring_buffer_push_array+0x2e>
 800393a:	78fb      	ldrb	r3, [r7, #3]
 800393c:	f083 0301 	eor.w	r3, r3, #1
 8003940:	b2db      	uxtb	r3, r3
 8003942:	2b00      	cmp	r3, #0
 8003944:	d001      	beq.n	800394a <ring_buffer_push_array+0x2e>
        return false;
 8003946:	2300      	movs	r3, #0
 8003948:	e083      	b.n	8003a52 <ring_buffer_push_array+0x136>
    }
    /* If trying to push more items than capacity, only keep the last ones */
    if (count > rb->capacity) {
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	68db      	ldr	r3, [r3, #12]
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	429a      	cmp	r2, r3
 8003952:	d90d      	bls.n	8003970 <ring_buffer_push_array+0x54>
        data = (const uint8_t *)data + (count - rb->capacity) * rb->elem_size;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	1ad3      	subs	r3, r2, r3
 800395c:	68fa      	ldr	r2, [r7, #12]
 800395e:	6912      	ldr	r2, [r2, #16]
 8003960:	fb02 f303 	mul.w	r3, r2, r3
 8003964:	68ba      	ldr	r2, [r7, #8]
 8003966:	4413      	add	r3, r2
 8003968:	60bb      	str	r3, [r7, #8]
        count = rb->capacity;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	68db      	ldr	r3, [r3, #12]
 800396e:	607b      	str	r3, [r7, #4]
    }
    size_t tail = rb->tail;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	61fb      	str	r3, [r7, #28]
    /* Check if the new data wraps around the end of the buffer */
    if (tail + count > rb->capacity) {
 8003976:	69fa      	ldr	r2, [r7, #28]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	441a      	add	r2, r3
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	429a      	cmp	r2, r3
 8003982:	d92b      	bls.n	80039dc <ring_buffer_push_array+0xc0>
        size_t count_to_end = rb->capacity - tail;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	68da      	ldr	r2, [r3, #12]
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	1ad3      	subs	r3, r2, r3
 800398c:	61bb      	str	r3, [r7, #24]
        size_t remainder = count - count_to_end;
 800398e:	687a      	ldr	r2, [r7, #4]
 8003990:	69bb      	ldr	r3, [r7, #24]
 8003992:	1ad3      	subs	r3, r2, r3
 8003994:	617b      	str	r3, [r7, #20]
        memcpy(rb->buf + tail * rb->elem_size, data, count_to_end * rb->elem_size);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	695a      	ldr	r2, [r3, #20]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	691b      	ldr	r3, [r3, #16]
 800399e:	69f9      	ldr	r1, [r7, #28]
 80039a0:	fb01 f303 	mul.w	r3, r1, r3
 80039a4:	18d0      	adds	r0, r2, r3
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	691b      	ldr	r3, [r3, #16]
 80039aa:	69ba      	ldr	r2, [r7, #24]
 80039ac:	fb02 f303 	mul.w	r3, r2, r3
 80039b0:	461a      	mov	r2, r3
 80039b2:	68b9      	ldr	r1, [r7, #8]
 80039b4:	f00c f8b6 	bl	800fb24 <memcpy>
        memcpy(rb->buf, (const uint8_t *)data + count_to_end * rb->elem_size, remainder * rb->elem_size);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	6958      	ldr	r0, [r3, #20]
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	691b      	ldr	r3, [r3, #16]
 80039c0:	69ba      	ldr	r2, [r7, #24]
 80039c2:	fb02 f303 	mul.w	r3, r2, r3
 80039c6:	68ba      	ldr	r2, [r7, #8]
 80039c8:	18d1      	adds	r1, r2, r3
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	691b      	ldr	r3, [r3, #16]
 80039ce:	697a      	ldr	r2, [r7, #20]
 80039d0:	fb02 f303 	mul.w	r3, r2, r3
 80039d4:	461a      	mov	r2, r3
 80039d6:	f00c f8a5 	bl	800fb24 <memcpy>
 80039da:	e010      	b.n	80039fe <ring_buffer_push_array+0xe2>
    } else {
        memcpy(rb->buf + tail * rb->elem_size, data, count * rb->elem_size);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	695a      	ldr	r2, [r3, #20]
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	691b      	ldr	r3, [r3, #16]
 80039e4:	69f9      	ldr	r1, [r7, #28]
 80039e6:	fb01 f303 	mul.w	r3, r1, r3
 80039ea:	18d0      	adds	r0, r2, r3
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	691b      	ldr	r3, [r3, #16]
 80039f0:	687a      	ldr	r2, [r7, #4]
 80039f2:	fb02 f303 	mul.w	r3, r2, r3
 80039f6:	461a      	mov	r2, r3
 80039f8:	68b9      	ldr	r1, [r7, #8]
 80039fa:	f00c f893 	bl	800fb24 <memcpy>
    }
    rb->tail = wrapping_add(rb->tail, count, rb->capacity);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	6858      	ldr	r0, [r3, #4]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	68db      	ldr	r3, [r3, #12]
 8003a06:	461a      	mov	r2, r3
 8003a08:	6879      	ldr	r1, [r7, #4]
 8003a0a:	f7ff fed7 	bl	80037bc <wrapping_add>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	605a      	str	r2, [r3, #4]
    if (rb->size + count > rb->capacity) {
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	689a      	ldr	r2, [r3, #8]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	441a      	add	r2, r3
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d903      	bls.n	8003a2c <ring_buffer_push_array+0x110>
        /* Advance head to tail if we have overwritten data */
        rb->head = rb->tail;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	685a      	ldr	r2, [r3, #4]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	601a      	str	r2, [r3, #0]
    }
    rb->size += count;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	689a      	ldr	r2, [r3, #8]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	441a      	add	r2, r3
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	609a      	str	r2, [r3, #8]
    if (rb->size > rb->capacity) {
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	689a      	ldr	r2, [r3, #8]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d905      	bls.n	8003a50 <ring_buffer_push_array+0x134>
        rb->size = rb->capacity;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	68da      	ldr	r2, [r3, #12]
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	609a      	str	r2, [r3, #8]
        return false;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	e000      	b.n	8003a52 <ring_buffer_push_array+0x136>
    }
    return true;
 8003a50:	2301      	movs	r3, #1
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3720      	adds	r7, #32
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}

08003a5a <ring_buffer_pop_array>:

bool ring_buffer_pop_array(RingBuffer *rb, void *data, size_t count) {
 8003a5a:	b580      	push	{r7, lr}
 8003a5c:	b088      	sub	sp, #32
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	60f8      	str	r0, [r7, #12]
 8003a62:	60b9      	str	r1, [r7, #8]
 8003a64:	607a      	str	r2, [r7, #4]
    if (rb->size < count) {
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d901      	bls.n	8003a74 <ring_buffer_pop_array+0x1a>
        return false;
 8003a70:	2300      	movs	r3, #0
 8003a72:	e058      	b.n	8003b26 <ring_buffer_pop_array+0xcc>
    }
    size_t head = rb->head;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	61fb      	str	r3, [r7, #28]
    /* Check for wrap-around */
    if (head + count > rb->capacity) {
 8003a7a:	69fa      	ldr	r2, [r7, #28]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	441a      	add	r2, r3
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d92b      	bls.n	8003ae0 <ring_buffer_pop_array+0x86>
        size_t count_to_end = rb->capacity - head;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	68da      	ldr	r2, [r3, #12]
 8003a8c:	69fb      	ldr	r3, [r7, #28]
 8003a8e:	1ad3      	subs	r3, r2, r3
 8003a90:	61bb      	str	r3, [r7, #24]
        size_t remainder = count - count_to_end;
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	69bb      	ldr	r3, [r7, #24]
 8003a96:	1ad3      	subs	r3, r2, r3
 8003a98:	617b      	str	r3, [r7, #20]
        memcpy(data, rb->buf + head * rb->elem_size, count_to_end * rb->elem_size);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	695a      	ldr	r2, [r3, #20]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	691b      	ldr	r3, [r3, #16]
 8003aa2:	69f9      	ldr	r1, [r7, #28]
 8003aa4:	fb01 f303 	mul.w	r3, r1, r3
 8003aa8:	18d1      	adds	r1, r2, r3
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	691b      	ldr	r3, [r3, #16]
 8003aae:	69ba      	ldr	r2, [r7, #24]
 8003ab0:	fb02 f303 	mul.w	r3, r2, r3
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	68b8      	ldr	r0, [r7, #8]
 8003ab8:	f00c f834 	bl	800fb24 <memcpy>
        memcpy((uint8_t *)data + count_to_end * rb->elem_size, rb->buf, remainder * rb->elem_size);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	691b      	ldr	r3, [r3, #16]
 8003ac0:	69ba      	ldr	r2, [r7, #24]
 8003ac2:	fb02 f303 	mul.w	r3, r2, r3
 8003ac6:	68ba      	ldr	r2, [r7, #8]
 8003ac8:	18d0      	adds	r0, r2, r3
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	6959      	ldr	r1, [r3, #20]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	691b      	ldr	r3, [r3, #16]
 8003ad2:	697a      	ldr	r2, [r7, #20]
 8003ad4:	fb02 f303 	mul.w	r3, r2, r3
 8003ad8:	461a      	mov	r2, r3
 8003ada:	f00c f823 	bl	800fb24 <memcpy>
 8003ade:	e010      	b.n	8003b02 <ring_buffer_pop_array+0xa8>
    } else {
        memcpy(data, rb->buf + head * rb->elem_size, count * rb->elem_size);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	695a      	ldr	r2, [r3, #20]
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	691b      	ldr	r3, [r3, #16]
 8003ae8:	69f9      	ldr	r1, [r7, #28]
 8003aea:	fb01 f303 	mul.w	r3, r1, r3
 8003aee:	18d1      	adds	r1, r2, r3
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	691b      	ldr	r3, [r3, #16]
 8003af4:	687a      	ldr	r2, [r7, #4]
 8003af6:	fb02 f303 	mul.w	r3, r2, r3
 8003afa:	461a      	mov	r2, r3
 8003afc:	68b8      	ldr	r0, [r7, #8]
 8003afe:	f00c f811 	bl	800fb24 <memcpy>
    }
    rb->head = wrapping_add(rb->head, count, rb->capacity);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	6818      	ldr	r0, [r3, #0]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	6879      	ldr	r1, [r7, #4]
 8003b0e:	f7ff fe55 	bl	80037bc <wrapping_add>
 8003b12:	4602      	mov	r2, r0
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	601a      	str	r2, [r3, #0]
    rb->size -= count;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	689a      	ldr	r2, [r3, #8]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	1ad2      	subs	r2, r2, r3
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	609a      	str	r2, [r3, #8]
    return true;
 8003b24:	2301      	movs	r3, #1
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3720      	adds	r7, #32
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}
	...

08003b30 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003b30:	480d      	ldr	r0, [pc, #52]	@ (8003b68 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003b32:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8003b34:	f7ff fccc 	bl	80034d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003b38:	480c      	ldr	r0, [pc, #48]	@ (8003b6c <LoopForever+0x6>)
  ldr r1, =_edata
 8003b3a:	490d      	ldr	r1, [pc, #52]	@ (8003b70 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003b3c:	4a0d      	ldr	r2, [pc, #52]	@ (8003b74 <LoopForever+0xe>)
  movs r3, #0
 8003b3e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003b40:	e002      	b.n	8003b48 <LoopCopyDataInit>

08003b42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003b42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003b44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003b46:	3304      	adds	r3, #4

08003b48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003b48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003b4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003b4c:	d3f9      	bcc.n	8003b42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003b4e:	4a0a      	ldr	r2, [pc, #40]	@ (8003b78 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003b50:	4c0a      	ldr	r4, [pc, #40]	@ (8003b7c <LoopForever+0x16>)
  movs r3, #0
 8003b52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003b54:	e001      	b.n	8003b5a <LoopFillZerobss>

08003b56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003b56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003b58:	3204      	adds	r2, #4

08003b5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003b5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003b5c:	d3fb      	bcc.n	8003b56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003b5e:	f00b ffbb 	bl	800fad8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003b62:	f7fe fde3 	bl	800272c <main>

08003b66 <LoopForever>:

LoopForever:
    b LoopForever
 8003b66:	e7fe      	b.n	8003b66 <LoopForever>
  ldr   r0, =_estack
 8003b68:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8003b6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003b70:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8003b74:	080115d4 	.word	0x080115d4
  ldr r2, =_sbss
 8003b78:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8003b7c:	20016bc0 	.word	0x20016bc0

08003b80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003b80:	e7fe      	b.n	8003b80 <ADC1_2_IRQHandler>

08003b82 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b82:	b580      	push	{r7, lr}
 8003b84:	b082      	sub	sp, #8
 8003b86:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b8c:	2003      	movs	r0, #3
 8003b8e:	f000 f8fe 	bl	8003d8e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003b92:	200f      	movs	r0, #15
 8003b94:	f7ff fbca 	bl	800332c <HAL_InitTick>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d002      	beq.n	8003ba4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	71fb      	strb	r3, [r7, #7]
 8003ba2:	e001      	b.n	8003ba8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003ba4:	f7ff fafc 	bl	80031a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003ba8:	79fb      	ldrb	r3, [r7, #7]

}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3708      	adds	r7, #8
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
	...

08003bb4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003bb8:	4b05      	ldr	r3, [pc, #20]	@ (8003bd0 <HAL_IncTick+0x1c>)
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	4b05      	ldr	r3, [pc, #20]	@ (8003bd4 <HAL_IncTick+0x20>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4413      	add	r3, r2
 8003bc2:	4a03      	ldr	r2, [pc, #12]	@ (8003bd0 <HAL_IncTick+0x1c>)
 8003bc4:	6013      	str	r3, [r2, #0]
}
 8003bc6:	bf00      	nop
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr
 8003bd0:	200048bc 	.word	0x200048bc
 8003bd4:	20000028 	.word	0x20000028

08003bd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	af00      	add	r7, sp, #0
  return uwTick;
 8003bdc:	4b03      	ldr	r3, [pc, #12]	@ (8003bec <HAL_GetTick+0x14>)
 8003bde:	681b      	ldr	r3, [r3, #0]
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr
 8003bea:	bf00      	nop
 8003bec:	200048bc 	.word	0x200048bc

08003bf0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b084      	sub	sp, #16
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003bf8:	f7ff ffee 	bl	8003bd8 <HAL_GetTick>
 8003bfc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c08:	d004      	beq.n	8003c14 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8003c0a:	4b09      	ldr	r3, [pc, #36]	@ (8003c30 <HAL_Delay+0x40>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	68fa      	ldr	r2, [r7, #12]
 8003c10:	4413      	add	r3, r2
 8003c12:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003c14:	bf00      	nop
 8003c16:	f7ff ffdf 	bl	8003bd8 <HAL_GetTick>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	1ad3      	subs	r3, r2, r3
 8003c20:	68fa      	ldr	r2, [r7, #12]
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d8f7      	bhi.n	8003c16 <HAL_Delay+0x26>
  {
  }
}
 8003c26:	bf00      	nop
 8003c28:	bf00      	nop
 8003c2a:	3710      	adds	r7, #16
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}
 8003c30:	20000028 	.word	0x20000028

08003c34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b085      	sub	sp, #20
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	f003 0307 	and.w	r3, r3, #7
 8003c42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c44:	4b0c      	ldr	r3, [pc, #48]	@ (8003c78 <__NVIC_SetPriorityGrouping+0x44>)
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c4a:	68ba      	ldr	r2, [r7, #8]
 8003c4c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003c50:	4013      	ands	r3, r2
 8003c52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c5c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003c60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c66:	4a04      	ldr	r2, [pc, #16]	@ (8003c78 <__NVIC_SetPriorityGrouping+0x44>)
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	60d3      	str	r3, [r2, #12]
}
 8003c6c:	bf00      	nop
 8003c6e:	3714      	adds	r7, #20
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr
 8003c78:	e000ed00 	.word	0xe000ed00

08003c7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c80:	4b04      	ldr	r3, [pc, #16]	@ (8003c94 <__NVIC_GetPriorityGrouping+0x18>)
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	0a1b      	lsrs	r3, r3, #8
 8003c86:	f003 0307 	and.w	r3, r3, #7
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr
 8003c94:	e000ed00 	.word	0xe000ed00

08003c98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	db0b      	blt.n	8003cc2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003caa:	79fb      	ldrb	r3, [r7, #7]
 8003cac:	f003 021f 	and.w	r2, r3, #31
 8003cb0:	4907      	ldr	r1, [pc, #28]	@ (8003cd0 <__NVIC_EnableIRQ+0x38>)
 8003cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cb6:	095b      	lsrs	r3, r3, #5
 8003cb8:	2001      	movs	r0, #1
 8003cba:	fa00 f202 	lsl.w	r2, r0, r2
 8003cbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003cc2:	bf00      	nop
 8003cc4:	370c      	adds	r7, #12
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr
 8003cce:	bf00      	nop
 8003cd0:	e000e100 	.word	0xe000e100

08003cd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b083      	sub	sp, #12
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	4603      	mov	r3, r0
 8003cdc:	6039      	str	r1, [r7, #0]
 8003cde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ce0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	db0a      	blt.n	8003cfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	b2da      	uxtb	r2, r3
 8003cec:	490c      	ldr	r1, [pc, #48]	@ (8003d20 <__NVIC_SetPriority+0x4c>)
 8003cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cf2:	0112      	lsls	r2, r2, #4
 8003cf4:	b2d2      	uxtb	r2, r2
 8003cf6:	440b      	add	r3, r1
 8003cf8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003cfc:	e00a      	b.n	8003d14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	b2da      	uxtb	r2, r3
 8003d02:	4908      	ldr	r1, [pc, #32]	@ (8003d24 <__NVIC_SetPriority+0x50>)
 8003d04:	79fb      	ldrb	r3, [r7, #7]
 8003d06:	f003 030f 	and.w	r3, r3, #15
 8003d0a:	3b04      	subs	r3, #4
 8003d0c:	0112      	lsls	r2, r2, #4
 8003d0e:	b2d2      	uxtb	r2, r2
 8003d10:	440b      	add	r3, r1
 8003d12:	761a      	strb	r2, [r3, #24]
}
 8003d14:	bf00      	nop
 8003d16:	370c      	adds	r7, #12
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr
 8003d20:	e000e100 	.word	0xe000e100
 8003d24:	e000ed00 	.word	0xe000ed00

08003d28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b089      	sub	sp, #36	@ 0x24
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	60f8      	str	r0, [r7, #12]
 8003d30:	60b9      	str	r1, [r7, #8]
 8003d32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f003 0307 	and.w	r3, r3, #7
 8003d3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	f1c3 0307 	rsb	r3, r3, #7
 8003d42:	2b04      	cmp	r3, #4
 8003d44:	bf28      	it	cs
 8003d46:	2304      	movcs	r3, #4
 8003d48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d4a:	69fb      	ldr	r3, [r7, #28]
 8003d4c:	3304      	adds	r3, #4
 8003d4e:	2b06      	cmp	r3, #6
 8003d50:	d902      	bls.n	8003d58 <NVIC_EncodePriority+0x30>
 8003d52:	69fb      	ldr	r3, [r7, #28]
 8003d54:	3b03      	subs	r3, #3
 8003d56:	e000      	b.n	8003d5a <NVIC_EncodePriority+0x32>
 8003d58:	2300      	movs	r3, #0
 8003d5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d5c:	f04f 32ff 	mov.w	r2, #4294967295
 8003d60:	69bb      	ldr	r3, [r7, #24]
 8003d62:	fa02 f303 	lsl.w	r3, r2, r3
 8003d66:	43da      	mvns	r2, r3
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	401a      	ands	r2, r3
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d70:	f04f 31ff 	mov.w	r1, #4294967295
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	fa01 f303 	lsl.w	r3, r1, r3
 8003d7a:	43d9      	mvns	r1, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d80:	4313      	orrs	r3, r2
         );
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3724      	adds	r7, #36	@ 0x24
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr

08003d8e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d8e:	b580      	push	{r7, lr}
 8003d90:	b082      	sub	sp, #8
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f7ff ff4c 	bl	8003c34 <__NVIC_SetPriorityGrouping>
}
 8003d9c:	bf00      	nop
 8003d9e:	3708      	adds	r7, #8
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}

08003da4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b086      	sub	sp, #24
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	4603      	mov	r3, r0
 8003dac:	60b9      	str	r1, [r7, #8]
 8003dae:	607a      	str	r2, [r7, #4]
 8003db0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003db2:	f7ff ff63 	bl	8003c7c <__NVIC_GetPriorityGrouping>
 8003db6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003db8:	687a      	ldr	r2, [r7, #4]
 8003dba:	68b9      	ldr	r1, [r7, #8]
 8003dbc:	6978      	ldr	r0, [r7, #20]
 8003dbe:	f7ff ffb3 	bl	8003d28 <NVIC_EncodePriority>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003dc8:	4611      	mov	r1, r2
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f7ff ff82 	bl	8003cd4 <__NVIC_SetPriority>
}
 8003dd0:	bf00      	nop
 8003dd2:	3718      	adds	r7, #24
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}

08003dd8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b082      	sub	sp, #8
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	4603      	mov	r3, r0
 8003de0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003de6:	4618      	mov	r0, r3
 8003de8:	f7ff ff56 	bl	8003c98 <__NVIC_EnableIRQ>
}
 8003dec:	bf00      	nop
 8003dee:	3708      	adds	r7, #8
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}

08003df4 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b084      	sub	sp, #16
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d101      	bne.n	8003e06 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e147      	b.n	8004096 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d106      	bne.n	8003e20 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f7ff f9ea 	bl	80031f4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	699a      	ldr	r2, [r3, #24]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f022 0210 	bic.w	r2, r2, #16
 8003e2e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e30:	f7ff fed2 	bl	8003bd8 <HAL_GetTick>
 8003e34:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003e36:	e012      	b.n	8003e5e <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003e38:	f7ff fece 	bl	8003bd8 <HAL_GetTick>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	1ad3      	subs	r3, r2, r3
 8003e42:	2b0a      	cmp	r3, #10
 8003e44:	d90b      	bls.n	8003e5e <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e4a:	f043 0201 	orr.w	r2, r3, #1
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2203      	movs	r2, #3
 8003e56:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e11b      	b.n	8004096 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	699b      	ldr	r3, [r3, #24]
 8003e64:	f003 0308 	and.w	r3, r3, #8
 8003e68:	2b08      	cmp	r3, #8
 8003e6a:	d0e5      	beq.n	8003e38 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	699a      	ldr	r2, [r3, #24]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f042 0201 	orr.w	r2, r2, #1
 8003e7a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e7c:	f7ff feac 	bl	8003bd8 <HAL_GetTick>
 8003e80:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003e82:	e012      	b.n	8003eaa <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003e84:	f7ff fea8 	bl	8003bd8 <HAL_GetTick>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	2b0a      	cmp	r3, #10
 8003e90:	d90b      	bls.n	8003eaa <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e96:	f043 0201 	orr.w	r2, r3, #1
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2203      	movs	r2, #3
 8003ea2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e0f5      	b.n	8004096 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	699b      	ldr	r3, [r3, #24]
 8003eb0:	f003 0301 	and.w	r3, r3, #1
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d0e5      	beq.n	8003e84 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	699a      	ldr	r2, [r3, #24]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f042 0202 	orr.w	r2, r2, #2
 8003ec6:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a74      	ldr	r2, [pc, #464]	@ (80040a0 <HAL_FDCAN_Init+0x2ac>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d103      	bne.n	8003eda <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8003ed2:	4a74      	ldr	r2, [pc, #464]	@ (80040a4 <HAL_FDCAN_Init+0x2b0>)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	7c1b      	ldrb	r3, [r3, #16]
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d108      	bne.n	8003ef4 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	699a      	ldr	r2, [r3, #24]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003ef0:	619a      	str	r2, [r3, #24]
 8003ef2:	e007      	b.n	8003f04 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	699a      	ldr	r2, [r3, #24]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003f02:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	7c5b      	ldrb	r3, [r3, #17]
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d108      	bne.n	8003f1e <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	699a      	ldr	r2, [r3, #24]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003f1a:	619a      	str	r2, [r3, #24]
 8003f1c:	e007      	b.n	8003f2e <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	699a      	ldr	r2, [r3, #24]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003f2c:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	7c9b      	ldrb	r3, [r3, #18]
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d108      	bne.n	8003f48 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	699a      	ldr	r2, [r3, #24]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003f44:	619a      	str	r2, [r3, #24]
 8003f46:	e007      	b.n	8003f58 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	699a      	ldr	r2, [r3, #24]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003f56:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	699b      	ldr	r3, [r3, #24]
 8003f5e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	689a      	ldr	r2, [r3, #8]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	430a      	orrs	r2, r1
 8003f6c:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	699a      	ldr	r2, [r3, #24]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8003f7c:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	691a      	ldr	r2, [r3, #16]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f022 0210 	bic.w	r2, r2, #16
 8003f8c:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	68db      	ldr	r3, [r3, #12]
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d108      	bne.n	8003fa8 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	699a      	ldr	r2, [r3, #24]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f042 0204 	orr.w	r2, r2, #4
 8003fa4:	619a      	str	r2, [r3, #24]
 8003fa6:	e02c      	b.n	8004002 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d028      	beq.n	8004002 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	68db      	ldr	r3, [r3, #12]
 8003fb4:	2b02      	cmp	r3, #2
 8003fb6:	d01c      	beq.n	8003ff2 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	699a      	ldr	r2, [r3, #24]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003fc6:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	691a      	ldr	r2, [r3, #16]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f042 0210 	orr.w	r2, r2, #16
 8003fd6:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	2b03      	cmp	r3, #3
 8003fde:	d110      	bne.n	8004002 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	699a      	ldr	r2, [r3, #24]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f042 0220 	orr.w	r2, r2, #32
 8003fee:	619a      	str	r2, [r3, #24]
 8003ff0:	e007      	b.n	8004002 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	699a      	ldr	r2, [r3, #24]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f042 0220 	orr.w	r2, r2, #32
 8004000:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	699b      	ldr	r3, [r3, #24]
 8004006:	3b01      	subs	r3, #1
 8004008:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	69db      	ldr	r3, [r3, #28]
 800400e:	3b01      	subs	r3, #1
 8004010:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004012:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6a1b      	ldr	r3, [r3, #32]
 8004018:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800401a:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	695b      	ldr	r3, [r3, #20]
 8004022:	3b01      	subs	r3, #1
 8004024:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800402a:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800402c:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004036:	d115      	bne.n	8004064 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800403c:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004042:	3b01      	subs	r3, #1
 8004044:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004046:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800404c:	3b01      	subs	r3, #1
 800404e:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8004050:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004058:	3b01      	subs	r3, #1
 800405a:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004060:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004062:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	430a      	orrs	r2, r1
 8004076:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f000 f814 	bl	80040a8 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2200      	movs	r2, #0
 800408a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8004094:	2300      	movs	r3, #0
}
 8004096:	4618      	mov	r0, r3
 8004098:	3710      	adds	r7, #16
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}
 800409e:	bf00      	nop
 80040a0:	40006400 	.word	0x40006400
 80040a4:	40006500 	.word	0x40006500

080040a8 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b085      	sub	sp, #20
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80040b0:	4b2c      	ldr	r3, [pc, #176]	@ (8004164 <FDCAN_CalcultateRamBlockAddresses+0xbc>)
 80040b2:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a2b      	ldr	r2, [pc, #172]	@ (8004168 <FDCAN_CalcultateRamBlockAddresses+0xc0>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d103      	bne.n	80040c6 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80040c4:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	68ba      	ldr	r2, [r7, #8]
 80040ca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80040d4:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040dc:	041a      	lsls	r2, r3, #16
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	430a      	orrs	r2, r1
 80040e4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80040fa:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004102:	061a      	lsls	r2, r3, #24
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	430a      	orrs	r2, r1
 800410a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	60fb      	str	r3, [r7, #12]
 800413a:	e005      	b.n	8004148 <FDCAN_CalcultateRamBlockAddresses+0xa0>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2200      	movs	r2, #0
 8004140:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	3304      	adds	r3, #4
 8004146:	60fb      	str	r3, [r7, #12]
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800414e:	68fa      	ldr	r2, [r7, #12]
 8004150:	429a      	cmp	r2, r3
 8004152:	d3f3      	bcc.n	800413c <FDCAN_CalcultateRamBlockAddresses+0x94>
  }
}
 8004154:	bf00      	nop
 8004156:	bf00      	nop
 8004158:	3714      	adds	r7, #20
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr
 8004162:	bf00      	nop
 8004164:	4000a400 	.word	0x4000a400
 8004168:	40006800 	.word	0x40006800

0800416c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800416c:	b480      	push	{r7}
 800416e:	b087      	sub	sp, #28
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004176:	2300      	movs	r3, #0
 8004178:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800417a:	e15a      	b.n	8004432 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	2101      	movs	r1, #1
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	fa01 f303 	lsl.w	r3, r1, r3
 8004188:	4013      	ands	r3, r2
 800418a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2b00      	cmp	r3, #0
 8004190:	f000 814c 	beq.w	800442c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	f003 0303 	and.w	r3, r3, #3
 800419c:	2b01      	cmp	r3, #1
 800419e:	d005      	beq.n	80041ac <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80041a8:	2b02      	cmp	r3, #2
 80041aa:	d130      	bne.n	800420e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	005b      	lsls	r3, r3, #1
 80041b6:	2203      	movs	r2, #3
 80041b8:	fa02 f303 	lsl.w	r3, r2, r3
 80041bc:	43db      	mvns	r3, r3
 80041be:	693a      	ldr	r2, [r7, #16]
 80041c0:	4013      	ands	r3, r2
 80041c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	68da      	ldr	r2, [r3, #12]
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	005b      	lsls	r3, r3, #1
 80041cc:	fa02 f303 	lsl.w	r3, r2, r3
 80041d0:	693a      	ldr	r2, [r7, #16]
 80041d2:	4313      	orrs	r3, r2
 80041d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	693a      	ldr	r2, [r7, #16]
 80041da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80041e2:	2201      	movs	r2, #1
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	fa02 f303 	lsl.w	r3, r2, r3
 80041ea:	43db      	mvns	r3, r3
 80041ec:	693a      	ldr	r2, [r7, #16]
 80041ee:	4013      	ands	r3, r2
 80041f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	091b      	lsrs	r3, r3, #4
 80041f8:	f003 0201 	and.w	r2, r3, #1
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004202:	693a      	ldr	r2, [r7, #16]
 8004204:	4313      	orrs	r3, r2
 8004206:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	693a      	ldr	r2, [r7, #16]
 800420c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	f003 0303 	and.w	r3, r3, #3
 8004216:	2b03      	cmp	r3, #3
 8004218:	d017      	beq.n	800424a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	005b      	lsls	r3, r3, #1
 8004224:	2203      	movs	r2, #3
 8004226:	fa02 f303 	lsl.w	r3, r2, r3
 800422a:	43db      	mvns	r3, r3
 800422c:	693a      	ldr	r2, [r7, #16]
 800422e:	4013      	ands	r3, r2
 8004230:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	689a      	ldr	r2, [r3, #8]
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	005b      	lsls	r3, r3, #1
 800423a:	fa02 f303 	lsl.w	r3, r2, r3
 800423e:	693a      	ldr	r2, [r7, #16]
 8004240:	4313      	orrs	r3, r2
 8004242:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	693a      	ldr	r2, [r7, #16]
 8004248:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	f003 0303 	and.w	r3, r3, #3
 8004252:	2b02      	cmp	r3, #2
 8004254:	d123      	bne.n	800429e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	08da      	lsrs	r2, r3, #3
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	3208      	adds	r2, #8
 800425e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004262:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	f003 0307 	and.w	r3, r3, #7
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	220f      	movs	r2, #15
 800426e:	fa02 f303 	lsl.w	r3, r2, r3
 8004272:	43db      	mvns	r3, r3
 8004274:	693a      	ldr	r2, [r7, #16]
 8004276:	4013      	ands	r3, r2
 8004278:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	691a      	ldr	r2, [r3, #16]
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	f003 0307 	and.w	r3, r3, #7
 8004284:	009b      	lsls	r3, r3, #2
 8004286:	fa02 f303 	lsl.w	r3, r2, r3
 800428a:	693a      	ldr	r2, [r7, #16]
 800428c:	4313      	orrs	r3, r2
 800428e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	08da      	lsrs	r2, r3, #3
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	3208      	adds	r2, #8
 8004298:	6939      	ldr	r1, [r7, #16]
 800429a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	005b      	lsls	r3, r3, #1
 80042a8:	2203      	movs	r2, #3
 80042aa:	fa02 f303 	lsl.w	r3, r2, r3
 80042ae:	43db      	mvns	r3, r3
 80042b0:	693a      	ldr	r2, [r7, #16]
 80042b2:	4013      	ands	r3, r2
 80042b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	f003 0203 	and.w	r2, r3, #3
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	005b      	lsls	r3, r3, #1
 80042c2:	fa02 f303 	lsl.w	r3, r2, r3
 80042c6:	693a      	ldr	r2, [r7, #16]
 80042c8:	4313      	orrs	r3, r2
 80042ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	693a      	ldr	r2, [r7, #16]
 80042d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80042da:	2b00      	cmp	r3, #0
 80042dc:	f000 80a6 	beq.w	800442c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042e0:	4b5b      	ldr	r3, [pc, #364]	@ (8004450 <HAL_GPIO_Init+0x2e4>)
 80042e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042e4:	4a5a      	ldr	r2, [pc, #360]	@ (8004450 <HAL_GPIO_Init+0x2e4>)
 80042e6:	f043 0301 	orr.w	r3, r3, #1
 80042ea:	6613      	str	r3, [r2, #96]	@ 0x60
 80042ec:	4b58      	ldr	r3, [pc, #352]	@ (8004450 <HAL_GPIO_Init+0x2e4>)
 80042ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042f0:	f003 0301 	and.w	r3, r3, #1
 80042f4:	60bb      	str	r3, [r7, #8]
 80042f6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80042f8:	4a56      	ldr	r2, [pc, #344]	@ (8004454 <HAL_GPIO_Init+0x2e8>)
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	089b      	lsrs	r3, r3, #2
 80042fe:	3302      	adds	r3, #2
 8004300:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004304:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	f003 0303 	and.w	r3, r3, #3
 800430c:	009b      	lsls	r3, r3, #2
 800430e:	220f      	movs	r2, #15
 8004310:	fa02 f303 	lsl.w	r3, r2, r3
 8004314:	43db      	mvns	r3, r3
 8004316:	693a      	ldr	r2, [r7, #16]
 8004318:	4013      	ands	r3, r2
 800431a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004322:	d01f      	beq.n	8004364 <HAL_GPIO_Init+0x1f8>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	4a4c      	ldr	r2, [pc, #304]	@ (8004458 <HAL_GPIO_Init+0x2ec>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d019      	beq.n	8004360 <HAL_GPIO_Init+0x1f4>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	4a4b      	ldr	r2, [pc, #300]	@ (800445c <HAL_GPIO_Init+0x2f0>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d013      	beq.n	800435c <HAL_GPIO_Init+0x1f0>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	4a4a      	ldr	r2, [pc, #296]	@ (8004460 <HAL_GPIO_Init+0x2f4>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d00d      	beq.n	8004358 <HAL_GPIO_Init+0x1ec>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	4a49      	ldr	r2, [pc, #292]	@ (8004464 <HAL_GPIO_Init+0x2f8>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d007      	beq.n	8004354 <HAL_GPIO_Init+0x1e8>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	4a48      	ldr	r2, [pc, #288]	@ (8004468 <HAL_GPIO_Init+0x2fc>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d101      	bne.n	8004350 <HAL_GPIO_Init+0x1e4>
 800434c:	2305      	movs	r3, #5
 800434e:	e00a      	b.n	8004366 <HAL_GPIO_Init+0x1fa>
 8004350:	2306      	movs	r3, #6
 8004352:	e008      	b.n	8004366 <HAL_GPIO_Init+0x1fa>
 8004354:	2304      	movs	r3, #4
 8004356:	e006      	b.n	8004366 <HAL_GPIO_Init+0x1fa>
 8004358:	2303      	movs	r3, #3
 800435a:	e004      	b.n	8004366 <HAL_GPIO_Init+0x1fa>
 800435c:	2302      	movs	r3, #2
 800435e:	e002      	b.n	8004366 <HAL_GPIO_Init+0x1fa>
 8004360:	2301      	movs	r3, #1
 8004362:	e000      	b.n	8004366 <HAL_GPIO_Init+0x1fa>
 8004364:	2300      	movs	r3, #0
 8004366:	697a      	ldr	r2, [r7, #20]
 8004368:	f002 0203 	and.w	r2, r2, #3
 800436c:	0092      	lsls	r2, r2, #2
 800436e:	4093      	lsls	r3, r2
 8004370:	693a      	ldr	r2, [r7, #16]
 8004372:	4313      	orrs	r3, r2
 8004374:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004376:	4937      	ldr	r1, [pc, #220]	@ (8004454 <HAL_GPIO_Init+0x2e8>)
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	089b      	lsrs	r3, r3, #2
 800437c:	3302      	adds	r3, #2
 800437e:	693a      	ldr	r2, [r7, #16]
 8004380:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004384:	4b39      	ldr	r3, [pc, #228]	@ (800446c <HAL_GPIO_Init+0x300>)
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	43db      	mvns	r3, r3
 800438e:	693a      	ldr	r2, [r7, #16]
 8004390:	4013      	ands	r3, r2
 8004392:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800439c:	2b00      	cmp	r3, #0
 800439e:	d003      	beq.n	80043a8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80043a0:	693a      	ldr	r2, [r7, #16]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	4313      	orrs	r3, r2
 80043a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80043a8:	4a30      	ldr	r2, [pc, #192]	@ (800446c <HAL_GPIO_Init+0x300>)
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80043ae:	4b2f      	ldr	r3, [pc, #188]	@ (800446c <HAL_GPIO_Init+0x300>)
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	43db      	mvns	r3, r3
 80043b8:	693a      	ldr	r2, [r7, #16]
 80043ba:	4013      	ands	r3, r2
 80043bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d003      	beq.n	80043d2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80043ca:	693a      	ldr	r2, [r7, #16]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	4313      	orrs	r3, r2
 80043d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80043d2:	4a26      	ldr	r2, [pc, #152]	@ (800446c <HAL_GPIO_Init+0x300>)
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80043d8:	4b24      	ldr	r3, [pc, #144]	@ (800446c <HAL_GPIO_Init+0x300>)
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	43db      	mvns	r3, r3
 80043e2:	693a      	ldr	r2, [r7, #16]
 80043e4:	4013      	ands	r3, r2
 80043e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d003      	beq.n	80043fc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80043f4:	693a      	ldr	r2, [r7, #16]
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	4313      	orrs	r3, r2
 80043fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80043fc:	4a1b      	ldr	r2, [pc, #108]	@ (800446c <HAL_GPIO_Init+0x300>)
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004402:	4b1a      	ldr	r3, [pc, #104]	@ (800446c <HAL_GPIO_Init+0x300>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	43db      	mvns	r3, r3
 800440c:	693a      	ldr	r2, [r7, #16]
 800440e:	4013      	ands	r3, r2
 8004410:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800441a:	2b00      	cmp	r3, #0
 800441c:	d003      	beq.n	8004426 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800441e:	693a      	ldr	r2, [r7, #16]
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	4313      	orrs	r3, r2
 8004424:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004426:	4a11      	ldr	r2, [pc, #68]	@ (800446c <HAL_GPIO_Init+0x300>)
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	3301      	adds	r3, #1
 8004430:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	fa22 f303 	lsr.w	r3, r2, r3
 800443c:	2b00      	cmp	r3, #0
 800443e:	f47f ae9d 	bne.w	800417c <HAL_GPIO_Init+0x10>
  }
}
 8004442:	bf00      	nop
 8004444:	bf00      	nop
 8004446:	371c      	adds	r7, #28
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr
 8004450:	40021000 	.word	0x40021000
 8004454:	40010000 	.word	0x40010000
 8004458:	48000400 	.word	0x48000400
 800445c:	48000800 	.word	0x48000800
 8004460:	48000c00 	.word	0x48000c00
 8004464:	48001000 	.word	0x48001000
 8004468:	48001400 	.word	0x48001400
 800446c:	40010400 	.word	0x40010400

08004470 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004470:	b480      	push	{r7}
 8004472:	b083      	sub	sp, #12
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
 8004478:	460b      	mov	r3, r1
 800447a:	807b      	strh	r3, [r7, #2]
 800447c:	4613      	mov	r3, r2
 800447e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004480:	787b      	ldrb	r3, [r7, #1]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d003      	beq.n	800448e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004486:	887a      	ldrh	r2, [r7, #2]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800448c:	e002      	b.n	8004494 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800448e:	887a      	ldrh	r2, [r7, #2]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004494:	bf00      	nop
 8004496:	370c      	adds	r7, #12
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr

080044a0 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b085      	sub	sp, #20
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	460b      	mov	r3, r1
 80044aa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	695b      	ldr	r3, [r3, #20]
 80044b0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80044b2:	887a      	ldrh	r2, [r7, #2]
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	4013      	ands	r3, r2
 80044b8:	041a      	lsls	r2, r3, #16
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	43d9      	mvns	r1, r3
 80044be:	887b      	ldrh	r3, [r7, #2]
 80044c0:	400b      	ands	r3, r1
 80044c2:	431a      	orrs	r2, r3
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	619a      	str	r2, [r3, #24]
}
 80044c8:	bf00      	nop
 80044ca:	3714      	adds	r7, #20
 80044cc:	46bd      	mov	sp, r7
 80044ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d2:	4770      	bx	lr

080044d4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b084      	sub	sp, #16
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d101      	bne.n	80044e6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e0c0      	b.n	8004668 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d106      	bne.n	8004500 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2200      	movs	r2, #0
 80044f6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f00a ff4a 	bl	800f394 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2203      	movs	r2, #3
 8004504:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4618      	mov	r0, r3
 800450e:	f003 ffa2 	bl	8008456 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004512:	2300      	movs	r3, #0
 8004514:	73fb      	strb	r3, [r7, #15]
 8004516:	e03e      	b.n	8004596 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004518:	7bfa      	ldrb	r2, [r7, #15]
 800451a:	6879      	ldr	r1, [r7, #4]
 800451c:	4613      	mov	r3, r2
 800451e:	009b      	lsls	r3, r3, #2
 8004520:	4413      	add	r3, r2
 8004522:	00db      	lsls	r3, r3, #3
 8004524:	440b      	add	r3, r1
 8004526:	3311      	adds	r3, #17
 8004528:	2201      	movs	r2, #1
 800452a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800452c:	7bfa      	ldrb	r2, [r7, #15]
 800452e:	6879      	ldr	r1, [r7, #4]
 8004530:	4613      	mov	r3, r2
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	4413      	add	r3, r2
 8004536:	00db      	lsls	r3, r3, #3
 8004538:	440b      	add	r3, r1
 800453a:	3310      	adds	r3, #16
 800453c:	7bfa      	ldrb	r2, [r7, #15]
 800453e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004540:	7bfa      	ldrb	r2, [r7, #15]
 8004542:	6879      	ldr	r1, [r7, #4]
 8004544:	4613      	mov	r3, r2
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	4413      	add	r3, r2
 800454a:	00db      	lsls	r3, r3, #3
 800454c:	440b      	add	r3, r1
 800454e:	3313      	adds	r3, #19
 8004550:	2200      	movs	r2, #0
 8004552:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004554:	7bfa      	ldrb	r2, [r7, #15]
 8004556:	6879      	ldr	r1, [r7, #4]
 8004558:	4613      	mov	r3, r2
 800455a:	009b      	lsls	r3, r3, #2
 800455c:	4413      	add	r3, r2
 800455e:	00db      	lsls	r3, r3, #3
 8004560:	440b      	add	r3, r1
 8004562:	3320      	adds	r3, #32
 8004564:	2200      	movs	r2, #0
 8004566:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004568:	7bfa      	ldrb	r2, [r7, #15]
 800456a:	6879      	ldr	r1, [r7, #4]
 800456c:	4613      	mov	r3, r2
 800456e:	009b      	lsls	r3, r3, #2
 8004570:	4413      	add	r3, r2
 8004572:	00db      	lsls	r3, r3, #3
 8004574:	440b      	add	r3, r1
 8004576:	3324      	adds	r3, #36	@ 0x24
 8004578:	2200      	movs	r2, #0
 800457a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800457c:	7bfb      	ldrb	r3, [r7, #15]
 800457e:	6879      	ldr	r1, [r7, #4]
 8004580:	1c5a      	adds	r2, r3, #1
 8004582:	4613      	mov	r3, r2
 8004584:	009b      	lsls	r3, r3, #2
 8004586:	4413      	add	r3, r2
 8004588:	00db      	lsls	r3, r3, #3
 800458a:	440b      	add	r3, r1
 800458c:	2200      	movs	r2, #0
 800458e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004590:	7bfb      	ldrb	r3, [r7, #15]
 8004592:	3301      	adds	r3, #1
 8004594:	73fb      	strb	r3, [r7, #15]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	791b      	ldrb	r3, [r3, #4]
 800459a:	7bfa      	ldrb	r2, [r7, #15]
 800459c:	429a      	cmp	r2, r3
 800459e:	d3bb      	bcc.n	8004518 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045a0:	2300      	movs	r3, #0
 80045a2:	73fb      	strb	r3, [r7, #15]
 80045a4:	e044      	b.n	8004630 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80045a6:	7bfa      	ldrb	r2, [r7, #15]
 80045a8:	6879      	ldr	r1, [r7, #4]
 80045aa:	4613      	mov	r3, r2
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	4413      	add	r3, r2
 80045b0:	00db      	lsls	r3, r3, #3
 80045b2:	440b      	add	r3, r1
 80045b4:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80045b8:	2200      	movs	r2, #0
 80045ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80045bc:	7bfa      	ldrb	r2, [r7, #15]
 80045be:	6879      	ldr	r1, [r7, #4]
 80045c0:	4613      	mov	r3, r2
 80045c2:	009b      	lsls	r3, r3, #2
 80045c4:	4413      	add	r3, r2
 80045c6:	00db      	lsls	r3, r3, #3
 80045c8:	440b      	add	r3, r1
 80045ca:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80045ce:	7bfa      	ldrb	r2, [r7, #15]
 80045d0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80045d2:	7bfa      	ldrb	r2, [r7, #15]
 80045d4:	6879      	ldr	r1, [r7, #4]
 80045d6:	4613      	mov	r3, r2
 80045d8:	009b      	lsls	r3, r3, #2
 80045da:	4413      	add	r3, r2
 80045dc:	00db      	lsls	r3, r3, #3
 80045de:	440b      	add	r3, r1
 80045e0:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80045e4:	2200      	movs	r2, #0
 80045e6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80045e8:	7bfa      	ldrb	r2, [r7, #15]
 80045ea:	6879      	ldr	r1, [r7, #4]
 80045ec:	4613      	mov	r3, r2
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	4413      	add	r3, r2
 80045f2:	00db      	lsls	r3, r3, #3
 80045f4:	440b      	add	r3, r1
 80045f6:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80045fa:	2200      	movs	r2, #0
 80045fc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80045fe:	7bfa      	ldrb	r2, [r7, #15]
 8004600:	6879      	ldr	r1, [r7, #4]
 8004602:	4613      	mov	r3, r2
 8004604:	009b      	lsls	r3, r3, #2
 8004606:	4413      	add	r3, r2
 8004608:	00db      	lsls	r3, r3, #3
 800460a:	440b      	add	r3, r1
 800460c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8004610:	2200      	movs	r2, #0
 8004612:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004614:	7bfa      	ldrb	r2, [r7, #15]
 8004616:	6879      	ldr	r1, [r7, #4]
 8004618:	4613      	mov	r3, r2
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	4413      	add	r3, r2
 800461e:	00db      	lsls	r3, r3, #3
 8004620:	440b      	add	r3, r1
 8004622:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8004626:	2200      	movs	r2, #0
 8004628:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800462a:	7bfb      	ldrb	r3, [r7, #15]
 800462c:	3301      	adds	r3, #1
 800462e:	73fb      	strb	r3, [r7, #15]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	791b      	ldrb	r3, [r3, #4]
 8004634:	7bfa      	ldrb	r2, [r7, #15]
 8004636:	429a      	cmp	r2, r3
 8004638:	d3b5      	bcc.n	80045a6 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6818      	ldr	r0, [r3, #0]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	3304      	adds	r3, #4
 8004642:	e893 0006 	ldmia.w	r3, {r1, r2}
 8004646:	f003 ff21 	bl	800848c <USB_DevInit>

  hpcd->USB_Address = 0U;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2200      	movs	r2, #0
 800464e:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2201      	movs	r2, #1
 8004654:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	7a9b      	ldrb	r3, [r3, #10]
 800465c:	2b01      	cmp	r3, #1
 800465e:	d102      	bne.n	8004666 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004660:	6878      	ldr	r0, [r7, #4]
 8004662:	f001 fc0e 	bl	8005e82 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8004666:	2300      	movs	r3, #0
}
 8004668:	4618      	mov	r0, r3
 800466a:	3710      	adds	r7, #16
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}

08004670 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b082      	sub	sp, #8
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800467e:	2b01      	cmp	r3, #1
 8004680:	d101      	bne.n	8004686 <HAL_PCD_Start+0x16>
 8004682:	2302      	movs	r3, #2
 8004684:	e012      	b.n	80046ac <HAL_PCD_Start+0x3c>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2201      	movs	r2, #1
 800468a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4618      	mov	r0, r3
 8004694:	f003 fec8 	bl	8008428 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4618      	mov	r0, r3
 800469e:	f005 fca5 	bl	8009fec <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2200      	movs	r2, #0
 80046a6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80046aa:	2300      	movs	r3, #0
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3708      	adds	r7, #8
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}

080046b4 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b084      	sub	sp, #16
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4618      	mov	r0, r3
 80046c2:	f005 fcaa 	bl	800a01a <USB_ReadInterrupts>
 80046c6:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d003      	beq.n	80046da <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f000 fb06 	bl	8004ce4 <PCD_EP_ISR_Handler>

    return;
 80046d8:	e110      	b.n	80048fc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d013      	beq.n	800470c <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80046ec:	b29a      	uxth	r2, r3
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80046f6:	b292      	uxth	r2, r2
 80046f8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80046fc:	6878      	ldr	r0, [r7, #4]
 80046fe:	f00a feda 	bl	800f4b6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004702:	2100      	movs	r1, #0
 8004704:	6878      	ldr	r0, [r7, #4]
 8004706:	f000 f8fc 	bl	8004902 <HAL_PCD_SetAddress>

    return;
 800470a:	e0f7      	b.n	80048fc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004712:	2b00      	cmp	r3, #0
 8004714:	d00c      	beq.n	8004730 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800471e:	b29a      	uxth	r2, r3
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004728:	b292      	uxth	r2, r2
 800472a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800472e:	e0e5      	b.n	80048fc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004736:	2b00      	cmp	r3, #0
 8004738:	d00c      	beq.n	8004754 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004742:	b29a      	uxth	r2, r3
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800474c:	b292      	uxth	r2, r2
 800474e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004752:	e0d3      	b.n	80048fc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800475a:	2b00      	cmp	r3, #0
 800475c:	d034      	beq.n	80047c8 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004766:	b29a      	uxth	r2, r3
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f022 0204 	bic.w	r2, r2, #4
 8004770:	b292      	uxth	r2, r2
 8004772:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800477e:	b29a      	uxth	r2, r3
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f022 0208 	bic.w	r2, r2, #8
 8004788:	b292      	uxth	r2, r2
 800478a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8004794:	2b01      	cmp	r3, #1
 8004796:	d107      	bne.n	80047a8 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2200      	movs	r2, #0
 800479c:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80047a0:	2100      	movs	r1, #0
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f00b f87a 	bl	800f89c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	f00a febd 	bl	800f528 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80047b6:	b29a      	uxth	r2, r3
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80047c0:	b292      	uxth	r2, r2
 80047c2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80047c6:	e099      	b.n	80048fc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d027      	beq.n	8004822 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80047da:	b29a      	uxth	r2, r3
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f042 0208 	orr.w	r2, r2, #8
 80047e4:	b292      	uxth	r2, r2
 80047e6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80047f2:	b29a      	uxth	r2, r3
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80047fc:	b292      	uxth	r2, r2
 80047fe:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800480a:	b29a      	uxth	r2, r3
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f042 0204 	orr.w	r2, r2, #4
 8004814:	b292      	uxth	r2, r2
 8004816:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f00a fe6a 	bl	800f4f4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004820:	e06c      	b.n	80048fc <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004828:	2b00      	cmp	r3, #0
 800482a:	d040      	beq.n	80048ae <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004834:	b29a      	uxth	r2, r3
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800483e:	b292      	uxth	r2, r2
 8004840:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 800484a:	2b00      	cmp	r3, #0
 800484c:	d12b      	bne.n	80048a6 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004856:	b29a      	uxth	r2, r3
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f042 0204 	orr.w	r2, r2, #4
 8004860:	b292      	uxth	r2, r2
 8004862:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800486e:	b29a      	uxth	r2, r3
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f042 0208 	orr.w	r2, r2, #8
 8004878:	b292      	uxth	r2, r2
 800487a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2201      	movs	r2, #1
 8004882:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800488e:	b29b      	uxth	r3, r3
 8004890:	089b      	lsrs	r3, r3, #2
 8004892:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800489c:	2101      	movs	r1, #1
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f00a fffc 	bl	800f89c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80048a4:	e02a      	b.n	80048fc <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f00a fe24 	bl	800f4f4 <HAL_PCD_SuspendCallback>
    return;
 80048ac:	e026      	b.n	80048fc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d00f      	beq.n	80048d8 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80048c0:	b29a      	uxth	r2, r3
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80048ca:	b292      	uxth	r2, r2
 80048cc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f00a fde2 	bl	800f49a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80048d6:	e011      	b.n	80048fc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d00c      	beq.n	80048fc <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80048ea:	b29a      	uxth	r2, r3
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80048f4:	b292      	uxth	r2, r2
 80048f6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80048fa:	bf00      	nop
  }
}
 80048fc:	3710      	adds	r7, #16
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}

08004902 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004902:	b580      	push	{r7, lr}
 8004904:	b082      	sub	sp, #8
 8004906:	af00      	add	r7, sp, #0
 8004908:	6078      	str	r0, [r7, #4]
 800490a:	460b      	mov	r3, r1
 800490c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004914:	2b01      	cmp	r3, #1
 8004916:	d101      	bne.n	800491c <HAL_PCD_SetAddress+0x1a>
 8004918:	2302      	movs	r3, #2
 800491a:	e012      	b.n	8004942 <HAL_PCD_SetAddress+0x40>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2201      	movs	r2, #1
 8004920:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	78fa      	ldrb	r2, [r7, #3]
 8004928:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	78fa      	ldrb	r2, [r7, #3]
 8004930:	4611      	mov	r1, r2
 8004932:	4618      	mov	r0, r3
 8004934:	f005 fb46 	bl	8009fc4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2200      	movs	r2, #0
 800493c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8004940:	2300      	movs	r3, #0
}
 8004942:	4618      	mov	r0, r3
 8004944:	3708      	adds	r7, #8
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}

0800494a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800494a:	b580      	push	{r7, lr}
 800494c:	b084      	sub	sp, #16
 800494e:	af00      	add	r7, sp, #0
 8004950:	6078      	str	r0, [r7, #4]
 8004952:	4608      	mov	r0, r1
 8004954:	4611      	mov	r1, r2
 8004956:	461a      	mov	r2, r3
 8004958:	4603      	mov	r3, r0
 800495a:	70fb      	strb	r3, [r7, #3]
 800495c:	460b      	mov	r3, r1
 800495e:	803b      	strh	r3, [r7, #0]
 8004960:	4613      	mov	r3, r2
 8004962:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8004964:	2300      	movs	r3, #0
 8004966:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004968:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800496c:	2b00      	cmp	r3, #0
 800496e:	da0e      	bge.n	800498e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004970:	78fb      	ldrb	r3, [r7, #3]
 8004972:	f003 0207 	and.w	r2, r3, #7
 8004976:	4613      	mov	r3, r2
 8004978:	009b      	lsls	r3, r3, #2
 800497a:	4413      	add	r3, r2
 800497c:	00db      	lsls	r3, r3, #3
 800497e:	3310      	adds	r3, #16
 8004980:	687a      	ldr	r2, [r7, #4]
 8004982:	4413      	add	r3, r2
 8004984:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2201      	movs	r2, #1
 800498a:	705a      	strb	r2, [r3, #1]
 800498c:	e00e      	b.n	80049ac <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800498e:	78fb      	ldrb	r3, [r7, #3]
 8004990:	f003 0207 	and.w	r2, r3, #7
 8004994:	4613      	mov	r3, r2
 8004996:	009b      	lsls	r3, r3, #2
 8004998:	4413      	add	r3, r2
 800499a:	00db      	lsls	r3, r3, #3
 800499c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80049a0:	687a      	ldr	r2, [r7, #4]
 80049a2:	4413      	add	r3, r2
 80049a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2200      	movs	r2, #0
 80049aa:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80049ac:	78fb      	ldrb	r3, [r7, #3]
 80049ae:	f003 0307 	and.w	r3, r3, #7
 80049b2:	b2da      	uxtb	r2, r3
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80049b8:	883b      	ldrh	r3, [r7, #0]
 80049ba:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	78ba      	ldrb	r2, [r7, #2]
 80049c6:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80049c8:	78bb      	ldrb	r3, [r7, #2]
 80049ca:	2b02      	cmp	r3, #2
 80049cc:	d102      	bne.n	80049d4 <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2200      	movs	r2, #0
 80049d2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d101      	bne.n	80049e2 <HAL_PCD_EP_Open+0x98>
 80049de:	2302      	movs	r3, #2
 80049e0:	e00e      	b.n	8004a00 <HAL_PCD_EP_Open+0xb6>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2201      	movs	r2, #1
 80049e6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	68f9      	ldr	r1, [r7, #12]
 80049f0:	4618      	mov	r0, r3
 80049f2:	f003 fd69 	bl	80084c8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2200      	movs	r2, #0
 80049fa:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 80049fe:	7afb      	ldrb	r3, [r7, #11]
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3710      	adds	r7, #16
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}

08004a08 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b084      	sub	sp, #16
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
 8004a10:	460b      	mov	r3, r1
 8004a12:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004a14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	da0e      	bge.n	8004a3a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a1c:	78fb      	ldrb	r3, [r7, #3]
 8004a1e:	f003 0207 	and.w	r2, r3, #7
 8004a22:	4613      	mov	r3, r2
 8004a24:	009b      	lsls	r3, r3, #2
 8004a26:	4413      	add	r3, r2
 8004a28:	00db      	lsls	r3, r3, #3
 8004a2a:	3310      	adds	r3, #16
 8004a2c:	687a      	ldr	r2, [r7, #4]
 8004a2e:	4413      	add	r3, r2
 8004a30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2201      	movs	r2, #1
 8004a36:	705a      	strb	r2, [r3, #1]
 8004a38:	e00e      	b.n	8004a58 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004a3a:	78fb      	ldrb	r3, [r7, #3]
 8004a3c:	f003 0207 	and.w	r2, r3, #7
 8004a40:	4613      	mov	r3, r2
 8004a42:	009b      	lsls	r3, r3, #2
 8004a44:	4413      	add	r3, r2
 8004a46:	00db      	lsls	r3, r3, #3
 8004a48:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004a4c:	687a      	ldr	r2, [r7, #4]
 8004a4e:	4413      	add	r3, r2
 8004a50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2200      	movs	r2, #0
 8004a56:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004a58:	78fb      	ldrb	r3, [r7, #3]
 8004a5a:	f003 0307 	and.w	r3, r3, #7
 8004a5e:	b2da      	uxtb	r2, r3
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d101      	bne.n	8004a72 <HAL_PCD_EP_Close+0x6a>
 8004a6e:	2302      	movs	r3, #2
 8004a70:	e00e      	b.n	8004a90 <HAL_PCD_EP_Close+0x88>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2201      	movs	r2, #1
 8004a76:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	68f9      	ldr	r1, [r7, #12]
 8004a80:	4618      	mov	r0, r3
 8004a82:	f004 fa09 	bl	8008e98 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8004a8e:	2300      	movs	r3, #0
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	3710      	adds	r7, #16
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}

08004a98 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b086      	sub	sp, #24
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	60f8      	str	r0, [r7, #12]
 8004aa0:	607a      	str	r2, [r7, #4]
 8004aa2:	603b      	str	r3, [r7, #0]
 8004aa4:	460b      	mov	r3, r1
 8004aa6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004aa8:	7afb      	ldrb	r3, [r7, #11]
 8004aaa:	f003 0207 	and.w	r2, r3, #7
 8004aae:	4613      	mov	r3, r2
 8004ab0:	009b      	lsls	r3, r3, #2
 8004ab2:	4413      	add	r3, r2
 8004ab4:	00db      	lsls	r3, r3, #3
 8004ab6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004aba:	68fa      	ldr	r2, [r7, #12]
 8004abc:	4413      	add	r3, r2
 8004abe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	687a      	ldr	r2, [r7, #4]
 8004ac4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	683a      	ldr	r2, [r7, #0]
 8004aca:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004ad8:	7afb      	ldrb	r3, [r7, #11]
 8004ada:	f003 0307 	and.w	r3, r3, #7
 8004ade:	b2da      	uxtb	r2, r3
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	6979      	ldr	r1, [r7, #20]
 8004aea:	4618      	mov	r0, r3
 8004aec:	f004 fbc1 	bl	8009272 <USB_EPStartXfer>

  return HAL_OK;
 8004af0:	2300      	movs	r3, #0
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3718      	adds	r7, #24
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}

08004afa <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004afa:	b480      	push	{r7}
 8004afc:	b083      	sub	sp, #12
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	6078      	str	r0, [r7, #4]
 8004b02:	460b      	mov	r3, r1
 8004b04:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004b06:	78fb      	ldrb	r3, [r7, #3]
 8004b08:	f003 0207 	and.w	r2, r3, #7
 8004b0c:	6879      	ldr	r1, [r7, #4]
 8004b0e:	4613      	mov	r3, r2
 8004b10:	009b      	lsls	r3, r3, #2
 8004b12:	4413      	add	r3, r2
 8004b14:	00db      	lsls	r3, r3, #3
 8004b16:	440b      	add	r3, r1
 8004b18:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8004b1c:	681b      	ldr	r3, [r3, #0]
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	370c      	adds	r7, #12
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr

08004b2a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004b2a:	b580      	push	{r7, lr}
 8004b2c:	b086      	sub	sp, #24
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	60f8      	str	r0, [r7, #12]
 8004b32:	607a      	str	r2, [r7, #4]
 8004b34:	603b      	str	r3, [r7, #0]
 8004b36:	460b      	mov	r3, r1
 8004b38:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b3a:	7afb      	ldrb	r3, [r7, #11]
 8004b3c:	f003 0207 	and.w	r2, r3, #7
 8004b40:	4613      	mov	r3, r2
 8004b42:	009b      	lsls	r3, r3, #2
 8004b44:	4413      	add	r3, r2
 8004b46:	00db      	lsls	r3, r3, #3
 8004b48:	3310      	adds	r3, #16
 8004b4a:	68fa      	ldr	r2, [r7, #12]
 8004b4c:	4413      	add	r3, r2
 8004b4e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	687a      	ldr	r2, [r7, #4]
 8004b54:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	683a      	ldr	r2, [r7, #0]
 8004b5a:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	683a      	ldr	r2, [r7, #0]
 8004b68:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	2201      	movs	r2, #1
 8004b74:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004b76:	7afb      	ldrb	r3, [r7, #11]
 8004b78:	f003 0307 	and.w	r3, r3, #7
 8004b7c:	b2da      	uxtb	r2, r3
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	6979      	ldr	r1, [r7, #20]
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f004 fb72 	bl	8009272 <USB_EPStartXfer>

  return HAL_OK;
 8004b8e:	2300      	movs	r3, #0
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	3718      	adds	r7, #24
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}

08004b98 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b084      	sub	sp, #16
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	460b      	mov	r3, r1
 8004ba2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004ba4:	78fb      	ldrb	r3, [r7, #3]
 8004ba6:	f003 0307 	and.w	r3, r3, #7
 8004baa:	687a      	ldr	r2, [r7, #4]
 8004bac:	7912      	ldrb	r2, [r2, #4]
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d901      	bls.n	8004bb6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e03e      	b.n	8004c34 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004bb6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	da0e      	bge.n	8004bdc <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004bbe:	78fb      	ldrb	r3, [r7, #3]
 8004bc0:	f003 0207 	and.w	r2, r3, #7
 8004bc4:	4613      	mov	r3, r2
 8004bc6:	009b      	lsls	r3, r3, #2
 8004bc8:	4413      	add	r3, r2
 8004bca:	00db      	lsls	r3, r3, #3
 8004bcc:	3310      	adds	r3, #16
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	4413      	add	r3, r2
 8004bd2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	705a      	strb	r2, [r3, #1]
 8004bda:	e00c      	b.n	8004bf6 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004bdc:	78fa      	ldrb	r2, [r7, #3]
 8004bde:	4613      	mov	r3, r2
 8004be0:	009b      	lsls	r3, r3, #2
 8004be2:	4413      	add	r3, r2
 8004be4:	00db      	lsls	r3, r3, #3
 8004be6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004bea:	687a      	ldr	r2, [r7, #4]
 8004bec:	4413      	add	r3, r2
 8004bee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004bfc:	78fb      	ldrb	r3, [r7, #3]
 8004bfe:	f003 0307 	and.w	r3, r3, #7
 8004c02:	b2da      	uxtb	r2, r3
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	d101      	bne.n	8004c16 <HAL_PCD_EP_SetStall+0x7e>
 8004c12:	2302      	movs	r3, #2
 8004c14:	e00e      	b.n	8004c34 <HAL_PCD_EP_SetStall+0x9c>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2201      	movs	r2, #1
 8004c1a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	68f9      	ldr	r1, [r7, #12]
 8004c24:	4618      	mov	r0, r3
 8004c26:	f005 f8d3 	bl	8009dd0 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8004c32:	2300      	movs	r3, #0
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	3710      	adds	r7, #16
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}

08004c3c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b084      	sub	sp, #16
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
 8004c44:	460b      	mov	r3, r1
 8004c46:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004c48:	78fb      	ldrb	r3, [r7, #3]
 8004c4a:	f003 030f 	and.w	r3, r3, #15
 8004c4e:	687a      	ldr	r2, [r7, #4]
 8004c50:	7912      	ldrb	r2, [r2, #4]
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d901      	bls.n	8004c5a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	e040      	b.n	8004cdc <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004c5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	da0e      	bge.n	8004c80 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c62:	78fb      	ldrb	r3, [r7, #3]
 8004c64:	f003 0207 	and.w	r2, r3, #7
 8004c68:	4613      	mov	r3, r2
 8004c6a:	009b      	lsls	r3, r3, #2
 8004c6c:	4413      	add	r3, r2
 8004c6e:	00db      	lsls	r3, r3, #3
 8004c70:	3310      	adds	r3, #16
 8004c72:	687a      	ldr	r2, [r7, #4]
 8004c74:	4413      	add	r3, r2
 8004c76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	705a      	strb	r2, [r3, #1]
 8004c7e:	e00e      	b.n	8004c9e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c80:	78fb      	ldrb	r3, [r7, #3]
 8004c82:	f003 0207 	and.w	r2, r3, #7
 8004c86:	4613      	mov	r3, r2
 8004c88:	009b      	lsls	r3, r3, #2
 8004c8a:	4413      	add	r3, r2
 8004c8c:	00db      	lsls	r3, r3, #3
 8004c8e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	4413      	add	r3, r2
 8004c96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004ca4:	78fb      	ldrb	r3, [r7, #3]
 8004ca6:	f003 0307 	and.w	r3, r3, #7
 8004caa:	b2da      	uxtb	r2, r3
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	d101      	bne.n	8004cbe <HAL_PCD_EP_ClrStall+0x82>
 8004cba:	2302      	movs	r3, #2
 8004cbc:	e00e      	b.n	8004cdc <HAL_PCD_EP_ClrStall+0xa0>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	68f9      	ldr	r1, [r7, #12]
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f005 f8d0 	bl	8009e72 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8004cda:	2300      	movs	r3, #0
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	3710      	adds	r7, #16
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}

08004ce4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b092      	sub	sp, #72	@ 0x48
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004cec:	e333      	b.n	8005356 <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004cf6:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004cf8:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8004cfa:	b2db      	uxtb	r3, r3
 8004cfc:	f003 030f 	and.w	r3, r3, #15
 8004d00:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 8004d04:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	f040 8108 	bne.w	8004f1e <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004d0e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8004d10:	f003 0310 	and.w	r3, r3, #16
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d14c      	bne.n	8004db2 <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	881b      	ldrh	r3, [r3, #0]
 8004d1e:	b29b      	uxth	r3, r3
 8004d20:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8004d24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d28:	813b      	strh	r3, [r7, #8]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	893b      	ldrh	r3, [r7, #8]
 8004d30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	3310      	adds	r3, #16
 8004d40:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004d4a:	b29b      	uxth	r3, r3
 8004d4c:	461a      	mov	r2, r3
 8004d4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d50:	781b      	ldrb	r3, [r3, #0]
 8004d52:	00db      	lsls	r3, r3, #3
 8004d54:	4413      	add	r3, r2
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	6812      	ldr	r2, [r2, #0]
 8004d5a:	4413      	add	r3, r2
 8004d5c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004d60:	881b      	ldrh	r3, [r3, #0]
 8004d62:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004d66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d68:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004d6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d6c:	695a      	ldr	r2, [r3, #20]
 8004d6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d70:	69db      	ldr	r3, [r3, #28]
 8004d72:	441a      	add	r2, r3
 8004d74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d76:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004d78:	2100      	movs	r1, #0
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f00a fb73 	bl	800f466 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	7b1b      	ldrb	r3, [r3, #12]
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	f000 82e5 	beq.w	8005356 <PCD_EP_ISR_Handler+0x672>
 8004d8c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d8e:	699b      	ldr	r3, [r3, #24]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	f040 82e0 	bne.w	8005356 <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	7b1b      	ldrb	r3, [r3, #12]
 8004d9a:	b2db      	uxtb	r3, r3
 8004d9c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004da0:	b2da      	uxtb	r2, r3
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2200      	movs	r2, #0
 8004dae:	731a      	strb	r2, [r3, #12]
 8004db0:	e2d1      	b.n	8005356 <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004db8:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	881b      	ldrh	r3, [r3, #0]
 8004dc0:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004dc2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004dc4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d032      	beq.n	8004e32 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004dd4:	b29b      	uxth	r3, r3
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004dda:	781b      	ldrb	r3, [r3, #0]
 8004ddc:	00db      	lsls	r3, r3, #3
 8004dde:	4413      	add	r3, r2
 8004de0:	687a      	ldr	r2, [r7, #4]
 8004de2:	6812      	ldr	r2, [r2, #0]
 8004de4:	4413      	add	r3, r2
 8004de6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004dea:	881b      	ldrh	r3, [r3, #0]
 8004dec:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004df0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004df2:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6818      	ldr	r0, [r3, #0]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8004dfe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e00:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004e02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e04:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004e06:	b29b      	uxth	r3, r3
 8004e08:	f005 f959 	bl	800a0be <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	881b      	ldrh	r3, [r3, #0]
 8004e12:	b29a      	uxth	r2, r3
 8004e14:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8004e18:	4013      	ands	r3, r2
 8004e1a:	817b      	strh	r3, [r7, #10]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	897a      	ldrh	r2, [r7, #10]
 8004e22:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004e26:	b292      	uxth	r2, r2
 8004e28:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f00a faee 	bl	800f40c <HAL_PCD_SetupStageCallback>
 8004e30:	e291      	b.n	8005356 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004e32:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	f280 828d 	bge.w	8005356 <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	881b      	ldrh	r3, [r3, #0]
 8004e42:	b29a      	uxth	r2, r3
 8004e44:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8004e48:	4013      	ands	r3, r2
 8004e4a:	81fb      	strh	r3, [r7, #14]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	89fa      	ldrh	r2, [r7, #14]
 8004e52:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004e56:	b292      	uxth	r2, r2
 8004e58:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	461a      	mov	r2, r3
 8004e66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e68:	781b      	ldrb	r3, [r3, #0]
 8004e6a:	00db      	lsls	r3, r3, #3
 8004e6c:	4413      	add	r3, r2
 8004e6e:	687a      	ldr	r2, [r7, #4]
 8004e70:	6812      	ldr	r2, [r2, #0]
 8004e72:	4413      	add	r3, r2
 8004e74:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004e78:	881b      	ldrh	r3, [r3, #0]
 8004e7a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004e7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e80:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004e82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e84:	69db      	ldr	r3, [r3, #28]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d019      	beq.n	8004ebe <PCD_EP_ISR_Handler+0x1da>
 8004e8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e8c:	695b      	ldr	r3, [r3, #20]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d015      	beq.n	8004ebe <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6818      	ldr	r0, [r3, #0]
 8004e96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e98:	6959      	ldr	r1, [r3, #20]
 8004e9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e9c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004e9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ea0:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	f005 f90b 	bl	800a0be <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004ea8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004eaa:	695a      	ldr	r2, [r3, #20]
 8004eac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004eae:	69db      	ldr	r3, [r3, #28]
 8004eb0:	441a      	add	r2, r3
 8004eb2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004eb4:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004eb6:	2100      	movs	r1, #0
 8004eb8:	6878      	ldr	r0, [r7, #4]
 8004eba:	f00a fab9 	bl	800f430 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	881b      	ldrh	r3, [r3, #0]
 8004ec4:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8004ec6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004ec8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	f040 8242 	bne.w	8005356 <PCD_EP_ISR_Handler+0x672>
 8004ed2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004ed4:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004ed8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004edc:	f000 823b 	beq.w	8005356 <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	881b      	ldrh	r3, [r3, #0]
 8004ee6:	b29b      	uxth	r3, r3
 8004ee8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004eec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ef0:	81bb      	strh	r3, [r7, #12]
 8004ef2:	89bb      	ldrh	r3, [r7, #12]
 8004ef4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004ef8:	81bb      	strh	r3, [r7, #12]
 8004efa:	89bb      	ldrh	r3, [r7, #12]
 8004efc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004f00:	81bb      	strh	r3, [r7, #12]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681a      	ldr	r2, [r3, #0]
 8004f06:	89bb      	ldrh	r3, [r7, #12]
 8004f08:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f0c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f10:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f18:	b29b      	uxth	r3, r3
 8004f1a:	8013      	strh	r3, [r2, #0]
 8004f1c:	e21b      	b.n	8005356 <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	461a      	mov	r2, r3
 8004f24:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	4413      	add	r3, r2
 8004f2c:	881b      	ldrh	r3, [r3, #0]
 8004f2e:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004f30:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	f280 80f1 	bge.w	800511c <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	461a      	mov	r2, r3
 8004f40:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8004f44:	009b      	lsls	r3, r3, #2
 8004f46:	4413      	add	r3, r2
 8004f48:	881b      	ldrh	r3, [r3, #0]
 8004f4a:	b29a      	uxth	r2, r3
 8004f4c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8004f50:	4013      	ands	r3, r2
 8004f52:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	461a      	mov	r2, r3
 8004f5a:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8004f5e:	009b      	lsls	r3, r3, #2
 8004f60:	4413      	add	r3, r2
 8004f62:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004f64:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004f68:	b292      	uxth	r2, r2
 8004f6a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004f6c:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8004f70:	4613      	mov	r3, r2
 8004f72:	009b      	lsls	r3, r3, #2
 8004f74:	4413      	add	r3, r2
 8004f76:	00db      	lsls	r3, r3, #3
 8004f78:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004f7c:	687a      	ldr	r2, [r7, #4]
 8004f7e:	4413      	add	r3, r2
 8004f80:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004f82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f84:	7b1b      	ldrb	r3, [r3, #12]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d123      	bne.n	8004fd2 <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	461a      	mov	r2, r3
 8004f96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f98:	781b      	ldrb	r3, [r3, #0]
 8004f9a:	00db      	lsls	r3, r3, #3
 8004f9c:	4413      	add	r3, r2
 8004f9e:	687a      	ldr	r2, [r7, #4]
 8004fa0:	6812      	ldr	r2, [r2, #0]
 8004fa2:	4413      	add	r3, r2
 8004fa4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004fa8:	881b      	ldrh	r3, [r3, #0]
 8004faa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004fae:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 8004fb2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	f000 808b 	beq.w	80050d2 <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6818      	ldr	r0, [r3, #0]
 8004fc0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004fc2:	6959      	ldr	r1, [r3, #20]
 8004fc4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004fc6:	88da      	ldrh	r2, [r3, #6]
 8004fc8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004fcc:	f005 f877 	bl	800a0be <USB_ReadPMA>
 8004fd0:	e07f      	b.n	80050d2 <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004fd2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004fd4:	78db      	ldrb	r3, [r3, #3]
 8004fd6:	2b02      	cmp	r3, #2
 8004fd8:	d109      	bne.n	8004fee <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004fda:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004fdc:	461a      	mov	r2, r3
 8004fde:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f000 f9c6 	bl	8005372 <HAL_PCD_EP_DB_Receive>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8004fec:	e071      	b.n	80050d2 <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	461a      	mov	r2, r3
 8004ff4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ff6:	781b      	ldrb	r3, [r3, #0]
 8004ff8:	009b      	lsls	r3, r3, #2
 8004ffa:	4413      	add	r3, r2
 8004ffc:	881b      	ldrh	r3, [r3, #0]
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005004:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005008:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	461a      	mov	r2, r3
 8005010:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005012:	781b      	ldrb	r3, [r3, #0]
 8005014:	009b      	lsls	r3, r3, #2
 8005016:	441a      	add	r2, r3
 8005018:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800501a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800501e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005022:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005026:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800502a:	b29b      	uxth	r3, r3
 800502c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	461a      	mov	r2, r3
 8005034:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005036:	781b      	ldrb	r3, [r3, #0]
 8005038:	009b      	lsls	r3, r3, #2
 800503a:	4413      	add	r3, r2
 800503c:	881b      	ldrh	r3, [r3, #0]
 800503e:	b29b      	uxth	r3, r3
 8005040:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005044:	2b00      	cmp	r3, #0
 8005046:	d022      	beq.n	800508e <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005050:	b29b      	uxth	r3, r3
 8005052:	461a      	mov	r2, r3
 8005054:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005056:	781b      	ldrb	r3, [r3, #0]
 8005058:	00db      	lsls	r3, r3, #3
 800505a:	4413      	add	r3, r2
 800505c:	687a      	ldr	r2, [r7, #4]
 800505e:	6812      	ldr	r2, [r2, #0]
 8005060:	4413      	add	r3, r2
 8005062:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005066:	881b      	ldrh	r3, [r3, #0]
 8005068:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800506c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8005070:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005074:	2b00      	cmp	r3, #0
 8005076:	d02c      	beq.n	80050d2 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6818      	ldr	r0, [r3, #0]
 800507c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800507e:	6959      	ldr	r1, [r3, #20]
 8005080:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005082:	891a      	ldrh	r2, [r3, #8]
 8005084:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005088:	f005 f819 	bl	800a0be <USB_ReadPMA>
 800508c:	e021      	b.n	80050d2 <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005096:	b29b      	uxth	r3, r3
 8005098:	461a      	mov	r2, r3
 800509a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800509c:	781b      	ldrb	r3, [r3, #0]
 800509e:	00db      	lsls	r3, r3, #3
 80050a0:	4413      	add	r3, r2
 80050a2:	687a      	ldr	r2, [r7, #4]
 80050a4:	6812      	ldr	r2, [r2, #0]
 80050a6:	4413      	add	r3, r2
 80050a8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80050ac:	881b      	ldrh	r3, [r3, #0]
 80050ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80050b2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 80050b6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d009      	beq.n	80050d2 <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6818      	ldr	r0, [r3, #0]
 80050c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80050c4:	6959      	ldr	r1, [r3, #20]
 80050c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80050c8:	895a      	ldrh	r2, [r3, #10]
 80050ca:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80050ce:	f004 fff6 	bl	800a0be <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80050d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80050d4:	69da      	ldr	r2, [r3, #28]
 80050d6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80050da:	441a      	add	r2, r3
 80050dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80050de:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80050e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80050e2:	695a      	ldr	r2, [r3, #20]
 80050e4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80050e8:	441a      	add	r2, r3
 80050ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80050ec:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80050ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80050f0:	699b      	ldr	r3, [r3, #24]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d005      	beq.n	8005102 <PCD_EP_ISR_Handler+0x41e>
 80050f6:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80050fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80050fc:	691b      	ldr	r3, [r3, #16]
 80050fe:	429a      	cmp	r2, r3
 8005100:	d206      	bcs.n	8005110 <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005102:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005104:	781b      	ldrb	r3, [r3, #0]
 8005106:	4619      	mov	r1, r3
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	f00a f991 	bl	800f430 <HAL_PCD_DataOutStageCallback>
 800510e:	e005      	b.n	800511c <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005116:	4618      	mov	r0, r3
 8005118:	f004 f8ab 	bl	8009272 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800511c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800511e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005122:	2b00      	cmp	r3, #0
 8005124:	f000 8117 	beq.w	8005356 <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 8005128:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800512c:	4613      	mov	r3, r2
 800512e:	009b      	lsls	r3, r3, #2
 8005130:	4413      	add	r3, r2
 8005132:	00db      	lsls	r3, r3, #3
 8005134:	3310      	adds	r3, #16
 8005136:	687a      	ldr	r2, [r7, #4]
 8005138:	4413      	add	r3, r2
 800513a:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	461a      	mov	r2, r3
 8005142:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8005146:	009b      	lsls	r3, r3, #2
 8005148:	4413      	add	r3, r2
 800514a:	881b      	ldrh	r3, [r3, #0]
 800514c:	b29b      	uxth	r3, r3
 800514e:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8005152:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005156:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	461a      	mov	r2, r3
 800515e:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8005162:	009b      	lsls	r3, r3, #2
 8005164:	441a      	add	r2, r3
 8005166:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8005168:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800516c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005170:	b29b      	uxth	r3, r3
 8005172:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8005174:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005176:	78db      	ldrb	r3, [r3, #3]
 8005178:	2b01      	cmp	r3, #1
 800517a:	f040 80a1 	bne.w	80052c0 <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 800517e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005180:	2200      	movs	r2, #0
 8005182:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8005184:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005186:	7b1b      	ldrb	r3, [r3, #12]
 8005188:	2b00      	cmp	r3, #0
 800518a:	f000 8092 	beq.w	80052b2 <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800518e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005190:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005194:	2b00      	cmp	r3, #0
 8005196:	d046      	beq.n	8005226 <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005198:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800519a:	785b      	ldrb	r3, [r3, #1]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d126      	bne.n	80051ee <PCD_EP_ISR_Handler+0x50a>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	617b      	str	r3, [r7, #20]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80051ae:	b29b      	uxth	r3, r3
 80051b0:	461a      	mov	r2, r3
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	4413      	add	r3, r2
 80051b6:	617b      	str	r3, [r7, #20]
 80051b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80051ba:	781b      	ldrb	r3, [r3, #0]
 80051bc:	00da      	lsls	r2, r3, #3
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	4413      	add	r3, r2
 80051c2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80051c6:	613b      	str	r3, [r7, #16]
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	881b      	ldrh	r3, [r3, #0]
 80051cc:	b29b      	uxth	r3, r3
 80051ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80051d2:	b29a      	uxth	r2, r3
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	801a      	strh	r2, [r3, #0]
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	881b      	ldrh	r3, [r3, #0]
 80051dc:	b29b      	uxth	r3, r3
 80051de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051e6:	b29a      	uxth	r2, r3
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	801a      	strh	r2, [r3, #0]
 80051ec:	e061      	b.n	80052b2 <PCD_EP_ISR_Handler+0x5ce>
 80051ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80051f0:	785b      	ldrb	r3, [r3, #1]
 80051f2:	2b01      	cmp	r3, #1
 80051f4:	d15d      	bne.n	80052b2 <PCD_EP_ISR_Handler+0x5ce>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	61fb      	str	r3, [r7, #28]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005204:	b29b      	uxth	r3, r3
 8005206:	461a      	mov	r2, r3
 8005208:	69fb      	ldr	r3, [r7, #28]
 800520a:	4413      	add	r3, r2
 800520c:	61fb      	str	r3, [r7, #28]
 800520e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005210:	781b      	ldrb	r3, [r3, #0]
 8005212:	00da      	lsls	r2, r3, #3
 8005214:	69fb      	ldr	r3, [r7, #28]
 8005216:	4413      	add	r3, r2
 8005218:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800521c:	61bb      	str	r3, [r7, #24]
 800521e:	69bb      	ldr	r3, [r7, #24]
 8005220:	2200      	movs	r2, #0
 8005222:	801a      	strh	r2, [r3, #0]
 8005224:	e045      	b.n	80052b2 <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800522c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800522e:	785b      	ldrb	r3, [r3, #1]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d126      	bne.n	8005282 <PCD_EP_ISR_Handler+0x59e>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	627b      	str	r3, [r7, #36]	@ 0x24
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005242:	b29b      	uxth	r3, r3
 8005244:	461a      	mov	r2, r3
 8005246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005248:	4413      	add	r3, r2
 800524a:	627b      	str	r3, [r7, #36]	@ 0x24
 800524c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800524e:	781b      	ldrb	r3, [r3, #0]
 8005250:	00da      	lsls	r2, r3, #3
 8005252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005254:	4413      	add	r3, r2
 8005256:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800525a:	623b      	str	r3, [r7, #32]
 800525c:	6a3b      	ldr	r3, [r7, #32]
 800525e:	881b      	ldrh	r3, [r3, #0]
 8005260:	b29b      	uxth	r3, r3
 8005262:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005266:	b29a      	uxth	r2, r3
 8005268:	6a3b      	ldr	r3, [r7, #32]
 800526a:	801a      	strh	r2, [r3, #0]
 800526c:	6a3b      	ldr	r3, [r7, #32]
 800526e:	881b      	ldrh	r3, [r3, #0]
 8005270:	b29b      	uxth	r3, r3
 8005272:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005276:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800527a:	b29a      	uxth	r2, r3
 800527c:	6a3b      	ldr	r3, [r7, #32]
 800527e:	801a      	strh	r2, [r3, #0]
 8005280:	e017      	b.n	80052b2 <PCD_EP_ISR_Handler+0x5ce>
 8005282:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005284:	785b      	ldrb	r3, [r3, #1]
 8005286:	2b01      	cmp	r3, #1
 8005288:	d113      	bne.n	80052b2 <PCD_EP_ISR_Handler+0x5ce>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005292:	b29b      	uxth	r3, r3
 8005294:	461a      	mov	r2, r3
 8005296:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005298:	4413      	add	r3, r2
 800529a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800529c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800529e:	781b      	ldrb	r3, [r3, #0]
 80052a0:	00da      	lsls	r2, r3, #3
 80052a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052a4:	4413      	add	r3, r2
 80052a6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80052aa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80052ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052ae:	2200      	movs	r2, #0
 80052b0:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80052b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80052b4:	781b      	ldrb	r3, [r3, #0]
 80052b6:	4619      	mov	r1, r3
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	f00a f8d4 	bl	800f466 <HAL_PCD_DataInStageCallback>
 80052be:	e04a      	b.n	8005356 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80052c0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80052c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d13f      	bne.n	800534a <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80052d2:	b29b      	uxth	r3, r3
 80052d4:	461a      	mov	r2, r3
 80052d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80052d8:	781b      	ldrb	r3, [r3, #0]
 80052da:	00db      	lsls	r3, r3, #3
 80052dc:	4413      	add	r3, r2
 80052de:	687a      	ldr	r2, [r7, #4]
 80052e0:	6812      	ldr	r2, [r2, #0]
 80052e2:	4413      	add	r3, r2
 80052e4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80052e8:	881b      	ldrh	r3, [r3, #0]
 80052ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80052ee:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 80052f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80052f2:	699a      	ldr	r2, [r3, #24]
 80052f4:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d906      	bls.n	8005308 <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 80052fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80052fc:	699a      	ldr	r2, [r3, #24]
 80052fe:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8005300:	1ad2      	subs	r2, r2, r3
 8005302:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005304:	619a      	str	r2, [r3, #24]
 8005306:	e002      	b.n	800530e <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 8005308:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800530a:	2200      	movs	r2, #0
 800530c:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800530e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005310:	699b      	ldr	r3, [r3, #24]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d106      	bne.n	8005324 <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005316:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005318:	781b      	ldrb	r3, [r3, #0]
 800531a:	4619      	mov	r1, r3
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	f00a f8a2 	bl	800f466 <HAL_PCD_DataInStageCallback>
 8005322:	e018      	b.n	8005356 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8005324:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005326:	695a      	ldr	r2, [r3, #20]
 8005328:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800532a:	441a      	add	r2, r3
 800532c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800532e:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8005330:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005332:	69da      	ldr	r2, [r3, #28]
 8005334:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8005336:	441a      	add	r2, r3
 8005338:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800533a:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005342:	4618      	mov	r0, r3
 8005344:	f003 ff95 	bl	8009272 <USB_EPStartXfer>
 8005348:	e005      	b.n	8005356 <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800534a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800534c:	461a      	mov	r2, r3
 800534e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005350:	6878      	ldr	r0, [r7, #4]
 8005352:	f000 f917 	bl	8005584 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800535e:	b29b      	uxth	r3, r3
 8005360:	b21b      	sxth	r3, r3
 8005362:	2b00      	cmp	r3, #0
 8005364:	f6ff acc3 	blt.w	8004cee <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8005368:	2300      	movs	r3, #0
}
 800536a:	4618      	mov	r0, r3
 800536c:	3748      	adds	r7, #72	@ 0x48
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}

08005372 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005372:	b580      	push	{r7, lr}
 8005374:	b088      	sub	sp, #32
 8005376:	af00      	add	r7, sp, #0
 8005378:	60f8      	str	r0, [r7, #12]
 800537a:	60b9      	str	r1, [r7, #8]
 800537c:	4613      	mov	r3, r2
 800537e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005380:	88fb      	ldrh	r3, [r7, #6]
 8005382:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005386:	2b00      	cmp	r3, #0
 8005388:	d07c      	beq.n	8005484 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005392:	b29b      	uxth	r3, r3
 8005394:	461a      	mov	r2, r3
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	781b      	ldrb	r3, [r3, #0]
 800539a:	00db      	lsls	r3, r3, #3
 800539c:	4413      	add	r3, r2
 800539e:	68fa      	ldr	r2, [r7, #12]
 80053a0:	6812      	ldr	r2, [r2, #0]
 80053a2:	4413      	add	r3, r2
 80053a4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80053a8:	881b      	ldrh	r3, [r3, #0]
 80053aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80053ae:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	699a      	ldr	r2, [r3, #24]
 80053b4:	8b7b      	ldrh	r3, [r7, #26]
 80053b6:	429a      	cmp	r2, r3
 80053b8:	d306      	bcc.n	80053c8 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	699a      	ldr	r2, [r3, #24]
 80053be:	8b7b      	ldrh	r3, [r7, #26]
 80053c0:	1ad2      	subs	r2, r2, r3
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	619a      	str	r2, [r3, #24]
 80053c6:	e002      	b.n	80053ce <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	2200      	movs	r2, #0
 80053cc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	699b      	ldr	r3, [r3, #24]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d123      	bne.n	800541e <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	461a      	mov	r2, r3
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	781b      	ldrb	r3, [r3, #0]
 80053e0:	009b      	lsls	r3, r3, #2
 80053e2:	4413      	add	r3, r2
 80053e4:	881b      	ldrh	r3, [r3, #0]
 80053e6:	b29b      	uxth	r3, r3
 80053e8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80053ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053f0:	833b      	strh	r3, [r7, #24]
 80053f2:	8b3b      	ldrh	r3, [r7, #24]
 80053f4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80053f8:	833b      	strh	r3, [r7, #24]
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	461a      	mov	r2, r3
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	781b      	ldrb	r3, [r3, #0]
 8005404:	009b      	lsls	r3, r3, #2
 8005406:	441a      	add	r2, r3
 8005408:	8b3b      	ldrh	r3, [r7, #24]
 800540a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800540e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005412:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005416:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800541a:	b29b      	uxth	r3, r3
 800541c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800541e:	88fb      	ldrh	r3, [r7, #6]
 8005420:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005424:	2b00      	cmp	r3, #0
 8005426:	d01f      	beq.n	8005468 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	461a      	mov	r2, r3
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	781b      	ldrb	r3, [r3, #0]
 8005432:	009b      	lsls	r3, r3, #2
 8005434:	4413      	add	r3, r2
 8005436:	881b      	ldrh	r3, [r3, #0]
 8005438:	b29b      	uxth	r3, r3
 800543a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800543e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005442:	82fb      	strh	r3, [r7, #22]
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	461a      	mov	r2, r3
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	781b      	ldrb	r3, [r3, #0]
 800544e:	009b      	lsls	r3, r3, #2
 8005450:	441a      	add	r2, r3
 8005452:	8afb      	ldrh	r3, [r7, #22]
 8005454:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005458:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800545c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005460:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005464:	b29b      	uxth	r3, r3
 8005466:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005468:	8b7b      	ldrh	r3, [r7, #26]
 800546a:	2b00      	cmp	r3, #0
 800546c:	f000 8085 	beq.w	800557a <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	6818      	ldr	r0, [r3, #0]
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	6959      	ldr	r1, [r3, #20]
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	891a      	ldrh	r2, [r3, #8]
 800547c:	8b7b      	ldrh	r3, [r7, #26]
 800547e:	f004 fe1e 	bl	800a0be <USB_ReadPMA>
 8005482:	e07a      	b.n	800557a <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800548c:	b29b      	uxth	r3, r3
 800548e:	461a      	mov	r2, r3
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	781b      	ldrb	r3, [r3, #0]
 8005494:	00db      	lsls	r3, r3, #3
 8005496:	4413      	add	r3, r2
 8005498:	68fa      	ldr	r2, [r7, #12]
 800549a:	6812      	ldr	r2, [r2, #0]
 800549c:	4413      	add	r3, r2
 800549e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80054a2:	881b      	ldrh	r3, [r3, #0]
 80054a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80054a8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	699a      	ldr	r2, [r3, #24]
 80054ae:	8b7b      	ldrh	r3, [r7, #26]
 80054b0:	429a      	cmp	r2, r3
 80054b2:	d306      	bcc.n	80054c2 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	699a      	ldr	r2, [r3, #24]
 80054b8:	8b7b      	ldrh	r3, [r7, #26]
 80054ba:	1ad2      	subs	r2, r2, r3
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	619a      	str	r2, [r3, #24]
 80054c0:	e002      	b.n	80054c8 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	2200      	movs	r2, #0
 80054c6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	699b      	ldr	r3, [r3, #24]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d123      	bne.n	8005518 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	461a      	mov	r2, r3
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	781b      	ldrb	r3, [r3, #0]
 80054da:	009b      	lsls	r3, r3, #2
 80054dc:	4413      	add	r3, r2
 80054de:	881b      	ldrh	r3, [r3, #0]
 80054e0:	b29b      	uxth	r3, r3
 80054e2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80054e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054ea:	83fb      	strh	r3, [r7, #30]
 80054ec:	8bfb      	ldrh	r3, [r7, #30]
 80054ee:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80054f2:	83fb      	strh	r3, [r7, #30]
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	461a      	mov	r2, r3
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	781b      	ldrb	r3, [r3, #0]
 80054fe:	009b      	lsls	r3, r3, #2
 8005500:	441a      	add	r2, r3
 8005502:	8bfb      	ldrh	r3, [r7, #30]
 8005504:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005508:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800550c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005510:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005514:	b29b      	uxth	r3, r3
 8005516:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8005518:	88fb      	ldrh	r3, [r7, #6]
 800551a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800551e:	2b00      	cmp	r3, #0
 8005520:	d11f      	bne.n	8005562 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	461a      	mov	r2, r3
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	781b      	ldrb	r3, [r3, #0]
 800552c:	009b      	lsls	r3, r3, #2
 800552e:	4413      	add	r3, r2
 8005530:	881b      	ldrh	r3, [r3, #0]
 8005532:	b29b      	uxth	r3, r3
 8005534:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005538:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800553c:	83bb      	strh	r3, [r7, #28]
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	461a      	mov	r2, r3
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	781b      	ldrb	r3, [r3, #0]
 8005548:	009b      	lsls	r3, r3, #2
 800554a:	441a      	add	r2, r3
 800554c:	8bbb      	ldrh	r3, [r7, #28]
 800554e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005552:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005556:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800555a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800555e:	b29b      	uxth	r3, r3
 8005560:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005562:	8b7b      	ldrh	r3, [r7, #26]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d008      	beq.n	800557a <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	6818      	ldr	r0, [r3, #0]
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	6959      	ldr	r1, [r3, #20]
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	895a      	ldrh	r2, [r3, #10]
 8005574:	8b7b      	ldrh	r3, [r7, #26]
 8005576:	f004 fda2 	bl	800a0be <USB_ReadPMA>
    }
  }

  return count;
 800557a:	8b7b      	ldrh	r3, [r7, #26]
}
 800557c:	4618      	mov	r0, r3
 800557e:	3720      	adds	r7, #32
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}

08005584 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b0a6      	sub	sp, #152	@ 0x98
 8005588:	af00      	add	r7, sp, #0
 800558a:	60f8      	str	r0, [r7, #12]
 800558c:	60b9      	str	r1, [r7, #8]
 800558e:	4613      	mov	r3, r2
 8005590:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005592:	88fb      	ldrh	r3, [r7, #6]
 8005594:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005598:	2b00      	cmp	r3, #0
 800559a:	f000 81f7 	beq.w	800598c <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80055a6:	b29b      	uxth	r3, r3
 80055a8:	461a      	mov	r2, r3
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	781b      	ldrb	r3, [r3, #0]
 80055ae:	00db      	lsls	r3, r3, #3
 80055b0:	4413      	add	r3, r2
 80055b2:	68fa      	ldr	r2, [r7, #12]
 80055b4:	6812      	ldr	r2, [r2, #0]
 80055b6:	4413      	add	r3, r2
 80055b8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80055bc:	881b      	ldrh	r3, [r3, #0]
 80055be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055c2:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	699a      	ldr	r2, [r3, #24]
 80055ca:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80055ce:	429a      	cmp	r2, r3
 80055d0:	d907      	bls.n	80055e2 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	699a      	ldr	r2, [r3, #24]
 80055d6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80055da:	1ad2      	subs	r2, r2, r3
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	619a      	str	r2, [r3, #24]
 80055e0:	e002      	b.n	80055e8 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	2200      	movs	r2, #0
 80055e6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	699b      	ldr	r3, [r3, #24]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	f040 80e1 	bne.w	80057b4 <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	785b      	ldrb	r3, [r3, #1]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d126      	bne.n	8005648 <HAL_PCD_EP_DB_Transmit+0xc4>
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	633b      	str	r3, [r7, #48]	@ 0x30
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005608:	b29b      	uxth	r3, r3
 800560a:	461a      	mov	r2, r3
 800560c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800560e:	4413      	add	r3, r2
 8005610:	633b      	str	r3, [r7, #48]	@ 0x30
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	781b      	ldrb	r3, [r3, #0]
 8005616:	00da      	lsls	r2, r3, #3
 8005618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800561a:	4413      	add	r3, r2
 800561c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005620:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005622:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005624:	881b      	ldrh	r3, [r3, #0]
 8005626:	b29b      	uxth	r3, r3
 8005628:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800562c:	b29a      	uxth	r2, r3
 800562e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005630:	801a      	strh	r2, [r3, #0]
 8005632:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005634:	881b      	ldrh	r3, [r3, #0]
 8005636:	b29b      	uxth	r3, r3
 8005638:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800563c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005640:	b29a      	uxth	r2, r3
 8005642:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005644:	801a      	strh	r2, [r3, #0]
 8005646:	e01a      	b.n	800567e <HAL_PCD_EP_DB_Transmit+0xfa>
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	785b      	ldrb	r3, [r3, #1]
 800564c:	2b01      	cmp	r3, #1
 800564e:	d116      	bne.n	800567e <HAL_PCD_EP_DB_Transmit+0xfa>
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800565e:	b29b      	uxth	r3, r3
 8005660:	461a      	mov	r2, r3
 8005662:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005664:	4413      	add	r3, r2
 8005666:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	781b      	ldrb	r3, [r3, #0]
 800566c:	00da      	lsls	r2, r3, #3
 800566e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005670:	4413      	add	r3, r2
 8005672:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005676:	637b      	str	r3, [r7, #52]	@ 0x34
 8005678:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800567a:	2200      	movs	r2, #0
 800567c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	785b      	ldrb	r3, [r3, #1]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d126      	bne.n	80056da <HAL_PCD_EP_DB_Transmit+0x156>
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	623b      	str	r3, [r7, #32]
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800569a:	b29b      	uxth	r3, r3
 800569c:	461a      	mov	r2, r3
 800569e:	6a3b      	ldr	r3, [r7, #32]
 80056a0:	4413      	add	r3, r2
 80056a2:	623b      	str	r3, [r7, #32]
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	781b      	ldrb	r3, [r3, #0]
 80056a8:	00da      	lsls	r2, r3, #3
 80056aa:	6a3b      	ldr	r3, [r7, #32]
 80056ac:	4413      	add	r3, r2
 80056ae:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80056b2:	61fb      	str	r3, [r7, #28]
 80056b4:	69fb      	ldr	r3, [r7, #28]
 80056b6:	881b      	ldrh	r3, [r3, #0]
 80056b8:	b29b      	uxth	r3, r3
 80056ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80056be:	b29a      	uxth	r2, r3
 80056c0:	69fb      	ldr	r3, [r7, #28]
 80056c2:	801a      	strh	r2, [r3, #0]
 80056c4:	69fb      	ldr	r3, [r7, #28]
 80056c6:	881b      	ldrh	r3, [r3, #0]
 80056c8:	b29b      	uxth	r3, r3
 80056ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056d2:	b29a      	uxth	r2, r3
 80056d4:	69fb      	ldr	r3, [r7, #28]
 80056d6:	801a      	strh	r2, [r3, #0]
 80056d8:	e017      	b.n	800570a <HAL_PCD_EP_DB_Transmit+0x186>
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	785b      	ldrb	r3, [r3, #1]
 80056de:	2b01      	cmp	r3, #1
 80056e0:	d113      	bne.n	800570a <HAL_PCD_EP_DB_Transmit+0x186>
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80056ea:	b29b      	uxth	r3, r3
 80056ec:	461a      	mov	r2, r3
 80056ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056f0:	4413      	add	r3, r2
 80056f2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	781b      	ldrb	r3, [r3, #0]
 80056f8:	00da      	lsls	r2, r3, #3
 80056fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056fc:	4413      	add	r3, r2
 80056fe:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005702:	627b      	str	r3, [r7, #36]	@ 0x24
 8005704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005706:	2200      	movs	r2, #0
 8005708:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	78db      	ldrb	r3, [r3, #3]
 800570e:	2b02      	cmp	r3, #2
 8005710:	d123      	bne.n	800575a <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	461a      	mov	r2, r3
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	781b      	ldrb	r3, [r3, #0]
 800571c:	009b      	lsls	r3, r3, #2
 800571e:	4413      	add	r3, r2
 8005720:	881b      	ldrh	r3, [r3, #0]
 8005722:	b29b      	uxth	r3, r3
 8005724:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005728:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800572c:	837b      	strh	r3, [r7, #26]
 800572e:	8b7b      	ldrh	r3, [r7, #26]
 8005730:	f083 0320 	eor.w	r3, r3, #32
 8005734:	837b      	strh	r3, [r7, #26]
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	461a      	mov	r2, r3
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	781b      	ldrb	r3, [r3, #0]
 8005740:	009b      	lsls	r3, r3, #2
 8005742:	441a      	add	r2, r3
 8005744:	8b7b      	ldrh	r3, [r7, #26]
 8005746:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800574a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800574e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005752:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005756:	b29b      	uxth	r3, r3
 8005758:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	781b      	ldrb	r3, [r3, #0]
 800575e:	4619      	mov	r1, r3
 8005760:	68f8      	ldr	r0, [r7, #12]
 8005762:	f009 fe80 	bl	800f466 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005766:	88fb      	ldrh	r3, [r7, #6]
 8005768:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800576c:	2b00      	cmp	r3, #0
 800576e:	d01f      	beq.n	80057b0 <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	461a      	mov	r2, r3
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	781b      	ldrb	r3, [r3, #0]
 800577a:	009b      	lsls	r3, r3, #2
 800577c:	4413      	add	r3, r2
 800577e:	881b      	ldrh	r3, [r3, #0]
 8005780:	b29b      	uxth	r3, r3
 8005782:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005786:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800578a:	833b      	strh	r3, [r7, #24]
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	461a      	mov	r2, r3
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	781b      	ldrb	r3, [r3, #0]
 8005796:	009b      	lsls	r3, r3, #2
 8005798:	441a      	add	r2, r3
 800579a:	8b3b      	ldrh	r3, [r7, #24]
 800579c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80057a0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80057a4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80057a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057ac:	b29b      	uxth	r3, r3
 80057ae:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 80057b0:	2300      	movs	r3, #0
 80057b2:	e31f      	b.n	8005df4 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80057b4:	88fb      	ldrh	r3, [r7, #6]
 80057b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d021      	beq.n	8005802 <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	461a      	mov	r2, r3
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	781b      	ldrb	r3, [r3, #0]
 80057c8:	009b      	lsls	r3, r3, #2
 80057ca:	4413      	add	r3, r2
 80057cc:	881b      	ldrh	r3, [r3, #0]
 80057ce:	b29b      	uxth	r3, r3
 80057d0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80057d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057d8:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	461a      	mov	r2, r3
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	781b      	ldrb	r3, [r3, #0]
 80057e6:	009b      	lsls	r3, r3, #2
 80057e8:	441a      	add	r2, r3
 80057ea:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80057ee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80057f2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80057f6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80057fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057fe:	b29b      	uxth	r3, r3
 8005800:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005808:	2b01      	cmp	r3, #1
 800580a:	f040 82ca 	bne.w	8005da2 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	695a      	ldr	r2, [r3, #20]
 8005812:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005816:	441a      	add	r2, r3
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	69da      	ldr	r2, [r3, #28]
 8005820:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005824:	441a      	add	r2, r3
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	6a1a      	ldr	r2, [r3, #32]
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	691b      	ldr	r3, [r3, #16]
 8005832:	429a      	cmp	r2, r3
 8005834:	d309      	bcc.n	800584a <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	691b      	ldr	r3, [r3, #16]
 800583a:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	6a1a      	ldr	r2, [r3, #32]
 8005840:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005842:	1ad2      	subs	r2, r2, r3
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	621a      	str	r2, [r3, #32]
 8005848:	e015      	b.n	8005876 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	6a1b      	ldr	r3, [r3, #32]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d107      	bne.n	8005862 <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 8005852:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005856:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	2200      	movs	r2, #0
 800585c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8005860:	e009      	b.n	8005876 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	2200      	movs	r2, #0
 8005866:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	6a1b      	ldr	r3, [r3, #32]
 800586e:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	2200      	movs	r2, #0
 8005874:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	785b      	ldrb	r3, [r3, #1]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d15f      	bne.n	800593e <HAL_PCD_EP_DB_Transmit+0x3ba>
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	643b      	str	r3, [r7, #64]	@ 0x40
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800588c:	b29b      	uxth	r3, r3
 800588e:	461a      	mov	r2, r3
 8005890:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005892:	4413      	add	r3, r2
 8005894:	643b      	str	r3, [r7, #64]	@ 0x40
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	781b      	ldrb	r3, [r3, #0]
 800589a:	00da      	lsls	r2, r3, #3
 800589c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800589e:	4413      	add	r3, r2
 80058a0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80058a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80058a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058a8:	881b      	ldrh	r3, [r3, #0]
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80058b0:	b29a      	uxth	r2, r3
 80058b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058b4:	801a      	strh	r2, [r3, #0]
 80058b6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d10a      	bne.n	80058d2 <HAL_PCD_EP_DB_Transmit+0x34e>
 80058bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058be:	881b      	ldrh	r3, [r3, #0]
 80058c0:	b29b      	uxth	r3, r3
 80058c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058ca:	b29a      	uxth	r2, r3
 80058cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058ce:	801a      	strh	r2, [r3, #0]
 80058d0:	e051      	b.n	8005976 <HAL_PCD_EP_DB_Transmit+0x3f2>
 80058d2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80058d4:	2b3e      	cmp	r3, #62	@ 0x3e
 80058d6:	d816      	bhi.n	8005906 <HAL_PCD_EP_DB_Transmit+0x382>
 80058d8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80058da:	085b      	lsrs	r3, r3, #1
 80058dc:	653b      	str	r3, [r7, #80]	@ 0x50
 80058de:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80058e0:	f003 0301 	and.w	r3, r3, #1
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d002      	beq.n	80058ee <HAL_PCD_EP_DB_Transmit+0x36a>
 80058e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80058ea:	3301      	adds	r3, #1
 80058ec:	653b      	str	r3, [r7, #80]	@ 0x50
 80058ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058f0:	881b      	ldrh	r3, [r3, #0]
 80058f2:	b29a      	uxth	r2, r3
 80058f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80058f6:	b29b      	uxth	r3, r3
 80058f8:	029b      	lsls	r3, r3, #10
 80058fa:	b29b      	uxth	r3, r3
 80058fc:	4313      	orrs	r3, r2
 80058fe:	b29a      	uxth	r2, r3
 8005900:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005902:	801a      	strh	r2, [r3, #0]
 8005904:	e037      	b.n	8005976 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8005906:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005908:	095b      	lsrs	r3, r3, #5
 800590a:	653b      	str	r3, [r7, #80]	@ 0x50
 800590c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800590e:	f003 031f 	and.w	r3, r3, #31
 8005912:	2b00      	cmp	r3, #0
 8005914:	d102      	bne.n	800591c <HAL_PCD_EP_DB_Transmit+0x398>
 8005916:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005918:	3b01      	subs	r3, #1
 800591a:	653b      	str	r3, [r7, #80]	@ 0x50
 800591c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800591e:	881b      	ldrh	r3, [r3, #0]
 8005920:	b29a      	uxth	r2, r3
 8005922:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005924:	b29b      	uxth	r3, r3
 8005926:	029b      	lsls	r3, r3, #10
 8005928:	b29b      	uxth	r3, r3
 800592a:	4313      	orrs	r3, r2
 800592c:	b29b      	uxth	r3, r3
 800592e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005932:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005936:	b29a      	uxth	r2, r3
 8005938:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800593a:	801a      	strh	r2, [r3, #0]
 800593c:	e01b      	b.n	8005976 <HAL_PCD_EP_DB_Transmit+0x3f2>
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	785b      	ldrb	r3, [r3, #1]
 8005942:	2b01      	cmp	r3, #1
 8005944:	d117      	bne.n	8005976 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005954:	b29b      	uxth	r3, r3
 8005956:	461a      	mov	r2, r3
 8005958:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800595a:	4413      	add	r3, r2
 800595c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	781b      	ldrb	r3, [r3, #0]
 8005962:	00da      	lsls	r2, r3, #3
 8005964:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005966:	4413      	add	r3, r2
 8005968:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800596c:	647b      	str	r3, [r7, #68]	@ 0x44
 800596e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005970:	b29a      	uxth	r2, r3
 8005972:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005974:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	6818      	ldr	r0, [r3, #0]
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	6959      	ldr	r1, [r3, #20]
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	891a      	ldrh	r2, [r3, #8]
 8005982:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005984:	b29b      	uxth	r3, r3
 8005986:	f004 fb58 	bl	800a03a <USB_WritePMA>
 800598a:	e20a      	b.n	8005da2 <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005994:	b29b      	uxth	r3, r3
 8005996:	461a      	mov	r2, r3
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	781b      	ldrb	r3, [r3, #0]
 800599c:	00db      	lsls	r3, r3, #3
 800599e:	4413      	add	r3, r2
 80059a0:	68fa      	ldr	r2, [r7, #12]
 80059a2:	6812      	ldr	r2, [r2, #0]
 80059a4:	4413      	add	r3, r2
 80059a6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80059aa:	881b      	ldrh	r3, [r3, #0]
 80059ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80059b0:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	699a      	ldr	r2, [r3, #24]
 80059b8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80059bc:	429a      	cmp	r2, r3
 80059be:	d307      	bcc.n	80059d0 <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	699a      	ldr	r2, [r3, #24]
 80059c4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80059c8:	1ad2      	subs	r2, r2, r3
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	619a      	str	r2, [r3, #24]
 80059ce:	e002      	b.n	80059d6 <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	2200      	movs	r2, #0
 80059d4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	699b      	ldr	r3, [r3, #24]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	f040 80f6 	bne.w	8005bcc <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	785b      	ldrb	r3, [r3, #1]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d126      	bne.n	8005a36 <HAL_PCD_EP_DB_Transmit+0x4b2>
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	677b      	str	r3, [r7, #116]	@ 0x74
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80059f6:	b29b      	uxth	r3, r3
 80059f8:	461a      	mov	r2, r3
 80059fa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80059fc:	4413      	add	r3, r2
 80059fe:	677b      	str	r3, [r7, #116]	@ 0x74
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	781b      	ldrb	r3, [r3, #0]
 8005a04:	00da      	lsls	r2, r3, #3
 8005a06:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005a08:	4413      	add	r3, r2
 8005a0a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005a0e:	673b      	str	r3, [r7, #112]	@ 0x70
 8005a10:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005a12:	881b      	ldrh	r3, [r3, #0]
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a1a:	b29a      	uxth	r2, r3
 8005a1c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005a1e:	801a      	strh	r2, [r3, #0]
 8005a20:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005a22:	881b      	ldrh	r3, [r3, #0]
 8005a24:	b29b      	uxth	r3, r3
 8005a26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a2e:	b29a      	uxth	r2, r3
 8005a30:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005a32:	801a      	strh	r2, [r3, #0]
 8005a34:	e01a      	b.n	8005a6c <HAL_PCD_EP_DB_Transmit+0x4e8>
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	785b      	ldrb	r3, [r3, #1]
 8005a3a:	2b01      	cmp	r3, #1
 8005a3c:	d116      	bne.n	8005a6c <HAL_PCD_EP_DB_Transmit+0x4e8>
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a4c:	b29b      	uxth	r3, r3
 8005a4e:	461a      	mov	r2, r3
 8005a50:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005a52:	4413      	add	r3, r2
 8005a54:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	781b      	ldrb	r3, [r3, #0]
 8005a5a:	00da      	lsls	r2, r3, #3
 8005a5c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005a5e:	4413      	add	r3, r2
 8005a60:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005a64:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005a66:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005a68:	2200      	movs	r2, #0
 8005a6a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	785b      	ldrb	r3, [r3, #1]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d12f      	bne.n	8005adc <HAL_PCD_EP_DB_Transmit+0x558>
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a8c:	b29b      	uxth	r3, r3
 8005a8e:	461a      	mov	r2, r3
 8005a90:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005a94:	4413      	add	r3, r2
 8005a96:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	781b      	ldrb	r3, [r3, #0]
 8005a9e:	00da      	lsls	r2, r3, #3
 8005aa0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005aa4:	4413      	add	r3, r2
 8005aa6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005aaa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005aae:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005ab2:	881b      	ldrh	r3, [r3, #0]
 8005ab4:	b29b      	uxth	r3, r3
 8005ab6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005aba:	b29a      	uxth	r2, r3
 8005abc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005ac0:	801a      	strh	r2, [r3, #0]
 8005ac2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005ac6:	881b      	ldrh	r3, [r3, #0]
 8005ac8:	b29b      	uxth	r3, r3
 8005aca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ace:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ad2:	b29a      	uxth	r2, r3
 8005ad4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005ad8:	801a      	strh	r2, [r3, #0]
 8005ada:	e01c      	b.n	8005b16 <HAL_PCD_EP_DB_Transmit+0x592>
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	785b      	ldrb	r3, [r3, #1]
 8005ae0:	2b01      	cmp	r3, #1
 8005ae2:	d118      	bne.n	8005b16 <HAL_PCD_EP_DB_Transmit+0x592>
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005aec:	b29b      	uxth	r3, r3
 8005aee:	461a      	mov	r2, r3
 8005af0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005af4:	4413      	add	r3, r2
 8005af6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	781b      	ldrb	r3, [r3, #0]
 8005afe:	00da      	lsls	r2, r3, #3
 8005b00:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005b04:	4413      	add	r3, r2
 8005b06:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005b0a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005b0e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005b12:	2200      	movs	r2, #0
 8005b14:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	78db      	ldrb	r3, [r3, #3]
 8005b1a:	2b02      	cmp	r3, #2
 8005b1c:	d127      	bne.n	8005b6e <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	461a      	mov	r2, r3
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	781b      	ldrb	r3, [r3, #0]
 8005b28:	009b      	lsls	r3, r3, #2
 8005b2a:	4413      	add	r3, r2
 8005b2c:	881b      	ldrh	r3, [r3, #0]
 8005b2e:	b29b      	uxth	r3, r3
 8005b30:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b34:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b38:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8005b3c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8005b40:	f083 0320 	eor.w	r3, r3, #32
 8005b44:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	461a      	mov	r2, r3
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	781b      	ldrb	r3, [r3, #0]
 8005b52:	009b      	lsls	r3, r3, #2
 8005b54:	441a      	add	r2, r3
 8005b56:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8005b5a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b5e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b62:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b6a:	b29b      	uxth	r3, r3
 8005b6c:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	781b      	ldrb	r3, [r3, #0]
 8005b72:	4619      	mov	r1, r3
 8005b74:	68f8      	ldr	r0, [r7, #12]
 8005b76:	f009 fc76 	bl	800f466 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005b7a:	88fb      	ldrh	r3, [r7, #6]
 8005b7c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d121      	bne.n	8005bc8 <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	461a      	mov	r2, r3
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	781b      	ldrb	r3, [r3, #0]
 8005b8e:	009b      	lsls	r3, r3, #2
 8005b90:	4413      	add	r3, r2
 8005b92:	881b      	ldrh	r3, [r3, #0]
 8005b94:	b29b      	uxth	r3, r3
 8005b96:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b9e:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	781b      	ldrb	r3, [r3, #0]
 8005bac:	009b      	lsls	r3, r3, #2
 8005bae:	441a      	add	r2, r3
 8005bb0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8005bb4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005bb8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005bbc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005bc0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005bc4:	b29b      	uxth	r3, r3
 8005bc6:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	e113      	b.n	8005df4 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005bcc:	88fb      	ldrh	r3, [r7, #6]
 8005bce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d121      	bne.n	8005c1a <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	461a      	mov	r2, r3
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	781b      	ldrb	r3, [r3, #0]
 8005be0:	009b      	lsls	r3, r3, #2
 8005be2:	4413      	add	r3, r2
 8005be4:	881b      	ldrh	r3, [r3, #0]
 8005be6:	b29b      	uxth	r3, r3
 8005be8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005bec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bf0:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	461a      	mov	r2, r3
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	781b      	ldrb	r3, [r3, #0]
 8005bfe:	009b      	lsls	r3, r3, #2
 8005c00:	441a      	add	r2, r3
 8005c02:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8005c06:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c0a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c0e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005c12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c16:	b29b      	uxth	r3, r3
 8005c18:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	f040 80be 	bne.w	8005da2 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	695a      	ldr	r2, [r3, #20]
 8005c2a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005c2e:	441a      	add	r2, r3
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	69da      	ldr	r2, [r3, #28]
 8005c38:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005c3c:	441a      	add	r2, r3
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	6a1a      	ldr	r2, [r3, #32]
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	691b      	ldr	r3, [r3, #16]
 8005c4a:	429a      	cmp	r2, r3
 8005c4c:	d309      	bcc.n	8005c62 <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	691b      	ldr	r3, [r3, #16]
 8005c52:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	6a1a      	ldr	r2, [r3, #32]
 8005c58:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005c5a:	1ad2      	subs	r2, r2, r3
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	621a      	str	r2, [r3, #32]
 8005c60:	e015      	b.n	8005c8e <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	6a1b      	ldr	r3, [r3, #32]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d107      	bne.n	8005c7a <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 8005c6a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005c6e:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	2200      	movs	r2, #0
 8005c74:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8005c78:	e009      	b.n	8005c8e <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	6a1b      	ldr	r3, [r3, #32]
 8005c7e:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	2200      	movs	r2, #0
 8005c84:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	785b      	ldrb	r3, [r3, #1]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d15f      	bne.n	8005d5c <HAL_PCD_EP_DB_Transmit+0x7d8>
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	461a      	mov	r2, r3
 8005cae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005cb0:	4413      	add	r3, r2
 8005cb2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	781b      	ldrb	r3, [r3, #0]
 8005cb8:	00da      	lsls	r2, r3, #3
 8005cba:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005cbc:	4413      	add	r3, r2
 8005cbe:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005cc2:	667b      	str	r3, [r7, #100]	@ 0x64
 8005cc4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005cc6:	881b      	ldrh	r3, [r3, #0]
 8005cc8:	b29b      	uxth	r3, r3
 8005cca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005cce:	b29a      	uxth	r2, r3
 8005cd0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005cd2:	801a      	strh	r2, [r3, #0]
 8005cd4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d10a      	bne.n	8005cf0 <HAL_PCD_EP_DB_Transmit+0x76c>
 8005cda:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005cdc:	881b      	ldrh	r3, [r3, #0]
 8005cde:	b29b      	uxth	r3, r3
 8005ce0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ce4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ce8:	b29a      	uxth	r2, r3
 8005cea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005cec:	801a      	strh	r2, [r3, #0]
 8005cee:	e04e      	b.n	8005d8e <HAL_PCD_EP_DB_Transmit+0x80a>
 8005cf0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005cf2:	2b3e      	cmp	r3, #62	@ 0x3e
 8005cf4:	d816      	bhi.n	8005d24 <HAL_PCD_EP_DB_Transmit+0x7a0>
 8005cf6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005cf8:	085b      	lsrs	r3, r3, #1
 8005cfa:	663b      	str	r3, [r7, #96]	@ 0x60
 8005cfc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005cfe:	f003 0301 	and.w	r3, r3, #1
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d002      	beq.n	8005d0c <HAL_PCD_EP_DB_Transmit+0x788>
 8005d06:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005d08:	3301      	adds	r3, #1
 8005d0a:	663b      	str	r3, [r7, #96]	@ 0x60
 8005d0c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005d0e:	881b      	ldrh	r3, [r3, #0]
 8005d10:	b29a      	uxth	r2, r3
 8005d12:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005d14:	b29b      	uxth	r3, r3
 8005d16:	029b      	lsls	r3, r3, #10
 8005d18:	b29b      	uxth	r3, r3
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	b29a      	uxth	r2, r3
 8005d1e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005d20:	801a      	strh	r2, [r3, #0]
 8005d22:	e034      	b.n	8005d8e <HAL_PCD_EP_DB_Transmit+0x80a>
 8005d24:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005d26:	095b      	lsrs	r3, r3, #5
 8005d28:	663b      	str	r3, [r7, #96]	@ 0x60
 8005d2a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005d2c:	f003 031f 	and.w	r3, r3, #31
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d102      	bne.n	8005d3a <HAL_PCD_EP_DB_Transmit+0x7b6>
 8005d34:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005d36:	3b01      	subs	r3, #1
 8005d38:	663b      	str	r3, [r7, #96]	@ 0x60
 8005d3a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005d3c:	881b      	ldrh	r3, [r3, #0]
 8005d3e:	b29a      	uxth	r2, r3
 8005d40:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005d42:	b29b      	uxth	r3, r3
 8005d44:	029b      	lsls	r3, r3, #10
 8005d46:	b29b      	uxth	r3, r3
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	b29b      	uxth	r3, r3
 8005d4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d54:	b29a      	uxth	r2, r3
 8005d56:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005d58:	801a      	strh	r2, [r3, #0]
 8005d5a:	e018      	b.n	8005d8e <HAL_PCD_EP_DB_Transmit+0x80a>
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	785b      	ldrb	r3, [r3, #1]
 8005d60:	2b01      	cmp	r3, #1
 8005d62:	d114      	bne.n	8005d8e <HAL_PCD_EP_DB_Transmit+0x80a>
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d6c:	b29b      	uxth	r3, r3
 8005d6e:	461a      	mov	r2, r3
 8005d70:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005d72:	4413      	add	r3, r2
 8005d74:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	781b      	ldrb	r3, [r3, #0]
 8005d7a:	00da      	lsls	r2, r3, #3
 8005d7c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005d7e:	4413      	add	r3, r2
 8005d80:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005d84:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005d86:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005d88:	b29a      	uxth	r2, r3
 8005d8a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005d8c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	6818      	ldr	r0, [r3, #0]
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	6959      	ldr	r1, [r3, #20]
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	895a      	ldrh	r2, [r3, #10]
 8005d9a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005d9c:	b29b      	uxth	r3, r3
 8005d9e:	f004 f94c 	bl	800a03a <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	461a      	mov	r2, r3
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	781b      	ldrb	r3, [r3, #0]
 8005dac:	009b      	lsls	r3, r3, #2
 8005dae:	4413      	add	r3, r2
 8005db0:	881b      	ldrh	r3, [r3, #0]
 8005db2:	b29b      	uxth	r3, r3
 8005db4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005db8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005dbc:	82fb      	strh	r3, [r7, #22]
 8005dbe:	8afb      	ldrh	r3, [r7, #22]
 8005dc0:	f083 0310 	eor.w	r3, r3, #16
 8005dc4:	82fb      	strh	r3, [r7, #22]
 8005dc6:	8afb      	ldrh	r3, [r7, #22]
 8005dc8:	f083 0320 	eor.w	r3, r3, #32
 8005dcc:	82fb      	strh	r3, [r7, #22]
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	461a      	mov	r2, r3
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	781b      	ldrb	r3, [r3, #0]
 8005dd8:	009b      	lsls	r3, r3, #2
 8005dda:	441a      	add	r2, r3
 8005ddc:	8afb      	ldrh	r3, [r7, #22]
 8005dde:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005de2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005de6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005dea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005dee:	b29b      	uxth	r3, r3
 8005df0:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8005df2:	2300      	movs	r3, #0
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	3798      	adds	r7, #152	@ 0x98
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}

08005dfc <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b087      	sub	sp, #28
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	60f8      	str	r0, [r7, #12]
 8005e04:	607b      	str	r3, [r7, #4]
 8005e06:	460b      	mov	r3, r1
 8005e08:	817b      	strh	r3, [r7, #10]
 8005e0a:	4613      	mov	r3, r2
 8005e0c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005e0e:	897b      	ldrh	r3, [r7, #10]
 8005e10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e14:	b29b      	uxth	r3, r3
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d00b      	beq.n	8005e32 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005e1a:	897b      	ldrh	r3, [r7, #10]
 8005e1c:	f003 0207 	and.w	r2, r3, #7
 8005e20:	4613      	mov	r3, r2
 8005e22:	009b      	lsls	r3, r3, #2
 8005e24:	4413      	add	r3, r2
 8005e26:	00db      	lsls	r3, r3, #3
 8005e28:	3310      	adds	r3, #16
 8005e2a:	68fa      	ldr	r2, [r7, #12]
 8005e2c:	4413      	add	r3, r2
 8005e2e:	617b      	str	r3, [r7, #20]
 8005e30:	e009      	b.n	8005e46 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005e32:	897a      	ldrh	r2, [r7, #10]
 8005e34:	4613      	mov	r3, r2
 8005e36:	009b      	lsls	r3, r3, #2
 8005e38:	4413      	add	r3, r2
 8005e3a:	00db      	lsls	r3, r3, #3
 8005e3c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005e40:	68fa      	ldr	r2, [r7, #12]
 8005e42:	4413      	add	r3, r2
 8005e44:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005e46:	893b      	ldrh	r3, [r7, #8]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d107      	bne.n	8005e5c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	b29a      	uxth	r2, r3
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	80da      	strh	r2, [r3, #6]
 8005e5a:	e00b      	b.n	8005e74 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	2201      	movs	r2, #1
 8005e60:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	b29a      	uxth	r2, r3
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	0c1b      	lsrs	r3, r3, #16
 8005e6e:	b29a      	uxth	r2, r3
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005e74:	2300      	movs	r3, #0
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	371c      	adds	r7, #28
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e80:	4770      	bx	lr

08005e82 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005e82:	b480      	push	{r7}
 8005e84:	b085      	sub	sp, #20
 8005e86:	af00      	add	r7, sp, #0
 8005e88:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2201      	movs	r2, #1
 8005e94:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8005ea6:	b29b      	uxth	r3, r3
 8005ea8:	f043 0301 	orr.w	r3, r3, #1
 8005eac:	b29a      	uxth	r2, r3
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8005eba:	b29b      	uxth	r3, r3
 8005ebc:	f043 0302 	orr.w	r3, r3, #2
 8005ec0:	b29a      	uxth	r2, r3
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8005ec8:	2300      	movs	r3, #0
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	3714      	adds	r7, #20
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed4:	4770      	bx	lr
	...

08005ed8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b085      	sub	sp, #20
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d141      	bne.n	8005f6a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005ee6:	4b4b      	ldr	r3, [pc, #300]	@ (8006014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005eee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ef2:	d131      	bne.n	8005f58 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005ef4:	4b47      	ldr	r3, [pc, #284]	@ (8006014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ef6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005efa:	4a46      	ldr	r2, [pc, #280]	@ (8006014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005efc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005f00:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005f04:	4b43      	ldr	r3, [pc, #268]	@ (8006014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005f0c:	4a41      	ldr	r2, [pc, #260]	@ (8006014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f0e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005f12:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005f14:	4b40      	ldr	r3, [pc, #256]	@ (8006018 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	2232      	movs	r2, #50	@ 0x32
 8005f1a:	fb02 f303 	mul.w	r3, r2, r3
 8005f1e:	4a3f      	ldr	r2, [pc, #252]	@ (800601c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005f20:	fba2 2303 	umull	r2, r3, r2, r3
 8005f24:	0c9b      	lsrs	r3, r3, #18
 8005f26:	3301      	adds	r3, #1
 8005f28:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005f2a:	e002      	b.n	8005f32 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	3b01      	subs	r3, #1
 8005f30:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005f32:	4b38      	ldr	r3, [pc, #224]	@ (8006014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f34:	695b      	ldr	r3, [r3, #20]
 8005f36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f3e:	d102      	bne.n	8005f46 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d1f2      	bne.n	8005f2c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005f46:	4b33      	ldr	r3, [pc, #204]	@ (8006014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f48:	695b      	ldr	r3, [r3, #20]
 8005f4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f52:	d158      	bne.n	8006006 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005f54:	2303      	movs	r3, #3
 8005f56:	e057      	b.n	8006008 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005f58:	4b2e      	ldr	r3, [pc, #184]	@ (8006014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f5e:	4a2d      	ldr	r2, [pc, #180]	@ (8006014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f60:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005f64:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005f68:	e04d      	b.n	8006006 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f70:	d141      	bne.n	8005ff6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005f72:	4b28      	ldr	r3, [pc, #160]	@ (8006014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005f7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f7e:	d131      	bne.n	8005fe4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005f80:	4b24      	ldr	r3, [pc, #144]	@ (8006014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f86:	4a23      	ldr	r2, [pc, #140]	@ (8006014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f8c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005f90:	4b20      	ldr	r3, [pc, #128]	@ (8006014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005f98:	4a1e      	ldr	r2, [pc, #120]	@ (8006014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f9a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005f9e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005fa0:	4b1d      	ldr	r3, [pc, #116]	@ (8006018 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	2232      	movs	r2, #50	@ 0x32
 8005fa6:	fb02 f303 	mul.w	r3, r2, r3
 8005faa:	4a1c      	ldr	r2, [pc, #112]	@ (800601c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005fac:	fba2 2303 	umull	r2, r3, r2, r3
 8005fb0:	0c9b      	lsrs	r3, r3, #18
 8005fb2:	3301      	adds	r3, #1
 8005fb4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005fb6:	e002      	b.n	8005fbe <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	3b01      	subs	r3, #1
 8005fbc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005fbe:	4b15      	ldr	r3, [pc, #84]	@ (8006014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005fc0:	695b      	ldr	r3, [r3, #20]
 8005fc2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005fc6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005fca:	d102      	bne.n	8005fd2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d1f2      	bne.n	8005fb8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005fd2:	4b10      	ldr	r3, [pc, #64]	@ (8006014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005fd4:	695b      	ldr	r3, [r3, #20]
 8005fd6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005fda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005fde:	d112      	bne.n	8006006 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005fe0:	2303      	movs	r3, #3
 8005fe2:	e011      	b.n	8006008 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005fe4:	4b0b      	ldr	r3, [pc, #44]	@ (8006014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005fe6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005fea:	4a0a      	ldr	r2, [pc, #40]	@ (8006014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005fec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ff0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005ff4:	e007      	b.n	8006006 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005ff6:	4b07      	ldr	r3, [pc, #28]	@ (8006014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005ffe:	4a05      	ldr	r2, [pc, #20]	@ (8006014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006000:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006004:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006006:	2300      	movs	r3, #0
}
 8006008:	4618      	mov	r0, r3
 800600a:	3714      	adds	r7, #20
 800600c:	46bd      	mov	sp, r7
 800600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006012:	4770      	bx	lr
 8006014:	40007000 	.word	0x40007000
 8006018:	20000020 	.word	0x20000020
 800601c:	431bde83 	.word	0x431bde83

08006020 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8006020:	b480      	push	{r7}
 8006022:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006024:	4b05      	ldr	r3, [pc, #20]	@ (800603c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006026:	689b      	ldr	r3, [r3, #8]
 8006028:	4a04      	ldr	r2, [pc, #16]	@ (800603c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800602a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800602e:	6093      	str	r3, [r2, #8]
}
 8006030:	bf00      	nop
 8006032:	46bd      	mov	sp, r7
 8006034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006038:	4770      	bx	lr
 800603a:	bf00      	nop
 800603c:	40007000 	.word	0x40007000

08006040 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b088      	sub	sp, #32
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d101      	bne.n	8006052 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800604e:	2301      	movs	r3, #1
 8006050:	e2fe      	b.n	8006650 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f003 0301 	and.w	r3, r3, #1
 800605a:	2b00      	cmp	r3, #0
 800605c:	d075      	beq.n	800614a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800605e:	4b97      	ldr	r3, [pc, #604]	@ (80062bc <HAL_RCC_OscConfig+0x27c>)
 8006060:	689b      	ldr	r3, [r3, #8]
 8006062:	f003 030c 	and.w	r3, r3, #12
 8006066:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006068:	4b94      	ldr	r3, [pc, #592]	@ (80062bc <HAL_RCC_OscConfig+0x27c>)
 800606a:	68db      	ldr	r3, [r3, #12]
 800606c:	f003 0303 	and.w	r3, r3, #3
 8006070:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006072:	69bb      	ldr	r3, [r7, #24]
 8006074:	2b0c      	cmp	r3, #12
 8006076:	d102      	bne.n	800607e <HAL_RCC_OscConfig+0x3e>
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	2b03      	cmp	r3, #3
 800607c:	d002      	beq.n	8006084 <HAL_RCC_OscConfig+0x44>
 800607e:	69bb      	ldr	r3, [r7, #24]
 8006080:	2b08      	cmp	r3, #8
 8006082:	d10b      	bne.n	800609c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006084:	4b8d      	ldr	r3, [pc, #564]	@ (80062bc <HAL_RCC_OscConfig+0x27c>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800608c:	2b00      	cmp	r3, #0
 800608e:	d05b      	beq.n	8006148 <HAL_RCC_OscConfig+0x108>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d157      	bne.n	8006148 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006098:	2301      	movs	r3, #1
 800609a:	e2d9      	b.n	8006650 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060a4:	d106      	bne.n	80060b4 <HAL_RCC_OscConfig+0x74>
 80060a6:	4b85      	ldr	r3, [pc, #532]	@ (80062bc <HAL_RCC_OscConfig+0x27c>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a84      	ldr	r2, [pc, #528]	@ (80062bc <HAL_RCC_OscConfig+0x27c>)
 80060ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80060b0:	6013      	str	r3, [r2, #0]
 80060b2:	e01d      	b.n	80060f0 <HAL_RCC_OscConfig+0xb0>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80060bc:	d10c      	bne.n	80060d8 <HAL_RCC_OscConfig+0x98>
 80060be:	4b7f      	ldr	r3, [pc, #508]	@ (80062bc <HAL_RCC_OscConfig+0x27c>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a7e      	ldr	r2, [pc, #504]	@ (80062bc <HAL_RCC_OscConfig+0x27c>)
 80060c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80060c8:	6013      	str	r3, [r2, #0]
 80060ca:	4b7c      	ldr	r3, [pc, #496]	@ (80062bc <HAL_RCC_OscConfig+0x27c>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a7b      	ldr	r2, [pc, #492]	@ (80062bc <HAL_RCC_OscConfig+0x27c>)
 80060d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80060d4:	6013      	str	r3, [r2, #0]
 80060d6:	e00b      	b.n	80060f0 <HAL_RCC_OscConfig+0xb0>
 80060d8:	4b78      	ldr	r3, [pc, #480]	@ (80062bc <HAL_RCC_OscConfig+0x27c>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a77      	ldr	r2, [pc, #476]	@ (80062bc <HAL_RCC_OscConfig+0x27c>)
 80060de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80060e2:	6013      	str	r3, [r2, #0]
 80060e4:	4b75      	ldr	r3, [pc, #468]	@ (80062bc <HAL_RCC_OscConfig+0x27c>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a74      	ldr	r2, [pc, #464]	@ (80062bc <HAL_RCC_OscConfig+0x27c>)
 80060ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80060ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	685b      	ldr	r3, [r3, #4]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d013      	beq.n	8006120 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060f8:	f7fd fd6e 	bl	8003bd8 <HAL_GetTick>
 80060fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80060fe:	e008      	b.n	8006112 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006100:	f7fd fd6a 	bl	8003bd8 <HAL_GetTick>
 8006104:	4602      	mov	r2, r0
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	1ad3      	subs	r3, r2, r3
 800610a:	2b64      	cmp	r3, #100	@ 0x64
 800610c:	d901      	bls.n	8006112 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800610e:	2303      	movs	r3, #3
 8006110:	e29e      	b.n	8006650 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006112:	4b6a      	ldr	r3, [pc, #424]	@ (80062bc <HAL_RCC_OscConfig+0x27c>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800611a:	2b00      	cmp	r3, #0
 800611c:	d0f0      	beq.n	8006100 <HAL_RCC_OscConfig+0xc0>
 800611e:	e014      	b.n	800614a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006120:	f7fd fd5a 	bl	8003bd8 <HAL_GetTick>
 8006124:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006126:	e008      	b.n	800613a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006128:	f7fd fd56 	bl	8003bd8 <HAL_GetTick>
 800612c:	4602      	mov	r2, r0
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	1ad3      	subs	r3, r2, r3
 8006132:	2b64      	cmp	r3, #100	@ 0x64
 8006134:	d901      	bls.n	800613a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006136:	2303      	movs	r3, #3
 8006138:	e28a      	b.n	8006650 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800613a:	4b60      	ldr	r3, [pc, #384]	@ (80062bc <HAL_RCC_OscConfig+0x27c>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006142:	2b00      	cmp	r3, #0
 8006144:	d1f0      	bne.n	8006128 <HAL_RCC_OscConfig+0xe8>
 8006146:	e000      	b.n	800614a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006148:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f003 0302 	and.w	r3, r3, #2
 8006152:	2b00      	cmp	r3, #0
 8006154:	d075      	beq.n	8006242 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006156:	4b59      	ldr	r3, [pc, #356]	@ (80062bc <HAL_RCC_OscConfig+0x27c>)
 8006158:	689b      	ldr	r3, [r3, #8]
 800615a:	f003 030c 	and.w	r3, r3, #12
 800615e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006160:	4b56      	ldr	r3, [pc, #344]	@ (80062bc <HAL_RCC_OscConfig+0x27c>)
 8006162:	68db      	ldr	r3, [r3, #12]
 8006164:	f003 0303 	and.w	r3, r3, #3
 8006168:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800616a:	69bb      	ldr	r3, [r7, #24]
 800616c:	2b0c      	cmp	r3, #12
 800616e:	d102      	bne.n	8006176 <HAL_RCC_OscConfig+0x136>
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	2b02      	cmp	r3, #2
 8006174:	d002      	beq.n	800617c <HAL_RCC_OscConfig+0x13c>
 8006176:	69bb      	ldr	r3, [r7, #24]
 8006178:	2b04      	cmp	r3, #4
 800617a:	d11f      	bne.n	80061bc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800617c:	4b4f      	ldr	r3, [pc, #316]	@ (80062bc <HAL_RCC_OscConfig+0x27c>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006184:	2b00      	cmp	r3, #0
 8006186:	d005      	beq.n	8006194 <HAL_RCC_OscConfig+0x154>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	68db      	ldr	r3, [r3, #12]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d101      	bne.n	8006194 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006190:	2301      	movs	r3, #1
 8006192:	e25d      	b.n	8006650 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006194:	4b49      	ldr	r3, [pc, #292]	@ (80062bc <HAL_RCC_OscConfig+0x27c>)
 8006196:	685b      	ldr	r3, [r3, #4]
 8006198:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	691b      	ldr	r3, [r3, #16]
 80061a0:	061b      	lsls	r3, r3, #24
 80061a2:	4946      	ldr	r1, [pc, #280]	@ (80062bc <HAL_RCC_OscConfig+0x27c>)
 80061a4:	4313      	orrs	r3, r2
 80061a6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80061a8:	4b45      	ldr	r3, [pc, #276]	@ (80062c0 <HAL_RCC_OscConfig+0x280>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4618      	mov	r0, r3
 80061ae:	f7fd f8bd 	bl	800332c <HAL_InitTick>
 80061b2:	4603      	mov	r3, r0
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d043      	beq.n	8006240 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80061b8:	2301      	movs	r3, #1
 80061ba:	e249      	b.n	8006650 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	68db      	ldr	r3, [r3, #12]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d023      	beq.n	800620c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80061c4:	4b3d      	ldr	r3, [pc, #244]	@ (80062bc <HAL_RCC_OscConfig+0x27c>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a3c      	ldr	r2, [pc, #240]	@ (80062bc <HAL_RCC_OscConfig+0x27c>)
 80061ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80061ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061d0:	f7fd fd02 	bl	8003bd8 <HAL_GetTick>
 80061d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80061d6:	e008      	b.n	80061ea <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80061d8:	f7fd fcfe 	bl	8003bd8 <HAL_GetTick>
 80061dc:	4602      	mov	r2, r0
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	1ad3      	subs	r3, r2, r3
 80061e2:	2b02      	cmp	r3, #2
 80061e4:	d901      	bls.n	80061ea <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80061e6:	2303      	movs	r3, #3
 80061e8:	e232      	b.n	8006650 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80061ea:	4b34      	ldr	r3, [pc, #208]	@ (80062bc <HAL_RCC_OscConfig+0x27c>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d0f0      	beq.n	80061d8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061f6:	4b31      	ldr	r3, [pc, #196]	@ (80062bc <HAL_RCC_OscConfig+0x27c>)
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	691b      	ldr	r3, [r3, #16]
 8006202:	061b      	lsls	r3, r3, #24
 8006204:	492d      	ldr	r1, [pc, #180]	@ (80062bc <HAL_RCC_OscConfig+0x27c>)
 8006206:	4313      	orrs	r3, r2
 8006208:	604b      	str	r3, [r1, #4]
 800620a:	e01a      	b.n	8006242 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800620c:	4b2b      	ldr	r3, [pc, #172]	@ (80062bc <HAL_RCC_OscConfig+0x27c>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a2a      	ldr	r2, [pc, #168]	@ (80062bc <HAL_RCC_OscConfig+0x27c>)
 8006212:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006216:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006218:	f7fd fcde 	bl	8003bd8 <HAL_GetTick>
 800621c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800621e:	e008      	b.n	8006232 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006220:	f7fd fcda 	bl	8003bd8 <HAL_GetTick>
 8006224:	4602      	mov	r2, r0
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	1ad3      	subs	r3, r2, r3
 800622a:	2b02      	cmp	r3, #2
 800622c:	d901      	bls.n	8006232 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800622e:	2303      	movs	r3, #3
 8006230:	e20e      	b.n	8006650 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006232:	4b22      	ldr	r3, [pc, #136]	@ (80062bc <HAL_RCC_OscConfig+0x27c>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800623a:	2b00      	cmp	r3, #0
 800623c:	d1f0      	bne.n	8006220 <HAL_RCC_OscConfig+0x1e0>
 800623e:	e000      	b.n	8006242 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006240:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f003 0308 	and.w	r3, r3, #8
 800624a:	2b00      	cmp	r3, #0
 800624c:	d041      	beq.n	80062d2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	695b      	ldr	r3, [r3, #20]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d01c      	beq.n	8006290 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006256:	4b19      	ldr	r3, [pc, #100]	@ (80062bc <HAL_RCC_OscConfig+0x27c>)
 8006258:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800625c:	4a17      	ldr	r2, [pc, #92]	@ (80062bc <HAL_RCC_OscConfig+0x27c>)
 800625e:	f043 0301 	orr.w	r3, r3, #1
 8006262:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006266:	f7fd fcb7 	bl	8003bd8 <HAL_GetTick>
 800626a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800626c:	e008      	b.n	8006280 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800626e:	f7fd fcb3 	bl	8003bd8 <HAL_GetTick>
 8006272:	4602      	mov	r2, r0
 8006274:	693b      	ldr	r3, [r7, #16]
 8006276:	1ad3      	subs	r3, r2, r3
 8006278:	2b02      	cmp	r3, #2
 800627a:	d901      	bls.n	8006280 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800627c:	2303      	movs	r3, #3
 800627e:	e1e7      	b.n	8006650 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006280:	4b0e      	ldr	r3, [pc, #56]	@ (80062bc <HAL_RCC_OscConfig+0x27c>)
 8006282:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006286:	f003 0302 	and.w	r3, r3, #2
 800628a:	2b00      	cmp	r3, #0
 800628c:	d0ef      	beq.n	800626e <HAL_RCC_OscConfig+0x22e>
 800628e:	e020      	b.n	80062d2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006290:	4b0a      	ldr	r3, [pc, #40]	@ (80062bc <HAL_RCC_OscConfig+0x27c>)
 8006292:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006296:	4a09      	ldr	r2, [pc, #36]	@ (80062bc <HAL_RCC_OscConfig+0x27c>)
 8006298:	f023 0301 	bic.w	r3, r3, #1
 800629c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062a0:	f7fd fc9a 	bl	8003bd8 <HAL_GetTick>
 80062a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80062a6:	e00d      	b.n	80062c4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80062a8:	f7fd fc96 	bl	8003bd8 <HAL_GetTick>
 80062ac:	4602      	mov	r2, r0
 80062ae:	693b      	ldr	r3, [r7, #16]
 80062b0:	1ad3      	subs	r3, r2, r3
 80062b2:	2b02      	cmp	r3, #2
 80062b4:	d906      	bls.n	80062c4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80062b6:	2303      	movs	r3, #3
 80062b8:	e1ca      	b.n	8006650 <HAL_RCC_OscConfig+0x610>
 80062ba:	bf00      	nop
 80062bc:	40021000 	.word	0x40021000
 80062c0:	20000024 	.word	0x20000024
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80062c4:	4b8c      	ldr	r3, [pc, #560]	@ (80064f8 <HAL_RCC_OscConfig+0x4b8>)
 80062c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80062ca:	f003 0302 	and.w	r3, r3, #2
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d1ea      	bne.n	80062a8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f003 0304 	and.w	r3, r3, #4
 80062da:	2b00      	cmp	r3, #0
 80062dc:	f000 80a6 	beq.w	800642c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80062e0:	2300      	movs	r3, #0
 80062e2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80062e4:	4b84      	ldr	r3, [pc, #528]	@ (80064f8 <HAL_RCC_OscConfig+0x4b8>)
 80062e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d101      	bne.n	80062f4 <HAL_RCC_OscConfig+0x2b4>
 80062f0:	2301      	movs	r3, #1
 80062f2:	e000      	b.n	80062f6 <HAL_RCC_OscConfig+0x2b6>
 80062f4:	2300      	movs	r3, #0
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d00d      	beq.n	8006316 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80062fa:	4b7f      	ldr	r3, [pc, #508]	@ (80064f8 <HAL_RCC_OscConfig+0x4b8>)
 80062fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062fe:	4a7e      	ldr	r2, [pc, #504]	@ (80064f8 <HAL_RCC_OscConfig+0x4b8>)
 8006300:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006304:	6593      	str	r3, [r2, #88]	@ 0x58
 8006306:	4b7c      	ldr	r3, [pc, #496]	@ (80064f8 <HAL_RCC_OscConfig+0x4b8>)
 8006308:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800630a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800630e:	60fb      	str	r3, [r7, #12]
 8006310:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006312:	2301      	movs	r3, #1
 8006314:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006316:	4b79      	ldr	r3, [pc, #484]	@ (80064fc <HAL_RCC_OscConfig+0x4bc>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800631e:	2b00      	cmp	r3, #0
 8006320:	d118      	bne.n	8006354 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006322:	4b76      	ldr	r3, [pc, #472]	@ (80064fc <HAL_RCC_OscConfig+0x4bc>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4a75      	ldr	r2, [pc, #468]	@ (80064fc <HAL_RCC_OscConfig+0x4bc>)
 8006328:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800632c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800632e:	f7fd fc53 	bl	8003bd8 <HAL_GetTick>
 8006332:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006334:	e008      	b.n	8006348 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006336:	f7fd fc4f 	bl	8003bd8 <HAL_GetTick>
 800633a:	4602      	mov	r2, r0
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	1ad3      	subs	r3, r2, r3
 8006340:	2b02      	cmp	r3, #2
 8006342:	d901      	bls.n	8006348 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006344:	2303      	movs	r3, #3
 8006346:	e183      	b.n	8006650 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006348:	4b6c      	ldr	r3, [pc, #432]	@ (80064fc <HAL_RCC_OscConfig+0x4bc>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006350:	2b00      	cmp	r3, #0
 8006352:	d0f0      	beq.n	8006336 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	689b      	ldr	r3, [r3, #8]
 8006358:	2b01      	cmp	r3, #1
 800635a:	d108      	bne.n	800636e <HAL_RCC_OscConfig+0x32e>
 800635c:	4b66      	ldr	r3, [pc, #408]	@ (80064f8 <HAL_RCC_OscConfig+0x4b8>)
 800635e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006362:	4a65      	ldr	r2, [pc, #404]	@ (80064f8 <HAL_RCC_OscConfig+0x4b8>)
 8006364:	f043 0301 	orr.w	r3, r3, #1
 8006368:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800636c:	e024      	b.n	80063b8 <HAL_RCC_OscConfig+0x378>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	689b      	ldr	r3, [r3, #8]
 8006372:	2b05      	cmp	r3, #5
 8006374:	d110      	bne.n	8006398 <HAL_RCC_OscConfig+0x358>
 8006376:	4b60      	ldr	r3, [pc, #384]	@ (80064f8 <HAL_RCC_OscConfig+0x4b8>)
 8006378:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800637c:	4a5e      	ldr	r2, [pc, #376]	@ (80064f8 <HAL_RCC_OscConfig+0x4b8>)
 800637e:	f043 0304 	orr.w	r3, r3, #4
 8006382:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006386:	4b5c      	ldr	r3, [pc, #368]	@ (80064f8 <HAL_RCC_OscConfig+0x4b8>)
 8006388:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800638c:	4a5a      	ldr	r2, [pc, #360]	@ (80064f8 <HAL_RCC_OscConfig+0x4b8>)
 800638e:	f043 0301 	orr.w	r3, r3, #1
 8006392:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006396:	e00f      	b.n	80063b8 <HAL_RCC_OscConfig+0x378>
 8006398:	4b57      	ldr	r3, [pc, #348]	@ (80064f8 <HAL_RCC_OscConfig+0x4b8>)
 800639a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800639e:	4a56      	ldr	r2, [pc, #344]	@ (80064f8 <HAL_RCC_OscConfig+0x4b8>)
 80063a0:	f023 0301 	bic.w	r3, r3, #1
 80063a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80063a8:	4b53      	ldr	r3, [pc, #332]	@ (80064f8 <HAL_RCC_OscConfig+0x4b8>)
 80063aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063ae:	4a52      	ldr	r2, [pc, #328]	@ (80064f8 <HAL_RCC_OscConfig+0x4b8>)
 80063b0:	f023 0304 	bic.w	r3, r3, #4
 80063b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	689b      	ldr	r3, [r3, #8]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d016      	beq.n	80063ee <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063c0:	f7fd fc0a 	bl	8003bd8 <HAL_GetTick>
 80063c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80063c6:	e00a      	b.n	80063de <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063c8:	f7fd fc06 	bl	8003bd8 <HAL_GetTick>
 80063cc:	4602      	mov	r2, r0
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	1ad3      	subs	r3, r2, r3
 80063d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d901      	bls.n	80063de <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80063da:	2303      	movs	r3, #3
 80063dc:	e138      	b.n	8006650 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80063de:	4b46      	ldr	r3, [pc, #280]	@ (80064f8 <HAL_RCC_OscConfig+0x4b8>)
 80063e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063e4:	f003 0302 	and.w	r3, r3, #2
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d0ed      	beq.n	80063c8 <HAL_RCC_OscConfig+0x388>
 80063ec:	e015      	b.n	800641a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063ee:	f7fd fbf3 	bl	8003bd8 <HAL_GetTick>
 80063f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80063f4:	e00a      	b.n	800640c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063f6:	f7fd fbef 	bl	8003bd8 <HAL_GetTick>
 80063fa:	4602      	mov	r2, r0
 80063fc:	693b      	ldr	r3, [r7, #16]
 80063fe:	1ad3      	subs	r3, r2, r3
 8006400:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006404:	4293      	cmp	r3, r2
 8006406:	d901      	bls.n	800640c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006408:	2303      	movs	r3, #3
 800640a:	e121      	b.n	8006650 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800640c:	4b3a      	ldr	r3, [pc, #232]	@ (80064f8 <HAL_RCC_OscConfig+0x4b8>)
 800640e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006412:	f003 0302 	and.w	r3, r3, #2
 8006416:	2b00      	cmp	r3, #0
 8006418:	d1ed      	bne.n	80063f6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800641a:	7ffb      	ldrb	r3, [r7, #31]
 800641c:	2b01      	cmp	r3, #1
 800641e:	d105      	bne.n	800642c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006420:	4b35      	ldr	r3, [pc, #212]	@ (80064f8 <HAL_RCC_OscConfig+0x4b8>)
 8006422:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006424:	4a34      	ldr	r2, [pc, #208]	@ (80064f8 <HAL_RCC_OscConfig+0x4b8>)
 8006426:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800642a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f003 0320 	and.w	r3, r3, #32
 8006434:	2b00      	cmp	r3, #0
 8006436:	d03c      	beq.n	80064b2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	699b      	ldr	r3, [r3, #24]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d01c      	beq.n	800647a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006440:	4b2d      	ldr	r3, [pc, #180]	@ (80064f8 <HAL_RCC_OscConfig+0x4b8>)
 8006442:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006446:	4a2c      	ldr	r2, [pc, #176]	@ (80064f8 <HAL_RCC_OscConfig+0x4b8>)
 8006448:	f043 0301 	orr.w	r3, r3, #1
 800644c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006450:	f7fd fbc2 	bl	8003bd8 <HAL_GetTick>
 8006454:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006456:	e008      	b.n	800646a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006458:	f7fd fbbe 	bl	8003bd8 <HAL_GetTick>
 800645c:	4602      	mov	r2, r0
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	1ad3      	subs	r3, r2, r3
 8006462:	2b02      	cmp	r3, #2
 8006464:	d901      	bls.n	800646a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8006466:	2303      	movs	r3, #3
 8006468:	e0f2      	b.n	8006650 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800646a:	4b23      	ldr	r3, [pc, #140]	@ (80064f8 <HAL_RCC_OscConfig+0x4b8>)
 800646c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006470:	f003 0302 	and.w	r3, r3, #2
 8006474:	2b00      	cmp	r3, #0
 8006476:	d0ef      	beq.n	8006458 <HAL_RCC_OscConfig+0x418>
 8006478:	e01b      	b.n	80064b2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800647a:	4b1f      	ldr	r3, [pc, #124]	@ (80064f8 <HAL_RCC_OscConfig+0x4b8>)
 800647c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006480:	4a1d      	ldr	r2, [pc, #116]	@ (80064f8 <HAL_RCC_OscConfig+0x4b8>)
 8006482:	f023 0301 	bic.w	r3, r3, #1
 8006486:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800648a:	f7fd fba5 	bl	8003bd8 <HAL_GetTick>
 800648e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006490:	e008      	b.n	80064a4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006492:	f7fd fba1 	bl	8003bd8 <HAL_GetTick>
 8006496:	4602      	mov	r2, r0
 8006498:	693b      	ldr	r3, [r7, #16]
 800649a:	1ad3      	subs	r3, r2, r3
 800649c:	2b02      	cmp	r3, #2
 800649e:	d901      	bls.n	80064a4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80064a0:	2303      	movs	r3, #3
 80064a2:	e0d5      	b.n	8006650 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80064a4:	4b14      	ldr	r3, [pc, #80]	@ (80064f8 <HAL_RCC_OscConfig+0x4b8>)
 80064a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80064aa:	f003 0302 	and.w	r3, r3, #2
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d1ef      	bne.n	8006492 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	69db      	ldr	r3, [r3, #28]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	f000 80c9 	beq.w	800664e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80064bc:	4b0e      	ldr	r3, [pc, #56]	@ (80064f8 <HAL_RCC_OscConfig+0x4b8>)
 80064be:	689b      	ldr	r3, [r3, #8]
 80064c0:	f003 030c 	and.w	r3, r3, #12
 80064c4:	2b0c      	cmp	r3, #12
 80064c6:	f000 8083 	beq.w	80065d0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	69db      	ldr	r3, [r3, #28]
 80064ce:	2b02      	cmp	r3, #2
 80064d0:	d15e      	bne.n	8006590 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064d2:	4b09      	ldr	r3, [pc, #36]	@ (80064f8 <HAL_RCC_OscConfig+0x4b8>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a08      	ldr	r2, [pc, #32]	@ (80064f8 <HAL_RCC_OscConfig+0x4b8>)
 80064d8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80064dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064de:	f7fd fb7b 	bl	8003bd8 <HAL_GetTick>
 80064e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80064e4:	e00c      	b.n	8006500 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064e6:	f7fd fb77 	bl	8003bd8 <HAL_GetTick>
 80064ea:	4602      	mov	r2, r0
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	1ad3      	subs	r3, r2, r3
 80064f0:	2b02      	cmp	r3, #2
 80064f2:	d905      	bls.n	8006500 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80064f4:	2303      	movs	r3, #3
 80064f6:	e0ab      	b.n	8006650 <HAL_RCC_OscConfig+0x610>
 80064f8:	40021000 	.word	0x40021000
 80064fc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006500:	4b55      	ldr	r3, [pc, #340]	@ (8006658 <HAL_RCC_OscConfig+0x618>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006508:	2b00      	cmp	r3, #0
 800650a:	d1ec      	bne.n	80064e6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800650c:	4b52      	ldr	r3, [pc, #328]	@ (8006658 <HAL_RCC_OscConfig+0x618>)
 800650e:	68da      	ldr	r2, [r3, #12]
 8006510:	4b52      	ldr	r3, [pc, #328]	@ (800665c <HAL_RCC_OscConfig+0x61c>)
 8006512:	4013      	ands	r3, r2
 8006514:	687a      	ldr	r2, [r7, #4]
 8006516:	6a11      	ldr	r1, [r2, #32]
 8006518:	687a      	ldr	r2, [r7, #4]
 800651a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800651c:	3a01      	subs	r2, #1
 800651e:	0112      	lsls	r2, r2, #4
 8006520:	4311      	orrs	r1, r2
 8006522:	687a      	ldr	r2, [r7, #4]
 8006524:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8006526:	0212      	lsls	r2, r2, #8
 8006528:	4311      	orrs	r1, r2
 800652a:	687a      	ldr	r2, [r7, #4]
 800652c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800652e:	0852      	lsrs	r2, r2, #1
 8006530:	3a01      	subs	r2, #1
 8006532:	0552      	lsls	r2, r2, #21
 8006534:	4311      	orrs	r1, r2
 8006536:	687a      	ldr	r2, [r7, #4]
 8006538:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800653a:	0852      	lsrs	r2, r2, #1
 800653c:	3a01      	subs	r2, #1
 800653e:	0652      	lsls	r2, r2, #25
 8006540:	4311      	orrs	r1, r2
 8006542:	687a      	ldr	r2, [r7, #4]
 8006544:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006546:	06d2      	lsls	r2, r2, #27
 8006548:	430a      	orrs	r2, r1
 800654a:	4943      	ldr	r1, [pc, #268]	@ (8006658 <HAL_RCC_OscConfig+0x618>)
 800654c:	4313      	orrs	r3, r2
 800654e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006550:	4b41      	ldr	r3, [pc, #260]	@ (8006658 <HAL_RCC_OscConfig+0x618>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a40      	ldr	r2, [pc, #256]	@ (8006658 <HAL_RCC_OscConfig+0x618>)
 8006556:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800655a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800655c:	4b3e      	ldr	r3, [pc, #248]	@ (8006658 <HAL_RCC_OscConfig+0x618>)
 800655e:	68db      	ldr	r3, [r3, #12]
 8006560:	4a3d      	ldr	r2, [pc, #244]	@ (8006658 <HAL_RCC_OscConfig+0x618>)
 8006562:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006566:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006568:	f7fd fb36 	bl	8003bd8 <HAL_GetTick>
 800656c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800656e:	e008      	b.n	8006582 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006570:	f7fd fb32 	bl	8003bd8 <HAL_GetTick>
 8006574:	4602      	mov	r2, r0
 8006576:	693b      	ldr	r3, [r7, #16]
 8006578:	1ad3      	subs	r3, r2, r3
 800657a:	2b02      	cmp	r3, #2
 800657c:	d901      	bls.n	8006582 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800657e:	2303      	movs	r3, #3
 8006580:	e066      	b.n	8006650 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006582:	4b35      	ldr	r3, [pc, #212]	@ (8006658 <HAL_RCC_OscConfig+0x618>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800658a:	2b00      	cmp	r3, #0
 800658c:	d0f0      	beq.n	8006570 <HAL_RCC_OscConfig+0x530>
 800658e:	e05e      	b.n	800664e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006590:	4b31      	ldr	r3, [pc, #196]	@ (8006658 <HAL_RCC_OscConfig+0x618>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4a30      	ldr	r2, [pc, #192]	@ (8006658 <HAL_RCC_OscConfig+0x618>)
 8006596:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800659a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800659c:	f7fd fb1c 	bl	8003bd8 <HAL_GetTick>
 80065a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80065a2:	e008      	b.n	80065b6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065a4:	f7fd fb18 	bl	8003bd8 <HAL_GetTick>
 80065a8:	4602      	mov	r2, r0
 80065aa:	693b      	ldr	r3, [r7, #16]
 80065ac:	1ad3      	subs	r3, r2, r3
 80065ae:	2b02      	cmp	r3, #2
 80065b0:	d901      	bls.n	80065b6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80065b2:	2303      	movs	r3, #3
 80065b4:	e04c      	b.n	8006650 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80065b6:	4b28      	ldr	r3, [pc, #160]	@ (8006658 <HAL_RCC_OscConfig+0x618>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d1f0      	bne.n	80065a4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80065c2:	4b25      	ldr	r3, [pc, #148]	@ (8006658 <HAL_RCC_OscConfig+0x618>)
 80065c4:	68da      	ldr	r2, [r3, #12]
 80065c6:	4924      	ldr	r1, [pc, #144]	@ (8006658 <HAL_RCC_OscConfig+0x618>)
 80065c8:	4b25      	ldr	r3, [pc, #148]	@ (8006660 <HAL_RCC_OscConfig+0x620>)
 80065ca:	4013      	ands	r3, r2
 80065cc:	60cb      	str	r3, [r1, #12]
 80065ce:	e03e      	b.n	800664e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	69db      	ldr	r3, [r3, #28]
 80065d4:	2b01      	cmp	r3, #1
 80065d6:	d101      	bne.n	80065dc <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80065d8:	2301      	movs	r3, #1
 80065da:	e039      	b.n	8006650 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80065dc:	4b1e      	ldr	r3, [pc, #120]	@ (8006658 <HAL_RCC_OscConfig+0x618>)
 80065de:	68db      	ldr	r3, [r3, #12]
 80065e0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	f003 0203 	and.w	r2, r3, #3
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6a1b      	ldr	r3, [r3, #32]
 80065ec:	429a      	cmp	r2, r3
 80065ee:	d12c      	bne.n	800664a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065fa:	3b01      	subs	r3, #1
 80065fc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80065fe:	429a      	cmp	r2, r3
 8006600:	d123      	bne.n	800664a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800660c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800660e:	429a      	cmp	r2, r3
 8006610:	d11b      	bne.n	800664a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800661c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800661e:	429a      	cmp	r2, r3
 8006620:	d113      	bne.n	800664a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800662c:	085b      	lsrs	r3, r3, #1
 800662e:	3b01      	subs	r3, #1
 8006630:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006632:	429a      	cmp	r2, r3
 8006634:	d109      	bne.n	800664a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006640:	085b      	lsrs	r3, r3, #1
 8006642:	3b01      	subs	r3, #1
 8006644:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006646:	429a      	cmp	r2, r3
 8006648:	d001      	beq.n	800664e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800664a:	2301      	movs	r3, #1
 800664c:	e000      	b.n	8006650 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800664e:	2300      	movs	r3, #0
}
 8006650:	4618      	mov	r0, r3
 8006652:	3720      	adds	r7, #32
 8006654:	46bd      	mov	sp, r7
 8006656:	bd80      	pop	{r7, pc}
 8006658:	40021000 	.word	0x40021000
 800665c:	019f800c 	.word	0x019f800c
 8006660:	feeefffc 	.word	0xfeeefffc

08006664 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b086      	sub	sp, #24
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
 800666c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800666e:	2300      	movs	r3, #0
 8006670:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d101      	bne.n	800667c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006678:	2301      	movs	r3, #1
 800667a:	e11e      	b.n	80068ba <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800667c:	4b91      	ldr	r3, [pc, #580]	@ (80068c4 <HAL_RCC_ClockConfig+0x260>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f003 030f 	and.w	r3, r3, #15
 8006684:	683a      	ldr	r2, [r7, #0]
 8006686:	429a      	cmp	r2, r3
 8006688:	d910      	bls.n	80066ac <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800668a:	4b8e      	ldr	r3, [pc, #568]	@ (80068c4 <HAL_RCC_ClockConfig+0x260>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f023 020f 	bic.w	r2, r3, #15
 8006692:	498c      	ldr	r1, [pc, #560]	@ (80068c4 <HAL_RCC_ClockConfig+0x260>)
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	4313      	orrs	r3, r2
 8006698:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800669a:	4b8a      	ldr	r3, [pc, #552]	@ (80068c4 <HAL_RCC_ClockConfig+0x260>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f003 030f 	and.w	r3, r3, #15
 80066a2:	683a      	ldr	r2, [r7, #0]
 80066a4:	429a      	cmp	r2, r3
 80066a6:	d001      	beq.n	80066ac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80066a8:	2301      	movs	r3, #1
 80066aa:	e106      	b.n	80068ba <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f003 0301 	and.w	r3, r3, #1
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d073      	beq.n	80067a0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	2b03      	cmp	r3, #3
 80066be:	d129      	bne.n	8006714 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80066c0:	4b81      	ldr	r3, [pc, #516]	@ (80068c8 <HAL_RCC_ClockConfig+0x264>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d101      	bne.n	80066d0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80066cc:	2301      	movs	r3, #1
 80066ce:	e0f4      	b.n	80068ba <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80066d0:	f000 f9ba 	bl	8006a48 <RCC_GetSysClockFreqFromPLLSource>
 80066d4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	4a7c      	ldr	r2, [pc, #496]	@ (80068cc <HAL_RCC_ClockConfig+0x268>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d93f      	bls.n	800675e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80066de:	4b7a      	ldr	r3, [pc, #488]	@ (80068c8 <HAL_RCC_ClockConfig+0x264>)
 80066e0:	689b      	ldr	r3, [r3, #8]
 80066e2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d009      	beq.n	80066fe <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d033      	beq.n	800675e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d12f      	bne.n	800675e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80066fe:	4b72      	ldr	r3, [pc, #456]	@ (80068c8 <HAL_RCC_ClockConfig+0x264>)
 8006700:	689b      	ldr	r3, [r3, #8]
 8006702:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006706:	4a70      	ldr	r2, [pc, #448]	@ (80068c8 <HAL_RCC_ClockConfig+0x264>)
 8006708:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800670c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800670e:	2380      	movs	r3, #128	@ 0x80
 8006710:	617b      	str	r3, [r7, #20]
 8006712:	e024      	b.n	800675e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	685b      	ldr	r3, [r3, #4]
 8006718:	2b02      	cmp	r3, #2
 800671a:	d107      	bne.n	800672c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800671c:	4b6a      	ldr	r3, [pc, #424]	@ (80068c8 <HAL_RCC_ClockConfig+0x264>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006724:	2b00      	cmp	r3, #0
 8006726:	d109      	bne.n	800673c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006728:	2301      	movs	r3, #1
 800672a:	e0c6      	b.n	80068ba <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800672c:	4b66      	ldr	r3, [pc, #408]	@ (80068c8 <HAL_RCC_ClockConfig+0x264>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006734:	2b00      	cmp	r3, #0
 8006736:	d101      	bne.n	800673c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006738:	2301      	movs	r3, #1
 800673a:	e0be      	b.n	80068ba <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800673c:	f000 f8ce 	bl	80068dc <HAL_RCC_GetSysClockFreq>
 8006740:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	4a61      	ldr	r2, [pc, #388]	@ (80068cc <HAL_RCC_ClockConfig+0x268>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d909      	bls.n	800675e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800674a:	4b5f      	ldr	r3, [pc, #380]	@ (80068c8 <HAL_RCC_ClockConfig+0x264>)
 800674c:	689b      	ldr	r3, [r3, #8]
 800674e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006752:	4a5d      	ldr	r2, [pc, #372]	@ (80068c8 <HAL_RCC_ClockConfig+0x264>)
 8006754:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006758:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800675a:	2380      	movs	r3, #128	@ 0x80
 800675c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800675e:	4b5a      	ldr	r3, [pc, #360]	@ (80068c8 <HAL_RCC_ClockConfig+0x264>)
 8006760:	689b      	ldr	r3, [r3, #8]
 8006762:	f023 0203 	bic.w	r2, r3, #3
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	4957      	ldr	r1, [pc, #348]	@ (80068c8 <HAL_RCC_ClockConfig+0x264>)
 800676c:	4313      	orrs	r3, r2
 800676e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006770:	f7fd fa32 	bl	8003bd8 <HAL_GetTick>
 8006774:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006776:	e00a      	b.n	800678e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006778:	f7fd fa2e 	bl	8003bd8 <HAL_GetTick>
 800677c:	4602      	mov	r2, r0
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	1ad3      	subs	r3, r2, r3
 8006782:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006786:	4293      	cmp	r3, r2
 8006788:	d901      	bls.n	800678e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800678a:	2303      	movs	r3, #3
 800678c:	e095      	b.n	80068ba <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800678e:	4b4e      	ldr	r3, [pc, #312]	@ (80068c8 <HAL_RCC_ClockConfig+0x264>)
 8006790:	689b      	ldr	r3, [r3, #8]
 8006792:	f003 020c 	and.w	r2, r3, #12
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	009b      	lsls	r3, r3, #2
 800679c:	429a      	cmp	r2, r3
 800679e:	d1eb      	bne.n	8006778 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f003 0302 	and.w	r3, r3, #2
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d023      	beq.n	80067f4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f003 0304 	and.w	r3, r3, #4
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d005      	beq.n	80067c4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80067b8:	4b43      	ldr	r3, [pc, #268]	@ (80068c8 <HAL_RCC_ClockConfig+0x264>)
 80067ba:	689b      	ldr	r3, [r3, #8]
 80067bc:	4a42      	ldr	r2, [pc, #264]	@ (80068c8 <HAL_RCC_ClockConfig+0x264>)
 80067be:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80067c2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f003 0308 	and.w	r3, r3, #8
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d007      	beq.n	80067e0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80067d0:	4b3d      	ldr	r3, [pc, #244]	@ (80068c8 <HAL_RCC_ClockConfig+0x264>)
 80067d2:	689b      	ldr	r3, [r3, #8]
 80067d4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80067d8:	4a3b      	ldr	r2, [pc, #236]	@ (80068c8 <HAL_RCC_ClockConfig+0x264>)
 80067da:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80067de:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80067e0:	4b39      	ldr	r3, [pc, #228]	@ (80068c8 <HAL_RCC_ClockConfig+0x264>)
 80067e2:	689b      	ldr	r3, [r3, #8]
 80067e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	689b      	ldr	r3, [r3, #8]
 80067ec:	4936      	ldr	r1, [pc, #216]	@ (80068c8 <HAL_RCC_ClockConfig+0x264>)
 80067ee:	4313      	orrs	r3, r2
 80067f0:	608b      	str	r3, [r1, #8]
 80067f2:	e008      	b.n	8006806 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	2b80      	cmp	r3, #128	@ 0x80
 80067f8:	d105      	bne.n	8006806 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80067fa:	4b33      	ldr	r3, [pc, #204]	@ (80068c8 <HAL_RCC_ClockConfig+0x264>)
 80067fc:	689b      	ldr	r3, [r3, #8]
 80067fe:	4a32      	ldr	r2, [pc, #200]	@ (80068c8 <HAL_RCC_ClockConfig+0x264>)
 8006800:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006804:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006806:	4b2f      	ldr	r3, [pc, #188]	@ (80068c4 <HAL_RCC_ClockConfig+0x260>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f003 030f 	and.w	r3, r3, #15
 800680e:	683a      	ldr	r2, [r7, #0]
 8006810:	429a      	cmp	r2, r3
 8006812:	d21d      	bcs.n	8006850 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006814:	4b2b      	ldr	r3, [pc, #172]	@ (80068c4 <HAL_RCC_ClockConfig+0x260>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f023 020f 	bic.w	r2, r3, #15
 800681c:	4929      	ldr	r1, [pc, #164]	@ (80068c4 <HAL_RCC_ClockConfig+0x260>)
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	4313      	orrs	r3, r2
 8006822:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006824:	f7fd f9d8 	bl	8003bd8 <HAL_GetTick>
 8006828:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800682a:	e00a      	b.n	8006842 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800682c:	f7fd f9d4 	bl	8003bd8 <HAL_GetTick>
 8006830:	4602      	mov	r2, r0
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	1ad3      	subs	r3, r2, r3
 8006836:	f241 3288 	movw	r2, #5000	@ 0x1388
 800683a:	4293      	cmp	r3, r2
 800683c:	d901      	bls.n	8006842 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800683e:	2303      	movs	r3, #3
 8006840:	e03b      	b.n	80068ba <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006842:	4b20      	ldr	r3, [pc, #128]	@ (80068c4 <HAL_RCC_ClockConfig+0x260>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f003 030f 	and.w	r3, r3, #15
 800684a:	683a      	ldr	r2, [r7, #0]
 800684c:	429a      	cmp	r2, r3
 800684e:	d1ed      	bne.n	800682c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f003 0304 	and.w	r3, r3, #4
 8006858:	2b00      	cmp	r3, #0
 800685a:	d008      	beq.n	800686e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800685c:	4b1a      	ldr	r3, [pc, #104]	@ (80068c8 <HAL_RCC_ClockConfig+0x264>)
 800685e:	689b      	ldr	r3, [r3, #8]
 8006860:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	68db      	ldr	r3, [r3, #12]
 8006868:	4917      	ldr	r1, [pc, #92]	@ (80068c8 <HAL_RCC_ClockConfig+0x264>)
 800686a:	4313      	orrs	r3, r2
 800686c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f003 0308 	and.w	r3, r3, #8
 8006876:	2b00      	cmp	r3, #0
 8006878:	d009      	beq.n	800688e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800687a:	4b13      	ldr	r3, [pc, #76]	@ (80068c8 <HAL_RCC_ClockConfig+0x264>)
 800687c:	689b      	ldr	r3, [r3, #8]
 800687e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	691b      	ldr	r3, [r3, #16]
 8006886:	00db      	lsls	r3, r3, #3
 8006888:	490f      	ldr	r1, [pc, #60]	@ (80068c8 <HAL_RCC_ClockConfig+0x264>)
 800688a:	4313      	orrs	r3, r2
 800688c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800688e:	f000 f825 	bl	80068dc <HAL_RCC_GetSysClockFreq>
 8006892:	4602      	mov	r2, r0
 8006894:	4b0c      	ldr	r3, [pc, #48]	@ (80068c8 <HAL_RCC_ClockConfig+0x264>)
 8006896:	689b      	ldr	r3, [r3, #8]
 8006898:	091b      	lsrs	r3, r3, #4
 800689a:	f003 030f 	and.w	r3, r3, #15
 800689e:	490c      	ldr	r1, [pc, #48]	@ (80068d0 <HAL_RCC_ClockConfig+0x26c>)
 80068a0:	5ccb      	ldrb	r3, [r1, r3]
 80068a2:	f003 031f 	and.w	r3, r3, #31
 80068a6:	fa22 f303 	lsr.w	r3, r2, r3
 80068aa:	4a0a      	ldr	r2, [pc, #40]	@ (80068d4 <HAL_RCC_ClockConfig+0x270>)
 80068ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80068ae:	4b0a      	ldr	r3, [pc, #40]	@ (80068d8 <HAL_RCC_ClockConfig+0x274>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4618      	mov	r0, r3
 80068b4:	f7fc fd3a 	bl	800332c <HAL_InitTick>
 80068b8:	4603      	mov	r3, r0
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	3718      	adds	r7, #24
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}
 80068c2:	bf00      	nop
 80068c4:	40022000 	.word	0x40022000
 80068c8:	40021000 	.word	0x40021000
 80068cc:	04c4b400 	.word	0x04c4b400
 80068d0:	08011560 	.word	0x08011560
 80068d4:	20000020 	.word	0x20000020
 80068d8:	20000024 	.word	0x20000024

080068dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80068dc:	b480      	push	{r7}
 80068de:	b087      	sub	sp, #28
 80068e0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80068e2:	4b2c      	ldr	r3, [pc, #176]	@ (8006994 <HAL_RCC_GetSysClockFreq+0xb8>)
 80068e4:	689b      	ldr	r3, [r3, #8]
 80068e6:	f003 030c 	and.w	r3, r3, #12
 80068ea:	2b04      	cmp	r3, #4
 80068ec:	d102      	bne.n	80068f4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80068ee:	4b2a      	ldr	r3, [pc, #168]	@ (8006998 <HAL_RCC_GetSysClockFreq+0xbc>)
 80068f0:	613b      	str	r3, [r7, #16]
 80068f2:	e047      	b.n	8006984 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80068f4:	4b27      	ldr	r3, [pc, #156]	@ (8006994 <HAL_RCC_GetSysClockFreq+0xb8>)
 80068f6:	689b      	ldr	r3, [r3, #8]
 80068f8:	f003 030c 	and.w	r3, r3, #12
 80068fc:	2b08      	cmp	r3, #8
 80068fe:	d102      	bne.n	8006906 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006900:	4b26      	ldr	r3, [pc, #152]	@ (800699c <HAL_RCC_GetSysClockFreq+0xc0>)
 8006902:	613b      	str	r3, [r7, #16]
 8006904:	e03e      	b.n	8006984 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006906:	4b23      	ldr	r3, [pc, #140]	@ (8006994 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006908:	689b      	ldr	r3, [r3, #8]
 800690a:	f003 030c 	and.w	r3, r3, #12
 800690e:	2b0c      	cmp	r3, #12
 8006910:	d136      	bne.n	8006980 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006912:	4b20      	ldr	r3, [pc, #128]	@ (8006994 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006914:	68db      	ldr	r3, [r3, #12]
 8006916:	f003 0303 	and.w	r3, r3, #3
 800691a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800691c:	4b1d      	ldr	r3, [pc, #116]	@ (8006994 <HAL_RCC_GetSysClockFreq+0xb8>)
 800691e:	68db      	ldr	r3, [r3, #12]
 8006920:	091b      	lsrs	r3, r3, #4
 8006922:	f003 030f 	and.w	r3, r3, #15
 8006926:	3301      	adds	r3, #1
 8006928:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	2b03      	cmp	r3, #3
 800692e:	d10c      	bne.n	800694a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006930:	4a1a      	ldr	r2, [pc, #104]	@ (800699c <HAL_RCC_GetSysClockFreq+0xc0>)
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	fbb2 f3f3 	udiv	r3, r2, r3
 8006938:	4a16      	ldr	r2, [pc, #88]	@ (8006994 <HAL_RCC_GetSysClockFreq+0xb8>)
 800693a:	68d2      	ldr	r2, [r2, #12]
 800693c:	0a12      	lsrs	r2, r2, #8
 800693e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006942:	fb02 f303 	mul.w	r3, r2, r3
 8006946:	617b      	str	r3, [r7, #20]
      break;
 8006948:	e00c      	b.n	8006964 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800694a:	4a13      	ldr	r2, [pc, #76]	@ (8006998 <HAL_RCC_GetSysClockFreq+0xbc>)
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006952:	4a10      	ldr	r2, [pc, #64]	@ (8006994 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006954:	68d2      	ldr	r2, [r2, #12]
 8006956:	0a12      	lsrs	r2, r2, #8
 8006958:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800695c:	fb02 f303 	mul.w	r3, r2, r3
 8006960:	617b      	str	r3, [r7, #20]
      break;
 8006962:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006964:	4b0b      	ldr	r3, [pc, #44]	@ (8006994 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006966:	68db      	ldr	r3, [r3, #12]
 8006968:	0e5b      	lsrs	r3, r3, #25
 800696a:	f003 0303 	and.w	r3, r3, #3
 800696e:	3301      	adds	r3, #1
 8006970:	005b      	lsls	r3, r3, #1
 8006972:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006974:	697a      	ldr	r2, [r7, #20]
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	fbb2 f3f3 	udiv	r3, r2, r3
 800697c:	613b      	str	r3, [r7, #16]
 800697e:	e001      	b.n	8006984 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006980:	2300      	movs	r3, #0
 8006982:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006984:	693b      	ldr	r3, [r7, #16]
}
 8006986:	4618      	mov	r0, r3
 8006988:	371c      	adds	r7, #28
 800698a:	46bd      	mov	sp, r7
 800698c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006990:	4770      	bx	lr
 8006992:	bf00      	nop
 8006994:	40021000 	.word	0x40021000
 8006998:	00f42400 	.word	0x00f42400
 800699c:	007a1200 	.word	0x007a1200

080069a0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80069a0:	b480      	push	{r7}
 80069a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80069a4:	4b03      	ldr	r3, [pc, #12]	@ (80069b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80069a6:	681b      	ldr	r3, [r3, #0]
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	46bd      	mov	sp, r7
 80069ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b0:	4770      	bx	lr
 80069b2:	bf00      	nop
 80069b4:	20000020 	.word	0x20000020

080069b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80069bc:	f7ff fff0 	bl	80069a0 <HAL_RCC_GetHCLKFreq>
 80069c0:	4602      	mov	r2, r0
 80069c2:	4b06      	ldr	r3, [pc, #24]	@ (80069dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80069c4:	689b      	ldr	r3, [r3, #8]
 80069c6:	0adb      	lsrs	r3, r3, #11
 80069c8:	f003 0307 	and.w	r3, r3, #7
 80069cc:	4904      	ldr	r1, [pc, #16]	@ (80069e0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80069ce:	5ccb      	ldrb	r3, [r1, r3]
 80069d0:	f003 031f 	and.w	r3, r3, #31
 80069d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80069d8:	4618      	mov	r0, r3
 80069da:	bd80      	pop	{r7, pc}
 80069dc:	40021000 	.word	0x40021000
 80069e0:	08011570 	.word	0x08011570

080069e4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b083      	sub	sp, #12
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
 80069ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	220f      	movs	r2, #15
 80069f2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80069f4:	4b12      	ldr	r3, [pc, #72]	@ (8006a40 <HAL_RCC_GetClockConfig+0x5c>)
 80069f6:	689b      	ldr	r3, [r3, #8]
 80069f8:	f003 0203 	and.w	r2, r3, #3
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8006a00:	4b0f      	ldr	r3, [pc, #60]	@ (8006a40 <HAL_RCC_GetClockConfig+0x5c>)
 8006a02:	689b      	ldr	r3, [r3, #8]
 8006a04:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8006a0c:	4b0c      	ldr	r3, [pc, #48]	@ (8006a40 <HAL_RCC_GetClockConfig+0x5c>)
 8006a0e:	689b      	ldr	r3, [r3, #8]
 8006a10:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8006a18:	4b09      	ldr	r3, [pc, #36]	@ (8006a40 <HAL_RCC_GetClockConfig+0x5c>)
 8006a1a:	689b      	ldr	r3, [r3, #8]
 8006a1c:	08db      	lsrs	r3, r3, #3
 8006a1e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8006a26:	4b07      	ldr	r3, [pc, #28]	@ (8006a44 <HAL_RCC_GetClockConfig+0x60>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f003 020f 	and.w	r2, r3, #15
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	601a      	str	r2, [r3, #0]
}
 8006a32:	bf00      	nop
 8006a34:	370c      	adds	r7, #12
 8006a36:	46bd      	mov	sp, r7
 8006a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3c:	4770      	bx	lr
 8006a3e:	bf00      	nop
 8006a40:	40021000 	.word	0x40021000
 8006a44:	40022000 	.word	0x40022000

08006a48 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b087      	sub	sp, #28
 8006a4c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006a4e:	4b1e      	ldr	r3, [pc, #120]	@ (8006ac8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006a50:	68db      	ldr	r3, [r3, #12]
 8006a52:	f003 0303 	and.w	r3, r3, #3
 8006a56:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006a58:	4b1b      	ldr	r3, [pc, #108]	@ (8006ac8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006a5a:	68db      	ldr	r3, [r3, #12]
 8006a5c:	091b      	lsrs	r3, r3, #4
 8006a5e:	f003 030f 	and.w	r3, r3, #15
 8006a62:	3301      	adds	r3, #1
 8006a64:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	2b03      	cmp	r3, #3
 8006a6a:	d10c      	bne.n	8006a86 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006a6c:	4a17      	ldr	r2, [pc, #92]	@ (8006acc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a74:	4a14      	ldr	r2, [pc, #80]	@ (8006ac8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006a76:	68d2      	ldr	r2, [r2, #12]
 8006a78:	0a12      	lsrs	r2, r2, #8
 8006a7a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006a7e:	fb02 f303 	mul.w	r3, r2, r3
 8006a82:	617b      	str	r3, [r7, #20]
    break;
 8006a84:	e00c      	b.n	8006aa0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006a86:	4a12      	ldr	r2, [pc, #72]	@ (8006ad0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a8e:	4a0e      	ldr	r2, [pc, #56]	@ (8006ac8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006a90:	68d2      	ldr	r2, [r2, #12]
 8006a92:	0a12      	lsrs	r2, r2, #8
 8006a94:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006a98:	fb02 f303 	mul.w	r3, r2, r3
 8006a9c:	617b      	str	r3, [r7, #20]
    break;
 8006a9e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006aa0:	4b09      	ldr	r3, [pc, #36]	@ (8006ac8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006aa2:	68db      	ldr	r3, [r3, #12]
 8006aa4:	0e5b      	lsrs	r3, r3, #25
 8006aa6:	f003 0303 	and.w	r3, r3, #3
 8006aaa:	3301      	adds	r3, #1
 8006aac:	005b      	lsls	r3, r3, #1
 8006aae:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006ab0:	697a      	ldr	r2, [r7, #20]
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ab8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006aba:	687b      	ldr	r3, [r7, #4]
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	371c      	adds	r7, #28
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac6:	4770      	bx	lr
 8006ac8:	40021000 	.word	0x40021000
 8006acc:	007a1200 	.word	0x007a1200
 8006ad0:	00f42400 	.word	0x00f42400

08006ad4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b086      	sub	sp, #24
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006adc:	2300      	movs	r3, #0
 8006ade:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	f000 8098 	beq.w	8006c22 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006af2:	2300      	movs	r3, #0
 8006af4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006af6:	4b43      	ldr	r3, [pc, #268]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006af8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006afa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d10d      	bne.n	8006b1e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b02:	4b40      	ldr	r3, [pc, #256]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006b04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b06:	4a3f      	ldr	r2, [pc, #252]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006b08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b0c:	6593      	str	r3, [r2, #88]	@ 0x58
 8006b0e:	4b3d      	ldr	r3, [pc, #244]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006b10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b16:	60bb      	str	r3, [r7, #8]
 8006b18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006b1e:	4b3a      	ldr	r3, [pc, #232]	@ (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4a39      	ldr	r2, [pc, #228]	@ (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006b24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006b28:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006b2a:	f7fd f855 	bl	8003bd8 <HAL_GetTick>
 8006b2e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006b30:	e009      	b.n	8006b46 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b32:	f7fd f851 	bl	8003bd8 <HAL_GetTick>
 8006b36:	4602      	mov	r2, r0
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	1ad3      	subs	r3, r2, r3
 8006b3c:	2b02      	cmp	r3, #2
 8006b3e:	d902      	bls.n	8006b46 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006b40:	2303      	movs	r3, #3
 8006b42:	74fb      	strb	r3, [r7, #19]
        break;
 8006b44:	e005      	b.n	8006b52 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006b46:	4b30      	ldr	r3, [pc, #192]	@ (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d0ef      	beq.n	8006b32 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006b52:	7cfb      	ldrb	r3, [r7, #19]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d159      	bne.n	8006c0c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006b58:	4b2a      	ldr	r3, [pc, #168]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006b62:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006b64:	697b      	ldr	r3, [r7, #20]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d01e      	beq.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b6e:	697a      	ldr	r2, [r7, #20]
 8006b70:	429a      	cmp	r2, r3
 8006b72:	d019      	beq.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006b74:	4b23      	ldr	r3, [pc, #140]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b7a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006b7e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006b80:	4b20      	ldr	r3, [pc, #128]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006b82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b86:	4a1f      	ldr	r2, [pc, #124]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006b88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006b8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006b90:	4b1c      	ldr	r3, [pc, #112]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b96:	4a1b      	ldr	r2, [pc, #108]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006b98:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006b9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006ba0:	4a18      	ldr	r2, [pc, #96]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006ba8:	697b      	ldr	r3, [r7, #20]
 8006baa:	f003 0301 	and.w	r3, r3, #1
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d016      	beq.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bb2:	f7fd f811 	bl	8003bd8 <HAL_GetTick>
 8006bb6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006bb8:	e00b      	b.n	8006bd2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006bba:	f7fd f80d 	bl	8003bd8 <HAL_GetTick>
 8006bbe:	4602      	mov	r2, r0
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	1ad3      	subs	r3, r2, r3
 8006bc4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d902      	bls.n	8006bd2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006bcc:	2303      	movs	r3, #3
 8006bce:	74fb      	strb	r3, [r7, #19]
            break;
 8006bd0:	e006      	b.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006bd2:	4b0c      	ldr	r3, [pc, #48]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006bd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006bd8:	f003 0302 	and.w	r3, r3, #2
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d0ec      	beq.n	8006bba <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006be0:	7cfb      	ldrb	r3, [r7, #19]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d10b      	bne.n	8006bfe <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006be6:	4b07      	ldr	r3, [pc, #28]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006be8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006bec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006bf4:	4903      	ldr	r1, [pc, #12]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006bfc:	e008      	b.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006bfe:	7cfb      	ldrb	r3, [r7, #19]
 8006c00:	74bb      	strb	r3, [r7, #18]
 8006c02:	e005      	b.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006c04:	40021000 	.word	0x40021000
 8006c08:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c0c:	7cfb      	ldrb	r3, [r7, #19]
 8006c0e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006c10:	7c7b      	ldrb	r3, [r7, #17]
 8006c12:	2b01      	cmp	r3, #1
 8006c14:	d105      	bne.n	8006c22 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c16:	4ba7      	ldr	r3, [pc, #668]	@ (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c1a:	4aa6      	ldr	r2, [pc, #664]	@ (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c1c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006c20:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f003 0301 	and.w	r3, r3, #1
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d00a      	beq.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006c2e:	4ba1      	ldr	r3, [pc, #644]	@ (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c34:	f023 0203 	bic.w	r2, r3, #3
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	685b      	ldr	r3, [r3, #4]
 8006c3c:	499d      	ldr	r1, [pc, #628]	@ (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f003 0302 	and.w	r3, r3, #2
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d00a      	beq.n	8006c66 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006c50:	4b98      	ldr	r3, [pc, #608]	@ (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c56:	f023 020c 	bic.w	r2, r3, #12
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	689b      	ldr	r3, [r3, #8]
 8006c5e:	4995      	ldr	r1, [pc, #596]	@ (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c60:	4313      	orrs	r3, r2
 8006c62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f003 0304 	and.w	r3, r3, #4
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d00a      	beq.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006c72:	4b90      	ldr	r3, [pc, #576]	@ (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c78:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	68db      	ldr	r3, [r3, #12]
 8006c80:	498c      	ldr	r1, [pc, #560]	@ (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c82:	4313      	orrs	r3, r2
 8006c84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f003 0308 	and.w	r3, r3, #8
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d00a      	beq.n	8006caa <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006c94:	4b87      	ldr	r3, [pc, #540]	@ (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c9a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	691b      	ldr	r3, [r3, #16]
 8006ca2:	4984      	ldr	r1, [pc, #528]	@ (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ca4:	4313      	orrs	r3, r2
 8006ca6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f003 0310 	and.w	r3, r3, #16
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d00a      	beq.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006cb6:	4b7f      	ldr	r3, [pc, #508]	@ (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006cb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cbc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	695b      	ldr	r3, [r3, #20]
 8006cc4:	497b      	ldr	r1, [pc, #492]	@ (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f003 0320 	and.w	r3, r3, #32
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d00a      	beq.n	8006cee <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006cd8:	4b76      	ldr	r3, [pc, #472]	@ (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cde:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	699b      	ldr	r3, [r3, #24]
 8006ce6:	4973      	ldr	r1, [pc, #460]	@ (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ce8:	4313      	orrs	r3, r2
 8006cea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d00a      	beq.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006cfa:	4b6e      	ldr	r3, [pc, #440]	@ (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006cfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d00:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	69db      	ldr	r3, [r3, #28]
 8006d08:	496a      	ldr	r1, [pc, #424]	@ (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d0a:	4313      	orrs	r3, r2
 8006d0c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d00a      	beq.n	8006d32 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006d1c:	4b65      	ldr	r3, [pc, #404]	@ (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d22:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6a1b      	ldr	r3, [r3, #32]
 8006d2a:	4962      	ldr	r1, [pc, #392]	@ (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d2c:	4313      	orrs	r3, r2
 8006d2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d00a      	beq.n	8006d54 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006d3e:	4b5d      	ldr	r3, [pc, #372]	@ (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d44:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d4c:	4959      	ldr	r1, [pc, #356]	@ (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d4e:	4313      	orrs	r3, r2
 8006d50:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d00a      	beq.n	8006d76 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006d60:	4b54      	ldr	r3, [pc, #336]	@ (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d66:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d6e:	4951      	ldr	r1, [pc, #324]	@ (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d70:	4313      	orrs	r3, r2
 8006d72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d015      	beq.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006d82:	4b4c      	ldr	r3, [pc, #304]	@ (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d88:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d90:	4948      	ldr	r1, [pc, #288]	@ (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d92:	4313      	orrs	r3, r2
 8006d94:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d9c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006da0:	d105      	bne.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006da2:	4b44      	ldr	r3, [pc, #272]	@ (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006da4:	68db      	ldr	r3, [r3, #12]
 8006da6:	4a43      	ldr	r2, [pc, #268]	@ (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006da8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006dac:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d015      	beq.n	8006de6 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006dba:	4b3e      	ldr	r3, [pc, #248]	@ (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006dbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006dc0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dc8:	493a      	ldr	r1, [pc, #232]	@ (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dd4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006dd8:	d105      	bne.n	8006de6 <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006dda:	4b36      	ldr	r3, [pc, #216]	@ (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ddc:	68db      	ldr	r3, [r3, #12]
 8006dde:	4a35      	ldr	r2, [pc, #212]	@ (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006de0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006de4:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d015      	beq.n	8006e1e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006df2:	4b30      	ldr	r3, [pc, #192]	@ (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006df4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006df8:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e00:	492c      	ldr	r1, [pc, #176]	@ (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e02:	4313      	orrs	r3, r2
 8006e04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e0c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006e10:	d105      	bne.n	8006e1e <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006e12:	4b28      	ldr	r3, [pc, #160]	@ (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e14:	68db      	ldr	r3, [r3, #12]
 8006e16:	4a27      	ldr	r2, [pc, #156]	@ (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e18:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006e1c:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d015      	beq.n	8006e56 <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006e2a:	4b22      	ldr	r3, [pc, #136]	@ (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e30:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e38:	491e      	ldr	r1, [pc, #120]	@ (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e44:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006e48:	d105      	bne.n	8006e56 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006e4a:	4b1a      	ldr	r3, [pc, #104]	@ (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e4c:	68db      	ldr	r3, [r3, #12]
 8006e4e:	4a19      	ldr	r2, [pc, #100]	@ (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e50:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006e54:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d015      	beq.n	8006e8e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006e62:	4b14      	ldr	r3, [pc, #80]	@ (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e68:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e70:	4910      	ldr	r1, [pc, #64]	@ (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e72:	4313      	orrs	r3, r2
 8006e74:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e7c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006e80:	d105      	bne.n	8006e8e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006e82:	4b0c      	ldr	r3, [pc, #48]	@ (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e84:	68db      	ldr	r3, [r3, #12]
 8006e86:	4a0b      	ldr	r2, [pc, #44]	@ (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e88:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006e8c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d018      	beq.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006e9a:	4b06      	ldr	r3, [pc, #24]	@ (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ea0:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ea8:	4902      	ldr	r1, [pc, #8]	@ (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	e001      	b.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8006eb4:	40021000 	.word	0x40021000
 8006eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006eba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006ebe:	d105      	bne.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006ec0:	4b21      	ldr	r3, [pc, #132]	@ (8006f48 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006ec2:	68db      	ldr	r3, [r3, #12]
 8006ec4:	4a20      	ldr	r2, [pc, #128]	@ (8006f48 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006ec6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006eca:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d015      	beq.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006ed8:	4b1b      	ldr	r3, [pc, #108]	@ (8006f48 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ede:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ee6:	4918      	ldr	r1, [pc, #96]	@ (8006f48 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ef2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ef6:	d105      	bne.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006ef8:	4b13      	ldr	r3, [pc, #76]	@ (8006f48 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006efa:	68db      	ldr	r3, [r3, #12]
 8006efc:	4a12      	ldr	r2, [pc, #72]	@ (8006f48 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006efe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006f02:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d015      	beq.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006f10:	4b0d      	ldr	r3, [pc, #52]	@ (8006f48 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006f12:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006f16:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f1e:	490a      	ldr	r1, [pc, #40]	@ (8006f48 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006f20:	4313      	orrs	r3, r2
 8006f22:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f2a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006f2e:	d105      	bne.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006f30:	4b05      	ldr	r3, [pc, #20]	@ (8006f48 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006f32:	68db      	ldr	r3, [r3, #12]
 8006f34:	4a04      	ldr	r2, [pc, #16]	@ (8006f48 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006f36:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006f3a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006f3c:	7cbb      	ldrb	r3, [r7, #18]
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	3718      	adds	r7, #24
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd80      	pop	{r7, pc}
 8006f46:	bf00      	nop
 8006f48:	40021000 	.word	0x40021000

08006f4c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b084      	sub	sp, #16
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d101      	bne.n	8006f5e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	e09d      	b.n	800709a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d108      	bne.n	8006f78 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	685b      	ldr	r3, [r3, #4]
 8006f6a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006f6e:	d009      	beq.n	8006f84 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2200      	movs	r2, #0
 8006f74:	61da      	str	r2, [r3, #28]
 8006f76:	e005      	b.n	8006f84 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2200      	movs	r2, #0
 8006f82:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2200      	movs	r2, #0
 8006f88:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006f90:	b2db      	uxtb	r3, r3
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d106      	bne.n	8006fa4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f7fc f982 	bl	80032a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2202      	movs	r2, #2
 8006fa8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	681a      	ldr	r2, [r3, #0]
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006fba:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	68db      	ldr	r3, [r3, #12]
 8006fc0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006fc4:	d902      	bls.n	8006fcc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	60fb      	str	r3, [r7, #12]
 8006fca:	e002      	b.n	8006fd2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006fcc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006fd0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	68db      	ldr	r3, [r3, #12]
 8006fd6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8006fda:	d007      	beq.n	8006fec <HAL_SPI_Init+0xa0>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	68db      	ldr	r3, [r3, #12]
 8006fe0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006fe4:	d002      	beq.n	8006fec <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	685b      	ldr	r3, [r3, #4]
 8006ff0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	689b      	ldr	r3, [r3, #8]
 8006ff8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006ffc:	431a      	orrs	r2, r3
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	691b      	ldr	r3, [r3, #16]
 8007002:	f003 0302 	and.w	r3, r3, #2
 8007006:	431a      	orrs	r2, r3
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	695b      	ldr	r3, [r3, #20]
 800700c:	f003 0301 	and.w	r3, r3, #1
 8007010:	431a      	orrs	r2, r3
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	699b      	ldr	r3, [r3, #24]
 8007016:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800701a:	431a      	orrs	r2, r3
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	69db      	ldr	r3, [r3, #28]
 8007020:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007024:	431a      	orrs	r2, r3
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6a1b      	ldr	r3, [r3, #32]
 800702a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800702e:	ea42 0103 	orr.w	r1, r2, r3
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007036:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	430a      	orrs	r2, r1
 8007040:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	699b      	ldr	r3, [r3, #24]
 8007046:	0c1b      	lsrs	r3, r3, #16
 8007048:	f003 0204 	and.w	r2, r3, #4
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007050:	f003 0310 	and.w	r3, r3, #16
 8007054:	431a      	orrs	r2, r3
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800705a:	f003 0308 	and.w	r3, r3, #8
 800705e:	431a      	orrs	r2, r3
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	68db      	ldr	r3, [r3, #12]
 8007064:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8007068:	ea42 0103 	orr.w	r1, r2, r3
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	430a      	orrs	r2, r1
 8007078:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	69da      	ldr	r2, [r3, #28]
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007088:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2200      	movs	r2, #0
 800708e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2201      	movs	r2, #1
 8007094:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8007098:	2300      	movs	r3, #0
}
 800709a:	4618      	mov	r0, r3
 800709c:	3710      	adds	r7, #16
 800709e:	46bd      	mov	sp, r7
 80070a0:	bd80      	pop	{r7, pc}

080070a2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80070a2:	b580      	push	{r7, lr}
 80070a4:	b088      	sub	sp, #32
 80070a6:	af00      	add	r7, sp, #0
 80070a8:	60f8      	str	r0, [r7, #12]
 80070aa:	60b9      	str	r1, [r7, #8]
 80070ac:	603b      	str	r3, [r7, #0]
 80070ae:	4613      	mov	r3, r2
 80070b0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80070b2:	f7fc fd91 	bl	8003bd8 <HAL_GetTick>
 80070b6:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80070b8:	88fb      	ldrh	r3, [r7, #6]
 80070ba:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80070c2:	b2db      	uxtb	r3, r3
 80070c4:	2b01      	cmp	r3, #1
 80070c6:	d001      	beq.n	80070cc <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80070c8:	2302      	movs	r3, #2
 80070ca:	e15c      	b.n	8007386 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d002      	beq.n	80070d8 <HAL_SPI_Transmit+0x36>
 80070d2:	88fb      	ldrh	r3, [r7, #6]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d101      	bne.n	80070dc <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80070d8:	2301      	movs	r3, #1
 80070da:	e154      	b.n	8007386 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80070e2:	2b01      	cmp	r3, #1
 80070e4:	d101      	bne.n	80070ea <HAL_SPI_Transmit+0x48>
 80070e6:	2302      	movs	r3, #2
 80070e8:	e14d      	b.n	8007386 <HAL_SPI_Transmit+0x2e4>
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	2201      	movs	r2, #1
 80070ee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	2203      	movs	r2, #3
 80070f6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	2200      	movs	r2, #0
 80070fe:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	68ba      	ldr	r2, [r7, #8]
 8007104:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	88fa      	ldrh	r2, [r7, #6]
 800710a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	88fa      	ldrh	r2, [r7, #6]
 8007110:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	2200      	movs	r2, #0
 8007116:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	2200      	movs	r2, #0
 800711c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	2200      	movs	r2, #0
 8007124:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	2200      	movs	r2, #0
 800712c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	2200      	movs	r2, #0
 8007132:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	689b      	ldr	r3, [r3, #8]
 8007138:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800713c:	d10f      	bne.n	800715e <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	681a      	ldr	r2, [r3, #0]
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800714c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	681a      	ldr	r2, [r3, #0]
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800715c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007168:	2b40      	cmp	r3, #64	@ 0x40
 800716a:	d007      	beq.n	800717c <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	681a      	ldr	r2, [r3, #0]
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800717a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	68db      	ldr	r3, [r3, #12]
 8007180:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007184:	d952      	bls.n	800722c <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	685b      	ldr	r3, [r3, #4]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d002      	beq.n	8007194 <HAL_SPI_Transmit+0xf2>
 800718e:	8b7b      	ldrh	r3, [r7, #26]
 8007190:	2b01      	cmp	r3, #1
 8007192:	d145      	bne.n	8007220 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007198:	881a      	ldrh	r2, [r3, #0]
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071a4:	1c9a      	adds	r2, r3, #2
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80071ae:	b29b      	uxth	r3, r3
 80071b0:	3b01      	subs	r3, #1
 80071b2:	b29a      	uxth	r2, r3
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80071b8:	e032      	b.n	8007220 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	689b      	ldr	r3, [r3, #8]
 80071c0:	f003 0302 	and.w	r3, r3, #2
 80071c4:	2b02      	cmp	r3, #2
 80071c6:	d112      	bne.n	80071ee <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071cc:	881a      	ldrh	r2, [r3, #0]
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071d8:	1c9a      	adds	r2, r3, #2
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80071e2:	b29b      	uxth	r3, r3
 80071e4:	3b01      	subs	r3, #1
 80071e6:	b29a      	uxth	r2, r3
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80071ec:	e018      	b.n	8007220 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80071ee:	f7fc fcf3 	bl	8003bd8 <HAL_GetTick>
 80071f2:	4602      	mov	r2, r0
 80071f4:	69fb      	ldr	r3, [r7, #28]
 80071f6:	1ad3      	subs	r3, r2, r3
 80071f8:	683a      	ldr	r2, [r7, #0]
 80071fa:	429a      	cmp	r2, r3
 80071fc:	d803      	bhi.n	8007206 <HAL_SPI_Transmit+0x164>
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007204:	d102      	bne.n	800720c <HAL_SPI_Transmit+0x16a>
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d109      	bne.n	8007220 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	2201      	movs	r2, #1
 8007210:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	2200      	movs	r2, #0
 8007218:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800721c:	2303      	movs	r3, #3
 800721e:	e0b2      	b.n	8007386 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007224:	b29b      	uxth	r3, r3
 8007226:	2b00      	cmp	r3, #0
 8007228:	d1c7      	bne.n	80071ba <HAL_SPI_Transmit+0x118>
 800722a:	e083      	b.n	8007334 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	685b      	ldr	r3, [r3, #4]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d002      	beq.n	800723a <HAL_SPI_Transmit+0x198>
 8007234:	8b7b      	ldrh	r3, [r7, #26]
 8007236:	2b01      	cmp	r3, #1
 8007238:	d177      	bne.n	800732a <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800723e:	b29b      	uxth	r3, r3
 8007240:	2b01      	cmp	r3, #1
 8007242:	d912      	bls.n	800726a <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007248:	881a      	ldrh	r2, [r3, #0]
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007254:	1c9a      	adds	r2, r3, #2
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800725e:	b29b      	uxth	r3, r3
 8007260:	3b02      	subs	r3, #2
 8007262:	b29a      	uxth	r2, r3
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007268:	e05f      	b.n	800732a <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	330c      	adds	r3, #12
 8007274:	7812      	ldrb	r2, [r2, #0]
 8007276:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800727c:	1c5a      	adds	r2, r3, #1
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007286:	b29b      	uxth	r3, r3
 8007288:	3b01      	subs	r3, #1
 800728a:	b29a      	uxth	r2, r3
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8007290:	e04b      	b.n	800732a <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	689b      	ldr	r3, [r3, #8]
 8007298:	f003 0302 	and.w	r3, r3, #2
 800729c:	2b02      	cmp	r3, #2
 800729e:	d12b      	bne.n	80072f8 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80072a4:	b29b      	uxth	r3, r3
 80072a6:	2b01      	cmp	r3, #1
 80072a8:	d912      	bls.n	80072d0 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072ae:	881a      	ldrh	r2, [r3, #0]
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072ba:	1c9a      	adds	r2, r3, #2
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80072c4:	b29b      	uxth	r3, r3
 80072c6:	3b02      	subs	r3, #2
 80072c8:	b29a      	uxth	r2, r3
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80072ce:	e02c      	b.n	800732a <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	330c      	adds	r3, #12
 80072da:	7812      	ldrb	r2, [r2, #0]
 80072dc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072e2:	1c5a      	adds	r2, r3, #1
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80072ec:	b29b      	uxth	r3, r3
 80072ee:	3b01      	subs	r3, #1
 80072f0:	b29a      	uxth	r2, r3
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80072f6:	e018      	b.n	800732a <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80072f8:	f7fc fc6e 	bl	8003bd8 <HAL_GetTick>
 80072fc:	4602      	mov	r2, r0
 80072fe:	69fb      	ldr	r3, [r7, #28]
 8007300:	1ad3      	subs	r3, r2, r3
 8007302:	683a      	ldr	r2, [r7, #0]
 8007304:	429a      	cmp	r2, r3
 8007306:	d803      	bhi.n	8007310 <HAL_SPI_Transmit+0x26e>
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800730e:	d102      	bne.n	8007316 <HAL_SPI_Transmit+0x274>
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d109      	bne.n	800732a <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	2201      	movs	r2, #1
 800731a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	2200      	movs	r2, #0
 8007322:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8007326:	2303      	movs	r3, #3
 8007328:	e02d      	b.n	8007386 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800732e:	b29b      	uxth	r3, r3
 8007330:	2b00      	cmp	r3, #0
 8007332:	d1ae      	bne.n	8007292 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007334:	69fa      	ldr	r2, [r7, #28]
 8007336:	6839      	ldr	r1, [r7, #0]
 8007338:	68f8      	ldr	r0, [r7, #12]
 800733a:	f000 fcf5 	bl	8007d28 <SPI_EndRxTxTransaction>
 800733e:	4603      	mov	r3, r0
 8007340:	2b00      	cmp	r3, #0
 8007342:	d002      	beq.n	800734a <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	2220      	movs	r2, #32
 8007348:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	689b      	ldr	r3, [r3, #8]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d10a      	bne.n	8007368 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007352:	2300      	movs	r3, #0
 8007354:	617b      	str	r3, [r7, #20]
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	68db      	ldr	r3, [r3, #12]
 800735c:	617b      	str	r3, [r7, #20]
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	689b      	ldr	r3, [r3, #8]
 8007364:	617b      	str	r3, [r7, #20]
 8007366:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	2201      	movs	r2, #1
 800736c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	2200      	movs	r2, #0
 8007374:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800737c:	2b00      	cmp	r3, #0
 800737e:	d001      	beq.n	8007384 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8007380:	2301      	movs	r3, #1
 8007382:	e000      	b.n	8007386 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8007384:	2300      	movs	r3, #0
  }
}
 8007386:	4618      	mov	r0, r3
 8007388:	3720      	adds	r7, #32
 800738a:	46bd      	mov	sp, r7
 800738c:	bd80      	pop	{r7, pc}

0800738e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800738e:	b580      	push	{r7, lr}
 8007390:	b088      	sub	sp, #32
 8007392:	af02      	add	r7, sp, #8
 8007394:	60f8      	str	r0, [r7, #12]
 8007396:	60b9      	str	r1, [r7, #8]
 8007398:	603b      	str	r3, [r7, #0]
 800739a:	4613      	mov	r3, r2
 800739c:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80073a4:	b2db      	uxtb	r3, r3
 80073a6:	2b01      	cmp	r3, #1
 80073a8:	d001      	beq.n	80073ae <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80073aa:	2302      	movs	r3, #2
 80073ac:	e123      	b.n	80075f6 <HAL_SPI_Receive+0x268>
  }

  if ((pData == NULL) || (Size == 0U))
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d002      	beq.n	80073ba <HAL_SPI_Receive+0x2c>
 80073b4:	88fb      	ldrh	r3, [r7, #6]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d101      	bne.n	80073be <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 80073ba:	2301      	movs	r3, #1
 80073bc:	e11b      	b.n	80075f6 <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	685b      	ldr	r3, [r3, #4]
 80073c2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80073c6:	d112      	bne.n	80073ee <HAL_SPI_Receive+0x60>
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	689b      	ldr	r3, [r3, #8]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d10e      	bne.n	80073ee <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	2204      	movs	r2, #4
 80073d4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80073d8:	88fa      	ldrh	r2, [r7, #6]
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	9300      	str	r3, [sp, #0]
 80073de:	4613      	mov	r3, r2
 80073e0:	68ba      	ldr	r2, [r7, #8]
 80073e2:	68b9      	ldr	r1, [r7, #8]
 80073e4:	68f8      	ldr	r0, [r7, #12]
 80073e6:	f000 f90a 	bl	80075fe <HAL_SPI_TransmitReceive>
 80073ea:	4603      	mov	r3, r0
 80073ec:	e103      	b.n	80075f6 <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80073ee:	f7fc fbf3 	bl	8003bd8 <HAL_GetTick>
 80073f2:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80073fa:	2b01      	cmp	r3, #1
 80073fc:	d101      	bne.n	8007402 <HAL_SPI_Receive+0x74>
 80073fe:	2302      	movs	r3, #2
 8007400:	e0f9      	b.n	80075f6 <HAL_SPI_Receive+0x268>
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	2201      	movs	r2, #1
 8007406:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	2204      	movs	r2, #4
 800740e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	2200      	movs	r2, #0
 8007416:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	68ba      	ldr	r2, [r7, #8]
 800741c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	88fa      	ldrh	r2, [r7, #6]
 8007422:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	88fa      	ldrh	r2, [r7, #6]
 800742a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	2200      	movs	r2, #0
 8007432:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	2200      	movs	r2, #0
 8007438:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	2200      	movs	r2, #0
 800743e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	2200      	movs	r2, #0
 8007444:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	2200      	movs	r2, #0
 800744a:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	68db      	ldr	r3, [r3, #12]
 8007450:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007454:	d908      	bls.n	8007468 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	685a      	ldr	r2, [r3, #4]
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007464:	605a      	str	r2, [r3, #4]
 8007466:	e007      	b.n	8007478 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	685a      	ldr	r2, [r3, #4]
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007476:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	689b      	ldr	r3, [r3, #8]
 800747c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007480:	d10f      	bne.n	80074a2 <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	681a      	ldr	r2, [r3, #0]
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007490:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	681a      	ldr	r2, [r3, #0]
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80074a0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074ac:	2b40      	cmp	r3, #64	@ 0x40
 80074ae:	d007      	beq.n	80074c0 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	681a      	ldr	r2, [r3, #0]
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80074be:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	68db      	ldr	r3, [r3, #12]
 80074c4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80074c8:	d875      	bhi.n	80075b6 <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80074ca:	e037      	b.n	800753c <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	689b      	ldr	r3, [r3, #8]
 80074d2:	f003 0301 	and.w	r3, r3, #1
 80074d6:	2b01      	cmp	r3, #1
 80074d8:	d117      	bne.n	800750a <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f103 020c 	add.w	r2, r3, #12
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074e6:	7812      	ldrb	r2, [r2, #0]
 80074e8:	b2d2      	uxtb	r2, r2
 80074ea:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074f0:	1c5a      	adds	r2, r3, #1
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80074fc:	b29b      	uxth	r3, r3
 80074fe:	3b01      	subs	r3, #1
 8007500:	b29a      	uxth	r2, r3
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8007508:	e018      	b.n	800753c <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800750a:	f7fc fb65 	bl	8003bd8 <HAL_GetTick>
 800750e:	4602      	mov	r2, r0
 8007510:	697b      	ldr	r3, [r7, #20]
 8007512:	1ad3      	subs	r3, r2, r3
 8007514:	683a      	ldr	r2, [r7, #0]
 8007516:	429a      	cmp	r2, r3
 8007518:	d803      	bhi.n	8007522 <HAL_SPI_Receive+0x194>
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007520:	d102      	bne.n	8007528 <HAL_SPI_Receive+0x19a>
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d109      	bne.n	800753c <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	2201      	movs	r2, #1
 800752c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	2200      	movs	r2, #0
 8007534:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8007538:	2303      	movs	r3, #3
 800753a:	e05c      	b.n	80075f6 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007542:	b29b      	uxth	r3, r3
 8007544:	2b00      	cmp	r3, #0
 8007546:	d1c1      	bne.n	80074cc <HAL_SPI_Receive+0x13e>
 8007548:	e03b      	b.n	80075c2 <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	689b      	ldr	r3, [r3, #8]
 8007550:	f003 0301 	and.w	r3, r3, #1
 8007554:	2b01      	cmp	r3, #1
 8007556:	d115      	bne.n	8007584 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	68da      	ldr	r2, [r3, #12]
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007562:	b292      	uxth	r2, r2
 8007564:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800756a:	1c9a      	adds	r2, r3, #2
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007576:	b29b      	uxth	r3, r3
 8007578:	3b01      	subs	r3, #1
 800757a:	b29a      	uxth	r2, r3
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8007582:	e018      	b.n	80075b6 <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007584:	f7fc fb28 	bl	8003bd8 <HAL_GetTick>
 8007588:	4602      	mov	r2, r0
 800758a:	697b      	ldr	r3, [r7, #20]
 800758c:	1ad3      	subs	r3, r2, r3
 800758e:	683a      	ldr	r2, [r7, #0]
 8007590:	429a      	cmp	r2, r3
 8007592:	d803      	bhi.n	800759c <HAL_SPI_Receive+0x20e>
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	f1b3 3fff 	cmp.w	r3, #4294967295
 800759a:	d102      	bne.n	80075a2 <HAL_SPI_Receive+0x214>
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d109      	bne.n	80075b6 <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	2201      	movs	r2, #1
 80075a6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	2200      	movs	r2, #0
 80075ae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80075b2:	2303      	movs	r3, #3
 80075b4:	e01f      	b.n	80075f6 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80075bc:	b29b      	uxth	r3, r3
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d1c3      	bne.n	800754a <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80075c2:	697a      	ldr	r2, [r7, #20]
 80075c4:	6839      	ldr	r1, [r7, #0]
 80075c6:	68f8      	ldr	r0, [r7, #12]
 80075c8:	f000 fb56 	bl	8007c78 <SPI_EndRxTransaction>
 80075cc:	4603      	mov	r3, r0
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d002      	beq.n	80075d8 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	2220      	movs	r2, #32
 80075d6:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	2201      	movs	r2, #1
 80075dc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	2200      	movs	r2, #0
 80075e4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d001      	beq.n	80075f4 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 80075f0:	2301      	movs	r3, #1
 80075f2:	e000      	b.n	80075f6 <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 80075f4:	2300      	movs	r3, #0
  }
}
 80075f6:	4618      	mov	r0, r3
 80075f8:	3718      	adds	r7, #24
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bd80      	pop	{r7, pc}

080075fe <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80075fe:	b580      	push	{r7, lr}
 8007600:	b08a      	sub	sp, #40	@ 0x28
 8007602:	af00      	add	r7, sp, #0
 8007604:	60f8      	str	r0, [r7, #12]
 8007606:	60b9      	str	r1, [r7, #8]
 8007608:	607a      	str	r2, [r7, #4]
 800760a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800760c:	2301      	movs	r3, #1
 800760e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007610:	f7fc fae2 	bl	8003bd8 <HAL_GetTick>
 8007614:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800761c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	685b      	ldr	r3, [r3, #4]
 8007622:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8007624:	887b      	ldrh	r3, [r7, #2]
 8007626:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8007628:	887b      	ldrh	r3, [r7, #2]
 800762a:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800762c:	7ffb      	ldrb	r3, [r7, #31]
 800762e:	2b01      	cmp	r3, #1
 8007630:	d00c      	beq.n	800764c <HAL_SPI_TransmitReceive+0x4e>
 8007632:	69bb      	ldr	r3, [r7, #24]
 8007634:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007638:	d106      	bne.n	8007648 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	689b      	ldr	r3, [r3, #8]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d102      	bne.n	8007648 <HAL_SPI_TransmitReceive+0x4a>
 8007642:	7ffb      	ldrb	r3, [r7, #31]
 8007644:	2b04      	cmp	r3, #4
 8007646:	d001      	beq.n	800764c <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8007648:	2302      	movs	r3, #2
 800764a:	e1f3      	b.n	8007a34 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d005      	beq.n	800765e <HAL_SPI_TransmitReceive+0x60>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d002      	beq.n	800765e <HAL_SPI_TransmitReceive+0x60>
 8007658:	887b      	ldrh	r3, [r7, #2]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d101      	bne.n	8007662 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 800765e:	2301      	movs	r3, #1
 8007660:	e1e8      	b.n	8007a34 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007668:	2b01      	cmp	r3, #1
 800766a:	d101      	bne.n	8007670 <HAL_SPI_TransmitReceive+0x72>
 800766c:	2302      	movs	r3, #2
 800766e:	e1e1      	b.n	8007a34 <HAL_SPI_TransmitReceive+0x436>
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	2201      	movs	r2, #1
 8007674:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800767e:	b2db      	uxtb	r3, r3
 8007680:	2b04      	cmp	r3, #4
 8007682:	d003      	beq.n	800768c <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	2205      	movs	r2, #5
 8007688:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	2200      	movs	r2, #0
 8007690:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	687a      	ldr	r2, [r7, #4]
 8007696:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	887a      	ldrh	r2, [r7, #2]
 800769c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	887a      	ldrh	r2, [r7, #2]
 80076a4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	68ba      	ldr	r2, [r7, #8]
 80076ac:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	887a      	ldrh	r2, [r7, #2]
 80076b2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	887a      	ldrh	r2, [r7, #2]
 80076b8:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	2200      	movs	r2, #0
 80076be:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	2200      	movs	r2, #0
 80076c4:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	68db      	ldr	r3, [r3, #12]
 80076ca:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80076ce:	d802      	bhi.n	80076d6 <HAL_SPI_TransmitReceive+0xd8>
 80076d0:	8abb      	ldrh	r3, [r7, #20]
 80076d2:	2b01      	cmp	r3, #1
 80076d4:	d908      	bls.n	80076e8 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	685a      	ldr	r2, [r3, #4]
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80076e4:	605a      	str	r2, [r3, #4]
 80076e6:	e007      	b.n	80076f8 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	685a      	ldr	r2, [r3, #4]
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80076f6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007702:	2b40      	cmp	r3, #64	@ 0x40
 8007704:	d007      	beq.n	8007716 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	681a      	ldr	r2, [r3, #0]
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007714:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	68db      	ldr	r3, [r3, #12]
 800771a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800771e:	f240 8083 	bls.w	8007828 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	685b      	ldr	r3, [r3, #4]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d002      	beq.n	8007730 <HAL_SPI_TransmitReceive+0x132>
 800772a:	8afb      	ldrh	r3, [r7, #22]
 800772c:	2b01      	cmp	r3, #1
 800772e:	d16f      	bne.n	8007810 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007734:	881a      	ldrh	r2, [r3, #0]
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007740:	1c9a      	adds	r2, r3, #2
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800774a:	b29b      	uxth	r3, r3
 800774c:	3b01      	subs	r3, #1
 800774e:	b29a      	uxth	r2, r3
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007754:	e05c      	b.n	8007810 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	689b      	ldr	r3, [r3, #8]
 800775c:	f003 0302 	and.w	r3, r3, #2
 8007760:	2b02      	cmp	r3, #2
 8007762:	d11b      	bne.n	800779c <HAL_SPI_TransmitReceive+0x19e>
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007768:	b29b      	uxth	r3, r3
 800776a:	2b00      	cmp	r3, #0
 800776c:	d016      	beq.n	800779c <HAL_SPI_TransmitReceive+0x19e>
 800776e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007770:	2b01      	cmp	r3, #1
 8007772:	d113      	bne.n	800779c <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007778:	881a      	ldrh	r2, [r3, #0]
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007784:	1c9a      	adds	r2, r3, #2
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800778e:	b29b      	uxth	r3, r3
 8007790:	3b01      	subs	r3, #1
 8007792:	b29a      	uxth	r2, r3
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007798:	2300      	movs	r3, #0
 800779a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	689b      	ldr	r3, [r3, #8]
 80077a2:	f003 0301 	and.w	r3, r3, #1
 80077a6:	2b01      	cmp	r3, #1
 80077a8:	d11c      	bne.n	80077e4 <HAL_SPI_TransmitReceive+0x1e6>
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80077b0:	b29b      	uxth	r3, r3
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d016      	beq.n	80077e4 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	68da      	ldr	r2, [r3, #12]
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077c0:	b292      	uxth	r2, r2
 80077c2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077c8:	1c9a      	adds	r2, r3, #2
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80077d4:	b29b      	uxth	r3, r3
 80077d6:	3b01      	subs	r3, #1
 80077d8:	b29a      	uxth	r2, r3
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80077e0:	2301      	movs	r3, #1
 80077e2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80077e4:	f7fc f9f8 	bl	8003bd8 <HAL_GetTick>
 80077e8:	4602      	mov	r2, r0
 80077ea:	6a3b      	ldr	r3, [r7, #32]
 80077ec:	1ad3      	subs	r3, r2, r3
 80077ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80077f0:	429a      	cmp	r2, r3
 80077f2:	d80d      	bhi.n	8007810 <HAL_SPI_TransmitReceive+0x212>
 80077f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077fa:	d009      	beq.n	8007810 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	2201      	movs	r2, #1
 8007800:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	2200      	movs	r2, #0
 8007808:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800780c:	2303      	movs	r3, #3
 800780e:	e111      	b.n	8007a34 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007814:	b29b      	uxth	r3, r3
 8007816:	2b00      	cmp	r3, #0
 8007818:	d19d      	bne.n	8007756 <HAL_SPI_TransmitReceive+0x158>
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007820:	b29b      	uxth	r3, r3
 8007822:	2b00      	cmp	r3, #0
 8007824:	d197      	bne.n	8007756 <HAL_SPI_TransmitReceive+0x158>
 8007826:	e0e5      	b.n	80079f4 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	685b      	ldr	r3, [r3, #4]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d003      	beq.n	8007838 <HAL_SPI_TransmitReceive+0x23a>
 8007830:	8afb      	ldrh	r3, [r7, #22]
 8007832:	2b01      	cmp	r3, #1
 8007834:	f040 80d1 	bne.w	80079da <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800783c:	b29b      	uxth	r3, r3
 800783e:	2b01      	cmp	r3, #1
 8007840:	d912      	bls.n	8007868 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007846:	881a      	ldrh	r2, [r3, #0]
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007852:	1c9a      	adds	r2, r3, #2
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800785c:	b29b      	uxth	r3, r3
 800785e:	3b02      	subs	r3, #2
 8007860:	b29a      	uxth	r2, r3
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007866:	e0b8      	b.n	80079da <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	330c      	adds	r3, #12
 8007872:	7812      	ldrb	r2, [r2, #0]
 8007874:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800787a:	1c5a      	adds	r2, r3, #1
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007884:	b29b      	uxth	r3, r3
 8007886:	3b01      	subs	r3, #1
 8007888:	b29a      	uxth	r2, r3
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800788e:	e0a4      	b.n	80079da <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	689b      	ldr	r3, [r3, #8]
 8007896:	f003 0302 	and.w	r3, r3, #2
 800789a:	2b02      	cmp	r3, #2
 800789c:	d134      	bne.n	8007908 <HAL_SPI_TransmitReceive+0x30a>
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80078a2:	b29b      	uxth	r3, r3
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d02f      	beq.n	8007908 <HAL_SPI_TransmitReceive+0x30a>
 80078a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078aa:	2b01      	cmp	r3, #1
 80078ac:	d12c      	bne.n	8007908 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80078b2:	b29b      	uxth	r3, r3
 80078b4:	2b01      	cmp	r3, #1
 80078b6:	d912      	bls.n	80078de <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078bc:	881a      	ldrh	r2, [r3, #0]
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078c8:	1c9a      	adds	r2, r3, #2
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80078d2:	b29b      	uxth	r3, r3
 80078d4:	3b02      	subs	r3, #2
 80078d6:	b29a      	uxth	r2, r3
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80078dc:	e012      	b.n	8007904 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	330c      	adds	r3, #12
 80078e8:	7812      	ldrb	r2, [r2, #0]
 80078ea:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078f0:	1c5a      	adds	r2, r3, #1
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80078fa:	b29b      	uxth	r3, r3
 80078fc:	3b01      	subs	r3, #1
 80078fe:	b29a      	uxth	r2, r3
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007904:	2300      	movs	r3, #0
 8007906:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	689b      	ldr	r3, [r3, #8]
 800790e:	f003 0301 	and.w	r3, r3, #1
 8007912:	2b01      	cmp	r3, #1
 8007914:	d148      	bne.n	80079a8 <HAL_SPI_TransmitReceive+0x3aa>
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800791c:	b29b      	uxth	r3, r3
 800791e:	2b00      	cmp	r3, #0
 8007920:	d042      	beq.n	80079a8 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007928:	b29b      	uxth	r3, r3
 800792a:	2b01      	cmp	r3, #1
 800792c:	d923      	bls.n	8007976 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	68da      	ldr	r2, [r3, #12]
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007938:	b292      	uxth	r2, r2
 800793a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007940:	1c9a      	adds	r2, r3, #2
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800794c:	b29b      	uxth	r3, r3
 800794e:	3b02      	subs	r3, #2
 8007950:	b29a      	uxth	r2, r3
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800795e:	b29b      	uxth	r3, r3
 8007960:	2b01      	cmp	r3, #1
 8007962:	d81f      	bhi.n	80079a4 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	685a      	ldr	r2, [r3, #4]
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007972:	605a      	str	r2, [r3, #4]
 8007974:	e016      	b.n	80079a4 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f103 020c 	add.w	r2, r3, #12
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007982:	7812      	ldrb	r2, [r2, #0]
 8007984:	b2d2      	uxtb	r2, r2
 8007986:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800798c:	1c5a      	adds	r2, r3, #1
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007998:	b29b      	uxth	r3, r3
 800799a:	3b01      	subs	r3, #1
 800799c:	b29a      	uxth	r2, r3
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80079a4:	2301      	movs	r3, #1
 80079a6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80079a8:	f7fc f916 	bl	8003bd8 <HAL_GetTick>
 80079ac:	4602      	mov	r2, r0
 80079ae:	6a3b      	ldr	r3, [r7, #32]
 80079b0:	1ad3      	subs	r3, r2, r3
 80079b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80079b4:	429a      	cmp	r2, r3
 80079b6:	d803      	bhi.n	80079c0 <HAL_SPI_TransmitReceive+0x3c2>
 80079b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079be:	d102      	bne.n	80079c6 <HAL_SPI_TransmitReceive+0x3c8>
 80079c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d109      	bne.n	80079da <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	2201      	movs	r2, #1
 80079ca:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	2200      	movs	r2, #0
 80079d2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80079d6:	2303      	movs	r3, #3
 80079d8:	e02c      	b.n	8007a34 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80079de:	b29b      	uxth	r3, r3
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	f47f af55 	bne.w	8007890 <HAL_SPI_TransmitReceive+0x292>
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80079ec:	b29b      	uxth	r3, r3
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	f47f af4e 	bne.w	8007890 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80079f4:	6a3a      	ldr	r2, [r7, #32]
 80079f6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80079f8:	68f8      	ldr	r0, [r7, #12]
 80079fa:	f000 f995 	bl	8007d28 <SPI_EndRxTxTransaction>
 80079fe:	4603      	mov	r3, r0
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d008      	beq.n	8007a16 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	2220      	movs	r2, #32
 8007a08:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8007a12:	2301      	movs	r3, #1
 8007a14:	e00e      	b.n	8007a34 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	2201      	movs	r2, #1
 8007a1a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	2200      	movs	r2, #0
 8007a22:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d001      	beq.n	8007a32 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8007a2e:	2301      	movs	r3, #1
 8007a30:	e000      	b.n	8007a34 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8007a32:	2300      	movs	r3, #0
  }
}
 8007a34:	4618      	mov	r0, r3
 8007a36:	3728      	adds	r7, #40	@ 0x28
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	bd80      	pop	{r7, pc}

08007a3c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b088      	sub	sp, #32
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	60f8      	str	r0, [r7, #12]
 8007a44:	60b9      	str	r1, [r7, #8]
 8007a46:	603b      	str	r3, [r7, #0]
 8007a48:	4613      	mov	r3, r2
 8007a4a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007a4c:	f7fc f8c4 	bl	8003bd8 <HAL_GetTick>
 8007a50:	4602      	mov	r2, r0
 8007a52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a54:	1a9b      	subs	r3, r3, r2
 8007a56:	683a      	ldr	r2, [r7, #0]
 8007a58:	4413      	add	r3, r2
 8007a5a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007a5c:	f7fc f8bc 	bl	8003bd8 <HAL_GetTick>
 8007a60:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007a62:	4b39      	ldr	r3, [pc, #228]	@ (8007b48 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	015b      	lsls	r3, r3, #5
 8007a68:	0d1b      	lsrs	r3, r3, #20
 8007a6a:	69fa      	ldr	r2, [r7, #28]
 8007a6c:	fb02 f303 	mul.w	r3, r2, r3
 8007a70:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007a72:	e054      	b.n	8007b1e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a7a:	d050      	beq.n	8007b1e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007a7c:	f7fc f8ac 	bl	8003bd8 <HAL_GetTick>
 8007a80:	4602      	mov	r2, r0
 8007a82:	69bb      	ldr	r3, [r7, #24]
 8007a84:	1ad3      	subs	r3, r2, r3
 8007a86:	69fa      	ldr	r2, [r7, #28]
 8007a88:	429a      	cmp	r2, r3
 8007a8a:	d902      	bls.n	8007a92 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007a8c:	69fb      	ldr	r3, [r7, #28]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d13d      	bne.n	8007b0e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	685a      	ldr	r2, [r3, #4]
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007aa0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	685b      	ldr	r3, [r3, #4]
 8007aa6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007aaa:	d111      	bne.n	8007ad0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	689b      	ldr	r3, [r3, #8]
 8007ab0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007ab4:	d004      	beq.n	8007ac0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	689b      	ldr	r3, [r3, #8]
 8007aba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007abe:	d107      	bne.n	8007ad0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	681a      	ldr	r2, [r3, #0]
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007ace:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ad4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ad8:	d10f      	bne.n	8007afa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	681a      	ldr	r2, [r3, #0]
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007ae8:	601a      	str	r2, [r3, #0]
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	681a      	ldr	r2, [r3, #0]
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007af8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	2201      	movs	r2, #1
 8007afe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	2200      	movs	r2, #0
 8007b06:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007b0a:	2303      	movs	r3, #3
 8007b0c:	e017      	b.n	8007b3e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007b0e:	697b      	ldr	r3, [r7, #20]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d101      	bne.n	8007b18 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007b14:	2300      	movs	r3, #0
 8007b16:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007b18:	697b      	ldr	r3, [r7, #20]
 8007b1a:	3b01      	subs	r3, #1
 8007b1c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	689a      	ldr	r2, [r3, #8]
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	4013      	ands	r3, r2
 8007b28:	68ba      	ldr	r2, [r7, #8]
 8007b2a:	429a      	cmp	r2, r3
 8007b2c:	bf0c      	ite	eq
 8007b2e:	2301      	moveq	r3, #1
 8007b30:	2300      	movne	r3, #0
 8007b32:	b2db      	uxtb	r3, r3
 8007b34:	461a      	mov	r2, r3
 8007b36:	79fb      	ldrb	r3, [r7, #7]
 8007b38:	429a      	cmp	r2, r3
 8007b3a:	d19b      	bne.n	8007a74 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007b3c:	2300      	movs	r3, #0
}
 8007b3e:	4618      	mov	r0, r3
 8007b40:	3720      	adds	r7, #32
 8007b42:	46bd      	mov	sp, r7
 8007b44:	bd80      	pop	{r7, pc}
 8007b46:	bf00      	nop
 8007b48:	20000020 	.word	0x20000020

08007b4c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b08a      	sub	sp, #40	@ 0x28
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	60f8      	str	r0, [r7, #12]
 8007b54:	60b9      	str	r1, [r7, #8]
 8007b56:	607a      	str	r2, [r7, #4]
 8007b58:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007b5e:	f7fc f83b 	bl	8003bd8 <HAL_GetTick>
 8007b62:	4602      	mov	r2, r0
 8007b64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b66:	1a9b      	subs	r3, r3, r2
 8007b68:	683a      	ldr	r2, [r7, #0]
 8007b6a:	4413      	add	r3, r2
 8007b6c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8007b6e:	f7fc f833 	bl	8003bd8 <HAL_GetTick>
 8007b72:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	330c      	adds	r3, #12
 8007b7a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007b7c:	4b3d      	ldr	r3, [pc, #244]	@ (8007c74 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007b7e:	681a      	ldr	r2, [r3, #0]
 8007b80:	4613      	mov	r3, r2
 8007b82:	009b      	lsls	r3, r3, #2
 8007b84:	4413      	add	r3, r2
 8007b86:	00da      	lsls	r2, r3, #3
 8007b88:	1ad3      	subs	r3, r2, r3
 8007b8a:	0d1b      	lsrs	r3, r3, #20
 8007b8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b8e:	fb02 f303 	mul.w	r3, r2, r3
 8007b92:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007b94:	e060      	b.n	8007c58 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007b9c:	d107      	bne.n	8007bae <SPI_WaitFifoStateUntilTimeout+0x62>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d104      	bne.n	8007bae <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007ba4:	69fb      	ldr	r3, [r7, #28]
 8007ba6:	781b      	ldrb	r3, [r3, #0]
 8007ba8:	b2db      	uxtb	r3, r3
 8007baa:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007bac:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bb4:	d050      	beq.n	8007c58 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007bb6:	f7fc f80f 	bl	8003bd8 <HAL_GetTick>
 8007bba:	4602      	mov	r2, r0
 8007bbc:	6a3b      	ldr	r3, [r7, #32]
 8007bbe:	1ad3      	subs	r3, r2, r3
 8007bc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007bc2:	429a      	cmp	r2, r3
 8007bc4:	d902      	bls.n	8007bcc <SPI_WaitFifoStateUntilTimeout+0x80>
 8007bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d13d      	bne.n	8007c48 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	685a      	ldr	r2, [r3, #4]
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007bda:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	685b      	ldr	r3, [r3, #4]
 8007be0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007be4:	d111      	bne.n	8007c0a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	689b      	ldr	r3, [r3, #8]
 8007bea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007bee:	d004      	beq.n	8007bfa <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	689b      	ldr	r3, [r3, #8]
 8007bf4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007bf8:	d107      	bne.n	8007c0a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	681a      	ldr	r2, [r3, #0]
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007c08:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c0e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007c12:	d10f      	bne.n	8007c34 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	681a      	ldr	r2, [r3, #0]
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007c22:	601a      	str	r2, [r3, #0]
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	681a      	ldr	r2, [r3, #0]
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007c32:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	2201      	movs	r2, #1
 8007c38:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	2200      	movs	r2, #0
 8007c40:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007c44:	2303      	movs	r3, #3
 8007c46:	e010      	b.n	8007c6a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007c48:	69bb      	ldr	r3, [r7, #24]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d101      	bne.n	8007c52 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8007c4e:	2300      	movs	r3, #0
 8007c50:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8007c52:	69bb      	ldr	r3, [r7, #24]
 8007c54:	3b01      	subs	r3, #1
 8007c56:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	689a      	ldr	r2, [r3, #8]
 8007c5e:	68bb      	ldr	r3, [r7, #8]
 8007c60:	4013      	ands	r3, r2
 8007c62:	687a      	ldr	r2, [r7, #4]
 8007c64:	429a      	cmp	r2, r3
 8007c66:	d196      	bne.n	8007b96 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007c68:	2300      	movs	r3, #0
}
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	3728      	adds	r7, #40	@ 0x28
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	bd80      	pop	{r7, pc}
 8007c72:	bf00      	nop
 8007c74:	20000020 	.word	0x20000020

08007c78 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b086      	sub	sp, #24
 8007c7c:	af02      	add	r7, sp, #8
 8007c7e:	60f8      	str	r0, [r7, #12]
 8007c80:	60b9      	str	r1, [r7, #8]
 8007c82:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	685b      	ldr	r3, [r3, #4]
 8007c88:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007c8c:	d111      	bne.n	8007cb2 <SPI_EndRxTransaction+0x3a>
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	689b      	ldr	r3, [r3, #8]
 8007c92:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007c96:	d004      	beq.n	8007ca2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	689b      	ldr	r3, [r3, #8]
 8007c9c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007ca0:	d107      	bne.n	8007cb2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	681a      	ldr	r2, [r3, #0]
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007cb0:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	9300      	str	r3, [sp, #0]
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	2200      	movs	r2, #0
 8007cba:	2180      	movs	r1, #128	@ 0x80
 8007cbc:	68f8      	ldr	r0, [r7, #12]
 8007cbe:	f7ff febd 	bl	8007a3c <SPI_WaitFlagStateUntilTimeout>
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d007      	beq.n	8007cd8 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007ccc:	f043 0220 	orr.w	r2, r3, #32
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007cd4:	2303      	movs	r3, #3
 8007cd6:	e023      	b.n	8007d20 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	685b      	ldr	r3, [r3, #4]
 8007cdc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007ce0:	d11d      	bne.n	8007d1e <SPI_EndRxTransaction+0xa6>
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	689b      	ldr	r3, [r3, #8]
 8007ce6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007cea:	d004      	beq.n	8007cf6 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	689b      	ldr	r3, [r3, #8]
 8007cf0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007cf4:	d113      	bne.n	8007d1e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	9300      	str	r3, [sp, #0]
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8007d02:	68f8      	ldr	r0, [r7, #12]
 8007d04:	f7ff ff22 	bl	8007b4c <SPI_WaitFifoStateUntilTimeout>
 8007d08:	4603      	mov	r3, r0
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d007      	beq.n	8007d1e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d12:	f043 0220 	orr.w	r2, r3, #32
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8007d1a:	2303      	movs	r3, #3
 8007d1c:	e000      	b.n	8007d20 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8007d1e:	2300      	movs	r3, #0
}
 8007d20:	4618      	mov	r0, r3
 8007d22:	3710      	adds	r7, #16
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bd80      	pop	{r7, pc}

08007d28 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b086      	sub	sp, #24
 8007d2c:	af02      	add	r7, sp, #8
 8007d2e:	60f8      	str	r0, [r7, #12]
 8007d30:	60b9      	str	r1, [r7, #8]
 8007d32:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	9300      	str	r3, [sp, #0]
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8007d40:	68f8      	ldr	r0, [r7, #12]
 8007d42:	f7ff ff03 	bl	8007b4c <SPI_WaitFifoStateUntilTimeout>
 8007d46:	4603      	mov	r3, r0
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d007      	beq.n	8007d5c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d50:	f043 0220 	orr.w	r2, r3, #32
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007d58:	2303      	movs	r3, #3
 8007d5a:	e027      	b.n	8007dac <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	9300      	str	r3, [sp, #0]
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	2200      	movs	r2, #0
 8007d64:	2180      	movs	r1, #128	@ 0x80
 8007d66:	68f8      	ldr	r0, [r7, #12]
 8007d68:	f7ff fe68 	bl	8007a3c <SPI_WaitFlagStateUntilTimeout>
 8007d6c:	4603      	mov	r3, r0
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d007      	beq.n	8007d82 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d76:	f043 0220 	orr.w	r2, r3, #32
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007d7e:	2303      	movs	r3, #3
 8007d80:	e014      	b.n	8007dac <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	9300      	str	r3, [sp, #0]
 8007d86:	68bb      	ldr	r3, [r7, #8]
 8007d88:	2200      	movs	r2, #0
 8007d8a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8007d8e:	68f8      	ldr	r0, [r7, #12]
 8007d90:	f7ff fedc 	bl	8007b4c <SPI_WaitFifoStateUntilTimeout>
 8007d94:	4603      	mov	r3, r0
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d007      	beq.n	8007daa <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d9e:	f043 0220 	orr.w	r2, r3, #32
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007da6:	2303      	movs	r3, #3
 8007da8:	e000      	b.n	8007dac <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007daa:	2300      	movs	r3, #0
}
 8007dac:	4618      	mov	r0, r3
 8007dae:	3710      	adds	r7, #16
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}

08007db4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b082      	sub	sp, #8
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d101      	bne.n	8007dc6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007dc2:	2301      	movs	r3, #1
 8007dc4:	e049      	b.n	8007e5a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007dcc:	b2db      	uxtb	r3, r3
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d106      	bne.n	8007de0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	f000 f841 	bl	8007e62 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2202      	movs	r2, #2
 8007de4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681a      	ldr	r2, [r3, #0]
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	3304      	adds	r3, #4
 8007df0:	4619      	mov	r1, r3
 8007df2:	4610      	mov	r0, r2
 8007df4:	f000 fa28 	bl	8008248 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2201      	movs	r2, #1
 8007dfc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2201      	movs	r2, #1
 8007e04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2201      	movs	r2, #1
 8007e0c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2201      	movs	r2, #1
 8007e14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2201      	movs	r2, #1
 8007e1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2201      	movs	r2, #1
 8007e24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2201      	movs	r2, #1
 8007e2c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2201      	movs	r2, #1
 8007e34:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2201      	movs	r2, #1
 8007e3c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2201      	movs	r2, #1
 8007e44:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2201      	movs	r2, #1
 8007e4c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2201      	movs	r2, #1
 8007e54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007e58:	2300      	movs	r3, #0
}
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	3708      	adds	r7, #8
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bd80      	pop	{r7, pc}

08007e62 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007e62:	b480      	push	{r7}
 8007e64:	b083      	sub	sp, #12
 8007e66:	af00      	add	r7, sp, #0
 8007e68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007e6a:	bf00      	nop
 8007e6c:	370c      	adds	r7, #12
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e74:	4770      	bx	lr
	...

08007e78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007e78:	b480      	push	{r7}
 8007e7a:	b085      	sub	sp, #20
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007e86:	b2db      	uxtb	r3, r3
 8007e88:	2b01      	cmp	r3, #1
 8007e8a:	d001      	beq.n	8007e90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007e8c:	2301      	movs	r3, #1
 8007e8e:	e04f      	b.n	8007f30 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2202      	movs	r2, #2
 8007e94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	68da      	ldr	r2, [r3, #12]
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f042 0201 	orr.w	r2, r2, #1
 8007ea6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	4a23      	ldr	r2, [pc, #140]	@ (8007f3c <HAL_TIM_Base_Start_IT+0xc4>)
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d01d      	beq.n	8007eee <HAL_TIM_Base_Start_IT+0x76>
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007eba:	d018      	beq.n	8007eee <HAL_TIM_Base_Start_IT+0x76>
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	4a1f      	ldr	r2, [pc, #124]	@ (8007f40 <HAL_TIM_Base_Start_IT+0xc8>)
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d013      	beq.n	8007eee <HAL_TIM_Base_Start_IT+0x76>
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	4a1e      	ldr	r2, [pc, #120]	@ (8007f44 <HAL_TIM_Base_Start_IT+0xcc>)
 8007ecc:	4293      	cmp	r3, r2
 8007ece:	d00e      	beq.n	8007eee <HAL_TIM_Base_Start_IT+0x76>
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	4a1c      	ldr	r2, [pc, #112]	@ (8007f48 <HAL_TIM_Base_Start_IT+0xd0>)
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	d009      	beq.n	8007eee <HAL_TIM_Base_Start_IT+0x76>
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	4a1b      	ldr	r2, [pc, #108]	@ (8007f4c <HAL_TIM_Base_Start_IT+0xd4>)
 8007ee0:	4293      	cmp	r3, r2
 8007ee2:	d004      	beq.n	8007eee <HAL_TIM_Base_Start_IT+0x76>
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	4a19      	ldr	r2, [pc, #100]	@ (8007f50 <HAL_TIM_Base_Start_IT+0xd8>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d115      	bne.n	8007f1a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	689a      	ldr	r2, [r3, #8]
 8007ef4:	4b17      	ldr	r3, [pc, #92]	@ (8007f54 <HAL_TIM_Base_Start_IT+0xdc>)
 8007ef6:	4013      	ands	r3, r2
 8007ef8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	2b06      	cmp	r3, #6
 8007efe:	d015      	beq.n	8007f2c <HAL_TIM_Base_Start_IT+0xb4>
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f06:	d011      	beq.n	8007f2c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	681a      	ldr	r2, [r3, #0]
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f042 0201 	orr.w	r2, r2, #1
 8007f16:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f18:	e008      	b.n	8007f2c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	681a      	ldr	r2, [r3, #0]
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f042 0201 	orr.w	r2, r2, #1
 8007f28:	601a      	str	r2, [r3, #0]
 8007f2a:	e000      	b.n	8007f2e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f2c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007f2e:	2300      	movs	r3, #0
}
 8007f30:	4618      	mov	r0, r3
 8007f32:	3714      	adds	r7, #20
 8007f34:	46bd      	mov	sp, r7
 8007f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3a:	4770      	bx	lr
 8007f3c:	40012c00 	.word	0x40012c00
 8007f40:	40000400 	.word	0x40000400
 8007f44:	40000800 	.word	0x40000800
 8007f48:	40013400 	.word	0x40013400
 8007f4c:	40014000 	.word	0x40014000
 8007f50:	40015000 	.word	0x40015000
 8007f54:	00010007 	.word	0x00010007

08007f58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b084      	sub	sp, #16
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	68db      	ldr	r3, [r3, #12]
 8007f66:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	691b      	ldr	r3, [r3, #16]
 8007f6e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	f003 0302 	and.w	r3, r3, #2
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d020      	beq.n	8007fbc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	f003 0302 	and.w	r3, r3, #2
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d01b      	beq.n	8007fbc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f06f 0202 	mvn.w	r2, #2
 8007f8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2201      	movs	r2, #1
 8007f92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	699b      	ldr	r3, [r3, #24]
 8007f9a:	f003 0303 	and.w	r3, r3, #3
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d003      	beq.n	8007faa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f000 f931 	bl	800820a <HAL_TIM_IC_CaptureCallback>
 8007fa8:	e005      	b.n	8007fb6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	f000 f923 	bl	80081f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fb0:	6878      	ldr	r0, [r7, #4]
 8007fb2:	f000 f934 	bl	800821e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2200      	movs	r2, #0
 8007fba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	f003 0304 	and.w	r3, r3, #4
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d020      	beq.n	8008008 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	f003 0304 	and.w	r3, r3, #4
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d01b      	beq.n	8008008 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f06f 0204 	mvn.w	r2, #4
 8007fd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2202      	movs	r2, #2
 8007fde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	699b      	ldr	r3, [r3, #24]
 8007fe6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d003      	beq.n	8007ff6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f000 f90b 	bl	800820a <HAL_TIM_IC_CaptureCallback>
 8007ff4:	e005      	b.n	8008002 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f000 f8fd 	bl	80081f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	f000 f90e 	bl	800821e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2200      	movs	r2, #0
 8008006:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	f003 0308 	and.w	r3, r3, #8
 800800e:	2b00      	cmp	r3, #0
 8008010:	d020      	beq.n	8008054 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	f003 0308 	and.w	r3, r3, #8
 8008018:	2b00      	cmp	r3, #0
 800801a:	d01b      	beq.n	8008054 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f06f 0208 	mvn.w	r2, #8
 8008024:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2204      	movs	r2, #4
 800802a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	69db      	ldr	r3, [r3, #28]
 8008032:	f003 0303 	and.w	r3, r3, #3
 8008036:	2b00      	cmp	r3, #0
 8008038:	d003      	beq.n	8008042 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f000 f8e5 	bl	800820a <HAL_TIM_IC_CaptureCallback>
 8008040:	e005      	b.n	800804e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f000 f8d7 	bl	80081f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	f000 f8e8 	bl	800821e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2200      	movs	r2, #0
 8008052:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008054:	68bb      	ldr	r3, [r7, #8]
 8008056:	f003 0310 	and.w	r3, r3, #16
 800805a:	2b00      	cmp	r3, #0
 800805c:	d020      	beq.n	80080a0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	f003 0310 	and.w	r3, r3, #16
 8008064:	2b00      	cmp	r3, #0
 8008066:	d01b      	beq.n	80080a0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f06f 0210 	mvn.w	r2, #16
 8008070:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2208      	movs	r2, #8
 8008076:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	69db      	ldr	r3, [r3, #28]
 800807e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008082:	2b00      	cmp	r3, #0
 8008084:	d003      	beq.n	800808e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	f000 f8bf 	bl	800820a <HAL_TIM_IC_CaptureCallback>
 800808c:	e005      	b.n	800809a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	f000 f8b1 	bl	80081f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008094:	6878      	ldr	r0, [r7, #4]
 8008096:	f000 f8c2 	bl	800821e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2200      	movs	r2, #0
 800809e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	f003 0301 	and.w	r3, r3, #1
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d00c      	beq.n	80080c4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	f003 0301 	and.w	r3, r3, #1
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d007      	beq.n	80080c4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f06f 0201 	mvn.w	r2, #1
 80080bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	f7fb f856 	bl	8003170 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d104      	bne.n	80080d8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80080ce:	68bb      	ldr	r3, [r7, #8]
 80080d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d00c      	beq.n	80080f2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d007      	beq.n	80080f2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80080ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80080ec:	6878      	ldr	r0, [r7, #4]
 80080ee:	f000 f95f 	bl	80083b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80080f2:	68bb      	ldr	r3, [r7, #8]
 80080f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d00c      	beq.n	8008116 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008102:	2b00      	cmp	r3, #0
 8008104:	d007      	beq.n	8008116 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800810e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008110:	6878      	ldr	r0, [r7, #4]
 8008112:	f000 f957 	bl	80083c4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008116:	68bb      	ldr	r3, [r7, #8]
 8008118:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800811c:	2b00      	cmp	r3, #0
 800811e:	d00c      	beq.n	800813a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008126:	2b00      	cmp	r3, #0
 8008128:	d007      	beq.n	800813a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008132:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	f000 f87c 	bl	8008232 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800813a:	68bb      	ldr	r3, [r7, #8]
 800813c:	f003 0320 	and.w	r3, r3, #32
 8008140:	2b00      	cmp	r3, #0
 8008142:	d00c      	beq.n	800815e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	f003 0320 	and.w	r3, r3, #32
 800814a:	2b00      	cmp	r3, #0
 800814c:	d007      	beq.n	800815e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f06f 0220 	mvn.w	r2, #32
 8008156:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008158:	6878      	ldr	r0, [r7, #4]
 800815a:	f000 f91f 	bl	800839c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008164:	2b00      	cmp	r3, #0
 8008166:	d00c      	beq.n	8008182 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800816e:	2b00      	cmp	r3, #0
 8008170:	d007      	beq.n	8008182 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800817a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800817c:	6878      	ldr	r0, [r7, #4]
 800817e:	f000 f92b 	bl	80083d8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8008182:	68bb      	ldr	r3, [r7, #8]
 8008184:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008188:	2b00      	cmp	r3, #0
 800818a:	d00c      	beq.n	80081a6 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008192:	2b00      	cmp	r3, #0
 8008194:	d007      	beq.n	80081a6 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800819e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f000 f923 	bl	80083ec <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80081a6:	68bb      	ldr	r3, [r7, #8]
 80081a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d00c      	beq.n	80081ca <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d007      	beq.n	80081ca <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80081c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80081c4:	6878      	ldr	r0, [r7, #4]
 80081c6:	f000 f91b 	bl	8008400 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d00c      	beq.n	80081ee <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d007      	beq.n	80081ee <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80081e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80081e8:	6878      	ldr	r0, [r7, #4]
 80081ea:	f000 f913 	bl	8008414 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80081ee:	bf00      	nop
 80081f0:	3710      	adds	r7, #16
 80081f2:	46bd      	mov	sp, r7
 80081f4:	bd80      	pop	{r7, pc}

080081f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80081f6:	b480      	push	{r7}
 80081f8:	b083      	sub	sp, #12
 80081fa:	af00      	add	r7, sp, #0
 80081fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80081fe:	bf00      	nop
 8008200:	370c      	adds	r7, #12
 8008202:	46bd      	mov	sp, r7
 8008204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008208:	4770      	bx	lr

0800820a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800820a:	b480      	push	{r7}
 800820c:	b083      	sub	sp, #12
 800820e:	af00      	add	r7, sp, #0
 8008210:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008212:	bf00      	nop
 8008214:	370c      	adds	r7, #12
 8008216:	46bd      	mov	sp, r7
 8008218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821c:	4770      	bx	lr

0800821e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800821e:	b480      	push	{r7}
 8008220:	b083      	sub	sp, #12
 8008222:	af00      	add	r7, sp, #0
 8008224:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008226:	bf00      	nop
 8008228:	370c      	adds	r7, #12
 800822a:	46bd      	mov	sp, r7
 800822c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008230:	4770      	bx	lr

08008232 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008232:	b480      	push	{r7}
 8008234:	b083      	sub	sp, #12
 8008236:	af00      	add	r7, sp, #0
 8008238:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800823a:	bf00      	nop
 800823c:	370c      	adds	r7, #12
 800823e:	46bd      	mov	sp, r7
 8008240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008244:	4770      	bx	lr
	...

08008248 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008248:	b480      	push	{r7}
 800824a:	b085      	sub	sp, #20
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
 8008250:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	4a48      	ldr	r2, [pc, #288]	@ (800837c <TIM_Base_SetConfig+0x134>)
 800825c:	4293      	cmp	r3, r2
 800825e:	d013      	beq.n	8008288 <TIM_Base_SetConfig+0x40>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008266:	d00f      	beq.n	8008288 <TIM_Base_SetConfig+0x40>
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	4a45      	ldr	r2, [pc, #276]	@ (8008380 <TIM_Base_SetConfig+0x138>)
 800826c:	4293      	cmp	r3, r2
 800826e:	d00b      	beq.n	8008288 <TIM_Base_SetConfig+0x40>
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	4a44      	ldr	r2, [pc, #272]	@ (8008384 <TIM_Base_SetConfig+0x13c>)
 8008274:	4293      	cmp	r3, r2
 8008276:	d007      	beq.n	8008288 <TIM_Base_SetConfig+0x40>
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	4a43      	ldr	r2, [pc, #268]	@ (8008388 <TIM_Base_SetConfig+0x140>)
 800827c:	4293      	cmp	r3, r2
 800827e:	d003      	beq.n	8008288 <TIM_Base_SetConfig+0x40>
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	4a42      	ldr	r2, [pc, #264]	@ (800838c <TIM_Base_SetConfig+0x144>)
 8008284:	4293      	cmp	r3, r2
 8008286:	d108      	bne.n	800829a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800828e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	685b      	ldr	r3, [r3, #4]
 8008294:	68fa      	ldr	r2, [r7, #12]
 8008296:	4313      	orrs	r3, r2
 8008298:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	4a37      	ldr	r2, [pc, #220]	@ (800837c <TIM_Base_SetConfig+0x134>)
 800829e:	4293      	cmp	r3, r2
 80082a0:	d01f      	beq.n	80082e2 <TIM_Base_SetConfig+0x9a>
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80082a8:	d01b      	beq.n	80082e2 <TIM_Base_SetConfig+0x9a>
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	4a34      	ldr	r2, [pc, #208]	@ (8008380 <TIM_Base_SetConfig+0x138>)
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d017      	beq.n	80082e2 <TIM_Base_SetConfig+0x9a>
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	4a33      	ldr	r2, [pc, #204]	@ (8008384 <TIM_Base_SetConfig+0x13c>)
 80082b6:	4293      	cmp	r3, r2
 80082b8:	d013      	beq.n	80082e2 <TIM_Base_SetConfig+0x9a>
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	4a32      	ldr	r2, [pc, #200]	@ (8008388 <TIM_Base_SetConfig+0x140>)
 80082be:	4293      	cmp	r3, r2
 80082c0:	d00f      	beq.n	80082e2 <TIM_Base_SetConfig+0x9a>
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	4a32      	ldr	r2, [pc, #200]	@ (8008390 <TIM_Base_SetConfig+0x148>)
 80082c6:	4293      	cmp	r3, r2
 80082c8:	d00b      	beq.n	80082e2 <TIM_Base_SetConfig+0x9a>
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	4a31      	ldr	r2, [pc, #196]	@ (8008394 <TIM_Base_SetConfig+0x14c>)
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d007      	beq.n	80082e2 <TIM_Base_SetConfig+0x9a>
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	4a30      	ldr	r2, [pc, #192]	@ (8008398 <TIM_Base_SetConfig+0x150>)
 80082d6:	4293      	cmp	r3, r2
 80082d8:	d003      	beq.n	80082e2 <TIM_Base_SetConfig+0x9a>
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	4a2b      	ldr	r2, [pc, #172]	@ (800838c <TIM_Base_SetConfig+0x144>)
 80082de:	4293      	cmp	r3, r2
 80082e0:	d108      	bne.n	80082f4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80082e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	68db      	ldr	r3, [r3, #12]
 80082ee:	68fa      	ldr	r2, [r7, #12]
 80082f0:	4313      	orrs	r3, r2
 80082f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	695b      	ldr	r3, [r3, #20]
 80082fe:	4313      	orrs	r3, r2
 8008300:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	68fa      	ldr	r2, [r7, #12]
 8008306:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	689a      	ldr	r2, [r3, #8]
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	681a      	ldr	r2, [r3, #0]
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	4a18      	ldr	r2, [pc, #96]	@ (800837c <TIM_Base_SetConfig+0x134>)
 800831c:	4293      	cmp	r3, r2
 800831e:	d013      	beq.n	8008348 <TIM_Base_SetConfig+0x100>
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	4a19      	ldr	r2, [pc, #100]	@ (8008388 <TIM_Base_SetConfig+0x140>)
 8008324:	4293      	cmp	r3, r2
 8008326:	d00f      	beq.n	8008348 <TIM_Base_SetConfig+0x100>
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	4a19      	ldr	r2, [pc, #100]	@ (8008390 <TIM_Base_SetConfig+0x148>)
 800832c:	4293      	cmp	r3, r2
 800832e:	d00b      	beq.n	8008348 <TIM_Base_SetConfig+0x100>
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	4a18      	ldr	r2, [pc, #96]	@ (8008394 <TIM_Base_SetConfig+0x14c>)
 8008334:	4293      	cmp	r3, r2
 8008336:	d007      	beq.n	8008348 <TIM_Base_SetConfig+0x100>
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	4a17      	ldr	r2, [pc, #92]	@ (8008398 <TIM_Base_SetConfig+0x150>)
 800833c:	4293      	cmp	r3, r2
 800833e:	d003      	beq.n	8008348 <TIM_Base_SetConfig+0x100>
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	4a12      	ldr	r2, [pc, #72]	@ (800838c <TIM_Base_SetConfig+0x144>)
 8008344:	4293      	cmp	r3, r2
 8008346:	d103      	bne.n	8008350 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	691a      	ldr	r2, [r3, #16]
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2201      	movs	r2, #1
 8008354:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	691b      	ldr	r3, [r3, #16]
 800835a:	f003 0301 	and.w	r3, r3, #1
 800835e:	2b01      	cmp	r3, #1
 8008360:	d105      	bne.n	800836e <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	691b      	ldr	r3, [r3, #16]
 8008366:	f023 0201 	bic.w	r2, r3, #1
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	611a      	str	r2, [r3, #16]
  }
}
 800836e:	bf00      	nop
 8008370:	3714      	adds	r7, #20
 8008372:	46bd      	mov	sp, r7
 8008374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008378:	4770      	bx	lr
 800837a:	bf00      	nop
 800837c:	40012c00 	.word	0x40012c00
 8008380:	40000400 	.word	0x40000400
 8008384:	40000800 	.word	0x40000800
 8008388:	40013400 	.word	0x40013400
 800838c:	40015000 	.word	0x40015000
 8008390:	40014000 	.word	0x40014000
 8008394:	40014400 	.word	0x40014400
 8008398:	40014800 	.word	0x40014800

0800839c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800839c:	b480      	push	{r7}
 800839e:	b083      	sub	sp, #12
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80083a4:	bf00      	nop
 80083a6:	370c      	adds	r7, #12
 80083a8:	46bd      	mov	sp, r7
 80083aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ae:	4770      	bx	lr

080083b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80083b0:	b480      	push	{r7}
 80083b2:	b083      	sub	sp, #12
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80083b8:	bf00      	nop
 80083ba:	370c      	adds	r7, #12
 80083bc:	46bd      	mov	sp, r7
 80083be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c2:	4770      	bx	lr

080083c4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80083c4:	b480      	push	{r7}
 80083c6:	b083      	sub	sp, #12
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80083cc:	bf00      	nop
 80083ce:	370c      	adds	r7, #12
 80083d0:	46bd      	mov	sp, r7
 80083d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d6:	4770      	bx	lr

080083d8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80083d8:	b480      	push	{r7}
 80083da:	b083      	sub	sp, #12
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80083e0:	bf00      	nop
 80083e2:	370c      	adds	r7, #12
 80083e4:	46bd      	mov	sp, r7
 80083e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ea:	4770      	bx	lr

080083ec <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80083ec:	b480      	push	{r7}
 80083ee:	b083      	sub	sp, #12
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80083f4:	bf00      	nop
 80083f6:	370c      	adds	r7, #12
 80083f8:	46bd      	mov	sp, r7
 80083fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fe:	4770      	bx	lr

08008400 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8008400:	b480      	push	{r7}
 8008402:	b083      	sub	sp, #12
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8008408:	bf00      	nop
 800840a:	370c      	adds	r7, #12
 800840c:	46bd      	mov	sp, r7
 800840e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008412:	4770      	bx	lr

08008414 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8008414:	b480      	push	{r7}
 8008416:	b083      	sub	sp, #12
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800841c:	bf00      	nop
 800841e:	370c      	adds	r7, #12
 8008420:	46bd      	mov	sp, r7
 8008422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008426:	4770      	bx	lr

08008428 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8008428:	b480      	push	{r7}
 800842a:	b085      	sub	sp, #20
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2200      	movs	r2, #0
 8008434:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008438:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800843c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	b29a      	uxth	r2, r3
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008448:	2300      	movs	r3, #0
}
 800844a:	4618      	mov	r0, r3
 800844c:	3714      	adds	r7, #20
 800844e:	46bd      	mov	sp, r7
 8008450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008454:	4770      	bx	lr

08008456 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8008456:	b480      	push	{r7}
 8008458:	b085      	sub	sp, #20
 800845a:	af00      	add	r7, sp, #0
 800845c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800845e:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8008462:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800846a:	b29a      	uxth	r2, r3
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	b29b      	uxth	r3, r3
 8008470:	43db      	mvns	r3, r3
 8008472:	b29b      	uxth	r3, r3
 8008474:	4013      	ands	r3, r2
 8008476:	b29a      	uxth	r2, r3
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800847e:	2300      	movs	r3, #0
}
 8008480:	4618      	mov	r0, r3
 8008482:	3714      	adds	r7, #20
 8008484:	46bd      	mov	sp, r7
 8008486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848a:	4770      	bx	lr

0800848c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800848c:	b480      	push	{r7}
 800848e:	b085      	sub	sp, #20
 8008490:	af00      	add	r7, sp, #0
 8008492:	60f8      	str	r0, [r7, #12]
 8008494:	1d3b      	adds	r3, r7, #4
 8008496:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	2201      	movs	r2, #1
 800849e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	2200      	movs	r2, #0
 80084a6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	2200      	movs	r2, #0
 80084ae:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	2200      	movs	r2, #0
 80084b6:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80084ba:	2300      	movs	r3, #0
}
 80084bc:	4618      	mov	r0, r3
 80084be:	3714      	adds	r7, #20
 80084c0:	46bd      	mov	sp, r7
 80084c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c6:	4770      	bx	lr

080084c8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80084c8:	b480      	push	{r7}
 80084ca:	b0a7      	sub	sp, #156	@ 0x9c
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
 80084d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80084d2:	2300      	movs	r3, #0
 80084d4:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80084d8:	687a      	ldr	r2, [r7, #4]
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	781b      	ldrb	r3, [r3, #0]
 80084de:	009b      	lsls	r3, r3, #2
 80084e0:	4413      	add	r3, r2
 80084e2:	881b      	ldrh	r3, [r3, #0]
 80084e4:	b29b      	uxth	r3, r3
 80084e6:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 80084ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80084ee:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	78db      	ldrb	r3, [r3, #3]
 80084f6:	2b03      	cmp	r3, #3
 80084f8:	d81f      	bhi.n	800853a <USB_ActivateEndpoint+0x72>
 80084fa:	a201      	add	r2, pc, #4	@ (adr r2, 8008500 <USB_ActivateEndpoint+0x38>)
 80084fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008500:	08008511 	.word	0x08008511
 8008504:	0800852d 	.word	0x0800852d
 8008508:	08008543 	.word	0x08008543
 800850c:	0800851f 	.word	0x0800851f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8008510:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8008514:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008518:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800851c:	e012      	b.n	8008544 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800851e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8008522:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8008526:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800852a:	e00b      	b.n	8008544 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800852c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8008530:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008534:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8008538:	e004      	b.n	8008544 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800853a:	2301      	movs	r3, #1
 800853c:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 8008540:	e000      	b.n	8008544 <USB_ActivateEndpoint+0x7c>
      break;
 8008542:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8008544:	687a      	ldr	r2, [r7, #4]
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	781b      	ldrb	r3, [r3, #0]
 800854a:	009b      	lsls	r3, r3, #2
 800854c:	441a      	add	r2, r3
 800854e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8008552:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008556:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800855a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800855e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008562:	b29b      	uxth	r3, r3
 8008564:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8008566:	687a      	ldr	r2, [r7, #4]
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	781b      	ldrb	r3, [r3, #0]
 800856c:	009b      	lsls	r3, r3, #2
 800856e:	4413      	add	r3, r2
 8008570:	881b      	ldrh	r3, [r3, #0]
 8008572:	b29b      	uxth	r3, r3
 8008574:	b21b      	sxth	r3, r3
 8008576:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800857a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800857e:	b21a      	sxth	r2, r3
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	781b      	ldrb	r3, [r3, #0]
 8008584:	b21b      	sxth	r3, r3
 8008586:	4313      	orrs	r3, r2
 8008588:	b21b      	sxth	r3, r3
 800858a:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 800858e:	687a      	ldr	r2, [r7, #4]
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	781b      	ldrb	r3, [r3, #0]
 8008594:	009b      	lsls	r3, r3, #2
 8008596:	441a      	add	r2, r3
 8008598:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800859c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80085a0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80085a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80085a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80085ac:	b29b      	uxth	r3, r3
 80085ae:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	7b1b      	ldrb	r3, [r3, #12]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	f040 8180 	bne.w	80088ba <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	785b      	ldrb	r3, [r3, #1]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	f000 8084 	beq.w	80086cc <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	61bb      	str	r3, [r7, #24]
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80085ce:	b29b      	uxth	r3, r3
 80085d0:	461a      	mov	r2, r3
 80085d2:	69bb      	ldr	r3, [r7, #24]
 80085d4:	4413      	add	r3, r2
 80085d6:	61bb      	str	r3, [r7, #24]
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	781b      	ldrb	r3, [r3, #0]
 80085dc:	00da      	lsls	r2, r3, #3
 80085de:	69bb      	ldr	r3, [r7, #24]
 80085e0:	4413      	add	r3, r2
 80085e2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80085e6:	617b      	str	r3, [r7, #20]
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	88db      	ldrh	r3, [r3, #6]
 80085ec:	085b      	lsrs	r3, r3, #1
 80085ee:	b29b      	uxth	r3, r3
 80085f0:	005b      	lsls	r3, r3, #1
 80085f2:	b29a      	uxth	r2, r3
 80085f4:	697b      	ldr	r3, [r7, #20]
 80085f6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80085f8:	687a      	ldr	r2, [r7, #4]
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	781b      	ldrb	r3, [r3, #0]
 80085fe:	009b      	lsls	r3, r3, #2
 8008600:	4413      	add	r3, r2
 8008602:	881b      	ldrh	r3, [r3, #0]
 8008604:	827b      	strh	r3, [r7, #18]
 8008606:	8a7b      	ldrh	r3, [r7, #18]
 8008608:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800860c:	2b00      	cmp	r3, #0
 800860e:	d01b      	beq.n	8008648 <USB_ActivateEndpoint+0x180>
 8008610:	687a      	ldr	r2, [r7, #4]
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	781b      	ldrb	r3, [r3, #0]
 8008616:	009b      	lsls	r3, r3, #2
 8008618:	4413      	add	r3, r2
 800861a:	881b      	ldrh	r3, [r3, #0]
 800861c:	b29b      	uxth	r3, r3
 800861e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008622:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008626:	823b      	strh	r3, [r7, #16]
 8008628:	687a      	ldr	r2, [r7, #4]
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	781b      	ldrb	r3, [r3, #0]
 800862e:	009b      	lsls	r3, r3, #2
 8008630:	441a      	add	r2, r3
 8008632:	8a3b      	ldrh	r3, [r7, #16]
 8008634:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008638:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800863c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008640:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008644:	b29b      	uxth	r3, r3
 8008646:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	78db      	ldrb	r3, [r3, #3]
 800864c:	2b01      	cmp	r3, #1
 800864e:	d020      	beq.n	8008692 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008650:	687a      	ldr	r2, [r7, #4]
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	781b      	ldrb	r3, [r3, #0]
 8008656:	009b      	lsls	r3, r3, #2
 8008658:	4413      	add	r3, r2
 800865a:	881b      	ldrh	r3, [r3, #0]
 800865c:	b29b      	uxth	r3, r3
 800865e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008662:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008666:	81bb      	strh	r3, [r7, #12]
 8008668:	89bb      	ldrh	r3, [r7, #12]
 800866a:	f083 0320 	eor.w	r3, r3, #32
 800866e:	81bb      	strh	r3, [r7, #12]
 8008670:	687a      	ldr	r2, [r7, #4]
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	781b      	ldrb	r3, [r3, #0]
 8008676:	009b      	lsls	r3, r3, #2
 8008678:	441a      	add	r2, r3
 800867a:	89bb      	ldrh	r3, [r7, #12]
 800867c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008680:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008684:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008688:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800868c:	b29b      	uxth	r3, r3
 800868e:	8013      	strh	r3, [r2, #0]
 8008690:	e3f9      	b.n	8008e86 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008692:	687a      	ldr	r2, [r7, #4]
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	781b      	ldrb	r3, [r3, #0]
 8008698:	009b      	lsls	r3, r3, #2
 800869a:	4413      	add	r3, r2
 800869c:	881b      	ldrh	r3, [r3, #0]
 800869e:	b29b      	uxth	r3, r3
 80086a0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80086a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80086a8:	81fb      	strh	r3, [r7, #14]
 80086aa:	687a      	ldr	r2, [r7, #4]
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	781b      	ldrb	r3, [r3, #0]
 80086b0:	009b      	lsls	r3, r3, #2
 80086b2:	441a      	add	r2, r3
 80086b4:	89fb      	ldrh	r3, [r7, #14]
 80086b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80086ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80086be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80086c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80086c6:	b29b      	uxth	r3, r3
 80086c8:	8013      	strh	r3, [r2, #0]
 80086ca:	e3dc      	b.n	8008e86 <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	633b      	str	r3, [r7, #48]	@ 0x30
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80086d6:	b29b      	uxth	r3, r3
 80086d8:	461a      	mov	r2, r3
 80086da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086dc:	4413      	add	r3, r2
 80086de:	633b      	str	r3, [r7, #48]	@ 0x30
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	781b      	ldrb	r3, [r3, #0]
 80086e4:	00da      	lsls	r2, r3, #3
 80086e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086e8:	4413      	add	r3, r2
 80086ea:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80086ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	88db      	ldrh	r3, [r3, #6]
 80086f4:	085b      	lsrs	r3, r3, #1
 80086f6:	b29b      	uxth	r3, r3
 80086f8:	005b      	lsls	r3, r3, #1
 80086fa:	b29a      	uxth	r2, r3
 80086fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086fe:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800870a:	b29b      	uxth	r3, r3
 800870c:	461a      	mov	r2, r3
 800870e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008710:	4413      	add	r3, r2
 8008712:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	781b      	ldrb	r3, [r3, #0]
 8008718:	00da      	lsls	r2, r3, #3
 800871a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800871c:	4413      	add	r3, r2
 800871e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008722:	627b      	str	r3, [r7, #36]	@ 0x24
 8008724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008726:	881b      	ldrh	r3, [r3, #0]
 8008728:	b29b      	uxth	r3, r3
 800872a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800872e:	b29a      	uxth	r2, r3
 8008730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008732:	801a      	strh	r2, [r3, #0]
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	691b      	ldr	r3, [r3, #16]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d10a      	bne.n	8008752 <USB_ActivateEndpoint+0x28a>
 800873c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800873e:	881b      	ldrh	r3, [r3, #0]
 8008740:	b29b      	uxth	r3, r3
 8008742:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008746:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800874a:	b29a      	uxth	r2, r3
 800874c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800874e:	801a      	strh	r2, [r3, #0]
 8008750:	e041      	b.n	80087d6 <USB_ActivateEndpoint+0x30e>
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	691b      	ldr	r3, [r3, #16]
 8008756:	2b3e      	cmp	r3, #62	@ 0x3e
 8008758:	d81c      	bhi.n	8008794 <USB_ActivateEndpoint+0x2cc>
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	691b      	ldr	r3, [r3, #16]
 800875e:	085b      	lsrs	r3, r3, #1
 8008760:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	691b      	ldr	r3, [r3, #16]
 8008768:	f003 0301 	and.w	r3, r3, #1
 800876c:	2b00      	cmp	r3, #0
 800876e:	d004      	beq.n	800877a <USB_ActivateEndpoint+0x2b2>
 8008770:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008774:	3301      	adds	r3, #1
 8008776:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800877a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800877c:	881b      	ldrh	r3, [r3, #0]
 800877e:	b29a      	uxth	r2, r3
 8008780:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008784:	b29b      	uxth	r3, r3
 8008786:	029b      	lsls	r3, r3, #10
 8008788:	b29b      	uxth	r3, r3
 800878a:	4313      	orrs	r3, r2
 800878c:	b29a      	uxth	r2, r3
 800878e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008790:	801a      	strh	r2, [r3, #0]
 8008792:	e020      	b.n	80087d6 <USB_ActivateEndpoint+0x30e>
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	691b      	ldr	r3, [r3, #16]
 8008798:	095b      	lsrs	r3, r3, #5
 800879a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	691b      	ldr	r3, [r3, #16]
 80087a2:	f003 031f 	and.w	r3, r3, #31
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d104      	bne.n	80087b4 <USB_ActivateEndpoint+0x2ec>
 80087aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80087ae:	3b01      	subs	r3, #1
 80087b0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80087b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087b6:	881b      	ldrh	r3, [r3, #0]
 80087b8:	b29a      	uxth	r2, r3
 80087ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80087be:	b29b      	uxth	r3, r3
 80087c0:	029b      	lsls	r3, r3, #10
 80087c2:	b29b      	uxth	r3, r3
 80087c4:	4313      	orrs	r3, r2
 80087c6:	b29b      	uxth	r3, r3
 80087c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80087cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80087d0:	b29a      	uxth	r2, r3
 80087d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087d4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80087d6:	687a      	ldr	r2, [r7, #4]
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	781b      	ldrb	r3, [r3, #0]
 80087dc:	009b      	lsls	r3, r3, #2
 80087de:	4413      	add	r3, r2
 80087e0:	881b      	ldrh	r3, [r3, #0]
 80087e2:	847b      	strh	r3, [r7, #34]	@ 0x22
 80087e4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80087e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d01b      	beq.n	8008826 <USB_ActivateEndpoint+0x35e>
 80087ee:	687a      	ldr	r2, [r7, #4]
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	781b      	ldrb	r3, [r3, #0]
 80087f4:	009b      	lsls	r3, r3, #2
 80087f6:	4413      	add	r3, r2
 80087f8:	881b      	ldrh	r3, [r3, #0]
 80087fa:	b29b      	uxth	r3, r3
 80087fc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008800:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008804:	843b      	strh	r3, [r7, #32]
 8008806:	687a      	ldr	r2, [r7, #4]
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	781b      	ldrb	r3, [r3, #0]
 800880c:	009b      	lsls	r3, r3, #2
 800880e:	441a      	add	r2, r3
 8008810:	8c3b      	ldrh	r3, [r7, #32]
 8008812:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008816:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800881a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800881e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008822:	b29b      	uxth	r3, r3
 8008824:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	781b      	ldrb	r3, [r3, #0]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d124      	bne.n	8008878 <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800882e:	687a      	ldr	r2, [r7, #4]
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	781b      	ldrb	r3, [r3, #0]
 8008834:	009b      	lsls	r3, r3, #2
 8008836:	4413      	add	r3, r2
 8008838:	881b      	ldrh	r3, [r3, #0]
 800883a:	b29b      	uxth	r3, r3
 800883c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008840:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008844:	83bb      	strh	r3, [r7, #28]
 8008846:	8bbb      	ldrh	r3, [r7, #28]
 8008848:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800884c:	83bb      	strh	r3, [r7, #28]
 800884e:	8bbb      	ldrh	r3, [r7, #28]
 8008850:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008854:	83bb      	strh	r3, [r7, #28]
 8008856:	687a      	ldr	r2, [r7, #4]
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	781b      	ldrb	r3, [r3, #0]
 800885c:	009b      	lsls	r3, r3, #2
 800885e:	441a      	add	r2, r3
 8008860:	8bbb      	ldrh	r3, [r7, #28]
 8008862:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008866:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800886a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800886e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008872:	b29b      	uxth	r3, r3
 8008874:	8013      	strh	r3, [r2, #0]
 8008876:	e306      	b.n	8008e86 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8008878:	687a      	ldr	r2, [r7, #4]
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	781b      	ldrb	r3, [r3, #0]
 800887e:	009b      	lsls	r3, r3, #2
 8008880:	4413      	add	r3, r2
 8008882:	881b      	ldrh	r3, [r3, #0]
 8008884:	b29b      	uxth	r3, r3
 8008886:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800888a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800888e:	83fb      	strh	r3, [r7, #30]
 8008890:	8bfb      	ldrh	r3, [r7, #30]
 8008892:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008896:	83fb      	strh	r3, [r7, #30]
 8008898:	687a      	ldr	r2, [r7, #4]
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	781b      	ldrb	r3, [r3, #0]
 800889e:	009b      	lsls	r3, r3, #2
 80088a0:	441a      	add	r2, r3
 80088a2:	8bfb      	ldrh	r3, [r7, #30]
 80088a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80088a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80088ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80088b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80088b4:	b29b      	uxth	r3, r3
 80088b6:	8013      	strh	r3, [r2, #0]
 80088b8:	e2e5      	b.n	8008e86 <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	78db      	ldrb	r3, [r3, #3]
 80088be:	2b02      	cmp	r3, #2
 80088c0:	d11e      	bne.n	8008900 <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80088c2:	687a      	ldr	r2, [r7, #4]
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	781b      	ldrb	r3, [r3, #0]
 80088c8:	009b      	lsls	r3, r3, #2
 80088ca:	4413      	add	r3, r2
 80088cc:	881b      	ldrh	r3, [r3, #0]
 80088ce:	b29b      	uxth	r3, r3
 80088d0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80088d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80088d8:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 80088dc:	687a      	ldr	r2, [r7, #4]
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	781b      	ldrb	r3, [r3, #0]
 80088e2:	009b      	lsls	r3, r3, #2
 80088e4:	441a      	add	r2, r3
 80088e6:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 80088ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80088ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80088f2:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80088f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80088fa:	b29b      	uxth	r3, r3
 80088fc:	8013      	strh	r3, [r2, #0]
 80088fe:	e01d      	b.n	800893c <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8008900:	687a      	ldr	r2, [r7, #4]
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	781b      	ldrb	r3, [r3, #0]
 8008906:	009b      	lsls	r3, r3, #2
 8008908:	4413      	add	r3, r2
 800890a:	881b      	ldrh	r3, [r3, #0]
 800890c:	b29b      	uxth	r3, r3
 800890e:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8008912:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008916:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 800891a:	687a      	ldr	r2, [r7, #4]
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	781b      	ldrb	r3, [r3, #0]
 8008920:	009b      	lsls	r3, r3, #2
 8008922:	441a      	add	r2, r3
 8008924:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 8008928:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800892c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008930:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008934:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008938:	b29b      	uxth	r3, r3
 800893a:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008946:	b29b      	uxth	r3, r3
 8008948:	461a      	mov	r2, r3
 800894a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800894c:	4413      	add	r3, r2
 800894e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	781b      	ldrb	r3, [r3, #0]
 8008954:	00da      	lsls	r2, r3, #3
 8008956:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008958:	4413      	add	r3, r2
 800895a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800895e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	891b      	ldrh	r3, [r3, #8]
 8008964:	085b      	lsrs	r3, r3, #1
 8008966:	b29b      	uxth	r3, r3
 8008968:	005b      	lsls	r3, r3, #1
 800896a:	b29a      	uxth	r2, r3
 800896c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800896e:	801a      	strh	r2, [r3, #0]
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	677b      	str	r3, [r7, #116]	@ 0x74
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800897a:	b29b      	uxth	r3, r3
 800897c:	461a      	mov	r2, r3
 800897e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008980:	4413      	add	r3, r2
 8008982:	677b      	str	r3, [r7, #116]	@ 0x74
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	781b      	ldrb	r3, [r3, #0]
 8008988:	00da      	lsls	r2, r3, #3
 800898a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800898c:	4413      	add	r3, r2
 800898e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008992:	673b      	str	r3, [r7, #112]	@ 0x70
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	895b      	ldrh	r3, [r3, #10]
 8008998:	085b      	lsrs	r3, r3, #1
 800899a:	b29b      	uxth	r3, r3
 800899c:	005b      	lsls	r3, r3, #1
 800899e:	b29a      	uxth	r2, r3
 80089a0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80089a2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	785b      	ldrb	r3, [r3, #1]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	f040 81af 	bne.w	8008d0c <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80089ae:	687a      	ldr	r2, [r7, #4]
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	781b      	ldrb	r3, [r3, #0]
 80089b4:	009b      	lsls	r3, r3, #2
 80089b6:	4413      	add	r3, r2
 80089b8:	881b      	ldrh	r3, [r3, #0]
 80089ba:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 80089be:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 80089c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d01d      	beq.n	8008a06 <USB_ActivateEndpoint+0x53e>
 80089ca:	687a      	ldr	r2, [r7, #4]
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	781b      	ldrb	r3, [r3, #0]
 80089d0:	009b      	lsls	r3, r3, #2
 80089d2:	4413      	add	r3, r2
 80089d4:	881b      	ldrh	r3, [r3, #0]
 80089d6:	b29b      	uxth	r3, r3
 80089d8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80089dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80089e0:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 80089e4:	687a      	ldr	r2, [r7, #4]
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	781b      	ldrb	r3, [r3, #0]
 80089ea:	009b      	lsls	r3, r3, #2
 80089ec:	441a      	add	r2, r3
 80089ee:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 80089f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80089f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80089fa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80089fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a02:	b29b      	uxth	r3, r3
 8008a04:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008a06:	687a      	ldr	r2, [r7, #4]
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	781b      	ldrb	r3, [r3, #0]
 8008a0c:	009b      	lsls	r3, r3, #2
 8008a0e:	4413      	add	r3, r2
 8008a10:	881b      	ldrh	r3, [r3, #0]
 8008a12:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 8008a16:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8008a1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d01d      	beq.n	8008a5e <USB_ActivateEndpoint+0x596>
 8008a22:	687a      	ldr	r2, [r7, #4]
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	781b      	ldrb	r3, [r3, #0]
 8008a28:	009b      	lsls	r3, r3, #2
 8008a2a:	4413      	add	r3, r2
 8008a2c:	881b      	ldrh	r3, [r3, #0]
 8008a2e:	b29b      	uxth	r3, r3
 8008a30:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008a34:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a38:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 8008a3c:	687a      	ldr	r2, [r7, #4]
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	781b      	ldrb	r3, [r3, #0]
 8008a42:	009b      	lsls	r3, r3, #2
 8008a44:	441a      	add	r2, r3
 8008a46:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8008a4a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008a4e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008a52:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008a56:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008a5a:	b29b      	uxth	r3, r3
 8008a5c:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	785b      	ldrb	r3, [r3, #1]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d16b      	bne.n	8008b3e <USB_ActivateEndpoint+0x676>
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008a70:	b29b      	uxth	r3, r3
 8008a72:	461a      	mov	r2, r3
 8008a74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a76:	4413      	add	r3, r2
 8008a78:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	781b      	ldrb	r3, [r3, #0]
 8008a7e:	00da      	lsls	r2, r3, #3
 8008a80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a82:	4413      	add	r3, r2
 8008a84:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008a88:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008a8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008a8c:	881b      	ldrh	r3, [r3, #0]
 8008a8e:	b29b      	uxth	r3, r3
 8008a90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008a94:	b29a      	uxth	r2, r3
 8008a96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008a98:	801a      	strh	r2, [r3, #0]
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	691b      	ldr	r3, [r3, #16]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d10a      	bne.n	8008ab8 <USB_ActivateEndpoint+0x5f0>
 8008aa2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008aa4:	881b      	ldrh	r3, [r3, #0]
 8008aa6:	b29b      	uxth	r3, r3
 8008aa8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008aac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ab0:	b29a      	uxth	r2, r3
 8008ab2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008ab4:	801a      	strh	r2, [r3, #0]
 8008ab6:	e05d      	b.n	8008b74 <USB_ActivateEndpoint+0x6ac>
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	691b      	ldr	r3, [r3, #16]
 8008abc:	2b3e      	cmp	r3, #62	@ 0x3e
 8008abe:	d81c      	bhi.n	8008afa <USB_ActivateEndpoint+0x632>
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	691b      	ldr	r3, [r3, #16]
 8008ac4:	085b      	lsrs	r3, r3, #1
 8008ac6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	691b      	ldr	r3, [r3, #16]
 8008ace:	f003 0301 	and.w	r3, r3, #1
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d004      	beq.n	8008ae0 <USB_ActivateEndpoint+0x618>
 8008ad6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008ada:	3301      	adds	r3, #1
 8008adc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008ae0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008ae2:	881b      	ldrh	r3, [r3, #0]
 8008ae4:	b29a      	uxth	r2, r3
 8008ae6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008aea:	b29b      	uxth	r3, r3
 8008aec:	029b      	lsls	r3, r3, #10
 8008aee:	b29b      	uxth	r3, r3
 8008af0:	4313      	orrs	r3, r2
 8008af2:	b29a      	uxth	r2, r3
 8008af4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008af6:	801a      	strh	r2, [r3, #0]
 8008af8:	e03c      	b.n	8008b74 <USB_ActivateEndpoint+0x6ac>
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	691b      	ldr	r3, [r3, #16]
 8008afe:	095b      	lsrs	r3, r3, #5
 8008b00:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	691b      	ldr	r3, [r3, #16]
 8008b08:	f003 031f 	and.w	r3, r3, #31
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d104      	bne.n	8008b1a <USB_ActivateEndpoint+0x652>
 8008b10:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008b14:	3b01      	subs	r3, #1
 8008b16:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008b1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008b1c:	881b      	ldrh	r3, [r3, #0]
 8008b1e:	b29a      	uxth	r2, r3
 8008b20:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008b24:	b29b      	uxth	r3, r3
 8008b26:	029b      	lsls	r3, r3, #10
 8008b28:	b29b      	uxth	r3, r3
 8008b2a:	4313      	orrs	r3, r2
 8008b2c:	b29b      	uxth	r3, r3
 8008b2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b36:	b29a      	uxth	r2, r3
 8008b38:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008b3a:	801a      	strh	r2, [r3, #0]
 8008b3c:	e01a      	b.n	8008b74 <USB_ActivateEndpoint+0x6ac>
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	785b      	ldrb	r3, [r3, #1]
 8008b42:	2b01      	cmp	r3, #1
 8008b44:	d116      	bne.n	8008b74 <USB_ActivateEndpoint+0x6ac>
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	657b      	str	r3, [r7, #84]	@ 0x54
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008b50:	b29b      	uxth	r3, r3
 8008b52:	461a      	mov	r2, r3
 8008b54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008b56:	4413      	add	r3, r2
 8008b58:	657b      	str	r3, [r7, #84]	@ 0x54
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	781b      	ldrb	r3, [r3, #0]
 8008b5e:	00da      	lsls	r2, r3, #3
 8008b60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008b62:	4413      	add	r3, r2
 8008b64:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008b68:	653b      	str	r3, [r7, #80]	@ 0x50
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	691b      	ldr	r3, [r3, #16]
 8008b6e:	b29a      	uxth	r2, r3
 8008b70:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008b72:	801a      	strh	r2, [r3, #0]
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	647b      	str	r3, [r7, #68]	@ 0x44
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	785b      	ldrb	r3, [r3, #1]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d16b      	bne.n	8008c58 <USB_ActivateEndpoint+0x790>
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008b8a:	b29b      	uxth	r3, r3
 8008b8c:	461a      	mov	r2, r3
 8008b8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b90:	4413      	add	r3, r2
 8008b92:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	781b      	ldrb	r3, [r3, #0]
 8008b98:	00da      	lsls	r2, r3, #3
 8008b9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b9c:	4413      	add	r3, r2
 8008b9e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008ba2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008ba4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ba6:	881b      	ldrh	r3, [r3, #0]
 8008ba8:	b29b      	uxth	r3, r3
 8008baa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008bae:	b29a      	uxth	r2, r3
 8008bb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bb2:	801a      	strh	r2, [r3, #0]
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	691b      	ldr	r3, [r3, #16]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d10a      	bne.n	8008bd2 <USB_ActivateEndpoint+0x70a>
 8008bbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bbe:	881b      	ldrh	r3, [r3, #0]
 8008bc0:	b29b      	uxth	r3, r3
 8008bc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008bc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008bca:	b29a      	uxth	r2, r3
 8008bcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bce:	801a      	strh	r2, [r3, #0]
 8008bd0:	e05b      	b.n	8008c8a <USB_ActivateEndpoint+0x7c2>
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	691b      	ldr	r3, [r3, #16]
 8008bd6:	2b3e      	cmp	r3, #62	@ 0x3e
 8008bd8:	d81c      	bhi.n	8008c14 <USB_ActivateEndpoint+0x74c>
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	691b      	ldr	r3, [r3, #16]
 8008bde:	085b      	lsrs	r3, r3, #1
 8008be0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	691b      	ldr	r3, [r3, #16]
 8008be8:	f003 0301 	and.w	r3, r3, #1
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d004      	beq.n	8008bfa <USB_ActivateEndpoint+0x732>
 8008bf0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008bf4:	3301      	adds	r3, #1
 8008bf6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008bfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bfc:	881b      	ldrh	r3, [r3, #0]
 8008bfe:	b29a      	uxth	r2, r3
 8008c00:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008c04:	b29b      	uxth	r3, r3
 8008c06:	029b      	lsls	r3, r3, #10
 8008c08:	b29b      	uxth	r3, r3
 8008c0a:	4313      	orrs	r3, r2
 8008c0c:	b29a      	uxth	r2, r3
 8008c0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c10:	801a      	strh	r2, [r3, #0]
 8008c12:	e03a      	b.n	8008c8a <USB_ActivateEndpoint+0x7c2>
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	691b      	ldr	r3, [r3, #16]
 8008c18:	095b      	lsrs	r3, r3, #5
 8008c1a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	691b      	ldr	r3, [r3, #16]
 8008c22:	f003 031f 	and.w	r3, r3, #31
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d104      	bne.n	8008c34 <USB_ActivateEndpoint+0x76c>
 8008c2a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008c2e:	3b01      	subs	r3, #1
 8008c30:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008c34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c36:	881b      	ldrh	r3, [r3, #0]
 8008c38:	b29a      	uxth	r2, r3
 8008c3a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008c3e:	b29b      	uxth	r3, r3
 8008c40:	029b      	lsls	r3, r3, #10
 8008c42:	b29b      	uxth	r3, r3
 8008c44:	4313      	orrs	r3, r2
 8008c46:	b29b      	uxth	r3, r3
 8008c48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c50:	b29a      	uxth	r2, r3
 8008c52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c54:	801a      	strh	r2, [r3, #0]
 8008c56:	e018      	b.n	8008c8a <USB_ActivateEndpoint+0x7c2>
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	785b      	ldrb	r3, [r3, #1]
 8008c5c:	2b01      	cmp	r3, #1
 8008c5e:	d114      	bne.n	8008c8a <USB_ActivateEndpoint+0x7c2>
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008c66:	b29b      	uxth	r3, r3
 8008c68:	461a      	mov	r2, r3
 8008c6a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008c6c:	4413      	add	r3, r2
 8008c6e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	781b      	ldrb	r3, [r3, #0]
 8008c74:	00da      	lsls	r2, r3, #3
 8008c76:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008c78:	4413      	add	r3, r2
 8008c7a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008c7e:	643b      	str	r3, [r7, #64]	@ 0x40
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	691b      	ldr	r3, [r3, #16]
 8008c84:	b29a      	uxth	r2, r3
 8008c86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008c88:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008c8a:	687a      	ldr	r2, [r7, #4]
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	781b      	ldrb	r3, [r3, #0]
 8008c90:	009b      	lsls	r3, r3, #2
 8008c92:	4413      	add	r3, r2
 8008c94:	881b      	ldrh	r3, [r3, #0]
 8008c96:	b29b      	uxth	r3, r3
 8008c98:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008c9c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ca0:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8008ca2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008ca4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008ca8:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8008caa:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008cac:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008cb0:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8008cb2:	687a      	ldr	r2, [r7, #4]
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	781b      	ldrb	r3, [r3, #0]
 8008cb8:	009b      	lsls	r3, r3, #2
 8008cba:	441a      	add	r2, r3
 8008cbc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008cbe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008cc2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008cc6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008cca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008cce:	b29b      	uxth	r3, r3
 8008cd0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008cd2:	687a      	ldr	r2, [r7, #4]
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	781b      	ldrb	r3, [r3, #0]
 8008cd8:	009b      	lsls	r3, r3, #2
 8008cda:	4413      	add	r3, r2
 8008cdc:	881b      	ldrh	r3, [r3, #0]
 8008cde:	b29b      	uxth	r3, r3
 8008ce0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008ce4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008ce8:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8008cea:	687a      	ldr	r2, [r7, #4]
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	781b      	ldrb	r3, [r3, #0]
 8008cf0:	009b      	lsls	r3, r3, #2
 8008cf2:	441a      	add	r2, r3
 8008cf4:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8008cf6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008cfa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008cfe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008d02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d06:	b29b      	uxth	r3, r3
 8008d08:	8013      	strh	r3, [r2, #0]
 8008d0a:	e0bc      	b.n	8008e86 <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008d0c:	687a      	ldr	r2, [r7, #4]
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	781b      	ldrb	r3, [r3, #0]
 8008d12:	009b      	lsls	r3, r3, #2
 8008d14:	4413      	add	r3, r2
 8008d16:	881b      	ldrh	r3, [r3, #0]
 8008d18:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8008d1c:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008d20:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d01d      	beq.n	8008d64 <USB_ActivateEndpoint+0x89c>
 8008d28:	687a      	ldr	r2, [r7, #4]
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	781b      	ldrb	r3, [r3, #0]
 8008d2e:	009b      	lsls	r3, r3, #2
 8008d30:	4413      	add	r3, r2
 8008d32:	881b      	ldrh	r3, [r3, #0]
 8008d34:	b29b      	uxth	r3, r3
 8008d36:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008d3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d3e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 8008d42:	687a      	ldr	r2, [r7, #4]
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	781b      	ldrb	r3, [r3, #0]
 8008d48:	009b      	lsls	r3, r3, #2
 8008d4a:	441a      	add	r2, r3
 8008d4c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008d50:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008d54:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008d58:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008d5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d60:	b29b      	uxth	r3, r3
 8008d62:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008d64:	687a      	ldr	r2, [r7, #4]
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	781b      	ldrb	r3, [r3, #0]
 8008d6a:	009b      	lsls	r3, r3, #2
 8008d6c:	4413      	add	r3, r2
 8008d6e:	881b      	ldrh	r3, [r3, #0]
 8008d70:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 8008d74:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8008d78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d01d      	beq.n	8008dbc <USB_ActivateEndpoint+0x8f4>
 8008d80:	687a      	ldr	r2, [r7, #4]
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	781b      	ldrb	r3, [r3, #0]
 8008d86:	009b      	lsls	r3, r3, #2
 8008d88:	4413      	add	r3, r2
 8008d8a:	881b      	ldrh	r3, [r3, #0]
 8008d8c:	b29b      	uxth	r3, r3
 8008d8e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008d92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d96:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 8008d9a:	687a      	ldr	r2, [r7, #4]
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	781b      	ldrb	r3, [r3, #0]
 8008da0:	009b      	lsls	r3, r3, #2
 8008da2:	441a      	add	r2, r3
 8008da4:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 8008da8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008dac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008db0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008db4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008db8:	b29b      	uxth	r3, r3
 8008dba:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008dbc:	683b      	ldr	r3, [r7, #0]
 8008dbe:	78db      	ldrb	r3, [r3, #3]
 8008dc0:	2b01      	cmp	r3, #1
 8008dc2:	d024      	beq.n	8008e0e <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008dc4:	687a      	ldr	r2, [r7, #4]
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	781b      	ldrb	r3, [r3, #0]
 8008dca:	009b      	lsls	r3, r3, #2
 8008dcc:	4413      	add	r3, r2
 8008dce:	881b      	ldrh	r3, [r3, #0]
 8008dd0:	b29b      	uxth	r3, r3
 8008dd2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008dd6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008dda:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8008dde:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8008de2:	f083 0320 	eor.w	r3, r3, #32
 8008de6:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8008dea:	687a      	ldr	r2, [r7, #4]
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	781b      	ldrb	r3, [r3, #0]
 8008df0:	009b      	lsls	r3, r3, #2
 8008df2:	441a      	add	r2, r3
 8008df4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8008df8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008dfc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008e00:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008e04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e08:	b29b      	uxth	r3, r3
 8008e0a:	8013      	strh	r3, [r2, #0]
 8008e0c:	e01d      	b.n	8008e4a <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008e0e:	687a      	ldr	r2, [r7, #4]
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	781b      	ldrb	r3, [r3, #0]
 8008e14:	009b      	lsls	r3, r3, #2
 8008e16:	4413      	add	r3, r2
 8008e18:	881b      	ldrh	r3, [r3, #0]
 8008e1a:	b29b      	uxth	r3, r3
 8008e1c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008e20:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008e24:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8008e28:	687a      	ldr	r2, [r7, #4]
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	781b      	ldrb	r3, [r3, #0]
 8008e2e:	009b      	lsls	r3, r3, #2
 8008e30:	441a      	add	r2, r3
 8008e32:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8008e36:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008e3a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008e3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008e42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e46:	b29b      	uxth	r3, r3
 8008e48:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008e4a:	687a      	ldr	r2, [r7, #4]
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	781b      	ldrb	r3, [r3, #0]
 8008e50:	009b      	lsls	r3, r3, #2
 8008e52:	4413      	add	r3, r2
 8008e54:	881b      	ldrh	r3, [r3, #0]
 8008e56:	b29b      	uxth	r3, r3
 8008e58:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008e5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e60:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8008e64:	687a      	ldr	r2, [r7, #4]
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	781b      	ldrb	r3, [r3, #0]
 8008e6a:	009b      	lsls	r3, r3, #2
 8008e6c:	441a      	add	r2, r3
 8008e6e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8008e72:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008e76:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008e7a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008e7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e82:	b29b      	uxth	r3, r3
 8008e84:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8008e86:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	379c      	adds	r7, #156	@ 0x9c
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e94:	4770      	bx	lr
 8008e96:	bf00      	nop

08008e98 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008e98:	b480      	push	{r7}
 8008e9a:	b08d      	sub	sp, #52	@ 0x34
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
 8008ea0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008ea2:	683b      	ldr	r3, [r7, #0]
 8008ea4:	7b1b      	ldrb	r3, [r3, #12]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	f040 808e 	bne.w	8008fc8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8008eac:	683b      	ldr	r3, [r7, #0]
 8008eae:	785b      	ldrb	r3, [r3, #1]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d044      	beq.n	8008f3e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008eb4:	687a      	ldr	r2, [r7, #4]
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	781b      	ldrb	r3, [r3, #0]
 8008eba:	009b      	lsls	r3, r3, #2
 8008ebc:	4413      	add	r3, r2
 8008ebe:	881b      	ldrh	r3, [r3, #0]
 8008ec0:	81bb      	strh	r3, [r7, #12]
 8008ec2:	89bb      	ldrh	r3, [r7, #12]
 8008ec4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d01b      	beq.n	8008f04 <USB_DeactivateEndpoint+0x6c>
 8008ecc:	687a      	ldr	r2, [r7, #4]
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	781b      	ldrb	r3, [r3, #0]
 8008ed2:	009b      	lsls	r3, r3, #2
 8008ed4:	4413      	add	r3, r2
 8008ed6:	881b      	ldrh	r3, [r3, #0]
 8008ed8:	b29b      	uxth	r3, r3
 8008eda:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008ede:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ee2:	817b      	strh	r3, [r7, #10]
 8008ee4:	687a      	ldr	r2, [r7, #4]
 8008ee6:	683b      	ldr	r3, [r7, #0]
 8008ee8:	781b      	ldrb	r3, [r3, #0]
 8008eea:	009b      	lsls	r3, r3, #2
 8008eec:	441a      	add	r2, r3
 8008eee:	897b      	ldrh	r3, [r7, #10]
 8008ef0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008ef4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008ef8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008efc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008f00:	b29b      	uxth	r3, r3
 8008f02:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008f04:	687a      	ldr	r2, [r7, #4]
 8008f06:	683b      	ldr	r3, [r7, #0]
 8008f08:	781b      	ldrb	r3, [r3, #0]
 8008f0a:	009b      	lsls	r3, r3, #2
 8008f0c:	4413      	add	r3, r2
 8008f0e:	881b      	ldrh	r3, [r3, #0]
 8008f10:	b29b      	uxth	r3, r3
 8008f12:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008f16:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008f1a:	813b      	strh	r3, [r7, #8]
 8008f1c:	687a      	ldr	r2, [r7, #4]
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	781b      	ldrb	r3, [r3, #0]
 8008f22:	009b      	lsls	r3, r3, #2
 8008f24:	441a      	add	r2, r3
 8008f26:	893b      	ldrh	r3, [r7, #8]
 8008f28:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008f2c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008f30:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008f34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f38:	b29b      	uxth	r3, r3
 8008f3a:	8013      	strh	r3, [r2, #0]
 8008f3c:	e192      	b.n	8009264 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008f3e:	687a      	ldr	r2, [r7, #4]
 8008f40:	683b      	ldr	r3, [r7, #0]
 8008f42:	781b      	ldrb	r3, [r3, #0]
 8008f44:	009b      	lsls	r3, r3, #2
 8008f46:	4413      	add	r3, r2
 8008f48:	881b      	ldrh	r3, [r3, #0]
 8008f4a:	827b      	strh	r3, [r7, #18]
 8008f4c:	8a7b      	ldrh	r3, [r7, #18]
 8008f4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d01b      	beq.n	8008f8e <USB_DeactivateEndpoint+0xf6>
 8008f56:	687a      	ldr	r2, [r7, #4]
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	781b      	ldrb	r3, [r3, #0]
 8008f5c:	009b      	lsls	r3, r3, #2
 8008f5e:	4413      	add	r3, r2
 8008f60:	881b      	ldrh	r3, [r3, #0]
 8008f62:	b29b      	uxth	r3, r3
 8008f64:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008f68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f6c:	823b      	strh	r3, [r7, #16]
 8008f6e:	687a      	ldr	r2, [r7, #4]
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	781b      	ldrb	r3, [r3, #0]
 8008f74:	009b      	lsls	r3, r3, #2
 8008f76:	441a      	add	r2, r3
 8008f78:	8a3b      	ldrh	r3, [r7, #16]
 8008f7a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008f7e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008f82:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008f86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f8a:	b29b      	uxth	r3, r3
 8008f8c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008f8e:	687a      	ldr	r2, [r7, #4]
 8008f90:	683b      	ldr	r3, [r7, #0]
 8008f92:	781b      	ldrb	r3, [r3, #0]
 8008f94:	009b      	lsls	r3, r3, #2
 8008f96:	4413      	add	r3, r2
 8008f98:	881b      	ldrh	r3, [r3, #0]
 8008f9a:	b29b      	uxth	r3, r3
 8008f9c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008fa0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008fa4:	81fb      	strh	r3, [r7, #14]
 8008fa6:	687a      	ldr	r2, [r7, #4]
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	781b      	ldrb	r3, [r3, #0]
 8008fac:	009b      	lsls	r3, r3, #2
 8008fae:	441a      	add	r2, r3
 8008fb0:	89fb      	ldrh	r3, [r7, #14]
 8008fb2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008fb6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008fba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008fbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008fc2:	b29b      	uxth	r3, r3
 8008fc4:	8013      	strh	r3, [r2, #0]
 8008fc6:	e14d      	b.n	8009264 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	785b      	ldrb	r3, [r3, #1]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	f040 80a5 	bne.w	800911c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008fd2:	687a      	ldr	r2, [r7, #4]
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	781b      	ldrb	r3, [r3, #0]
 8008fd8:	009b      	lsls	r3, r3, #2
 8008fda:	4413      	add	r3, r2
 8008fdc:	881b      	ldrh	r3, [r3, #0]
 8008fde:	843b      	strh	r3, [r7, #32]
 8008fe0:	8c3b      	ldrh	r3, [r7, #32]
 8008fe2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d01b      	beq.n	8009022 <USB_DeactivateEndpoint+0x18a>
 8008fea:	687a      	ldr	r2, [r7, #4]
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	781b      	ldrb	r3, [r3, #0]
 8008ff0:	009b      	lsls	r3, r3, #2
 8008ff2:	4413      	add	r3, r2
 8008ff4:	881b      	ldrh	r3, [r3, #0]
 8008ff6:	b29b      	uxth	r3, r3
 8008ff8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008ffc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009000:	83fb      	strh	r3, [r7, #30]
 8009002:	687a      	ldr	r2, [r7, #4]
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	781b      	ldrb	r3, [r3, #0]
 8009008:	009b      	lsls	r3, r3, #2
 800900a:	441a      	add	r2, r3
 800900c:	8bfb      	ldrh	r3, [r7, #30]
 800900e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009012:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009016:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800901a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800901e:	b29b      	uxth	r3, r3
 8009020:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009022:	687a      	ldr	r2, [r7, #4]
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	781b      	ldrb	r3, [r3, #0]
 8009028:	009b      	lsls	r3, r3, #2
 800902a:	4413      	add	r3, r2
 800902c:	881b      	ldrh	r3, [r3, #0]
 800902e:	83bb      	strh	r3, [r7, #28]
 8009030:	8bbb      	ldrh	r3, [r7, #28]
 8009032:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009036:	2b00      	cmp	r3, #0
 8009038:	d01b      	beq.n	8009072 <USB_DeactivateEndpoint+0x1da>
 800903a:	687a      	ldr	r2, [r7, #4]
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	781b      	ldrb	r3, [r3, #0]
 8009040:	009b      	lsls	r3, r3, #2
 8009042:	4413      	add	r3, r2
 8009044:	881b      	ldrh	r3, [r3, #0]
 8009046:	b29b      	uxth	r3, r3
 8009048:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800904c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009050:	837b      	strh	r3, [r7, #26]
 8009052:	687a      	ldr	r2, [r7, #4]
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	781b      	ldrb	r3, [r3, #0]
 8009058:	009b      	lsls	r3, r3, #2
 800905a:	441a      	add	r2, r3
 800905c:	8b7b      	ldrh	r3, [r7, #26]
 800905e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009062:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009066:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800906a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800906e:	b29b      	uxth	r3, r3
 8009070:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8009072:	687a      	ldr	r2, [r7, #4]
 8009074:	683b      	ldr	r3, [r7, #0]
 8009076:	781b      	ldrb	r3, [r3, #0]
 8009078:	009b      	lsls	r3, r3, #2
 800907a:	4413      	add	r3, r2
 800907c:	881b      	ldrh	r3, [r3, #0]
 800907e:	b29b      	uxth	r3, r3
 8009080:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009084:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009088:	833b      	strh	r3, [r7, #24]
 800908a:	687a      	ldr	r2, [r7, #4]
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	781b      	ldrb	r3, [r3, #0]
 8009090:	009b      	lsls	r3, r3, #2
 8009092:	441a      	add	r2, r3
 8009094:	8b3b      	ldrh	r3, [r7, #24]
 8009096:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800909a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800909e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80090a2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80090a6:	b29b      	uxth	r3, r3
 80090a8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80090aa:	687a      	ldr	r2, [r7, #4]
 80090ac:	683b      	ldr	r3, [r7, #0]
 80090ae:	781b      	ldrb	r3, [r3, #0]
 80090b0:	009b      	lsls	r3, r3, #2
 80090b2:	4413      	add	r3, r2
 80090b4:	881b      	ldrh	r3, [r3, #0]
 80090b6:	b29b      	uxth	r3, r3
 80090b8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80090bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80090c0:	82fb      	strh	r3, [r7, #22]
 80090c2:	687a      	ldr	r2, [r7, #4]
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	781b      	ldrb	r3, [r3, #0]
 80090c8:	009b      	lsls	r3, r3, #2
 80090ca:	441a      	add	r2, r3
 80090cc:	8afb      	ldrh	r3, [r7, #22]
 80090ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80090d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80090d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80090da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80090de:	b29b      	uxth	r3, r3
 80090e0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80090e2:	687a      	ldr	r2, [r7, #4]
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	781b      	ldrb	r3, [r3, #0]
 80090e8:	009b      	lsls	r3, r3, #2
 80090ea:	4413      	add	r3, r2
 80090ec:	881b      	ldrh	r3, [r3, #0]
 80090ee:	b29b      	uxth	r3, r3
 80090f0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80090f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80090f8:	82bb      	strh	r3, [r7, #20]
 80090fa:	687a      	ldr	r2, [r7, #4]
 80090fc:	683b      	ldr	r3, [r7, #0]
 80090fe:	781b      	ldrb	r3, [r3, #0]
 8009100:	009b      	lsls	r3, r3, #2
 8009102:	441a      	add	r2, r3
 8009104:	8abb      	ldrh	r3, [r7, #20]
 8009106:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800910a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800910e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009112:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009116:	b29b      	uxth	r3, r3
 8009118:	8013      	strh	r3, [r2, #0]
 800911a:	e0a3      	b.n	8009264 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800911c:	687a      	ldr	r2, [r7, #4]
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	781b      	ldrb	r3, [r3, #0]
 8009122:	009b      	lsls	r3, r3, #2
 8009124:	4413      	add	r3, r2
 8009126:	881b      	ldrh	r3, [r3, #0]
 8009128:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800912a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800912c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009130:	2b00      	cmp	r3, #0
 8009132:	d01b      	beq.n	800916c <USB_DeactivateEndpoint+0x2d4>
 8009134:	687a      	ldr	r2, [r7, #4]
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	781b      	ldrb	r3, [r3, #0]
 800913a:	009b      	lsls	r3, r3, #2
 800913c:	4413      	add	r3, r2
 800913e:	881b      	ldrh	r3, [r3, #0]
 8009140:	b29b      	uxth	r3, r3
 8009142:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009146:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800914a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800914c:	687a      	ldr	r2, [r7, #4]
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	781b      	ldrb	r3, [r3, #0]
 8009152:	009b      	lsls	r3, r3, #2
 8009154:	441a      	add	r2, r3
 8009156:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8009158:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800915c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009160:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009164:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009168:	b29b      	uxth	r3, r3
 800916a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800916c:	687a      	ldr	r2, [r7, #4]
 800916e:	683b      	ldr	r3, [r7, #0]
 8009170:	781b      	ldrb	r3, [r3, #0]
 8009172:	009b      	lsls	r3, r3, #2
 8009174:	4413      	add	r3, r2
 8009176:	881b      	ldrh	r3, [r3, #0]
 8009178:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800917a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800917c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009180:	2b00      	cmp	r3, #0
 8009182:	d01b      	beq.n	80091bc <USB_DeactivateEndpoint+0x324>
 8009184:	687a      	ldr	r2, [r7, #4]
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	781b      	ldrb	r3, [r3, #0]
 800918a:	009b      	lsls	r3, r3, #2
 800918c:	4413      	add	r3, r2
 800918e:	881b      	ldrh	r3, [r3, #0]
 8009190:	b29b      	uxth	r3, r3
 8009192:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009196:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800919a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800919c:	687a      	ldr	r2, [r7, #4]
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	781b      	ldrb	r3, [r3, #0]
 80091a2:	009b      	lsls	r3, r3, #2
 80091a4:	441a      	add	r2, r3
 80091a6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80091a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80091ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80091b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80091b4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80091b8:	b29b      	uxth	r3, r3
 80091ba:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80091bc:	687a      	ldr	r2, [r7, #4]
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	781b      	ldrb	r3, [r3, #0]
 80091c2:	009b      	lsls	r3, r3, #2
 80091c4:	4413      	add	r3, r2
 80091c6:	881b      	ldrh	r3, [r3, #0]
 80091c8:	b29b      	uxth	r3, r3
 80091ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80091ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80091d2:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80091d4:	687a      	ldr	r2, [r7, #4]
 80091d6:	683b      	ldr	r3, [r7, #0]
 80091d8:	781b      	ldrb	r3, [r3, #0]
 80091da:	009b      	lsls	r3, r3, #2
 80091dc:	441a      	add	r2, r3
 80091de:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80091e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80091e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80091e8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80091ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80091f0:	b29b      	uxth	r3, r3
 80091f2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80091f4:	687a      	ldr	r2, [r7, #4]
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	781b      	ldrb	r3, [r3, #0]
 80091fa:	009b      	lsls	r3, r3, #2
 80091fc:	4413      	add	r3, r2
 80091fe:	881b      	ldrh	r3, [r3, #0]
 8009200:	b29b      	uxth	r3, r3
 8009202:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009206:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800920a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800920c:	687a      	ldr	r2, [r7, #4]
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	781b      	ldrb	r3, [r3, #0]
 8009212:	009b      	lsls	r3, r3, #2
 8009214:	441a      	add	r2, r3
 8009216:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009218:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800921c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009220:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009224:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009228:	b29b      	uxth	r3, r3
 800922a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800922c:	687a      	ldr	r2, [r7, #4]
 800922e:	683b      	ldr	r3, [r7, #0]
 8009230:	781b      	ldrb	r3, [r3, #0]
 8009232:	009b      	lsls	r3, r3, #2
 8009234:	4413      	add	r3, r2
 8009236:	881b      	ldrh	r3, [r3, #0]
 8009238:	b29b      	uxth	r3, r3
 800923a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800923e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009242:	847b      	strh	r3, [r7, #34]	@ 0x22
 8009244:	687a      	ldr	r2, [r7, #4]
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	781b      	ldrb	r3, [r3, #0]
 800924a:	009b      	lsls	r3, r3, #2
 800924c:	441a      	add	r2, r3
 800924e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009250:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009254:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009258:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800925c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009260:	b29b      	uxth	r3, r3
 8009262:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8009264:	2300      	movs	r3, #0
}
 8009266:	4618      	mov	r0, r3
 8009268:	3734      	adds	r7, #52	@ 0x34
 800926a:	46bd      	mov	sp, r7
 800926c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009270:	4770      	bx	lr

08009272 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009272:	b580      	push	{r7, lr}
 8009274:	b0ac      	sub	sp, #176	@ 0xb0
 8009276:	af00      	add	r7, sp, #0
 8009278:	6078      	str	r0, [r7, #4]
 800927a:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	785b      	ldrb	r3, [r3, #1]
 8009280:	2b01      	cmp	r3, #1
 8009282:	f040 84ca 	bne.w	8009c1a <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	699a      	ldr	r2, [r3, #24]
 800928a:	683b      	ldr	r3, [r7, #0]
 800928c:	691b      	ldr	r3, [r3, #16]
 800928e:	429a      	cmp	r2, r3
 8009290:	d904      	bls.n	800929c <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	691b      	ldr	r3, [r3, #16]
 8009296:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800929a:	e003      	b.n	80092a4 <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 800929c:	683b      	ldr	r3, [r7, #0]
 800929e:	699b      	ldr	r3, [r3, #24]
 80092a0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	7b1b      	ldrb	r3, [r3, #12]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d122      	bne.n	80092f2 <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80092ac:	683b      	ldr	r3, [r7, #0]
 80092ae:	6959      	ldr	r1, [r3, #20]
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	88da      	ldrh	r2, [r3, #6]
 80092b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80092b8:	b29b      	uxth	r3, r3
 80092ba:	6878      	ldr	r0, [r7, #4]
 80092bc:	f000 febd 	bl	800a03a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	613b      	str	r3, [r7, #16]
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80092ca:	b29b      	uxth	r3, r3
 80092cc:	461a      	mov	r2, r3
 80092ce:	693b      	ldr	r3, [r7, #16]
 80092d0:	4413      	add	r3, r2
 80092d2:	613b      	str	r3, [r7, #16]
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	781b      	ldrb	r3, [r3, #0]
 80092d8:	00da      	lsls	r2, r3, #3
 80092da:	693b      	ldr	r3, [r7, #16]
 80092dc:	4413      	add	r3, r2
 80092de:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80092e2:	60fb      	str	r3, [r7, #12]
 80092e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80092e8:	b29a      	uxth	r2, r3
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	801a      	strh	r2, [r3, #0]
 80092ee:	f000 bc6f 	b.w	8009bd0 <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80092f2:	683b      	ldr	r3, [r7, #0]
 80092f4:	78db      	ldrb	r3, [r3, #3]
 80092f6:	2b02      	cmp	r3, #2
 80092f8:	f040 831e 	bne.w	8009938 <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	6a1a      	ldr	r2, [r3, #32]
 8009300:	683b      	ldr	r3, [r7, #0]
 8009302:	691b      	ldr	r3, [r3, #16]
 8009304:	429a      	cmp	r2, r3
 8009306:	f240 82cf 	bls.w	80098a8 <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800930a:	687a      	ldr	r2, [r7, #4]
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	781b      	ldrb	r3, [r3, #0]
 8009310:	009b      	lsls	r3, r3, #2
 8009312:	4413      	add	r3, r2
 8009314:	881b      	ldrh	r3, [r3, #0]
 8009316:	b29b      	uxth	r3, r3
 8009318:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800931c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009320:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8009324:	687a      	ldr	r2, [r7, #4]
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	781b      	ldrb	r3, [r3, #0]
 800932a:	009b      	lsls	r3, r3, #2
 800932c:	441a      	add	r2, r3
 800932e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8009332:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009336:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800933a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800933e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009342:	b29b      	uxth	r3, r3
 8009344:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8009346:	683b      	ldr	r3, [r7, #0]
 8009348:	6a1a      	ldr	r2, [r3, #32]
 800934a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800934e:	1ad2      	subs	r2, r2, r3
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009354:	687a      	ldr	r2, [r7, #4]
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	781b      	ldrb	r3, [r3, #0]
 800935a:	009b      	lsls	r3, r3, #2
 800935c:	4413      	add	r3, r2
 800935e:	881b      	ldrh	r3, [r3, #0]
 8009360:	b29b      	uxth	r3, r3
 8009362:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009366:	2b00      	cmp	r3, #0
 8009368:	f000 814f 	beq.w	800960a <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	785b      	ldrb	r3, [r3, #1]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d16b      	bne.n	8009450 <USB_EPStartXfer+0x1de>
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009382:	b29b      	uxth	r3, r3
 8009384:	461a      	mov	r2, r3
 8009386:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009388:	4413      	add	r3, r2
 800938a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	781b      	ldrb	r3, [r3, #0]
 8009390:	00da      	lsls	r2, r3, #3
 8009392:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009394:	4413      	add	r3, r2
 8009396:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800939a:	627b      	str	r3, [r7, #36]	@ 0x24
 800939c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800939e:	881b      	ldrh	r3, [r3, #0]
 80093a0:	b29b      	uxth	r3, r3
 80093a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80093a6:	b29a      	uxth	r2, r3
 80093a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093aa:	801a      	strh	r2, [r3, #0]
 80093ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d10a      	bne.n	80093ca <USB_EPStartXfer+0x158>
 80093b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093b6:	881b      	ldrh	r3, [r3, #0]
 80093b8:	b29b      	uxth	r3, r3
 80093ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80093be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80093c2:	b29a      	uxth	r2, r3
 80093c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093c6:	801a      	strh	r2, [r3, #0]
 80093c8:	e05b      	b.n	8009482 <USB_EPStartXfer+0x210>
 80093ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80093ce:	2b3e      	cmp	r3, #62	@ 0x3e
 80093d0:	d81c      	bhi.n	800940c <USB_EPStartXfer+0x19a>
 80093d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80093d6:	085b      	lsrs	r3, r3, #1
 80093d8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80093dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80093e0:	f003 0301 	and.w	r3, r3, #1
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d004      	beq.n	80093f2 <USB_EPStartXfer+0x180>
 80093e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80093ec:	3301      	adds	r3, #1
 80093ee:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80093f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093f4:	881b      	ldrh	r3, [r3, #0]
 80093f6:	b29a      	uxth	r2, r3
 80093f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80093fc:	b29b      	uxth	r3, r3
 80093fe:	029b      	lsls	r3, r3, #10
 8009400:	b29b      	uxth	r3, r3
 8009402:	4313      	orrs	r3, r2
 8009404:	b29a      	uxth	r2, r3
 8009406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009408:	801a      	strh	r2, [r3, #0]
 800940a:	e03a      	b.n	8009482 <USB_EPStartXfer+0x210>
 800940c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009410:	095b      	lsrs	r3, r3, #5
 8009412:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009416:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800941a:	f003 031f 	and.w	r3, r3, #31
 800941e:	2b00      	cmp	r3, #0
 8009420:	d104      	bne.n	800942c <USB_EPStartXfer+0x1ba>
 8009422:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009426:	3b01      	subs	r3, #1
 8009428:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800942c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800942e:	881b      	ldrh	r3, [r3, #0]
 8009430:	b29a      	uxth	r2, r3
 8009432:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009436:	b29b      	uxth	r3, r3
 8009438:	029b      	lsls	r3, r3, #10
 800943a:	b29b      	uxth	r3, r3
 800943c:	4313      	orrs	r3, r2
 800943e:	b29b      	uxth	r3, r3
 8009440:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009444:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009448:	b29a      	uxth	r2, r3
 800944a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800944c:	801a      	strh	r2, [r3, #0]
 800944e:	e018      	b.n	8009482 <USB_EPStartXfer+0x210>
 8009450:	683b      	ldr	r3, [r7, #0]
 8009452:	785b      	ldrb	r3, [r3, #1]
 8009454:	2b01      	cmp	r3, #1
 8009456:	d114      	bne.n	8009482 <USB_EPStartXfer+0x210>
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800945e:	b29b      	uxth	r3, r3
 8009460:	461a      	mov	r2, r3
 8009462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009464:	4413      	add	r3, r2
 8009466:	633b      	str	r3, [r7, #48]	@ 0x30
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	781b      	ldrb	r3, [r3, #0]
 800946c:	00da      	lsls	r2, r3, #3
 800946e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009470:	4413      	add	r3, r2
 8009472:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009476:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009478:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800947c:	b29a      	uxth	r2, r3
 800947e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009480:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009482:	683b      	ldr	r3, [r7, #0]
 8009484:	895b      	ldrh	r3, [r3, #10]
 8009486:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	6959      	ldr	r1, [r3, #20]
 800948e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009492:	b29b      	uxth	r3, r3
 8009494:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009498:	6878      	ldr	r0, [r7, #4]
 800949a:	f000 fdce 	bl	800a03a <USB_WritePMA>
            ep->xfer_buff += len;
 800949e:	683b      	ldr	r3, [r7, #0]
 80094a0:	695a      	ldr	r2, [r3, #20]
 80094a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80094a6:	441a      	add	r2, r3
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	6a1a      	ldr	r2, [r3, #32]
 80094b0:	683b      	ldr	r3, [r7, #0]
 80094b2:	691b      	ldr	r3, [r3, #16]
 80094b4:	429a      	cmp	r2, r3
 80094b6:	d907      	bls.n	80094c8 <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 80094b8:	683b      	ldr	r3, [r7, #0]
 80094ba:	6a1a      	ldr	r2, [r3, #32]
 80094bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80094c0:	1ad2      	subs	r2, r2, r3
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	621a      	str	r2, [r3, #32]
 80094c6:	e006      	b.n	80094d6 <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	6a1b      	ldr	r3, [r3, #32]
 80094cc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 80094d0:	683b      	ldr	r3, [r7, #0]
 80094d2:	2200      	movs	r2, #0
 80094d4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80094d6:	683b      	ldr	r3, [r7, #0]
 80094d8:	785b      	ldrb	r3, [r3, #1]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d16b      	bne.n	80095b6 <USB_EPStartXfer+0x344>
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	61bb      	str	r3, [r7, #24]
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80094e8:	b29b      	uxth	r3, r3
 80094ea:	461a      	mov	r2, r3
 80094ec:	69bb      	ldr	r3, [r7, #24]
 80094ee:	4413      	add	r3, r2
 80094f0:	61bb      	str	r3, [r7, #24]
 80094f2:	683b      	ldr	r3, [r7, #0]
 80094f4:	781b      	ldrb	r3, [r3, #0]
 80094f6:	00da      	lsls	r2, r3, #3
 80094f8:	69bb      	ldr	r3, [r7, #24]
 80094fa:	4413      	add	r3, r2
 80094fc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009500:	617b      	str	r3, [r7, #20]
 8009502:	697b      	ldr	r3, [r7, #20]
 8009504:	881b      	ldrh	r3, [r3, #0]
 8009506:	b29b      	uxth	r3, r3
 8009508:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800950c:	b29a      	uxth	r2, r3
 800950e:	697b      	ldr	r3, [r7, #20]
 8009510:	801a      	strh	r2, [r3, #0]
 8009512:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009516:	2b00      	cmp	r3, #0
 8009518:	d10a      	bne.n	8009530 <USB_EPStartXfer+0x2be>
 800951a:	697b      	ldr	r3, [r7, #20]
 800951c:	881b      	ldrh	r3, [r3, #0]
 800951e:	b29b      	uxth	r3, r3
 8009520:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009524:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009528:	b29a      	uxth	r2, r3
 800952a:	697b      	ldr	r3, [r7, #20]
 800952c:	801a      	strh	r2, [r3, #0]
 800952e:	e05d      	b.n	80095ec <USB_EPStartXfer+0x37a>
 8009530:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009534:	2b3e      	cmp	r3, #62	@ 0x3e
 8009536:	d81c      	bhi.n	8009572 <USB_EPStartXfer+0x300>
 8009538:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800953c:	085b      	lsrs	r3, r3, #1
 800953e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009542:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009546:	f003 0301 	and.w	r3, r3, #1
 800954a:	2b00      	cmp	r3, #0
 800954c:	d004      	beq.n	8009558 <USB_EPStartXfer+0x2e6>
 800954e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009552:	3301      	adds	r3, #1
 8009554:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009558:	697b      	ldr	r3, [r7, #20]
 800955a:	881b      	ldrh	r3, [r3, #0]
 800955c:	b29a      	uxth	r2, r3
 800955e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009562:	b29b      	uxth	r3, r3
 8009564:	029b      	lsls	r3, r3, #10
 8009566:	b29b      	uxth	r3, r3
 8009568:	4313      	orrs	r3, r2
 800956a:	b29a      	uxth	r2, r3
 800956c:	697b      	ldr	r3, [r7, #20]
 800956e:	801a      	strh	r2, [r3, #0]
 8009570:	e03c      	b.n	80095ec <USB_EPStartXfer+0x37a>
 8009572:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009576:	095b      	lsrs	r3, r3, #5
 8009578:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800957c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009580:	f003 031f 	and.w	r3, r3, #31
 8009584:	2b00      	cmp	r3, #0
 8009586:	d104      	bne.n	8009592 <USB_EPStartXfer+0x320>
 8009588:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800958c:	3b01      	subs	r3, #1
 800958e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009592:	697b      	ldr	r3, [r7, #20]
 8009594:	881b      	ldrh	r3, [r3, #0]
 8009596:	b29a      	uxth	r2, r3
 8009598:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800959c:	b29b      	uxth	r3, r3
 800959e:	029b      	lsls	r3, r3, #10
 80095a0:	b29b      	uxth	r3, r3
 80095a2:	4313      	orrs	r3, r2
 80095a4:	b29b      	uxth	r3, r3
 80095a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80095aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80095ae:	b29a      	uxth	r2, r3
 80095b0:	697b      	ldr	r3, [r7, #20]
 80095b2:	801a      	strh	r2, [r3, #0]
 80095b4:	e01a      	b.n	80095ec <USB_EPStartXfer+0x37a>
 80095b6:	683b      	ldr	r3, [r7, #0]
 80095b8:	785b      	ldrb	r3, [r3, #1]
 80095ba:	2b01      	cmp	r3, #1
 80095bc:	d116      	bne.n	80095ec <USB_EPStartXfer+0x37a>
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	623b      	str	r3, [r7, #32]
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80095c8:	b29b      	uxth	r3, r3
 80095ca:	461a      	mov	r2, r3
 80095cc:	6a3b      	ldr	r3, [r7, #32]
 80095ce:	4413      	add	r3, r2
 80095d0:	623b      	str	r3, [r7, #32]
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	781b      	ldrb	r3, [r3, #0]
 80095d6:	00da      	lsls	r2, r3, #3
 80095d8:	6a3b      	ldr	r3, [r7, #32]
 80095da:	4413      	add	r3, r2
 80095dc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80095e0:	61fb      	str	r3, [r7, #28]
 80095e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80095e6:	b29a      	uxth	r2, r3
 80095e8:	69fb      	ldr	r3, [r7, #28]
 80095ea:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	891b      	ldrh	r3, [r3, #8]
 80095f0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	6959      	ldr	r1, [r3, #20]
 80095f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80095fc:	b29b      	uxth	r3, r3
 80095fe:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009602:	6878      	ldr	r0, [r7, #4]
 8009604:	f000 fd19 	bl	800a03a <USB_WritePMA>
 8009608:	e2e2      	b.n	8009bd0 <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	785b      	ldrb	r3, [r3, #1]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d16b      	bne.n	80096ea <USB_EPStartXfer+0x478>
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800961c:	b29b      	uxth	r3, r3
 800961e:	461a      	mov	r2, r3
 8009620:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009622:	4413      	add	r3, r2
 8009624:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009626:	683b      	ldr	r3, [r7, #0]
 8009628:	781b      	ldrb	r3, [r3, #0]
 800962a:	00da      	lsls	r2, r3, #3
 800962c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800962e:	4413      	add	r3, r2
 8009630:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009634:	647b      	str	r3, [r7, #68]	@ 0x44
 8009636:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009638:	881b      	ldrh	r3, [r3, #0]
 800963a:	b29b      	uxth	r3, r3
 800963c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009640:	b29a      	uxth	r2, r3
 8009642:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009644:	801a      	strh	r2, [r3, #0]
 8009646:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800964a:	2b00      	cmp	r3, #0
 800964c:	d10a      	bne.n	8009664 <USB_EPStartXfer+0x3f2>
 800964e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009650:	881b      	ldrh	r3, [r3, #0]
 8009652:	b29b      	uxth	r3, r3
 8009654:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009658:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800965c:	b29a      	uxth	r2, r3
 800965e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009660:	801a      	strh	r2, [r3, #0]
 8009662:	e05d      	b.n	8009720 <USB_EPStartXfer+0x4ae>
 8009664:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009668:	2b3e      	cmp	r3, #62	@ 0x3e
 800966a:	d81c      	bhi.n	80096a6 <USB_EPStartXfer+0x434>
 800966c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009670:	085b      	lsrs	r3, r3, #1
 8009672:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009676:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800967a:	f003 0301 	and.w	r3, r3, #1
 800967e:	2b00      	cmp	r3, #0
 8009680:	d004      	beq.n	800968c <USB_EPStartXfer+0x41a>
 8009682:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009686:	3301      	adds	r3, #1
 8009688:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800968c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800968e:	881b      	ldrh	r3, [r3, #0]
 8009690:	b29a      	uxth	r2, r3
 8009692:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009696:	b29b      	uxth	r3, r3
 8009698:	029b      	lsls	r3, r3, #10
 800969a:	b29b      	uxth	r3, r3
 800969c:	4313      	orrs	r3, r2
 800969e:	b29a      	uxth	r2, r3
 80096a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80096a2:	801a      	strh	r2, [r3, #0]
 80096a4:	e03c      	b.n	8009720 <USB_EPStartXfer+0x4ae>
 80096a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80096aa:	095b      	lsrs	r3, r3, #5
 80096ac:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80096b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80096b4:	f003 031f 	and.w	r3, r3, #31
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d104      	bne.n	80096c6 <USB_EPStartXfer+0x454>
 80096bc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80096c0:	3b01      	subs	r3, #1
 80096c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80096c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80096c8:	881b      	ldrh	r3, [r3, #0]
 80096ca:	b29a      	uxth	r2, r3
 80096cc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80096d0:	b29b      	uxth	r3, r3
 80096d2:	029b      	lsls	r3, r3, #10
 80096d4:	b29b      	uxth	r3, r3
 80096d6:	4313      	orrs	r3, r2
 80096d8:	b29b      	uxth	r3, r3
 80096da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80096de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80096e2:	b29a      	uxth	r2, r3
 80096e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80096e6:	801a      	strh	r2, [r3, #0]
 80096e8:	e01a      	b.n	8009720 <USB_EPStartXfer+0x4ae>
 80096ea:	683b      	ldr	r3, [r7, #0]
 80096ec:	785b      	ldrb	r3, [r3, #1]
 80096ee:	2b01      	cmp	r3, #1
 80096f0:	d116      	bne.n	8009720 <USB_EPStartXfer+0x4ae>
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	653b      	str	r3, [r7, #80]	@ 0x50
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80096fc:	b29b      	uxth	r3, r3
 80096fe:	461a      	mov	r2, r3
 8009700:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009702:	4413      	add	r3, r2
 8009704:	653b      	str	r3, [r7, #80]	@ 0x50
 8009706:	683b      	ldr	r3, [r7, #0]
 8009708:	781b      	ldrb	r3, [r3, #0]
 800970a:	00da      	lsls	r2, r3, #3
 800970c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800970e:	4413      	add	r3, r2
 8009710:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009714:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009716:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800971a:	b29a      	uxth	r2, r3
 800971c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800971e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	891b      	ldrh	r3, [r3, #8]
 8009724:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009728:	683b      	ldr	r3, [r7, #0]
 800972a:	6959      	ldr	r1, [r3, #20]
 800972c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009730:	b29b      	uxth	r3, r3
 8009732:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009736:	6878      	ldr	r0, [r7, #4]
 8009738:	f000 fc7f 	bl	800a03a <USB_WritePMA>
            ep->xfer_buff += len;
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	695a      	ldr	r2, [r3, #20]
 8009740:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009744:	441a      	add	r2, r3
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800974a:	683b      	ldr	r3, [r7, #0]
 800974c:	6a1a      	ldr	r2, [r3, #32]
 800974e:	683b      	ldr	r3, [r7, #0]
 8009750:	691b      	ldr	r3, [r3, #16]
 8009752:	429a      	cmp	r2, r3
 8009754:	d907      	bls.n	8009766 <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 8009756:	683b      	ldr	r3, [r7, #0]
 8009758:	6a1a      	ldr	r2, [r3, #32]
 800975a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800975e:	1ad2      	subs	r2, r2, r3
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	621a      	str	r2, [r3, #32]
 8009764:	e006      	b.n	8009774 <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 8009766:	683b      	ldr	r3, [r7, #0]
 8009768:	6a1b      	ldr	r3, [r3, #32]
 800976a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 800976e:	683b      	ldr	r3, [r7, #0]
 8009770:	2200      	movs	r2, #0
 8009772:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	643b      	str	r3, [r7, #64]	@ 0x40
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	785b      	ldrb	r3, [r3, #1]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d16b      	bne.n	8009858 <USB_EPStartXfer+0x5e6>
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800978a:	b29b      	uxth	r3, r3
 800978c:	461a      	mov	r2, r3
 800978e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009790:	4413      	add	r3, r2
 8009792:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009794:	683b      	ldr	r3, [r7, #0]
 8009796:	781b      	ldrb	r3, [r3, #0]
 8009798:	00da      	lsls	r2, r3, #3
 800979a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800979c:	4413      	add	r3, r2
 800979e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80097a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80097a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097a6:	881b      	ldrh	r3, [r3, #0]
 80097a8:	b29b      	uxth	r3, r3
 80097aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80097ae:	b29a      	uxth	r2, r3
 80097b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097b2:	801a      	strh	r2, [r3, #0]
 80097b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d10a      	bne.n	80097d2 <USB_EPStartXfer+0x560>
 80097bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097be:	881b      	ldrh	r3, [r3, #0]
 80097c0:	b29b      	uxth	r3, r3
 80097c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80097c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80097ca:	b29a      	uxth	r2, r3
 80097cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097ce:	801a      	strh	r2, [r3, #0]
 80097d0:	e05b      	b.n	800988a <USB_EPStartXfer+0x618>
 80097d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80097d6:	2b3e      	cmp	r3, #62	@ 0x3e
 80097d8:	d81c      	bhi.n	8009814 <USB_EPStartXfer+0x5a2>
 80097da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80097de:	085b      	lsrs	r3, r3, #1
 80097e0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80097e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80097e8:	f003 0301 	and.w	r3, r3, #1
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d004      	beq.n	80097fa <USB_EPStartXfer+0x588>
 80097f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80097f4:	3301      	adds	r3, #1
 80097f6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80097fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097fc:	881b      	ldrh	r3, [r3, #0]
 80097fe:	b29a      	uxth	r2, r3
 8009800:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009804:	b29b      	uxth	r3, r3
 8009806:	029b      	lsls	r3, r3, #10
 8009808:	b29b      	uxth	r3, r3
 800980a:	4313      	orrs	r3, r2
 800980c:	b29a      	uxth	r2, r3
 800980e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009810:	801a      	strh	r2, [r3, #0]
 8009812:	e03a      	b.n	800988a <USB_EPStartXfer+0x618>
 8009814:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009818:	095b      	lsrs	r3, r3, #5
 800981a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800981e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009822:	f003 031f 	and.w	r3, r3, #31
 8009826:	2b00      	cmp	r3, #0
 8009828:	d104      	bne.n	8009834 <USB_EPStartXfer+0x5c2>
 800982a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800982e:	3b01      	subs	r3, #1
 8009830:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009834:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009836:	881b      	ldrh	r3, [r3, #0]
 8009838:	b29a      	uxth	r2, r3
 800983a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800983e:	b29b      	uxth	r3, r3
 8009840:	029b      	lsls	r3, r3, #10
 8009842:	b29b      	uxth	r3, r3
 8009844:	4313      	orrs	r3, r2
 8009846:	b29b      	uxth	r3, r3
 8009848:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800984c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009850:	b29a      	uxth	r2, r3
 8009852:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009854:	801a      	strh	r2, [r3, #0]
 8009856:	e018      	b.n	800988a <USB_EPStartXfer+0x618>
 8009858:	683b      	ldr	r3, [r7, #0]
 800985a:	785b      	ldrb	r3, [r3, #1]
 800985c:	2b01      	cmp	r3, #1
 800985e:	d114      	bne.n	800988a <USB_EPStartXfer+0x618>
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009866:	b29b      	uxth	r3, r3
 8009868:	461a      	mov	r2, r3
 800986a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800986c:	4413      	add	r3, r2
 800986e:	643b      	str	r3, [r7, #64]	@ 0x40
 8009870:	683b      	ldr	r3, [r7, #0]
 8009872:	781b      	ldrb	r3, [r3, #0]
 8009874:	00da      	lsls	r2, r3, #3
 8009876:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009878:	4413      	add	r3, r2
 800987a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800987e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009880:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009884:	b29a      	uxth	r2, r3
 8009886:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009888:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	895b      	ldrh	r3, [r3, #10]
 800988e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009892:	683b      	ldr	r3, [r7, #0]
 8009894:	6959      	ldr	r1, [r3, #20]
 8009896:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800989a:	b29b      	uxth	r3, r3
 800989c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80098a0:	6878      	ldr	r0, [r7, #4]
 80098a2:	f000 fbca 	bl	800a03a <USB_WritePMA>
 80098a6:	e193      	b.n	8009bd0 <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	6a1b      	ldr	r3, [r3, #32]
 80098ac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80098b0:	687a      	ldr	r2, [r7, #4]
 80098b2:	683b      	ldr	r3, [r7, #0]
 80098b4:	781b      	ldrb	r3, [r3, #0]
 80098b6:	009b      	lsls	r3, r3, #2
 80098b8:	4413      	add	r3, r2
 80098ba:	881b      	ldrh	r3, [r3, #0]
 80098bc:	b29b      	uxth	r3, r3
 80098be:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80098c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80098c6:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80098ca:	687a      	ldr	r2, [r7, #4]
 80098cc:	683b      	ldr	r3, [r7, #0]
 80098ce:	781b      	ldrb	r3, [r3, #0]
 80098d0:	009b      	lsls	r3, r3, #2
 80098d2:	441a      	add	r2, r3
 80098d4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80098d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80098dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80098e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80098e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80098e8:	b29b      	uxth	r3, r3
 80098ea:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80098f6:	b29b      	uxth	r3, r3
 80098f8:	461a      	mov	r2, r3
 80098fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80098fc:	4413      	add	r3, r2
 80098fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	781b      	ldrb	r3, [r3, #0]
 8009904:	00da      	lsls	r2, r3, #3
 8009906:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009908:	4413      	add	r3, r2
 800990a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800990e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009910:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009914:	b29a      	uxth	r2, r3
 8009916:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009918:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800991a:	683b      	ldr	r3, [r7, #0]
 800991c:	891b      	ldrh	r3, [r3, #8]
 800991e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009922:	683b      	ldr	r3, [r7, #0]
 8009924:	6959      	ldr	r1, [r3, #20]
 8009926:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800992a:	b29b      	uxth	r3, r3
 800992c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009930:	6878      	ldr	r0, [r7, #4]
 8009932:	f000 fb82 	bl	800a03a <USB_WritePMA>
 8009936:	e14b      	b.n	8009bd0 <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8009938:	683b      	ldr	r3, [r7, #0]
 800993a:	6a1a      	ldr	r2, [r3, #32]
 800993c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009940:	1ad2      	subs	r2, r2, r3
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009946:	687a      	ldr	r2, [r7, #4]
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	781b      	ldrb	r3, [r3, #0]
 800994c:	009b      	lsls	r3, r3, #2
 800994e:	4413      	add	r3, r2
 8009950:	881b      	ldrh	r3, [r3, #0]
 8009952:	b29b      	uxth	r3, r3
 8009954:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009958:	2b00      	cmp	r3, #0
 800995a:	f000 809a 	beq.w	8009a92 <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	673b      	str	r3, [r7, #112]	@ 0x70
 8009962:	683b      	ldr	r3, [r7, #0]
 8009964:	785b      	ldrb	r3, [r3, #1]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d16b      	bne.n	8009a42 <USB_EPStartXfer+0x7d0>
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009974:	b29b      	uxth	r3, r3
 8009976:	461a      	mov	r2, r3
 8009978:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800997a:	4413      	add	r3, r2
 800997c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800997e:	683b      	ldr	r3, [r7, #0]
 8009980:	781b      	ldrb	r3, [r3, #0]
 8009982:	00da      	lsls	r2, r3, #3
 8009984:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009986:	4413      	add	r3, r2
 8009988:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800998c:	667b      	str	r3, [r7, #100]	@ 0x64
 800998e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009990:	881b      	ldrh	r3, [r3, #0]
 8009992:	b29b      	uxth	r3, r3
 8009994:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009998:	b29a      	uxth	r2, r3
 800999a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800999c:	801a      	strh	r2, [r3, #0]
 800999e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d10a      	bne.n	80099bc <USB_EPStartXfer+0x74a>
 80099a6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80099a8:	881b      	ldrh	r3, [r3, #0]
 80099aa:	b29b      	uxth	r3, r3
 80099ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80099b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80099b4:	b29a      	uxth	r2, r3
 80099b6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80099b8:	801a      	strh	r2, [r3, #0]
 80099ba:	e05b      	b.n	8009a74 <USB_EPStartXfer+0x802>
 80099bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80099c0:	2b3e      	cmp	r3, #62	@ 0x3e
 80099c2:	d81c      	bhi.n	80099fe <USB_EPStartXfer+0x78c>
 80099c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80099c8:	085b      	lsrs	r3, r3, #1
 80099ca:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80099ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80099d2:	f003 0301 	and.w	r3, r3, #1
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d004      	beq.n	80099e4 <USB_EPStartXfer+0x772>
 80099da:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80099de:	3301      	adds	r3, #1
 80099e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80099e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80099e6:	881b      	ldrh	r3, [r3, #0]
 80099e8:	b29a      	uxth	r2, r3
 80099ea:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80099ee:	b29b      	uxth	r3, r3
 80099f0:	029b      	lsls	r3, r3, #10
 80099f2:	b29b      	uxth	r3, r3
 80099f4:	4313      	orrs	r3, r2
 80099f6:	b29a      	uxth	r2, r3
 80099f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80099fa:	801a      	strh	r2, [r3, #0]
 80099fc:	e03a      	b.n	8009a74 <USB_EPStartXfer+0x802>
 80099fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009a02:	095b      	lsrs	r3, r3, #5
 8009a04:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009a08:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009a0c:	f003 031f 	and.w	r3, r3, #31
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d104      	bne.n	8009a1e <USB_EPStartXfer+0x7ac>
 8009a14:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009a18:	3b01      	subs	r3, #1
 8009a1a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009a1e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009a20:	881b      	ldrh	r3, [r3, #0]
 8009a22:	b29a      	uxth	r2, r3
 8009a24:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009a28:	b29b      	uxth	r3, r3
 8009a2a:	029b      	lsls	r3, r3, #10
 8009a2c:	b29b      	uxth	r3, r3
 8009a2e:	4313      	orrs	r3, r2
 8009a30:	b29b      	uxth	r3, r3
 8009a32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a3a:	b29a      	uxth	r2, r3
 8009a3c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009a3e:	801a      	strh	r2, [r3, #0]
 8009a40:	e018      	b.n	8009a74 <USB_EPStartXfer+0x802>
 8009a42:	683b      	ldr	r3, [r7, #0]
 8009a44:	785b      	ldrb	r3, [r3, #1]
 8009a46:	2b01      	cmp	r3, #1
 8009a48:	d114      	bne.n	8009a74 <USB_EPStartXfer+0x802>
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009a50:	b29b      	uxth	r3, r3
 8009a52:	461a      	mov	r2, r3
 8009a54:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009a56:	4413      	add	r3, r2
 8009a58:	673b      	str	r3, [r7, #112]	@ 0x70
 8009a5a:	683b      	ldr	r3, [r7, #0]
 8009a5c:	781b      	ldrb	r3, [r3, #0]
 8009a5e:	00da      	lsls	r2, r3, #3
 8009a60:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009a62:	4413      	add	r3, r2
 8009a64:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009a68:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009a6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009a6e:	b29a      	uxth	r2, r3
 8009a70:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009a72:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8009a74:	683b      	ldr	r3, [r7, #0]
 8009a76:	895b      	ldrh	r3, [r3, #10]
 8009a78:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	6959      	ldr	r1, [r3, #20]
 8009a80:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009a84:	b29b      	uxth	r3, r3
 8009a86:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009a8a:	6878      	ldr	r0, [r7, #4]
 8009a8c:	f000 fad5 	bl	800a03a <USB_WritePMA>
 8009a90:	e09e      	b.n	8009bd0 <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009a92:	683b      	ldr	r3, [r7, #0]
 8009a94:	785b      	ldrb	r3, [r3, #1]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d16b      	bne.n	8009b72 <USB_EPStartXfer+0x900>
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009aa4:	b29b      	uxth	r3, r3
 8009aa6:	461a      	mov	r2, r3
 8009aa8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009aaa:	4413      	add	r3, r2
 8009aac:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009aae:	683b      	ldr	r3, [r7, #0]
 8009ab0:	781b      	ldrb	r3, [r3, #0]
 8009ab2:	00da      	lsls	r2, r3, #3
 8009ab4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009ab6:	4413      	add	r3, r2
 8009ab8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009abc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009abe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009ac0:	881b      	ldrh	r3, [r3, #0]
 8009ac2:	b29b      	uxth	r3, r3
 8009ac4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009ac8:	b29a      	uxth	r2, r3
 8009aca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009acc:	801a      	strh	r2, [r3, #0]
 8009ace:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d10a      	bne.n	8009aec <USB_EPStartXfer+0x87a>
 8009ad6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009ad8:	881b      	ldrh	r3, [r3, #0]
 8009ada:	b29b      	uxth	r3, r3
 8009adc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009ae0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009ae4:	b29a      	uxth	r2, r3
 8009ae6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009ae8:	801a      	strh	r2, [r3, #0]
 8009aea:	e063      	b.n	8009bb4 <USB_EPStartXfer+0x942>
 8009aec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009af0:	2b3e      	cmp	r3, #62	@ 0x3e
 8009af2:	d81c      	bhi.n	8009b2e <USB_EPStartXfer+0x8bc>
 8009af4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009af8:	085b      	lsrs	r3, r3, #1
 8009afa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009afe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009b02:	f003 0301 	and.w	r3, r3, #1
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d004      	beq.n	8009b14 <USB_EPStartXfer+0x8a2>
 8009b0a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009b0e:	3301      	adds	r3, #1
 8009b10:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009b14:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009b16:	881b      	ldrh	r3, [r3, #0]
 8009b18:	b29a      	uxth	r2, r3
 8009b1a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009b1e:	b29b      	uxth	r3, r3
 8009b20:	029b      	lsls	r3, r3, #10
 8009b22:	b29b      	uxth	r3, r3
 8009b24:	4313      	orrs	r3, r2
 8009b26:	b29a      	uxth	r2, r3
 8009b28:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009b2a:	801a      	strh	r2, [r3, #0]
 8009b2c:	e042      	b.n	8009bb4 <USB_EPStartXfer+0x942>
 8009b2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009b32:	095b      	lsrs	r3, r3, #5
 8009b34:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009b38:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009b3c:	f003 031f 	and.w	r3, r3, #31
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d104      	bne.n	8009b4e <USB_EPStartXfer+0x8dc>
 8009b44:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009b48:	3b01      	subs	r3, #1
 8009b4a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009b4e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009b50:	881b      	ldrh	r3, [r3, #0]
 8009b52:	b29a      	uxth	r2, r3
 8009b54:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009b58:	b29b      	uxth	r3, r3
 8009b5a:	029b      	lsls	r3, r3, #10
 8009b5c:	b29b      	uxth	r3, r3
 8009b5e:	4313      	orrs	r3, r2
 8009b60:	b29b      	uxth	r3, r3
 8009b62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b6a:	b29a      	uxth	r2, r3
 8009b6c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009b6e:	801a      	strh	r2, [r3, #0]
 8009b70:	e020      	b.n	8009bb4 <USB_EPStartXfer+0x942>
 8009b72:	683b      	ldr	r3, [r7, #0]
 8009b74:	785b      	ldrb	r3, [r3, #1]
 8009b76:	2b01      	cmp	r3, #1
 8009b78:	d11c      	bne.n	8009bb4 <USB_EPStartXfer+0x942>
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009b86:	b29b      	uxth	r3, r3
 8009b88:	461a      	mov	r2, r3
 8009b8a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009b8e:	4413      	add	r3, r2
 8009b90:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	781b      	ldrb	r3, [r3, #0]
 8009b98:	00da      	lsls	r2, r3, #3
 8009b9a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009b9e:	4413      	add	r3, r2
 8009ba0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009ba4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009ba8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009bac:	b29a      	uxth	r2, r3
 8009bae:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009bb2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	891b      	ldrh	r3, [r3, #8]
 8009bb8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009bbc:	683b      	ldr	r3, [r7, #0]
 8009bbe:	6959      	ldr	r1, [r3, #20]
 8009bc0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009bc4:	b29b      	uxth	r3, r3
 8009bc6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009bca:	6878      	ldr	r0, [r7, #4]
 8009bcc:	f000 fa35 	bl	800a03a <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8009bd0:	687a      	ldr	r2, [r7, #4]
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	781b      	ldrb	r3, [r3, #0]
 8009bd6:	009b      	lsls	r3, r3, #2
 8009bd8:	4413      	add	r3, r2
 8009bda:	881b      	ldrh	r3, [r3, #0]
 8009bdc:	b29b      	uxth	r3, r3
 8009bde:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009be2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009be6:	817b      	strh	r3, [r7, #10]
 8009be8:	897b      	ldrh	r3, [r7, #10]
 8009bea:	f083 0310 	eor.w	r3, r3, #16
 8009bee:	817b      	strh	r3, [r7, #10]
 8009bf0:	897b      	ldrh	r3, [r7, #10]
 8009bf2:	f083 0320 	eor.w	r3, r3, #32
 8009bf6:	817b      	strh	r3, [r7, #10]
 8009bf8:	687a      	ldr	r2, [r7, #4]
 8009bfa:	683b      	ldr	r3, [r7, #0]
 8009bfc:	781b      	ldrb	r3, [r3, #0]
 8009bfe:	009b      	lsls	r3, r3, #2
 8009c00:	441a      	add	r2, r3
 8009c02:	897b      	ldrh	r3, [r7, #10]
 8009c04:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009c08:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009c0c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009c10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009c14:	b29b      	uxth	r3, r3
 8009c16:	8013      	strh	r3, [r2, #0]
 8009c18:	e0d5      	b.n	8009dc6 <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8009c1a:	683b      	ldr	r3, [r7, #0]
 8009c1c:	7b1b      	ldrb	r3, [r3, #12]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d156      	bne.n	8009cd0 <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 8009c22:	683b      	ldr	r3, [r7, #0]
 8009c24:	699b      	ldr	r3, [r3, #24]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d122      	bne.n	8009c70 <USB_EPStartXfer+0x9fe>
 8009c2a:	683b      	ldr	r3, [r7, #0]
 8009c2c:	78db      	ldrb	r3, [r3, #3]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d11e      	bne.n	8009c70 <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 8009c32:	687a      	ldr	r2, [r7, #4]
 8009c34:	683b      	ldr	r3, [r7, #0]
 8009c36:	781b      	ldrb	r3, [r3, #0]
 8009c38:	009b      	lsls	r3, r3, #2
 8009c3a:	4413      	add	r3, r2
 8009c3c:	881b      	ldrh	r3, [r3, #0]
 8009c3e:	b29b      	uxth	r3, r3
 8009c40:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009c44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009c48:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 8009c4c:	687a      	ldr	r2, [r7, #4]
 8009c4e:	683b      	ldr	r3, [r7, #0]
 8009c50:	781b      	ldrb	r3, [r3, #0]
 8009c52:	009b      	lsls	r3, r3, #2
 8009c54:	441a      	add	r2, r3
 8009c56:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8009c5a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009c5e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009c62:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8009c66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009c6a:	b29b      	uxth	r3, r3
 8009c6c:	8013      	strh	r3, [r2, #0]
 8009c6e:	e01d      	b.n	8009cac <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 8009c70:	687a      	ldr	r2, [r7, #4]
 8009c72:	683b      	ldr	r3, [r7, #0]
 8009c74:	781b      	ldrb	r3, [r3, #0]
 8009c76:	009b      	lsls	r3, r3, #2
 8009c78:	4413      	add	r3, r2
 8009c7a:	881b      	ldrh	r3, [r3, #0]
 8009c7c:	b29b      	uxth	r3, r3
 8009c7e:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8009c82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009c86:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 8009c8a:	687a      	ldr	r2, [r7, #4]
 8009c8c:	683b      	ldr	r3, [r7, #0]
 8009c8e:	781b      	ldrb	r3, [r3, #0]
 8009c90:	009b      	lsls	r3, r3, #2
 8009c92:	441a      	add	r2, r3
 8009c94:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 8009c98:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009c9c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009ca0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009ca4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009ca8:	b29b      	uxth	r3, r3
 8009caa:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8009cac:	683b      	ldr	r3, [r7, #0]
 8009cae:	699a      	ldr	r2, [r3, #24]
 8009cb0:	683b      	ldr	r3, [r7, #0]
 8009cb2:	691b      	ldr	r3, [r3, #16]
 8009cb4:	429a      	cmp	r2, r3
 8009cb6:	d907      	bls.n	8009cc8 <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 8009cb8:	683b      	ldr	r3, [r7, #0]
 8009cba:	699a      	ldr	r2, [r3, #24]
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	691b      	ldr	r3, [r3, #16]
 8009cc0:	1ad2      	subs	r2, r2, r3
 8009cc2:	683b      	ldr	r3, [r7, #0]
 8009cc4:	619a      	str	r2, [r3, #24]
 8009cc6:	e054      	b.n	8009d72 <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 8009cc8:	683b      	ldr	r3, [r7, #0]
 8009cca:	2200      	movs	r2, #0
 8009ccc:	619a      	str	r2, [r3, #24]
 8009cce:	e050      	b.n	8009d72 <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8009cd0:	683b      	ldr	r3, [r7, #0]
 8009cd2:	78db      	ldrb	r3, [r3, #3]
 8009cd4:	2b02      	cmp	r3, #2
 8009cd6:	d142      	bne.n	8009d5e <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8009cd8:	683b      	ldr	r3, [r7, #0]
 8009cda:	69db      	ldr	r3, [r3, #28]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d048      	beq.n	8009d72 <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8009ce0:	687a      	ldr	r2, [r7, #4]
 8009ce2:	683b      	ldr	r3, [r7, #0]
 8009ce4:	781b      	ldrb	r3, [r3, #0]
 8009ce6:	009b      	lsls	r3, r3, #2
 8009ce8:	4413      	add	r3, r2
 8009cea:	881b      	ldrh	r3, [r3, #0]
 8009cec:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009cf0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8009cf4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d005      	beq.n	8009d08 <USB_EPStartXfer+0xa96>
 8009cfc:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8009d00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d10b      	bne.n	8009d20 <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009d08:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8009d0c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d12e      	bne.n	8009d72 <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009d14:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8009d18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d128      	bne.n	8009d72 <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8009d20:	687a      	ldr	r2, [r7, #4]
 8009d22:	683b      	ldr	r3, [r7, #0]
 8009d24:	781b      	ldrb	r3, [r3, #0]
 8009d26:	009b      	lsls	r3, r3, #2
 8009d28:	4413      	add	r3, r2
 8009d2a:	881b      	ldrh	r3, [r3, #0]
 8009d2c:	b29b      	uxth	r3, r3
 8009d2e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009d32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009d36:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 8009d3a:	687a      	ldr	r2, [r7, #4]
 8009d3c:	683b      	ldr	r3, [r7, #0]
 8009d3e:	781b      	ldrb	r3, [r3, #0]
 8009d40:	009b      	lsls	r3, r3, #2
 8009d42:	441a      	add	r2, r3
 8009d44:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 8009d48:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009d4c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009d50:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009d54:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009d58:	b29b      	uxth	r3, r3
 8009d5a:	8013      	strh	r3, [r2, #0]
 8009d5c:	e009      	b.n	8009d72 <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8009d5e:	683b      	ldr	r3, [r7, #0]
 8009d60:	78db      	ldrb	r3, [r3, #3]
 8009d62:	2b01      	cmp	r3, #1
 8009d64:	d103      	bne.n	8009d6e <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 8009d66:	683b      	ldr	r3, [r7, #0]
 8009d68:	2200      	movs	r2, #0
 8009d6a:	619a      	str	r2, [r3, #24]
 8009d6c:	e001      	b.n	8009d72 <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 8009d6e:	2301      	movs	r3, #1
 8009d70:	e02a      	b.n	8009dc8 <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009d72:	687a      	ldr	r2, [r7, #4]
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	781b      	ldrb	r3, [r3, #0]
 8009d78:	009b      	lsls	r3, r3, #2
 8009d7a:	4413      	add	r3, r2
 8009d7c:	881b      	ldrh	r3, [r3, #0]
 8009d7e:	b29b      	uxth	r3, r3
 8009d80:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009d84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009d88:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8009d8c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009d90:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009d94:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8009d98:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009d9c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009da0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8009da4:	687a      	ldr	r2, [r7, #4]
 8009da6:	683b      	ldr	r3, [r7, #0]
 8009da8:	781b      	ldrb	r3, [r3, #0]
 8009daa:	009b      	lsls	r3, r3, #2
 8009dac:	441a      	add	r2, r3
 8009dae:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009db2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009db6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009dba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009dbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009dc2:	b29b      	uxth	r3, r3
 8009dc4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009dc6:	2300      	movs	r3, #0
}
 8009dc8:	4618      	mov	r0, r3
 8009dca:	37b0      	adds	r7, #176	@ 0xb0
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	bd80      	pop	{r7, pc}

08009dd0 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009dd0:	b480      	push	{r7}
 8009dd2:	b085      	sub	sp, #20
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
 8009dd8:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8009dda:	683b      	ldr	r3, [r7, #0]
 8009ddc:	785b      	ldrb	r3, [r3, #1]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d020      	beq.n	8009e24 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8009de2:	687a      	ldr	r2, [r7, #4]
 8009de4:	683b      	ldr	r3, [r7, #0]
 8009de6:	781b      	ldrb	r3, [r3, #0]
 8009de8:	009b      	lsls	r3, r3, #2
 8009dea:	4413      	add	r3, r2
 8009dec:	881b      	ldrh	r3, [r3, #0]
 8009dee:	b29b      	uxth	r3, r3
 8009df0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009df4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009df8:	81bb      	strh	r3, [r7, #12]
 8009dfa:	89bb      	ldrh	r3, [r7, #12]
 8009dfc:	f083 0310 	eor.w	r3, r3, #16
 8009e00:	81bb      	strh	r3, [r7, #12]
 8009e02:	687a      	ldr	r2, [r7, #4]
 8009e04:	683b      	ldr	r3, [r7, #0]
 8009e06:	781b      	ldrb	r3, [r3, #0]
 8009e08:	009b      	lsls	r3, r3, #2
 8009e0a:	441a      	add	r2, r3
 8009e0c:	89bb      	ldrh	r3, [r7, #12]
 8009e0e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009e12:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009e16:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009e1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009e1e:	b29b      	uxth	r3, r3
 8009e20:	8013      	strh	r3, [r2, #0]
 8009e22:	e01f      	b.n	8009e64 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8009e24:	687a      	ldr	r2, [r7, #4]
 8009e26:	683b      	ldr	r3, [r7, #0]
 8009e28:	781b      	ldrb	r3, [r3, #0]
 8009e2a:	009b      	lsls	r3, r3, #2
 8009e2c:	4413      	add	r3, r2
 8009e2e:	881b      	ldrh	r3, [r3, #0]
 8009e30:	b29b      	uxth	r3, r3
 8009e32:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009e36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009e3a:	81fb      	strh	r3, [r7, #14]
 8009e3c:	89fb      	ldrh	r3, [r7, #14]
 8009e3e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009e42:	81fb      	strh	r3, [r7, #14]
 8009e44:	687a      	ldr	r2, [r7, #4]
 8009e46:	683b      	ldr	r3, [r7, #0]
 8009e48:	781b      	ldrb	r3, [r3, #0]
 8009e4a:	009b      	lsls	r3, r3, #2
 8009e4c:	441a      	add	r2, r3
 8009e4e:	89fb      	ldrh	r3, [r7, #14]
 8009e50:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009e54:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009e58:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009e5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009e60:	b29b      	uxth	r3, r3
 8009e62:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009e64:	2300      	movs	r3, #0
}
 8009e66:	4618      	mov	r0, r3
 8009e68:	3714      	adds	r7, #20
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e70:	4770      	bx	lr

08009e72 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009e72:	b480      	push	{r7}
 8009e74:	b087      	sub	sp, #28
 8009e76:	af00      	add	r7, sp, #0
 8009e78:	6078      	str	r0, [r7, #4]
 8009e7a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8009e7c:	683b      	ldr	r3, [r7, #0]
 8009e7e:	785b      	ldrb	r3, [r3, #1]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d04c      	beq.n	8009f1e <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009e84:	687a      	ldr	r2, [r7, #4]
 8009e86:	683b      	ldr	r3, [r7, #0]
 8009e88:	781b      	ldrb	r3, [r3, #0]
 8009e8a:	009b      	lsls	r3, r3, #2
 8009e8c:	4413      	add	r3, r2
 8009e8e:	881b      	ldrh	r3, [r3, #0]
 8009e90:	823b      	strh	r3, [r7, #16]
 8009e92:	8a3b      	ldrh	r3, [r7, #16]
 8009e94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d01b      	beq.n	8009ed4 <USB_EPClearStall+0x62>
 8009e9c:	687a      	ldr	r2, [r7, #4]
 8009e9e:	683b      	ldr	r3, [r7, #0]
 8009ea0:	781b      	ldrb	r3, [r3, #0]
 8009ea2:	009b      	lsls	r3, r3, #2
 8009ea4:	4413      	add	r3, r2
 8009ea6:	881b      	ldrh	r3, [r3, #0]
 8009ea8:	b29b      	uxth	r3, r3
 8009eaa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009eae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009eb2:	81fb      	strh	r3, [r7, #14]
 8009eb4:	687a      	ldr	r2, [r7, #4]
 8009eb6:	683b      	ldr	r3, [r7, #0]
 8009eb8:	781b      	ldrb	r3, [r3, #0]
 8009eba:	009b      	lsls	r3, r3, #2
 8009ebc:	441a      	add	r2, r3
 8009ebe:	89fb      	ldrh	r3, [r7, #14]
 8009ec0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009ec4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009ec8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009ecc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009ed0:	b29b      	uxth	r3, r3
 8009ed2:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8009ed4:	683b      	ldr	r3, [r7, #0]
 8009ed6:	78db      	ldrb	r3, [r3, #3]
 8009ed8:	2b01      	cmp	r3, #1
 8009eda:	d06c      	beq.n	8009fb6 <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009edc:	687a      	ldr	r2, [r7, #4]
 8009ede:	683b      	ldr	r3, [r7, #0]
 8009ee0:	781b      	ldrb	r3, [r3, #0]
 8009ee2:	009b      	lsls	r3, r3, #2
 8009ee4:	4413      	add	r3, r2
 8009ee6:	881b      	ldrh	r3, [r3, #0]
 8009ee8:	b29b      	uxth	r3, r3
 8009eea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009eee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009ef2:	81bb      	strh	r3, [r7, #12]
 8009ef4:	89bb      	ldrh	r3, [r7, #12]
 8009ef6:	f083 0320 	eor.w	r3, r3, #32
 8009efa:	81bb      	strh	r3, [r7, #12]
 8009efc:	687a      	ldr	r2, [r7, #4]
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	781b      	ldrb	r3, [r3, #0]
 8009f02:	009b      	lsls	r3, r3, #2
 8009f04:	441a      	add	r2, r3
 8009f06:	89bb      	ldrh	r3, [r7, #12]
 8009f08:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009f0c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009f10:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009f14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009f18:	b29b      	uxth	r3, r3
 8009f1a:	8013      	strh	r3, [r2, #0]
 8009f1c:	e04b      	b.n	8009fb6 <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009f1e:	687a      	ldr	r2, [r7, #4]
 8009f20:	683b      	ldr	r3, [r7, #0]
 8009f22:	781b      	ldrb	r3, [r3, #0]
 8009f24:	009b      	lsls	r3, r3, #2
 8009f26:	4413      	add	r3, r2
 8009f28:	881b      	ldrh	r3, [r3, #0]
 8009f2a:	82fb      	strh	r3, [r7, #22]
 8009f2c:	8afb      	ldrh	r3, [r7, #22]
 8009f2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d01b      	beq.n	8009f6e <USB_EPClearStall+0xfc>
 8009f36:	687a      	ldr	r2, [r7, #4]
 8009f38:	683b      	ldr	r3, [r7, #0]
 8009f3a:	781b      	ldrb	r3, [r3, #0]
 8009f3c:	009b      	lsls	r3, r3, #2
 8009f3e:	4413      	add	r3, r2
 8009f40:	881b      	ldrh	r3, [r3, #0]
 8009f42:	b29b      	uxth	r3, r3
 8009f44:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009f48:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009f4c:	82bb      	strh	r3, [r7, #20]
 8009f4e:	687a      	ldr	r2, [r7, #4]
 8009f50:	683b      	ldr	r3, [r7, #0]
 8009f52:	781b      	ldrb	r3, [r3, #0]
 8009f54:	009b      	lsls	r3, r3, #2
 8009f56:	441a      	add	r2, r3
 8009f58:	8abb      	ldrh	r3, [r7, #20]
 8009f5a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009f5e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009f62:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009f66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009f6a:	b29b      	uxth	r3, r3
 8009f6c:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009f6e:	687a      	ldr	r2, [r7, #4]
 8009f70:	683b      	ldr	r3, [r7, #0]
 8009f72:	781b      	ldrb	r3, [r3, #0]
 8009f74:	009b      	lsls	r3, r3, #2
 8009f76:	4413      	add	r3, r2
 8009f78:	881b      	ldrh	r3, [r3, #0]
 8009f7a:	b29b      	uxth	r3, r3
 8009f7c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009f80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009f84:	827b      	strh	r3, [r7, #18]
 8009f86:	8a7b      	ldrh	r3, [r7, #18]
 8009f88:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009f8c:	827b      	strh	r3, [r7, #18]
 8009f8e:	8a7b      	ldrh	r3, [r7, #18]
 8009f90:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009f94:	827b      	strh	r3, [r7, #18]
 8009f96:	687a      	ldr	r2, [r7, #4]
 8009f98:	683b      	ldr	r3, [r7, #0]
 8009f9a:	781b      	ldrb	r3, [r3, #0]
 8009f9c:	009b      	lsls	r3, r3, #2
 8009f9e:	441a      	add	r2, r3
 8009fa0:	8a7b      	ldrh	r3, [r7, #18]
 8009fa2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009fa6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009faa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009fae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009fb2:	b29b      	uxth	r3, r3
 8009fb4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009fb6:	2300      	movs	r3, #0
}
 8009fb8:	4618      	mov	r0, r3
 8009fba:	371c      	adds	r7, #28
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc2:	4770      	bx	lr

08009fc4 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8009fc4:	b480      	push	{r7}
 8009fc6:	b083      	sub	sp, #12
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
 8009fcc:	460b      	mov	r3, r1
 8009fce:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8009fd0:	78fb      	ldrb	r3, [r7, #3]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d103      	bne.n	8009fde <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	2280      	movs	r2, #128	@ 0x80
 8009fda:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8009fde:	2300      	movs	r3, #0
}
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	370c      	adds	r7, #12
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fea:	4770      	bx	lr

08009fec <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8009fec:	b480      	push	{r7}
 8009fee:	b083      	sub	sp, #12
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8009ffa:	b29b      	uxth	r3, r3
 8009ffc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a000:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a004:	b29a      	uxth	r2, r3
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800a00c:	2300      	movs	r3, #0
}
 800a00e:	4618      	mov	r0, r3
 800a010:	370c      	adds	r7, #12
 800a012:	46bd      	mov	sp, r7
 800a014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a018:	4770      	bx	lr

0800a01a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800a01a:	b480      	push	{r7}
 800a01c:	b085      	sub	sp, #20
 800a01e:	af00      	add	r7, sp, #0
 800a020:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a028:	b29b      	uxth	r3, r3
 800a02a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800a02c:	68fb      	ldr	r3, [r7, #12]
}
 800a02e:	4618      	mov	r0, r3
 800a030:	3714      	adds	r7, #20
 800a032:	46bd      	mov	sp, r7
 800a034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a038:	4770      	bx	lr

0800a03a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a03a:	b480      	push	{r7}
 800a03c:	b08b      	sub	sp, #44	@ 0x2c
 800a03e:	af00      	add	r7, sp, #0
 800a040:	60f8      	str	r0, [r7, #12]
 800a042:	60b9      	str	r1, [r7, #8]
 800a044:	4611      	mov	r1, r2
 800a046:	461a      	mov	r2, r3
 800a048:	460b      	mov	r3, r1
 800a04a:	80fb      	strh	r3, [r7, #6]
 800a04c:	4613      	mov	r3, r2
 800a04e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800a050:	88bb      	ldrh	r3, [r7, #4]
 800a052:	3301      	adds	r3, #1
 800a054:	085b      	lsrs	r3, r3, #1
 800a056:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a05c:	68bb      	ldr	r3, [r7, #8]
 800a05e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a060:	88fa      	ldrh	r2, [r7, #6]
 800a062:	697b      	ldr	r3, [r7, #20]
 800a064:	4413      	add	r3, r2
 800a066:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a06a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800a06c:	69bb      	ldr	r3, [r7, #24]
 800a06e:	627b      	str	r3, [r7, #36]	@ 0x24
 800a070:	e01b      	b.n	800a0aa <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800a072:	69fb      	ldr	r3, [r7, #28]
 800a074:	781b      	ldrb	r3, [r3, #0]
 800a076:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800a078:	69fb      	ldr	r3, [r7, #28]
 800a07a:	3301      	adds	r3, #1
 800a07c:	781b      	ldrb	r3, [r3, #0]
 800a07e:	021b      	lsls	r3, r3, #8
 800a080:	b21a      	sxth	r2, r3
 800a082:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a086:	4313      	orrs	r3, r2
 800a088:	b21b      	sxth	r3, r3
 800a08a:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800a08c:	6a3b      	ldr	r3, [r7, #32]
 800a08e:	8a7a      	ldrh	r2, [r7, #18]
 800a090:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800a092:	6a3b      	ldr	r3, [r7, #32]
 800a094:	3302      	adds	r3, #2
 800a096:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800a098:	69fb      	ldr	r3, [r7, #28]
 800a09a:	3301      	adds	r3, #1
 800a09c:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800a09e:	69fb      	ldr	r3, [r7, #28]
 800a0a0:	3301      	adds	r3, #1
 800a0a2:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800a0a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0a6:	3b01      	subs	r3, #1
 800a0a8:	627b      	str	r3, [r7, #36]	@ 0x24
 800a0aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d1e0      	bne.n	800a072 <USB_WritePMA+0x38>
  }
}
 800a0b0:	bf00      	nop
 800a0b2:	bf00      	nop
 800a0b4:	372c      	adds	r7, #44	@ 0x2c
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0bc:	4770      	bx	lr

0800a0be <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a0be:	b480      	push	{r7}
 800a0c0:	b08b      	sub	sp, #44	@ 0x2c
 800a0c2:	af00      	add	r7, sp, #0
 800a0c4:	60f8      	str	r0, [r7, #12]
 800a0c6:	60b9      	str	r1, [r7, #8]
 800a0c8:	4611      	mov	r1, r2
 800a0ca:	461a      	mov	r2, r3
 800a0cc:	460b      	mov	r3, r1
 800a0ce:	80fb      	strh	r3, [r7, #6]
 800a0d0:	4613      	mov	r3, r2
 800a0d2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800a0d4:	88bb      	ldrh	r3, [r7, #4]
 800a0d6:	085b      	lsrs	r3, r3, #1
 800a0d8:	b29b      	uxth	r3, r3
 800a0da:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a0e0:	68bb      	ldr	r3, [r7, #8]
 800a0e2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a0e4:	88fa      	ldrh	r2, [r7, #6]
 800a0e6:	697b      	ldr	r3, [r7, #20]
 800a0e8:	4413      	add	r3, r2
 800a0ea:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a0ee:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800a0f0:	69bb      	ldr	r3, [r7, #24]
 800a0f2:	627b      	str	r3, [r7, #36]	@ 0x24
 800a0f4:	e018      	b.n	800a128 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800a0f6:	6a3b      	ldr	r3, [r7, #32]
 800a0f8:	881b      	ldrh	r3, [r3, #0]
 800a0fa:	b29b      	uxth	r3, r3
 800a0fc:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800a0fe:	6a3b      	ldr	r3, [r7, #32]
 800a100:	3302      	adds	r3, #2
 800a102:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800a104:	693b      	ldr	r3, [r7, #16]
 800a106:	b2da      	uxtb	r2, r3
 800a108:	69fb      	ldr	r3, [r7, #28]
 800a10a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a10c:	69fb      	ldr	r3, [r7, #28]
 800a10e:	3301      	adds	r3, #1
 800a110:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800a112:	693b      	ldr	r3, [r7, #16]
 800a114:	0a1b      	lsrs	r3, r3, #8
 800a116:	b2da      	uxtb	r2, r3
 800a118:	69fb      	ldr	r3, [r7, #28]
 800a11a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a11c:	69fb      	ldr	r3, [r7, #28]
 800a11e:	3301      	adds	r3, #1
 800a120:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800a122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a124:	3b01      	subs	r3, #1
 800a126:	627b      	str	r3, [r7, #36]	@ 0x24
 800a128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d1e3      	bne.n	800a0f6 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800a12e:	88bb      	ldrh	r3, [r7, #4]
 800a130:	f003 0301 	and.w	r3, r3, #1
 800a134:	b29b      	uxth	r3, r3
 800a136:	2b00      	cmp	r3, #0
 800a138:	d007      	beq.n	800a14a <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800a13a:	6a3b      	ldr	r3, [r7, #32]
 800a13c:	881b      	ldrh	r3, [r3, #0]
 800a13e:	b29b      	uxth	r3, r3
 800a140:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800a142:	693b      	ldr	r3, [r7, #16]
 800a144:	b2da      	uxtb	r2, r3
 800a146:	69fb      	ldr	r3, [r7, #28]
 800a148:	701a      	strb	r2, [r3, #0]
  }
}
 800a14a:	bf00      	nop
 800a14c:	372c      	adds	r7, #44	@ 0x2c
 800a14e:	46bd      	mov	sp, r7
 800a150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a154:	4770      	bx	lr

0800a156 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a156:	b580      	push	{r7, lr}
 800a158:	b084      	sub	sp, #16
 800a15a:	af00      	add	r7, sp, #0
 800a15c:	6078      	str	r0, [r7, #4]
 800a15e:	460b      	mov	r3, r1
 800a160:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a162:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800a166:	f005 fbcf 	bl	800f908 <USBD_static_malloc>
 800a16a:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d105      	bne.n	800a17e <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	2200      	movs	r2, #0
 800a176:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 800a17a:	2302      	movs	r3, #2
 800a17c:	e066      	b.n	800a24c <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	68fa      	ldr	r2, [r7, #12]
 800a182:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	7c1b      	ldrb	r3, [r3, #16]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d119      	bne.n	800a1c2 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a18e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a192:	2202      	movs	r2, #2
 800a194:	2181      	movs	r1, #129	@ 0x81
 800a196:	6878      	ldr	r0, [r7, #4]
 800a198:	f005 fa5d 	bl	800f656 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	2201      	movs	r2, #1
 800a1a0:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a1a2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a1a6:	2202      	movs	r2, #2
 800a1a8:	2101      	movs	r1, #1
 800a1aa:	6878      	ldr	r0, [r7, #4]
 800a1ac:	f005 fa53 	bl	800f656 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	2201      	movs	r2, #1
 800a1b4:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	2210      	movs	r2, #16
 800a1bc:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 800a1c0:	e016      	b.n	800a1f0 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a1c2:	2340      	movs	r3, #64	@ 0x40
 800a1c4:	2202      	movs	r2, #2
 800a1c6:	2181      	movs	r1, #129	@ 0x81
 800a1c8:	6878      	ldr	r0, [r7, #4]
 800a1ca:	f005 fa44 	bl	800f656 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	2201      	movs	r2, #1
 800a1d2:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a1d4:	2340      	movs	r3, #64	@ 0x40
 800a1d6:	2202      	movs	r2, #2
 800a1d8:	2101      	movs	r1, #1
 800a1da:	6878      	ldr	r0, [r7, #4]
 800a1dc:	f005 fa3b 	bl	800f656 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2201      	movs	r2, #1
 800a1e4:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	2210      	movs	r2, #16
 800a1ec:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a1f0:	2308      	movs	r3, #8
 800a1f2:	2203      	movs	r2, #3
 800a1f4:	2182      	movs	r1, #130	@ 0x82
 800a1f6:	6878      	ldr	r0, [r7, #4]
 800a1f8:	f005 fa2d 	bl	800f656 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	2201      	movs	r2, #1
 800a200:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	2200      	movs	r2, #0
 800a212:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	2200      	movs	r2, #0
 800a21a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	7c1b      	ldrb	r3, [r3, #16]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d109      	bne.n	800a23a <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a22c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a230:	2101      	movs	r1, #1
 800a232:	6878      	ldr	r0, [r7, #4]
 800a234:	f005 fafe 	bl	800f834 <USBD_LL_PrepareReceive>
 800a238:	e007      	b.n	800a24a <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a240:	2340      	movs	r3, #64	@ 0x40
 800a242:	2101      	movs	r1, #1
 800a244:	6878      	ldr	r0, [r7, #4]
 800a246:	f005 faf5 	bl	800f834 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a24a:	2300      	movs	r3, #0
}
 800a24c:	4618      	mov	r0, r3
 800a24e:	3710      	adds	r7, #16
 800a250:	46bd      	mov	sp, r7
 800a252:	bd80      	pop	{r7, pc}

0800a254 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a254:	b580      	push	{r7, lr}
 800a256:	b082      	sub	sp, #8
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
 800a25c:	460b      	mov	r3, r1
 800a25e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800a260:	2181      	movs	r1, #129	@ 0x81
 800a262:	6878      	ldr	r0, [r7, #4]
 800a264:	f005 fa1d 	bl	800f6a2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	2200      	movs	r2, #0
 800a26c:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a26e:	2101      	movs	r1, #1
 800a270:	6878      	ldr	r0, [r7, #4]
 800a272:	f005 fa16 	bl	800f6a2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	2200      	movs	r2, #0
 800a27a:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800a27e:	2182      	movs	r1, #130	@ 0x82
 800a280:	6878      	ldr	r0, [r7, #4]
 800a282:	f005 fa0e 	bl	800f6a2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	2200      	movs	r2, #0
 800a28a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	2200      	movs	r2, #0
 800a292:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d00e      	beq.n	800a2be <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a2a6:	685b      	ldr	r3, [r3, #4]
 800a2a8:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	f005 fb37 	bl	800f924 <USBD_static_free>
    pdev->pClassData = NULL;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	2200      	movs	r2, #0
 800a2ba:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a2be:	2300      	movs	r3, #0
}
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	3708      	adds	r7, #8
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	bd80      	pop	{r7, pc}

0800a2c8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b086      	sub	sp, #24
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
 800a2d0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a2d8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a2da:	2300      	movs	r3, #0
 800a2dc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a2de:	2300      	movs	r3, #0
 800a2e0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a2e6:	693b      	ldr	r3, [r7, #16]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d101      	bne.n	800a2f0 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800a2ec:	2303      	movs	r3, #3
 800a2ee:	e0af      	b.n	800a450 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a2f0:	683b      	ldr	r3, [r7, #0]
 800a2f2:	781b      	ldrb	r3, [r3, #0]
 800a2f4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d03f      	beq.n	800a37c <USBD_CDC_Setup+0xb4>
 800a2fc:	2b20      	cmp	r3, #32
 800a2fe:	f040 809f 	bne.w	800a440 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a302:	683b      	ldr	r3, [r7, #0]
 800a304:	88db      	ldrh	r3, [r3, #6]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d02e      	beq.n	800a368 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a30a:	683b      	ldr	r3, [r7, #0]
 800a30c:	781b      	ldrb	r3, [r3, #0]
 800a30e:	b25b      	sxtb	r3, r3
 800a310:	2b00      	cmp	r3, #0
 800a312:	da16      	bge.n	800a342 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a31a:	689b      	ldr	r3, [r3, #8]
 800a31c:	683a      	ldr	r2, [r7, #0]
 800a31e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800a320:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a322:	683a      	ldr	r2, [r7, #0]
 800a324:	88d2      	ldrh	r2, [r2, #6]
 800a326:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a328:	683b      	ldr	r3, [r7, #0]
 800a32a:	88db      	ldrh	r3, [r3, #6]
 800a32c:	2b07      	cmp	r3, #7
 800a32e:	bf28      	it	cs
 800a330:	2307      	movcs	r3, #7
 800a332:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a334:	693b      	ldr	r3, [r7, #16]
 800a336:	89fa      	ldrh	r2, [r7, #14]
 800a338:	4619      	mov	r1, r3
 800a33a:	6878      	ldr	r0, [r7, #4]
 800a33c:	f001 facd 	bl	800b8da <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800a340:	e085      	b.n	800a44e <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800a342:	683b      	ldr	r3, [r7, #0]
 800a344:	785a      	ldrb	r2, [r3, #1]
 800a346:	693b      	ldr	r3, [r7, #16]
 800a348:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800a34c:	683b      	ldr	r3, [r7, #0]
 800a34e:	88db      	ldrh	r3, [r3, #6]
 800a350:	b2da      	uxtb	r2, r3
 800a352:	693b      	ldr	r3, [r7, #16]
 800a354:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800a358:	6939      	ldr	r1, [r7, #16]
 800a35a:	683b      	ldr	r3, [r7, #0]
 800a35c:	88db      	ldrh	r3, [r3, #6]
 800a35e:	461a      	mov	r2, r3
 800a360:	6878      	ldr	r0, [r7, #4]
 800a362:	f001 fae6 	bl	800b932 <USBD_CtlPrepareRx>
      break;
 800a366:	e072      	b.n	800a44e <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a36e:	689b      	ldr	r3, [r3, #8]
 800a370:	683a      	ldr	r2, [r7, #0]
 800a372:	7850      	ldrb	r0, [r2, #1]
 800a374:	2200      	movs	r2, #0
 800a376:	6839      	ldr	r1, [r7, #0]
 800a378:	4798      	blx	r3
      break;
 800a37a:	e068      	b.n	800a44e <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a37c:	683b      	ldr	r3, [r7, #0]
 800a37e:	785b      	ldrb	r3, [r3, #1]
 800a380:	2b0b      	cmp	r3, #11
 800a382:	d852      	bhi.n	800a42a <USBD_CDC_Setup+0x162>
 800a384:	a201      	add	r2, pc, #4	@ (adr r2, 800a38c <USBD_CDC_Setup+0xc4>)
 800a386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a38a:	bf00      	nop
 800a38c:	0800a3bd 	.word	0x0800a3bd
 800a390:	0800a439 	.word	0x0800a439
 800a394:	0800a42b 	.word	0x0800a42b
 800a398:	0800a42b 	.word	0x0800a42b
 800a39c:	0800a42b 	.word	0x0800a42b
 800a3a0:	0800a42b 	.word	0x0800a42b
 800a3a4:	0800a42b 	.word	0x0800a42b
 800a3a8:	0800a42b 	.word	0x0800a42b
 800a3ac:	0800a42b 	.word	0x0800a42b
 800a3b0:	0800a42b 	.word	0x0800a42b
 800a3b4:	0800a3e7 	.word	0x0800a3e7
 800a3b8:	0800a411 	.word	0x0800a411
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a3c2:	b2db      	uxtb	r3, r3
 800a3c4:	2b03      	cmp	r3, #3
 800a3c6:	d107      	bne.n	800a3d8 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a3c8:	f107 030a 	add.w	r3, r7, #10
 800a3cc:	2202      	movs	r2, #2
 800a3ce:	4619      	mov	r1, r3
 800a3d0:	6878      	ldr	r0, [r7, #4]
 800a3d2:	f001 fa82 	bl	800b8da <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a3d6:	e032      	b.n	800a43e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800a3d8:	6839      	ldr	r1, [r7, #0]
 800a3da:	6878      	ldr	r0, [r7, #4]
 800a3dc:	f001 fa0c 	bl	800b7f8 <USBD_CtlError>
            ret = USBD_FAIL;
 800a3e0:	2303      	movs	r3, #3
 800a3e2:	75fb      	strb	r3, [r7, #23]
          break;
 800a3e4:	e02b      	b.n	800a43e <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a3ec:	b2db      	uxtb	r3, r3
 800a3ee:	2b03      	cmp	r3, #3
 800a3f0:	d107      	bne.n	800a402 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a3f2:	f107 030d 	add.w	r3, r7, #13
 800a3f6:	2201      	movs	r2, #1
 800a3f8:	4619      	mov	r1, r3
 800a3fa:	6878      	ldr	r0, [r7, #4]
 800a3fc:	f001 fa6d 	bl	800b8da <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a400:	e01d      	b.n	800a43e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800a402:	6839      	ldr	r1, [r7, #0]
 800a404:	6878      	ldr	r0, [r7, #4]
 800a406:	f001 f9f7 	bl	800b7f8 <USBD_CtlError>
            ret = USBD_FAIL;
 800a40a:	2303      	movs	r3, #3
 800a40c:	75fb      	strb	r3, [r7, #23]
          break;
 800a40e:	e016      	b.n	800a43e <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a416:	b2db      	uxtb	r3, r3
 800a418:	2b03      	cmp	r3, #3
 800a41a:	d00f      	beq.n	800a43c <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800a41c:	6839      	ldr	r1, [r7, #0]
 800a41e:	6878      	ldr	r0, [r7, #4]
 800a420:	f001 f9ea 	bl	800b7f8 <USBD_CtlError>
            ret = USBD_FAIL;
 800a424:	2303      	movs	r3, #3
 800a426:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a428:	e008      	b.n	800a43c <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a42a:	6839      	ldr	r1, [r7, #0]
 800a42c:	6878      	ldr	r0, [r7, #4]
 800a42e:	f001 f9e3 	bl	800b7f8 <USBD_CtlError>
          ret = USBD_FAIL;
 800a432:	2303      	movs	r3, #3
 800a434:	75fb      	strb	r3, [r7, #23]
          break;
 800a436:	e002      	b.n	800a43e <USBD_CDC_Setup+0x176>
          break;
 800a438:	bf00      	nop
 800a43a:	e008      	b.n	800a44e <USBD_CDC_Setup+0x186>
          break;
 800a43c:	bf00      	nop
      }
      break;
 800a43e:	e006      	b.n	800a44e <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800a440:	6839      	ldr	r1, [r7, #0]
 800a442:	6878      	ldr	r0, [r7, #4]
 800a444:	f001 f9d8 	bl	800b7f8 <USBD_CtlError>
      ret = USBD_FAIL;
 800a448:	2303      	movs	r3, #3
 800a44a:	75fb      	strb	r3, [r7, #23]
      break;
 800a44c:	bf00      	nop
  }

  return (uint8_t)ret;
 800a44e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a450:	4618      	mov	r0, r3
 800a452:	3718      	adds	r7, #24
 800a454:	46bd      	mov	sp, r7
 800a456:	bd80      	pop	{r7, pc}

0800a458 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a458:	b580      	push	{r7, lr}
 800a45a:	b084      	sub	sp, #16
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
 800a460:	460b      	mov	r3, r1
 800a462:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a46a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a472:	2b00      	cmp	r3, #0
 800a474:	d101      	bne.n	800a47a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a476:	2303      	movs	r3, #3
 800a478:	e04f      	b.n	800a51a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a480:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a482:	78fa      	ldrb	r2, [r7, #3]
 800a484:	6879      	ldr	r1, [r7, #4]
 800a486:	4613      	mov	r3, r2
 800a488:	009b      	lsls	r3, r3, #2
 800a48a:	4413      	add	r3, r2
 800a48c:	009b      	lsls	r3, r3, #2
 800a48e:	440b      	add	r3, r1
 800a490:	3318      	adds	r3, #24
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d029      	beq.n	800a4ec <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a498:	78fa      	ldrb	r2, [r7, #3]
 800a49a:	6879      	ldr	r1, [r7, #4]
 800a49c:	4613      	mov	r3, r2
 800a49e:	009b      	lsls	r3, r3, #2
 800a4a0:	4413      	add	r3, r2
 800a4a2:	009b      	lsls	r3, r3, #2
 800a4a4:	440b      	add	r3, r1
 800a4a6:	3318      	adds	r3, #24
 800a4a8:	681a      	ldr	r2, [r3, #0]
 800a4aa:	78f9      	ldrb	r1, [r7, #3]
 800a4ac:	68f8      	ldr	r0, [r7, #12]
 800a4ae:	460b      	mov	r3, r1
 800a4b0:	009b      	lsls	r3, r3, #2
 800a4b2:	440b      	add	r3, r1
 800a4b4:	00db      	lsls	r3, r3, #3
 800a4b6:	4403      	add	r3, r0
 800a4b8:	3320      	adds	r3, #32
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	fbb2 f1f3 	udiv	r1, r2, r3
 800a4c0:	fb01 f303 	mul.w	r3, r1, r3
 800a4c4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d110      	bne.n	800a4ec <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800a4ca:	78fa      	ldrb	r2, [r7, #3]
 800a4cc:	6879      	ldr	r1, [r7, #4]
 800a4ce:	4613      	mov	r3, r2
 800a4d0:	009b      	lsls	r3, r3, #2
 800a4d2:	4413      	add	r3, r2
 800a4d4:	009b      	lsls	r3, r3, #2
 800a4d6:	440b      	add	r3, r1
 800a4d8:	3318      	adds	r3, #24
 800a4da:	2200      	movs	r2, #0
 800a4dc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a4de:	78f9      	ldrb	r1, [r7, #3]
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	6878      	ldr	r0, [r7, #4]
 800a4e6:	f005 f984 	bl	800f7f2 <USBD_LL_Transmit>
 800a4ea:	e015      	b.n	800a518 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800a4ec:	68bb      	ldr	r3, [r7, #8]
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a4fa:	691b      	ldr	r3, [r3, #16]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d00b      	beq.n	800a518 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a506:	691b      	ldr	r3, [r3, #16]
 800a508:	68ba      	ldr	r2, [r7, #8]
 800a50a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800a50e:	68ba      	ldr	r2, [r7, #8]
 800a510:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800a514:	78fa      	ldrb	r2, [r7, #3]
 800a516:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a518:	2300      	movs	r3, #0
}
 800a51a:	4618      	mov	r0, r3
 800a51c:	3710      	adds	r7, #16
 800a51e:	46bd      	mov	sp, r7
 800a520:	bd80      	pop	{r7, pc}

0800a522 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a522:	b580      	push	{r7, lr}
 800a524:	b084      	sub	sp, #16
 800a526:	af00      	add	r7, sp, #0
 800a528:	6078      	str	r0, [r7, #4]
 800a52a:	460b      	mov	r3, r1
 800a52c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a534:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d101      	bne.n	800a544 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a540:	2303      	movs	r3, #3
 800a542:	e015      	b.n	800a570 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a544:	78fb      	ldrb	r3, [r7, #3]
 800a546:	4619      	mov	r1, r3
 800a548:	6878      	ldr	r0, [r7, #4]
 800a54a:	f005 f994 	bl	800f876 <USBD_LL_GetRxDataSize>
 800a54e:	4602      	mov	r2, r0
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a55c:	68db      	ldr	r3, [r3, #12]
 800a55e:	68fa      	ldr	r2, [r7, #12]
 800a560:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800a564:	68fa      	ldr	r2, [r7, #12]
 800a566:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800a56a:	4611      	mov	r1, r2
 800a56c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a56e:	2300      	movs	r3, #0
}
 800a570:	4618      	mov	r0, r3
 800a572:	3710      	adds	r7, #16
 800a574:	46bd      	mov	sp, r7
 800a576:	bd80      	pop	{r7, pc}

0800a578 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a578:	b580      	push	{r7, lr}
 800a57a:	b084      	sub	sp, #16
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a586:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d101      	bne.n	800a592 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800a58e:	2303      	movs	r3, #3
 800a590:	e01a      	b.n	800a5c8 <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d014      	beq.n	800a5c6 <USBD_CDC_EP0_RxReady+0x4e>
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800a5a2:	2bff      	cmp	r3, #255	@ 0xff
 800a5a4:	d00f      	beq.n	800a5c6 <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a5ac:	689b      	ldr	r3, [r3, #8]
 800a5ae:	68fa      	ldr	r2, [r7, #12]
 800a5b0:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 800a5b4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a5b6:	68fa      	ldr	r2, [r7, #12]
 800a5b8:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a5bc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	22ff      	movs	r2, #255	@ 0xff
 800a5c2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800a5c6:	2300      	movs	r3, #0
}
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	3710      	adds	r7, #16
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	bd80      	pop	{r7, pc}

0800a5d0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a5d0:	b480      	push	{r7}
 800a5d2:	b083      	sub	sp, #12
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	2243      	movs	r2, #67	@ 0x43
 800a5dc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800a5de:	4b03      	ldr	r3, [pc, #12]	@ (800a5ec <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	370c      	adds	r7, #12
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ea:	4770      	bx	lr
 800a5ec:	200000b4 	.word	0x200000b4

0800a5f0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a5f0:	b480      	push	{r7}
 800a5f2:	b083      	sub	sp, #12
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	2243      	movs	r2, #67	@ 0x43
 800a5fc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800a5fe:	4b03      	ldr	r3, [pc, #12]	@ (800a60c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800a600:	4618      	mov	r0, r3
 800a602:	370c      	adds	r7, #12
 800a604:	46bd      	mov	sp, r7
 800a606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60a:	4770      	bx	lr
 800a60c:	20000070 	.word	0x20000070

0800a610 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a610:	b480      	push	{r7}
 800a612:	b083      	sub	sp, #12
 800a614:	af00      	add	r7, sp, #0
 800a616:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	2243      	movs	r2, #67	@ 0x43
 800a61c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800a61e:	4b03      	ldr	r3, [pc, #12]	@ (800a62c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a620:	4618      	mov	r0, r3
 800a622:	370c      	adds	r7, #12
 800a624:	46bd      	mov	sp, r7
 800a626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62a:	4770      	bx	lr
 800a62c:	200000f8 	.word	0x200000f8

0800a630 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a630:	b480      	push	{r7}
 800a632:	b083      	sub	sp, #12
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	220a      	movs	r2, #10
 800a63c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a63e:	4b03      	ldr	r3, [pc, #12]	@ (800a64c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a640:	4618      	mov	r0, r3
 800a642:	370c      	adds	r7, #12
 800a644:	46bd      	mov	sp, r7
 800a646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64a:	4770      	bx	lr
 800a64c:	2000002c 	.word	0x2000002c

0800a650 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a650:	b480      	push	{r7}
 800a652:	b083      	sub	sp, #12
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
 800a658:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a65a:	683b      	ldr	r3, [r7, #0]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d101      	bne.n	800a664 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a660:	2303      	movs	r3, #3
 800a662:	e004      	b.n	800a66e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	683a      	ldr	r2, [r7, #0]
 800a668:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 800a66c:	2300      	movs	r3, #0
}
 800a66e:	4618      	mov	r0, r3
 800a670:	370c      	adds	r7, #12
 800a672:	46bd      	mov	sp, r7
 800a674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a678:	4770      	bx	lr

0800a67a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a67a:	b480      	push	{r7}
 800a67c:	b087      	sub	sp, #28
 800a67e:	af00      	add	r7, sp, #0
 800a680:	60f8      	str	r0, [r7, #12]
 800a682:	60b9      	str	r1, [r7, #8]
 800a684:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a68c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800a68e:	697b      	ldr	r3, [r7, #20]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d101      	bne.n	800a698 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800a694:	2303      	movs	r3, #3
 800a696:	e008      	b.n	800a6aa <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800a698:	697b      	ldr	r3, [r7, #20]
 800a69a:	68ba      	ldr	r2, [r7, #8]
 800a69c:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800a6a0:	697b      	ldr	r3, [r7, #20]
 800a6a2:	687a      	ldr	r2, [r7, #4]
 800a6a4:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800a6a8:	2300      	movs	r3, #0
}
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	371c      	adds	r7, #28
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b4:	4770      	bx	lr

0800a6b6 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a6b6:	b480      	push	{r7}
 800a6b8:	b085      	sub	sp, #20
 800a6ba:	af00      	add	r7, sp, #0
 800a6bc:	6078      	str	r0, [r7, #4]
 800a6be:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a6c6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d101      	bne.n	800a6d2 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800a6ce:	2303      	movs	r3, #3
 800a6d0:	e004      	b.n	800a6dc <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	683a      	ldr	r2, [r7, #0]
 800a6d6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800a6da:	2300      	movs	r3, #0
}
 800a6dc:	4618      	mov	r0, r3
 800a6de:	3714      	adds	r7, #20
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e6:	4770      	bx	lr

0800a6e8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a6e8:	b580      	push	{r7, lr}
 800a6ea:	b084      	sub	sp, #16
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a6f6:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800a6f8:	2301      	movs	r3, #1
 800a6fa:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a702:	2b00      	cmp	r3, #0
 800a704:	d101      	bne.n	800a70a <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a706:	2303      	movs	r3, #3
 800a708:	e01a      	b.n	800a740 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800a70a:	68bb      	ldr	r3, [r7, #8]
 800a70c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a710:	2b00      	cmp	r3, #0
 800a712:	d114      	bne.n	800a73e <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a714:	68bb      	ldr	r3, [r7, #8]
 800a716:	2201      	movs	r2, #1
 800a718:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800a71c:	68bb      	ldr	r3, [r7, #8]
 800a71e:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800a726:	68bb      	ldr	r3, [r7, #8]
 800a728:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800a72c:	68bb      	ldr	r3, [r7, #8]
 800a72e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800a732:	2181      	movs	r1, #129	@ 0x81
 800a734:	6878      	ldr	r0, [r7, #4]
 800a736:	f005 f85c 	bl	800f7f2 <USBD_LL_Transmit>

    ret = USBD_OK;
 800a73a:	2300      	movs	r3, #0
 800a73c:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800a73e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a740:	4618      	mov	r0, r3
 800a742:	3710      	adds	r7, #16
 800a744:	46bd      	mov	sp, r7
 800a746:	bd80      	pop	{r7, pc}

0800a748 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b084      	sub	sp, #16
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a756:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d101      	bne.n	800a766 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800a762:	2303      	movs	r3, #3
 800a764:	e016      	b.n	800a794 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	7c1b      	ldrb	r3, [r3, #16]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d109      	bne.n	800a782 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a774:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a778:	2101      	movs	r1, #1
 800a77a:	6878      	ldr	r0, [r7, #4]
 800a77c:	f005 f85a 	bl	800f834 <USBD_LL_PrepareReceive>
 800a780:	e007      	b.n	800a792 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a788:	2340      	movs	r3, #64	@ 0x40
 800a78a:	2101      	movs	r1, #1
 800a78c:	6878      	ldr	r0, [r7, #4]
 800a78e:	f005 f851 	bl	800f834 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a792:	2300      	movs	r3, #0
}
 800a794:	4618      	mov	r0, r3
 800a796:	3710      	adds	r7, #16
 800a798:	46bd      	mov	sp, r7
 800a79a:	bd80      	pop	{r7, pc}

0800a79c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a79c:	b580      	push	{r7, lr}
 800a79e:	b086      	sub	sp, #24
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	60f8      	str	r0, [r7, #12]
 800a7a4:	60b9      	str	r1, [r7, #8]
 800a7a6:	4613      	mov	r3, r2
 800a7a8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d101      	bne.n	800a7b4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a7b0:	2303      	movs	r3, #3
 800a7b2:	e01f      	b.n	800a7f4 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	2200      	movs	r2, #0
 800a7c0:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	2200      	movs	r2, #0
 800a7c8:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a7cc:	68bb      	ldr	r3, [r7, #8]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d003      	beq.n	800a7da <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	68ba      	ldr	r2, [r7, #8]
 800a7d6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	2201      	movs	r2, #1
 800a7de:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	79fa      	ldrb	r2, [r7, #7]
 800a7e6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a7e8:	68f8      	ldr	r0, [r7, #12]
 800a7ea:	f004 feb9 	bl	800f560 <USBD_LL_Init>
 800a7ee:	4603      	mov	r3, r0
 800a7f0:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a7f2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	3718      	adds	r7, #24
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	bd80      	pop	{r7, pc}

0800a7fc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b084      	sub	sp, #16
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
 800a804:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a806:	2300      	movs	r3, #0
 800a808:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a80a:	683b      	ldr	r3, [r7, #0]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d101      	bne.n	800a814 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800a810:	2303      	movs	r3, #3
 800a812:	e016      	b.n	800a842 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	683a      	ldr	r2, [r7, #0]
 800a818:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a822:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a824:	2b00      	cmp	r3, #0
 800a826:	d00b      	beq.n	800a840 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a82e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a830:	f107 020e 	add.w	r2, r7, #14
 800a834:	4610      	mov	r0, r2
 800a836:	4798      	blx	r3
 800a838:	4602      	mov	r2, r0
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800a840:	2300      	movs	r3, #0
}
 800a842:	4618      	mov	r0, r3
 800a844:	3710      	adds	r7, #16
 800a846:	46bd      	mov	sp, r7
 800a848:	bd80      	pop	{r7, pc}

0800a84a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a84a:	b580      	push	{r7, lr}
 800a84c:	b082      	sub	sp, #8
 800a84e:	af00      	add	r7, sp, #0
 800a850:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a852:	6878      	ldr	r0, [r7, #4]
 800a854:	f004 fee4 	bl	800f620 <USBD_LL_Start>
 800a858:	4603      	mov	r3, r0
}
 800a85a:	4618      	mov	r0, r3
 800a85c:	3708      	adds	r7, #8
 800a85e:	46bd      	mov	sp, r7
 800a860:	bd80      	pop	{r7, pc}

0800a862 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a862:	b480      	push	{r7}
 800a864:	b083      	sub	sp, #12
 800a866:	af00      	add	r7, sp, #0
 800a868:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a86a:	2300      	movs	r3, #0
}
 800a86c:	4618      	mov	r0, r3
 800a86e:	370c      	adds	r7, #12
 800a870:	46bd      	mov	sp, r7
 800a872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a876:	4770      	bx	lr

0800a878 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	b084      	sub	sp, #16
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]
 800a880:	460b      	mov	r3, r1
 800a882:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a884:	2303      	movs	r3, #3
 800a886:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d009      	beq.n	800a8a6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	78fa      	ldrb	r2, [r7, #3]
 800a89c:	4611      	mov	r1, r2
 800a89e:	6878      	ldr	r0, [r7, #4]
 800a8a0:	4798      	blx	r3
 800a8a2:	4603      	mov	r3, r0
 800a8a4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a8a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	3710      	adds	r7, #16
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	bd80      	pop	{r7, pc}

0800a8b0 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	b082      	sub	sp, #8
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]
 800a8b8:	460b      	mov	r3, r1
 800a8ba:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d007      	beq.n	800a8d6 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a8cc:	685b      	ldr	r3, [r3, #4]
 800a8ce:	78fa      	ldrb	r2, [r7, #3]
 800a8d0:	4611      	mov	r1, r2
 800a8d2:	6878      	ldr	r0, [r7, #4]
 800a8d4:	4798      	blx	r3
  }

  return USBD_OK;
 800a8d6:	2300      	movs	r3, #0
}
 800a8d8:	4618      	mov	r0, r3
 800a8da:	3708      	adds	r7, #8
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	bd80      	pop	{r7, pc}

0800a8e0 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	b084      	sub	sp, #16
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	6078      	str	r0, [r7, #4]
 800a8e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a8f0:	6839      	ldr	r1, [r7, #0]
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	f000 ff46 	bl	800b784 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	2201      	movs	r2, #1
 800a8fc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800a906:	461a      	mov	r2, r3
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a914:	f003 031f 	and.w	r3, r3, #31
 800a918:	2b02      	cmp	r3, #2
 800a91a:	d01a      	beq.n	800a952 <USBD_LL_SetupStage+0x72>
 800a91c:	2b02      	cmp	r3, #2
 800a91e:	d822      	bhi.n	800a966 <USBD_LL_SetupStage+0x86>
 800a920:	2b00      	cmp	r3, #0
 800a922:	d002      	beq.n	800a92a <USBD_LL_SetupStage+0x4a>
 800a924:	2b01      	cmp	r3, #1
 800a926:	d00a      	beq.n	800a93e <USBD_LL_SetupStage+0x5e>
 800a928:	e01d      	b.n	800a966 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a930:	4619      	mov	r1, r3
 800a932:	6878      	ldr	r0, [r7, #4]
 800a934:	f000 f9ee 	bl	800ad14 <USBD_StdDevReq>
 800a938:	4603      	mov	r3, r0
 800a93a:	73fb      	strb	r3, [r7, #15]
      break;
 800a93c:	e020      	b.n	800a980 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a944:	4619      	mov	r1, r3
 800a946:	6878      	ldr	r0, [r7, #4]
 800a948:	f000 fa52 	bl	800adf0 <USBD_StdItfReq>
 800a94c:	4603      	mov	r3, r0
 800a94e:	73fb      	strb	r3, [r7, #15]
      break;
 800a950:	e016      	b.n	800a980 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a958:	4619      	mov	r1, r3
 800a95a:	6878      	ldr	r0, [r7, #4]
 800a95c:	f000 fa91 	bl	800ae82 <USBD_StdEPReq>
 800a960:	4603      	mov	r3, r0
 800a962:	73fb      	strb	r3, [r7, #15]
      break;
 800a964:	e00c      	b.n	800a980 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a96c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a970:	b2db      	uxtb	r3, r3
 800a972:	4619      	mov	r1, r3
 800a974:	6878      	ldr	r0, [r7, #4]
 800a976:	f004 feb3 	bl	800f6e0 <USBD_LL_StallEP>
 800a97a:	4603      	mov	r3, r0
 800a97c:	73fb      	strb	r3, [r7, #15]
      break;
 800a97e:	bf00      	nop
  }

  return ret;
 800a980:	7bfb      	ldrb	r3, [r7, #15]
}
 800a982:	4618      	mov	r0, r3
 800a984:	3710      	adds	r7, #16
 800a986:	46bd      	mov	sp, r7
 800a988:	bd80      	pop	{r7, pc}

0800a98a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a98a:	b580      	push	{r7, lr}
 800a98c:	b086      	sub	sp, #24
 800a98e:	af00      	add	r7, sp, #0
 800a990:	60f8      	str	r0, [r7, #12]
 800a992:	460b      	mov	r3, r1
 800a994:	607a      	str	r2, [r7, #4]
 800a996:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a998:	7afb      	ldrb	r3, [r7, #11]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d138      	bne.n	800aa10 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800a9a4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a9ac:	2b03      	cmp	r3, #3
 800a9ae:	d14a      	bne.n	800aa46 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800a9b0:	693b      	ldr	r3, [r7, #16]
 800a9b2:	689a      	ldr	r2, [r3, #8]
 800a9b4:	693b      	ldr	r3, [r7, #16]
 800a9b6:	68db      	ldr	r3, [r3, #12]
 800a9b8:	429a      	cmp	r2, r3
 800a9ba:	d913      	bls.n	800a9e4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a9bc:	693b      	ldr	r3, [r7, #16]
 800a9be:	689a      	ldr	r2, [r3, #8]
 800a9c0:	693b      	ldr	r3, [r7, #16]
 800a9c2:	68db      	ldr	r3, [r3, #12]
 800a9c4:	1ad2      	subs	r2, r2, r3
 800a9c6:	693b      	ldr	r3, [r7, #16]
 800a9c8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a9ca:	693b      	ldr	r3, [r7, #16]
 800a9cc:	68da      	ldr	r2, [r3, #12]
 800a9ce:	693b      	ldr	r3, [r7, #16]
 800a9d0:	689b      	ldr	r3, [r3, #8]
 800a9d2:	4293      	cmp	r3, r2
 800a9d4:	bf28      	it	cs
 800a9d6:	4613      	movcs	r3, r2
 800a9d8:	461a      	mov	r2, r3
 800a9da:	6879      	ldr	r1, [r7, #4]
 800a9dc:	68f8      	ldr	r0, [r7, #12]
 800a9de:	f000 ffc5 	bl	800b96c <USBD_CtlContinueRx>
 800a9e2:	e030      	b.n	800aa46 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a9ea:	b2db      	uxtb	r3, r3
 800a9ec:	2b03      	cmp	r3, #3
 800a9ee:	d10b      	bne.n	800aa08 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a9f6:	691b      	ldr	r3, [r3, #16]
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d005      	beq.n	800aa08 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aa02:	691b      	ldr	r3, [r3, #16]
 800aa04:	68f8      	ldr	r0, [r7, #12]
 800aa06:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800aa08:	68f8      	ldr	r0, [r7, #12]
 800aa0a:	f000 ffc0 	bl	800b98e <USBD_CtlSendStatus>
 800aa0e:	e01a      	b.n	800aa46 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa16:	b2db      	uxtb	r3, r3
 800aa18:	2b03      	cmp	r3, #3
 800aa1a:	d114      	bne.n	800aa46 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aa22:	699b      	ldr	r3, [r3, #24]
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d00e      	beq.n	800aa46 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aa2e:	699b      	ldr	r3, [r3, #24]
 800aa30:	7afa      	ldrb	r2, [r7, #11]
 800aa32:	4611      	mov	r1, r2
 800aa34:	68f8      	ldr	r0, [r7, #12]
 800aa36:	4798      	blx	r3
 800aa38:	4603      	mov	r3, r0
 800aa3a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800aa3c:	7dfb      	ldrb	r3, [r7, #23]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d001      	beq.n	800aa46 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800aa42:	7dfb      	ldrb	r3, [r7, #23]
 800aa44:	e000      	b.n	800aa48 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800aa46:	2300      	movs	r3, #0
}
 800aa48:	4618      	mov	r0, r3
 800aa4a:	3718      	adds	r7, #24
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	bd80      	pop	{r7, pc}

0800aa50 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b086      	sub	sp, #24
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	60f8      	str	r0, [r7, #12]
 800aa58:	460b      	mov	r3, r1
 800aa5a:	607a      	str	r2, [r7, #4]
 800aa5c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800aa5e:	7afb      	ldrb	r3, [r7, #11]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d16b      	bne.n	800ab3c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	3314      	adds	r3, #20
 800aa68:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800aa70:	2b02      	cmp	r3, #2
 800aa72:	d156      	bne.n	800ab22 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800aa74:	693b      	ldr	r3, [r7, #16]
 800aa76:	689a      	ldr	r2, [r3, #8]
 800aa78:	693b      	ldr	r3, [r7, #16]
 800aa7a:	68db      	ldr	r3, [r3, #12]
 800aa7c:	429a      	cmp	r2, r3
 800aa7e:	d914      	bls.n	800aaaa <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800aa80:	693b      	ldr	r3, [r7, #16]
 800aa82:	689a      	ldr	r2, [r3, #8]
 800aa84:	693b      	ldr	r3, [r7, #16]
 800aa86:	68db      	ldr	r3, [r3, #12]
 800aa88:	1ad2      	subs	r2, r2, r3
 800aa8a:	693b      	ldr	r3, [r7, #16]
 800aa8c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800aa8e:	693b      	ldr	r3, [r7, #16]
 800aa90:	689b      	ldr	r3, [r3, #8]
 800aa92:	461a      	mov	r2, r3
 800aa94:	6879      	ldr	r1, [r7, #4]
 800aa96:	68f8      	ldr	r0, [r7, #12]
 800aa98:	f000 ff3a 	bl	800b910 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	2100      	movs	r1, #0
 800aaa2:	68f8      	ldr	r0, [r7, #12]
 800aaa4:	f004 fec6 	bl	800f834 <USBD_LL_PrepareReceive>
 800aaa8:	e03b      	b.n	800ab22 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800aaaa:	693b      	ldr	r3, [r7, #16]
 800aaac:	68da      	ldr	r2, [r3, #12]
 800aaae:	693b      	ldr	r3, [r7, #16]
 800aab0:	689b      	ldr	r3, [r3, #8]
 800aab2:	429a      	cmp	r2, r3
 800aab4:	d11c      	bne.n	800aaf0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800aab6:	693b      	ldr	r3, [r7, #16]
 800aab8:	685a      	ldr	r2, [r3, #4]
 800aaba:	693b      	ldr	r3, [r7, #16]
 800aabc:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800aabe:	429a      	cmp	r2, r3
 800aac0:	d316      	bcc.n	800aaf0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800aac2:	693b      	ldr	r3, [r7, #16]
 800aac4:	685a      	ldr	r2, [r3, #4]
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800aacc:	429a      	cmp	r2, r3
 800aace:	d20f      	bcs.n	800aaf0 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800aad0:	2200      	movs	r2, #0
 800aad2:	2100      	movs	r1, #0
 800aad4:	68f8      	ldr	r0, [r7, #12]
 800aad6:	f000 ff1b 	bl	800b910 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	2200      	movs	r2, #0
 800aade:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800aae2:	2300      	movs	r3, #0
 800aae4:	2200      	movs	r2, #0
 800aae6:	2100      	movs	r1, #0
 800aae8:	68f8      	ldr	r0, [r7, #12]
 800aaea:	f004 fea3 	bl	800f834 <USBD_LL_PrepareReceive>
 800aaee:	e018      	b.n	800ab22 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aaf6:	b2db      	uxtb	r3, r3
 800aaf8:	2b03      	cmp	r3, #3
 800aafa:	d10b      	bne.n	800ab14 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ab02:	68db      	ldr	r3, [r3, #12]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d005      	beq.n	800ab14 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ab0e:	68db      	ldr	r3, [r3, #12]
 800ab10:	68f8      	ldr	r0, [r7, #12]
 800ab12:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ab14:	2180      	movs	r1, #128	@ 0x80
 800ab16:	68f8      	ldr	r0, [r7, #12]
 800ab18:	f004 fde2 	bl	800f6e0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ab1c:	68f8      	ldr	r0, [r7, #12]
 800ab1e:	f000 ff49 	bl	800b9b4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800ab28:	2b01      	cmp	r3, #1
 800ab2a:	d122      	bne.n	800ab72 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800ab2c:	68f8      	ldr	r0, [r7, #12]
 800ab2e:	f7ff fe98 	bl	800a862 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	2200      	movs	r2, #0
 800ab36:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800ab3a:	e01a      	b.n	800ab72 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ab42:	b2db      	uxtb	r3, r3
 800ab44:	2b03      	cmp	r3, #3
 800ab46:	d114      	bne.n	800ab72 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ab4e:	695b      	ldr	r3, [r3, #20]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d00e      	beq.n	800ab72 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ab5a:	695b      	ldr	r3, [r3, #20]
 800ab5c:	7afa      	ldrb	r2, [r7, #11]
 800ab5e:	4611      	mov	r1, r2
 800ab60:	68f8      	ldr	r0, [r7, #12]
 800ab62:	4798      	blx	r3
 800ab64:	4603      	mov	r3, r0
 800ab66:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800ab68:	7dfb      	ldrb	r3, [r7, #23]
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d001      	beq.n	800ab72 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800ab6e:	7dfb      	ldrb	r3, [r7, #23]
 800ab70:	e000      	b.n	800ab74 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800ab72:	2300      	movs	r3, #0
}
 800ab74:	4618      	mov	r0, r3
 800ab76:	3718      	adds	r7, #24
 800ab78:	46bd      	mov	sp, r7
 800ab7a:	bd80      	pop	{r7, pc}

0800ab7c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ab7c:	b580      	push	{r7, lr}
 800ab7e:	b082      	sub	sp, #8
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	2201      	movs	r2, #1
 800ab88:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	2200      	movs	r2, #0
 800ab90:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	2200      	movs	r2, #0
 800ab98:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	2200      	movs	r2, #0
 800ab9e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d101      	bne.n	800abb0 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800abac:	2303      	movs	r3, #3
 800abae:	e02f      	b.n	800ac10 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d00f      	beq.n	800abda <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800abc0:	685b      	ldr	r3, [r3, #4]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d009      	beq.n	800abda <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800abcc:	685b      	ldr	r3, [r3, #4]
 800abce:	687a      	ldr	r2, [r7, #4]
 800abd0:	6852      	ldr	r2, [r2, #4]
 800abd2:	b2d2      	uxtb	r2, r2
 800abd4:	4611      	mov	r1, r2
 800abd6:	6878      	ldr	r0, [r7, #4]
 800abd8:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800abda:	2340      	movs	r3, #64	@ 0x40
 800abdc:	2200      	movs	r2, #0
 800abde:	2100      	movs	r1, #0
 800abe0:	6878      	ldr	r0, [r7, #4]
 800abe2:	f004 fd38 	bl	800f656 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	2201      	movs	r2, #1
 800abea:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	2240      	movs	r2, #64	@ 0x40
 800abf2:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800abf6:	2340      	movs	r3, #64	@ 0x40
 800abf8:	2200      	movs	r2, #0
 800abfa:	2180      	movs	r1, #128	@ 0x80
 800abfc:	6878      	ldr	r0, [r7, #4]
 800abfe:	f004 fd2a 	bl	800f656 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	2201      	movs	r2, #1
 800ac06:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	2240      	movs	r2, #64	@ 0x40
 800ac0c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800ac0e:	2300      	movs	r3, #0
}
 800ac10:	4618      	mov	r0, r3
 800ac12:	3708      	adds	r7, #8
 800ac14:	46bd      	mov	sp, r7
 800ac16:	bd80      	pop	{r7, pc}

0800ac18 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ac18:	b480      	push	{r7}
 800ac1a:	b083      	sub	sp, #12
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]
 800ac20:	460b      	mov	r3, r1
 800ac22:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	78fa      	ldrb	r2, [r7, #3]
 800ac28:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ac2a:	2300      	movs	r3, #0
}
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	370c      	adds	r7, #12
 800ac30:	46bd      	mov	sp, r7
 800ac32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac36:	4770      	bx	lr

0800ac38 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ac38:	b480      	push	{r7}
 800ac3a:	b083      	sub	sp, #12
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ac46:	b2da      	uxtb	r2, r3
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	2204      	movs	r2, #4
 800ac52:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800ac56:	2300      	movs	r3, #0
}
 800ac58:	4618      	mov	r0, r3
 800ac5a:	370c      	adds	r7, #12
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac62:	4770      	bx	lr

0800ac64 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ac64:	b480      	push	{r7}
 800ac66:	b083      	sub	sp, #12
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ac72:	b2db      	uxtb	r3, r3
 800ac74:	2b04      	cmp	r3, #4
 800ac76:	d106      	bne.n	800ac86 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800ac7e:	b2da      	uxtb	r2, r3
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800ac86:	2300      	movs	r3, #0
}
 800ac88:	4618      	mov	r0, r3
 800ac8a:	370c      	adds	r7, #12
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac92:	4770      	bx	lr

0800ac94 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ac94:	b580      	push	{r7, lr}
 800ac96:	b082      	sub	sp, #8
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d101      	bne.n	800acaa <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800aca6:	2303      	movs	r3, #3
 800aca8:	e012      	b.n	800acd0 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800acb0:	b2db      	uxtb	r3, r3
 800acb2:	2b03      	cmp	r3, #3
 800acb4:	d10b      	bne.n	800acce <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800acbc:	69db      	ldr	r3, [r3, #28]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d005      	beq.n	800acce <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800acc8:	69db      	ldr	r3, [r3, #28]
 800acca:	6878      	ldr	r0, [r7, #4]
 800accc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800acce:	2300      	movs	r3, #0
}
 800acd0:	4618      	mov	r0, r3
 800acd2:	3708      	adds	r7, #8
 800acd4:	46bd      	mov	sp, r7
 800acd6:	bd80      	pop	{r7, pc}

0800acd8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800acd8:	b480      	push	{r7}
 800acda:	b087      	sub	sp, #28
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ace4:	697b      	ldr	r3, [r7, #20]
 800ace6:	781b      	ldrb	r3, [r3, #0]
 800ace8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800acea:	697b      	ldr	r3, [r7, #20]
 800acec:	3301      	adds	r3, #1
 800acee:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800acf0:	697b      	ldr	r3, [r7, #20]
 800acf2:	781b      	ldrb	r3, [r3, #0]
 800acf4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800acf6:	8a3b      	ldrh	r3, [r7, #16]
 800acf8:	021b      	lsls	r3, r3, #8
 800acfa:	b21a      	sxth	r2, r3
 800acfc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ad00:	4313      	orrs	r3, r2
 800ad02:	b21b      	sxth	r3, r3
 800ad04:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ad06:	89fb      	ldrh	r3, [r7, #14]
}
 800ad08:	4618      	mov	r0, r3
 800ad0a:	371c      	adds	r7, #28
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad12:	4770      	bx	lr

0800ad14 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b084      	sub	sp, #16
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
 800ad1c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ad1e:	2300      	movs	r3, #0
 800ad20:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ad22:	683b      	ldr	r3, [r7, #0]
 800ad24:	781b      	ldrb	r3, [r3, #0]
 800ad26:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ad2a:	2b40      	cmp	r3, #64	@ 0x40
 800ad2c:	d005      	beq.n	800ad3a <USBD_StdDevReq+0x26>
 800ad2e:	2b40      	cmp	r3, #64	@ 0x40
 800ad30:	d853      	bhi.n	800adda <USBD_StdDevReq+0xc6>
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d00b      	beq.n	800ad4e <USBD_StdDevReq+0x3a>
 800ad36:	2b20      	cmp	r3, #32
 800ad38:	d14f      	bne.n	800adda <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ad40:	689b      	ldr	r3, [r3, #8]
 800ad42:	6839      	ldr	r1, [r7, #0]
 800ad44:	6878      	ldr	r0, [r7, #4]
 800ad46:	4798      	blx	r3
 800ad48:	4603      	mov	r3, r0
 800ad4a:	73fb      	strb	r3, [r7, #15]
      break;
 800ad4c:	e04a      	b.n	800ade4 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ad4e:	683b      	ldr	r3, [r7, #0]
 800ad50:	785b      	ldrb	r3, [r3, #1]
 800ad52:	2b09      	cmp	r3, #9
 800ad54:	d83b      	bhi.n	800adce <USBD_StdDevReq+0xba>
 800ad56:	a201      	add	r2, pc, #4	@ (adr r2, 800ad5c <USBD_StdDevReq+0x48>)
 800ad58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad5c:	0800adb1 	.word	0x0800adb1
 800ad60:	0800adc5 	.word	0x0800adc5
 800ad64:	0800adcf 	.word	0x0800adcf
 800ad68:	0800adbb 	.word	0x0800adbb
 800ad6c:	0800adcf 	.word	0x0800adcf
 800ad70:	0800ad8f 	.word	0x0800ad8f
 800ad74:	0800ad85 	.word	0x0800ad85
 800ad78:	0800adcf 	.word	0x0800adcf
 800ad7c:	0800ada7 	.word	0x0800ada7
 800ad80:	0800ad99 	.word	0x0800ad99
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ad84:	6839      	ldr	r1, [r7, #0]
 800ad86:	6878      	ldr	r0, [r7, #4]
 800ad88:	f000 f9de 	bl	800b148 <USBD_GetDescriptor>
          break;
 800ad8c:	e024      	b.n	800add8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ad8e:	6839      	ldr	r1, [r7, #0]
 800ad90:	6878      	ldr	r0, [r7, #4]
 800ad92:	f000 fb6d 	bl	800b470 <USBD_SetAddress>
          break;
 800ad96:	e01f      	b.n	800add8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800ad98:	6839      	ldr	r1, [r7, #0]
 800ad9a:	6878      	ldr	r0, [r7, #4]
 800ad9c:	f000 fbac 	bl	800b4f8 <USBD_SetConfig>
 800ada0:	4603      	mov	r3, r0
 800ada2:	73fb      	strb	r3, [r7, #15]
          break;
 800ada4:	e018      	b.n	800add8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ada6:	6839      	ldr	r1, [r7, #0]
 800ada8:	6878      	ldr	r0, [r7, #4]
 800adaa:	f000 fc4b 	bl	800b644 <USBD_GetConfig>
          break;
 800adae:	e013      	b.n	800add8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800adb0:	6839      	ldr	r1, [r7, #0]
 800adb2:	6878      	ldr	r0, [r7, #4]
 800adb4:	f000 fc7c 	bl	800b6b0 <USBD_GetStatus>
          break;
 800adb8:	e00e      	b.n	800add8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800adba:	6839      	ldr	r1, [r7, #0]
 800adbc:	6878      	ldr	r0, [r7, #4]
 800adbe:	f000 fcab 	bl	800b718 <USBD_SetFeature>
          break;
 800adc2:	e009      	b.n	800add8 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800adc4:	6839      	ldr	r1, [r7, #0]
 800adc6:	6878      	ldr	r0, [r7, #4]
 800adc8:	f000 fcba 	bl	800b740 <USBD_ClrFeature>
          break;
 800adcc:	e004      	b.n	800add8 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800adce:	6839      	ldr	r1, [r7, #0]
 800add0:	6878      	ldr	r0, [r7, #4]
 800add2:	f000 fd11 	bl	800b7f8 <USBD_CtlError>
          break;
 800add6:	bf00      	nop
      }
      break;
 800add8:	e004      	b.n	800ade4 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800adda:	6839      	ldr	r1, [r7, #0]
 800addc:	6878      	ldr	r0, [r7, #4]
 800adde:	f000 fd0b 	bl	800b7f8 <USBD_CtlError>
      break;
 800ade2:	bf00      	nop
  }

  return ret;
 800ade4:	7bfb      	ldrb	r3, [r7, #15]
}
 800ade6:	4618      	mov	r0, r3
 800ade8:	3710      	adds	r7, #16
 800adea:	46bd      	mov	sp, r7
 800adec:	bd80      	pop	{r7, pc}
 800adee:	bf00      	nop

0800adf0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800adf0:	b580      	push	{r7, lr}
 800adf2:	b084      	sub	sp, #16
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	6078      	str	r0, [r7, #4]
 800adf8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800adfa:	2300      	movs	r3, #0
 800adfc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800adfe:	683b      	ldr	r3, [r7, #0]
 800ae00:	781b      	ldrb	r3, [r3, #0]
 800ae02:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ae06:	2b40      	cmp	r3, #64	@ 0x40
 800ae08:	d005      	beq.n	800ae16 <USBD_StdItfReq+0x26>
 800ae0a:	2b40      	cmp	r3, #64	@ 0x40
 800ae0c:	d82f      	bhi.n	800ae6e <USBD_StdItfReq+0x7e>
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d001      	beq.n	800ae16 <USBD_StdItfReq+0x26>
 800ae12:	2b20      	cmp	r3, #32
 800ae14:	d12b      	bne.n	800ae6e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ae1c:	b2db      	uxtb	r3, r3
 800ae1e:	3b01      	subs	r3, #1
 800ae20:	2b02      	cmp	r3, #2
 800ae22:	d81d      	bhi.n	800ae60 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ae24:	683b      	ldr	r3, [r7, #0]
 800ae26:	889b      	ldrh	r3, [r3, #4]
 800ae28:	b2db      	uxtb	r3, r3
 800ae2a:	2b01      	cmp	r3, #1
 800ae2c:	d813      	bhi.n	800ae56 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ae34:	689b      	ldr	r3, [r3, #8]
 800ae36:	6839      	ldr	r1, [r7, #0]
 800ae38:	6878      	ldr	r0, [r7, #4]
 800ae3a:	4798      	blx	r3
 800ae3c:	4603      	mov	r3, r0
 800ae3e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ae40:	683b      	ldr	r3, [r7, #0]
 800ae42:	88db      	ldrh	r3, [r3, #6]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d110      	bne.n	800ae6a <USBD_StdItfReq+0x7a>
 800ae48:	7bfb      	ldrb	r3, [r7, #15]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d10d      	bne.n	800ae6a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800ae4e:	6878      	ldr	r0, [r7, #4]
 800ae50:	f000 fd9d 	bl	800b98e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ae54:	e009      	b.n	800ae6a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800ae56:	6839      	ldr	r1, [r7, #0]
 800ae58:	6878      	ldr	r0, [r7, #4]
 800ae5a:	f000 fccd 	bl	800b7f8 <USBD_CtlError>
          break;
 800ae5e:	e004      	b.n	800ae6a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800ae60:	6839      	ldr	r1, [r7, #0]
 800ae62:	6878      	ldr	r0, [r7, #4]
 800ae64:	f000 fcc8 	bl	800b7f8 <USBD_CtlError>
          break;
 800ae68:	e000      	b.n	800ae6c <USBD_StdItfReq+0x7c>
          break;
 800ae6a:	bf00      	nop
      }
      break;
 800ae6c:	e004      	b.n	800ae78 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800ae6e:	6839      	ldr	r1, [r7, #0]
 800ae70:	6878      	ldr	r0, [r7, #4]
 800ae72:	f000 fcc1 	bl	800b7f8 <USBD_CtlError>
      break;
 800ae76:	bf00      	nop
  }

  return ret;
 800ae78:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae7a:	4618      	mov	r0, r3
 800ae7c:	3710      	adds	r7, #16
 800ae7e:	46bd      	mov	sp, r7
 800ae80:	bd80      	pop	{r7, pc}

0800ae82 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae82:	b580      	push	{r7, lr}
 800ae84:	b084      	sub	sp, #16
 800ae86:	af00      	add	r7, sp, #0
 800ae88:	6078      	str	r0, [r7, #4]
 800ae8a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800ae90:	683b      	ldr	r3, [r7, #0]
 800ae92:	889b      	ldrh	r3, [r3, #4]
 800ae94:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ae96:	683b      	ldr	r3, [r7, #0]
 800ae98:	781b      	ldrb	r3, [r3, #0]
 800ae9a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ae9e:	2b40      	cmp	r3, #64	@ 0x40
 800aea0:	d007      	beq.n	800aeb2 <USBD_StdEPReq+0x30>
 800aea2:	2b40      	cmp	r3, #64	@ 0x40
 800aea4:	f200 8145 	bhi.w	800b132 <USBD_StdEPReq+0x2b0>
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d00c      	beq.n	800aec6 <USBD_StdEPReq+0x44>
 800aeac:	2b20      	cmp	r3, #32
 800aeae:	f040 8140 	bne.w	800b132 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aeb8:	689b      	ldr	r3, [r3, #8]
 800aeba:	6839      	ldr	r1, [r7, #0]
 800aebc:	6878      	ldr	r0, [r7, #4]
 800aebe:	4798      	blx	r3
 800aec0:	4603      	mov	r3, r0
 800aec2:	73fb      	strb	r3, [r7, #15]
      break;
 800aec4:	e13a      	b.n	800b13c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800aec6:	683b      	ldr	r3, [r7, #0]
 800aec8:	785b      	ldrb	r3, [r3, #1]
 800aeca:	2b03      	cmp	r3, #3
 800aecc:	d007      	beq.n	800aede <USBD_StdEPReq+0x5c>
 800aece:	2b03      	cmp	r3, #3
 800aed0:	f300 8129 	bgt.w	800b126 <USBD_StdEPReq+0x2a4>
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d07f      	beq.n	800afd8 <USBD_StdEPReq+0x156>
 800aed8:	2b01      	cmp	r3, #1
 800aeda:	d03c      	beq.n	800af56 <USBD_StdEPReq+0xd4>
 800aedc:	e123      	b.n	800b126 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aee4:	b2db      	uxtb	r3, r3
 800aee6:	2b02      	cmp	r3, #2
 800aee8:	d002      	beq.n	800aef0 <USBD_StdEPReq+0x6e>
 800aeea:	2b03      	cmp	r3, #3
 800aeec:	d016      	beq.n	800af1c <USBD_StdEPReq+0x9a>
 800aeee:	e02c      	b.n	800af4a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aef0:	7bbb      	ldrb	r3, [r7, #14]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d00d      	beq.n	800af12 <USBD_StdEPReq+0x90>
 800aef6:	7bbb      	ldrb	r3, [r7, #14]
 800aef8:	2b80      	cmp	r3, #128	@ 0x80
 800aefa:	d00a      	beq.n	800af12 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800aefc:	7bbb      	ldrb	r3, [r7, #14]
 800aefe:	4619      	mov	r1, r3
 800af00:	6878      	ldr	r0, [r7, #4]
 800af02:	f004 fbed 	bl	800f6e0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800af06:	2180      	movs	r1, #128	@ 0x80
 800af08:	6878      	ldr	r0, [r7, #4]
 800af0a:	f004 fbe9 	bl	800f6e0 <USBD_LL_StallEP>
 800af0e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800af10:	e020      	b.n	800af54 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800af12:	6839      	ldr	r1, [r7, #0]
 800af14:	6878      	ldr	r0, [r7, #4]
 800af16:	f000 fc6f 	bl	800b7f8 <USBD_CtlError>
              break;
 800af1a:	e01b      	b.n	800af54 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800af1c:	683b      	ldr	r3, [r7, #0]
 800af1e:	885b      	ldrh	r3, [r3, #2]
 800af20:	2b00      	cmp	r3, #0
 800af22:	d10e      	bne.n	800af42 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800af24:	7bbb      	ldrb	r3, [r7, #14]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d00b      	beq.n	800af42 <USBD_StdEPReq+0xc0>
 800af2a:	7bbb      	ldrb	r3, [r7, #14]
 800af2c:	2b80      	cmp	r3, #128	@ 0x80
 800af2e:	d008      	beq.n	800af42 <USBD_StdEPReq+0xc0>
 800af30:	683b      	ldr	r3, [r7, #0]
 800af32:	88db      	ldrh	r3, [r3, #6]
 800af34:	2b00      	cmp	r3, #0
 800af36:	d104      	bne.n	800af42 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800af38:	7bbb      	ldrb	r3, [r7, #14]
 800af3a:	4619      	mov	r1, r3
 800af3c:	6878      	ldr	r0, [r7, #4]
 800af3e:	f004 fbcf 	bl	800f6e0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800af42:	6878      	ldr	r0, [r7, #4]
 800af44:	f000 fd23 	bl	800b98e <USBD_CtlSendStatus>

              break;
 800af48:	e004      	b.n	800af54 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800af4a:	6839      	ldr	r1, [r7, #0]
 800af4c:	6878      	ldr	r0, [r7, #4]
 800af4e:	f000 fc53 	bl	800b7f8 <USBD_CtlError>
              break;
 800af52:	bf00      	nop
          }
          break;
 800af54:	e0ec      	b.n	800b130 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800af5c:	b2db      	uxtb	r3, r3
 800af5e:	2b02      	cmp	r3, #2
 800af60:	d002      	beq.n	800af68 <USBD_StdEPReq+0xe6>
 800af62:	2b03      	cmp	r3, #3
 800af64:	d016      	beq.n	800af94 <USBD_StdEPReq+0x112>
 800af66:	e030      	b.n	800afca <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800af68:	7bbb      	ldrb	r3, [r7, #14]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d00d      	beq.n	800af8a <USBD_StdEPReq+0x108>
 800af6e:	7bbb      	ldrb	r3, [r7, #14]
 800af70:	2b80      	cmp	r3, #128	@ 0x80
 800af72:	d00a      	beq.n	800af8a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800af74:	7bbb      	ldrb	r3, [r7, #14]
 800af76:	4619      	mov	r1, r3
 800af78:	6878      	ldr	r0, [r7, #4]
 800af7a:	f004 fbb1 	bl	800f6e0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800af7e:	2180      	movs	r1, #128	@ 0x80
 800af80:	6878      	ldr	r0, [r7, #4]
 800af82:	f004 fbad 	bl	800f6e0 <USBD_LL_StallEP>
 800af86:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800af88:	e025      	b.n	800afd6 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800af8a:	6839      	ldr	r1, [r7, #0]
 800af8c:	6878      	ldr	r0, [r7, #4]
 800af8e:	f000 fc33 	bl	800b7f8 <USBD_CtlError>
              break;
 800af92:	e020      	b.n	800afd6 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800af94:	683b      	ldr	r3, [r7, #0]
 800af96:	885b      	ldrh	r3, [r3, #2]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d11b      	bne.n	800afd4 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800af9c:	7bbb      	ldrb	r3, [r7, #14]
 800af9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d004      	beq.n	800afb0 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800afa6:	7bbb      	ldrb	r3, [r7, #14]
 800afa8:	4619      	mov	r1, r3
 800afaa:	6878      	ldr	r0, [r7, #4]
 800afac:	f004 fbb7 	bl	800f71e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800afb0:	6878      	ldr	r0, [r7, #4]
 800afb2:	f000 fcec 	bl	800b98e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800afbc:	689b      	ldr	r3, [r3, #8]
 800afbe:	6839      	ldr	r1, [r7, #0]
 800afc0:	6878      	ldr	r0, [r7, #4]
 800afc2:	4798      	blx	r3
 800afc4:	4603      	mov	r3, r0
 800afc6:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800afc8:	e004      	b.n	800afd4 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800afca:	6839      	ldr	r1, [r7, #0]
 800afcc:	6878      	ldr	r0, [r7, #4]
 800afce:	f000 fc13 	bl	800b7f8 <USBD_CtlError>
              break;
 800afd2:	e000      	b.n	800afd6 <USBD_StdEPReq+0x154>
              break;
 800afd4:	bf00      	nop
          }
          break;
 800afd6:	e0ab      	b.n	800b130 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800afde:	b2db      	uxtb	r3, r3
 800afe0:	2b02      	cmp	r3, #2
 800afe2:	d002      	beq.n	800afea <USBD_StdEPReq+0x168>
 800afe4:	2b03      	cmp	r3, #3
 800afe6:	d032      	beq.n	800b04e <USBD_StdEPReq+0x1cc>
 800afe8:	e097      	b.n	800b11a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800afea:	7bbb      	ldrb	r3, [r7, #14]
 800afec:	2b00      	cmp	r3, #0
 800afee:	d007      	beq.n	800b000 <USBD_StdEPReq+0x17e>
 800aff0:	7bbb      	ldrb	r3, [r7, #14]
 800aff2:	2b80      	cmp	r3, #128	@ 0x80
 800aff4:	d004      	beq.n	800b000 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800aff6:	6839      	ldr	r1, [r7, #0]
 800aff8:	6878      	ldr	r0, [r7, #4]
 800affa:	f000 fbfd 	bl	800b7f8 <USBD_CtlError>
                break;
 800affe:	e091      	b.n	800b124 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b000:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b004:	2b00      	cmp	r3, #0
 800b006:	da0b      	bge.n	800b020 <USBD_StdEPReq+0x19e>
 800b008:	7bbb      	ldrb	r3, [r7, #14]
 800b00a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b00e:	4613      	mov	r3, r2
 800b010:	009b      	lsls	r3, r3, #2
 800b012:	4413      	add	r3, r2
 800b014:	009b      	lsls	r3, r3, #2
 800b016:	3310      	adds	r3, #16
 800b018:	687a      	ldr	r2, [r7, #4]
 800b01a:	4413      	add	r3, r2
 800b01c:	3304      	adds	r3, #4
 800b01e:	e00b      	b.n	800b038 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b020:	7bbb      	ldrb	r3, [r7, #14]
 800b022:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b026:	4613      	mov	r3, r2
 800b028:	009b      	lsls	r3, r3, #2
 800b02a:	4413      	add	r3, r2
 800b02c:	009b      	lsls	r3, r3, #2
 800b02e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b032:	687a      	ldr	r2, [r7, #4]
 800b034:	4413      	add	r3, r2
 800b036:	3304      	adds	r3, #4
 800b038:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b03a:	68bb      	ldr	r3, [r7, #8]
 800b03c:	2200      	movs	r2, #0
 800b03e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b040:	68bb      	ldr	r3, [r7, #8]
 800b042:	2202      	movs	r2, #2
 800b044:	4619      	mov	r1, r3
 800b046:	6878      	ldr	r0, [r7, #4]
 800b048:	f000 fc47 	bl	800b8da <USBD_CtlSendData>
              break;
 800b04c:	e06a      	b.n	800b124 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b04e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b052:	2b00      	cmp	r3, #0
 800b054:	da11      	bge.n	800b07a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b056:	7bbb      	ldrb	r3, [r7, #14]
 800b058:	f003 020f 	and.w	r2, r3, #15
 800b05c:	6879      	ldr	r1, [r7, #4]
 800b05e:	4613      	mov	r3, r2
 800b060:	009b      	lsls	r3, r3, #2
 800b062:	4413      	add	r3, r2
 800b064:	009b      	lsls	r3, r3, #2
 800b066:	440b      	add	r3, r1
 800b068:	3324      	adds	r3, #36	@ 0x24
 800b06a:	881b      	ldrh	r3, [r3, #0]
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d117      	bne.n	800b0a0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800b070:	6839      	ldr	r1, [r7, #0]
 800b072:	6878      	ldr	r0, [r7, #4]
 800b074:	f000 fbc0 	bl	800b7f8 <USBD_CtlError>
                  break;
 800b078:	e054      	b.n	800b124 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b07a:	7bbb      	ldrb	r3, [r7, #14]
 800b07c:	f003 020f 	and.w	r2, r3, #15
 800b080:	6879      	ldr	r1, [r7, #4]
 800b082:	4613      	mov	r3, r2
 800b084:	009b      	lsls	r3, r3, #2
 800b086:	4413      	add	r3, r2
 800b088:	009b      	lsls	r3, r3, #2
 800b08a:	440b      	add	r3, r1
 800b08c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b090:	881b      	ldrh	r3, [r3, #0]
 800b092:	2b00      	cmp	r3, #0
 800b094:	d104      	bne.n	800b0a0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800b096:	6839      	ldr	r1, [r7, #0]
 800b098:	6878      	ldr	r0, [r7, #4]
 800b09a:	f000 fbad 	bl	800b7f8 <USBD_CtlError>
                  break;
 800b09e:	e041      	b.n	800b124 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b0a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	da0b      	bge.n	800b0c0 <USBD_StdEPReq+0x23e>
 800b0a8:	7bbb      	ldrb	r3, [r7, #14]
 800b0aa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b0ae:	4613      	mov	r3, r2
 800b0b0:	009b      	lsls	r3, r3, #2
 800b0b2:	4413      	add	r3, r2
 800b0b4:	009b      	lsls	r3, r3, #2
 800b0b6:	3310      	adds	r3, #16
 800b0b8:	687a      	ldr	r2, [r7, #4]
 800b0ba:	4413      	add	r3, r2
 800b0bc:	3304      	adds	r3, #4
 800b0be:	e00b      	b.n	800b0d8 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b0c0:	7bbb      	ldrb	r3, [r7, #14]
 800b0c2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b0c6:	4613      	mov	r3, r2
 800b0c8:	009b      	lsls	r3, r3, #2
 800b0ca:	4413      	add	r3, r2
 800b0cc:	009b      	lsls	r3, r3, #2
 800b0ce:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b0d2:	687a      	ldr	r2, [r7, #4]
 800b0d4:	4413      	add	r3, r2
 800b0d6:	3304      	adds	r3, #4
 800b0d8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b0da:	7bbb      	ldrb	r3, [r7, #14]
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d002      	beq.n	800b0e6 <USBD_StdEPReq+0x264>
 800b0e0:	7bbb      	ldrb	r3, [r7, #14]
 800b0e2:	2b80      	cmp	r3, #128	@ 0x80
 800b0e4:	d103      	bne.n	800b0ee <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800b0e6:	68bb      	ldr	r3, [r7, #8]
 800b0e8:	2200      	movs	r2, #0
 800b0ea:	601a      	str	r2, [r3, #0]
 800b0ec:	e00e      	b.n	800b10c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b0ee:	7bbb      	ldrb	r3, [r7, #14]
 800b0f0:	4619      	mov	r1, r3
 800b0f2:	6878      	ldr	r0, [r7, #4]
 800b0f4:	f004 fb32 	bl	800f75c <USBD_LL_IsStallEP>
 800b0f8:	4603      	mov	r3, r0
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d003      	beq.n	800b106 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800b0fe:	68bb      	ldr	r3, [r7, #8]
 800b100:	2201      	movs	r2, #1
 800b102:	601a      	str	r2, [r3, #0]
 800b104:	e002      	b.n	800b10c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800b106:	68bb      	ldr	r3, [r7, #8]
 800b108:	2200      	movs	r2, #0
 800b10a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b10c:	68bb      	ldr	r3, [r7, #8]
 800b10e:	2202      	movs	r2, #2
 800b110:	4619      	mov	r1, r3
 800b112:	6878      	ldr	r0, [r7, #4]
 800b114:	f000 fbe1 	bl	800b8da <USBD_CtlSendData>
              break;
 800b118:	e004      	b.n	800b124 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800b11a:	6839      	ldr	r1, [r7, #0]
 800b11c:	6878      	ldr	r0, [r7, #4]
 800b11e:	f000 fb6b 	bl	800b7f8 <USBD_CtlError>
              break;
 800b122:	bf00      	nop
          }
          break;
 800b124:	e004      	b.n	800b130 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800b126:	6839      	ldr	r1, [r7, #0]
 800b128:	6878      	ldr	r0, [r7, #4]
 800b12a:	f000 fb65 	bl	800b7f8 <USBD_CtlError>
          break;
 800b12e:	bf00      	nop
      }
      break;
 800b130:	e004      	b.n	800b13c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800b132:	6839      	ldr	r1, [r7, #0]
 800b134:	6878      	ldr	r0, [r7, #4]
 800b136:	f000 fb5f 	bl	800b7f8 <USBD_CtlError>
      break;
 800b13a:	bf00      	nop
  }

  return ret;
 800b13c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b13e:	4618      	mov	r0, r3
 800b140:	3710      	adds	r7, #16
 800b142:	46bd      	mov	sp, r7
 800b144:	bd80      	pop	{r7, pc}
	...

0800b148 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b148:	b580      	push	{r7, lr}
 800b14a:	b084      	sub	sp, #16
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	6078      	str	r0, [r7, #4]
 800b150:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b152:	2300      	movs	r3, #0
 800b154:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b156:	2300      	movs	r3, #0
 800b158:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b15a:	2300      	movs	r3, #0
 800b15c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b15e:	683b      	ldr	r3, [r7, #0]
 800b160:	885b      	ldrh	r3, [r3, #2]
 800b162:	0a1b      	lsrs	r3, r3, #8
 800b164:	b29b      	uxth	r3, r3
 800b166:	3b01      	subs	r3, #1
 800b168:	2b0e      	cmp	r3, #14
 800b16a:	f200 8152 	bhi.w	800b412 <USBD_GetDescriptor+0x2ca>
 800b16e:	a201      	add	r2, pc, #4	@ (adr r2, 800b174 <USBD_GetDescriptor+0x2c>)
 800b170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b174:	0800b1e5 	.word	0x0800b1e5
 800b178:	0800b1fd 	.word	0x0800b1fd
 800b17c:	0800b23d 	.word	0x0800b23d
 800b180:	0800b413 	.word	0x0800b413
 800b184:	0800b413 	.word	0x0800b413
 800b188:	0800b3b3 	.word	0x0800b3b3
 800b18c:	0800b3df 	.word	0x0800b3df
 800b190:	0800b413 	.word	0x0800b413
 800b194:	0800b413 	.word	0x0800b413
 800b198:	0800b413 	.word	0x0800b413
 800b19c:	0800b413 	.word	0x0800b413
 800b1a0:	0800b413 	.word	0x0800b413
 800b1a4:	0800b413 	.word	0x0800b413
 800b1a8:	0800b413 	.word	0x0800b413
 800b1ac:	0800b1b1 	.word	0x0800b1b1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b1b6:	69db      	ldr	r3, [r3, #28]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d00b      	beq.n	800b1d4 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b1c2:	69db      	ldr	r3, [r3, #28]
 800b1c4:	687a      	ldr	r2, [r7, #4]
 800b1c6:	7c12      	ldrb	r2, [r2, #16]
 800b1c8:	f107 0108 	add.w	r1, r7, #8
 800b1cc:	4610      	mov	r0, r2
 800b1ce:	4798      	blx	r3
 800b1d0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b1d2:	e126      	b.n	800b422 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b1d4:	6839      	ldr	r1, [r7, #0]
 800b1d6:	6878      	ldr	r0, [r7, #4]
 800b1d8:	f000 fb0e 	bl	800b7f8 <USBD_CtlError>
        err++;
 800b1dc:	7afb      	ldrb	r3, [r7, #11]
 800b1de:	3301      	adds	r3, #1
 800b1e0:	72fb      	strb	r3, [r7, #11]
      break;
 800b1e2:	e11e      	b.n	800b422 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	687a      	ldr	r2, [r7, #4]
 800b1ee:	7c12      	ldrb	r2, [r2, #16]
 800b1f0:	f107 0108 	add.w	r1, r7, #8
 800b1f4:	4610      	mov	r0, r2
 800b1f6:	4798      	blx	r3
 800b1f8:	60f8      	str	r0, [r7, #12]
      break;
 800b1fa:	e112      	b.n	800b422 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	7c1b      	ldrb	r3, [r3, #16]
 800b200:	2b00      	cmp	r3, #0
 800b202:	d10d      	bne.n	800b220 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b20a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b20c:	f107 0208 	add.w	r2, r7, #8
 800b210:	4610      	mov	r0, r2
 800b212:	4798      	blx	r3
 800b214:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	3301      	adds	r3, #1
 800b21a:	2202      	movs	r2, #2
 800b21c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b21e:	e100      	b.n	800b422 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b226:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b228:	f107 0208 	add.w	r2, r7, #8
 800b22c:	4610      	mov	r0, r2
 800b22e:	4798      	blx	r3
 800b230:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	3301      	adds	r3, #1
 800b236:	2202      	movs	r2, #2
 800b238:	701a      	strb	r2, [r3, #0]
      break;
 800b23a:	e0f2      	b.n	800b422 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b23c:	683b      	ldr	r3, [r7, #0]
 800b23e:	885b      	ldrh	r3, [r3, #2]
 800b240:	b2db      	uxtb	r3, r3
 800b242:	2b05      	cmp	r3, #5
 800b244:	f200 80ac 	bhi.w	800b3a0 <USBD_GetDescriptor+0x258>
 800b248:	a201      	add	r2, pc, #4	@ (adr r2, 800b250 <USBD_GetDescriptor+0x108>)
 800b24a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b24e:	bf00      	nop
 800b250:	0800b269 	.word	0x0800b269
 800b254:	0800b29d 	.word	0x0800b29d
 800b258:	0800b2d1 	.word	0x0800b2d1
 800b25c:	0800b305 	.word	0x0800b305
 800b260:	0800b339 	.word	0x0800b339
 800b264:	0800b36d 	.word	0x0800b36d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b26e:	685b      	ldr	r3, [r3, #4]
 800b270:	2b00      	cmp	r3, #0
 800b272:	d00b      	beq.n	800b28c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b27a:	685b      	ldr	r3, [r3, #4]
 800b27c:	687a      	ldr	r2, [r7, #4]
 800b27e:	7c12      	ldrb	r2, [r2, #16]
 800b280:	f107 0108 	add.w	r1, r7, #8
 800b284:	4610      	mov	r0, r2
 800b286:	4798      	blx	r3
 800b288:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b28a:	e091      	b.n	800b3b0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b28c:	6839      	ldr	r1, [r7, #0]
 800b28e:	6878      	ldr	r0, [r7, #4]
 800b290:	f000 fab2 	bl	800b7f8 <USBD_CtlError>
            err++;
 800b294:	7afb      	ldrb	r3, [r7, #11]
 800b296:	3301      	adds	r3, #1
 800b298:	72fb      	strb	r3, [r7, #11]
          break;
 800b29a:	e089      	b.n	800b3b0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b2a2:	689b      	ldr	r3, [r3, #8]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d00b      	beq.n	800b2c0 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b2ae:	689b      	ldr	r3, [r3, #8]
 800b2b0:	687a      	ldr	r2, [r7, #4]
 800b2b2:	7c12      	ldrb	r2, [r2, #16]
 800b2b4:	f107 0108 	add.w	r1, r7, #8
 800b2b8:	4610      	mov	r0, r2
 800b2ba:	4798      	blx	r3
 800b2bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b2be:	e077      	b.n	800b3b0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b2c0:	6839      	ldr	r1, [r7, #0]
 800b2c2:	6878      	ldr	r0, [r7, #4]
 800b2c4:	f000 fa98 	bl	800b7f8 <USBD_CtlError>
            err++;
 800b2c8:	7afb      	ldrb	r3, [r7, #11]
 800b2ca:	3301      	adds	r3, #1
 800b2cc:	72fb      	strb	r3, [r7, #11]
          break;
 800b2ce:	e06f      	b.n	800b3b0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b2d6:	68db      	ldr	r3, [r3, #12]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d00b      	beq.n	800b2f4 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b2e2:	68db      	ldr	r3, [r3, #12]
 800b2e4:	687a      	ldr	r2, [r7, #4]
 800b2e6:	7c12      	ldrb	r2, [r2, #16]
 800b2e8:	f107 0108 	add.w	r1, r7, #8
 800b2ec:	4610      	mov	r0, r2
 800b2ee:	4798      	blx	r3
 800b2f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b2f2:	e05d      	b.n	800b3b0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b2f4:	6839      	ldr	r1, [r7, #0]
 800b2f6:	6878      	ldr	r0, [r7, #4]
 800b2f8:	f000 fa7e 	bl	800b7f8 <USBD_CtlError>
            err++;
 800b2fc:	7afb      	ldrb	r3, [r7, #11]
 800b2fe:	3301      	adds	r3, #1
 800b300:	72fb      	strb	r3, [r7, #11]
          break;
 800b302:	e055      	b.n	800b3b0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b30a:	691b      	ldr	r3, [r3, #16]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d00b      	beq.n	800b328 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b316:	691b      	ldr	r3, [r3, #16]
 800b318:	687a      	ldr	r2, [r7, #4]
 800b31a:	7c12      	ldrb	r2, [r2, #16]
 800b31c:	f107 0108 	add.w	r1, r7, #8
 800b320:	4610      	mov	r0, r2
 800b322:	4798      	blx	r3
 800b324:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b326:	e043      	b.n	800b3b0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b328:	6839      	ldr	r1, [r7, #0]
 800b32a:	6878      	ldr	r0, [r7, #4]
 800b32c:	f000 fa64 	bl	800b7f8 <USBD_CtlError>
            err++;
 800b330:	7afb      	ldrb	r3, [r7, #11]
 800b332:	3301      	adds	r3, #1
 800b334:	72fb      	strb	r3, [r7, #11]
          break;
 800b336:	e03b      	b.n	800b3b0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b33e:	695b      	ldr	r3, [r3, #20]
 800b340:	2b00      	cmp	r3, #0
 800b342:	d00b      	beq.n	800b35c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b34a:	695b      	ldr	r3, [r3, #20]
 800b34c:	687a      	ldr	r2, [r7, #4]
 800b34e:	7c12      	ldrb	r2, [r2, #16]
 800b350:	f107 0108 	add.w	r1, r7, #8
 800b354:	4610      	mov	r0, r2
 800b356:	4798      	blx	r3
 800b358:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b35a:	e029      	b.n	800b3b0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b35c:	6839      	ldr	r1, [r7, #0]
 800b35e:	6878      	ldr	r0, [r7, #4]
 800b360:	f000 fa4a 	bl	800b7f8 <USBD_CtlError>
            err++;
 800b364:	7afb      	ldrb	r3, [r7, #11]
 800b366:	3301      	adds	r3, #1
 800b368:	72fb      	strb	r3, [r7, #11]
          break;
 800b36a:	e021      	b.n	800b3b0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b372:	699b      	ldr	r3, [r3, #24]
 800b374:	2b00      	cmp	r3, #0
 800b376:	d00b      	beq.n	800b390 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b37e:	699b      	ldr	r3, [r3, #24]
 800b380:	687a      	ldr	r2, [r7, #4]
 800b382:	7c12      	ldrb	r2, [r2, #16]
 800b384:	f107 0108 	add.w	r1, r7, #8
 800b388:	4610      	mov	r0, r2
 800b38a:	4798      	blx	r3
 800b38c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b38e:	e00f      	b.n	800b3b0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b390:	6839      	ldr	r1, [r7, #0]
 800b392:	6878      	ldr	r0, [r7, #4]
 800b394:	f000 fa30 	bl	800b7f8 <USBD_CtlError>
            err++;
 800b398:	7afb      	ldrb	r3, [r7, #11]
 800b39a:	3301      	adds	r3, #1
 800b39c:	72fb      	strb	r3, [r7, #11]
          break;
 800b39e:	e007      	b.n	800b3b0 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b3a0:	6839      	ldr	r1, [r7, #0]
 800b3a2:	6878      	ldr	r0, [r7, #4]
 800b3a4:	f000 fa28 	bl	800b7f8 <USBD_CtlError>
          err++;
 800b3a8:	7afb      	ldrb	r3, [r7, #11]
 800b3aa:	3301      	adds	r3, #1
 800b3ac:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800b3ae:	bf00      	nop
      }
      break;
 800b3b0:	e037      	b.n	800b422 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	7c1b      	ldrb	r3, [r3, #16]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d109      	bne.n	800b3ce <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b3c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b3c2:	f107 0208 	add.w	r2, r7, #8
 800b3c6:	4610      	mov	r0, r2
 800b3c8:	4798      	blx	r3
 800b3ca:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b3cc:	e029      	b.n	800b422 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b3ce:	6839      	ldr	r1, [r7, #0]
 800b3d0:	6878      	ldr	r0, [r7, #4]
 800b3d2:	f000 fa11 	bl	800b7f8 <USBD_CtlError>
        err++;
 800b3d6:	7afb      	ldrb	r3, [r7, #11]
 800b3d8:	3301      	adds	r3, #1
 800b3da:	72fb      	strb	r3, [r7, #11]
      break;
 800b3dc:	e021      	b.n	800b422 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	7c1b      	ldrb	r3, [r3, #16]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d10d      	bne.n	800b402 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b3ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b3ee:	f107 0208 	add.w	r2, r7, #8
 800b3f2:	4610      	mov	r0, r2
 800b3f4:	4798      	blx	r3
 800b3f6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	3301      	adds	r3, #1
 800b3fc:	2207      	movs	r2, #7
 800b3fe:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b400:	e00f      	b.n	800b422 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b402:	6839      	ldr	r1, [r7, #0]
 800b404:	6878      	ldr	r0, [r7, #4]
 800b406:	f000 f9f7 	bl	800b7f8 <USBD_CtlError>
        err++;
 800b40a:	7afb      	ldrb	r3, [r7, #11]
 800b40c:	3301      	adds	r3, #1
 800b40e:	72fb      	strb	r3, [r7, #11]
      break;
 800b410:	e007      	b.n	800b422 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800b412:	6839      	ldr	r1, [r7, #0]
 800b414:	6878      	ldr	r0, [r7, #4]
 800b416:	f000 f9ef 	bl	800b7f8 <USBD_CtlError>
      err++;
 800b41a:	7afb      	ldrb	r3, [r7, #11]
 800b41c:	3301      	adds	r3, #1
 800b41e:	72fb      	strb	r3, [r7, #11]
      break;
 800b420:	bf00      	nop
  }

  if (err != 0U)
 800b422:	7afb      	ldrb	r3, [r7, #11]
 800b424:	2b00      	cmp	r3, #0
 800b426:	d11e      	bne.n	800b466 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800b428:	683b      	ldr	r3, [r7, #0]
 800b42a:	88db      	ldrh	r3, [r3, #6]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d016      	beq.n	800b45e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800b430:	893b      	ldrh	r3, [r7, #8]
 800b432:	2b00      	cmp	r3, #0
 800b434:	d00e      	beq.n	800b454 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800b436:	683b      	ldr	r3, [r7, #0]
 800b438:	88da      	ldrh	r2, [r3, #6]
 800b43a:	893b      	ldrh	r3, [r7, #8]
 800b43c:	4293      	cmp	r3, r2
 800b43e:	bf28      	it	cs
 800b440:	4613      	movcs	r3, r2
 800b442:	b29b      	uxth	r3, r3
 800b444:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b446:	893b      	ldrh	r3, [r7, #8]
 800b448:	461a      	mov	r2, r3
 800b44a:	68f9      	ldr	r1, [r7, #12]
 800b44c:	6878      	ldr	r0, [r7, #4]
 800b44e:	f000 fa44 	bl	800b8da <USBD_CtlSendData>
 800b452:	e009      	b.n	800b468 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b454:	6839      	ldr	r1, [r7, #0]
 800b456:	6878      	ldr	r0, [r7, #4]
 800b458:	f000 f9ce 	bl	800b7f8 <USBD_CtlError>
 800b45c:	e004      	b.n	800b468 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b45e:	6878      	ldr	r0, [r7, #4]
 800b460:	f000 fa95 	bl	800b98e <USBD_CtlSendStatus>
 800b464:	e000      	b.n	800b468 <USBD_GetDescriptor+0x320>
    return;
 800b466:	bf00      	nop
  }
}
 800b468:	3710      	adds	r7, #16
 800b46a:	46bd      	mov	sp, r7
 800b46c:	bd80      	pop	{r7, pc}
 800b46e:	bf00      	nop

0800b470 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b470:	b580      	push	{r7, lr}
 800b472:	b084      	sub	sp, #16
 800b474:	af00      	add	r7, sp, #0
 800b476:	6078      	str	r0, [r7, #4]
 800b478:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b47a:	683b      	ldr	r3, [r7, #0]
 800b47c:	889b      	ldrh	r3, [r3, #4]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d131      	bne.n	800b4e6 <USBD_SetAddress+0x76>
 800b482:	683b      	ldr	r3, [r7, #0]
 800b484:	88db      	ldrh	r3, [r3, #6]
 800b486:	2b00      	cmp	r3, #0
 800b488:	d12d      	bne.n	800b4e6 <USBD_SetAddress+0x76>
 800b48a:	683b      	ldr	r3, [r7, #0]
 800b48c:	885b      	ldrh	r3, [r3, #2]
 800b48e:	2b7f      	cmp	r3, #127	@ 0x7f
 800b490:	d829      	bhi.n	800b4e6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b492:	683b      	ldr	r3, [r7, #0]
 800b494:	885b      	ldrh	r3, [r3, #2]
 800b496:	b2db      	uxtb	r3, r3
 800b498:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b49c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b4a4:	b2db      	uxtb	r3, r3
 800b4a6:	2b03      	cmp	r3, #3
 800b4a8:	d104      	bne.n	800b4b4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b4aa:	6839      	ldr	r1, [r7, #0]
 800b4ac:	6878      	ldr	r0, [r7, #4]
 800b4ae:	f000 f9a3 	bl	800b7f8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b4b2:	e01d      	b.n	800b4f0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	7bfa      	ldrb	r2, [r7, #15]
 800b4b8:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b4bc:	7bfb      	ldrb	r3, [r7, #15]
 800b4be:	4619      	mov	r1, r3
 800b4c0:	6878      	ldr	r0, [r7, #4]
 800b4c2:	f004 f977 	bl	800f7b4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b4c6:	6878      	ldr	r0, [r7, #4]
 800b4c8:	f000 fa61 	bl	800b98e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b4cc:	7bfb      	ldrb	r3, [r7, #15]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d004      	beq.n	800b4dc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	2202      	movs	r2, #2
 800b4d6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b4da:	e009      	b.n	800b4f0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	2201      	movs	r2, #1
 800b4e0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b4e4:	e004      	b.n	800b4f0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b4e6:	6839      	ldr	r1, [r7, #0]
 800b4e8:	6878      	ldr	r0, [r7, #4]
 800b4ea:	f000 f985 	bl	800b7f8 <USBD_CtlError>
  }
}
 800b4ee:	bf00      	nop
 800b4f0:	bf00      	nop
 800b4f2:	3710      	adds	r7, #16
 800b4f4:	46bd      	mov	sp, r7
 800b4f6:	bd80      	pop	{r7, pc}

0800b4f8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b4f8:	b580      	push	{r7, lr}
 800b4fa:	b084      	sub	sp, #16
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	6078      	str	r0, [r7, #4]
 800b500:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b502:	2300      	movs	r3, #0
 800b504:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b506:	683b      	ldr	r3, [r7, #0]
 800b508:	885b      	ldrh	r3, [r3, #2]
 800b50a:	b2da      	uxtb	r2, r3
 800b50c:	4b4c      	ldr	r3, [pc, #304]	@ (800b640 <USBD_SetConfig+0x148>)
 800b50e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b510:	4b4b      	ldr	r3, [pc, #300]	@ (800b640 <USBD_SetConfig+0x148>)
 800b512:	781b      	ldrb	r3, [r3, #0]
 800b514:	2b01      	cmp	r3, #1
 800b516:	d905      	bls.n	800b524 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b518:	6839      	ldr	r1, [r7, #0]
 800b51a:	6878      	ldr	r0, [r7, #4]
 800b51c:	f000 f96c 	bl	800b7f8 <USBD_CtlError>
    return USBD_FAIL;
 800b520:	2303      	movs	r3, #3
 800b522:	e088      	b.n	800b636 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b52a:	b2db      	uxtb	r3, r3
 800b52c:	2b02      	cmp	r3, #2
 800b52e:	d002      	beq.n	800b536 <USBD_SetConfig+0x3e>
 800b530:	2b03      	cmp	r3, #3
 800b532:	d025      	beq.n	800b580 <USBD_SetConfig+0x88>
 800b534:	e071      	b.n	800b61a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b536:	4b42      	ldr	r3, [pc, #264]	@ (800b640 <USBD_SetConfig+0x148>)
 800b538:	781b      	ldrb	r3, [r3, #0]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d01c      	beq.n	800b578 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800b53e:	4b40      	ldr	r3, [pc, #256]	@ (800b640 <USBD_SetConfig+0x148>)
 800b540:	781b      	ldrb	r3, [r3, #0]
 800b542:	461a      	mov	r2, r3
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b548:	4b3d      	ldr	r3, [pc, #244]	@ (800b640 <USBD_SetConfig+0x148>)
 800b54a:	781b      	ldrb	r3, [r3, #0]
 800b54c:	4619      	mov	r1, r3
 800b54e:	6878      	ldr	r0, [r7, #4]
 800b550:	f7ff f992 	bl	800a878 <USBD_SetClassConfig>
 800b554:	4603      	mov	r3, r0
 800b556:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b558:	7bfb      	ldrb	r3, [r7, #15]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d004      	beq.n	800b568 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800b55e:	6839      	ldr	r1, [r7, #0]
 800b560:	6878      	ldr	r0, [r7, #4]
 800b562:	f000 f949 	bl	800b7f8 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b566:	e065      	b.n	800b634 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b568:	6878      	ldr	r0, [r7, #4]
 800b56a:	f000 fa10 	bl	800b98e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	2203      	movs	r2, #3
 800b572:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b576:	e05d      	b.n	800b634 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b578:	6878      	ldr	r0, [r7, #4]
 800b57a:	f000 fa08 	bl	800b98e <USBD_CtlSendStatus>
      break;
 800b57e:	e059      	b.n	800b634 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b580:	4b2f      	ldr	r3, [pc, #188]	@ (800b640 <USBD_SetConfig+0x148>)
 800b582:	781b      	ldrb	r3, [r3, #0]
 800b584:	2b00      	cmp	r3, #0
 800b586:	d112      	bne.n	800b5ae <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	2202      	movs	r2, #2
 800b58c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800b590:	4b2b      	ldr	r3, [pc, #172]	@ (800b640 <USBD_SetConfig+0x148>)
 800b592:	781b      	ldrb	r3, [r3, #0]
 800b594:	461a      	mov	r2, r3
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b59a:	4b29      	ldr	r3, [pc, #164]	@ (800b640 <USBD_SetConfig+0x148>)
 800b59c:	781b      	ldrb	r3, [r3, #0]
 800b59e:	4619      	mov	r1, r3
 800b5a0:	6878      	ldr	r0, [r7, #4]
 800b5a2:	f7ff f985 	bl	800a8b0 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b5a6:	6878      	ldr	r0, [r7, #4]
 800b5a8:	f000 f9f1 	bl	800b98e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b5ac:	e042      	b.n	800b634 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800b5ae:	4b24      	ldr	r3, [pc, #144]	@ (800b640 <USBD_SetConfig+0x148>)
 800b5b0:	781b      	ldrb	r3, [r3, #0]
 800b5b2:	461a      	mov	r2, r3
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	685b      	ldr	r3, [r3, #4]
 800b5b8:	429a      	cmp	r2, r3
 800b5ba:	d02a      	beq.n	800b612 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	685b      	ldr	r3, [r3, #4]
 800b5c0:	b2db      	uxtb	r3, r3
 800b5c2:	4619      	mov	r1, r3
 800b5c4:	6878      	ldr	r0, [r7, #4]
 800b5c6:	f7ff f973 	bl	800a8b0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b5ca:	4b1d      	ldr	r3, [pc, #116]	@ (800b640 <USBD_SetConfig+0x148>)
 800b5cc:	781b      	ldrb	r3, [r3, #0]
 800b5ce:	461a      	mov	r2, r3
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b5d4:	4b1a      	ldr	r3, [pc, #104]	@ (800b640 <USBD_SetConfig+0x148>)
 800b5d6:	781b      	ldrb	r3, [r3, #0]
 800b5d8:	4619      	mov	r1, r3
 800b5da:	6878      	ldr	r0, [r7, #4]
 800b5dc:	f7ff f94c 	bl	800a878 <USBD_SetClassConfig>
 800b5e0:	4603      	mov	r3, r0
 800b5e2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b5e4:	7bfb      	ldrb	r3, [r7, #15]
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d00f      	beq.n	800b60a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800b5ea:	6839      	ldr	r1, [r7, #0]
 800b5ec:	6878      	ldr	r0, [r7, #4]
 800b5ee:	f000 f903 	bl	800b7f8 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	685b      	ldr	r3, [r3, #4]
 800b5f6:	b2db      	uxtb	r3, r3
 800b5f8:	4619      	mov	r1, r3
 800b5fa:	6878      	ldr	r0, [r7, #4]
 800b5fc:	f7ff f958 	bl	800a8b0 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	2202      	movs	r2, #2
 800b604:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b608:	e014      	b.n	800b634 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b60a:	6878      	ldr	r0, [r7, #4]
 800b60c:	f000 f9bf 	bl	800b98e <USBD_CtlSendStatus>
      break;
 800b610:	e010      	b.n	800b634 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b612:	6878      	ldr	r0, [r7, #4]
 800b614:	f000 f9bb 	bl	800b98e <USBD_CtlSendStatus>
      break;
 800b618:	e00c      	b.n	800b634 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800b61a:	6839      	ldr	r1, [r7, #0]
 800b61c:	6878      	ldr	r0, [r7, #4]
 800b61e:	f000 f8eb 	bl	800b7f8 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b622:	4b07      	ldr	r3, [pc, #28]	@ (800b640 <USBD_SetConfig+0x148>)
 800b624:	781b      	ldrb	r3, [r3, #0]
 800b626:	4619      	mov	r1, r3
 800b628:	6878      	ldr	r0, [r7, #4]
 800b62a:	f7ff f941 	bl	800a8b0 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b62e:	2303      	movs	r3, #3
 800b630:	73fb      	strb	r3, [r7, #15]
      break;
 800b632:	bf00      	nop
  }

  return ret;
 800b634:	7bfb      	ldrb	r3, [r7, #15]
}
 800b636:	4618      	mov	r0, r3
 800b638:	3710      	adds	r7, #16
 800b63a:	46bd      	mov	sp, r7
 800b63c:	bd80      	pop	{r7, pc}
 800b63e:	bf00      	nop
 800b640:	200048c0 	.word	0x200048c0

0800b644 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b644:	b580      	push	{r7, lr}
 800b646:	b082      	sub	sp, #8
 800b648:	af00      	add	r7, sp, #0
 800b64a:	6078      	str	r0, [r7, #4]
 800b64c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b64e:	683b      	ldr	r3, [r7, #0]
 800b650:	88db      	ldrh	r3, [r3, #6]
 800b652:	2b01      	cmp	r3, #1
 800b654:	d004      	beq.n	800b660 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b656:	6839      	ldr	r1, [r7, #0]
 800b658:	6878      	ldr	r0, [r7, #4]
 800b65a:	f000 f8cd 	bl	800b7f8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b65e:	e023      	b.n	800b6a8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b666:	b2db      	uxtb	r3, r3
 800b668:	2b02      	cmp	r3, #2
 800b66a:	dc02      	bgt.n	800b672 <USBD_GetConfig+0x2e>
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	dc03      	bgt.n	800b678 <USBD_GetConfig+0x34>
 800b670:	e015      	b.n	800b69e <USBD_GetConfig+0x5a>
 800b672:	2b03      	cmp	r3, #3
 800b674:	d00b      	beq.n	800b68e <USBD_GetConfig+0x4a>
 800b676:	e012      	b.n	800b69e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	2200      	movs	r2, #0
 800b67c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	3308      	adds	r3, #8
 800b682:	2201      	movs	r2, #1
 800b684:	4619      	mov	r1, r3
 800b686:	6878      	ldr	r0, [r7, #4]
 800b688:	f000 f927 	bl	800b8da <USBD_CtlSendData>
        break;
 800b68c:	e00c      	b.n	800b6a8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	3304      	adds	r3, #4
 800b692:	2201      	movs	r2, #1
 800b694:	4619      	mov	r1, r3
 800b696:	6878      	ldr	r0, [r7, #4]
 800b698:	f000 f91f 	bl	800b8da <USBD_CtlSendData>
        break;
 800b69c:	e004      	b.n	800b6a8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b69e:	6839      	ldr	r1, [r7, #0]
 800b6a0:	6878      	ldr	r0, [r7, #4]
 800b6a2:	f000 f8a9 	bl	800b7f8 <USBD_CtlError>
        break;
 800b6a6:	bf00      	nop
}
 800b6a8:	bf00      	nop
 800b6aa:	3708      	adds	r7, #8
 800b6ac:	46bd      	mov	sp, r7
 800b6ae:	bd80      	pop	{r7, pc}

0800b6b0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b6b0:	b580      	push	{r7, lr}
 800b6b2:	b082      	sub	sp, #8
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	6078      	str	r0, [r7, #4]
 800b6b8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b6c0:	b2db      	uxtb	r3, r3
 800b6c2:	3b01      	subs	r3, #1
 800b6c4:	2b02      	cmp	r3, #2
 800b6c6:	d81e      	bhi.n	800b706 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b6c8:	683b      	ldr	r3, [r7, #0]
 800b6ca:	88db      	ldrh	r3, [r3, #6]
 800b6cc:	2b02      	cmp	r3, #2
 800b6ce:	d004      	beq.n	800b6da <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b6d0:	6839      	ldr	r1, [r7, #0]
 800b6d2:	6878      	ldr	r0, [r7, #4]
 800b6d4:	f000 f890 	bl	800b7f8 <USBD_CtlError>
        break;
 800b6d8:	e01a      	b.n	800b710 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	2201      	movs	r2, #1
 800b6de:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d005      	beq.n	800b6f6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	68db      	ldr	r3, [r3, #12]
 800b6ee:	f043 0202 	orr.w	r2, r3, #2
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	330c      	adds	r3, #12
 800b6fa:	2202      	movs	r2, #2
 800b6fc:	4619      	mov	r1, r3
 800b6fe:	6878      	ldr	r0, [r7, #4]
 800b700:	f000 f8eb 	bl	800b8da <USBD_CtlSendData>
      break;
 800b704:	e004      	b.n	800b710 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b706:	6839      	ldr	r1, [r7, #0]
 800b708:	6878      	ldr	r0, [r7, #4]
 800b70a:	f000 f875 	bl	800b7f8 <USBD_CtlError>
      break;
 800b70e:	bf00      	nop
  }
}
 800b710:	bf00      	nop
 800b712:	3708      	adds	r7, #8
 800b714:	46bd      	mov	sp, r7
 800b716:	bd80      	pop	{r7, pc}

0800b718 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b718:	b580      	push	{r7, lr}
 800b71a:	b082      	sub	sp, #8
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	6078      	str	r0, [r7, #4]
 800b720:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b722:	683b      	ldr	r3, [r7, #0]
 800b724:	885b      	ldrh	r3, [r3, #2]
 800b726:	2b01      	cmp	r3, #1
 800b728:	d106      	bne.n	800b738 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	2201      	movs	r2, #1
 800b72e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b732:	6878      	ldr	r0, [r7, #4]
 800b734:	f000 f92b 	bl	800b98e <USBD_CtlSendStatus>
  }
}
 800b738:	bf00      	nop
 800b73a:	3708      	adds	r7, #8
 800b73c:	46bd      	mov	sp, r7
 800b73e:	bd80      	pop	{r7, pc}

0800b740 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b740:	b580      	push	{r7, lr}
 800b742:	b082      	sub	sp, #8
 800b744:	af00      	add	r7, sp, #0
 800b746:	6078      	str	r0, [r7, #4]
 800b748:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b750:	b2db      	uxtb	r3, r3
 800b752:	3b01      	subs	r3, #1
 800b754:	2b02      	cmp	r3, #2
 800b756:	d80b      	bhi.n	800b770 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b758:	683b      	ldr	r3, [r7, #0]
 800b75a:	885b      	ldrh	r3, [r3, #2]
 800b75c:	2b01      	cmp	r3, #1
 800b75e:	d10c      	bne.n	800b77a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	2200      	movs	r2, #0
 800b764:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b768:	6878      	ldr	r0, [r7, #4]
 800b76a:	f000 f910 	bl	800b98e <USBD_CtlSendStatus>
      }
      break;
 800b76e:	e004      	b.n	800b77a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b770:	6839      	ldr	r1, [r7, #0]
 800b772:	6878      	ldr	r0, [r7, #4]
 800b774:	f000 f840 	bl	800b7f8 <USBD_CtlError>
      break;
 800b778:	e000      	b.n	800b77c <USBD_ClrFeature+0x3c>
      break;
 800b77a:	bf00      	nop
  }
}
 800b77c:	bf00      	nop
 800b77e:	3708      	adds	r7, #8
 800b780:	46bd      	mov	sp, r7
 800b782:	bd80      	pop	{r7, pc}

0800b784 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b784:	b580      	push	{r7, lr}
 800b786:	b084      	sub	sp, #16
 800b788:	af00      	add	r7, sp, #0
 800b78a:	6078      	str	r0, [r7, #4]
 800b78c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b78e:	683b      	ldr	r3, [r7, #0]
 800b790:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	781a      	ldrb	r2, [r3, #0]
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	3301      	adds	r3, #1
 800b79e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	781a      	ldrb	r2, [r3, #0]
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	3301      	adds	r3, #1
 800b7ac:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b7ae:	68f8      	ldr	r0, [r7, #12]
 800b7b0:	f7ff fa92 	bl	800acd8 <SWAPBYTE>
 800b7b4:	4603      	mov	r3, r0
 800b7b6:	461a      	mov	r2, r3
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	3301      	adds	r3, #1
 800b7c0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	3301      	adds	r3, #1
 800b7c6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b7c8:	68f8      	ldr	r0, [r7, #12]
 800b7ca:	f7ff fa85 	bl	800acd8 <SWAPBYTE>
 800b7ce:	4603      	mov	r3, r0
 800b7d0:	461a      	mov	r2, r3
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	3301      	adds	r3, #1
 800b7da:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	3301      	adds	r3, #1
 800b7e0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b7e2:	68f8      	ldr	r0, [r7, #12]
 800b7e4:	f7ff fa78 	bl	800acd8 <SWAPBYTE>
 800b7e8:	4603      	mov	r3, r0
 800b7ea:	461a      	mov	r2, r3
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	80da      	strh	r2, [r3, #6]
}
 800b7f0:	bf00      	nop
 800b7f2:	3710      	adds	r7, #16
 800b7f4:	46bd      	mov	sp, r7
 800b7f6:	bd80      	pop	{r7, pc}

0800b7f8 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b7f8:	b580      	push	{r7, lr}
 800b7fa:	b082      	sub	sp, #8
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	6078      	str	r0, [r7, #4]
 800b800:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b802:	2180      	movs	r1, #128	@ 0x80
 800b804:	6878      	ldr	r0, [r7, #4]
 800b806:	f003 ff6b 	bl	800f6e0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b80a:	2100      	movs	r1, #0
 800b80c:	6878      	ldr	r0, [r7, #4]
 800b80e:	f003 ff67 	bl	800f6e0 <USBD_LL_StallEP>
}
 800b812:	bf00      	nop
 800b814:	3708      	adds	r7, #8
 800b816:	46bd      	mov	sp, r7
 800b818:	bd80      	pop	{r7, pc}

0800b81a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b81a:	b580      	push	{r7, lr}
 800b81c:	b086      	sub	sp, #24
 800b81e:	af00      	add	r7, sp, #0
 800b820:	60f8      	str	r0, [r7, #12]
 800b822:	60b9      	str	r1, [r7, #8]
 800b824:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b826:	2300      	movs	r3, #0
 800b828:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d036      	beq.n	800b89e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b834:	6938      	ldr	r0, [r7, #16]
 800b836:	f000 f836 	bl	800b8a6 <USBD_GetLen>
 800b83a:	4603      	mov	r3, r0
 800b83c:	3301      	adds	r3, #1
 800b83e:	b29b      	uxth	r3, r3
 800b840:	005b      	lsls	r3, r3, #1
 800b842:	b29a      	uxth	r2, r3
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b848:	7dfb      	ldrb	r3, [r7, #23]
 800b84a:	68ba      	ldr	r2, [r7, #8]
 800b84c:	4413      	add	r3, r2
 800b84e:	687a      	ldr	r2, [r7, #4]
 800b850:	7812      	ldrb	r2, [r2, #0]
 800b852:	701a      	strb	r2, [r3, #0]
  idx++;
 800b854:	7dfb      	ldrb	r3, [r7, #23]
 800b856:	3301      	adds	r3, #1
 800b858:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b85a:	7dfb      	ldrb	r3, [r7, #23]
 800b85c:	68ba      	ldr	r2, [r7, #8]
 800b85e:	4413      	add	r3, r2
 800b860:	2203      	movs	r2, #3
 800b862:	701a      	strb	r2, [r3, #0]
  idx++;
 800b864:	7dfb      	ldrb	r3, [r7, #23]
 800b866:	3301      	adds	r3, #1
 800b868:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b86a:	e013      	b.n	800b894 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b86c:	7dfb      	ldrb	r3, [r7, #23]
 800b86e:	68ba      	ldr	r2, [r7, #8]
 800b870:	4413      	add	r3, r2
 800b872:	693a      	ldr	r2, [r7, #16]
 800b874:	7812      	ldrb	r2, [r2, #0]
 800b876:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b878:	693b      	ldr	r3, [r7, #16]
 800b87a:	3301      	adds	r3, #1
 800b87c:	613b      	str	r3, [r7, #16]
    idx++;
 800b87e:	7dfb      	ldrb	r3, [r7, #23]
 800b880:	3301      	adds	r3, #1
 800b882:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b884:	7dfb      	ldrb	r3, [r7, #23]
 800b886:	68ba      	ldr	r2, [r7, #8]
 800b888:	4413      	add	r3, r2
 800b88a:	2200      	movs	r2, #0
 800b88c:	701a      	strb	r2, [r3, #0]
    idx++;
 800b88e:	7dfb      	ldrb	r3, [r7, #23]
 800b890:	3301      	adds	r3, #1
 800b892:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b894:	693b      	ldr	r3, [r7, #16]
 800b896:	781b      	ldrb	r3, [r3, #0]
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d1e7      	bne.n	800b86c <USBD_GetString+0x52>
 800b89c:	e000      	b.n	800b8a0 <USBD_GetString+0x86>
    return;
 800b89e:	bf00      	nop
  }
}
 800b8a0:	3718      	adds	r7, #24
 800b8a2:	46bd      	mov	sp, r7
 800b8a4:	bd80      	pop	{r7, pc}

0800b8a6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b8a6:	b480      	push	{r7}
 800b8a8:	b085      	sub	sp, #20
 800b8aa:	af00      	add	r7, sp, #0
 800b8ac:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b8b6:	e005      	b.n	800b8c4 <USBD_GetLen+0x1e>
  {
    len++;
 800b8b8:	7bfb      	ldrb	r3, [r7, #15]
 800b8ba:	3301      	adds	r3, #1
 800b8bc:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b8be:	68bb      	ldr	r3, [r7, #8]
 800b8c0:	3301      	adds	r3, #1
 800b8c2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b8c4:	68bb      	ldr	r3, [r7, #8]
 800b8c6:	781b      	ldrb	r3, [r3, #0]
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d1f5      	bne.n	800b8b8 <USBD_GetLen+0x12>
  }

  return len;
 800b8cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	3714      	adds	r7, #20
 800b8d2:	46bd      	mov	sp, r7
 800b8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d8:	4770      	bx	lr

0800b8da <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b8da:	b580      	push	{r7, lr}
 800b8dc:	b084      	sub	sp, #16
 800b8de:	af00      	add	r7, sp, #0
 800b8e0:	60f8      	str	r0, [r7, #12]
 800b8e2:	60b9      	str	r1, [r7, #8]
 800b8e4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	2202      	movs	r2, #2
 800b8ea:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	687a      	ldr	r2, [r7, #4]
 800b8f2:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	687a      	ldr	r2, [r7, #4]
 800b8f8:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	68ba      	ldr	r2, [r7, #8]
 800b8fe:	2100      	movs	r1, #0
 800b900:	68f8      	ldr	r0, [r7, #12]
 800b902:	f003 ff76 	bl	800f7f2 <USBD_LL_Transmit>

  return USBD_OK;
 800b906:	2300      	movs	r3, #0
}
 800b908:	4618      	mov	r0, r3
 800b90a:	3710      	adds	r7, #16
 800b90c:	46bd      	mov	sp, r7
 800b90e:	bd80      	pop	{r7, pc}

0800b910 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b910:	b580      	push	{r7, lr}
 800b912:	b084      	sub	sp, #16
 800b914:	af00      	add	r7, sp, #0
 800b916:	60f8      	str	r0, [r7, #12]
 800b918:	60b9      	str	r1, [r7, #8]
 800b91a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	68ba      	ldr	r2, [r7, #8]
 800b920:	2100      	movs	r1, #0
 800b922:	68f8      	ldr	r0, [r7, #12]
 800b924:	f003 ff65 	bl	800f7f2 <USBD_LL_Transmit>

  return USBD_OK;
 800b928:	2300      	movs	r3, #0
}
 800b92a:	4618      	mov	r0, r3
 800b92c:	3710      	adds	r7, #16
 800b92e:	46bd      	mov	sp, r7
 800b930:	bd80      	pop	{r7, pc}

0800b932 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b932:	b580      	push	{r7, lr}
 800b934:	b084      	sub	sp, #16
 800b936:	af00      	add	r7, sp, #0
 800b938:	60f8      	str	r0, [r7, #12]
 800b93a:	60b9      	str	r1, [r7, #8]
 800b93c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	2203      	movs	r2, #3
 800b942:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	687a      	ldr	r2, [r7, #4]
 800b94a:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	687a      	ldr	r2, [r7, #4]
 800b952:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	68ba      	ldr	r2, [r7, #8]
 800b95a:	2100      	movs	r1, #0
 800b95c:	68f8      	ldr	r0, [r7, #12]
 800b95e:	f003 ff69 	bl	800f834 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b962:	2300      	movs	r3, #0
}
 800b964:	4618      	mov	r0, r3
 800b966:	3710      	adds	r7, #16
 800b968:	46bd      	mov	sp, r7
 800b96a:	bd80      	pop	{r7, pc}

0800b96c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b96c:	b580      	push	{r7, lr}
 800b96e:	b084      	sub	sp, #16
 800b970:	af00      	add	r7, sp, #0
 800b972:	60f8      	str	r0, [r7, #12]
 800b974:	60b9      	str	r1, [r7, #8]
 800b976:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	68ba      	ldr	r2, [r7, #8]
 800b97c:	2100      	movs	r1, #0
 800b97e:	68f8      	ldr	r0, [r7, #12]
 800b980:	f003 ff58 	bl	800f834 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b984:	2300      	movs	r3, #0
}
 800b986:	4618      	mov	r0, r3
 800b988:	3710      	adds	r7, #16
 800b98a:	46bd      	mov	sp, r7
 800b98c:	bd80      	pop	{r7, pc}

0800b98e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b98e:	b580      	push	{r7, lr}
 800b990:	b082      	sub	sp, #8
 800b992:	af00      	add	r7, sp, #0
 800b994:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	2204      	movs	r2, #4
 800b99a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b99e:	2300      	movs	r3, #0
 800b9a0:	2200      	movs	r2, #0
 800b9a2:	2100      	movs	r1, #0
 800b9a4:	6878      	ldr	r0, [r7, #4]
 800b9a6:	f003 ff24 	bl	800f7f2 <USBD_LL_Transmit>

  return USBD_OK;
 800b9aa:	2300      	movs	r3, #0
}
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	3708      	adds	r7, #8
 800b9b0:	46bd      	mov	sp, r7
 800b9b2:	bd80      	pop	{r7, pc}

0800b9b4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b9b4:	b580      	push	{r7, lr}
 800b9b6:	b082      	sub	sp, #8
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	2205      	movs	r2, #5
 800b9c0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b9c4:	2300      	movs	r3, #0
 800b9c6:	2200      	movs	r2, #0
 800b9c8:	2100      	movs	r1, #0
 800b9ca:	6878      	ldr	r0, [r7, #4]
 800b9cc:	f003 ff32 	bl	800f834 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b9d0:	2300      	movs	r3, #0
}
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	3708      	adds	r7, #8
 800b9d6:	46bd      	mov	sp, r7
 800b9d8:	bd80      	pop	{r7, pc}
	...

0800b9dc <__NVIC_SetPriority>:
{
 800b9dc:	b480      	push	{r7}
 800b9de:	b083      	sub	sp, #12
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	4603      	mov	r3, r0
 800b9e4:	6039      	str	r1, [r7, #0]
 800b9e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b9e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	db0a      	blt.n	800ba06 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b9f0:	683b      	ldr	r3, [r7, #0]
 800b9f2:	b2da      	uxtb	r2, r3
 800b9f4:	490c      	ldr	r1, [pc, #48]	@ (800ba28 <__NVIC_SetPriority+0x4c>)
 800b9f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b9fa:	0112      	lsls	r2, r2, #4
 800b9fc:	b2d2      	uxtb	r2, r2
 800b9fe:	440b      	add	r3, r1
 800ba00:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800ba04:	e00a      	b.n	800ba1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ba06:	683b      	ldr	r3, [r7, #0]
 800ba08:	b2da      	uxtb	r2, r3
 800ba0a:	4908      	ldr	r1, [pc, #32]	@ (800ba2c <__NVIC_SetPriority+0x50>)
 800ba0c:	79fb      	ldrb	r3, [r7, #7]
 800ba0e:	f003 030f 	and.w	r3, r3, #15
 800ba12:	3b04      	subs	r3, #4
 800ba14:	0112      	lsls	r2, r2, #4
 800ba16:	b2d2      	uxtb	r2, r2
 800ba18:	440b      	add	r3, r1
 800ba1a:	761a      	strb	r2, [r3, #24]
}
 800ba1c:	bf00      	nop
 800ba1e:	370c      	adds	r7, #12
 800ba20:	46bd      	mov	sp, r7
 800ba22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba26:	4770      	bx	lr
 800ba28:	e000e100 	.word	0xe000e100
 800ba2c:	e000ed00 	.word	0xe000ed00

0800ba30 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800ba30:	b580      	push	{r7, lr}
 800ba32:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800ba34:	4b05      	ldr	r3, [pc, #20]	@ (800ba4c <SysTick_Handler+0x1c>)
 800ba36:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800ba38:	f002 f92c 	bl	800dc94 <xTaskGetSchedulerState>
 800ba3c:	4603      	mov	r3, r0
 800ba3e:	2b01      	cmp	r3, #1
 800ba40:	d001      	beq.n	800ba46 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800ba42:	f003 f821 	bl	800ea88 <xPortSysTickHandler>
  }
}
 800ba46:	bf00      	nop
 800ba48:	bd80      	pop	{r7, pc}
 800ba4a:	bf00      	nop
 800ba4c:	e000e010 	.word	0xe000e010

0800ba50 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800ba50:	b580      	push	{r7, lr}
 800ba52:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800ba54:	2100      	movs	r1, #0
 800ba56:	f06f 0004 	mvn.w	r0, #4
 800ba5a:	f7ff ffbf 	bl	800b9dc <__NVIC_SetPriority>
#endif
}
 800ba5e:	bf00      	nop
 800ba60:	bd80      	pop	{r7, pc}
	...

0800ba64 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800ba64:	b480      	push	{r7}
 800ba66:	b083      	sub	sp, #12
 800ba68:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ba6a:	f3ef 8305 	mrs	r3, IPSR
 800ba6e:	603b      	str	r3, [r7, #0]
  return(result);
 800ba70:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d003      	beq.n	800ba7e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800ba76:	f06f 0305 	mvn.w	r3, #5
 800ba7a:	607b      	str	r3, [r7, #4]
 800ba7c:	e00c      	b.n	800ba98 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800ba7e:	4b0a      	ldr	r3, [pc, #40]	@ (800baa8 <osKernelInitialize+0x44>)
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d105      	bne.n	800ba92 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800ba86:	4b08      	ldr	r3, [pc, #32]	@ (800baa8 <osKernelInitialize+0x44>)
 800ba88:	2201      	movs	r2, #1
 800ba8a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800ba8c:	2300      	movs	r3, #0
 800ba8e:	607b      	str	r3, [r7, #4]
 800ba90:	e002      	b.n	800ba98 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800ba92:	f04f 33ff 	mov.w	r3, #4294967295
 800ba96:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ba98:	687b      	ldr	r3, [r7, #4]
}
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	370c      	adds	r7, #12
 800ba9e:	46bd      	mov	sp, r7
 800baa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa4:	4770      	bx	lr
 800baa6:	bf00      	nop
 800baa8:	200048c4 	.word	0x200048c4

0800baac <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800baac:	b580      	push	{r7, lr}
 800baae:	b082      	sub	sp, #8
 800bab0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bab2:	f3ef 8305 	mrs	r3, IPSR
 800bab6:	603b      	str	r3, [r7, #0]
  return(result);
 800bab8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800baba:	2b00      	cmp	r3, #0
 800babc:	d003      	beq.n	800bac6 <osKernelStart+0x1a>
    stat = osErrorISR;
 800babe:	f06f 0305 	mvn.w	r3, #5
 800bac2:	607b      	str	r3, [r7, #4]
 800bac4:	e010      	b.n	800bae8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800bac6:	4b0b      	ldr	r3, [pc, #44]	@ (800baf4 <osKernelStart+0x48>)
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	2b01      	cmp	r3, #1
 800bacc:	d109      	bne.n	800bae2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800bace:	f7ff ffbf 	bl	800ba50 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800bad2:	4b08      	ldr	r3, [pc, #32]	@ (800baf4 <osKernelStart+0x48>)
 800bad4:	2202      	movs	r2, #2
 800bad6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800bad8:	f001 fc68 	bl	800d3ac <vTaskStartScheduler>
      stat = osOK;
 800badc:	2300      	movs	r3, #0
 800bade:	607b      	str	r3, [r7, #4]
 800bae0:	e002      	b.n	800bae8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800bae2:	f04f 33ff 	mov.w	r3, #4294967295
 800bae6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800bae8:	687b      	ldr	r3, [r7, #4]
}
 800baea:	4618      	mov	r0, r3
 800baec:	3708      	adds	r7, #8
 800baee:	46bd      	mov	sp, r7
 800baf0:	bd80      	pop	{r7, pc}
 800baf2:	bf00      	nop
 800baf4:	200048c4 	.word	0x200048c4

0800baf8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800baf8:	b580      	push	{r7, lr}
 800bafa:	b08e      	sub	sp, #56	@ 0x38
 800bafc:	af04      	add	r7, sp, #16
 800bafe:	60f8      	str	r0, [r7, #12]
 800bb00:	60b9      	str	r1, [r7, #8]
 800bb02:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800bb04:	2300      	movs	r3, #0
 800bb06:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bb08:	f3ef 8305 	mrs	r3, IPSR
 800bb0c:	617b      	str	r3, [r7, #20]
  return(result);
 800bb0e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d17e      	bne.n	800bc12 <osThreadNew+0x11a>
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d07b      	beq.n	800bc12 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800bb1a:	2380      	movs	r3, #128	@ 0x80
 800bb1c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800bb1e:	2318      	movs	r3, #24
 800bb20:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800bb22:	2300      	movs	r3, #0
 800bb24:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800bb26:	f04f 33ff 	mov.w	r3, #4294967295
 800bb2a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d045      	beq.n	800bbbe <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d002      	beq.n	800bb40 <osThreadNew+0x48>
        name = attr->name;
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	699b      	ldr	r3, [r3, #24]
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d002      	beq.n	800bb4e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	699b      	ldr	r3, [r3, #24]
 800bb4c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800bb4e:	69fb      	ldr	r3, [r7, #28]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d008      	beq.n	800bb66 <osThreadNew+0x6e>
 800bb54:	69fb      	ldr	r3, [r7, #28]
 800bb56:	2b38      	cmp	r3, #56	@ 0x38
 800bb58:	d805      	bhi.n	800bb66 <osThreadNew+0x6e>
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	685b      	ldr	r3, [r3, #4]
 800bb5e:	f003 0301 	and.w	r3, r3, #1
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d001      	beq.n	800bb6a <osThreadNew+0x72>
        return (NULL);
 800bb66:	2300      	movs	r3, #0
 800bb68:	e054      	b.n	800bc14 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	695b      	ldr	r3, [r3, #20]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d003      	beq.n	800bb7a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	695b      	ldr	r3, [r3, #20]
 800bb76:	089b      	lsrs	r3, r3, #2
 800bb78:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	689b      	ldr	r3, [r3, #8]
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d00e      	beq.n	800bba0 <osThreadNew+0xa8>
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	68db      	ldr	r3, [r3, #12]
 800bb86:	2ba7      	cmp	r3, #167	@ 0xa7
 800bb88:	d90a      	bls.n	800bba0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d006      	beq.n	800bba0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	695b      	ldr	r3, [r3, #20]
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d002      	beq.n	800bba0 <osThreadNew+0xa8>
        mem = 1;
 800bb9a:	2301      	movs	r3, #1
 800bb9c:	61bb      	str	r3, [r7, #24]
 800bb9e:	e010      	b.n	800bbc2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	689b      	ldr	r3, [r3, #8]
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d10c      	bne.n	800bbc2 <osThreadNew+0xca>
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	68db      	ldr	r3, [r3, #12]
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d108      	bne.n	800bbc2 <osThreadNew+0xca>
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	691b      	ldr	r3, [r3, #16]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d104      	bne.n	800bbc2 <osThreadNew+0xca>
          mem = 0;
 800bbb8:	2300      	movs	r3, #0
 800bbba:	61bb      	str	r3, [r7, #24]
 800bbbc:	e001      	b.n	800bbc2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800bbc2:	69bb      	ldr	r3, [r7, #24]
 800bbc4:	2b01      	cmp	r3, #1
 800bbc6:	d110      	bne.n	800bbea <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800bbcc:	687a      	ldr	r2, [r7, #4]
 800bbce:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800bbd0:	9202      	str	r2, [sp, #8]
 800bbd2:	9301      	str	r3, [sp, #4]
 800bbd4:	69fb      	ldr	r3, [r7, #28]
 800bbd6:	9300      	str	r3, [sp, #0]
 800bbd8:	68bb      	ldr	r3, [r7, #8]
 800bbda:	6a3a      	ldr	r2, [r7, #32]
 800bbdc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bbde:	68f8      	ldr	r0, [r7, #12]
 800bbe0:	f001 f970 	bl	800cec4 <xTaskCreateStatic>
 800bbe4:	4603      	mov	r3, r0
 800bbe6:	613b      	str	r3, [r7, #16]
 800bbe8:	e013      	b.n	800bc12 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800bbea:	69bb      	ldr	r3, [r7, #24]
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d110      	bne.n	800bc12 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800bbf0:	6a3b      	ldr	r3, [r7, #32]
 800bbf2:	b29a      	uxth	r2, r3
 800bbf4:	f107 0310 	add.w	r3, r7, #16
 800bbf8:	9301      	str	r3, [sp, #4]
 800bbfa:	69fb      	ldr	r3, [r7, #28]
 800bbfc:	9300      	str	r3, [sp, #0]
 800bbfe:	68bb      	ldr	r3, [r7, #8]
 800bc00:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bc02:	68f8      	ldr	r0, [r7, #12]
 800bc04:	f001 f9be 	bl	800cf84 <xTaskCreate>
 800bc08:	4603      	mov	r3, r0
 800bc0a:	2b01      	cmp	r3, #1
 800bc0c:	d001      	beq.n	800bc12 <osThreadNew+0x11a>
            hTask = NULL;
 800bc0e:	2300      	movs	r3, #0
 800bc10:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800bc12:	693b      	ldr	r3, [r7, #16]
}
 800bc14:	4618      	mov	r0, r3
 800bc16:	3728      	adds	r7, #40	@ 0x28
 800bc18:	46bd      	mov	sp, r7
 800bc1a:	bd80      	pop	{r7, pc}

0800bc1c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800bc1c:	b580      	push	{r7, lr}
 800bc1e:	b084      	sub	sp, #16
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bc24:	f3ef 8305 	mrs	r3, IPSR
 800bc28:	60bb      	str	r3, [r7, #8]
  return(result);
 800bc2a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d003      	beq.n	800bc38 <osDelay+0x1c>
    stat = osErrorISR;
 800bc30:	f06f 0305 	mvn.w	r3, #5
 800bc34:	60fb      	str	r3, [r7, #12]
 800bc36:	e007      	b.n	800bc48 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800bc38:	2300      	movs	r3, #0
 800bc3a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d002      	beq.n	800bc48 <osDelay+0x2c>
      vTaskDelay(ticks);
 800bc42:	6878      	ldr	r0, [r7, #4]
 800bc44:	f001 fb7c 	bl	800d340 <vTaskDelay>
    }
  }

  return (stat);
 800bc48:	68fb      	ldr	r3, [r7, #12]
}
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	3710      	adds	r7, #16
 800bc4e:	46bd      	mov	sp, r7
 800bc50:	bd80      	pop	{r7, pc}

0800bc52 <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 800bc52:	b580      	push	{r7, lr}
 800bc54:	b086      	sub	sp, #24
 800bc56:	af00      	add	r7, sp, #0
 800bc58:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bc5a:	f3ef 8305 	mrs	r3, IPSR
 800bc5e:	60fb      	str	r3, [r7, #12]
  return(result);
 800bc60:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d003      	beq.n	800bc6e <osDelayUntil+0x1c>
    stat = osErrorISR;
 800bc66:	f06f 0305 	mvn.w	r3, #5
 800bc6a:	617b      	str	r3, [r7, #20]
 800bc6c:	e019      	b.n	800bca2 <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 800bc6e:	2300      	movs	r3, #0
 800bc70:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 800bc72:	f001 fcb7 	bl	800d5e4 <xTaskGetTickCount>
 800bc76:	4603      	mov	r3, r0
 800bc78:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 800bc7a:	68bb      	ldr	r3, [r7, #8]
 800bc7c:	687a      	ldr	r2, [r7, #4]
 800bc7e:	1ad3      	subs	r3, r2, r3
 800bc80:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 800bc82:	693b      	ldr	r3, [r7, #16]
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d009      	beq.n	800bc9c <osDelayUntil+0x4a>
 800bc88:	693b      	ldr	r3, [r7, #16]
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	db06      	blt.n	800bc9c <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 800bc8e:	f107 0308 	add.w	r3, r7, #8
 800bc92:	6939      	ldr	r1, [r7, #16]
 800bc94:	4618      	mov	r0, r3
 800bc96:	f001 fad3 	bl	800d240 <vTaskDelayUntil>
 800bc9a:	e002      	b.n	800bca2 <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 800bc9c:	f06f 0303 	mvn.w	r3, #3
 800bca0:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800bca2:	697b      	ldr	r3, [r7, #20]
}
 800bca4:	4618      	mov	r0, r3
 800bca6:	3718      	adds	r7, #24
 800bca8:	46bd      	mov	sp, r7
 800bcaa:	bd80      	pop	{r7, pc}

0800bcac <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800bcac:	b580      	push	{r7, lr}
 800bcae:	b088      	sub	sp, #32
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800bcb4:	2300      	movs	r3, #0
 800bcb6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bcb8:	f3ef 8305 	mrs	r3, IPSR
 800bcbc:	60bb      	str	r3, [r7, #8]
  return(result);
 800bcbe:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d174      	bne.n	800bdae <osMutexNew+0x102>
    if (attr != NULL) {
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d003      	beq.n	800bcd2 <osMutexNew+0x26>
      type = attr->attr_bits;
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	685b      	ldr	r3, [r3, #4]
 800bcce:	61bb      	str	r3, [r7, #24]
 800bcd0:	e001      	b.n	800bcd6 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800bcd6:	69bb      	ldr	r3, [r7, #24]
 800bcd8:	f003 0301 	and.w	r3, r3, #1
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d002      	beq.n	800bce6 <osMutexNew+0x3a>
      rmtx = 1U;
 800bce0:	2301      	movs	r3, #1
 800bce2:	617b      	str	r3, [r7, #20]
 800bce4:	e001      	b.n	800bcea <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800bce6:	2300      	movs	r3, #0
 800bce8:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800bcea:	69bb      	ldr	r3, [r7, #24]
 800bcec:	f003 0308 	and.w	r3, r3, #8
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d15c      	bne.n	800bdae <osMutexNew+0x102>
      mem = -1;
 800bcf4:	f04f 33ff 	mov.w	r3, #4294967295
 800bcf8:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d015      	beq.n	800bd2c <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	689b      	ldr	r3, [r3, #8]
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d006      	beq.n	800bd16 <osMutexNew+0x6a>
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	68db      	ldr	r3, [r3, #12]
 800bd0c:	2b4f      	cmp	r3, #79	@ 0x4f
 800bd0e:	d902      	bls.n	800bd16 <osMutexNew+0x6a>
          mem = 1;
 800bd10:	2301      	movs	r3, #1
 800bd12:	613b      	str	r3, [r7, #16]
 800bd14:	e00c      	b.n	800bd30 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	689b      	ldr	r3, [r3, #8]
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d108      	bne.n	800bd30 <osMutexNew+0x84>
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	68db      	ldr	r3, [r3, #12]
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d104      	bne.n	800bd30 <osMutexNew+0x84>
            mem = 0;
 800bd26:	2300      	movs	r3, #0
 800bd28:	613b      	str	r3, [r7, #16]
 800bd2a:	e001      	b.n	800bd30 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800bd2c:	2300      	movs	r3, #0
 800bd2e:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800bd30:	693b      	ldr	r3, [r7, #16]
 800bd32:	2b01      	cmp	r3, #1
 800bd34:	d112      	bne.n	800bd5c <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800bd36:	697b      	ldr	r3, [r7, #20]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d007      	beq.n	800bd4c <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	689b      	ldr	r3, [r3, #8]
 800bd40:	4619      	mov	r1, r3
 800bd42:	2004      	movs	r0, #4
 800bd44:	f000 fb1f 	bl	800c386 <xQueueCreateMutexStatic>
 800bd48:	61f8      	str	r0, [r7, #28]
 800bd4a:	e016      	b.n	800bd7a <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	689b      	ldr	r3, [r3, #8]
 800bd50:	4619      	mov	r1, r3
 800bd52:	2001      	movs	r0, #1
 800bd54:	f000 fb17 	bl	800c386 <xQueueCreateMutexStatic>
 800bd58:	61f8      	str	r0, [r7, #28]
 800bd5a:	e00e      	b.n	800bd7a <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800bd5c:	693b      	ldr	r3, [r7, #16]
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d10b      	bne.n	800bd7a <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800bd62:	697b      	ldr	r3, [r7, #20]
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d004      	beq.n	800bd72 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800bd68:	2004      	movs	r0, #4
 800bd6a:	f000 faf4 	bl	800c356 <xQueueCreateMutex>
 800bd6e:	61f8      	str	r0, [r7, #28]
 800bd70:	e003      	b.n	800bd7a <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800bd72:	2001      	movs	r0, #1
 800bd74:	f000 faef 	bl	800c356 <xQueueCreateMutex>
 800bd78:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800bd7a:	69fb      	ldr	r3, [r7, #28]
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d00c      	beq.n	800bd9a <osMutexNew+0xee>
        if (attr != NULL) {
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d003      	beq.n	800bd8e <osMutexNew+0xe2>
          name = attr->name;
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	60fb      	str	r3, [r7, #12]
 800bd8c:	e001      	b.n	800bd92 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800bd8e:	2300      	movs	r3, #0
 800bd90:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800bd92:	68f9      	ldr	r1, [r7, #12]
 800bd94:	69f8      	ldr	r0, [r7, #28]
 800bd96:	f001 f837 	bl	800ce08 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800bd9a:	69fb      	ldr	r3, [r7, #28]
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d006      	beq.n	800bdae <osMutexNew+0x102>
 800bda0:	697b      	ldr	r3, [r7, #20]
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d003      	beq.n	800bdae <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800bda6:	69fb      	ldr	r3, [r7, #28]
 800bda8:	f043 0301 	orr.w	r3, r3, #1
 800bdac:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800bdae:	69fb      	ldr	r3, [r7, #28]
}
 800bdb0:	4618      	mov	r0, r3
 800bdb2:	3720      	adds	r7, #32
 800bdb4:	46bd      	mov	sp, r7
 800bdb6:	bd80      	pop	{r7, pc}

0800bdb8 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800bdb8:	b580      	push	{r7, lr}
 800bdba:	b086      	sub	sp, #24
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	6078      	str	r0, [r7, #4]
 800bdc0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	f023 0301 	bic.w	r3, r3, #1
 800bdc8:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	f003 0301 	and.w	r3, r3, #1
 800bdd0:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800bdd2:	2300      	movs	r3, #0
 800bdd4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bdd6:	f3ef 8305 	mrs	r3, IPSR
 800bdda:	60bb      	str	r3, [r7, #8]
  return(result);
 800bddc:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d003      	beq.n	800bdea <osMutexAcquire+0x32>
    stat = osErrorISR;
 800bde2:	f06f 0305 	mvn.w	r3, #5
 800bde6:	617b      	str	r3, [r7, #20]
 800bde8:	e02c      	b.n	800be44 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800bdea:	693b      	ldr	r3, [r7, #16]
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d103      	bne.n	800bdf8 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800bdf0:	f06f 0303 	mvn.w	r3, #3
 800bdf4:	617b      	str	r3, [r7, #20]
 800bdf6:	e025      	b.n	800be44 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d011      	beq.n	800be22 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800bdfe:	6839      	ldr	r1, [r7, #0]
 800be00:	6938      	ldr	r0, [r7, #16]
 800be02:	f000 fb10 	bl	800c426 <xQueueTakeMutexRecursive>
 800be06:	4603      	mov	r3, r0
 800be08:	2b01      	cmp	r3, #1
 800be0a:	d01b      	beq.n	800be44 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800be0c:	683b      	ldr	r3, [r7, #0]
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d003      	beq.n	800be1a <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800be12:	f06f 0301 	mvn.w	r3, #1
 800be16:	617b      	str	r3, [r7, #20]
 800be18:	e014      	b.n	800be44 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800be1a:	f06f 0302 	mvn.w	r3, #2
 800be1e:	617b      	str	r3, [r7, #20]
 800be20:	e010      	b.n	800be44 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800be22:	6839      	ldr	r1, [r7, #0]
 800be24:	6938      	ldr	r0, [r7, #16]
 800be26:	f000 fdb7 	bl	800c998 <xQueueSemaphoreTake>
 800be2a:	4603      	mov	r3, r0
 800be2c:	2b01      	cmp	r3, #1
 800be2e:	d009      	beq.n	800be44 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800be30:	683b      	ldr	r3, [r7, #0]
 800be32:	2b00      	cmp	r3, #0
 800be34:	d003      	beq.n	800be3e <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800be36:	f06f 0301 	mvn.w	r3, #1
 800be3a:	617b      	str	r3, [r7, #20]
 800be3c:	e002      	b.n	800be44 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800be3e:	f06f 0302 	mvn.w	r3, #2
 800be42:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800be44:	697b      	ldr	r3, [r7, #20]
}
 800be46:	4618      	mov	r0, r3
 800be48:	3718      	adds	r7, #24
 800be4a:	46bd      	mov	sp, r7
 800be4c:	bd80      	pop	{r7, pc}

0800be4e <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800be4e:	b580      	push	{r7, lr}
 800be50:	b086      	sub	sp, #24
 800be52:	af00      	add	r7, sp, #0
 800be54:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	f023 0301 	bic.w	r3, r3, #1
 800be5c:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	f003 0301 	and.w	r3, r3, #1
 800be64:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800be66:	2300      	movs	r3, #0
 800be68:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800be6a:	f3ef 8305 	mrs	r3, IPSR
 800be6e:	60bb      	str	r3, [r7, #8]
  return(result);
 800be70:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800be72:	2b00      	cmp	r3, #0
 800be74:	d003      	beq.n	800be7e <osMutexRelease+0x30>
    stat = osErrorISR;
 800be76:	f06f 0305 	mvn.w	r3, #5
 800be7a:	617b      	str	r3, [r7, #20]
 800be7c:	e01f      	b.n	800bebe <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800be7e:	693b      	ldr	r3, [r7, #16]
 800be80:	2b00      	cmp	r3, #0
 800be82:	d103      	bne.n	800be8c <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800be84:	f06f 0303 	mvn.w	r3, #3
 800be88:	617b      	str	r3, [r7, #20]
 800be8a:	e018      	b.n	800bebe <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d009      	beq.n	800bea6 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800be92:	6938      	ldr	r0, [r7, #16]
 800be94:	f000 fa92 	bl	800c3bc <xQueueGiveMutexRecursive>
 800be98:	4603      	mov	r3, r0
 800be9a:	2b01      	cmp	r3, #1
 800be9c:	d00f      	beq.n	800bebe <osMutexRelease+0x70>
        stat = osErrorResource;
 800be9e:	f06f 0302 	mvn.w	r3, #2
 800bea2:	617b      	str	r3, [r7, #20]
 800bea4:	e00b      	b.n	800bebe <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800bea6:	2300      	movs	r3, #0
 800bea8:	2200      	movs	r2, #0
 800beaa:	2100      	movs	r1, #0
 800beac:	6938      	ldr	r0, [r7, #16]
 800beae:	f000 faf1 	bl	800c494 <xQueueGenericSend>
 800beb2:	4603      	mov	r3, r0
 800beb4:	2b01      	cmp	r3, #1
 800beb6:	d002      	beq.n	800bebe <osMutexRelease+0x70>
        stat = osErrorResource;
 800beb8:	f06f 0302 	mvn.w	r3, #2
 800bebc:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800bebe:	697b      	ldr	r3, [r7, #20]
}
 800bec0:	4618      	mov	r0, r3
 800bec2:	3718      	adds	r7, #24
 800bec4:	46bd      	mov	sp, r7
 800bec6:	bd80      	pop	{r7, pc}

0800bec8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800bec8:	b480      	push	{r7}
 800beca:	b085      	sub	sp, #20
 800becc:	af00      	add	r7, sp, #0
 800bece:	60f8      	str	r0, [r7, #12]
 800bed0:	60b9      	str	r1, [r7, #8]
 800bed2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	4a07      	ldr	r2, [pc, #28]	@ (800bef4 <vApplicationGetIdleTaskMemory+0x2c>)
 800bed8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800beda:	68bb      	ldr	r3, [r7, #8]
 800bedc:	4a06      	ldr	r2, [pc, #24]	@ (800bef8 <vApplicationGetIdleTaskMemory+0x30>)
 800bede:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	2280      	movs	r2, #128	@ 0x80
 800bee4:	601a      	str	r2, [r3, #0]
}
 800bee6:	bf00      	nop
 800bee8:	3714      	adds	r7, #20
 800beea:	46bd      	mov	sp, r7
 800beec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef0:	4770      	bx	lr
 800bef2:	bf00      	nop
 800bef4:	200048c8 	.word	0x200048c8
 800bef8:	20004970 	.word	0x20004970

0800befc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800befc:	b480      	push	{r7}
 800befe:	b085      	sub	sp, #20
 800bf00:	af00      	add	r7, sp, #0
 800bf02:	60f8      	str	r0, [r7, #12]
 800bf04:	60b9      	str	r1, [r7, #8]
 800bf06:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	4a07      	ldr	r2, [pc, #28]	@ (800bf28 <vApplicationGetTimerTaskMemory+0x2c>)
 800bf0c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800bf0e:	68bb      	ldr	r3, [r7, #8]
 800bf10:	4a06      	ldr	r2, [pc, #24]	@ (800bf2c <vApplicationGetTimerTaskMemory+0x30>)
 800bf12:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800bf1a:	601a      	str	r2, [r3, #0]
}
 800bf1c:	bf00      	nop
 800bf1e:	3714      	adds	r7, #20
 800bf20:	46bd      	mov	sp, r7
 800bf22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf26:	4770      	bx	lr
 800bf28:	20004b70 	.word	0x20004b70
 800bf2c:	20004c18 	.word	0x20004c18

0800bf30 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800bf30:	b480      	push	{r7}
 800bf32:	b083      	sub	sp, #12
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	f103 0208 	add.w	r2, r3, #8
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	f04f 32ff 	mov.w	r2, #4294967295
 800bf48:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	f103 0208 	add.w	r2, r3, #8
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	f103 0208 	add.w	r2, r3, #8
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	2200      	movs	r2, #0
 800bf62:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800bf64:	bf00      	nop
 800bf66:	370c      	adds	r7, #12
 800bf68:	46bd      	mov	sp, r7
 800bf6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf6e:	4770      	bx	lr

0800bf70 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800bf70:	b480      	push	{r7}
 800bf72:	b083      	sub	sp, #12
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	2200      	movs	r2, #0
 800bf7c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800bf7e:	bf00      	nop
 800bf80:	370c      	adds	r7, #12
 800bf82:	46bd      	mov	sp, r7
 800bf84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf88:	4770      	bx	lr

0800bf8a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bf8a:	b480      	push	{r7}
 800bf8c:	b085      	sub	sp, #20
 800bf8e:	af00      	add	r7, sp, #0
 800bf90:	6078      	str	r0, [r7, #4]
 800bf92:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	685b      	ldr	r3, [r3, #4]
 800bf98:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800bf9a:	683b      	ldr	r3, [r7, #0]
 800bf9c:	68fa      	ldr	r2, [r7, #12]
 800bf9e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	689a      	ldr	r2, [r3, #8]
 800bfa4:	683b      	ldr	r3, [r7, #0]
 800bfa6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	689b      	ldr	r3, [r3, #8]
 800bfac:	683a      	ldr	r2, [r7, #0]
 800bfae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	683a      	ldr	r2, [r7, #0]
 800bfb4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800bfb6:	683b      	ldr	r3, [r7, #0]
 800bfb8:	687a      	ldr	r2, [r7, #4]
 800bfba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	1c5a      	adds	r2, r3, #1
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	601a      	str	r2, [r3, #0]
}
 800bfc6:	bf00      	nop
 800bfc8:	3714      	adds	r7, #20
 800bfca:	46bd      	mov	sp, r7
 800bfcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd0:	4770      	bx	lr

0800bfd2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bfd2:	b480      	push	{r7}
 800bfd4:	b085      	sub	sp, #20
 800bfd6:	af00      	add	r7, sp, #0
 800bfd8:	6078      	str	r0, [r7, #4]
 800bfda:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800bfdc:	683b      	ldr	r3, [r7, #0]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800bfe2:	68bb      	ldr	r3, [r7, #8]
 800bfe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfe8:	d103      	bne.n	800bff2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	691b      	ldr	r3, [r3, #16]
 800bfee:	60fb      	str	r3, [r7, #12]
 800bff0:	e00c      	b.n	800c00c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	3308      	adds	r3, #8
 800bff6:	60fb      	str	r3, [r7, #12]
 800bff8:	e002      	b.n	800c000 <vListInsert+0x2e>
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	685b      	ldr	r3, [r3, #4]
 800bffe:	60fb      	str	r3, [r7, #12]
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	685b      	ldr	r3, [r3, #4]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	68ba      	ldr	r2, [r7, #8]
 800c008:	429a      	cmp	r2, r3
 800c00a:	d2f6      	bcs.n	800bffa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	685a      	ldr	r2, [r3, #4]
 800c010:	683b      	ldr	r3, [r7, #0]
 800c012:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c014:	683b      	ldr	r3, [r7, #0]
 800c016:	685b      	ldr	r3, [r3, #4]
 800c018:	683a      	ldr	r2, [r7, #0]
 800c01a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c01c:	683b      	ldr	r3, [r7, #0]
 800c01e:	68fa      	ldr	r2, [r7, #12]
 800c020:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	683a      	ldr	r2, [r7, #0]
 800c026:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c028:	683b      	ldr	r3, [r7, #0]
 800c02a:	687a      	ldr	r2, [r7, #4]
 800c02c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	1c5a      	adds	r2, r3, #1
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	601a      	str	r2, [r3, #0]
}
 800c038:	bf00      	nop
 800c03a:	3714      	adds	r7, #20
 800c03c:	46bd      	mov	sp, r7
 800c03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c042:	4770      	bx	lr

0800c044 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c044:	b480      	push	{r7}
 800c046:	b085      	sub	sp, #20
 800c048:	af00      	add	r7, sp, #0
 800c04a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	691b      	ldr	r3, [r3, #16]
 800c050:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	685b      	ldr	r3, [r3, #4]
 800c056:	687a      	ldr	r2, [r7, #4]
 800c058:	6892      	ldr	r2, [r2, #8]
 800c05a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	689b      	ldr	r3, [r3, #8]
 800c060:	687a      	ldr	r2, [r7, #4]
 800c062:	6852      	ldr	r2, [r2, #4]
 800c064:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	685b      	ldr	r3, [r3, #4]
 800c06a:	687a      	ldr	r2, [r7, #4]
 800c06c:	429a      	cmp	r2, r3
 800c06e:	d103      	bne.n	800c078 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	689a      	ldr	r2, [r3, #8]
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	2200      	movs	r2, #0
 800c07c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	1e5a      	subs	r2, r3, #1
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	681b      	ldr	r3, [r3, #0]
}
 800c08c:	4618      	mov	r0, r3
 800c08e:	3714      	adds	r7, #20
 800c090:	46bd      	mov	sp, r7
 800c092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c096:	4770      	bx	lr

0800c098 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c098:	b580      	push	{r7, lr}
 800c09a:	b084      	sub	sp, #16
 800c09c:	af00      	add	r7, sp, #0
 800c09e:	6078      	str	r0, [r7, #4]
 800c0a0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d10b      	bne.n	800c0c4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c0ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0b0:	f383 8811 	msr	BASEPRI, r3
 800c0b4:	f3bf 8f6f 	isb	sy
 800c0b8:	f3bf 8f4f 	dsb	sy
 800c0bc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c0be:	bf00      	nop
 800c0c0:	bf00      	nop
 800c0c2:	e7fd      	b.n	800c0c0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c0c4:	f002 fc50 	bl	800e968 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	681a      	ldr	r2, [r3, #0]
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c0d0:	68f9      	ldr	r1, [r7, #12]
 800c0d2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c0d4:	fb01 f303 	mul.w	r3, r1, r3
 800c0d8:	441a      	add	r2, r3
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	2200      	movs	r2, #0
 800c0e2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	681a      	ldr	r2, [r3, #0]
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	681a      	ldr	r2, [r3, #0]
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c0f4:	3b01      	subs	r3, #1
 800c0f6:	68f9      	ldr	r1, [r7, #12]
 800c0f8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c0fa:	fb01 f303 	mul.w	r3, r1, r3
 800c0fe:	441a      	add	r2, r3
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	22ff      	movs	r2, #255	@ 0xff
 800c108:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	22ff      	movs	r2, #255	@ 0xff
 800c110:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800c114:	683b      	ldr	r3, [r7, #0]
 800c116:	2b00      	cmp	r3, #0
 800c118:	d114      	bne.n	800c144 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	691b      	ldr	r3, [r3, #16]
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d01a      	beq.n	800c158 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	3310      	adds	r3, #16
 800c126:	4618      	mov	r0, r3
 800c128:	f001 fbde 	bl	800d8e8 <xTaskRemoveFromEventList>
 800c12c:	4603      	mov	r3, r0
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d012      	beq.n	800c158 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c132:	4b0d      	ldr	r3, [pc, #52]	@ (800c168 <xQueueGenericReset+0xd0>)
 800c134:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c138:	601a      	str	r2, [r3, #0]
 800c13a:	f3bf 8f4f 	dsb	sy
 800c13e:	f3bf 8f6f 	isb	sy
 800c142:	e009      	b.n	800c158 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	3310      	adds	r3, #16
 800c148:	4618      	mov	r0, r3
 800c14a:	f7ff fef1 	bl	800bf30 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	3324      	adds	r3, #36	@ 0x24
 800c152:	4618      	mov	r0, r3
 800c154:	f7ff feec 	bl	800bf30 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c158:	f002 fc38 	bl	800e9cc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c15c:	2301      	movs	r3, #1
}
 800c15e:	4618      	mov	r0, r3
 800c160:	3710      	adds	r7, #16
 800c162:	46bd      	mov	sp, r7
 800c164:	bd80      	pop	{r7, pc}
 800c166:	bf00      	nop
 800c168:	e000ed04 	.word	0xe000ed04

0800c16c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c16c:	b580      	push	{r7, lr}
 800c16e:	b08e      	sub	sp, #56	@ 0x38
 800c170:	af02      	add	r7, sp, #8
 800c172:	60f8      	str	r0, [r7, #12]
 800c174:	60b9      	str	r1, [r7, #8]
 800c176:	607a      	str	r2, [r7, #4]
 800c178:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d10b      	bne.n	800c198 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800c180:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c184:	f383 8811 	msr	BASEPRI, r3
 800c188:	f3bf 8f6f 	isb	sy
 800c18c:	f3bf 8f4f 	dsb	sy
 800c190:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c192:	bf00      	nop
 800c194:	bf00      	nop
 800c196:	e7fd      	b.n	800c194 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c198:	683b      	ldr	r3, [r7, #0]
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d10b      	bne.n	800c1b6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800c19e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1a2:	f383 8811 	msr	BASEPRI, r3
 800c1a6:	f3bf 8f6f 	isb	sy
 800c1aa:	f3bf 8f4f 	dsb	sy
 800c1ae:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c1b0:	bf00      	nop
 800c1b2:	bf00      	nop
 800c1b4:	e7fd      	b.n	800c1b2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d002      	beq.n	800c1c2 <xQueueGenericCreateStatic+0x56>
 800c1bc:	68bb      	ldr	r3, [r7, #8]
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d001      	beq.n	800c1c6 <xQueueGenericCreateStatic+0x5a>
 800c1c2:	2301      	movs	r3, #1
 800c1c4:	e000      	b.n	800c1c8 <xQueueGenericCreateStatic+0x5c>
 800c1c6:	2300      	movs	r3, #0
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d10b      	bne.n	800c1e4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800c1cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1d0:	f383 8811 	msr	BASEPRI, r3
 800c1d4:	f3bf 8f6f 	isb	sy
 800c1d8:	f3bf 8f4f 	dsb	sy
 800c1dc:	623b      	str	r3, [r7, #32]
}
 800c1de:	bf00      	nop
 800c1e0:	bf00      	nop
 800c1e2:	e7fd      	b.n	800c1e0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d102      	bne.n	800c1f0 <xQueueGenericCreateStatic+0x84>
 800c1ea:	68bb      	ldr	r3, [r7, #8]
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d101      	bne.n	800c1f4 <xQueueGenericCreateStatic+0x88>
 800c1f0:	2301      	movs	r3, #1
 800c1f2:	e000      	b.n	800c1f6 <xQueueGenericCreateStatic+0x8a>
 800c1f4:	2300      	movs	r3, #0
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d10b      	bne.n	800c212 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800c1fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1fe:	f383 8811 	msr	BASEPRI, r3
 800c202:	f3bf 8f6f 	isb	sy
 800c206:	f3bf 8f4f 	dsb	sy
 800c20a:	61fb      	str	r3, [r7, #28]
}
 800c20c:	bf00      	nop
 800c20e:	bf00      	nop
 800c210:	e7fd      	b.n	800c20e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c212:	2350      	movs	r3, #80	@ 0x50
 800c214:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c216:	697b      	ldr	r3, [r7, #20]
 800c218:	2b50      	cmp	r3, #80	@ 0x50
 800c21a:	d00b      	beq.n	800c234 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800c21c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c220:	f383 8811 	msr	BASEPRI, r3
 800c224:	f3bf 8f6f 	isb	sy
 800c228:	f3bf 8f4f 	dsb	sy
 800c22c:	61bb      	str	r3, [r7, #24]
}
 800c22e:	bf00      	nop
 800c230:	bf00      	nop
 800c232:	e7fd      	b.n	800c230 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c234:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c236:	683b      	ldr	r3, [r7, #0]
 800c238:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800c23a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d00d      	beq.n	800c25c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c240:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c242:	2201      	movs	r2, #1
 800c244:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c248:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800c24c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c24e:	9300      	str	r3, [sp, #0]
 800c250:	4613      	mov	r3, r2
 800c252:	687a      	ldr	r2, [r7, #4]
 800c254:	68b9      	ldr	r1, [r7, #8]
 800c256:	68f8      	ldr	r0, [r7, #12]
 800c258:	f000 f840 	bl	800c2dc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c25c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800c25e:	4618      	mov	r0, r3
 800c260:	3730      	adds	r7, #48	@ 0x30
 800c262:	46bd      	mov	sp, r7
 800c264:	bd80      	pop	{r7, pc}

0800c266 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c266:	b580      	push	{r7, lr}
 800c268:	b08a      	sub	sp, #40	@ 0x28
 800c26a:	af02      	add	r7, sp, #8
 800c26c:	60f8      	str	r0, [r7, #12]
 800c26e:	60b9      	str	r1, [r7, #8]
 800c270:	4613      	mov	r3, r2
 800c272:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	2b00      	cmp	r3, #0
 800c278:	d10b      	bne.n	800c292 <xQueueGenericCreate+0x2c>
	__asm volatile
 800c27a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c27e:	f383 8811 	msr	BASEPRI, r3
 800c282:	f3bf 8f6f 	isb	sy
 800c286:	f3bf 8f4f 	dsb	sy
 800c28a:	613b      	str	r3, [r7, #16]
}
 800c28c:	bf00      	nop
 800c28e:	bf00      	nop
 800c290:	e7fd      	b.n	800c28e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	68ba      	ldr	r2, [r7, #8]
 800c296:	fb02 f303 	mul.w	r3, r2, r3
 800c29a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c29c:	69fb      	ldr	r3, [r7, #28]
 800c29e:	3350      	adds	r3, #80	@ 0x50
 800c2a0:	4618      	mov	r0, r3
 800c2a2:	f002 fc83 	bl	800ebac <pvPortMalloc>
 800c2a6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c2a8:	69bb      	ldr	r3, [r7, #24]
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d011      	beq.n	800c2d2 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c2ae:	69bb      	ldr	r3, [r7, #24]
 800c2b0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c2b2:	697b      	ldr	r3, [r7, #20]
 800c2b4:	3350      	adds	r3, #80	@ 0x50
 800c2b6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c2b8:	69bb      	ldr	r3, [r7, #24]
 800c2ba:	2200      	movs	r2, #0
 800c2bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c2c0:	79fa      	ldrb	r2, [r7, #7]
 800c2c2:	69bb      	ldr	r3, [r7, #24]
 800c2c4:	9300      	str	r3, [sp, #0]
 800c2c6:	4613      	mov	r3, r2
 800c2c8:	697a      	ldr	r2, [r7, #20]
 800c2ca:	68b9      	ldr	r1, [r7, #8]
 800c2cc:	68f8      	ldr	r0, [r7, #12]
 800c2ce:	f000 f805 	bl	800c2dc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c2d2:	69bb      	ldr	r3, [r7, #24]
	}
 800c2d4:	4618      	mov	r0, r3
 800c2d6:	3720      	adds	r7, #32
 800c2d8:	46bd      	mov	sp, r7
 800c2da:	bd80      	pop	{r7, pc}

0800c2dc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c2dc:	b580      	push	{r7, lr}
 800c2de:	b084      	sub	sp, #16
 800c2e0:	af00      	add	r7, sp, #0
 800c2e2:	60f8      	str	r0, [r7, #12]
 800c2e4:	60b9      	str	r1, [r7, #8]
 800c2e6:	607a      	str	r2, [r7, #4]
 800c2e8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c2ea:	68bb      	ldr	r3, [r7, #8]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d103      	bne.n	800c2f8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c2f0:	69bb      	ldr	r3, [r7, #24]
 800c2f2:	69ba      	ldr	r2, [r7, #24]
 800c2f4:	601a      	str	r2, [r3, #0]
 800c2f6:	e002      	b.n	800c2fe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c2f8:	69bb      	ldr	r3, [r7, #24]
 800c2fa:	687a      	ldr	r2, [r7, #4]
 800c2fc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c2fe:	69bb      	ldr	r3, [r7, #24]
 800c300:	68fa      	ldr	r2, [r7, #12]
 800c302:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c304:	69bb      	ldr	r3, [r7, #24]
 800c306:	68ba      	ldr	r2, [r7, #8]
 800c308:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c30a:	2101      	movs	r1, #1
 800c30c:	69b8      	ldr	r0, [r7, #24]
 800c30e:	f7ff fec3 	bl	800c098 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800c312:	69bb      	ldr	r3, [r7, #24]
 800c314:	78fa      	ldrb	r2, [r7, #3]
 800c316:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c31a:	bf00      	nop
 800c31c:	3710      	adds	r7, #16
 800c31e:	46bd      	mov	sp, r7
 800c320:	bd80      	pop	{r7, pc}

0800c322 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800c322:	b580      	push	{r7, lr}
 800c324:	b082      	sub	sp, #8
 800c326:	af00      	add	r7, sp, #0
 800c328:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d00e      	beq.n	800c34e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	2200      	movs	r2, #0
 800c334:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	2200      	movs	r2, #0
 800c33a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	2200      	movs	r2, #0
 800c340:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800c342:	2300      	movs	r3, #0
 800c344:	2200      	movs	r2, #0
 800c346:	2100      	movs	r1, #0
 800c348:	6878      	ldr	r0, [r7, #4]
 800c34a:	f000 f8a3 	bl	800c494 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800c34e:	bf00      	nop
 800c350:	3708      	adds	r7, #8
 800c352:	46bd      	mov	sp, r7
 800c354:	bd80      	pop	{r7, pc}

0800c356 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800c356:	b580      	push	{r7, lr}
 800c358:	b086      	sub	sp, #24
 800c35a:	af00      	add	r7, sp, #0
 800c35c:	4603      	mov	r3, r0
 800c35e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800c360:	2301      	movs	r3, #1
 800c362:	617b      	str	r3, [r7, #20]
 800c364:	2300      	movs	r3, #0
 800c366:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800c368:	79fb      	ldrb	r3, [r7, #7]
 800c36a:	461a      	mov	r2, r3
 800c36c:	6939      	ldr	r1, [r7, #16]
 800c36e:	6978      	ldr	r0, [r7, #20]
 800c370:	f7ff ff79 	bl	800c266 <xQueueGenericCreate>
 800c374:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800c376:	68f8      	ldr	r0, [r7, #12]
 800c378:	f7ff ffd3 	bl	800c322 <prvInitialiseMutex>

		return xNewQueue;
 800c37c:	68fb      	ldr	r3, [r7, #12]
	}
 800c37e:	4618      	mov	r0, r3
 800c380:	3718      	adds	r7, #24
 800c382:	46bd      	mov	sp, r7
 800c384:	bd80      	pop	{r7, pc}

0800c386 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800c386:	b580      	push	{r7, lr}
 800c388:	b088      	sub	sp, #32
 800c38a:	af02      	add	r7, sp, #8
 800c38c:	4603      	mov	r3, r0
 800c38e:	6039      	str	r1, [r7, #0]
 800c390:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800c392:	2301      	movs	r3, #1
 800c394:	617b      	str	r3, [r7, #20]
 800c396:	2300      	movs	r3, #0
 800c398:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800c39a:	79fb      	ldrb	r3, [r7, #7]
 800c39c:	9300      	str	r3, [sp, #0]
 800c39e:	683b      	ldr	r3, [r7, #0]
 800c3a0:	2200      	movs	r2, #0
 800c3a2:	6939      	ldr	r1, [r7, #16]
 800c3a4:	6978      	ldr	r0, [r7, #20]
 800c3a6:	f7ff fee1 	bl	800c16c <xQueueGenericCreateStatic>
 800c3aa:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800c3ac:	68f8      	ldr	r0, [r7, #12]
 800c3ae:	f7ff ffb8 	bl	800c322 <prvInitialiseMutex>

		return xNewQueue;
 800c3b2:	68fb      	ldr	r3, [r7, #12]
	}
 800c3b4:	4618      	mov	r0, r3
 800c3b6:	3718      	adds	r7, #24
 800c3b8:	46bd      	mov	sp, r7
 800c3ba:	bd80      	pop	{r7, pc}

0800c3bc <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800c3bc:	b590      	push	{r4, r7, lr}
 800c3be:	b087      	sub	sp, #28
 800c3c0:	af00      	add	r7, sp, #0
 800c3c2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800c3c8:	693b      	ldr	r3, [r7, #16]
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d10b      	bne.n	800c3e6 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 800c3ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3d2:	f383 8811 	msr	BASEPRI, r3
 800c3d6:	f3bf 8f6f 	isb	sy
 800c3da:	f3bf 8f4f 	dsb	sy
 800c3de:	60fb      	str	r3, [r7, #12]
}
 800c3e0:	bf00      	nop
 800c3e2:	bf00      	nop
 800c3e4:	e7fd      	b.n	800c3e2 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800c3e6:	693b      	ldr	r3, [r7, #16]
 800c3e8:	689c      	ldr	r4, [r3, #8]
 800c3ea:	f001 fc43 	bl	800dc74 <xTaskGetCurrentTaskHandle>
 800c3ee:	4603      	mov	r3, r0
 800c3f0:	429c      	cmp	r4, r3
 800c3f2:	d111      	bne.n	800c418 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800c3f4:	693b      	ldr	r3, [r7, #16]
 800c3f6:	68db      	ldr	r3, [r3, #12]
 800c3f8:	1e5a      	subs	r2, r3, #1
 800c3fa:	693b      	ldr	r3, [r7, #16]
 800c3fc:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800c3fe:	693b      	ldr	r3, [r7, #16]
 800c400:	68db      	ldr	r3, [r3, #12]
 800c402:	2b00      	cmp	r3, #0
 800c404:	d105      	bne.n	800c412 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800c406:	2300      	movs	r3, #0
 800c408:	2200      	movs	r2, #0
 800c40a:	2100      	movs	r1, #0
 800c40c:	6938      	ldr	r0, [r7, #16]
 800c40e:	f000 f841 	bl	800c494 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800c412:	2301      	movs	r3, #1
 800c414:	617b      	str	r3, [r7, #20]
 800c416:	e001      	b.n	800c41c <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800c418:	2300      	movs	r3, #0
 800c41a:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800c41c:	697b      	ldr	r3, [r7, #20]
	}
 800c41e:	4618      	mov	r0, r3
 800c420:	371c      	adds	r7, #28
 800c422:	46bd      	mov	sp, r7
 800c424:	bd90      	pop	{r4, r7, pc}

0800c426 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800c426:	b590      	push	{r4, r7, lr}
 800c428:	b087      	sub	sp, #28
 800c42a:	af00      	add	r7, sp, #0
 800c42c:	6078      	str	r0, [r7, #4]
 800c42e:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800c434:	693b      	ldr	r3, [r7, #16]
 800c436:	2b00      	cmp	r3, #0
 800c438:	d10b      	bne.n	800c452 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 800c43a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c43e:	f383 8811 	msr	BASEPRI, r3
 800c442:	f3bf 8f6f 	isb	sy
 800c446:	f3bf 8f4f 	dsb	sy
 800c44a:	60fb      	str	r3, [r7, #12]
}
 800c44c:	bf00      	nop
 800c44e:	bf00      	nop
 800c450:	e7fd      	b.n	800c44e <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800c452:	693b      	ldr	r3, [r7, #16]
 800c454:	689c      	ldr	r4, [r3, #8]
 800c456:	f001 fc0d 	bl	800dc74 <xTaskGetCurrentTaskHandle>
 800c45a:	4603      	mov	r3, r0
 800c45c:	429c      	cmp	r4, r3
 800c45e:	d107      	bne.n	800c470 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800c460:	693b      	ldr	r3, [r7, #16]
 800c462:	68db      	ldr	r3, [r3, #12]
 800c464:	1c5a      	adds	r2, r3, #1
 800c466:	693b      	ldr	r3, [r7, #16]
 800c468:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800c46a:	2301      	movs	r3, #1
 800c46c:	617b      	str	r3, [r7, #20]
 800c46e:	e00c      	b.n	800c48a <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800c470:	6839      	ldr	r1, [r7, #0]
 800c472:	6938      	ldr	r0, [r7, #16]
 800c474:	f000 fa90 	bl	800c998 <xQueueSemaphoreTake>
 800c478:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800c47a:	697b      	ldr	r3, [r7, #20]
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d004      	beq.n	800c48a <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800c480:	693b      	ldr	r3, [r7, #16]
 800c482:	68db      	ldr	r3, [r3, #12]
 800c484:	1c5a      	adds	r2, r3, #1
 800c486:	693b      	ldr	r3, [r7, #16]
 800c488:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800c48a:	697b      	ldr	r3, [r7, #20]
	}
 800c48c:	4618      	mov	r0, r3
 800c48e:	371c      	adds	r7, #28
 800c490:	46bd      	mov	sp, r7
 800c492:	bd90      	pop	{r4, r7, pc}

0800c494 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c494:	b580      	push	{r7, lr}
 800c496:	b08e      	sub	sp, #56	@ 0x38
 800c498:	af00      	add	r7, sp, #0
 800c49a:	60f8      	str	r0, [r7, #12]
 800c49c:	60b9      	str	r1, [r7, #8]
 800c49e:	607a      	str	r2, [r7, #4]
 800c4a0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c4a2:	2300      	movs	r3, #0
 800c4a4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800c4aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d10b      	bne.n	800c4c8 <xQueueGenericSend+0x34>
	__asm volatile
 800c4b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4b4:	f383 8811 	msr	BASEPRI, r3
 800c4b8:	f3bf 8f6f 	isb	sy
 800c4bc:	f3bf 8f4f 	dsb	sy
 800c4c0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c4c2:	bf00      	nop
 800c4c4:	bf00      	nop
 800c4c6:	e7fd      	b.n	800c4c4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c4c8:	68bb      	ldr	r3, [r7, #8]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d103      	bne.n	800c4d6 <xQueueGenericSend+0x42>
 800c4ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d101      	bne.n	800c4da <xQueueGenericSend+0x46>
 800c4d6:	2301      	movs	r3, #1
 800c4d8:	e000      	b.n	800c4dc <xQueueGenericSend+0x48>
 800c4da:	2300      	movs	r3, #0
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d10b      	bne.n	800c4f8 <xQueueGenericSend+0x64>
	__asm volatile
 800c4e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4e4:	f383 8811 	msr	BASEPRI, r3
 800c4e8:	f3bf 8f6f 	isb	sy
 800c4ec:	f3bf 8f4f 	dsb	sy
 800c4f0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c4f2:	bf00      	nop
 800c4f4:	bf00      	nop
 800c4f6:	e7fd      	b.n	800c4f4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c4f8:	683b      	ldr	r3, [r7, #0]
 800c4fa:	2b02      	cmp	r3, #2
 800c4fc:	d103      	bne.n	800c506 <xQueueGenericSend+0x72>
 800c4fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c500:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c502:	2b01      	cmp	r3, #1
 800c504:	d101      	bne.n	800c50a <xQueueGenericSend+0x76>
 800c506:	2301      	movs	r3, #1
 800c508:	e000      	b.n	800c50c <xQueueGenericSend+0x78>
 800c50a:	2300      	movs	r3, #0
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d10b      	bne.n	800c528 <xQueueGenericSend+0x94>
	__asm volatile
 800c510:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c514:	f383 8811 	msr	BASEPRI, r3
 800c518:	f3bf 8f6f 	isb	sy
 800c51c:	f3bf 8f4f 	dsb	sy
 800c520:	623b      	str	r3, [r7, #32]
}
 800c522:	bf00      	nop
 800c524:	bf00      	nop
 800c526:	e7fd      	b.n	800c524 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c528:	f001 fbb4 	bl	800dc94 <xTaskGetSchedulerState>
 800c52c:	4603      	mov	r3, r0
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d102      	bne.n	800c538 <xQueueGenericSend+0xa4>
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	2b00      	cmp	r3, #0
 800c536:	d101      	bne.n	800c53c <xQueueGenericSend+0xa8>
 800c538:	2301      	movs	r3, #1
 800c53a:	e000      	b.n	800c53e <xQueueGenericSend+0xaa>
 800c53c:	2300      	movs	r3, #0
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d10b      	bne.n	800c55a <xQueueGenericSend+0xc6>
	__asm volatile
 800c542:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c546:	f383 8811 	msr	BASEPRI, r3
 800c54a:	f3bf 8f6f 	isb	sy
 800c54e:	f3bf 8f4f 	dsb	sy
 800c552:	61fb      	str	r3, [r7, #28]
}
 800c554:	bf00      	nop
 800c556:	bf00      	nop
 800c558:	e7fd      	b.n	800c556 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c55a:	f002 fa05 	bl	800e968 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c55e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c560:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c564:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c566:	429a      	cmp	r2, r3
 800c568:	d302      	bcc.n	800c570 <xQueueGenericSend+0xdc>
 800c56a:	683b      	ldr	r3, [r7, #0]
 800c56c:	2b02      	cmp	r3, #2
 800c56e:	d129      	bne.n	800c5c4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c570:	683a      	ldr	r2, [r7, #0]
 800c572:	68b9      	ldr	r1, [r7, #8]
 800c574:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c576:	f000 fb37 	bl	800cbe8 <prvCopyDataToQueue>
 800c57a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c57c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c57e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c580:	2b00      	cmp	r3, #0
 800c582:	d010      	beq.n	800c5a6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c584:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c586:	3324      	adds	r3, #36	@ 0x24
 800c588:	4618      	mov	r0, r3
 800c58a:	f001 f9ad 	bl	800d8e8 <xTaskRemoveFromEventList>
 800c58e:	4603      	mov	r3, r0
 800c590:	2b00      	cmp	r3, #0
 800c592:	d013      	beq.n	800c5bc <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c594:	4b3f      	ldr	r3, [pc, #252]	@ (800c694 <xQueueGenericSend+0x200>)
 800c596:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c59a:	601a      	str	r2, [r3, #0]
 800c59c:	f3bf 8f4f 	dsb	sy
 800c5a0:	f3bf 8f6f 	isb	sy
 800c5a4:	e00a      	b.n	800c5bc <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c5a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d007      	beq.n	800c5bc <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c5ac:	4b39      	ldr	r3, [pc, #228]	@ (800c694 <xQueueGenericSend+0x200>)
 800c5ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c5b2:	601a      	str	r2, [r3, #0]
 800c5b4:	f3bf 8f4f 	dsb	sy
 800c5b8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c5bc:	f002 fa06 	bl	800e9cc <vPortExitCritical>
				return pdPASS;
 800c5c0:	2301      	movs	r3, #1
 800c5c2:	e063      	b.n	800c68c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d103      	bne.n	800c5d2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c5ca:	f002 f9ff 	bl	800e9cc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c5ce:	2300      	movs	r3, #0
 800c5d0:	e05c      	b.n	800c68c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c5d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d106      	bne.n	800c5e6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c5d8:	f107 0314 	add.w	r3, r7, #20
 800c5dc:	4618      	mov	r0, r3
 800c5de:	f001 f9e7 	bl	800d9b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c5e2:	2301      	movs	r3, #1
 800c5e4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c5e6:	f002 f9f1 	bl	800e9cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c5ea:	f000 ff4f 	bl	800d48c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c5ee:	f002 f9bb 	bl	800e968 <vPortEnterCritical>
 800c5f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5f4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c5f8:	b25b      	sxtb	r3, r3
 800c5fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5fe:	d103      	bne.n	800c608 <xQueueGenericSend+0x174>
 800c600:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c602:	2200      	movs	r2, #0
 800c604:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c608:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c60a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c60e:	b25b      	sxtb	r3, r3
 800c610:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c614:	d103      	bne.n	800c61e <xQueueGenericSend+0x18a>
 800c616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c618:	2200      	movs	r2, #0
 800c61a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c61e:	f002 f9d5 	bl	800e9cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c622:	1d3a      	adds	r2, r7, #4
 800c624:	f107 0314 	add.w	r3, r7, #20
 800c628:	4611      	mov	r1, r2
 800c62a:	4618      	mov	r0, r3
 800c62c:	f001 f9d6 	bl	800d9dc <xTaskCheckForTimeOut>
 800c630:	4603      	mov	r3, r0
 800c632:	2b00      	cmp	r3, #0
 800c634:	d124      	bne.n	800c680 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c636:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c638:	f000 fbce 	bl	800cdd8 <prvIsQueueFull>
 800c63c:	4603      	mov	r3, r0
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d018      	beq.n	800c674 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c644:	3310      	adds	r3, #16
 800c646:	687a      	ldr	r2, [r7, #4]
 800c648:	4611      	mov	r1, r2
 800c64a:	4618      	mov	r0, r3
 800c64c:	f001 f8fa 	bl	800d844 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c650:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c652:	f000 fb59 	bl	800cd08 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c656:	f000 ff27 	bl	800d4a8 <xTaskResumeAll>
 800c65a:	4603      	mov	r3, r0
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	f47f af7c 	bne.w	800c55a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800c662:	4b0c      	ldr	r3, [pc, #48]	@ (800c694 <xQueueGenericSend+0x200>)
 800c664:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c668:	601a      	str	r2, [r3, #0]
 800c66a:	f3bf 8f4f 	dsb	sy
 800c66e:	f3bf 8f6f 	isb	sy
 800c672:	e772      	b.n	800c55a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c674:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c676:	f000 fb47 	bl	800cd08 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c67a:	f000 ff15 	bl	800d4a8 <xTaskResumeAll>
 800c67e:	e76c      	b.n	800c55a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c680:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c682:	f000 fb41 	bl	800cd08 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c686:	f000 ff0f 	bl	800d4a8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c68a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c68c:	4618      	mov	r0, r3
 800c68e:	3738      	adds	r7, #56	@ 0x38
 800c690:	46bd      	mov	sp, r7
 800c692:	bd80      	pop	{r7, pc}
 800c694:	e000ed04 	.word	0xe000ed04

0800c698 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c698:	b580      	push	{r7, lr}
 800c69a:	b090      	sub	sp, #64	@ 0x40
 800c69c:	af00      	add	r7, sp, #0
 800c69e:	60f8      	str	r0, [r7, #12]
 800c6a0:	60b9      	str	r1, [r7, #8]
 800c6a2:	607a      	str	r2, [r7, #4]
 800c6a4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800c6aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d10b      	bne.n	800c6c8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800c6b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6b4:	f383 8811 	msr	BASEPRI, r3
 800c6b8:	f3bf 8f6f 	isb	sy
 800c6bc:	f3bf 8f4f 	dsb	sy
 800c6c0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c6c2:	bf00      	nop
 800c6c4:	bf00      	nop
 800c6c6:	e7fd      	b.n	800c6c4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c6c8:	68bb      	ldr	r3, [r7, #8]
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d103      	bne.n	800c6d6 <xQueueGenericSendFromISR+0x3e>
 800c6ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d101      	bne.n	800c6da <xQueueGenericSendFromISR+0x42>
 800c6d6:	2301      	movs	r3, #1
 800c6d8:	e000      	b.n	800c6dc <xQueueGenericSendFromISR+0x44>
 800c6da:	2300      	movs	r3, #0
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d10b      	bne.n	800c6f8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800c6e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6e4:	f383 8811 	msr	BASEPRI, r3
 800c6e8:	f3bf 8f6f 	isb	sy
 800c6ec:	f3bf 8f4f 	dsb	sy
 800c6f0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c6f2:	bf00      	nop
 800c6f4:	bf00      	nop
 800c6f6:	e7fd      	b.n	800c6f4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c6f8:	683b      	ldr	r3, [r7, #0]
 800c6fa:	2b02      	cmp	r3, #2
 800c6fc:	d103      	bne.n	800c706 <xQueueGenericSendFromISR+0x6e>
 800c6fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c700:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c702:	2b01      	cmp	r3, #1
 800c704:	d101      	bne.n	800c70a <xQueueGenericSendFromISR+0x72>
 800c706:	2301      	movs	r3, #1
 800c708:	e000      	b.n	800c70c <xQueueGenericSendFromISR+0x74>
 800c70a:	2300      	movs	r3, #0
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d10b      	bne.n	800c728 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800c710:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c714:	f383 8811 	msr	BASEPRI, r3
 800c718:	f3bf 8f6f 	isb	sy
 800c71c:	f3bf 8f4f 	dsb	sy
 800c720:	623b      	str	r3, [r7, #32]
}
 800c722:	bf00      	nop
 800c724:	bf00      	nop
 800c726:	e7fd      	b.n	800c724 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c728:	f002 f9fe 	bl	800eb28 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c72c:	f3ef 8211 	mrs	r2, BASEPRI
 800c730:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c734:	f383 8811 	msr	BASEPRI, r3
 800c738:	f3bf 8f6f 	isb	sy
 800c73c:	f3bf 8f4f 	dsb	sy
 800c740:	61fa      	str	r2, [r7, #28]
 800c742:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c744:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c746:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c74a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c74c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c74e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c750:	429a      	cmp	r2, r3
 800c752:	d302      	bcc.n	800c75a <xQueueGenericSendFromISR+0xc2>
 800c754:	683b      	ldr	r3, [r7, #0]
 800c756:	2b02      	cmp	r3, #2
 800c758:	d12f      	bne.n	800c7ba <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c75a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c75c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c760:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c764:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c766:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c768:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c76a:	683a      	ldr	r2, [r7, #0]
 800c76c:	68b9      	ldr	r1, [r7, #8]
 800c76e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c770:	f000 fa3a 	bl	800cbe8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c774:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800c778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c77c:	d112      	bne.n	800c7a4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c77e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c782:	2b00      	cmp	r3, #0
 800c784:	d016      	beq.n	800c7b4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c786:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c788:	3324      	adds	r3, #36	@ 0x24
 800c78a:	4618      	mov	r0, r3
 800c78c:	f001 f8ac 	bl	800d8e8 <xTaskRemoveFromEventList>
 800c790:	4603      	mov	r3, r0
 800c792:	2b00      	cmp	r3, #0
 800c794:	d00e      	beq.n	800c7b4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d00b      	beq.n	800c7b4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	2201      	movs	r2, #1
 800c7a0:	601a      	str	r2, [r3, #0]
 800c7a2:	e007      	b.n	800c7b4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c7a4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800c7a8:	3301      	adds	r3, #1
 800c7aa:	b2db      	uxtb	r3, r3
 800c7ac:	b25a      	sxtb	r2, r3
 800c7ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800c7b4:	2301      	movs	r3, #1
 800c7b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800c7b8:	e001      	b.n	800c7be <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c7ba:	2300      	movs	r3, #0
 800c7bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c7be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c7c0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c7c2:	697b      	ldr	r3, [r7, #20]
 800c7c4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c7c8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c7ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800c7cc:	4618      	mov	r0, r3
 800c7ce:	3740      	adds	r7, #64	@ 0x40
 800c7d0:	46bd      	mov	sp, r7
 800c7d2:	bd80      	pop	{r7, pc}

0800c7d4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c7d4:	b580      	push	{r7, lr}
 800c7d6:	b08c      	sub	sp, #48	@ 0x30
 800c7d8:	af00      	add	r7, sp, #0
 800c7da:	60f8      	str	r0, [r7, #12]
 800c7dc:	60b9      	str	r1, [r7, #8]
 800c7de:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c7e0:	2300      	movs	r3, #0
 800c7e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c7e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d10b      	bne.n	800c806 <xQueueReceive+0x32>
	__asm volatile
 800c7ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7f2:	f383 8811 	msr	BASEPRI, r3
 800c7f6:	f3bf 8f6f 	isb	sy
 800c7fa:	f3bf 8f4f 	dsb	sy
 800c7fe:	623b      	str	r3, [r7, #32]
}
 800c800:	bf00      	nop
 800c802:	bf00      	nop
 800c804:	e7fd      	b.n	800c802 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c806:	68bb      	ldr	r3, [r7, #8]
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d103      	bne.n	800c814 <xQueueReceive+0x40>
 800c80c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c80e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c810:	2b00      	cmp	r3, #0
 800c812:	d101      	bne.n	800c818 <xQueueReceive+0x44>
 800c814:	2301      	movs	r3, #1
 800c816:	e000      	b.n	800c81a <xQueueReceive+0x46>
 800c818:	2300      	movs	r3, #0
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d10b      	bne.n	800c836 <xQueueReceive+0x62>
	__asm volatile
 800c81e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c822:	f383 8811 	msr	BASEPRI, r3
 800c826:	f3bf 8f6f 	isb	sy
 800c82a:	f3bf 8f4f 	dsb	sy
 800c82e:	61fb      	str	r3, [r7, #28]
}
 800c830:	bf00      	nop
 800c832:	bf00      	nop
 800c834:	e7fd      	b.n	800c832 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c836:	f001 fa2d 	bl	800dc94 <xTaskGetSchedulerState>
 800c83a:	4603      	mov	r3, r0
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d102      	bne.n	800c846 <xQueueReceive+0x72>
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	2b00      	cmp	r3, #0
 800c844:	d101      	bne.n	800c84a <xQueueReceive+0x76>
 800c846:	2301      	movs	r3, #1
 800c848:	e000      	b.n	800c84c <xQueueReceive+0x78>
 800c84a:	2300      	movs	r3, #0
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d10b      	bne.n	800c868 <xQueueReceive+0x94>
	__asm volatile
 800c850:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c854:	f383 8811 	msr	BASEPRI, r3
 800c858:	f3bf 8f6f 	isb	sy
 800c85c:	f3bf 8f4f 	dsb	sy
 800c860:	61bb      	str	r3, [r7, #24]
}
 800c862:	bf00      	nop
 800c864:	bf00      	nop
 800c866:	e7fd      	b.n	800c864 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c868:	f002 f87e 	bl	800e968 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c86c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c86e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c870:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c874:	2b00      	cmp	r3, #0
 800c876:	d01f      	beq.n	800c8b8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c878:	68b9      	ldr	r1, [r7, #8]
 800c87a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c87c:	f000 fa1e 	bl	800ccbc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c882:	1e5a      	subs	r2, r3, #1
 800c884:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c886:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c888:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c88a:	691b      	ldr	r3, [r3, #16]
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d00f      	beq.n	800c8b0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c890:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c892:	3310      	adds	r3, #16
 800c894:	4618      	mov	r0, r3
 800c896:	f001 f827 	bl	800d8e8 <xTaskRemoveFromEventList>
 800c89a:	4603      	mov	r3, r0
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d007      	beq.n	800c8b0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c8a0:	4b3c      	ldr	r3, [pc, #240]	@ (800c994 <xQueueReceive+0x1c0>)
 800c8a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c8a6:	601a      	str	r2, [r3, #0]
 800c8a8:	f3bf 8f4f 	dsb	sy
 800c8ac:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c8b0:	f002 f88c 	bl	800e9cc <vPortExitCritical>
				return pdPASS;
 800c8b4:	2301      	movs	r3, #1
 800c8b6:	e069      	b.n	800c98c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d103      	bne.n	800c8c6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c8be:	f002 f885 	bl	800e9cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c8c2:	2300      	movs	r3, #0
 800c8c4:	e062      	b.n	800c98c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c8c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d106      	bne.n	800c8da <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c8cc:	f107 0310 	add.w	r3, r7, #16
 800c8d0:	4618      	mov	r0, r3
 800c8d2:	f001 f86d 	bl	800d9b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c8d6:	2301      	movs	r3, #1
 800c8d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c8da:	f002 f877 	bl	800e9cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c8de:	f000 fdd5 	bl	800d48c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c8e2:	f002 f841 	bl	800e968 <vPortEnterCritical>
 800c8e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8e8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c8ec:	b25b      	sxtb	r3, r3
 800c8ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8f2:	d103      	bne.n	800c8fc <xQueueReceive+0x128>
 800c8f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8f6:	2200      	movs	r2, #0
 800c8f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c8fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8fe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c902:	b25b      	sxtb	r3, r3
 800c904:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c908:	d103      	bne.n	800c912 <xQueueReceive+0x13e>
 800c90a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c90c:	2200      	movs	r2, #0
 800c90e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c912:	f002 f85b 	bl	800e9cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c916:	1d3a      	adds	r2, r7, #4
 800c918:	f107 0310 	add.w	r3, r7, #16
 800c91c:	4611      	mov	r1, r2
 800c91e:	4618      	mov	r0, r3
 800c920:	f001 f85c 	bl	800d9dc <xTaskCheckForTimeOut>
 800c924:	4603      	mov	r3, r0
 800c926:	2b00      	cmp	r3, #0
 800c928:	d123      	bne.n	800c972 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c92a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c92c:	f000 fa3e 	bl	800cdac <prvIsQueueEmpty>
 800c930:	4603      	mov	r3, r0
 800c932:	2b00      	cmp	r3, #0
 800c934:	d017      	beq.n	800c966 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c936:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c938:	3324      	adds	r3, #36	@ 0x24
 800c93a:	687a      	ldr	r2, [r7, #4]
 800c93c:	4611      	mov	r1, r2
 800c93e:	4618      	mov	r0, r3
 800c940:	f000 ff80 	bl	800d844 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c944:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c946:	f000 f9df 	bl	800cd08 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c94a:	f000 fdad 	bl	800d4a8 <xTaskResumeAll>
 800c94e:	4603      	mov	r3, r0
 800c950:	2b00      	cmp	r3, #0
 800c952:	d189      	bne.n	800c868 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800c954:	4b0f      	ldr	r3, [pc, #60]	@ (800c994 <xQueueReceive+0x1c0>)
 800c956:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c95a:	601a      	str	r2, [r3, #0]
 800c95c:	f3bf 8f4f 	dsb	sy
 800c960:	f3bf 8f6f 	isb	sy
 800c964:	e780      	b.n	800c868 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c966:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c968:	f000 f9ce 	bl	800cd08 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c96c:	f000 fd9c 	bl	800d4a8 <xTaskResumeAll>
 800c970:	e77a      	b.n	800c868 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c972:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c974:	f000 f9c8 	bl	800cd08 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c978:	f000 fd96 	bl	800d4a8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c97c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c97e:	f000 fa15 	bl	800cdac <prvIsQueueEmpty>
 800c982:	4603      	mov	r3, r0
 800c984:	2b00      	cmp	r3, #0
 800c986:	f43f af6f 	beq.w	800c868 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c98a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c98c:	4618      	mov	r0, r3
 800c98e:	3730      	adds	r7, #48	@ 0x30
 800c990:	46bd      	mov	sp, r7
 800c992:	bd80      	pop	{r7, pc}
 800c994:	e000ed04 	.word	0xe000ed04

0800c998 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800c998:	b580      	push	{r7, lr}
 800c99a:	b08e      	sub	sp, #56	@ 0x38
 800c99c:	af00      	add	r7, sp, #0
 800c99e:	6078      	str	r0, [r7, #4]
 800c9a0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800c9a2:	2300      	movs	r3, #0
 800c9a4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800c9aa:	2300      	movs	r3, #0
 800c9ac:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c9ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d10b      	bne.n	800c9cc <xQueueSemaphoreTake+0x34>
	__asm volatile
 800c9b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9b8:	f383 8811 	msr	BASEPRI, r3
 800c9bc:	f3bf 8f6f 	isb	sy
 800c9c0:	f3bf 8f4f 	dsb	sy
 800c9c4:	623b      	str	r3, [r7, #32]
}
 800c9c6:	bf00      	nop
 800c9c8:	bf00      	nop
 800c9ca:	e7fd      	b.n	800c9c8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c9cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d00b      	beq.n	800c9ec <xQueueSemaphoreTake+0x54>
	__asm volatile
 800c9d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9d8:	f383 8811 	msr	BASEPRI, r3
 800c9dc:	f3bf 8f6f 	isb	sy
 800c9e0:	f3bf 8f4f 	dsb	sy
 800c9e4:	61fb      	str	r3, [r7, #28]
}
 800c9e6:	bf00      	nop
 800c9e8:	bf00      	nop
 800c9ea:	e7fd      	b.n	800c9e8 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c9ec:	f001 f952 	bl	800dc94 <xTaskGetSchedulerState>
 800c9f0:	4603      	mov	r3, r0
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d102      	bne.n	800c9fc <xQueueSemaphoreTake+0x64>
 800c9f6:	683b      	ldr	r3, [r7, #0]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d101      	bne.n	800ca00 <xQueueSemaphoreTake+0x68>
 800c9fc:	2301      	movs	r3, #1
 800c9fe:	e000      	b.n	800ca02 <xQueueSemaphoreTake+0x6a>
 800ca00:	2300      	movs	r3, #0
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d10b      	bne.n	800ca1e <xQueueSemaphoreTake+0x86>
	__asm volatile
 800ca06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca0a:	f383 8811 	msr	BASEPRI, r3
 800ca0e:	f3bf 8f6f 	isb	sy
 800ca12:	f3bf 8f4f 	dsb	sy
 800ca16:	61bb      	str	r3, [r7, #24]
}
 800ca18:	bf00      	nop
 800ca1a:	bf00      	nop
 800ca1c:	e7fd      	b.n	800ca1a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ca1e:	f001 ffa3 	bl	800e968 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800ca22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca26:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800ca28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d024      	beq.n	800ca78 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800ca2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca30:	1e5a      	subs	r2, r3, #1
 800ca32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca34:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ca36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d104      	bne.n	800ca48 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800ca3e:	f001 faa3 	bl	800df88 <pvTaskIncrementMutexHeldCount>
 800ca42:	4602      	mov	r2, r0
 800ca44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca46:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ca48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca4a:	691b      	ldr	r3, [r3, #16]
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d00f      	beq.n	800ca70 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ca50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca52:	3310      	adds	r3, #16
 800ca54:	4618      	mov	r0, r3
 800ca56:	f000 ff47 	bl	800d8e8 <xTaskRemoveFromEventList>
 800ca5a:	4603      	mov	r3, r0
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d007      	beq.n	800ca70 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ca60:	4b54      	ldr	r3, [pc, #336]	@ (800cbb4 <xQueueSemaphoreTake+0x21c>)
 800ca62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ca66:	601a      	str	r2, [r3, #0]
 800ca68:	f3bf 8f4f 	dsb	sy
 800ca6c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ca70:	f001 ffac 	bl	800e9cc <vPortExitCritical>
				return pdPASS;
 800ca74:	2301      	movs	r3, #1
 800ca76:	e098      	b.n	800cbaa <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ca78:	683b      	ldr	r3, [r7, #0]
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d112      	bne.n	800caa4 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800ca7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d00b      	beq.n	800ca9c <xQueueSemaphoreTake+0x104>
	__asm volatile
 800ca84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca88:	f383 8811 	msr	BASEPRI, r3
 800ca8c:	f3bf 8f6f 	isb	sy
 800ca90:	f3bf 8f4f 	dsb	sy
 800ca94:	617b      	str	r3, [r7, #20]
}
 800ca96:	bf00      	nop
 800ca98:	bf00      	nop
 800ca9a:	e7fd      	b.n	800ca98 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800ca9c:	f001 ff96 	bl	800e9cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800caa0:	2300      	movs	r3, #0
 800caa2:	e082      	b.n	800cbaa <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800caa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d106      	bne.n	800cab8 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800caaa:	f107 030c 	add.w	r3, r7, #12
 800caae:	4618      	mov	r0, r3
 800cab0:	f000 ff7e 	bl	800d9b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cab4:	2301      	movs	r3, #1
 800cab6:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cab8:	f001 ff88 	bl	800e9cc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cabc:	f000 fce6 	bl	800d48c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cac0:	f001 ff52 	bl	800e968 <vPortEnterCritical>
 800cac4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cac6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800caca:	b25b      	sxtb	r3, r3
 800cacc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cad0:	d103      	bne.n	800cada <xQueueSemaphoreTake+0x142>
 800cad2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cad4:	2200      	movs	r2, #0
 800cad6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cada:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cadc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cae0:	b25b      	sxtb	r3, r3
 800cae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cae6:	d103      	bne.n	800caf0 <xQueueSemaphoreTake+0x158>
 800cae8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800caea:	2200      	movs	r2, #0
 800caec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800caf0:	f001 ff6c 	bl	800e9cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800caf4:	463a      	mov	r2, r7
 800caf6:	f107 030c 	add.w	r3, r7, #12
 800cafa:	4611      	mov	r1, r2
 800cafc:	4618      	mov	r0, r3
 800cafe:	f000 ff6d 	bl	800d9dc <xTaskCheckForTimeOut>
 800cb02:	4603      	mov	r3, r0
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d132      	bne.n	800cb6e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cb08:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cb0a:	f000 f94f 	bl	800cdac <prvIsQueueEmpty>
 800cb0e:	4603      	mov	r3, r0
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d026      	beq.n	800cb62 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cb14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d109      	bne.n	800cb30 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800cb1c:	f001 ff24 	bl	800e968 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800cb20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb22:	689b      	ldr	r3, [r3, #8]
 800cb24:	4618      	mov	r0, r3
 800cb26:	f001 f8d3 	bl	800dcd0 <xTaskPriorityInherit>
 800cb2a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800cb2c:	f001 ff4e 	bl	800e9cc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cb30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb32:	3324      	adds	r3, #36	@ 0x24
 800cb34:	683a      	ldr	r2, [r7, #0]
 800cb36:	4611      	mov	r1, r2
 800cb38:	4618      	mov	r0, r3
 800cb3a:	f000 fe83 	bl	800d844 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cb3e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cb40:	f000 f8e2 	bl	800cd08 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800cb44:	f000 fcb0 	bl	800d4a8 <xTaskResumeAll>
 800cb48:	4603      	mov	r3, r0
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	f47f af67 	bne.w	800ca1e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800cb50:	4b18      	ldr	r3, [pc, #96]	@ (800cbb4 <xQueueSemaphoreTake+0x21c>)
 800cb52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cb56:	601a      	str	r2, [r3, #0]
 800cb58:	f3bf 8f4f 	dsb	sy
 800cb5c:	f3bf 8f6f 	isb	sy
 800cb60:	e75d      	b.n	800ca1e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800cb62:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cb64:	f000 f8d0 	bl	800cd08 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cb68:	f000 fc9e 	bl	800d4a8 <xTaskResumeAll>
 800cb6c:	e757      	b.n	800ca1e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800cb6e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cb70:	f000 f8ca 	bl	800cd08 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cb74:	f000 fc98 	bl	800d4a8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cb78:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cb7a:	f000 f917 	bl	800cdac <prvIsQueueEmpty>
 800cb7e:	4603      	mov	r3, r0
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	f43f af4c 	beq.w	800ca1e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800cb86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d00d      	beq.n	800cba8 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800cb8c:	f001 feec 	bl	800e968 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800cb90:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cb92:	f000 f811 	bl	800cbb8 <prvGetDisinheritPriorityAfterTimeout>
 800cb96:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800cb98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb9a:	689b      	ldr	r3, [r3, #8]
 800cb9c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800cb9e:	4618      	mov	r0, r3
 800cba0:	f001 f96e 	bl	800de80 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800cba4:	f001 ff12 	bl	800e9cc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800cba8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800cbaa:	4618      	mov	r0, r3
 800cbac:	3738      	adds	r7, #56	@ 0x38
 800cbae:	46bd      	mov	sp, r7
 800cbb0:	bd80      	pop	{r7, pc}
 800cbb2:	bf00      	nop
 800cbb4:	e000ed04 	.word	0xe000ed04

0800cbb8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800cbb8:	b480      	push	{r7}
 800cbba:	b085      	sub	sp, #20
 800cbbc:	af00      	add	r7, sp, #0
 800cbbe:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d006      	beq.n	800cbd6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800cbd2:	60fb      	str	r3, [r7, #12]
 800cbd4:	e001      	b.n	800cbda <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800cbd6:	2300      	movs	r3, #0
 800cbd8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800cbda:	68fb      	ldr	r3, [r7, #12]
	}
 800cbdc:	4618      	mov	r0, r3
 800cbde:	3714      	adds	r7, #20
 800cbe0:	46bd      	mov	sp, r7
 800cbe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbe6:	4770      	bx	lr

0800cbe8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800cbe8:	b580      	push	{r7, lr}
 800cbea:	b086      	sub	sp, #24
 800cbec:	af00      	add	r7, sp, #0
 800cbee:	60f8      	str	r0, [r7, #12]
 800cbf0:	60b9      	str	r1, [r7, #8]
 800cbf2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800cbf4:	2300      	movs	r3, #0
 800cbf6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cbfc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d10d      	bne.n	800cc22 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d14d      	bne.n	800ccaa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	689b      	ldr	r3, [r3, #8]
 800cc12:	4618      	mov	r0, r3
 800cc14:	f001 f8c4 	bl	800dda0 <xTaskPriorityDisinherit>
 800cc18:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	2200      	movs	r2, #0
 800cc1e:	609a      	str	r2, [r3, #8]
 800cc20:	e043      	b.n	800ccaa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d119      	bne.n	800cc5c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	6858      	ldr	r0, [r3, #4]
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cc30:	461a      	mov	r2, r3
 800cc32:	68b9      	ldr	r1, [r7, #8]
 800cc34:	f002 ff76 	bl	800fb24 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	685a      	ldr	r2, [r3, #4]
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cc40:	441a      	add	r2, r3
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	685a      	ldr	r2, [r3, #4]
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	689b      	ldr	r3, [r3, #8]
 800cc4e:	429a      	cmp	r2, r3
 800cc50:	d32b      	bcc.n	800ccaa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	681a      	ldr	r2, [r3, #0]
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	605a      	str	r2, [r3, #4]
 800cc5a:	e026      	b.n	800ccaa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	68d8      	ldr	r0, [r3, #12]
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cc64:	461a      	mov	r2, r3
 800cc66:	68b9      	ldr	r1, [r7, #8]
 800cc68:	f002 ff5c 	bl	800fb24 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	68da      	ldr	r2, [r3, #12]
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cc74:	425b      	negs	r3, r3
 800cc76:	441a      	add	r2, r3
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	68da      	ldr	r2, [r3, #12]
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	429a      	cmp	r2, r3
 800cc86:	d207      	bcs.n	800cc98 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	689a      	ldr	r2, [r3, #8]
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cc90:	425b      	negs	r3, r3
 800cc92:	441a      	add	r2, r3
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	2b02      	cmp	r3, #2
 800cc9c:	d105      	bne.n	800ccaa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cc9e:	693b      	ldr	r3, [r7, #16]
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d002      	beq.n	800ccaa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800cca4:	693b      	ldr	r3, [r7, #16]
 800cca6:	3b01      	subs	r3, #1
 800cca8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ccaa:	693b      	ldr	r3, [r7, #16]
 800ccac:	1c5a      	adds	r2, r3, #1
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800ccb2:	697b      	ldr	r3, [r7, #20]
}
 800ccb4:	4618      	mov	r0, r3
 800ccb6:	3718      	adds	r7, #24
 800ccb8:	46bd      	mov	sp, r7
 800ccba:	bd80      	pop	{r7, pc}

0800ccbc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ccbc:	b580      	push	{r7, lr}
 800ccbe:	b082      	sub	sp, #8
 800ccc0:	af00      	add	r7, sp, #0
 800ccc2:	6078      	str	r0, [r7, #4]
 800ccc4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d018      	beq.n	800cd00 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	68da      	ldr	r2, [r3, #12]
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ccd6:	441a      	add	r2, r3
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	68da      	ldr	r2, [r3, #12]
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	689b      	ldr	r3, [r3, #8]
 800cce4:	429a      	cmp	r2, r3
 800cce6:	d303      	bcc.n	800ccf0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	681a      	ldr	r2, [r3, #0]
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	68d9      	ldr	r1, [r3, #12]
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ccf8:	461a      	mov	r2, r3
 800ccfa:	6838      	ldr	r0, [r7, #0]
 800ccfc:	f002 ff12 	bl	800fb24 <memcpy>
	}
}
 800cd00:	bf00      	nop
 800cd02:	3708      	adds	r7, #8
 800cd04:	46bd      	mov	sp, r7
 800cd06:	bd80      	pop	{r7, pc}

0800cd08 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800cd08:	b580      	push	{r7, lr}
 800cd0a:	b084      	sub	sp, #16
 800cd0c:	af00      	add	r7, sp, #0
 800cd0e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800cd10:	f001 fe2a 	bl	800e968 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cd1a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cd1c:	e011      	b.n	800cd42 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d012      	beq.n	800cd4c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	3324      	adds	r3, #36	@ 0x24
 800cd2a:	4618      	mov	r0, r3
 800cd2c:	f000 fddc 	bl	800d8e8 <xTaskRemoveFromEventList>
 800cd30:	4603      	mov	r3, r0
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d001      	beq.n	800cd3a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800cd36:	f000 feb5 	bl	800daa4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800cd3a:	7bfb      	ldrb	r3, [r7, #15]
 800cd3c:	3b01      	subs	r3, #1
 800cd3e:	b2db      	uxtb	r3, r3
 800cd40:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cd42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	dce9      	bgt.n	800cd1e <prvUnlockQueue+0x16>
 800cd4a:	e000      	b.n	800cd4e <prvUnlockQueue+0x46>
					break;
 800cd4c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	22ff      	movs	r2, #255	@ 0xff
 800cd52:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800cd56:	f001 fe39 	bl	800e9cc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800cd5a:	f001 fe05 	bl	800e968 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cd64:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cd66:	e011      	b.n	800cd8c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	691b      	ldr	r3, [r3, #16]
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d012      	beq.n	800cd96 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	3310      	adds	r3, #16
 800cd74:	4618      	mov	r0, r3
 800cd76:	f000 fdb7 	bl	800d8e8 <xTaskRemoveFromEventList>
 800cd7a:	4603      	mov	r3, r0
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d001      	beq.n	800cd84 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800cd80:	f000 fe90 	bl	800daa4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800cd84:	7bbb      	ldrb	r3, [r7, #14]
 800cd86:	3b01      	subs	r3, #1
 800cd88:	b2db      	uxtb	r3, r3
 800cd8a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cd8c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	dce9      	bgt.n	800cd68 <prvUnlockQueue+0x60>
 800cd94:	e000      	b.n	800cd98 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800cd96:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	22ff      	movs	r2, #255	@ 0xff
 800cd9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800cda0:	f001 fe14 	bl	800e9cc <vPortExitCritical>
}
 800cda4:	bf00      	nop
 800cda6:	3710      	adds	r7, #16
 800cda8:	46bd      	mov	sp, r7
 800cdaa:	bd80      	pop	{r7, pc}

0800cdac <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800cdac:	b580      	push	{r7, lr}
 800cdae:	b084      	sub	sp, #16
 800cdb0:	af00      	add	r7, sp, #0
 800cdb2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cdb4:	f001 fdd8 	bl	800e968 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d102      	bne.n	800cdc6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800cdc0:	2301      	movs	r3, #1
 800cdc2:	60fb      	str	r3, [r7, #12]
 800cdc4:	e001      	b.n	800cdca <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800cdc6:	2300      	movs	r3, #0
 800cdc8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cdca:	f001 fdff 	bl	800e9cc <vPortExitCritical>

	return xReturn;
 800cdce:	68fb      	ldr	r3, [r7, #12]
}
 800cdd0:	4618      	mov	r0, r3
 800cdd2:	3710      	adds	r7, #16
 800cdd4:	46bd      	mov	sp, r7
 800cdd6:	bd80      	pop	{r7, pc}

0800cdd8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800cdd8:	b580      	push	{r7, lr}
 800cdda:	b084      	sub	sp, #16
 800cddc:	af00      	add	r7, sp, #0
 800cdde:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cde0:	f001 fdc2 	bl	800e968 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cdec:	429a      	cmp	r2, r3
 800cdee:	d102      	bne.n	800cdf6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800cdf0:	2301      	movs	r3, #1
 800cdf2:	60fb      	str	r3, [r7, #12]
 800cdf4:	e001      	b.n	800cdfa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800cdf6:	2300      	movs	r3, #0
 800cdf8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cdfa:	f001 fde7 	bl	800e9cc <vPortExitCritical>

	return xReturn;
 800cdfe:	68fb      	ldr	r3, [r7, #12]
}
 800ce00:	4618      	mov	r0, r3
 800ce02:	3710      	adds	r7, #16
 800ce04:	46bd      	mov	sp, r7
 800ce06:	bd80      	pop	{r7, pc}

0800ce08 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ce08:	b480      	push	{r7}
 800ce0a:	b085      	sub	sp, #20
 800ce0c:	af00      	add	r7, sp, #0
 800ce0e:	6078      	str	r0, [r7, #4]
 800ce10:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ce12:	2300      	movs	r3, #0
 800ce14:	60fb      	str	r3, [r7, #12]
 800ce16:	e014      	b.n	800ce42 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ce18:	4a0f      	ldr	r2, [pc, #60]	@ (800ce58 <vQueueAddToRegistry+0x50>)
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d10b      	bne.n	800ce3c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ce24:	490c      	ldr	r1, [pc, #48]	@ (800ce58 <vQueueAddToRegistry+0x50>)
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	683a      	ldr	r2, [r7, #0]
 800ce2a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ce2e:	4a0a      	ldr	r2, [pc, #40]	@ (800ce58 <vQueueAddToRegistry+0x50>)
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	00db      	lsls	r3, r3, #3
 800ce34:	4413      	add	r3, r2
 800ce36:	687a      	ldr	r2, [r7, #4]
 800ce38:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ce3a:	e006      	b.n	800ce4a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	3301      	adds	r3, #1
 800ce40:	60fb      	str	r3, [r7, #12]
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	2b07      	cmp	r3, #7
 800ce46:	d9e7      	bls.n	800ce18 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ce48:	bf00      	nop
 800ce4a:	bf00      	nop
 800ce4c:	3714      	adds	r7, #20
 800ce4e:	46bd      	mov	sp, r7
 800ce50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce54:	4770      	bx	lr
 800ce56:	bf00      	nop
 800ce58:	20005018 	.word	0x20005018

0800ce5c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ce5c:	b580      	push	{r7, lr}
 800ce5e:	b086      	sub	sp, #24
 800ce60:	af00      	add	r7, sp, #0
 800ce62:	60f8      	str	r0, [r7, #12]
 800ce64:	60b9      	str	r1, [r7, #8]
 800ce66:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ce6c:	f001 fd7c 	bl	800e968 <vPortEnterCritical>
 800ce70:	697b      	ldr	r3, [r7, #20]
 800ce72:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ce76:	b25b      	sxtb	r3, r3
 800ce78:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce7c:	d103      	bne.n	800ce86 <vQueueWaitForMessageRestricted+0x2a>
 800ce7e:	697b      	ldr	r3, [r7, #20]
 800ce80:	2200      	movs	r2, #0
 800ce82:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ce86:	697b      	ldr	r3, [r7, #20]
 800ce88:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ce8c:	b25b      	sxtb	r3, r3
 800ce8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce92:	d103      	bne.n	800ce9c <vQueueWaitForMessageRestricted+0x40>
 800ce94:	697b      	ldr	r3, [r7, #20]
 800ce96:	2200      	movs	r2, #0
 800ce98:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ce9c:	f001 fd96 	bl	800e9cc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800cea0:	697b      	ldr	r3, [r7, #20]
 800cea2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d106      	bne.n	800ceb6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800cea8:	697b      	ldr	r3, [r7, #20]
 800ceaa:	3324      	adds	r3, #36	@ 0x24
 800ceac:	687a      	ldr	r2, [r7, #4]
 800ceae:	68b9      	ldr	r1, [r7, #8]
 800ceb0:	4618      	mov	r0, r3
 800ceb2:	f000 fced 	bl	800d890 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ceb6:	6978      	ldr	r0, [r7, #20]
 800ceb8:	f7ff ff26 	bl	800cd08 <prvUnlockQueue>
	}
 800cebc:	bf00      	nop
 800cebe:	3718      	adds	r7, #24
 800cec0:	46bd      	mov	sp, r7
 800cec2:	bd80      	pop	{r7, pc}

0800cec4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800cec4:	b580      	push	{r7, lr}
 800cec6:	b08e      	sub	sp, #56	@ 0x38
 800cec8:	af04      	add	r7, sp, #16
 800ceca:	60f8      	str	r0, [r7, #12]
 800cecc:	60b9      	str	r1, [r7, #8]
 800cece:	607a      	str	r2, [r7, #4]
 800ced0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ced2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d10b      	bne.n	800cef0 <xTaskCreateStatic+0x2c>
	__asm volatile
 800ced8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cedc:	f383 8811 	msr	BASEPRI, r3
 800cee0:	f3bf 8f6f 	isb	sy
 800cee4:	f3bf 8f4f 	dsb	sy
 800cee8:	623b      	str	r3, [r7, #32]
}
 800ceea:	bf00      	nop
 800ceec:	bf00      	nop
 800ceee:	e7fd      	b.n	800ceec <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800cef0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d10b      	bne.n	800cf0e <xTaskCreateStatic+0x4a>
	__asm volatile
 800cef6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cefa:	f383 8811 	msr	BASEPRI, r3
 800cefe:	f3bf 8f6f 	isb	sy
 800cf02:	f3bf 8f4f 	dsb	sy
 800cf06:	61fb      	str	r3, [r7, #28]
}
 800cf08:	bf00      	nop
 800cf0a:	bf00      	nop
 800cf0c:	e7fd      	b.n	800cf0a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800cf0e:	23a8      	movs	r3, #168	@ 0xa8
 800cf10:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800cf12:	693b      	ldr	r3, [r7, #16]
 800cf14:	2ba8      	cmp	r3, #168	@ 0xa8
 800cf16:	d00b      	beq.n	800cf30 <xTaskCreateStatic+0x6c>
	__asm volatile
 800cf18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf1c:	f383 8811 	msr	BASEPRI, r3
 800cf20:	f3bf 8f6f 	isb	sy
 800cf24:	f3bf 8f4f 	dsb	sy
 800cf28:	61bb      	str	r3, [r7, #24]
}
 800cf2a:	bf00      	nop
 800cf2c:	bf00      	nop
 800cf2e:	e7fd      	b.n	800cf2c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800cf30:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800cf32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d01e      	beq.n	800cf76 <xTaskCreateStatic+0xb2>
 800cf38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d01b      	beq.n	800cf76 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cf3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf40:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800cf42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf44:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cf46:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800cf48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf4a:	2202      	movs	r2, #2
 800cf4c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800cf50:	2300      	movs	r3, #0
 800cf52:	9303      	str	r3, [sp, #12]
 800cf54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf56:	9302      	str	r3, [sp, #8]
 800cf58:	f107 0314 	add.w	r3, r7, #20
 800cf5c:	9301      	str	r3, [sp, #4]
 800cf5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf60:	9300      	str	r3, [sp, #0]
 800cf62:	683b      	ldr	r3, [r7, #0]
 800cf64:	687a      	ldr	r2, [r7, #4]
 800cf66:	68b9      	ldr	r1, [r7, #8]
 800cf68:	68f8      	ldr	r0, [r7, #12]
 800cf6a:	f000 f851 	bl	800d010 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cf6e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cf70:	f000 f8f6 	bl	800d160 <prvAddNewTaskToReadyList>
 800cf74:	e001      	b.n	800cf7a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800cf76:	2300      	movs	r3, #0
 800cf78:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800cf7a:	697b      	ldr	r3, [r7, #20]
	}
 800cf7c:	4618      	mov	r0, r3
 800cf7e:	3728      	adds	r7, #40	@ 0x28
 800cf80:	46bd      	mov	sp, r7
 800cf82:	bd80      	pop	{r7, pc}

0800cf84 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800cf84:	b580      	push	{r7, lr}
 800cf86:	b08c      	sub	sp, #48	@ 0x30
 800cf88:	af04      	add	r7, sp, #16
 800cf8a:	60f8      	str	r0, [r7, #12]
 800cf8c:	60b9      	str	r1, [r7, #8]
 800cf8e:	603b      	str	r3, [r7, #0]
 800cf90:	4613      	mov	r3, r2
 800cf92:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800cf94:	88fb      	ldrh	r3, [r7, #6]
 800cf96:	009b      	lsls	r3, r3, #2
 800cf98:	4618      	mov	r0, r3
 800cf9a:	f001 fe07 	bl	800ebac <pvPortMalloc>
 800cf9e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800cfa0:	697b      	ldr	r3, [r7, #20]
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d00e      	beq.n	800cfc4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800cfa6:	20a8      	movs	r0, #168	@ 0xa8
 800cfa8:	f001 fe00 	bl	800ebac <pvPortMalloc>
 800cfac:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800cfae:	69fb      	ldr	r3, [r7, #28]
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d003      	beq.n	800cfbc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800cfb4:	69fb      	ldr	r3, [r7, #28]
 800cfb6:	697a      	ldr	r2, [r7, #20]
 800cfb8:	631a      	str	r2, [r3, #48]	@ 0x30
 800cfba:	e005      	b.n	800cfc8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800cfbc:	6978      	ldr	r0, [r7, #20]
 800cfbe:	f001 fec3 	bl	800ed48 <vPortFree>
 800cfc2:	e001      	b.n	800cfc8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800cfc4:	2300      	movs	r3, #0
 800cfc6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800cfc8:	69fb      	ldr	r3, [r7, #28]
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d017      	beq.n	800cffe <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800cfce:	69fb      	ldr	r3, [r7, #28]
 800cfd0:	2200      	movs	r2, #0
 800cfd2:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800cfd6:	88fa      	ldrh	r2, [r7, #6]
 800cfd8:	2300      	movs	r3, #0
 800cfda:	9303      	str	r3, [sp, #12]
 800cfdc:	69fb      	ldr	r3, [r7, #28]
 800cfde:	9302      	str	r3, [sp, #8]
 800cfe0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfe2:	9301      	str	r3, [sp, #4]
 800cfe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfe6:	9300      	str	r3, [sp, #0]
 800cfe8:	683b      	ldr	r3, [r7, #0]
 800cfea:	68b9      	ldr	r1, [r7, #8]
 800cfec:	68f8      	ldr	r0, [r7, #12]
 800cfee:	f000 f80f 	bl	800d010 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cff2:	69f8      	ldr	r0, [r7, #28]
 800cff4:	f000 f8b4 	bl	800d160 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800cff8:	2301      	movs	r3, #1
 800cffa:	61bb      	str	r3, [r7, #24]
 800cffc:	e002      	b.n	800d004 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800cffe:	f04f 33ff 	mov.w	r3, #4294967295
 800d002:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d004:	69bb      	ldr	r3, [r7, #24]
	}
 800d006:	4618      	mov	r0, r3
 800d008:	3720      	adds	r7, #32
 800d00a:	46bd      	mov	sp, r7
 800d00c:	bd80      	pop	{r7, pc}
	...

0800d010 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d010:	b580      	push	{r7, lr}
 800d012:	b088      	sub	sp, #32
 800d014:	af00      	add	r7, sp, #0
 800d016:	60f8      	str	r0, [r7, #12]
 800d018:	60b9      	str	r1, [r7, #8]
 800d01a:	607a      	str	r2, [r7, #4]
 800d01c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d01e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d020:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	009b      	lsls	r3, r3, #2
 800d026:	461a      	mov	r2, r3
 800d028:	21a5      	movs	r1, #165	@ 0xa5
 800d02a:	f002 fcf1 	bl	800fa10 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d02e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d030:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d038:	3b01      	subs	r3, #1
 800d03a:	009b      	lsls	r3, r3, #2
 800d03c:	4413      	add	r3, r2
 800d03e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d040:	69bb      	ldr	r3, [r7, #24]
 800d042:	f023 0307 	bic.w	r3, r3, #7
 800d046:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d048:	69bb      	ldr	r3, [r7, #24]
 800d04a:	f003 0307 	and.w	r3, r3, #7
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d00b      	beq.n	800d06a <prvInitialiseNewTask+0x5a>
	__asm volatile
 800d052:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d056:	f383 8811 	msr	BASEPRI, r3
 800d05a:	f3bf 8f6f 	isb	sy
 800d05e:	f3bf 8f4f 	dsb	sy
 800d062:	617b      	str	r3, [r7, #20]
}
 800d064:	bf00      	nop
 800d066:	bf00      	nop
 800d068:	e7fd      	b.n	800d066 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d06a:	68bb      	ldr	r3, [r7, #8]
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d01f      	beq.n	800d0b0 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d070:	2300      	movs	r3, #0
 800d072:	61fb      	str	r3, [r7, #28]
 800d074:	e012      	b.n	800d09c <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d076:	68ba      	ldr	r2, [r7, #8]
 800d078:	69fb      	ldr	r3, [r7, #28]
 800d07a:	4413      	add	r3, r2
 800d07c:	7819      	ldrb	r1, [r3, #0]
 800d07e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d080:	69fb      	ldr	r3, [r7, #28]
 800d082:	4413      	add	r3, r2
 800d084:	3334      	adds	r3, #52	@ 0x34
 800d086:	460a      	mov	r2, r1
 800d088:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d08a:	68ba      	ldr	r2, [r7, #8]
 800d08c:	69fb      	ldr	r3, [r7, #28]
 800d08e:	4413      	add	r3, r2
 800d090:	781b      	ldrb	r3, [r3, #0]
 800d092:	2b00      	cmp	r3, #0
 800d094:	d006      	beq.n	800d0a4 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d096:	69fb      	ldr	r3, [r7, #28]
 800d098:	3301      	adds	r3, #1
 800d09a:	61fb      	str	r3, [r7, #28]
 800d09c:	69fb      	ldr	r3, [r7, #28]
 800d09e:	2b0f      	cmp	r3, #15
 800d0a0:	d9e9      	bls.n	800d076 <prvInitialiseNewTask+0x66>
 800d0a2:	e000      	b.n	800d0a6 <prvInitialiseNewTask+0x96>
			{
				break;
 800d0a4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d0a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0a8:	2200      	movs	r2, #0
 800d0aa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800d0ae:	e003      	b.n	800d0b8 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d0b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0b2:	2200      	movs	r2, #0
 800d0b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d0b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0ba:	2b37      	cmp	r3, #55	@ 0x37
 800d0bc:	d901      	bls.n	800d0c2 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d0be:	2337      	movs	r3, #55	@ 0x37
 800d0c0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d0c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0c4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d0c6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d0c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d0cc:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800d0ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0d0:	2200      	movs	r2, #0
 800d0d2:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d0d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0d6:	3304      	adds	r3, #4
 800d0d8:	4618      	mov	r0, r3
 800d0da:	f7fe ff49 	bl	800bf70 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d0de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0e0:	3318      	adds	r3, #24
 800d0e2:	4618      	mov	r0, r3
 800d0e4:	f7fe ff44 	bl	800bf70 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d0e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d0ec:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d0ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0f0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800d0f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0f6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d0f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d0fc:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d0fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d100:	2200      	movs	r2, #0
 800d102:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d108:	2200      	movs	r2, #0
 800d10a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800d10e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d110:	3354      	adds	r3, #84	@ 0x54
 800d112:	224c      	movs	r2, #76	@ 0x4c
 800d114:	2100      	movs	r1, #0
 800d116:	4618      	mov	r0, r3
 800d118:	f002 fc7a 	bl	800fa10 <memset>
 800d11c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d11e:	4a0d      	ldr	r2, [pc, #52]	@ (800d154 <prvInitialiseNewTask+0x144>)
 800d120:	659a      	str	r2, [r3, #88]	@ 0x58
 800d122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d124:	4a0c      	ldr	r2, [pc, #48]	@ (800d158 <prvInitialiseNewTask+0x148>)
 800d126:	65da      	str	r2, [r3, #92]	@ 0x5c
 800d128:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d12a:	4a0c      	ldr	r2, [pc, #48]	@ (800d15c <prvInitialiseNewTask+0x14c>)
 800d12c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d12e:	683a      	ldr	r2, [r7, #0]
 800d130:	68f9      	ldr	r1, [r7, #12]
 800d132:	69b8      	ldr	r0, [r7, #24]
 800d134:	f001 faea 	bl	800e70c <pxPortInitialiseStack>
 800d138:	4602      	mov	r2, r0
 800d13a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d13c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d13e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d140:	2b00      	cmp	r3, #0
 800d142:	d002      	beq.n	800d14a <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d144:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d146:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d148:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d14a:	bf00      	nop
 800d14c:	3720      	adds	r7, #32
 800d14e:	46bd      	mov	sp, r7
 800d150:	bd80      	pop	{r7, pc}
 800d152:	bf00      	nop
 800d154:	20016a78 	.word	0x20016a78
 800d158:	20016ae0 	.word	0x20016ae0
 800d15c:	20016b48 	.word	0x20016b48

0800d160 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d160:	b580      	push	{r7, lr}
 800d162:	b082      	sub	sp, #8
 800d164:	af00      	add	r7, sp, #0
 800d166:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d168:	f001 fbfe 	bl	800e968 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d16c:	4b2d      	ldr	r3, [pc, #180]	@ (800d224 <prvAddNewTaskToReadyList+0xc4>)
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	3301      	adds	r3, #1
 800d172:	4a2c      	ldr	r2, [pc, #176]	@ (800d224 <prvAddNewTaskToReadyList+0xc4>)
 800d174:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d176:	4b2c      	ldr	r3, [pc, #176]	@ (800d228 <prvAddNewTaskToReadyList+0xc8>)
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d109      	bne.n	800d192 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d17e:	4a2a      	ldr	r2, [pc, #168]	@ (800d228 <prvAddNewTaskToReadyList+0xc8>)
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d184:	4b27      	ldr	r3, [pc, #156]	@ (800d224 <prvAddNewTaskToReadyList+0xc4>)
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	2b01      	cmp	r3, #1
 800d18a:	d110      	bne.n	800d1ae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d18c:	f000 fcae 	bl	800daec <prvInitialiseTaskLists>
 800d190:	e00d      	b.n	800d1ae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d192:	4b26      	ldr	r3, [pc, #152]	@ (800d22c <prvAddNewTaskToReadyList+0xcc>)
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	2b00      	cmp	r3, #0
 800d198:	d109      	bne.n	800d1ae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d19a:	4b23      	ldr	r3, [pc, #140]	@ (800d228 <prvAddNewTaskToReadyList+0xc8>)
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d1a4:	429a      	cmp	r2, r3
 800d1a6:	d802      	bhi.n	800d1ae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d1a8:	4a1f      	ldr	r2, [pc, #124]	@ (800d228 <prvAddNewTaskToReadyList+0xc8>)
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d1ae:	4b20      	ldr	r3, [pc, #128]	@ (800d230 <prvAddNewTaskToReadyList+0xd0>)
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	3301      	adds	r3, #1
 800d1b4:	4a1e      	ldr	r2, [pc, #120]	@ (800d230 <prvAddNewTaskToReadyList+0xd0>)
 800d1b6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d1b8:	4b1d      	ldr	r3, [pc, #116]	@ (800d230 <prvAddNewTaskToReadyList+0xd0>)
 800d1ba:	681a      	ldr	r2, [r3, #0]
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d1c4:	4b1b      	ldr	r3, [pc, #108]	@ (800d234 <prvAddNewTaskToReadyList+0xd4>)
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	429a      	cmp	r2, r3
 800d1ca:	d903      	bls.n	800d1d4 <prvAddNewTaskToReadyList+0x74>
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d1d0:	4a18      	ldr	r2, [pc, #96]	@ (800d234 <prvAddNewTaskToReadyList+0xd4>)
 800d1d2:	6013      	str	r3, [r2, #0]
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d1d8:	4613      	mov	r3, r2
 800d1da:	009b      	lsls	r3, r3, #2
 800d1dc:	4413      	add	r3, r2
 800d1de:	009b      	lsls	r3, r3, #2
 800d1e0:	4a15      	ldr	r2, [pc, #84]	@ (800d238 <prvAddNewTaskToReadyList+0xd8>)
 800d1e2:	441a      	add	r2, r3
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	3304      	adds	r3, #4
 800d1e8:	4619      	mov	r1, r3
 800d1ea:	4610      	mov	r0, r2
 800d1ec:	f7fe fecd 	bl	800bf8a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d1f0:	f001 fbec 	bl	800e9cc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d1f4:	4b0d      	ldr	r3, [pc, #52]	@ (800d22c <prvAddNewTaskToReadyList+0xcc>)
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d00e      	beq.n	800d21a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d1fc:	4b0a      	ldr	r3, [pc, #40]	@ (800d228 <prvAddNewTaskToReadyList+0xc8>)
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d206:	429a      	cmp	r2, r3
 800d208:	d207      	bcs.n	800d21a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d20a:	4b0c      	ldr	r3, [pc, #48]	@ (800d23c <prvAddNewTaskToReadyList+0xdc>)
 800d20c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d210:	601a      	str	r2, [r3, #0]
 800d212:	f3bf 8f4f 	dsb	sy
 800d216:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d21a:	bf00      	nop
 800d21c:	3708      	adds	r7, #8
 800d21e:	46bd      	mov	sp, r7
 800d220:	bd80      	pop	{r7, pc}
 800d222:	bf00      	nop
 800d224:	2000552c 	.word	0x2000552c
 800d228:	20005058 	.word	0x20005058
 800d22c:	20005538 	.word	0x20005538
 800d230:	20005548 	.word	0x20005548
 800d234:	20005534 	.word	0x20005534
 800d238:	2000505c 	.word	0x2000505c
 800d23c:	e000ed04 	.word	0xe000ed04

0800d240 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800d240:	b580      	push	{r7, lr}
 800d242:	b08a      	sub	sp, #40	@ 0x28
 800d244:	af00      	add	r7, sp, #0
 800d246:	6078      	str	r0, [r7, #4]
 800d248:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800d24a:	2300      	movs	r3, #0
 800d24c:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	2b00      	cmp	r3, #0
 800d252:	d10b      	bne.n	800d26c <vTaskDelayUntil+0x2c>
	__asm volatile
 800d254:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d258:	f383 8811 	msr	BASEPRI, r3
 800d25c:	f3bf 8f6f 	isb	sy
 800d260:	f3bf 8f4f 	dsb	sy
 800d264:	617b      	str	r3, [r7, #20]
}
 800d266:	bf00      	nop
 800d268:	bf00      	nop
 800d26a:	e7fd      	b.n	800d268 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800d26c:	683b      	ldr	r3, [r7, #0]
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d10b      	bne.n	800d28a <vTaskDelayUntil+0x4a>
	__asm volatile
 800d272:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d276:	f383 8811 	msr	BASEPRI, r3
 800d27a:	f3bf 8f6f 	isb	sy
 800d27e:	f3bf 8f4f 	dsb	sy
 800d282:	613b      	str	r3, [r7, #16]
}
 800d284:	bf00      	nop
 800d286:	bf00      	nop
 800d288:	e7fd      	b.n	800d286 <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 800d28a:	4b2a      	ldr	r3, [pc, #168]	@ (800d334 <vTaskDelayUntil+0xf4>)
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d00b      	beq.n	800d2aa <vTaskDelayUntil+0x6a>
	__asm volatile
 800d292:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d296:	f383 8811 	msr	BASEPRI, r3
 800d29a:	f3bf 8f6f 	isb	sy
 800d29e:	f3bf 8f4f 	dsb	sy
 800d2a2:	60fb      	str	r3, [r7, #12]
}
 800d2a4:	bf00      	nop
 800d2a6:	bf00      	nop
 800d2a8:	e7fd      	b.n	800d2a6 <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 800d2aa:	f000 f8ef 	bl	800d48c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800d2ae:	4b22      	ldr	r3, [pc, #136]	@ (800d338 <vTaskDelayUntil+0xf8>)
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	683a      	ldr	r2, [r7, #0]
 800d2ba:	4413      	add	r3, r2
 800d2bc:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	6a3a      	ldr	r2, [r7, #32]
 800d2c4:	429a      	cmp	r2, r3
 800d2c6:	d20b      	bcs.n	800d2e0 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	69fa      	ldr	r2, [r7, #28]
 800d2ce:	429a      	cmp	r2, r3
 800d2d0:	d211      	bcs.n	800d2f6 <vTaskDelayUntil+0xb6>
 800d2d2:	69fa      	ldr	r2, [r7, #28]
 800d2d4:	6a3b      	ldr	r3, [r7, #32]
 800d2d6:	429a      	cmp	r2, r3
 800d2d8:	d90d      	bls.n	800d2f6 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800d2da:	2301      	movs	r3, #1
 800d2dc:	627b      	str	r3, [r7, #36]	@ 0x24
 800d2de:	e00a      	b.n	800d2f6 <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	69fa      	ldr	r2, [r7, #28]
 800d2e6:	429a      	cmp	r2, r3
 800d2e8:	d303      	bcc.n	800d2f2 <vTaskDelayUntil+0xb2>
 800d2ea:	69fa      	ldr	r2, [r7, #28]
 800d2ec:	6a3b      	ldr	r3, [r7, #32]
 800d2ee:	429a      	cmp	r2, r3
 800d2f0:	d901      	bls.n	800d2f6 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800d2f2:	2301      	movs	r3, #1
 800d2f4:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	69fa      	ldr	r2, [r7, #28]
 800d2fa:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800d2fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d006      	beq.n	800d310 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800d302:	69fa      	ldr	r2, [r7, #28]
 800d304:	6a3b      	ldr	r3, [r7, #32]
 800d306:	1ad3      	subs	r3, r2, r3
 800d308:	2100      	movs	r1, #0
 800d30a:	4618      	mov	r0, r3
 800d30c:	f000 fe50 	bl	800dfb0 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800d310:	f000 f8ca 	bl	800d4a8 <xTaskResumeAll>
 800d314:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d316:	69bb      	ldr	r3, [r7, #24]
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d107      	bne.n	800d32c <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 800d31c:	4b07      	ldr	r3, [pc, #28]	@ (800d33c <vTaskDelayUntil+0xfc>)
 800d31e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d322:	601a      	str	r2, [r3, #0]
 800d324:	f3bf 8f4f 	dsb	sy
 800d328:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d32c:	bf00      	nop
 800d32e:	3728      	adds	r7, #40	@ 0x28
 800d330:	46bd      	mov	sp, r7
 800d332:	bd80      	pop	{r7, pc}
 800d334:	20005554 	.word	0x20005554
 800d338:	20005530 	.word	0x20005530
 800d33c:	e000ed04 	.word	0xe000ed04

0800d340 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d340:	b580      	push	{r7, lr}
 800d342:	b084      	sub	sp, #16
 800d344:	af00      	add	r7, sp, #0
 800d346:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d348:	2300      	movs	r3, #0
 800d34a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d018      	beq.n	800d384 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d352:	4b14      	ldr	r3, [pc, #80]	@ (800d3a4 <vTaskDelay+0x64>)
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	2b00      	cmp	r3, #0
 800d358:	d00b      	beq.n	800d372 <vTaskDelay+0x32>
	__asm volatile
 800d35a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d35e:	f383 8811 	msr	BASEPRI, r3
 800d362:	f3bf 8f6f 	isb	sy
 800d366:	f3bf 8f4f 	dsb	sy
 800d36a:	60bb      	str	r3, [r7, #8]
}
 800d36c:	bf00      	nop
 800d36e:	bf00      	nop
 800d370:	e7fd      	b.n	800d36e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d372:	f000 f88b 	bl	800d48c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d376:	2100      	movs	r1, #0
 800d378:	6878      	ldr	r0, [r7, #4]
 800d37a:	f000 fe19 	bl	800dfb0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d37e:	f000 f893 	bl	800d4a8 <xTaskResumeAll>
 800d382:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	2b00      	cmp	r3, #0
 800d388:	d107      	bne.n	800d39a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800d38a:	4b07      	ldr	r3, [pc, #28]	@ (800d3a8 <vTaskDelay+0x68>)
 800d38c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d390:	601a      	str	r2, [r3, #0]
 800d392:	f3bf 8f4f 	dsb	sy
 800d396:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d39a:	bf00      	nop
 800d39c:	3710      	adds	r7, #16
 800d39e:	46bd      	mov	sp, r7
 800d3a0:	bd80      	pop	{r7, pc}
 800d3a2:	bf00      	nop
 800d3a4:	20005554 	.word	0x20005554
 800d3a8:	e000ed04 	.word	0xe000ed04

0800d3ac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d3ac:	b580      	push	{r7, lr}
 800d3ae:	b08a      	sub	sp, #40	@ 0x28
 800d3b0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d3b2:	2300      	movs	r3, #0
 800d3b4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d3b6:	2300      	movs	r3, #0
 800d3b8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d3ba:	463a      	mov	r2, r7
 800d3bc:	1d39      	adds	r1, r7, #4
 800d3be:	f107 0308 	add.w	r3, r7, #8
 800d3c2:	4618      	mov	r0, r3
 800d3c4:	f7fe fd80 	bl	800bec8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d3c8:	6839      	ldr	r1, [r7, #0]
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	68ba      	ldr	r2, [r7, #8]
 800d3ce:	9202      	str	r2, [sp, #8]
 800d3d0:	9301      	str	r3, [sp, #4]
 800d3d2:	2300      	movs	r3, #0
 800d3d4:	9300      	str	r3, [sp, #0]
 800d3d6:	2300      	movs	r3, #0
 800d3d8:	460a      	mov	r2, r1
 800d3da:	4924      	ldr	r1, [pc, #144]	@ (800d46c <vTaskStartScheduler+0xc0>)
 800d3dc:	4824      	ldr	r0, [pc, #144]	@ (800d470 <vTaskStartScheduler+0xc4>)
 800d3de:	f7ff fd71 	bl	800cec4 <xTaskCreateStatic>
 800d3e2:	4603      	mov	r3, r0
 800d3e4:	4a23      	ldr	r2, [pc, #140]	@ (800d474 <vTaskStartScheduler+0xc8>)
 800d3e6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d3e8:	4b22      	ldr	r3, [pc, #136]	@ (800d474 <vTaskStartScheduler+0xc8>)
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d002      	beq.n	800d3f6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d3f0:	2301      	movs	r3, #1
 800d3f2:	617b      	str	r3, [r7, #20]
 800d3f4:	e001      	b.n	800d3fa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d3f6:	2300      	movs	r3, #0
 800d3f8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d3fa:	697b      	ldr	r3, [r7, #20]
 800d3fc:	2b01      	cmp	r3, #1
 800d3fe:	d102      	bne.n	800d406 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800d400:	f000 fe2a 	bl	800e058 <xTimerCreateTimerTask>
 800d404:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d406:	697b      	ldr	r3, [r7, #20]
 800d408:	2b01      	cmp	r3, #1
 800d40a:	d11b      	bne.n	800d444 <vTaskStartScheduler+0x98>
	__asm volatile
 800d40c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d410:	f383 8811 	msr	BASEPRI, r3
 800d414:	f3bf 8f6f 	isb	sy
 800d418:	f3bf 8f4f 	dsb	sy
 800d41c:	613b      	str	r3, [r7, #16]
}
 800d41e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d420:	4b15      	ldr	r3, [pc, #84]	@ (800d478 <vTaskStartScheduler+0xcc>)
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	3354      	adds	r3, #84	@ 0x54
 800d426:	4a15      	ldr	r2, [pc, #84]	@ (800d47c <vTaskStartScheduler+0xd0>)
 800d428:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d42a:	4b15      	ldr	r3, [pc, #84]	@ (800d480 <vTaskStartScheduler+0xd4>)
 800d42c:	f04f 32ff 	mov.w	r2, #4294967295
 800d430:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d432:	4b14      	ldr	r3, [pc, #80]	@ (800d484 <vTaskStartScheduler+0xd8>)
 800d434:	2201      	movs	r2, #1
 800d436:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d438:	4b13      	ldr	r3, [pc, #76]	@ (800d488 <vTaskStartScheduler+0xdc>)
 800d43a:	2200      	movs	r2, #0
 800d43c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d43e:	f001 f9ef 	bl	800e820 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d442:	e00f      	b.n	800d464 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d444:	697b      	ldr	r3, [r7, #20]
 800d446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d44a:	d10b      	bne.n	800d464 <vTaskStartScheduler+0xb8>
	__asm volatile
 800d44c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d450:	f383 8811 	msr	BASEPRI, r3
 800d454:	f3bf 8f6f 	isb	sy
 800d458:	f3bf 8f4f 	dsb	sy
 800d45c:	60fb      	str	r3, [r7, #12]
}
 800d45e:	bf00      	nop
 800d460:	bf00      	nop
 800d462:	e7fd      	b.n	800d460 <vTaskStartScheduler+0xb4>
}
 800d464:	bf00      	nop
 800d466:	3718      	adds	r7, #24
 800d468:	46bd      	mov	sp, r7
 800d46a:	bd80      	pop	{r7, pc}
 800d46c:	08011460 	.word	0x08011460
 800d470:	0800dabd 	.word	0x0800dabd
 800d474:	20005550 	.word	0x20005550
 800d478:	20005058 	.word	0x20005058
 800d47c:	200001a8 	.word	0x200001a8
 800d480:	2000554c 	.word	0x2000554c
 800d484:	20005538 	.word	0x20005538
 800d488:	20005530 	.word	0x20005530

0800d48c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d48c:	b480      	push	{r7}
 800d48e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d490:	4b04      	ldr	r3, [pc, #16]	@ (800d4a4 <vTaskSuspendAll+0x18>)
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	3301      	adds	r3, #1
 800d496:	4a03      	ldr	r2, [pc, #12]	@ (800d4a4 <vTaskSuspendAll+0x18>)
 800d498:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d49a:	bf00      	nop
 800d49c:	46bd      	mov	sp, r7
 800d49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a2:	4770      	bx	lr
 800d4a4:	20005554 	.word	0x20005554

0800d4a8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d4a8:	b580      	push	{r7, lr}
 800d4aa:	b084      	sub	sp, #16
 800d4ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d4ae:	2300      	movs	r3, #0
 800d4b0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d4b2:	2300      	movs	r3, #0
 800d4b4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d4b6:	4b42      	ldr	r3, [pc, #264]	@ (800d5c0 <xTaskResumeAll+0x118>)
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d10b      	bne.n	800d4d6 <xTaskResumeAll+0x2e>
	__asm volatile
 800d4be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4c2:	f383 8811 	msr	BASEPRI, r3
 800d4c6:	f3bf 8f6f 	isb	sy
 800d4ca:	f3bf 8f4f 	dsb	sy
 800d4ce:	603b      	str	r3, [r7, #0]
}
 800d4d0:	bf00      	nop
 800d4d2:	bf00      	nop
 800d4d4:	e7fd      	b.n	800d4d2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d4d6:	f001 fa47 	bl	800e968 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d4da:	4b39      	ldr	r3, [pc, #228]	@ (800d5c0 <xTaskResumeAll+0x118>)
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	3b01      	subs	r3, #1
 800d4e0:	4a37      	ldr	r2, [pc, #220]	@ (800d5c0 <xTaskResumeAll+0x118>)
 800d4e2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d4e4:	4b36      	ldr	r3, [pc, #216]	@ (800d5c0 <xTaskResumeAll+0x118>)
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d162      	bne.n	800d5b2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d4ec:	4b35      	ldr	r3, [pc, #212]	@ (800d5c4 <xTaskResumeAll+0x11c>)
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d05e      	beq.n	800d5b2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d4f4:	e02f      	b.n	800d556 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d4f6:	4b34      	ldr	r3, [pc, #208]	@ (800d5c8 <xTaskResumeAll+0x120>)
 800d4f8:	68db      	ldr	r3, [r3, #12]
 800d4fa:	68db      	ldr	r3, [r3, #12]
 800d4fc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	3318      	adds	r3, #24
 800d502:	4618      	mov	r0, r3
 800d504:	f7fe fd9e 	bl	800c044 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	3304      	adds	r3, #4
 800d50c:	4618      	mov	r0, r3
 800d50e:	f7fe fd99 	bl	800c044 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d516:	4b2d      	ldr	r3, [pc, #180]	@ (800d5cc <xTaskResumeAll+0x124>)
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	429a      	cmp	r2, r3
 800d51c:	d903      	bls.n	800d526 <xTaskResumeAll+0x7e>
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d522:	4a2a      	ldr	r2, [pc, #168]	@ (800d5cc <xTaskResumeAll+0x124>)
 800d524:	6013      	str	r3, [r2, #0]
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d52a:	4613      	mov	r3, r2
 800d52c:	009b      	lsls	r3, r3, #2
 800d52e:	4413      	add	r3, r2
 800d530:	009b      	lsls	r3, r3, #2
 800d532:	4a27      	ldr	r2, [pc, #156]	@ (800d5d0 <xTaskResumeAll+0x128>)
 800d534:	441a      	add	r2, r3
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	3304      	adds	r3, #4
 800d53a:	4619      	mov	r1, r3
 800d53c:	4610      	mov	r0, r2
 800d53e:	f7fe fd24 	bl	800bf8a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d546:	4b23      	ldr	r3, [pc, #140]	@ (800d5d4 <xTaskResumeAll+0x12c>)
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d54c:	429a      	cmp	r2, r3
 800d54e:	d302      	bcc.n	800d556 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800d550:	4b21      	ldr	r3, [pc, #132]	@ (800d5d8 <xTaskResumeAll+0x130>)
 800d552:	2201      	movs	r2, #1
 800d554:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d556:	4b1c      	ldr	r3, [pc, #112]	@ (800d5c8 <xTaskResumeAll+0x120>)
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d1cb      	bne.n	800d4f6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	2b00      	cmp	r3, #0
 800d562:	d001      	beq.n	800d568 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d564:	f000 fb66 	bl	800dc34 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d568:	4b1c      	ldr	r3, [pc, #112]	@ (800d5dc <xTaskResumeAll+0x134>)
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	2b00      	cmp	r3, #0
 800d572:	d010      	beq.n	800d596 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d574:	f000 f846 	bl	800d604 <xTaskIncrementTick>
 800d578:	4603      	mov	r3, r0
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d002      	beq.n	800d584 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800d57e:	4b16      	ldr	r3, [pc, #88]	@ (800d5d8 <xTaskResumeAll+0x130>)
 800d580:	2201      	movs	r2, #1
 800d582:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	3b01      	subs	r3, #1
 800d588:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d1f1      	bne.n	800d574 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800d590:	4b12      	ldr	r3, [pc, #72]	@ (800d5dc <xTaskResumeAll+0x134>)
 800d592:	2200      	movs	r2, #0
 800d594:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d596:	4b10      	ldr	r3, [pc, #64]	@ (800d5d8 <xTaskResumeAll+0x130>)
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d009      	beq.n	800d5b2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d59e:	2301      	movs	r3, #1
 800d5a0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d5a2:	4b0f      	ldr	r3, [pc, #60]	@ (800d5e0 <xTaskResumeAll+0x138>)
 800d5a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d5a8:	601a      	str	r2, [r3, #0]
 800d5aa:	f3bf 8f4f 	dsb	sy
 800d5ae:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d5b2:	f001 fa0b 	bl	800e9cc <vPortExitCritical>

	return xAlreadyYielded;
 800d5b6:	68bb      	ldr	r3, [r7, #8]
}
 800d5b8:	4618      	mov	r0, r3
 800d5ba:	3710      	adds	r7, #16
 800d5bc:	46bd      	mov	sp, r7
 800d5be:	bd80      	pop	{r7, pc}
 800d5c0:	20005554 	.word	0x20005554
 800d5c4:	2000552c 	.word	0x2000552c
 800d5c8:	200054ec 	.word	0x200054ec
 800d5cc:	20005534 	.word	0x20005534
 800d5d0:	2000505c 	.word	0x2000505c
 800d5d4:	20005058 	.word	0x20005058
 800d5d8:	20005540 	.word	0x20005540
 800d5dc:	2000553c 	.word	0x2000553c
 800d5e0:	e000ed04 	.word	0xe000ed04

0800d5e4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d5e4:	b480      	push	{r7}
 800d5e6:	b083      	sub	sp, #12
 800d5e8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d5ea:	4b05      	ldr	r3, [pc, #20]	@ (800d600 <xTaskGetTickCount+0x1c>)
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d5f0:	687b      	ldr	r3, [r7, #4]
}
 800d5f2:	4618      	mov	r0, r3
 800d5f4:	370c      	adds	r7, #12
 800d5f6:	46bd      	mov	sp, r7
 800d5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5fc:	4770      	bx	lr
 800d5fe:	bf00      	nop
 800d600:	20005530 	.word	0x20005530

0800d604 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d604:	b580      	push	{r7, lr}
 800d606:	b086      	sub	sp, #24
 800d608:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d60a:	2300      	movs	r3, #0
 800d60c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d60e:	4b4f      	ldr	r3, [pc, #316]	@ (800d74c <xTaskIncrementTick+0x148>)
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	2b00      	cmp	r3, #0
 800d614:	f040 8090 	bne.w	800d738 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d618:	4b4d      	ldr	r3, [pc, #308]	@ (800d750 <xTaskIncrementTick+0x14c>)
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	3301      	adds	r3, #1
 800d61e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d620:	4a4b      	ldr	r2, [pc, #300]	@ (800d750 <xTaskIncrementTick+0x14c>)
 800d622:	693b      	ldr	r3, [r7, #16]
 800d624:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d626:	693b      	ldr	r3, [r7, #16]
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d121      	bne.n	800d670 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800d62c:	4b49      	ldr	r3, [pc, #292]	@ (800d754 <xTaskIncrementTick+0x150>)
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	2b00      	cmp	r3, #0
 800d634:	d00b      	beq.n	800d64e <xTaskIncrementTick+0x4a>
	__asm volatile
 800d636:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d63a:	f383 8811 	msr	BASEPRI, r3
 800d63e:	f3bf 8f6f 	isb	sy
 800d642:	f3bf 8f4f 	dsb	sy
 800d646:	603b      	str	r3, [r7, #0]
}
 800d648:	bf00      	nop
 800d64a:	bf00      	nop
 800d64c:	e7fd      	b.n	800d64a <xTaskIncrementTick+0x46>
 800d64e:	4b41      	ldr	r3, [pc, #260]	@ (800d754 <xTaskIncrementTick+0x150>)
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	60fb      	str	r3, [r7, #12]
 800d654:	4b40      	ldr	r3, [pc, #256]	@ (800d758 <xTaskIncrementTick+0x154>)
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	4a3e      	ldr	r2, [pc, #248]	@ (800d754 <xTaskIncrementTick+0x150>)
 800d65a:	6013      	str	r3, [r2, #0]
 800d65c:	4a3e      	ldr	r2, [pc, #248]	@ (800d758 <xTaskIncrementTick+0x154>)
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	6013      	str	r3, [r2, #0]
 800d662:	4b3e      	ldr	r3, [pc, #248]	@ (800d75c <xTaskIncrementTick+0x158>)
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	3301      	adds	r3, #1
 800d668:	4a3c      	ldr	r2, [pc, #240]	@ (800d75c <xTaskIncrementTick+0x158>)
 800d66a:	6013      	str	r3, [r2, #0]
 800d66c:	f000 fae2 	bl	800dc34 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d670:	4b3b      	ldr	r3, [pc, #236]	@ (800d760 <xTaskIncrementTick+0x15c>)
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	693a      	ldr	r2, [r7, #16]
 800d676:	429a      	cmp	r2, r3
 800d678:	d349      	bcc.n	800d70e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d67a:	4b36      	ldr	r3, [pc, #216]	@ (800d754 <xTaskIncrementTick+0x150>)
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	2b00      	cmp	r3, #0
 800d682:	d104      	bne.n	800d68e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d684:	4b36      	ldr	r3, [pc, #216]	@ (800d760 <xTaskIncrementTick+0x15c>)
 800d686:	f04f 32ff 	mov.w	r2, #4294967295
 800d68a:	601a      	str	r2, [r3, #0]
					break;
 800d68c:	e03f      	b.n	800d70e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d68e:	4b31      	ldr	r3, [pc, #196]	@ (800d754 <xTaskIncrementTick+0x150>)
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	68db      	ldr	r3, [r3, #12]
 800d694:	68db      	ldr	r3, [r3, #12]
 800d696:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d698:	68bb      	ldr	r3, [r7, #8]
 800d69a:	685b      	ldr	r3, [r3, #4]
 800d69c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d69e:	693a      	ldr	r2, [r7, #16]
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	429a      	cmp	r2, r3
 800d6a4:	d203      	bcs.n	800d6ae <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d6a6:	4a2e      	ldr	r2, [pc, #184]	@ (800d760 <xTaskIncrementTick+0x15c>)
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d6ac:	e02f      	b.n	800d70e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d6ae:	68bb      	ldr	r3, [r7, #8]
 800d6b0:	3304      	adds	r3, #4
 800d6b2:	4618      	mov	r0, r3
 800d6b4:	f7fe fcc6 	bl	800c044 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d6b8:	68bb      	ldr	r3, [r7, #8]
 800d6ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d004      	beq.n	800d6ca <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d6c0:	68bb      	ldr	r3, [r7, #8]
 800d6c2:	3318      	adds	r3, #24
 800d6c4:	4618      	mov	r0, r3
 800d6c6:	f7fe fcbd 	bl	800c044 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d6ca:	68bb      	ldr	r3, [r7, #8]
 800d6cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d6ce:	4b25      	ldr	r3, [pc, #148]	@ (800d764 <xTaskIncrementTick+0x160>)
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	429a      	cmp	r2, r3
 800d6d4:	d903      	bls.n	800d6de <xTaskIncrementTick+0xda>
 800d6d6:	68bb      	ldr	r3, [r7, #8]
 800d6d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d6da:	4a22      	ldr	r2, [pc, #136]	@ (800d764 <xTaskIncrementTick+0x160>)
 800d6dc:	6013      	str	r3, [r2, #0]
 800d6de:	68bb      	ldr	r3, [r7, #8]
 800d6e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d6e2:	4613      	mov	r3, r2
 800d6e4:	009b      	lsls	r3, r3, #2
 800d6e6:	4413      	add	r3, r2
 800d6e8:	009b      	lsls	r3, r3, #2
 800d6ea:	4a1f      	ldr	r2, [pc, #124]	@ (800d768 <xTaskIncrementTick+0x164>)
 800d6ec:	441a      	add	r2, r3
 800d6ee:	68bb      	ldr	r3, [r7, #8]
 800d6f0:	3304      	adds	r3, #4
 800d6f2:	4619      	mov	r1, r3
 800d6f4:	4610      	mov	r0, r2
 800d6f6:	f7fe fc48 	bl	800bf8a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d6fa:	68bb      	ldr	r3, [r7, #8]
 800d6fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d6fe:	4b1b      	ldr	r3, [pc, #108]	@ (800d76c <xTaskIncrementTick+0x168>)
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d704:	429a      	cmp	r2, r3
 800d706:	d3b8      	bcc.n	800d67a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800d708:	2301      	movs	r3, #1
 800d70a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d70c:	e7b5      	b.n	800d67a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d70e:	4b17      	ldr	r3, [pc, #92]	@ (800d76c <xTaskIncrementTick+0x168>)
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d714:	4914      	ldr	r1, [pc, #80]	@ (800d768 <xTaskIncrementTick+0x164>)
 800d716:	4613      	mov	r3, r2
 800d718:	009b      	lsls	r3, r3, #2
 800d71a:	4413      	add	r3, r2
 800d71c:	009b      	lsls	r3, r3, #2
 800d71e:	440b      	add	r3, r1
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	2b01      	cmp	r3, #1
 800d724:	d901      	bls.n	800d72a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800d726:	2301      	movs	r3, #1
 800d728:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d72a:	4b11      	ldr	r3, [pc, #68]	@ (800d770 <xTaskIncrementTick+0x16c>)
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d007      	beq.n	800d742 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800d732:	2301      	movs	r3, #1
 800d734:	617b      	str	r3, [r7, #20]
 800d736:	e004      	b.n	800d742 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d738:	4b0e      	ldr	r3, [pc, #56]	@ (800d774 <xTaskIncrementTick+0x170>)
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	3301      	adds	r3, #1
 800d73e:	4a0d      	ldr	r2, [pc, #52]	@ (800d774 <xTaskIncrementTick+0x170>)
 800d740:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d742:	697b      	ldr	r3, [r7, #20]
}
 800d744:	4618      	mov	r0, r3
 800d746:	3718      	adds	r7, #24
 800d748:	46bd      	mov	sp, r7
 800d74a:	bd80      	pop	{r7, pc}
 800d74c:	20005554 	.word	0x20005554
 800d750:	20005530 	.word	0x20005530
 800d754:	200054e4 	.word	0x200054e4
 800d758:	200054e8 	.word	0x200054e8
 800d75c:	20005544 	.word	0x20005544
 800d760:	2000554c 	.word	0x2000554c
 800d764:	20005534 	.word	0x20005534
 800d768:	2000505c 	.word	0x2000505c
 800d76c:	20005058 	.word	0x20005058
 800d770:	20005540 	.word	0x20005540
 800d774:	2000553c 	.word	0x2000553c

0800d778 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d778:	b480      	push	{r7}
 800d77a:	b085      	sub	sp, #20
 800d77c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d77e:	4b2b      	ldr	r3, [pc, #172]	@ (800d82c <vTaskSwitchContext+0xb4>)
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	2b00      	cmp	r3, #0
 800d784:	d003      	beq.n	800d78e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d786:	4b2a      	ldr	r3, [pc, #168]	@ (800d830 <vTaskSwitchContext+0xb8>)
 800d788:	2201      	movs	r2, #1
 800d78a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d78c:	e047      	b.n	800d81e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800d78e:	4b28      	ldr	r3, [pc, #160]	@ (800d830 <vTaskSwitchContext+0xb8>)
 800d790:	2200      	movs	r2, #0
 800d792:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d794:	4b27      	ldr	r3, [pc, #156]	@ (800d834 <vTaskSwitchContext+0xbc>)
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	60fb      	str	r3, [r7, #12]
 800d79a:	e011      	b.n	800d7c0 <vTaskSwitchContext+0x48>
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d10b      	bne.n	800d7ba <vTaskSwitchContext+0x42>
	__asm volatile
 800d7a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7a6:	f383 8811 	msr	BASEPRI, r3
 800d7aa:	f3bf 8f6f 	isb	sy
 800d7ae:	f3bf 8f4f 	dsb	sy
 800d7b2:	607b      	str	r3, [r7, #4]
}
 800d7b4:	bf00      	nop
 800d7b6:	bf00      	nop
 800d7b8:	e7fd      	b.n	800d7b6 <vTaskSwitchContext+0x3e>
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	3b01      	subs	r3, #1
 800d7be:	60fb      	str	r3, [r7, #12]
 800d7c0:	491d      	ldr	r1, [pc, #116]	@ (800d838 <vTaskSwitchContext+0xc0>)
 800d7c2:	68fa      	ldr	r2, [r7, #12]
 800d7c4:	4613      	mov	r3, r2
 800d7c6:	009b      	lsls	r3, r3, #2
 800d7c8:	4413      	add	r3, r2
 800d7ca:	009b      	lsls	r3, r3, #2
 800d7cc:	440b      	add	r3, r1
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d0e3      	beq.n	800d79c <vTaskSwitchContext+0x24>
 800d7d4:	68fa      	ldr	r2, [r7, #12]
 800d7d6:	4613      	mov	r3, r2
 800d7d8:	009b      	lsls	r3, r3, #2
 800d7da:	4413      	add	r3, r2
 800d7dc:	009b      	lsls	r3, r3, #2
 800d7de:	4a16      	ldr	r2, [pc, #88]	@ (800d838 <vTaskSwitchContext+0xc0>)
 800d7e0:	4413      	add	r3, r2
 800d7e2:	60bb      	str	r3, [r7, #8]
 800d7e4:	68bb      	ldr	r3, [r7, #8]
 800d7e6:	685b      	ldr	r3, [r3, #4]
 800d7e8:	685a      	ldr	r2, [r3, #4]
 800d7ea:	68bb      	ldr	r3, [r7, #8]
 800d7ec:	605a      	str	r2, [r3, #4]
 800d7ee:	68bb      	ldr	r3, [r7, #8]
 800d7f0:	685a      	ldr	r2, [r3, #4]
 800d7f2:	68bb      	ldr	r3, [r7, #8]
 800d7f4:	3308      	adds	r3, #8
 800d7f6:	429a      	cmp	r2, r3
 800d7f8:	d104      	bne.n	800d804 <vTaskSwitchContext+0x8c>
 800d7fa:	68bb      	ldr	r3, [r7, #8]
 800d7fc:	685b      	ldr	r3, [r3, #4]
 800d7fe:	685a      	ldr	r2, [r3, #4]
 800d800:	68bb      	ldr	r3, [r7, #8]
 800d802:	605a      	str	r2, [r3, #4]
 800d804:	68bb      	ldr	r3, [r7, #8]
 800d806:	685b      	ldr	r3, [r3, #4]
 800d808:	68db      	ldr	r3, [r3, #12]
 800d80a:	4a0c      	ldr	r2, [pc, #48]	@ (800d83c <vTaskSwitchContext+0xc4>)
 800d80c:	6013      	str	r3, [r2, #0]
 800d80e:	4a09      	ldr	r2, [pc, #36]	@ (800d834 <vTaskSwitchContext+0xbc>)
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d814:	4b09      	ldr	r3, [pc, #36]	@ (800d83c <vTaskSwitchContext+0xc4>)
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	3354      	adds	r3, #84	@ 0x54
 800d81a:	4a09      	ldr	r2, [pc, #36]	@ (800d840 <vTaskSwitchContext+0xc8>)
 800d81c:	6013      	str	r3, [r2, #0]
}
 800d81e:	bf00      	nop
 800d820:	3714      	adds	r7, #20
 800d822:	46bd      	mov	sp, r7
 800d824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d828:	4770      	bx	lr
 800d82a:	bf00      	nop
 800d82c:	20005554 	.word	0x20005554
 800d830:	20005540 	.word	0x20005540
 800d834:	20005534 	.word	0x20005534
 800d838:	2000505c 	.word	0x2000505c
 800d83c:	20005058 	.word	0x20005058
 800d840:	200001a8 	.word	0x200001a8

0800d844 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d844:	b580      	push	{r7, lr}
 800d846:	b084      	sub	sp, #16
 800d848:	af00      	add	r7, sp, #0
 800d84a:	6078      	str	r0, [r7, #4]
 800d84c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	2b00      	cmp	r3, #0
 800d852:	d10b      	bne.n	800d86c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800d854:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d858:	f383 8811 	msr	BASEPRI, r3
 800d85c:	f3bf 8f6f 	isb	sy
 800d860:	f3bf 8f4f 	dsb	sy
 800d864:	60fb      	str	r3, [r7, #12]
}
 800d866:	bf00      	nop
 800d868:	bf00      	nop
 800d86a:	e7fd      	b.n	800d868 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d86c:	4b07      	ldr	r3, [pc, #28]	@ (800d88c <vTaskPlaceOnEventList+0x48>)
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	3318      	adds	r3, #24
 800d872:	4619      	mov	r1, r3
 800d874:	6878      	ldr	r0, [r7, #4]
 800d876:	f7fe fbac 	bl	800bfd2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d87a:	2101      	movs	r1, #1
 800d87c:	6838      	ldr	r0, [r7, #0]
 800d87e:	f000 fb97 	bl	800dfb0 <prvAddCurrentTaskToDelayedList>
}
 800d882:	bf00      	nop
 800d884:	3710      	adds	r7, #16
 800d886:	46bd      	mov	sp, r7
 800d888:	bd80      	pop	{r7, pc}
 800d88a:	bf00      	nop
 800d88c:	20005058 	.word	0x20005058

0800d890 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d890:	b580      	push	{r7, lr}
 800d892:	b086      	sub	sp, #24
 800d894:	af00      	add	r7, sp, #0
 800d896:	60f8      	str	r0, [r7, #12]
 800d898:	60b9      	str	r1, [r7, #8]
 800d89a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d10b      	bne.n	800d8ba <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800d8a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8a6:	f383 8811 	msr	BASEPRI, r3
 800d8aa:	f3bf 8f6f 	isb	sy
 800d8ae:	f3bf 8f4f 	dsb	sy
 800d8b2:	617b      	str	r3, [r7, #20]
}
 800d8b4:	bf00      	nop
 800d8b6:	bf00      	nop
 800d8b8:	e7fd      	b.n	800d8b6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d8ba:	4b0a      	ldr	r3, [pc, #40]	@ (800d8e4 <vTaskPlaceOnEventListRestricted+0x54>)
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	3318      	adds	r3, #24
 800d8c0:	4619      	mov	r1, r3
 800d8c2:	68f8      	ldr	r0, [r7, #12]
 800d8c4:	f7fe fb61 	bl	800bf8a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d002      	beq.n	800d8d4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800d8ce:	f04f 33ff 	mov.w	r3, #4294967295
 800d8d2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d8d4:	6879      	ldr	r1, [r7, #4]
 800d8d6:	68b8      	ldr	r0, [r7, #8]
 800d8d8:	f000 fb6a 	bl	800dfb0 <prvAddCurrentTaskToDelayedList>
	}
 800d8dc:	bf00      	nop
 800d8de:	3718      	adds	r7, #24
 800d8e0:	46bd      	mov	sp, r7
 800d8e2:	bd80      	pop	{r7, pc}
 800d8e4:	20005058 	.word	0x20005058

0800d8e8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d8e8:	b580      	push	{r7, lr}
 800d8ea:	b086      	sub	sp, #24
 800d8ec:	af00      	add	r7, sp, #0
 800d8ee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	68db      	ldr	r3, [r3, #12]
 800d8f4:	68db      	ldr	r3, [r3, #12]
 800d8f6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d8f8:	693b      	ldr	r3, [r7, #16]
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d10b      	bne.n	800d916 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800d8fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d902:	f383 8811 	msr	BASEPRI, r3
 800d906:	f3bf 8f6f 	isb	sy
 800d90a:	f3bf 8f4f 	dsb	sy
 800d90e:	60fb      	str	r3, [r7, #12]
}
 800d910:	bf00      	nop
 800d912:	bf00      	nop
 800d914:	e7fd      	b.n	800d912 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d916:	693b      	ldr	r3, [r7, #16]
 800d918:	3318      	adds	r3, #24
 800d91a:	4618      	mov	r0, r3
 800d91c:	f7fe fb92 	bl	800c044 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d920:	4b1d      	ldr	r3, [pc, #116]	@ (800d998 <xTaskRemoveFromEventList+0xb0>)
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	2b00      	cmp	r3, #0
 800d926:	d11d      	bne.n	800d964 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d928:	693b      	ldr	r3, [r7, #16]
 800d92a:	3304      	adds	r3, #4
 800d92c:	4618      	mov	r0, r3
 800d92e:	f7fe fb89 	bl	800c044 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d932:	693b      	ldr	r3, [r7, #16]
 800d934:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d936:	4b19      	ldr	r3, [pc, #100]	@ (800d99c <xTaskRemoveFromEventList+0xb4>)
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	429a      	cmp	r2, r3
 800d93c:	d903      	bls.n	800d946 <xTaskRemoveFromEventList+0x5e>
 800d93e:	693b      	ldr	r3, [r7, #16]
 800d940:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d942:	4a16      	ldr	r2, [pc, #88]	@ (800d99c <xTaskRemoveFromEventList+0xb4>)
 800d944:	6013      	str	r3, [r2, #0]
 800d946:	693b      	ldr	r3, [r7, #16]
 800d948:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d94a:	4613      	mov	r3, r2
 800d94c:	009b      	lsls	r3, r3, #2
 800d94e:	4413      	add	r3, r2
 800d950:	009b      	lsls	r3, r3, #2
 800d952:	4a13      	ldr	r2, [pc, #76]	@ (800d9a0 <xTaskRemoveFromEventList+0xb8>)
 800d954:	441a      	add	r2, r3
 800d956:	693b      	ldr	r3, [r7, #16]
 800d958:	3304      	adds	r3, #4
 800d95a:	4619      	mov	r1, r3
 800d95c:	4610      	mov	r0, r2
 800d95e:	f7fe fb14 	bl	800bf8a <vListInsertEnd>
 800d962:	e005      	b.n	800d970 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d964:	693b      	ldr	r3, [r7, #16]
 800d966:	3318      	adds	r3, #24
 800d968:	4619      	mov	r1, r3
 800d96a:	480e      	ldr	r0, [pc, #56]	@ (800d9a4 <xTaskRemoveFromEventList+0xbc>)
 800d96c:	f7fe fb0d 	bl	800bf8a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d970:	693b      	ldr	r3, [r7, #16]
 800d972:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d974:	4b0c      	ldr	r3, [pc, #48]	@ (800d9a8 <xTaskRemoveFromEventList+0xc0>)
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d97a:	429a      	cmp	r2, r3
 800d97c:	d905      	bls.n	800d98a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d97e:	2301      	movs	r3, #1
 800d980:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d982:	4b0a      	ldr	r3, [pc, #40]	@ (800d9ac <xTaskRemoveFromEventList+0xc4>)
 800d984:	2201      	movs	r2, #1
 800d986:	601a      	str	r2, [r3, #0]
 800d988:	e001      	b.n	800d98e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800d98a:	2300      	movs	r3, #0
 800d98c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d98e:	697b      	ldr	r3, [r7, #20]
}
 800d990:	4618      	mov	r0, r3
 800d992:	3718      	adds	r7, #24
 800d994:	46bd      	mov	sp, r7
 800d996:	bd80      	pop	{r7, pc}
 800d998:	20005554 	.word	0x20005554
 800d99c:	20005534 	.word	0x20005534
 800d9a0:	2000505c 	.word	0x2000505c
 800d9a4:	200054ec 	.word	0x200054ec
 800d9a8:	20005058 	.word	0x20005058
 800d9ac:	20005540 	.word	0x20005540

0800d9b0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d9b0:	b480      	push	{r7}
 800d9b2:	b083      	sub	sp, #12
 800d9b4:	af00      	add	r7, sp, #0
 800d9b6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d9b8:	4b06      	ldr	r3, [pc, #24]	@ (800d9d4 <vTaskInternalSetTimeOutState+0x24>)
 800d9ba:	681a      	ldr	r2, [r3, #0]
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d9c0:	4b05      	ldr	r3, [pc, #20]	@ (800d9d8 <vTaskInternalSetTimeOutState+0x28>)
 800d9c2:	681a      	ldr	r2, [r3, #0]
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	605a      	str	r2, [r3, #4]
}
 800d9c8:	bf00      	nop
 800d9ca:	370c      	adds	r7, #12
 800d9cc:	46bd      	mov	sp, r7
 800d9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9d2:	4770      	bx	lr
 800d9d4:	20005544 	.word	0x20005544
 800d9d8:	20005530 	.word	0x20005530

0800d9dc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d9dc:	b580      	push	{r7, lr}
 800d9de:	b088      	sub	sp, #32
 800d9e0:	af00      	add	r7, sp, #0
 800d9e2:	6078      	str	r0, [r7, #4]
 800d9e4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d10b      	bne.n	800da04 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800d9ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9f0:	f383 8811 	msr	BASEPRI, r3
 800d9f4:	f3bf 8f6f 	isb	sy
 800d9f8:	f3bf 8f4f 	dsb	sy
 800d9fc:	613b      	str	r3, [r7, #16]
}
 800d9fe:	bf00      	nop
 800da00:	bf00      	nop
 800da02:	e7fd      	b.n	800da00 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800da04:	683b      	ldr	r3, [r7, #0]
 800da06:	2b00      	cmp	r3, #0
 800da08:	d10b      	bne.n	800da22 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800da0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da0e:	f383 8811 	msr	BASEPRI, r3
 800da12:	f3bf 8f6f 	isb	sy
 800da16:	f3bf 8f4f 	dsb	sy
 800da1a:	60fb      	str	r3, [r7, #12]
}
 800da1c:	bf00      	nop
 800da1e:	bf00      	nop
 800da20:	e7fd      	b.n	800da1e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800da22:	f000 ffa1 	bl	800e968 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800da26:	4b1d      	ldr	r3, [pc, #116]	@ (800da9c <xTaskCheckForTimeOut+0xc0>)
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	685b      	ldr	r3, [r3, #4]
 800da30:	69ba      	ldr	r2, [r7, #24]
 800da32:	1ad3      	subs	r3, r2, r3
 800da34:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800da36:	683b      	ldr	r3, [r7, #0]
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da3e:	d102      	bne.n	800da46 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800da40:	2300      	movs	r3, #0
 800da42:	61fb      	str	r3, [r7, #28]
 800da44:	e023      	b.n	800da8e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	681a      	ldr	r2, [r3, #0]
 800da4a:	4b15      	ldr	r3, [pc, #84]	@ (800daa0 <xTaskCheckForTimeOut+0xc4>)
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	429a      	cmp	r2, r3
 800da50:	d007      	beq.n	800da62 <xTaskCheckForTimeOut+0x86>
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	685b      	ldr	r3, [r3, #4]
 800da56:	69ba      	ldr	r2, [r7, #24]
 800da58:	429a      	cmp	r2, r3
 800da5a:	d302      	bcc.n	800da62 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800da5c:	2301      	movs	r3, #1
 800da5e:	61fb      	str	r3, [r7, #28]
 800da60:	e015      	b.n	800da8e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800da62:	683b      	ldr	r3, [r7, #0]
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	697a      	ldr	r2, [r7, #20]
 800da68:	429a      	cmp	r2, r3
 800da6a:	d20b      	bcs.n	800da84 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800da6c:	683b      	ldr	r3, [r7, #0]
 800da6e:	681a      	ldr	r2, [r3, #0]
 800da70:	697b      	ldr	r3, [r7, #20]
 800da72:	1ad2      	subs	r2, r2, r3
 800da74:	683b      	ldr	r3, [r7, #0]
 800da76:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800da78:	6878      	ldr	r0, [r7, #4]
 800da7a:	f7ff ff99 	bl	800d9b0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800da7e:	2300      	movs	r3, #0
 800da80:	61fb      	str	r3, [r7, #28]
 800da82:	e004      	b.n	800da8e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800da84:	683b      	ldr	r3, [r7, #0]
 800da86:	2200      	movs	r2, #0
 800da88:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800da8a:	2301      	movs	r3, #1
 800da8c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800da8e:	f000 ff9d 	bl	800e9cc <vPortExitCritical>

	return xReturn;
 800da92:	69fb      	ldr	r3, [r7, #28]
}
 800da94:	4618      	mov	r0, r3
 800da96:	3720      	adds	r7, #32
 800da98:	46bd      	mov	sp, r7
 800da9a:	bd80      	pop	{r7, pc}
 800da9c:	20005530 	.word	0x20005530
 800daa0:	20005544 	.word	0x20005544

0800daa4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800daa4:	b480      	push	{r7}
 800daa6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800daa8:	4b03      	ldr	r3, [pc, #12]	@ (800dab8 <vTaskMissedYield+0x14>)
 800daaa:	2201      	movs	r2, #1
 800daac:	601a      	str	r2, [r3, #0]
}
 800daae:	bf00      	nop
 800dab0:	46bd      	mov	sp, r7
 800dab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dab6:	4770      	bx	lr
 800dab8:	20005540 	.word	0x20005540

0800dabc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800dabc:	b580      	push	{r7, lr}
 800dabe:	b082      	sub	sp, #8
 800dac0:	af00      	add	r7, sp, #0
 800dac2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800dac4:	f000 f852 	bl	800db6c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800dac8:	4b06      	ldr	r3, [pc, #24]	@ (800dae4 <prvIdleTask+0x28>)
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	2b01      	cmp	r3, #1
 800dace:	d9f9      	bls.n	800dac4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800dad0:	4b05      	ldr	r3, [pc, #20]	@ (800dae8 <prvIdleTask+0x2c>)
 800dad2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dad6:	601a      	str	r2, [r3, #0]
 800dad8:	f3bf 8f4f 	dsb	sy
 800dadc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800dae0:	e7f0      	b.n	800dac4 <prvIdleTask+0x8>
 800dae2:	bf00      	nop
 800dae4:	2000505c 	.word	0x2000505c
 800dae8:	e000ed04 	.word	0xe000ed04

0800daec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800daec:	b580      	push	{r7, lr}
 800daee:	b082      	sub	sp, #8
 800daf0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800daf2:	2300      	movs	r3, #0
 800daf4:	607b      	str	r3, [r7, #4]
 800daf6:	e00c      	b.n	800db12 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800daf8:	687a      	ldr	r2, [r7, #4]
 800dafa:	4613      	mov	r3, r2
 800dafc:	009b      	lsls	r3, r3, #2
 800dafe:	4413      	add	r3, r2
 800db00:	009b      	lsls	r3, r3, #2
 800db02:	4a12      	ldr	r2, [pc, #72]	@ (800db4c <prvInitialiseTaskLists+0x60>)
 800db04:	4413      	add	r3, r2
 800db06:	4618      	mov	r0, r3
 800db08:	f7fe fa12 	bl	800bf30 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	3301      	adds	r3, #1
 800db10:	607b      	str	r3, [r7, #4]
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	2b37      	cmp	r3, #55	@ 0x37
 800db16:	d9ef      	bls.n	800daf8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800db18:	480d      	ldr	r0, [pc, #52]	@ (800db50 <prvInitialiseTaskLists+0x64>)
 800db1a:	f7fe fa09 	bl	800bf30 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800db1e:	480d      	ldr	r0, [pc, #52]	@ (800db54 <prvInitialiseTaskLists+0x68>)
 800db20:	f7fe fa06 	bl	800bf30 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800db24:	480c      	ldr	r0, [pc, #48]	@ (800db58 <prvInitialiseTaskLists+0x6c>)
 800db26:	f7fe fa03 	bl	800bf30 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800db2a:	480c      	ldr	r0, [pc, #48]	@ (800db5c <prvInitialiseTaskLists+0x70>)
 800db2c:	f7fe fa00 	bl	800bf30 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800db30:	480b      	ldr	r0, [pc, #44]	@ (800db60 <prvInitialiseTaskLists+0x74>)
 800db32:	f7fe f9fd 	bl	800bf30 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800db36:	4b0b      	ldr	r3, [pc, #44]	@ (800db64 <prvInitialiseTaskLists+0x78>)
 800db38:	4a05      	ldr	r2, [pc, #20]	@ (800db50 <prvInitialiseTaskLists+0x64>)
 800db3a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800db3c:	4b0a      	ldr	r3, [pc, #40]	@ (800db68 <prvInitialiseTaskLists+0x7c>)
 800db3e:	4a05      	ldr	r2, [pc, #20]	@ (800db54 <prvInitialiseTaskLists+0x68>)
 800db40:	601a      	str	r2, [r3, #0]
}
 800db42:	bf00      	nop
 800db44:	3708      	adds	r7, #8
 800db46:	46bd      	mov	sp, r7
 800db48:	bd80      	pop	{r7, pc}
 800db4a:	bf00      	nop
 800db4c:	2000505c 	.word	0x2000505c
 800db50:	200054bc 	.word	0x200054bc
 800db54:	200054d0 	.word	0x200054d0
 800db58:	200054ec 	.word	0x200054ec
 800db5c:	20005500 	.word	0x20005500
 800db60:	20005518 	.word	0x20005518
 800db64:	200054e4 	.word	0x200054e4
 800db68:	200054e8 	.word	0x200054e8

0800db6c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800db6c:	b580      	push	{r7, lr}
 800db6e:	b082      	sub	sp, #8
 800db70:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800db72:	e019      	b.n	800dba8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800db74:	f000 fef8 	bl	800e968 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800db78:	4b10      	ldr	r3, [pc, #64]	@ (800dbbc <prvCheckTasksWaitingTermination+0x50>)
 800db7a:	68db      	ldr	r3, [r3, #12]
 800db7c:	68db      	ldr	r3, [r3, #12]
 800db7e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	3304      	adds	r3, #4
 800db84:	4618      	mov	r0, r3
 800db86:	f7fe fa5d 	bl	800c044 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800db8a:	4b0d      	ldr	r3, [pc, #52]	@ (800dbc0 <prvCheckTasksWaitingTermination+0x54>)
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	3b01      	subs	r3, #1
 800db90:	4a0b      	ldr	r2, [pc, #44]	@ (800dbc0 <prvCheckTasksWaitingTermination+0x54>)
 800db92:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800db94:	4b0b      	ldr	r3, [pc, #44]	@ (800dbc4 <prvCheckTasksWaitingTermination+0x58>)
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	3b01      	subs	r3, #1
 800db9a:	4a0a      	ldr	r2, [pc, #40]	@ (800dbc4 <prvCheckTasksWaitingTermination+0x58>)
 800db9c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800db9e:	f000 ff15 	bl	800e9cc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800dba2:	6878      	ldr	r0, [r7, #4]
 800dba4:	f000 f810 	bl	800dbc8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800dba8:	4b06      	ldr	r3, [pc, #24]	@ (800dbc4 <prvCheckTasksWaitingTermination+0x58>)
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d1e1      	bne.n	800db74 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800dbb0:	bf00      	nop
 800dbb2:	bf00      	nop
 800dbb4:	3708      	adds	r7, #8
 800dbb6:	46bd      	mov	sp, r7
 800dbb8:	bd80      	pop	{r7, pc}
 800dbba:	bf00      	nop
 800dbbc:	20005500 	.word	0x20005500
 800dbc0:	2000552c 	.word	0x2000552c
 800dbc4:	20005514 	.word	0x20005514

0800dbc8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800dbc8:	b580      	push	{r7, lr}
 800dbca:	b084      	sub	sp, #16
 800dbcc:	af00      	add	r7, sp, #0
 800dbce:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	3354      	adds	r3, #84	@ 0x54
 800dbd4:	4618      	mov	r0, r3
 800dbd6:	f001 ff23 	bl	800fa20 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d108      	bne.n	800dbf6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dbe8:	4618      	mov	r0, r3
 800dbea:	f001 f8ad 	bl	800ed48 <vPortFree>
				vPortFree( pxTCB );
 800dbee:	6878      	ldr	r0, [r7, #4]
 800dbf0:	f001 f8aa 	bl	800ed48 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800dbf4:	e019      	b.n	800dc2a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800dbfc:	2b01      	cmp	r3, #1
 800dbfe:	d103      	bne.n	800dc08 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800dc00:	6878      	ldr	r0, [r7, #4]
 800dc02:	f001 f8a1 	bl	800ed48 <vPortFree>
	}
 800dc06:	e010      	b.n	800dc2a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800dc0e:	2b02      	cmp	r3, #2
 800dc10:	d00b      	beq.n	800dc2a <prvDeleteTCB+0x62>
	__asm volatile
 800dc12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc16:	f383 8811 	msr	BASEPRI, r3
 800dc1a:	f3bf 8f6f 	isb	sy
 800dc1e:	f3bf 8f4f 	dsb	sy
 800dc22:	60fb      	str	r3, [r7, #12]
}
 800dc24:	bf00      	nop
 800dc26:	bf00      	nop
 800dc28:	e7fd      	b.n	800dc26 <prvDeleteTCB+0x5e>
	}
 800dc2a:	bf00      	nop
 800dc2c:	3710      	adds	r7, #16
 800dc2e:	46bd      	mov	sp, r7
 800dc30:	bd80      	pop	{r7, pc}
	...

0800dc34 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800dc34:	b480      	push	{r7}
 800dc36:	b083      	sub	sp, #12
 800dc38:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dc3a:	4b0c      	ldr	r3, [pc, #48]	@ (800dc6c <prvResetNextTaskUnblockTime+0x38>)
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d104      	bne.n	800dc4e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800dc44:	4b0a      	ldr	r3, [pc, #40]	@ (800dc70 <prvResetNextTaskUnblockTime+0x3c>)
 800dc46:	f04f 32ff 	mov.w	r2, #4294967295
 800dc4a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800dc4c:	e008      	b.n	800dc60 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dc4e:	4b07      	ldr	r3, [pc, #28]	@ (800dc6c <prvResetNextTaskUnblockTime+0x38>)
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	68db      	ldr	r3, [r3, #12]
 800dc54:	68db      	ldr	r3, [r3, #12]
 800dc56:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	685b      	ldr	r3, [r3, #4]
 800dc5c:	4a04      	ldr	r2, [pc, #16]	@ (800dc70 <prvResetNextTaskUnblockTime+0x3c>)
 800dc5e:	6013      	str	r3, [r2, #0]
}
 800dc60:	bf00      	nop
 800dc62:	370c      	adds	r7, #12
 800dc64:	46bd      	mov	sp, r7
 800dc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc6a:	4770      	bx	lr
 800dc6c:	200054e4 	.word	0x200054e4
 800dc70:	2000554c 	.word	0x2000554c

0800dc74 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800dc74:	b480      	push	{r7}
 800dc76:	b083      	sub	sp, #12
 800dc78:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800dc7a:	4b05      	ldr	r3, [pc, #20]	@ (800dc90 <xTaskGetCurrentTaskHandle+0x1c>)
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	607b      	str	r3, [r7, #4]

		return xReturn;
 800dc80:	687b      	ldr	r3, [r7, #4]
	}
 800dc82:	4618      	mov	r0, r3
 800dc84:	370c      	adds	r7, #12
 800dc86:	46bd      	mov	sp, r7
 800dc88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc8c:	4770      	bx	lr
 800dc8e:	bf00      	nop
 800dc90:	20005058 	.word	0x20005058

0800dc94 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800dc94:	b480      	push	{r7}
 800dc96:	b083      	sub	sp, #12
 800dc98:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800dc9a:	4b0b      	ldr	r3, [pc, #44]	@ (800dcc8 <xTaskGetSchedulerState+0x34>)
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d102      	bne.n	800dca8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800dca2:	2301      	movs	r3, #1
 800dca4:	607b      	str	r3, [r7, #4]
 800dca6:	e008      	b.n	800dcba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dca8:	4b08      	ldr	r3, [pc, #32]	@ (800dccc <xTaskGetSchedulerState+0x38>)
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d102      	bne.n	800dcb6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800dcb0:	2302      	movs	r3, #2
 800dcb2:	607b      	str	r3, [r7, #4]
 800dcb4:	e001      	b.n	800dcba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800dcb6:	2300      	movs	r3, #0
 800dcb8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800dcba:	687b      	ldr	r3, [r7, #4]
	}
 800dcbc:	4618      	mov	r0, r3
 800dcbe:	370c      	adds	r7, #12
 800dcc0:	46bd      	mov	sp, r7
 800dcc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcc6:	4770      	bx	lr
 800dcc8:	20005538 	.word	0x20005538
 800dccc:	20005554 	.word	0x20005554

0800dcd0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800dcd0:	b580      	push	{r7, lr}
 800dcd2:	b084      	sub	sp, #16
 800dcd4:	af00      	add	r7, sp, #0
 800dcd6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800dcdc:	2300      	movs	r3, #0
 800dcde:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d051      	beq.n	800dd8a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800dce6:	68bb      	ldr	r3, [r7, #8]
 800dce8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dcea:	4b2a      	ldr	r3, [pc, #168]	@ (800dd94 <xTaskPriorityInherit+0xc4>)
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dcf0:	429a      	cmp	r2, r3
 800dcf2:	d241      	bcs.n	800dd78 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800dcf4:	68bb      	ldr	r3, [r7, #8]
 800dcf6:	699b      	ldr	r3, [r3, #24]
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	db06      	blt.n	800dd0a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dcfc:	4b25      	ldr	r3, [pc, #148]	@ (800dd94 <xTaskPriorityInherit+0xc4>)
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd02:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800dd06:	68bb      	ldr	r3, [r7, #8]
 800dd08:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800dd0a:	68bb      	ldr	r3, [r7, #8]
 800dd0c:	6959      	ldr	r1, [r3, #20]
 800dd0e:	68bb      	ldr	r3, [r7, #8]
 800dd10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dd12:	4613      	mov	r3, r2
 800dd14:	009b      	lsls	r3, r3, #2
 800dd16:	4413      	add	r3, r2
 800dd18:	009b      	lsls	r3, r3, #2
 800dd1a:	4a1f      	ldr	r2, [pc, #124]	@ (800dd98 <xTaskPriorityInherit+0xc8>)
 800dd1c:	4413      	add	r3, r2
 800dd1e:	4299      	cmp	r1, r3
 800dd20:	d122      	bne.n	800dd68 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dd22:	68bb      	ldr	r3, [r7, #8]
 800dd24:	3304      	adds	r3, #4
 800dd26:	4618      	mov	r0, r3
 800dd28:	f7fe f98c 	bl	800c044 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800dd2c:	4b19      	ldr	r3, [pc, #100]	@ (800dd94 <xTaskPriorityInherit+0xc4>)
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dd32:	68bb      	ldr	r3, [r7, #8]
 800dd34:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800dd36:	68bb      	ldr	r3, [r7, #8]
 800dd38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dd3a:	4b18      	ldr	r3, [pc, #96]	@ (800dd9c <xTaskPriorityInherit+0xcc>)
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	429a      	cmp	r2, r3
 800dd40:	d903      	bls.n	800dd4a <xTaskPriorityInherit+0x7a>
 800dd42:	68bb      	ldr	r3, [r7, #8]
 800dd44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd46:	4a15      	ldr	r2, [pc, #84]	@ (800dd9c <xTaskPriorityInherit+0xcc>)
 800dd48:	6013      	str	r3, [r2, #0]
 800dd4a:	68bb      	ldr	r3, [r7, #8]
 800dd4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dd4e:	4613      	mov	r3, r2
 800dd50:	009b      	lsls	r3, r3, #2
 800dd52:	4413      	add	r3, r2
 800dd54:	009b      	lsls	r3, r3, #2
 800dd56:	4a10      	ldr	r2, [pc, #64]	@ (800dd98 <xTaskPriorityInherit+0xc8>)
 800dd58:	441a      	add	r2, r3
 800dd5a:	68bb      	ldr	r3, [r7, #8]
 800dd5c:	3304      	adds	r3, #4
 800dd5e:	4619      	mov	r1, r3
 800dd60:	4610      	mov	r0, r2
 800dd62:	f7fe f912 	bl	800bf8a <vListInsertEnd>
 800dd66:	e004      	b.n	800dd72 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800dd68:	4b0a      	ldr	r3, [pc, #40]	@ (800dd94 <xTaskPriorityInherit+0xc4>)
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dd6e:	68bb      	ldr	r3, [r7, #8]
 800dd70:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800dd72:	2301      	movs	r3, #1
 800dd74:	60fb      	str	r3, [r7, #12]
 800dd76:	e008      	b.n	800dd8a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800dd78:	68bb      	ldr	r3, [r7, #8]
 800dd7a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800dd7c:	4b05      	ldr	r3, [pc, #20]	@ (800dd94 <xTaskPriorityInherit+0xc4>)
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd82:	429a      	cmp	r2, r3
 800dd84:	d201      	bcs.n	800dd8a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800dd86:	2301      	movs	r3, #1
 800dd88:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800dd8a:	68fb      	ldr	r3, [r7, #12]
	}
 800dd8c:	4618      	mov	r0, r3
 800dd8e:	3710      	adds	r7, #16
 800dd90:	46bd      	mov	sp, r7
 800dd92:	bd80      	pop	{r7, pc}
 800dd94:	20005058 	.word	0x20005058
 800dd98:	2000505c 	.word	0x2000505c
 800dd9c:	20005534 	.word	0x20005534

0800dda0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800dda0:	b580      	push	{r7, lr}
 800dda2:	b086      	sub	sp, #24
 800dda4:	af00      	add	r7, sp, #0
 800dda6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ddac:	2300      	movs	r3, #0
 800ddae:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d058      	beq.n	800de68 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ddb6:	4b2f      	ldr	r3, [pc, #188]	@ (800de74 <xTaskPriorityDisinherit+0xd4>)
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	693a      	ldr	r2, [r7, #16]
 800ddbc:	429a      	cmp	r2, r3
 800ddbe:	d00b      	beq.n	800ddd8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800ddc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddc4:	f383 8811 	msr	BASEPRI, r3
 800ddc8:	f3bf 8f6f 	isb	sy
 800ddcc:	f3bf 8f4f 	dsb	sy
 800ddd0:	60fb      	str	r3, [r7, #12]
}
 800ddd2:	bf00      	nop
 800ddd4:	bf00      	nop
 800ddd6:	e7fd      	b.n	800ddd4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ddd8:	693b      	ldr	r3, [r7, #16]
 800ddda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d10b      	bne.n	800ddf8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800dde0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dde4:	f383 8811 	msr	BASEPRI, r3
 800dde8:	f3bf 8f6f 	isb	sy
 800ddec:	f3bf 8f4f 	dsb	sy
 800ddf0:	60bb      	str	r3, [r7, #8]
}
 800ddf2:	bf00      	nop
 800ddf4:	bf00      	nop
 800ddf6:	e7fd      	b.n	800ddf4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800ddf8:	693b      	ldr	r3, [r7, #16]
 800ddfa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ddfc:	1e5a      	subs	r2, r3, #1
 800ddfe:	693b      	ldr	r3, [r7, #16]
 800de00:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800de02:	693b      	ldr	r3, [r7, #16]
 800de04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800de06:	693b      	ldr	r3, [r7, #16]
 800de08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800de0a:	429a      	cmp	r2, r3
 800de0c:	d02c      	beq.n	800de68 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800de0e:	693b      	ldr	r3, [r7, #16]
 800de10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800de12:	2b00      	cmp	r3, #0
 800de14:	d128      	bne.n	800de68 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800de16:	693b      	ldr	r3, [r7, #16]
 800de18:	3304      	adds	r3, #4
 800de1a:	4618      	mov	r0, r3
 800de1c:	f7fe f912 	bl	800c044 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800de20:	693b      	ldr	r3, [r7, #16]
 800de22:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800de24:	693b      	ldr	r3, [r7, #16]
 800de26:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800de28:	693b      	ldr	r3, [r7, #16]
 800de2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de2c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800de30:	693b      	ldr	r3, [r7, #16]
 800de32:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800de34:	693b      	ldr	r3, [r7, #16]
 800de36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800de38:	4b0f      	ldr	r3, [pc, #60]	@ (800de78 <xTaskPriorityDisinherit+0xd8>)
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	429a      	cmp	r2, r3
 800de3e:	d903      	bls.n	800de48 <xTaskPriorityDisinherit+0xa8>
 800de40:	693b      	ldr	r3, [r7, #16]
 800de42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de44:	4a0c      	ldr	r2, [pc, #48]	@ (800de78 <xTaskPriorityDisinherit+0xd8>)
 800de46:	6013      	str	r3, [r2, #0]
 800de48:	693b      	ldr	r3, [r7, #16]
 800de4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800de4c:	4613      	mov	r3, r2
 800de4e:	009b      	lsls	r3, r3, #2
 800de50:	4413      	add	r3, r2
 800de52:	009b      	lsls	r3, r3, #2
 800de54:	4a09      	ldr	r2, [pc, #36]	@ (800de7c <xTaskPriorityDisinherit+0xdc>)
 800de56:	441a      	add	r2, r3
 800de58:	693b      	ldr	r3, [r7, #16]
 800de5a:	3304      	adds	r3, #4
 800de5c:	4619      	mov	r1, r3
 800de5e:	4610      	mov	r0, r2
 800de60:	f7fe f893 	bl	800bf8a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800de64:	2301      	movs	r3, #1
 800de66:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800de68:	697b      	ldr	r3, [r7, #20]
	}
 800de6a:	4618      	mov	r0, r3
 800de6c:	3718      	adds	r7, #24
 800de6e:	46bd      	mov	sp, r7
 800de70:	bd80      	pop	{r7, pc}
 800de72:	bf00      	nop
 800de74:	20005058 	.word	0x20005058
 800de78:	20005534 	.word	0x20005534
 800de7c:	2000505c 	.word	0x2000505c

0800de80 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800de80:	b580      	push	{r7, lr}
 800de82:	b088      	sub	sp, #32
 800de84:	af00      	add	r7, sp, #0
 800de86:	6078      	str	r0, [r7, #4]
 800de88:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800de8e:	2301      	movs	r3, #1
 800de90:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	2b00      	cmp	r3, #0
 800de96:	d06c      	beq.n	800df72 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800de98:	69bb      	ldr	r3, [r7, #24]
 800de9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d10b      	bne.n	800deb8 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800dea0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dea4:	f383 8811 	msr	BASEPRI, r3
 800dea8:	f3bf 8f6f 	isb	sy
 800deac:	f3bf 8f4f 	dsb	sy
 800deb0:	60fb      	str	r3, [r7, #12]
}
 800deb2:	bf00      	nop
 800deb4:	bf00      	nop
 800deb6:	e7fd      	b.n	800deb4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800deb8:	69bb      	ldr	r3, [r7, #24]
 800deba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800debc:	683a      	ldr	r2, [r7, #0]
 800debe:	429a      	cmp	r2, r3
 800dec0:	d902      	bls.n	800dec8 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800dec2:	683b      	ldr	r3, [r7, #0]
 800dec4:	61fb      	str	r3, [r7, #28]
 800dec6:	e002      	b.n	800dece <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800dec8:	69bb      	ldr	r3, [r7, #24]
 800deca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800decc:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800dece:	69bb      	ldr	r3, [r7, #24]
 800ded0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ded2:	69fa      	ldr	r2, [r7, #28]
 800ded4:	429a      	cmp	r2, r3
 800ded6:	d04c      	beq.n	800df72 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ded8:	69bb      	ldr	r3, [r7, #24]
 800deda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dedc:	697a      	ldr	r2, [r7, #20]
 800dede:	429a      	cmp	r2, r3
 800dee0:	d147      	bne.n	800df72 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800dee2:	4b26      	ldr	r3, [pc, #152]	@ (800df7c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	69ba      	ldr	r2, [r7, #24]
 800dee8:	429a      	cmp	r2, r3
 800deea:	d10b      	bne.n	800df04 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800deec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800def0:	f383 8811 	msr	BASEPRI, r3
 800def4:	f3bf 8f6f 	isb	sy
 800def8:	f3bf 8f4f 	dsb	sy
 800defc:	60bb      	str	r3, [r7, #8]
}
 800defe:	bf00      	nop
 800df00:	bf00      	nop
 800df02:	e7fd      	b.n	800df00 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800df04:	69bb      	ldr	r3, [r7, #24]
 800df06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df08:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800df0a:	69bb      	ldr	r3, [r7, #24]
 800df0c:	69fa      	ldr	r2, [r7, #28]
 800df0e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800df10:	69bb      	ldr	r3, [r7, #24]
 800df12:	699b      	ldr	r3, [r3, #24]
 800df14:	2b00      	cmp	r3, #0
 800df16:	db04      	blt.n	800df22 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800df18:	69fb      	ldr	r3, [r7, #28]
 800df1a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800df1e:	69bb      	ldr	r3, [r7, #24]
 800df20:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800df22:	69bb      	ldr	r3, [r7, #24]
 800df24:	6959      	ldr	r1, [r3, #20]
 800df26:	693a      	ldr	r2, [r7, #16]
 800df28:	4613      	mov	r3, r2
 800df2a:	009b      	lsls	r3, r3, #2
 800df2c:	4413      	add	r3, r2
 800df2e:	009b      	lsls	r3, r3, #2
 800df30:	4a13      	ldr	r2, [pc, #76]	@ (800df80 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800df32:	4413      	add	r3, r2
 800df34:	4299      	cmp	r1, r3
 800df36:	d11c      	bne.n	800df72 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800df38:	69bb      	ldr	r3, [r7, #24]
 800df3a:	3304      	adds	r3, #4
 800df3c:	4618      	mov	r0, r3
 800df3e:	f7fe f881 	bl	800c044 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800df42:	69bb      	ldr	r3, [r7, #24]
 800df44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800df46:	4b0f      	ldr	r3, [pc, #60]	@ (800df84 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	429a      	cmp	r2, r3
 800df4c:	d903      	bls.n	800df56 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800df4e:	69bb      	ldr	r3, [r7, #24]
 800df50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df52:	4a0c      	ldr	r2, [pc, #48]	@ (800df84 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800df54:	6013      	str	r3, [r2, #0]
 800df56:	69bb      	ldr	r3, [r7, #24]
 800df58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800df5a:	4613      	mov	r3, r2
 800df5c:	009b      	lsls	r3, r3, #2
 800df5e:	4413      	add	r3, r2
 800df60:	009b      	lsls	r3, r3, #2
 800df62:	4a07      	ldr	r2, [pc, #28]	@ (800df80 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800df64:	441a      	add	r2, r3
 800df66:	69bb      	ldr	r3, [r7, #24]
 800df68:	3304      	adds	r3, #4
 800df6a:	4619      	mov	r1, r3
 800df6c:	4610      	mov	r0, r2
 800df6e:	f7fe f80c 	bl	800bf8a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800df72:	bf00      	nop
 800df74:	3720      	adds	r7, #32
 800df76:	46bd      	mov	sp, r7
 800df78:	bd80      	pop	{r7, pc}
 800df7a:	bf00      	nop
 800df7c:	20005058 	.word	0x20005058
 800df80:	2000505c 	.word	0x2000505c
 800df84:	20005534 	.word	0x20005534

0800df88 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800df88:	b480      	push	{r7}
 800df8a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800df8c:	4b07      	ldr	r3, [pc, #28]	@ (800dfac <pvTaskIncrementMutexHeldCount+0x24>)
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	2b00      	cmp	r3, #0
 800df92:	d004      	beq.n	800df9e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800df94:	4b05      	ldr	r3, [pc, #20]	@ (800dfac <pvTaskIncrementMutexHeldCount+0x24>)
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800df9a:	3201      	adds	r2, #1
 800df9c:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800df9e:	4b03      	ldr	r3, [pc, #12]	@ (800dfac <pvTaskIncrementMutexHeldCount+0x24>)
 800dfa0:	681b      	ldr	r3, [r3, #0]
	}
 800dfa2:	4618      	mov	r0, r3
 800dfa4:	46bd      	mov	sp, r7
 800dfa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfaa:	4770      	bx	lr
 800dfac:	20005058 	.word	0x20005058

0800dfb0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800dfb0:	b580      	push	{r7, lr}
 800dfb2:	b084      	sub	sp, #16
 800dfb4:	af00      	add	r7, sp, #0
 800dfb6:	6078      	str	r0, [r7, #4]
 800dfb8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800dfba:	4b21      	ldr	r3, [pc, #132]	@ (800e040 <prvAddCurrentTaskToDelayedList+0x90>)
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dfc0:	4b20      	ldr	r3, [pc, #128]	@ (800e044 <prvAddCurrentTaskToDelayedList+0x94>)
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	3304      	adds	r3, #4
 800dfc6:	4618      	mov	r0, r3
 800dfc8:	f7fe f83c 	bl	800c044 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dfd2:	d10a      	bne.n	800dfea <prvAddCurrentTaskToDelayedList+0x3a>
 800dfd4:	683b      	ldr	r3, [r7, #0]
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d007      	beq.n	800dfea <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dfda:	4b1a      	ldr	r3, [pc, #104]	@ (800e044 <prvAddCurrentTaskToDelayedList+0x94>)
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	3304      	adds	r3, #4
 800dfe0:	4619      	mov	r1, r3
 800dfe2:	4819      	ldr	r0, [pc, #100]	@ (800e048 <prvAddCurrentTaskToDelayedList+0x98>)
 800dfe4:	f7fd ffd1 	bl	800bf8a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800dfe8:	e026      	b.n	800e038 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800dfea:	68fa      	ldr	r2, [r7, #12]
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	4413      	add	r3, r2
 800dff0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800dff2:	4b14      	ldr	r3, [pc, #80]	@ (800e044 <prvAddCurrentTaskToDelayedList+0x94>)
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	68ba      	ldr	r2, [r7, #8]
 800dff8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800dffa:	68ba      	ldr	r2, [r7, #8]
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	429a      	cmp	r2, r3
 800e000:	d209      	bcs.n	800e016 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e002:	4b12      	ldr	r3, [pc, #72]	@ (800e04c <prvAddCurrentTaskToDelayedList+0x9c>)
 800e004:	681a      	ldr	r2, [r3, #0]
 800e006:	4b0f      	ldr	r3, [pc, #60]	@ (800e044 <prvAddCurrentTaskToDelayedList+0x94>)
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	3304      	adds	r3, #4
 800e00c:	4619      	mov	r1, r3
 800e00e:	4610      	mov	r0, r2
 800e010:	f7fd ffdf 	bl	800bfd2 <vListInsert>
}
 800e014:	e010      	b.n	800e038 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e016:	4b0e      	ldr	r3, [pc, #56]	@ (800e050 <prvAddCurrentTaskToDelayedList+0xa0>)
 800e018:	681a      	ldr	r2, [r3, #0]
 800e01a:	4b0a      	ldr	r3, [pc, #40]	@ (800e044 <prvAddCurrentTaskToDelayedList+0x94>)
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	3304      	adds	r3, #4
 800e020:	4619      	mov	r1, r3
 800e022:	4610      	mov	r0, r2
 800e024:	f7fd ffd5 	bl	800bfd2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e028:	4b0a      	ldr	r3, [pc, #40]	@ (800e054 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	68ba      	ldr	r2, [r7, #8]
 800e02e:	429a      	cmp	r2, r3
 800e030:	d202      	bcs.n	800e038 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800e032:	4a08      	ldr	r2, [pc, #32]	@ (800e054 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e034:	68bb      	ldr	r3, [r7, #8]
 800e036:	6013      	str	r3, [r2, #0]
}
 800e038:	bf00      	nop
 800e03a:	3710      	adds	r7, #16
 800e03c:	46bd      	mov	sp, r7
 800e03e:	bd80      	pop	{r7, pc}
 800e040:	20005530 	.word	0x20005530
 800e044:	20005058 	.word	0x20005058
 800e048:	20005518 	.word	0x20005518
 800e04c:	200054e8 	.word	0x200054e8
 800e050:	200054e4 	.word	0x200054e4
 800e054:	2000554c 	.word	0x2000554c

0800e058 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e058:	b580      	push	{r7, lr}
 800e05a:	b08a      	sub	sp, #40	@ 0x28
 800e05c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e05e:	2300      	movs	r3, #0
 800e060:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e062:	f000 fb13 	bl	800e68c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e066:	4b1d      	ldr	r3, [pc, #116]	@ (800e0dc <xTimerCreateTimerTask+0x84>)
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d021      	beq.n	800e0b2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e06e:	2300      	movs	r3, #0
 800e070:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e072:	2300      	movs	r3, #0
 800e074:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e076:	1d3a      	adds	r2, r7, #4
 800e078:	f107 0108 	add.w	r1, r7, #8
 800e07c:	f107 030c 	add.w	r3, r7, #12
 800e080:	4618      	mov	r0, r3
 800e082:	f7fd ff3b 	bl	800befc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e086:	6879      	ldr	r1, [r7, #4]
 800e088:	68bb      	ldr	r3, [r7, #8]
 800e08a:	68fa      	ldr	r2, [r7, #12]
 800e08c:	9202      	str	r2, [sp, #8]
 800e08e:	9301      	str	r3, [sp, #4]
 800e090:	2302      	movs	r3, #2
 800e092:	9300      	str	r3, [sp, #0]
 800e094:	2300      	movs	r3, #0
 800e096:	460a      	mov	r2, r1
 800e098:	4911      	ldr	r1, [pc, #68]	@ (800e0e0 <xTimerCreateTimerTask+0x88>)
 800e09a:	4812      	ldr	r0, [pc, #72]	@ (800e0e4 <xTimerCreateTimerTask+0x8c>)
 800e09c:	f7fe ff12 	bl	800cec4 <xTaskCreateStatic>
 800e0a0:	4603      	mov	r3, r0
 800e0a2:	4a11      	ldr	r2, [pc, #68]	@ (800e0e8 <xTimerCreateTimerTask+0x90>)
 800e0a4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e0a6:	4b10      	ldr	r3, [pc, #64]	@ (800e0e8 <xTimerCreateTimerTask+0x90>)
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d001      	beq.n	800e0b2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800e0ae:	2301      	movs	r3, #1
 800e0b0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e0b2:	697b      	ldr	r3, [r7, #20]
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d10b      	bne.n	800e0d0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800e0b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0bc:	f383 8811 	msr	BASEPRI, r3
 800e0c0:	f3bf 8f6f 	isb	sy
 800e0c4:	f3bf 8f4f 	dsb	sy
 800e0c8:	613b      	str	r3, [r7, #16]
}
 800e0ca:	bf00      	nop
 800e0cc:	bf00      	nop
 800e0ce:	e7fd      	b.n	800e0cc <xTimerCreateTimerTask+0x74>
	return xReturn;
 800e0d0:	697b      	ldr	r3, [r7, #20]
}
 800e0d2:	4618      	mov	r0, r3
 800e0d4:	3718      	adds	r7, #24
 800e0d6:	46bd      	mov	sp, r7
 800e0d8:	bd80      	pop	{r7, pc}
 800e0da:	bf00      	nop
 800e0dc:	20005588 	.word	0x20005588
 800e0e0:	08011468 	.word	0x08011468
 800e0e4:	0800e225 	.word	0x0800e225
 800e0e8:	2000558c 	.word	0x2000558c

0800e0ec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e0ec:	b580      	push	{r7, lr}
 800e0ee:	b08a      	sub	sp, #40	@ 0x28
 800e0f0:	af00      	add	r7, sp, #0
 800e0f2:	60f8      	str	r0, [r7, #12]
 800e0f4:	60b9      	str	r1, [r7, #8]
 800e0f6:	607a      	str	r2, [r7, #4]
 800e0f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e0fa:	2300      	movs	r3, #0
 800e0fc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	2b00      	cmp	r3, #0
 800e102:	d10b      	bne.n	800e11c <xTimerGenericCommand+0x30>
	__asm volatile
 800e104:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e108:	f383 8811 	msr	BASEPRI, r3
 800e10c:	f3bf 8f6f 	isb	sy
 800e110:	f3bf 8f4f 	dsb	sy
 800e114:	623b      	str	r3, [r7, #32]
}
 800e116:	bf00      	nop
 800e118:	bf00      	nop
 800e11a:	e7fd      	b.n	800e118 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e11c:	4b19      	ldr	r3, [pc, #100]	@ (800e184 <xTimerGenericCommand+0x98>)
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	2b00      	cmp	r3, #0
 800e122:	d02a      	beq.n	800e17a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e124:	68bb      	ldr	r3, [r7, #8]
 800e126:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e130:	68bb      	ldr	r3, [r7, #8]
 800e132:	2b05      	cmp	r3, #5
 800e134:	dc18      	bgt.n	800e168 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e136:	f7ff fdad 	bl	800dc94 <xTaskGetSchedulerState>
 800e13a:	4603      	mov	r3, r0
 800e13c:	2b02      	cmp	r3, #2
 800e13e:	d109      	bne.n	800e154 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e140:	4b10      	ldr	r3, [pc, #64]	@ (800e184 <xTimerGenericCommand+0x98>)
 800e142:	6818      	ldr	r0, [r3, #0]
 800e144:	f107 0110 	add.w	r1, r7, #16
 800e148:	2300      	movs	r3, #0
 800e14a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e14c:	f7fe f9a2 	bl	800c494 <xQueueGenericSend>
 800e150:	6278      	str	r0, [r7, #36]	@ 0x24
 800e152:	e012      	b.n	800e17a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e154:	4b0b      	ldr	r3, [pc, #44]	@ (800e184 <xTimerGenericCommand+0x98>)
 800e156:	6818      	ldr	r0, [r3, #0]
 800e158:	f107 0110 	add.w	r1, r7, #16
 800e15c:	2300      	movs	r3, #0
 800e15e:	2200      	movs	r2, #0
 800e160:	f7fe f998 	bl	800c494 <xQueueGenericSend>
 800e164:	6278      	str	r0, [r7, #36]	@ 0x24
 800e166:	e008      	b.n	800e17a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e168:	4b06      	ldr	r3, [pc, #24]	@ (800e184 <xTimerGenericCommand+0x98>)
 800e16a:	6818      	ldr	r0, [r3, #0]
 800e16c:	f107 0110 	add.w	r1, r7, #16
 800e170:	2300      	movs	r3, #0
 800e172:	683a      	ldr	r2, [r7, #0]
 800e174:	f7fe fa90 	bl	800c698 <xQueueGenericSendFromISR>
 800e178:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800e17a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800e17c:	4618      	mov	r0, r3
 800e17e:	3728      	adds	r7, #40	@ 0x28
 800e180:	46bd      	mov	sp, r7
 800e182:	bd80      	pop	{r7, pc}
 800e184:	20005588 	.word	0x20005588

0800e188 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800e188:	b580      	push	{r7, lr}
 800e18a:	b088      	sub	sp, #32
 800e18c:	af02      	add	r7, sp, #8
 800e18e:	6078      	str	r0, [r7, #4]
 800e190:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e192:	4b23      	ldr	r3, [pc, #140]	@ (800e220 <prvProcessExpiredTimer+0x98>)
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	68db      	ldr	r3, [r3, #12]
 800e198:	68db      	ldr	r3, [r3, #12]
 800e19a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e19c:	697b      	ldr	r3, [r7, #20]
 800e19e:	3304      	adds	r3, #4
 800e1a0:	4618      	mov	r0, r3
 800e1a2:	f7fd ff4f 	bl	800c044 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e1a6:	697b      	ldr	r3, [r7, #20]
 800e1a8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e1ac:	f003 0304 	and.w	r3, r3, #4
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d023      	beq.n	800e1fc <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e1b4:	697b      	ldr	r3, [r7, #20]
 800e1b6:	699a      	ldr	r2, [r3, #24]
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	18d1      	adds	r1, r2, r3
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	683a      	ldr	r2, [r7, #0]
 800e1c0:	6978      	ldr	r0, [r7, #20]
 800e1c2:	f000 f8d5 	bl	800e370 <prvInsertTimerInActiveList>
 800e1c6:	4603      	mov	r3, r0
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d020      	beq.n	800e20e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e1cc:	2300      	movs	r3, #0
 800e1ce:	9300      	str	r3, [sp, #0]
 800e1d0:	2300      	movs	r3, #0
 800e1d2:	687a      	ldr	r2, [r7, #4]
 800e1d4:	2100      	movs	r1, #0
 800e1d6:	6978      	ldr	r0, [r7, #20]
 800e1d8:	f7ff ff88 	bl	800e0ec <xTimerGenericCommand>
 800e1dc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800e1de:	693b      	ldr	r3, [r7, #16]
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d114      	bne.n	800e20e <prvProcessExpiredTimer+0x86>
	__asm volatile
 800e1e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1e8:	f383 8811 	msr	BASEPRI, r3
 800e1ec:	f3bf 8f6f 	isb	sy
 800e1f0:	f3bf 8f4f 	dsb	sy
 800e1f4:	60fb      	str	r3, [r7, #12]
}
 800e1f6:	bf00      	nop
 800e1f8:	bf00      	nop
 800e1fa:	e7fd      	b.n	800e1f8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e1fc:	697b      	ldr	r3, [r7, #20]
 800e1fe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e202:	f023 0301 	bic.w	r3, r3, #1
 800e206:	b2da      	uxtb	r2, r3
 800e208:	697b      	ldr	r3, [r7, #20]
 800e20a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e20e:	697b      	ldr	r3, [r7, #20]
 800e210:	6a1b      	ldr	r3, [r3, #32]
 800e212:	6978      	ldr	r0, [r7, #20]
 800e214:	4798      	blx	r3
}
 800e216:	bf00      	nop
 800e218:	3718      	adds	r7, #24
 800e21a:	46bd      	mov	sp, r7
 800e21c:	bd80      	pop	{r7, pc}
 800e21e:	bf00      	nop
 800e220:	20005580 	.word	0x20005580

0800e224 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800e224:	b580      	push	{r7, lr}
 800e226:	b084      	sub	sp, #16
 800e228:	af00      	add	r7, sp, #0
 800e22a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e22c:	f107 0308 	add.w	r3, r7, #8
 800e230:	4618      	mov	r0, r3
 800e232:	f000 f859 	bl	800e2e8 <prvGetNextExpireTime>
 800e236:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e238:	68bb      	ldr	r3, [r7, #8]
 800e23a:	4619      	mov	r1, r3
 800e23c:	68f8      	ldr	r0, [r7, #12]
 800e23e:	f000 f805 	bl	800e24c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e242:	f000 f8d7 	bl	800e3f4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e246:	bf00      	nop
 800e248:	e7f0      	b.n	800e22c <prvTimerTask+0x8>
	...

0800e24c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e24c:	b580      	push	{r7, lr}
 800e24e:	b084      	sub	sp, #16
 800e250:	af00      	add	r7, sp, #0
 800e252:	6078      	str	r0, [r7, #4]
 800e254:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e256:	f7ff f919 	bl	800d48c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e25a:	f107 0308 	add.w	r3, r7, #8
 800e25e:	4618      	mov	r0, r3
 800e260:	f000 f866 	bl	800e330 <prvSampleTimeNow>
 800e264:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e266:	68bb      	ldr	r3, [r7, #8]
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d130      	bne.n	800e2ce <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e26c:	683b      	ldr	r3, [r7, #0]
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d10a      	bne.n	800e288 <prvProcessTimerOrBlockTask+0x3c>
 800e272:	687a      	ldr	r2, [r7, #4]
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	429a      	cmp	r2, r3
 800e278:	d806      	bhi.n	800e288 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e27a:	f7ff f915 	bl	800d4a8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e27e:	68f9      	ldr	r1, [r7, #12]
 800e280:	6878      	ldr	r0, [r7, #4]
 800e282:	f7ff ff81 	bl	800e188 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e286:	e024      	b.n	800e2d2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e288:	683b      	ldr	r3, [r7, #0]
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d008      	beq.n	800e2a0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e28e:	4b13      	ldr	r3, [pc, #76]	@ (800e2dc <prvProcessTimerOrBlockTask+0x90>)
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	2b00      	cmp	r3, #0
 800e296:	d101      	bne.n	800e29c <prvProcessTimerOrBlockTask+0x50>
 800e298:	2301      	movs	r3, #1
 800e29a:	e000      	b.n	800e29e <prvProcessTimerOrBlockTask+0x52>
 800e29c:	2300      	movs	r3, #0
 800e29e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e2a0:	4b0f      	ldr	r3, [pc, #60]	@ (800e2e0 <prvProcessTimerOrBlockTask+0x94>)
 800e2a2:	6818      	ldr	r0, [r3, #0]
 800e2a4:	687a      	ldr	r2, [r7, #4]
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	1ad3      	subs	r3, r2, r3
 800e2aa:	683a      	ldr	r2, [r7, #0]
 800e2ac:	4619      	mov	r1, r3
 800e2ae:	f7fe fdd5 	bl	800ce5c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e2b2:	f7ff f8f9 	bl	800d4a8 <xTaskResumeAll>
 800e2b6:	4603      	mov	r3, r0
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d10a      	bne.n	800e2d2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e2bc:	4b09      	ldr	r3, [pc, #36]	@ (800e2e4 <prvProcessTimerOrBlockTask+0x98>)
 800e2be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e2c2:	601a      	str	r2, [r3, #0]
 800e2c4:	f3bf 8f4f 	dsb	sy
 800e2c8:	f3bf 8f6f 	isb	sy
}
 800e2cc:	e001      	b.n	800e2d2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e2ce:	f7ff f8eb 	bl	800d4a8 <xTaskResumeAll>
}
 800e2d2:	bf00      	nop
 800e2d4:	3710      	adds	r7, #16
 800e2d6:	46bd      	mov	sp, r7
 800e2d8:	bd80      	pop	{r7, pc}
 800e2da:	bf00      	nop
 800e2dc:	20005584 	.word	0x20005584
 800e2e0:	20005588 	.word	0x20005588
 800e2e4:	e000ed04 	.word	0xe000ed04

0800e2e8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e2e8:	b480      	push	{r7}
 800e2ea:	b085      	sub	sp, #20
 800e2ec:	af00      	add	r7, sp, #0
 800e2ee:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e2f0:	4b0e      	ldr	r3, [pc, #56]	@ (800e32c <prvGetNextExpireTime+0x44>)
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d101      	bne.n	800e2fe <prvGetNextExpireTime+0x16>
 800e2fa:	2201      	movs	r2, #1
 800e2fc:	e000      	b.n	800e300 <prvGetNextExpireTime+0x18>
 800e2fe:	2200      	movs	r2, #0
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d105      	bne.n	800e318 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e30c:	4b07      	ldr	r3, [pc, #28]	@ (800e32c <prvGetNextExpireTime+0x44>)
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	68db      	ldr	r3, [r3, #12]
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	60fb      	str	r3, [r7, #12]
 800e316:	e001      	b.n	800e31c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e318:	2300      	movs	r3, #0
 800e31a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e31c:	68fb      	ldr	r3, [r7, #12]
}
 800e31e:	4618      	mov	r0, r3
 800e320:	3714      	adds	r7, #20
 800e322:	46bd      	mov	sp, r7
 800e324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e328:	4770      	bx	lr
 800e32a:	bf00      	nop
 800e32c:	20005580 	.word	0x20005580

0800e330 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e330:	b580      	push	{r7, lr}
 800e332:	b084      	sub	sp, #16
 800e334:	af00      	add	r7, sp, #0
 800e336:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e338:	f7ff f954 	bl	800d5e4 <xTaskGetTickCount>
 800e33c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e33e:	4b0b      	ldr	r3, [pc, #44]	@ (800e36c <prvSampleTimeNow+0x3c>)
 800e340:	681b      	ldr	r3, [r3, #0]
 800e342:	68fa      	ldr	r2, [r7, #12]
 800e344:	429a      	cmp	r2, r3
 800e346:	d205      	bcs.n	800e354 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e348:	f000 f93a 	bl	800e5c0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	2201      	movs	r2, #1
 800e350:	601a      	str	r2, [r3, #0]
 800e352:	e002      	b.n	800e35a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	2200      	movs	r2, #0
 800e358:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e35a:	4a04      	ldr	r2, [pc, #16]	@ (800e36c <prvSampleTimeNow+0x3c>)
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e360:	68fb      	ldr	r3, [r7, #12]
}
 800e362:	4618      	mov	r0, r3
 800e364:	3710      	adds	r7, #16
 800e366:	46bd      	mov	sp, r7
 800e368:	bd80      	pop	{r7, pc}
 800e36a:	bf00      	nop
 800e36c:	20005590 	.word	0x20005590

0800e370 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e370:	b580      	push	{r7, lr}
 800e372:	b086      	sub	sp, #24
 800e374:	af00      	add	r7, sp, #0
 800e376:	60f8      	str	r0, [r7, #12]
 800e378:	60b9      	str	r1, [r7, #8]
 800e37a:	607a      	str	r2, [r7, #4]
 800e37c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e37e:	2300      	movs	r3, #0
 800e380:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	68ba      	ldr	r2, [r7, #8]
 800e386:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	68fa      	ldr	r2, [r7, #12]
 800e38c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e38e:	68ba      	ldr	r2, [r7, #8]
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	429a      	cmp	r2, r3
 800e394:	d812      	bhi.n	800e3bc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e396:	687a      	ldr	r2, [r7, #4]
 800e398:	683b      	ldr	r3, [r7, #0]
 800e39a:	1ad2      	subs	r2, r2, r3
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	699b      	ldr	r3, [r3, #24]
 800e3a0:	429a      	cmp	r2, r3
 800e3a2:	d302      	bcc.n	800e3aa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e3a4:	2301      	movs	r3, #1
 800e3a6:	617b      	str	r3, [r7, #20]
 800e3a8:	e01b      	b.n	800e3e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e3aa:	4b10      	ldr	r3, [pc, #64]	@ (800e3ec <prvInsertTimerInActiveList+0x7c>)
 800e3ac:	681a      	ldr	r2, [r3, #0]
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	3304      	adds	r3, #4
 800e3b2:	4619      	mov	r1, r3
 800e3b4:	4610      	mov	r0, r2
 800e3b6:	f7fd fe0c 	bl	800bfd2 <vListInsert>
 800e3ba:	e012      	b.n	800e3e2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e3bc:	687a      	ldr	r2, [r7, #4]
 800e3be:	683b      	ldr	r3, [r7, #0]
 800e3c0:	429a      	cmp	r2, r3
 800e3c2:	d206      	bcs.n	800e3d2 <prvInsertTimerInActiveList+0x62>
 800e3c4:	68ba      	ldr	r2, [r7, #8]
 800e3c6:	683b      	ldr	r3, [r7, #0]
 800e3c8:	429a      	cmp	r2, r3
 800e3ca:	d302      	bcc.n	800e3d2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e3cc:	2301      	movs	r3, #1
 800e3ce:	617b      	str	r3, [r7, #20]
 800e3d0:	e007      	b.n	800e3e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e3d2:	4b07      	ldr	r3, [pc, #28]	@ (800e3f0 <prvInsertTimerInActiveList+0x80>)
 800e3d4:	681a      	ldr	r2, [r3, #0]
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	3304      	adds	r3, #4
 800e3da:	4619      	mov	r1, r3
 800e3dc:	4610      	mov	r0, r2
 800e3de:	f7fd fdf8 	bl	800bfd2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e3e2:	697b      	ldr	r3, [r7, #20]
}
 800e3e4:	4618      	mov	r0, r3
 800e3e6:	3718      	adds	r7, #24
 800e3e8:	46bd      	mov	sp, r7
 800e3ea:	bd80      	pop	{r7, pc}
 800e3ec:	20005584 	.word	0x20005584
 800e3f0:	20005580 	.word	0x20005580

0800e3f4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e3f4:	b580      	push	{r7, lr}
 800e3f6:	b08e      	sub	sp, #56	@ 0x38
 800e3f8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e3fa:	e0ce      	b.n	800e59a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	da19      	bge.n	800e436 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e402:	1d3b      	adds	r3, r7, #4
 800e404:	3304      	adds	r3, #4
 800e406:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800e408:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d10b      	bne.n	800e426 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800e40e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e412:	f383 8811 	msr	BASEPRI, r3
 800e416:	f3bf 8f6f 	isb	sy
 800e41a:	f3bf 8f4f 	dsb	sy
 800e41e:	61fb      	str	r3, [r7, #28]
}
 800e420:	bf00      	nop
 800e422:	bf00      	nop
 800e424:	e7fd      	b.n	800e422 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e426:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e42c:	6850      	ldr	r0, [r2, #4]
 800e42e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e430:	6892      	ldr	r2, [r2, #8]
 800e432:	4611      	mov	r1, r2
 800e434:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	2b00      	cmp	r3, #0
 800e43a:	f2c0 80ae 	blt.w	800e59a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e444:	695b      	ldr	r3, [r3, #20]
 800e446:	2b00      	cmp	r3, #0
 800e448:	d004      	beq.n	800e454 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e44a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e44c:	3304      	adds	r3, #4
 800e44e:	4618      	mov	r0, r3
 800e450:	f7fd fdf8 	bl	800c044 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e454:	463b      	mov	r3, r7
 800e456:	4618      	mov	r0, r3
 800e458:	f7ff ff6a 	bl	800e330 <prvSampleTimeNow>
 800e45c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	2b09      	cmp	r3, #9
 800e462:	f200 8097 	bhi.w	800e594 <prvProcessReceivedCommands+0x1a0>
 800e466:	a201      	add	r2, pc, #4	@ (adr r2, 800e46c <prvProcessReceivedCommands+0x78>)
 800e468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e46c:	0800e495 	.word	0x0800e495
 800e470:	0800e495 	.word	0x0800e495
 800e474:	0800e495 	.word	0x0800e495
 800e478:	0800e50b 	.word	0x0800e50b
 800e47c:	0800e51f 	.word	0x0800e51f
 800e480:	0800e56b 	.word	0x0800e56b
 800e484:	0800e495 	.word	0x0800e495
 800e488:	0800e495 	.word	0x0800e495
 800e48c:	0800e50b 	.word	0x0800e50b
 800e490:	0800e51f 	.word	0x0800e51f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e494:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e496:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e49a:	f043 0301 	orr.w	r3, r3, #1
 800e49e:	b2da      	uxtb	r2, r3
 800e4a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e4a2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e4a6:	68ba      	ldr	r2, [r7, #8]
 800e4a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e4aa:	699b      	ldr	r3, [r3, #24]
 800e4ac:	18d1      	adds	r1, r2, r3
 800e4ae:	68bb      	ldr	r3, [r7, #8]
 800e4b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e4b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e4b4:	f7ff ff5c 	bl	800e370 <prvInsertTimerInActiveList>
 800e4b8:	4603      	mov	r3, r0
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d06c      	beq.n	800e598 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e4be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e4c0:	6a1b      	ldr	r3, [r3, #32]
 800e4c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e4c4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e4c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e4c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e4cc:	f003 0304 	and.w	r3, r3, #4
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d061      	beq.n	800e598 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e4d4:	68ba      	ldr	r2, [r7, #8]
 800e4d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e4d8:	699b      	ldr	r3, [r3, #24]
 800e4da:	441a      	add	r2, r3
 800e4dc:	2300      	movs	r3, #0
 800e4de:	9300      	str	r3, [sp, #0]
 800e4e0:	2300      	movs	r3, #0
 800e4e2:	2100      	movs	r1, #0
 800e4e4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e4e6:	f7ff fe01 	bl	800e0ec <xTimerGenericCommand>
 800e4ea:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800e4ec:	6a3b      	ldr	r3, [r7, #32]
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d152      	bne.n	800e598 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800e4f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4f6:	f383 8811 	msr	BASEPRI, r3
 800e4fa:	f3bf 8f6f 	isb	sy
 800e4fe:	f3bf 8f4f 	dsb	sy
 800e502:	61bb      	str	r3, [r7, #24]
}
 800e504:	bf00      	nop
 800e506:	bf00      	nop
 800e508:	e7fd      	b.n	800e506 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e50a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e50c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e510:	f023 0301 	bic.w	r3, r3, #1
 800e514:	b2da      	uxtb	r2, r3
 800e516:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e518:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800e51c:	e03d      	b.n	800e59a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e51e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e520:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e524:	f043 0301 	orr.w	r3, r3, #1
 800e528:	b2da      	uxtb	r2, r3
 800e52a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e52c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e530:	68ba      	ldr	r2, [r7, #8]
 800e532:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e534:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e536:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e538:	699b      	ldr	r3, [r3, #24]
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d10b      	bne.n	800e556 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800e53e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e542:	f383 8811 	msr	BASEPRI, r3
 800e546:	f3bf 8f6f 	isb	sy
 800e54a:	f3bf 8f4f 	dsb	sy
 800e54e:	617b      	str	r3, [r7, #20]
}
 800e550:	bf00      	nop
 800e552:	bf00      	nop
 800e554:	e7fd      	b.n	800e552 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e556:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e558:	699a      	ldr	r2, [r3, #24]
 800e55a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e55c:	18d1      	adds	r1, r2, r3
 800e55e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e560:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e562:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e564:	f7ff ff04 	bl	800e370 <prvInsertTimerInActiveList>
					break;
 800e568:	e017      	b.n	800e59a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e56a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e56c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e570:	f003 0302 	and.w	r3, r3, #2
 800e574:	2b00      	cmp	r3, #0
 800e576:	d103      	bne.n	800e580 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800e578:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e57a:	f000 fbe5 	bl	800ed48 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e57e:	e00c      	b.n	800e59a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e580:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e582:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e586:	f023 0301 	bic.w	r3, r3, #1
 800e58a:	b2da      	uxtb	r2, r3
 800e58c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e58e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800e592:	e002      	b.n	800e59a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800e594:	bf00      	nop
 800e596:	e000      	b.n	800e59a <prvProcessReceivedCommands+0x1a6>
					break;
 800e598:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e59a:	4b08      	ldr	r3, [pc, #32]	@ (800e5bc <prvProcessReceivedCommands+0x1c8>)
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	1d39      	adds	r1, r7, #4
 800e5a0:	2200      	movs	r2, #0
 800e5a2:	4618      	mov	r0, r3
 800e5a4:	f7fe f916 	bl	800c7d4 <xQueueReceive>
 800e5a8:	4603      	mov	r3, r0
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	f47f af26 	bne.w	800e3fc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800e5b0:	bf00      	nop
 800e5b2:	bf00      	nop
 800e5b4:	3730      	adds	r7, #48	@ 0x30
 800e5b6:	46bd      	mov	sp, r7
 800e5b8:	bd80      	pop	{r7, pc}
 800e5ba:	bf00      	nop
 800e5bc:	20005588 	.word	0x20005588

0800e5c0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e5c0:	b580      	push	{r7, lr}
 800e5c2:	b088      	sub	sp, #32
 800e5c4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e5c6:	e049      	b.n	800e65c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e5c8:	4b2e      	ldr	r3, [pc, #184]	@ (800e684 <prvSwitchTimerLists+0xc4>)
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	68db      	ldr	r3, [r3, #12]
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e5d2:	4b2c      	ldr	r3, [pc, #176]	@ (800e684 <prvSwitchTimerLists+0xc4>)
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	68db      	ldr	r3, [r3, #12]
 800e5d8:	68db      	ldr	r3, [r3, #12]
 800e5da:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	3304      	adds	r3, #4
 800e5e0:	4618      	mov	r0, r3
 800e5e2:	f7fd fd2f 	bl	800c044 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	6a1b      	ldr	r3, [r3, #32]
 800e5ea:	68f8      	ldr	r0, [r7, #12]
 800e5ec:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e5ee:	68fb      	ldr	r3, [r7, #12]
 800e5f0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e5f4:	f003 0304 	and.w	r3, r3, #4
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d02f      	beq.n	800e65c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	699b      	ldr	r3, [r3, #24]
 800e600:	693a      	ldr	r2, [r7, #16]
 800e602:	4413      	add	r3, r2
 800e604:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e606:	68ba      	ldr	r2, [r7, #8]
 800e608:	693b      	ldr	r3, [r7, #16]
 800e60a:	429a      	cmp	r2, r3
 800e60c:	d90e      	bls.n	800e62c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	68ba      	ldr	r2, [r7, #8]
 800e612:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	68fa      	ldr	r2, [r7, #12]
 800e618:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e61a:	4b1a      	ldr	r3, [pc, #104]	@ (800e684 <prvSwitchTimerLists+0xc4>)
 800e61c:	681a      	ldr	r2, [r3, #0]
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	3304      	adds	r3, #4
 800e622:	4619      	mov	r1, r3
 800e624:	4610      	mov	r0, r2
 800e626:	f7fd fcd4 	bl	800bfd2 <vListInsert>
 800e62a:	e017      	b.n	800e65c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e62c:	2300      	movs	r3, #0
 800e62e:	9300      	str	r3, [sp, #0]
 800e630:	2300      	movs	r3, #0
 800e632:	693a      	ldr	r2, [r7, #16]
 800e634:	2100      	movs	r1, #0
 800e636:	68f8      	ldr	r0, [r7, #12]
 800e638:	f7ff fd58 	bl	800e0ec <xTimerGenericCommand>
 800e63c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	2b00      	cmp	r3, #0
 800e642:	d10b      	bne.n	800e65c <prvSwitchTimerLists+0x9c>
	__asm volatile
 800e644:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e648:	f383 8811 	msr	BASEPRI, r3
 800e64c:	f3bf 8f6f 	isb	sy
 800e650:	f3bf 8f4f 	dsb	sy
 800e654:	603b      	str	r3, [r7, #0]
}
 800e656:	bf00      	nop
 800e658:	bf00      	nop
 800e65a:	e7fd      	b.n	800e658 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e65c:	4b09      	ldr	r3, [pc, #36]	@ (800e684 <prvSwitchTimerLists+0xc4>)
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	2b00      	cmp	r3, #0
 800e664:	d1b0      	bne.n	800e5c8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e666:	4b07      	ldr	r3, [pc, #28]	@ (800e684 <prvSwitchTimerLists+0xc4>)
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e66c:	4b06      	ldr	r3, [pc, #24]	@ (800e688 <prvSwitchTimerLists+0xc8>)
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	4a04      	ldr	r2, [pc, #16]	@ (800e684 <prvSwitchTimerLists+0xc4>)
 800e672:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e674:	4a04      	ldr	r2, [pc, #16]	@ (800e688 <prvSwitchTimerLists+0xc8>)
 800e676:	697b      	ldr	r3, [r7, #20]
 800e678:	6013      	str	r3, [r2, #0]
}
 800e67a:	bf00      	nop
 800e67c:	3718      	adds	r7, #24
 800e67e:	46bd      	mov	sp, r7
 800e680:	bd80      	pop	{r7, pc}
 800e682:	bf00      	nop
 800e684:	20005580 	.word	0x20005580
 800e688:	20005584 	.word	0x20005584

0800e68c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e68c:	b580      	push	{r7, lr}
 800e68e:	b082      	sub	sp, #8
 800e690:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e692:	f000 f969 	bl	800e968 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e696:	4b15      	ldr	r3, [pc, #84]	@ (800e6ec <prvCheckForValidListAndQueue+0x60>)
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d120      	bne.n	800e6e0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e69e:	4814      	ldr	r0, [pc, #80]	@ (800e6f0 <prvCheckForValidListAndQueue+0x64>)
 800e6a0:	f7fd fc46 	bl	800bf30 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e6a4:	4813      	ldr	r0, [pc, #76]	@ (800e6f4 <prvCheckForValidListAndQueue+0x68>)
 800e6a6:	f7fd fc43 	bl	800bf30 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e6aa:	4b13      	ldr	r3, [pc, #76]	@ (800e6f8 <prvCheckForValidListAndQueue+0x6c>)
 800e6ac:	4a10      	ldr	r2, [pc, #64]	@ (800e6f0 <prvCheckForValidListAndQueue+0x64>)
 800e6ae:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e6b0:	4b12      	ldr	r3, [pc, #72]	@ (800e6fc <prvCheckForValidListAndQueue+0x70>)
 800e6b2:	4a10      	ldr	r2, [pc, #64]	@ (800e6f4 <prvCheckForValidListAndQueue+0x68>)
 800e6b4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e6b6:	2300      	movs	r3, #0
 800e6b8:	9300      	str	r3, [sp, #0]
 800e6ba:	4b11      	ldr	r3, [pc, #68]	@ (800e700 <prvCheckForValidListAndQueue+0x74>)
 800e6bc:	4a11      	ldr	r2, [pc, #68]	@ (800e704 <prvCheckForValidListAndQueue+0x78>)
 800e6be:	2110      	movs	r1, #16
 800e6c0:	200a      	movs	r0, #10
 800e6c2:	f7fd fd53 	bl	800c16c <xQueueGenericCreateStatic>
 800e6c6:	4603      	mov	r3, r0
 800e6c8:	4a08      	ldr	r2, [pc, #32]	@ (800e6ec <prvCheckForValidListAndQueue+0x60>)
 800e6ca:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e6cc:	4b07      	ldr	r3, [pc, #28]	@ (800e6ec <prvCheckForValidListAndQueue+0x60>)
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d005      	beq.n	800e6e0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e6d4:	4b05      	ldr	r3, [pc, #20]	@ (800e6ec <prvCheckForValidListAndQueue+0x60>)
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	490b      	ldr	r1, [pc, #44]	@ (800e708 <prvCheckForValidListAndQueue+0x7c>)
 800e6da:	4618      	mov	r0, r3
 800e6dc:	f7fe fb94 	bl	800ce08 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e6e0:	f000 f974 	bl	800e9cc <vPortExitCritical>
}
 800e6e4:	bf00      	nop
 800e6e6:	46bd      	mov	sp, r7
 800e6e8:	bd80      	pop	{r7, pc}
 800e6ea:	bf00      	nop
 800e6ec:	20005588 	.word	0x20005588
 800e6f0:	20005558 	.word	0x20005558
 800e6f4:	2000556c 	.word	0x2000556c
 800e6f8:	20005580 	.word	0x20005580
 800e6fc:	20005584 	.word	0x20005584
 800e700:	20005634 	.word	0x20005634
 800e704:	20005594 	.word	0x20005594
 800e708:	08011470 	.word	0x08011470

0800e70c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e70c:	b480      	push	{r7}
 800e70e:	b085      	sub	sp, #20
 800e710:	af00      	add	r7, sp, #0
 800e712:	60f8      	str	r0, [r7, #12]
 800e714:	60b9      	str	r1, [r7, #8]
 800e716:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	3b04      	subs	r3, #4
 800e71c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800e724:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	3b04      	subs	r3, #4
 800e72a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e72c:	68bb      	ldr	r3, [r7, #8]
 800e72e:	f023 0201 	bic.w	r2, r3, #1
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	3b04      	subs	r3, #4
 800e73a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e73c:	4a0c      	ldr	r2, [pc, #48]	@ (800e770 <pxPortInitialiseStack+0x64>)
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e742:	68fb      	ldr	r3, [r7, #12]
 800e744:	3b14      	subs	r3, #20
 800e746:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e748:	687a      	ldr	r2, [r7, #4]
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	3b04      	subs	r3, #4
 800e752:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	f06f 0202 	mvn.w	r2, #2
 800e75a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	3b20      	subs	r3, #32
 800e760:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e762:	68fb      	ldr	r3, [r7, #12]
}
 800e764:	4618      	mov	r0, r3
 800e766:	3714      	adds	r7, #20
 800e768:	46bd      	mov	sp, r7
 800e76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e76e:	4770      	bx	lr
 800e770:	0800e775 	.word	0x0800e775

0800e774 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e774:	b480      	push	{r7}
 800e776:	b085      	sub	sp, #20
 800e778:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e77a:	2300      	movs	r3, #0
 800e77c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e77e:	4b13      	ldr	r3, [pc, #76]	@ (800e7cc <prvTaskExitError+0x58>)
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e786:	d00b      	beq.n	800e7a0 <prvTaskExitError+0x2c>
	__asm volatile
 800e788:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e78c:	f383 8811 	msr	BASEPRI, r3
 800e790:	f3bf 8f6f 	isb	sy
 800e794:	f3bf 8f4f 	dsb	sy
 800e798:	60fb      	str	r3, [r7, #12]
}
 800e79a:	bf00      	nop
 800e79c:	bf00      	nop
 800e79e:	e7fd      	b.n	800e79c <prvTaskExitError+0x28>
	__asm volatile
 800e7a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7a4:	f383 8811 	msr	BASEPRI, r3
 800e7a8:	f3bf 8f6f 	isb	sy
 800e7ac:	f3bf 8f4f 	dsb	sy
 800e7b0:	60bb      	str	r3, [r7, #8]
}
 800e7b2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e7b4:	bf00      	nop
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	d0fc      	beq.n	800e7b6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e7bc:	bf00      	nop
 800e7be:	bf00      	nop
 800e7c0:	3714      	adds	r7, #20
 800e7c2:	46bd      	mov	sp, r7
 800e7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7c8:	4770      	bx	lr
 800e7ca:	bf00      	nop
 800e7cc:	2000013c 	.word	0x2000013c

0800e7d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e7d0:	4b07      	ldr	r3, [pc, #28]	@ (800e7f0 <pxCurrentTCBConst2>)
 800e7d2:	6819      	ldr	r1, [r3, #0]
 800e7d4:	6808      	ldr	r0, [r1, #0]
 800e7d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7da:	f380 8809 	msr	PSP, r0
 800e7de:	f3bf 8f6f 	isb	sy
 800e7e2:	f04f 0000 	mov.w	r0, #0
 800e7e6:	f380 8811 	msr	BASEPRI, r0
 800e7ea:	4770      	bx	lr
 800e7ec:	f3af 8000 	nop.w

0800e7f0 <pxCurrentTCBConst2>:
 800e7f0:	20005058 	.word	0x20005058
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e7f4:	bf00      	nop
 800e7f6:	bf00      	nop

0800e7f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e7f8:	4808      	ldr	r0, [pc, #32]	@ (800e81c <prvPortStartFirstTask+0x24>)
 800e7fa:	6800      	ldr	r0, [r0, #0]
 800e7fc:	6800      	ldr	r0, [r0, #0]
 800e7fe:	f380 8808 	msr	MSP, r0
 800e802:	f04f 0000 	mov.w	r0, #0
 800e806:	f380 8814 	msr	CONTROL, r0
 800e80a:	b662      	cpsie	i
 800e80c:	b661      	cpsie	f
 800e80e:	f3bf 8f4f 	dsb	sy
 800e812:	f3bf 8f6f 	isb	sy
 800e816:	df00      	svc	0
 800e818:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e81a:	bf00      	nop
 800e81c:	e000ed08 	.word	0xe000ed08

0800e820 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e820:	b580      	push	{r7, lr}
 800e822:	b086      	sub	sp, #24
 800e824:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e826:	4b47      	ldr	r3, [pc, #284]	@ (800e944 <xPortStartScheduler+0x124>)
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	4a47      	ldr	r2, [pc, #284]	@ (800e948 <xPortStartScheduler+0x128>)
 800e82c:	4293      	cmp	r3, r2
 800e82e:	d10b      	bne.n	800e848 <xPortStartScheduler+0x28>
	__asm volatile
 800e830:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e834:	f383 8811 	msr	BASEPRI, r3
 800e838:	f3bf 8f6f 	isb	sy
 800e83c:	f3bf 8f4f 	dsb	sy
 800e840:	613b      	str	r3, [r7, #16]
}
 800e842:	bf00      	nop
 800e844:	bf00      	nop
 800e846:	e7fd      	b.n	800e844 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e848:	4b3e      	ldr	r3, [pc, #248]	@ (800e944 <xPortStartScheduler+0x124>)
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	4a3f      	ldr	r2, [pc, #252]	@ (800e94c <xPortStartScheduler+0x12c>)
 800e84e:	4293      	cmp	r3, r2
 800e850:	d10b      	bne.n	800e86a <xPortStartScheduler+0x4a>
	__asm volatile
 800e852:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e856:	f383 8811 	msr	BASEPRI, r3
 800e85a:	f3bf 8f6f 	isb	sy
 800e85e:	f3bf 8f4f 	dsb	sy
 800e862:	60fb      	str	r3, [r7, #12]
}
 800e864:	bf00      	nop
 800e866:	bf00      	nop
 800e868:	e7fd      	b.n	800e866 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e86a:	4b39      	ldr	r3, [pc, #228]	@ (800e950 <xPortStartScheduler+0x130>)
 800e86c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e86e:	697b      	ldr	r3, [r7, #20]
 800e870:	781b      	ldrb	r3, [r3, #0]
 800e872:	b2db      	uxtb	r3, r3
 800e874:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e876:	697b      	ldr	r3, [r7, #20]
 800e878:	22ff      	movs	r2, #255	@ 0xff
 800e87a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e87c:	697b      	ldr	r3, [r7, #20]
 800e87e:	781b      	ldrb	r3, [r3, #0]
 800e880:	b2db      	uxtb	r3, r3
 800e882:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e884:	78fb      	ldrb	r3, [r7, #3]
 800e886:	b2db      	uxtb	r3, r3
 800e888:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800e88c:	b2da      	uxtb	r2, r3
 800e88e:	4b31      	ldr	r3, [pc, #196]	@ (800e954 <xPortStartScheduler+0x134>)
 800e890:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e892:	4b31      	ldr	r3, [pc, #196]	@ (800e958 <xPortStartScheduler+0x138>)
 800e894:	2207      	movs	r2, #7
 800e896:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e898:	e009      	b.n	800e8ae <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800e89a:	4b2f      	ldr	r3, [pc, #188]	@ (800e958 <xPortStartScheduler+0x138>)
 800e89c:	681b      	ldr	r3, [r3, #0]
 800e89e:	3b01      	subs	r3, #1
 800e8a0:	4a2d      	ldr	r2, [pc, #180]	@ (800e958 <xPortStartScheduler+0x138>)
 800e8a2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e8a4:	78fb      	ldrb	r3, [r7, #3]
 800e8a6:	b2db      	uxtb	r3, r3
 800e8a8:	005b      	lsls	r3, r3, #1
 800e8aa:	b2db      	uxtb	r3, r3
 800e8ac:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e8ae:	78fb      	ldrb	r3, [r7, #3]
 800e8b0:	b2db      	uxtb	r3, r3
 800e8b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e8b6:	2b80      	cmp	r3, #128	@ 0x80
 800e8b8:	d0ef      	beq.n	800e89a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e8ba:	4b27      	ldr	r3, [pc, #156]	@ (800e958 <xPortStartScheduler+0x138>)
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	f1c3 0307 	rsb	r3, r3, #7
 800e8c2:	2b04      	cmp	r3, #4
 800e8c4:	d00b      	beq.n	800e8de <xPortStartScheduler+0xbe>
	__asm volatile
 800e8c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8ca:	f383 8811 	msr	BASEPRI, r3
 800e8ce:	f3bf 8f6f 	isb	sy
 800e8d2:	f3bf 8f4f 	dsb	sy
 800e8d6:	60bb      	str	r3, [r7, #8]
}
 800e8d8:	bf00      	nop
 800e8da:	bf00      	nop
 800e8dc:	e7fd      	b.n	800e8da <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e8de:	4b1e      	ldr	r3, [pc, #120]	@ (800e958 <xPortStartScheduler+0x138>)
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	021b      	lsls	r3, r3, #8
 800e8e4:	4a1c      	ldr	r2, [pc, #112]	@ (800e958 <xPortStartScheduler+0x138>)
 800e8e6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e8e8:	4b1b      	ldr	r3, [pc, #108]	@ (800e958 <xPortStartScheduler+0x138>)
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800e8f0:	4a19      	ldr	r2, [pc, #100]	@ (800e958 <xPortStartScheduler+0x138>)
 800e8f2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	b2da      	uxtb	r2, r3
 800e8f8:	697b      	ldr	r3, [r7, #20]
 800e8fa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e8fc:	4b17      	ldr	r3, [pc, #92]	@ (800e95c <xPortStartScheduler+0x13c>)
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	4a16      	ldr	r2, [pc, #88]	@ (800e95c <xPortStartScheduler+0x13c>)
 800e902:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800e906:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e908:	4b14      	ldr	r3, [pc, #80]	@ (800e95c <xPortStartScheduler+0x13c>)
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	4a13      	ldr	r2, [pc, #76]	@ (800e95c <xPortStartScheduler+0x13c>)
 800e90e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800e912:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e914:	f000 f8da 	bl	800eacc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e918:	4b11      	ldr	r3, [pc, #68]	@ (800e960 <xPortStartScheduler+0x140>)
 800e91a:	2200      	movs	r2, #0
 800e91c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e91e:	f000 f8f9 	bl	800eb14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e922:	4b10      	ldr	r3, [pc, #64]	@ (800e964 <xPortStartScheduler+0x144>)
 800e924:	681b      	ldr	r3, [r3, #0]
 800e926:	4a0f      	ldr	r2, [pc, #60]	@ (800e964 <xPortStartScheduler+0x144>)
 800e928:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800e92c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e92e:	f7ff ff63 	bl	800e7f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e932:	f7fe ff21 	bl	800d778 <vTaskSwitchContext>
	prvTaskExitError();
 800e936:	f7ff ff1d 	bl	800e774 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e93a:	2300      	movs	r3, #0
}
 800e93c:	4618      	mov	r0, r3
 800e93e:	3718      	adds	r7, #24
 800e940:	46bd      	mov	sp, r7
 800e942:	bd80      	pop	{r7, pc}
 800e944:	e000ed00 	.word	0xe000ed00
 800e948:	410fc271 	.word	0x410fc271
 800e94c:	410fc270 	.word	0x410fc270
 800e950:	e000e400 	.word	0xe000e400
 800e954:	20005684 	.word	0x20005684
 800e958:	20005688 	.word	0x20005688
 800e95c:	e000ed20 	.word	0xe000ed20
 800e960:	2000013c 	.word	0x2000013c
 800e964:	e000ef34 	.word	0xe000ef34

0800e968 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e968:	b480      	push	{r7}
 800e96a:	b083      	sub	sp, #12
 800e96c:	af00      	add	r7, sp, #0
	__asm volatile
 800e96e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e972:	f383 8811 	msr	BASEPRI, r3
 800e976:	f3bf 8f6f 	isb	sy
 800e97a:	f3bf 8f4f 	dsb	sy
 800e97e:	607b      	str	r3, [r7, #4]
}
 800e980:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e982:	4b10      	ldr	r3, [pc, #64]	@ (800e9c4 <vPortEnterCritical+0x5c>)
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	3301      	adds	r3, #1
 800e988:	4a0e      	ldr	r2, [pc, #56]	@ (800e9c4 <vPortEnterCritical+0x5c>)
 800e98a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e98c:	4b0d      	ldr	r3, [pc, #52]	@ (800e9c4 <vPortEnterCritical+0x5c>)
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	2b01      	cmp	r3, #1
 800e992:	d110      	bne.n	800e9b6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e994:	4b0c      	ldr	r3, [pc, #48]	@ (800e9c8 <vPortEnterCritical+0x60>)
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	b2db      	uxtb	r3, r3
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d00b      	beq.n	800e9b6 <vPortEnterCritical+0x4e>
	__asm volatile
 800e99e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e9a2:	f383 8811 	msr	BASEPRI, r3
 800e9a6:	f3bf 8f6f 	isb	sy
 800e9aa:	f3bf 8f4f 	dsb	sy
 800e9ae:	603b      	str	r3, [r7, #0]
}
 800e9b0:	bf00      	nop
 800e9b2:	bf00      	nop
 800e9b4:	e7fd      	b.n	800e9b2 <vPortEnterCritical+0x4a>
	}
}
 800e9b6:	bf00      	nop
 800e9b8:	370c      	adds	r7, #12
 800e9ba:	46bd      	mov	sp, r7
 800e9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9c0:	4770      	bx	lr
 800e9c2:	bf00      	nop
 800e9c4:	2000013c 	.word	0x2000013c
 800e9c8:	e000ed04 	.word	0xe000ed04

0800e9cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e9cc:	b480      	push	{r7}
 800e9ce:	b083      	sub	sp, #12
 800e9d0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e9d2:	4b12      	ldr	r3, [pc, #72]	@ (800ea1c <vPortExitCritical+0x50>)
 800e9d4:	681b      	ldr	r3, [r3, #0]
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d10b      	bne.n	800e9f2 <vPortExitCritical+0x26>
	__asm volatile
 800e9da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e9de:	f383 8811 	msr	BASEPRI, r3
 800e9e2:	f3bf 8f6f 	isb	sy
 800e9e6:	f3bf 8f4f 	dsb	sy
 800e9ea:	607b      	str	r3, [r7, #4]
}
 800e9ec:	bf00      	nop
 800e9ee:	bf00      	nop
 800e9f0:	e7fd      	b.n	800e9ee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e9f2:	4b0a      	ldr	r3, [pc, #40]	@ (800ea1c <vPortExitCritical+0x50>)
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	3b01      	subs	r3, #1
 800e9f8:	4a08      	ldr	r2, [pc, #32]	@ (800ea1c <vPortExitCritical+0x50>)
 800e9fa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e9fc:	4b07      	ldr	r3, [pc, #28]	@ (800ea1c <vPortExitCritical+0x50>)
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d105      	bne.n	800ea10 <vPortExitCritical+0x44>
 800ea04:	2300      	movs	r3, #0
 800ea06:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ea08:	683b      	ldr	r3, [r7, #0]
 800ea0a:	f383 8811 	msr	BASEPRI, r3
}
 800ea0e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ea10:	bf00      	nop
 800ea12:	370c      	adds	r7, #12
 800ea14:	46bd      	mov	sp, r7
 800ea16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea1a:	4770      	bx	lr
 800ea1c:	2000013c 	.word	0x2000013c

0800ea20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ea20:	f3ef 8009 	mrs	r0, PSP
 800ea24:	f3bf 8f6f 	isb	sy
 800ea28:	4b15      	ldr	r3, [pc, #84]	@ (800ea80 <pxCurrentTCBConst>)
 800ea2a:	681a      	ldr	r2, [r3, #0]
 800ea2c:	f01e 0f10 	tst.w	lr, #16
 800ea30:	bf08      	it	eq
 800ea32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ea36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea3a:	6010      	str	r0, [r2, #0]
 800ea3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ea40:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800ea44:	f380 8811 	msr	BASEPRI, r0
 800ea48:	f3bf 8f4f 	dsb	sy
 800ea4c:	f3bf 8f6f 	isb	sy
 800ea50:	f7fe fe92 	bl	800d778 <vTaskSwitchContext>
 800ea54:	f04f 0000 	mov.w	r0, #0
 800ea58:	f380 8811 	msr	BASEPRI, r0
 800ea5c:	bc09      	pop	{r0, r3}
 800ea5e:	6819      	ldr	r1, [r3, #0]
 800ea60:	6808      	ldr	r0, [r1, #0]
 800ea62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea66:	f01e 0f10 	tst.w	lr, #16
 800ea6a:	bf08      	it	eq
 800ea6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ea70:	f380 8809 	msr	PSP, r0
 800ea74:	f3bf 8f6f 	isb	sy
 800ea78:	4770      	bx	lr
 800ea7a:	bf00      	nop
 800ea7c:	f3af 8000 	nop.w

0800ea80 <pxCurrentTCBConst>:
 800ea80:	20005058 	.word	0x20005058
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ea84:	bf00      	nop
 800ea86:	bf00      	nop

0800ea88 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ea88:	b580      	push	{r7, lr}
 800ea8a:	b082      	sub	sp, #8
 800ea8c:	af00      	add	r7, sp, #0
	__asm volatile
 800ea8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea92:	f383 8811 	msr	BASEPRI, r3
 800ea96:	f3bf 8f6f 	isb	sy
 800ea9a:	f3bf 8f4f 	dsb	sy
 800ea9e:	607b      	str	r3, [r7, #4]
}
 800eaa0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800eaa2:	f7fe fdaf 	bl	800d604 <xTaskIncrementTick>
 800eaa6:	4603      	mov	r3, r0
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d003      	beq.n	800eab4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800eaac:	4b06      	ldr	r3, [pc, #24]	@ (800eac8 <xPortSysTickHandler+0x40>)
 800eaae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800eab2:	601a      	str	r2, [r3, #0]
 800eab4:	2300      	movs	r3, #0
 800eab6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800eab8:	683b      	ldr	r3, [r7, #0]
 800eaba:	f383 8811 	msr	BASEPRI, r3
}
 800eabe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800eac0:	bf00      	nop
 800eac2:	3708      	adds	r7, #8
 800eac4:	46bd      	mov	sp, r7
 800eac6:	bd80      	pop	{r7, pc}
 800eac8:	e000ed04 	.word	0xe000ed04

0800eacc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800eacc:	b480      	push	{r7}
 800eace:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ead0:	4b0b      	ldr	r3, [pc, #44]	@ (800eb00 <vPortSetupTimerInterrupt+0x34>)
 800ead2:	2200      	movs	r2, #0
 800ead4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ead6:	4b0b      	ldr	r3, [pc, #44]	@ (800eb04 <vPortSetupTimerInterrupt+0x38>)
 800ead8:	2200      	movs	r2, #0
 800eada:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800eadc:	4b0a      	ldr	r3, [pc, #40]	@ (800eb08 <vPortSetupTimerInterrupt+0x3c>)
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	4a0a      	ldr	r2, [pc, #40]	@ (800eb0c <vPortSetupTimerInterrupt+0x40>)
 800eae2:	fba2 2303 	umull	r2, r3, r2, r3
 800eae6:	099b      	lsrs	r3, r3, #6
 800eae8:	4a09      	ldr	r2, [pc, #36]	@ (800eb10 <vPortSetupTimerInterrupt+0x44>)
 800eaea:	3b01      	subs	r3, #1
 800eaec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800eaee:	4b04      	ldr	r3, [pc, #16]	@ (800eb00 <vPortSetupTimerInterrupt+0x34>)
 800eaf0:	2207      	movs	r2, #7
 800eaf2:	601a      	str	r2, [r3, #0]
}
 800eaf4:	bf00      	nop
 800eaf6:	46bd      	mov	sp, r7
 800eaf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eafc:	4770      	bx	lr
 800eafe:	bf00      	nop
 800eb00:	e000e010 	.word	0xe000e010
 800eb04:	e000e018 	.word	0xe000e018
 800eb08:	20000020 	.word	0x20000020
 800eb0c:	10624dd3 	.word	0x10624dd3
 800eb10:	e000e014 	.word	0xe000e014

0800eb14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800eb14:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800eb24 <vPortEnableVFP+0x10>
 800eb18:	6801      	ldr	r1, [r0, #0]
 800eb1a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800eb1e:	6001      	str	r1, [r0, #0]
 800eb20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800eb22:	bf00      	nop
 800eb24:	e000ed88 	.word	0xe000ed88

0800eb28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800eb28:	b480      	push	{r7}
 800eb2a:	b085      	sub	sp, #20
 800eb2c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800eb2e:	f3ef 8305 	mrs	r3, IPSR
 800eb32:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	2b0f      	cmp	r3, #15
 800eb38:	d915      	bls.n	800eb66 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800eb3a:	4a18      	ldr	r2, [pc, #96]	@ (800eb9c <vPortValidateInterruptPriority+0x74>)
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	4413      	add	r3, r2
 800eb40:	781b      	ldrb	r3, [r3, #0]
 800eb42:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800eb44:	4b16      	ldr	r3, [pc, #88]	@ (800eba0 <vPortValidateInterruptPriority+0x78>)
 800eb46:	781b      	ldrb	r3, [r3, #0]
 800eb48:	7afa      	ldrb	r2, [r7, #11]
 800eb4a:	429a      	cmp	r2, r3
 800eb4c:	d20b      	bcs.n	800eb66 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800eb4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb52:	f383 8811 	msr	BASEPRI, r3
 800eb56:	f3bf 8f6f 	isb	sy
 800eb5a:	f3bf 8f4f 	dsb	sy
 800eb5e:	607b      	str	r3, [r7, #4]
}
 800eb60:	bf00      	nop
 800eb62:	bf00      	nop
 800eb64:	e7fd      	b.n	800eb62 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800eb66:	4b0f      	ldr	r3, [pc, #60]	@ (800eba4 <vPortValidateInterruptPriority+0x7c>)
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800eb6e:	4b0e      	ldr	r3, [pc, #56]	@ (800eba8 <vPortValidateInterruptPriority+0x80>)
 800eb70:	681b      	ldr	r3, [r3, #0]
 800eb72:	429a      	cmp	r2, r3
 800eb74:	d90b      	bls.n	800eb8e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800eb76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb7a:	f383 8811 	msr	BASEPRI, r3
 800eb7e:	f3bf 8f6f 	isb	sy
 800eb82:	f3bf 8f4f 	dsb	sy
 800eb86:	603b      	str	r3, [r7, #0]
}
 800eb88:	bf00      	nop
 800eb8a:	bf00      	nop
 800eb8c:	e7fd      	b.n	800eb8a <vPortValidateInterruptPriority+0x62>
	}
 800eb8e:	bf00      	nop
 800eb90:	3714      	adds	r7, #20
 800eb92:	46bd      	mov	sp, r7
 800eb94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb98:	4770      	bx	lr
 800eb9a:	bf00      	nop
 800eb9c:	e000e3f0 	.word	0xe000e3f0
 800eba0:	20005684 	.word	0x20005684
 800eba4:	e000ed0c 	.word	0xe000ed0c
 800eba8:	20005688 	.word	0x20005688

0800ebac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ebac:	b580      	push	{r7, lr}
 800ebae:	b08a      	sub	sp, #40	@ 0x28
 800ebb0:	af00      	add	r7, sp, #0
 800ebb2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ebb4:	2300      	movs	r3, #0
 800ebb6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ebb8:	f7fe fc68 	bl	800d48c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ebbc:	4b5c      	ldr	r3, [pc, #368]	@ (800ed30 <pvPortMalloc+0x184>)
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d101      	bne.n	800ebc8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ebc4:	f000 f924 	bl	800ee10 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ebc8:	4b5a      	ldr	r3, [pc, #360]	@ (800ed34 <pvPortMalloc+0x188>)
 800ebca:	681a      	ldr	r2, [r3, #0]
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	4013      	ands	r3, r2
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	f040 8095 	bne.w	800ed00 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d01e      	beq.n	800ec1a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800ebdc:	2208      	movs	r2, #8
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	4413      	add	r3, r2
 800ebe2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	f003 0307 	and.w	r3, r3, #7
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d015      	beq.n	800ec1a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	f023 0307 	bic.w	r3, r3, #7
 800ebf4:	3308      	adds	r3, #8
 800ebf6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	f003 0307 	and.w	r3, r3, #7
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	d00b      	beq.n	800ec1a <pvPortMalloc+0x6e>
	__asm volatile
 800ec02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec06:	f383 8811 	msr	BASEPRI, r3
 800ec0a:	f3bf 8f6f 	isb	sy
 800ec0e:	f3bf 8f4f 	dsb	sy
 800ec12:	617b      	str	r3, [r7, #20]
}
 800ec14:	bf00      	nop
 800ec16:	bf00      	nop
 800ec18:	e7fd      	b.n	800ec16 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d06f      	beq.n	800ed00 <pvPortMalloc+0x154>
 800ec20:	4b45      	ldr	r3, [pc, #276]	@ (800ed38 <pvPortMalloc+0x18c>)
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	687a      	ldr	r2, [r7, #4]
 800ec26:	429a      	cmp	r2, r3
 800ec28:	d86a      	bhi.n	800ed00 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ec2a:	4b44      	ldr	r3, [pc, #272]	@ (800ed3c <pvPortMalloc+0x190>)
 800ec2c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ec2e:	4b43      	ldr	r3, [pc, #268]	@ (800ed3c <pvPortMalloc+0x190>)
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ec34:	e004      	b.n	800ec40 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800ec36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec38:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ec3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ec40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec42:	685b      	ldr	r3, [r3, #4]
 800ec44:	687a      	ldr	r2, [r7, #4]
 800ec46:	429a      	cmp	r2, r3
 800ec48:	d903      	bls.n	800ec52 <pvPortMalloc+0xa6>
 800ec4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d1f1      	bne.n	800ec36 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ec52:	4b37      	ldr	r3, [pc, #220]	@ (800ed30 <pvPortMalloc+0x184>)
 800ec54:	681b      	ldr	r3, [r3, #0]
 800ec56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ec58:	429a      	cmp	r2, r3
 800ec5a:	d051      	beq.n	800ed00 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ec5c:	6a3b      	ldr	r3, [r7, #32]
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	2208      	movs	r2, #8
 800ec62:	4413      	add	r3, r2
 800ec64:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ec66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec68:	681a      	ldr	r2, [r3, #0]
 800ec6a:	6a3b      	ldr	r3, [r7, #32]
 800ec6c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ec6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec70:	685a      	ldr	r2, [r3, #4]
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	1ad2      	subs	r2, r2, r3
 800ec76:	2308      	movs	r3, #8
 800ec78:	005b      	lsls	r3, r3, #1
 800ec7a:	429a      	cmp	r2, r3
 800ec7c:	d920      	bls.n	800ecc0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ec7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	4413      	add	r3, r2
 800ec84:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ec86:	69bb      	ldr	r3, [r7, #24]
 800ec88:	f003 0307 	and.w	r3, r3, #7
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d00b      	beq.n	800eca8 <pvPortMalloc+0xfc>
	__asm volatile
 800ec90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec94:	f383 8811 	msr	BASEPRI, r3
 800ec98:	f3bf 8f6f 	isb	sy
 800ec9c:	f3bf 8f4f 	dsb	sy
 800eca0:	613b      	str	r3, [r7, #16]
}
 800eca2:	bf00      	nop
 800eca4:	bf00      	nop
 800eca6:	e7fd      	b.n	800eca4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800eca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ecaa:	685a      	ldr	r2, [r3, #4]
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	1ad2      	subs	r2, r2, r3
 800ecb0:	69bb      	ldr	r3, [r7, #24]
 800ecb2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ecb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ecb6:	687a      	ldr	r2, [r7, #4]
 800ecb8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ecba:	69b8      	ldr	r0, [r7, #24]
 800ecbc:	f000 f90a 	bl	800eed4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ecc0:	4b1d      	ldr	r3, [pc, #116]	@ (800ed38 <pvPortMalloc+0x18c>)
 800ecc2:	681a      	ldr	r2, [r3, #0]
 800ecc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ecc6:	685b      	ldr	r3, [r3, #4]
 800ecc8:	1ad3      	subs	r3, r2, r3
 800ecca:	4a1b      	ldr	r2, [pc, #108]	@ (800ed38 <pvPortMalloc+0x18c>)
 800eccc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ecce:	4b1a      	ldr	r3, [pc, #104]	@ (800ed38 <pvPortMalloc+0x18c>)
 800ecd0:	681a      	ldr	r2, [r3, #0]
 800ecd2:	4b1b      	ldr	r3, [pc, #108]	@ (800ed40 <pvPortMalloc+0x194>)
 800ecd4:	681b      	ldr	r3, [r3, #0]
 800ecd6:	429a      	cmp	r2, r3
 800ecd8:	d203      	bcs.n	800ece2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ecda:	4b17      	ldr	r3, [pc, #92]	@ (800ed38 <pvPortMalloc+0x18c>)
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	4a18      	ldr	r2, [pc, #96]	@ (800ed40 <pvPortMalloc+0x194>)
 800ece0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ece2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ece4:	685a      	ldr	r2, [r3, #4]
 800ece6:	4b13      	ldr	r3, [pc, #76]	@ (800ed34 <pvPortMalloc+0x188>)
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	431a      	orrs	r2, r3
 800ecec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ecee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ecf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ecf2:	2200      	movs	r2, #0
 800ecf4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ecf6:	4b13      	ldr	r3, [pc, #76]	@ (800ed44 <pvPortMalloc+0x198>)
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	3301      	adds	r3, #1
 800ecfc:	4a11      	ldr	r2, [pc, #68]	@ (800ed44 <pvPortMalloc+0x198>)
 800ecfe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ed00:	f7fe fbd2 	bl	800d4a8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ed04:	69fb      	ldr	r3, [r7, #28]
 800ed06:	f003 0307 	and.w	r3, r3, #7
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d00b      	beq.n	800ed26 <pvPortMalloc+0x17a>
	__asm volatile
 800ed0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed12:	f383 8811 	msr	BASEPRI, r3
 800ed16:	f3bf 8f6f 	isb	sy
 800ed1a:	f3bf 8f4f 	dsb	sy
 800ed1e:	60fb      	str	r3, [r7, #12]
}
 800ed20:	bf00      	nop
 800ed22:	bf00      	nop
 800ed24:	e7fd      	b.n	800ed22 <pvPortMalloc+0x176>
	return pvReturn;
 800ed26:	69fb      	ldr	r3, [r7, #28]
}
 800ed28:	4618      	mov	r0, r3
 800ed2a:	3728      	adds	r7, #40	@ 0x28
 800ed2c:	46bd      	mov	sp, r7
 800ed2e:	bd80      	pop	{r7, pc}
 800ed30:	20015094 	.word	0x20015094
 800ed34:	200150a8 	.word	0x200150a8
 800ed38:	20015098 	.word	0x20015098
 800ed3c:	2001508c 	.word	0x2001508c
 800ed40:	2001509c 	.word	0x2001509c
 800ed44:	200150a0 	.word	0x200150a0

0800ed48 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ed48:	b580      	push	{r7, lr}
 800ed4a:	b086      	sub	sp, #24
 800ed4c:	af00      	add	r7, sp, #0
 800ed4e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d04f      	beq.n	800edfa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ed5a:	2308      	movs	r3, #8
 800ed5c:	425b      	negs	r3, r3
 800ed5e:	697a      	ldr	r2, [r7, #20]
 800ed60:	4413      	add	r3, r2
 800ed62:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ed64:	697b      	ldr	r3, [r7, #20]
 800ed66:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ed68:	693b      	ldr	r3, [r7, #16]
 800ed6a:	685a      	ldr	r2, [r3, #4]
 800ed6c:	4b25      	ldr	r3, [pc, #148]	@ (800ee04 <vPortFree+0xbc>)
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	4013      	ands	r3, r2
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d10b      	bne.n	800ed8e <vPortFree+0x46>
	__asm volatile
 800ed76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed7a:	f383 8811 	msr	BASEPRI, r3
 800ed7e:	f3bf 8f6f 	isb	sy
 800ed82:	f3bf 8f4f 	dsb	sy
 800ed86:	60fb      	str	r3, [r7, #12]
}
 800ed88:	bf00      	nop
 800ed8a:	bf00      	nop
 800ed8c:	e7fd      	b.n	800ed8a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ed8e:	693b      	ldr	r3, [r7, #16]
 800ed90:	681b      	ldr	r3, [r3, #0]
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d00b      	beq.n	800edae <vPortFree+0x66>
	__asm volatile
 800ed96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed9a:	f383 8811 	msr	BASEPRI, r3
 800ed9e:	f3bf 8f6f 	isb	sy
 800eda2:	f3bf 8f4f 	dsb	sy
 800eda6:	60bb      	str	r3, [r7, #8]
}
 800eda8:	bf00      	nop
 800edaa:	bf00      	nop
 800edac:	e7fd      	b.n	800edaa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800edae:	693b      	ldr	r3, [r7, #16]
 800edb0:	685a      	ldr	r2, [r3, #4]
 800edb2:	4b14      	ldr	r3, [pc, #80]	@ (800ee04 <vPortFree+0xbc>)
 800edb4:	681b      	ldr	r3, [r3, #0]
 800edb6:	4013      	ands	r3, r2
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d01e      	beq.n	800edfa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800edbc:	693b      	ldr	r3, [r7, #16]
 800edbe:	681b      	ldr	r3, [r3, #0]
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	d11a      	bne.n	800edfa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800edc4:	693b      	ldr	r3, [r7, #16]
 800edc6:	685a      	ldr	r2, [r3, #4]
 800edc8:	4b0e      	ldr	r3, [pc, #56]	@ (800ee04 <vPortFree+0xbc>)
 800edca:	681b      	ldr	r3, [r3, #0]
 800edcc:	43db      	mvns	r3, r3
 800edce:	401a      	ands	r2, r3
 800edd0:	693b      	ldr	r3, [r7, #16]
 800edd2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800edd4:	f7fe fb5a 	bl	800d48c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800edd8:	693b      	ldr	r3, [r7, #16]
 800edda:	685a      	ldr	r2, [r3, #4]
 800eddc:	4b0a      	ldr	r3, [pc, #40]	@ (800ee08 <vPortFree+0xc0>)
 800edde:	681b      	ldr	r3, [r3, #0]
 800ede0:	4413      	add	r3, r2
 800ede2:	4a09      	ldr	r2, [pc, #36]	@ (800ee08 <vPortFree+0xc0>)
 800ede4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ede6:	6938      	ldr	r0, [r7, #16]
 800ede8:	f000 f874 	bl	800eed4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800edec:	4b07      	ldr	r3, [pc, #28]	@ (800ee0c <vPortFree+0xc4>)
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	3301      	adds	r3, #1
 800edf2:	4a06      	ldr	r2, [pc, #24]	@ (800ee0c <vPortFree+0xc4>)
 800edf4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800edf6:	f7fe fb57 	bl	800d4a8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800edfa:	bf00      	nop
 800edfc:	3718      	adds	r7, #24
 800edfe:	46bd      	mov	sp, r7
 800ee00:	bd80      	pop	{r7, pc}
 800ee02:	bf00      	nop
 800ee04:	200150a8 	.word	0x200150a8
 800ee08:	20015098 	.word	0x20015098
 800ee0c:	200150a4 	.word	0x200150a4

0800ee10 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ee10:	b480      	push	{r7}
 800ee12:	b085      	sub	sp, #20
 800ee14:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ee16:	f44f 437a 	mov.w	r3, #64000	@ 0xfa00
 800ee1a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ee1c:	4b27      	ldr	r3, [pc, #156]	@ (800eebc <prvHeapInit+0xac>)
 800ee1e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ee20:	68fb      	ldr	r3, [r7, #12]
 800ee22:	f003 0307 	and.w	r3, r3, #7
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d00c      	beq.n	800ee44 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ee2a:	68fb      	ldr	r3, [r7, #12]
 800ee2c:	3307      	adds	r3, #7
 800ee2e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	f023 0307 	bic.w	r3, r3, #7
 800ee36:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ee38:	68ba      	ldr	r2, [r7, #8]
 800ee3a:	68fb      	ldr	r3, [r7, #12]
 800ee3c:	1ad3      	subs	r3, r2, r3
 800ee3e:	4a1f      	ldr	r2, [pc, #124]	@ (800eebc <prvHeapInit+0xac>)
 800ee40:	4413      	add	r3, r2
 800ee42:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ee44:	68fb      	ldr	r3, [r7, #12]
 800ee46:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ee48:	4a1d      	ldr	r2, [pc, #116]	@ (800eec0 <prvHeapInit+0xb0>)
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ee4e:	4b1c      	ldr	r3, [pc, #112]	@ (800eec0 <prvHeapInit+0xb0>)
 800ee50:	2200      	movs	r2, #0
 800ee52:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	68ba      	ldr	r2, [r7, #8]
 800ee58:	4413      	add	r3, r2
 800ee5a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ee5c:	2208      	movs	r2, #8
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	1a9b      	subs	r3, r3, r2
 800ee62:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	f023 0307 	bic.w	r3, r3, #7
 800ee6a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	4a15      	ldr	r2, [pc, #84]	@ (800eec4 <prvHeapInit+0xb4>)
 800ee70:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ee72:	4b14      	ldr	r3, [pc, #80]	@ (800eec4 <prvHeapInit+0xb4>)
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	2200      	movs	r2, #0
 800ee78:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ee7a:	4b12      	ldr	r3, [pc, #72]	@ (800eec4 <prvHeapInit+0xb4>)
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	2200      	movs	r2, #0
 800ee80:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ee86:	683b      	ldr	r3, [r7, #0]
 800ee88:	68fa      	ldr	r2, [r7, #12]
 800ee8a:	1ad2      	subs	r2, r2, r3
 800ee8c:	683b      	ldr	r3, [r7, #0]
 800ee8e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ee90:	4b0c      	ldr	r3, [pc, #48]	@ (800eec4 <prvHeapInit+0xb4>)
 800ee92:	681a      	ldr	r2, [r3, #0]
 800ee94:	683b      	ldr	r3, [r7, #0]
 800ee96:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ee98:	683b      	ldr	r3, [r7, #0]
 800ee9a:	685b      	ldr	r3, [r3, #4]
 800ee9c:	4a0a      	ldr	r2, [pc, #40]	@ (800eec8 <prvHeapInit+0xb8>)
 800ee9e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800eea0:	683b      	ldr	r3, [r7, #0]
 800eea2:	685b      	ldr	r3, [r3, #4]
 800eea4:	4a09      	ldr	r2, [pc, #36]	@ (800eecc <prvHeapInit+0xbc>)
 800eea6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800eea8:	4b09      	ldr	r3, [pc, #36]	@ (800eed0 <prvHeapInit+0xc0>)
 800eeaa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800eeae:	601a      	str	r2, [r3, #0]
}
 800eeb0:	bf00      	nop
 800eeb2:	3714      	adds	r7, #20
 800eeb4:	46bd      	mov	sp, r7
 800eeb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeba:	4770      	bx	lr
 800eebc:	2000568c 	.word	0x2000568c
 800eec0:	2001508c 	.word	0x2001508c
 800eec4:	20015094 	.word	0x20015094
 800eec8:	2001509c 	.word	0x2001509c
 800eecc:	20015098 	.word	0x20015098
 800eed0:	200150a8 	.word	0x200150a8

0800eed4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800eed4:	b480      	push	{r7}
 800eed6:	b085      	sub	sp, #20
 800eed8:	af00      	add	r7, sp, #0
 800eeda:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800eedc:	4b28      	ldr	r3, [pc, #160]	@ (800ef80 <prvInsertBlockIntoFreeList+0xac>)
 800eede:	60fb      	str	r3, [r7, #12]
 800eee0:	e002      	b.n	800eee8 <prvInsertBlockIntoFreeList+0x14>
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	681b      	ldr	r3, [r3, #0]
 800eee6:	60fb      	str	r3, [r7, #12]
 800eee8:	68fb      	ldr	r3, [r7, #12]
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	687a      	ldr	r2, [r7, #4]
 800eeee:	429a      	cmp	r2, r3
 800eef0:	d8f7      	bhi.n	800eee2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800eef2:	68fb      	ldr	r3, [r7, #12]
 800eef4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800eef6:	68fb      	ldr	r3, [r7, #12]
 800eef8:	685b      	ldr	r3, [r3, #4]
 800eefa:	68ba      	ldr	r2, [r7, #8]
 800eefc:	4413      	add	r3, r2
 800eefe:	687a      	ldr	r2, [r7, #4]
 800ef00:	429a      	cmp	r2, r3
 800ef02:	d108      	bne.n	800ef16 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	685a      	ldr	r2, [r3, #4]
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	685b      	ldr	r3, [r3, #4]
 800ef0c:	441a      	add	r2, r3
 800ef0e:	68fb      	ldr	r3, [r7, #12]
 800ef10:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ef12:	68fb      	ldr	r3, [r7, #12]
 800ef14:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	685b      	ldr	r3, [r3, #4]
 800ef1e:	68ba      	ldr	r2, [r7, #8]
 800ef20:	441a      	add	r2, r3
 800ef22:	68fb      	ldr	r3, [r7, #12]
 800ef24:	681b      	ldr	r3, [r3, #0]
 800ef26:	429a      	cmp	r2, r3
 800ef28:	d118      	bne.n	800ef5c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ef2a:	68fb      	ldr	r3, [r7, #12]
 800ef2c:	681a      	ldr	r2, [r3, #0]
 800ef2e:	4b15      	ldr	r3, [pc, #84]	@ (800ef84 <prvInsertBlockIntoFreeList+0xb0>)
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	429a      	cmp	r2, r3
 800ef34:	d00d      	beq.n	800ef52 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	685a      	ldr	r2, [r3, #4]
 800ef3a:	68fb      	ldr	r3, [r7, #12]
 800ef3c:	681b      	ldr	r3, [r3, #0]
 800ef3e:	685b      	ldr	r3, [r3, #4]
 800ef40:	441a      	add	r2, r3
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	681b      	ldr	r3, [r3, #0]
 800ef4a:	681a      	ldr	r2, [r3, #0]
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	601a      	str	r2, [r3, #0]
 800ef50:	e008      	b.n	800ef64 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ef52:	4b0c      	ldr	r3, [pc, #48]	@ (800ef84 <prvInsertBlockIntoFreeList+0xb0>)
 800ef54:	681a      	ldr	r2, [r3, #0]
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	601a      	str	r2, [r3, #0]
 800ef5a:	e003      	b.n	800ef64 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	681a      	ldr	r2, [r3, #0]
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ef64:	68fa      	ldr	r2, [r7, #12]
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	429a      	cmp	r2, r3
 800ef6a:	d002      	beq.n	800ef72 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ef6c:	68fb      	ldr	r3, [r7, #12]
 800ef6e:	687a      	ldr	r2, [r7, #4]
 800ef70:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ef72:	bf00      	nop
 800ef74:	3714      	adds	r7, #20
 800ef76:	46bd      	mov	sp, r7
 800ef78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef7c:	4770      	bx	lr
 800ef7e:	bf00      	nop
 800ef80:	2001508c 	.word	0x2001508c
 800ef84:	20015094 	.word	0x20015094

0800ef88 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800ef88:	b580      	push	{r7, lr}
 800ef8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800ef8c:	2200      	movs	r2, #0
 800ef8e:	4912      	ldr	r1, [pc, #72]	@ (800efd8 <MX_USB_Device_Init+0x50>)
 800ef90:	4812      	ldr	r0, [pc, #72]	@ (800efdc <MX_USB_Device_Init+0x54>)
 800ef92:	f7fb fc03 	bl	800a79c <USBD_Init>
 800ef96:	4603      	mov	r3, r0
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d001      	beq.n	800efa0 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800ef9c:	f7f4 f8fa 	bl	8003194 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800efa0:	490f      	ldr	r1, [pc, #60]	@ (800efe0 <MX_USB_Device_Init+0x58>)
 800efa2:	480e      	ldr	r0, [pc, #56]	@ (800efdc <MX_USB_Device_Init+0x54>)
 800efa4:	f7fb fc2a 	bl	800a7fc <USBD_RegisterClass>
 800efa8:	4603      	mov	r3, r0
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d001      	beq.n	800efb2 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800efae:	f7f4 f8f1 	bl	8003194 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800efb2:	490c      	ldr	r1, [pc, #48]	@ (800efe4 <MX_USB_Device_Init+0x5c>)
 800efb4:	4809      	ldr	r0, [pc, #36]	@ (800efdc <MX_USB_Device_Init+0x54>)
 800efb6:	f7fb fb4b 	bl	800a650 <USBD_CDC_RegisterInterface>
 800efba:	4603      	mov	r3, r0
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d001      	beq.n	800efc4 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800efc0:	f7f4 f8e8 	bl	8003194 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800efc4:	4805      	ldr	r0, [pc, #20]	@ (800efdc <MX_USB_Device_Init+0x54>)
 800efc6:	f7fb fc40 	bl	800a84a <USBD_Start>
 800efca:	4603      	mov	r3, r0
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d001      	beq.n	800efd4 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800efd0:	f7f4 f8e0 	bl	8003194 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800efd4:	bf00      	nop
 800efd6:	bd80      	pop	{r7, pc}
 800efd8:	20000154 	.word	0x20000154
 800efdc:	200150ac 	.word	0x200150ac
 800efe0:	20000038 	.word	0x20000038
 800efe4:	20000140 	.word	0x20000140

0800efe8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800efe8:	b580      	push	{r7, lr}
 800efea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800efec:	2200      	movs	r2, #0
 800efee:	4905      	ldr	r1, [pc, #20]	@ (800f004 <CDC_Init_FS+0x1c>)
 800eff0:	4805      	ldr	r0, [pc, #20]	@ (800f008 <CDC_Init_FS+0x20>)
 800eff2:	f7fb fb42 	bl	800a67a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800eff6:	4905      	ldr	r1, [pc, #20]	@ (800f00c <CDC_Init_FS+0x24>)
 800eff8:	4803      	ldr	r0, [pc, #12]	@ (800f008 <CDC_Init_FS+0x20>)
 800effa:	f7fb fb5c 	bl	800a6b6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800effe:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800f000:	4618      	mov	r0, r3
 800f002:	bd80      	pop	{r7, pc}
 800f004:	20015b7c 	.word	0x20015b7c
 800f008:	200150ac 	.word	0x200150ac
 800f00c:	2001537c 	.word	0x2001537c

0800f010 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800f010:	b480      	push	{r7}
 800f012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800f014:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800f016:	4618      	mov	r0, r3
 800f018:	46bd      	mov	sp, r7
 800f01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f01e:	4770      	bx	lr

0800f020 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800f020:	b480      	push	{r7}
 800f022:	b083      	sub	sp, #12
 800f024:	af00      	add	r7, sp, #0
 800f026:	4603      	mov	r3, r0
 800f028:	6039      	str	r1, [r7, #0]
 800f02a:	71fb      	strb	r3, [r7, #7]
 800f02c:	4613      	mov	r3, r2
 800f02e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800f030:	79fb      	ldrb	r3, [r7, #7]
 800f032:	2b23      	cmp	r3, #35	@ 0x23
 800f034:	d84a      	bhi.n	800f0cc <CDC_Control_FS+0xac>
 800f036:	a201      	add	r2, pc, #4	@ (adr r2, 800f03c <CDC_Control_FS+0x1c>)
 800f038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f03c:	0800f0cd 	.word	0x0800f0cd
 800f040:	0800f0cd 	.word	0x0800f0cd
 800f044:	0800f0cd 	.word	0x0800f0cd
 800f048:	0800f0cd 	.word	0x0800f0cd
 800f04c:	0800f0cd 	.word	0x0800f0cd
 800f050:	0800f0cd 	.word	0x0800f0cd
 800f054:	0800f0cd 	.word	0x0800f0cd
 800f058:	0800f0cd 	.word	0x0800f0cd
 800f05c:	0800f0cd 	.word	0x0800f0cd
 800f060:	0800f0cd 	.word	0x0800f0cd
 800f064:	0800f0cd 	.word	0x0800f0cd
 800f068:	0800f0cd 	.word	0x0800f0cd
 800f06c:	0800f0cd 	.word	0x0800f0cd
 800f070:	0800f0cd 	.word	0x0800f0cd
 800f074:	0800f0cd 	.word	0x0800f0cd
 800f078:	0800f0cd 	.word	0x0800f0cd
 800f07c:	0800f0cd 	.word	0x0800f0cd
 800f080:	0800f0cd 	.word	0x0800f0cd
 800f084:	0800f0cd 	.word	0x0800f0cd
 800f088:	0800f0cd 	.word	0x0800f0cd
 800f08c:	0800f0cd 	.word	0x0800f0cd
 800f090:	0800f0cd 	.word	0x0800f0cd
 800f094:	0800f0cd 	.word	0x0800f0cd
 800f098:	0800f0cd 	.word	0x0800f0cd
 800f09c:	0800f0cd 	.word	0x0800f0cd
 800f0a0:	0800f0cd 	.word	0x0800f0cd
 800f0a4:	0800f0cd 	.word	0x0800f0cd
 800f0a8:	0800f0cd 	.word	0x0800f0cd
 800f0ac:	0800f0cd 	.word	0x0800f0cd
 800f0b0:	0800f0cd 	.word	0x0800f0cd
 800f0b4:	0800f0cd 	.word	0x0800f0cd
 800f0b8:	0800f0cd 	.word	0x0800f0cd
 800f0bc:	0800f0cd 	.word	0x0800f0cd
 800f0c0:	0800f0cd 	.word	0x0800f0cd
 800f0c4:	0800f0cd 	.word	0x0800f0cd
 800f0c8:	0800f0cd 	.word	0x0800f0cd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800f0cc:	bf00      	nop
  }

  return (USBD_OK);
 800f0ce:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800f0d0:	4618      	mov	r0, r3
 800f0d2:	370c      	adds	r7, #12
 800f0d4:	46bd      	mov	sp, r7
 800f0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0da:	4770      	bx	lr

0800f0dc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800f0dc:	b580      	push	{r7, lr}
 800f0de:	b082      	sub	sp, #8
 800f0e0:	af00      	add	r7, sp, #0
 800f0e2:	6078      	str	r0, [r7, #4]
 800f0e4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800f0e6:	6879      	ldr	r1, [r7, #4]
 800f0e8:	4805      	ldr	r0, [pc, #20]	@ (800f100 <CDC_Receive_FS+0x24>)
 800f0ea:	f7fb fae4 	bl	800a6b6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800f0ee:	4804      	ldr	r0, [pc, #16]	@ (800f100 <CDC_Receive_FS+0x24>)
 800f0f0:	f7fb fb2a 	bl	800a748 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800f0f4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800f0f6:	4618      	mov	r0, r3
 800f0f8:	3708      	adds	r7, #8
 800f0fa:	46bd      	mov	sp, r7
 800f0fc:	bd80      	pop	{r7, pc}
 800f0fe:	bf00      	nop
 800f100:	200150ac 	.word	0x200150ac

0800f104 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800f104:	b580      	push	{r7, lr}
 800f106:	b084      	sub	sp, #16
 800f108:	af00      	add	r7, sp, #0
 800f10a:	6078      	str	r0, [r7, #4]
 800f10c:	460b      	mov	r3, r1
 800f10e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800f110:	2300      	movs	r3, #0
 800f112:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800f114:	4b0d      	ldr	r3, [pc, #52]	@ (800f14c <CDC_Transmit_FS+0x48>)
 800f116:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f11a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800f11c:	68bb      	ldr	r3, [r7, #8]
 800f11e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800f122:	2b00      	cmp	r3, #0
 800f124:	d001      	beq.n	800f12a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800f126:	2301      	movs	r3, #1
 800f128:	e00b      	b.n	800f142 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800f12a:	887b      	ldrh	r3, [r7, #2]
 800f12c:	461a      	mov	r2, r3
 800f12e:	6879      	ldr	r1, [r7, #4]
 800f130:	4806      	ldr	r0, [pc, #24]	@ (800f14c <CDC_Transmit_FS+0x48>)
 800f132:	f7fb faa2 	bl	800a67a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800f136:	4805      	ldr	r0, [pc, #20]	@ (800f14c <CDC_Transmit_FS+0x48>)
 800f138:	f7fb fad6 	bl	800a6e8 <USBD_CDC_TransmitPacket>
 800f13c:	4603      	mov	r3, r0
 800f13e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800f140:	7bfb      	ldrb	r3, [r7, #15]
}
 800f142:	4618      	mov	r0, r3
 800f144:	3710      	adds	r7, #16
 800f146:	46bd      	mov	sp, r7
 800f148:	bd80      	pop	{r7, pc}
 800f14a:	bf00      	nop
 800f14c:	200150ac 	.word	0x200150ac

0800f150 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800f150:	b480      	push	{r7}
 800f152:	b087      	sub	sp, #28
 800f154:	af00      	add	r7, sp, #0
 800f156:	60f8      	str	r0, [r7, #12]
 800f158:	60b9      	str	r1, [r7, #8]
 800f15a:	4613      	mov	r3, r2
 800f15c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800f15e:	2300      	movs	r3, #0
 800f160:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800f162:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f166:	4618      	mov	r0, r3
 800f168:	371c      	adds	r7, #28
 800f16a:	46bd      	mov	sp, r7
 800f16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f170:	4770      	bx	lr
	...

0800f174 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f174:	b480      	push	{r7}
 800f176:	b083      	sub	sp, #12
 800f178:	af00      	add	r7, sp, #0
 800f17a:	4603      	mov	r3, r0
 800f17c:	6039      	str	r1, [r7, #0]
 800f17e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800f180:	683b      	ldr	r3, [r7, #0]
 800f182:	2212      	movs	r2, #18
 800f184:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800f186:	4b03      	ldr	r3, [pc, #12]	@ (800f194 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800f188:	4618      	mov	r0, r3
 800f18a:	370c      	adds	r7, #12
 800f18c:	46bd      	mov	sp, r7
 800f18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f192:	4770      	bx	lr
 800f194:	20000174 	.word	0x20000174

0800f198 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f198:	b480      	push	{r7}
 800f19a:	b083      	sub	sp, #12
 800f19c:	af00      	add	r7, sp, #0
 800f19e:	4603      	mov	r3, r0
 800f1a0:	6039      	str	r1, [r7, #0]
 800f1a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800f1a4:	683b      	ldr	r3, [r7, #0]
 800f1a6:	2204      	movs	r2, #4
 800f1a8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800f1aa:	4b03      	ldr	r3, [pc, #12]	@ (800f1b8 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800f1ac:	4618      	mov	r0, r3
 800f1ae:	370c      	adds	r7, #12
 800f1b0:	46bd      	mov	sp, r7
 800f1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1b6:	4770      	bx	lr
 800f1b8:	20000188 	.word	0x20000188

0800f1bc <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f1bc:	b580      	push	{r7, lr}
 800f1be:	b082      	sub	sp, #8
 800f1c0:	af00      	add	r7, sp, #0
 800f1c2:	4603      	mov	r3, r0
 800f1c4:	6039      	str	r1, [r7, #0]
 800f1c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f1c8:	79fb      	ldrb	r3, [r7, #7]
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d105      	bne.n	800f1da <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800f1ce:	683a      	ldr	r2, [r7, #0]
 800f1d0:	4907      	ldr	r1, [pc, #28]	@ (800f1f0 <USBD_CDC_ProductStrDescriptor+0x34>)
 800f1d2:	4808      	ldr	r0, [pc, #32]	@ (800f1f4 <USBD_CDC_ProductStrDescriptor+0x38>)
 800f1d4:	f7fc fb21 	bl	800b81a <USBD_GetString>
 800f1d8:	e004      	b.n	800f1e4 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800f1da:	683a      	ldr	r2, [r7, #0]
 800f1dc:	4904      	ldr	r1, [pc, #16]	@ (800f1f0 <USBD_CDC_ProductStrDescriptor+0x34>)
 800f1de:	4805      	ldr	r0, [pc, #20]	@ (800f1f4 <USBD_CDC_ProductStrDescriptor+0x38>)
 800f1e0:	f7fc fb1b 	bl	800b81a <USBD_GetString>
  }
  return USBD_StrDesc;
 800f1e4:	4b02      	ldr	r3, [pc, #8]	@ (800f1f0 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800f1e6:	4618      	mov	r0, r3
 800f1e8:	3708      	adds	r7, #8
 800f1ea:	46bd      	mov	sp, r7
 800f1ec:	bd80      	pop	{r7, pc}
 800f1ee:	bf00      	nop
 800f1f0:	2001637c 	.word	0x2001637c
 800f1f4:	08011478 	.word	0x08011478

0800f1f8 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f1f8:	b580      	push	{r7, lr}
 800f1fa:	b082      	sub	sp, #8
 800f1fc:	af00      	add	r7, sp, #0
 800f1fe:	4603      	mov	r3, r0
 800f200:	6039      	str	r1, [r7, #0]
 800f202:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f204:	683a      	ldr	r2, [r7, #0]
 800f206:	4904      	ldr	r1, [pc, #16]	@ (800f218 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800f208:	4804      	ldr	r0, [pc, #16]	@ (800f21c <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800f20a:	f7fc fb06 	bl	800b81a <USBD_GetString>
  return USBD_StrDesc;
 800f20e:	4b02      	ldr	r3, [pc, #8]	@ (800f218 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800f210:	4618      	mov	r0, r3
 800f212:	3708      	adds	r7, #8
 800f214:	46bd      	mov	sp, r7
 800f216:	bd80      	pop	{r7, pc}
 800f218:	2001637c 	.word	0x2001637c
 800f21c:	08011490 	.word	0x08011490

0800f220 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f220:	b580      	push	{r7, lr}
 800f222:	b082      	sub	sp, #8
 800f224:	af00      	add	r7, sp, #0
 800f226:	4603      	mov	r3, r0
 800f228:	6039      	str	r1, [r7, #0]
 800f22a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800f22c:	683b      	ldr	r3, [r7, #0]
 800f22e:	221a      	movs	r2, #26
 800f230:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800f232:	f000 f843 	bl	800f2bc <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800f236:	4b02      	ldr	r3, [pc, #8]	@ (800f240 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800f238:	4618      	mov	r0, r3
 800f23a:	3708      	adds	r7, #8
 800f23c:	46bd      	mov	sp, r7
 800f23e:	bd80      	pop	{r7, pc}
 800f240:	2000018c 	.word	0x2000018c

0800f244 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f244:	b580      	push	{r7, lr}
 800f246:	b082      	sub	sp, #8
 800f248:	af00      	add	r7, sp, #0
 800f24a:	4603      	mov	r3, r0
 800f24c:	6039      	str	r1, [r7, #0]
 800f24e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800f250:	79fb      	ldrb	r3, [r7, #7]
 800f252:	2b00      	cmp	r3, #0
 800f254:	d105      	bne.n	800f262 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800f256:	683a      	ldr	r2, [r7, #0]
 800f258:	4907      	ldr	r1, [pc, #28]	@ (800f278 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800f25a:	4808      	ldr	r0, [pc, #32]	@ (800f27c <USBD_CDC_ConfigStrDescriptor+0x38>)
 800f25c:	f7fc fadd 	bl	800b81a <USBD_GetString>
 800f260:	e004      	b.n	800f26c <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800f262:	683a      	ldr	r2, [r7, #0]
 800f264:	4904      	ldr	r1, [pc, #16]	@ (800f278 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800f266:	4805      	ldr	r0, [pc, #20]	@ (800f27c <USBD_CDC_ConfigStrDescriptor+0x38>)
 800f268:	f7fc fad7 	bl	800b81a <USBD_GetString>
  }
  return USBD_StrDesc;
 800f26c:	4b02      	ldr	r3, [pc, #8]	@ (800f278 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800f26e:	4618      	mov	r0, r3
 800f270:	3708      	adds	r7, #8
 800f272:	46bd      	mov	sp, r7
 800f274:	bd80      	pop	{r7, pc}
 800f276:	bf00      	nop
 800f278:	2001637c 	.word	0x2001637c
 800f27c:	080114a4 	.word	0x080114a4

0800f280 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f280:	b580      	push	{r7, lr}
 800f282:	b082      	sub	sp, #8
 800f284:	af00      	add	r7, sp, #0
 800f286:	4603      	mov	r3, r0
 800f288:	6039      	str	r1, [r7, #0]
 800f28a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f28c:	79fb      	ldrb	r3, [r7, #7]
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d105      	bne.n	800f29e <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800f292:	683a      	ldr	r2, [r7, #0]
 800f294:	4907      	ldr	r1, [pc, #28]	@ (800f2b4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800f296:	4808      	ldr	r0, [pc, #32]	@ (800f2b8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800f298:	f7fc fabf 	bl	800b81a <USBD_GetString>
 800f29c:	e004      	b.n	800f2a8 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800f29e:	683a      	ldr	r2, [r7, #0]
 800f2a0:	4904      	ldr	r1, [pc, #16]	@ (800f2b4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800f2a2:	4805      	ldr	r0, [pc, #20]	@ (800f2b8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800f2a4:	f7fc fab9 	bl	800b81a <USBD_GetString>
  }
  return USBD_StrDesc;
 800f2a8:	4b02      	ldr	r3, [pc, #8]	@ (800f2b4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800f2aa:	4618      	mov	r0, r3
 800f2ac:	3708      	adds	r7, #8
 800f2ae:	46bd      	mov	sp, r7
 800f2b0:	bd80      	pop	{r7, pc}
 800f2b2:	bf00      	nop
 800f2b4:	2001637c 	.word	0x2001637c
 800f2b8:	080114b0 	.word	0x080114b0

0800f2bc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f2bc:	b580      	push	{r7, lr}
 800f2be:	b084      	sub	sp, #16
 800f2c0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f2c2:	4b0f      	ldr	r3, [pc, #60]	@ (800f300 <Get_SerialNum+0x44>)
 800f2c4:	681b      	ldr	r3, [r3, #0]
 800f2c6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f2c8:	4b0e      	ldr	r3, [pc, #56]	@ (800f304 <Get_SerialNum+0x48>)
 800f2ca:	681b      	ldr	r3, [r3, #0]
 800f2cc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800f2ce:	4b0e      	ldr	r3, [pc, #56]	@ (800f308 <Get_SerialNum+0x4c>)
 800f2d0:	681b      	ldr	r3, [r3, #0]
 800f2d2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f2d4:	68fa      	ldr	r2, [r7, #12]
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	4413      	add	r3, r2
 800f2da:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f2dc:	68fb      	ldr	r3, [r7, #12]
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d009      	beq.n	800f2f6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f2e2:	2208      	movs	r2, #8
 800f2e4:	4909      	ldr	r1, [pc, #36]	@ (800f30c <Get_SerialNum+0x50>)
 800f2e6:	68f8      	ldr	r0, [r7, #12]
 800f2e8:	f000 f814 	bl	800f314 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f2ec:	2204      	movs	r2, #4
 800f2ee:	4908      	ldr	r1, [pc, #32]	@ (800f310 <Get_SerialNum+0x54>)
 800f2f0:	68b8      	ldr	r0, [r7, #8]
 800f2f2:	f000 f80f 	bl	800f314 <IntToUnicode>
  }
}
 800f2f6:	bf00      	nop
 800f2f8:	3710      	adds	r7, #16
 800f2fa:	46bd      	mov	sp, r7
 800f2fc:	bd80      	pop	{r7, pc}
 800f2fe:	bf00      	nop
 800f300:	1fff7590 	.word	0x1fff7590
 800f304:	1fff7594 	.word	0x1fff7594
 800f308:	1fff7598 	.word	0x1fff7598
 800f30c:	2000018e 	.word	0x2000018e
 800f310:	2000019e 	.word	0x2000019e

0800f314 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f314:	b480      	push	{r7}
 800f316:	b087      	sub	sp, #28
 800f318:	af00      	add	r7, sp, #0
 800f31a:	60f8      	str	r0, [r7, #12]
 800f31c:	60b9      	str	r1, [r7, #8]
 800f31e:	4613      	mov	r3, r2
 800f320:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f322:	2300      	movs	r3, #0
 800f324:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f326:	2300      	movs	r3, #0
 800f328:	75fb      	strb	r3, [r7, #23]
 800f32a:	e027      	b.n	800f37c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f32c:	68fb      	ldr	r3, [r7, #12]
 800f32e:	0f1b      	lsrs	r3, r3, #28
 800f330:	2b09      	cmp	r3, #9
 800f332:	d80b      	bhi.n	800f34c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f334:	68fb      	ldr	r3, [r7, #12]
 800f336:	0f1b      	lsrs	r3, r3, #28
 800f338:	b2da      	uxtb	r2, r3
 800f33a:	7dfb      	ldrb	r3, [r7, #23]
 800f33c:	005b      	lsls	r3, r3, #1
 800f33e:	4619      	mov	r1, r3
 800f340:	68bb      	ldr	r3, [r7, #8]
 800f342:	440b      	add	r3, r1
 800f344:	3230      	adds	r2, #48	@ 0x30
 800f346:	b2d2      	uxtb	r2, r2
 800f348:	701a      	strb	r2, [r3, #0]
 800f34a:	e00a      	b.n	800f362 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f34c:	68fb      	ldr	r3, [r7, #12]
 800f34e:	0f1b      	lsrs	r3, r3, #28
 800f350:	b2da      	uxtb	r2, r3
 800f352:	7dfb      	ldrb	r3, [r7, #23]
 800f354:	005b      	lsls	r3, r3, #1
 800f356:	4619      	mov	r1, r3
 800f358:	68bb      	ldr	r3, [r7, #8]
 800f35a:	440b      	add	r3, r1
 800f35c:	3237      	adds	r2, #55	@ 0x37
 800f35e:	b2d2      	uxtb	r2, r2
 800f360:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f362:	68fb      	ldr	r3, [r7, #12]
 800f364:	011b      	lsls	r3, r3, #4
 800f366:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f368:	7dfb      	ldrb	r3, [r7, #23]
 800f36a:	005b      	lsls	r3, r3, #1
 800f36c:	3301      	adds	r3, #1
 800f36e:	68ba      	ldr	r2, [r7, #8]
 800f370:	4413      	add	r3, r2
 800f372:	2200      	movs	r2, #0
 800f374:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f376:	7dfb      	ldrb	r3, [r7, #23]
 800f378:	3301      	adds	r3, #1
 800f37a:	75fb      	strb	r3, [r7, #23]
 800f37c:	7dfa      	ldrb	r2, [r7, #23]
 800f37e:	79fb      	ldrb	r3, [r7, #7]
 800f380:	429a      	cmp	r2, r3
 800f382:	d3d3      	bcc.n	800f32c <IntToUnicode+0x18>
  }
}
 800f384:	bf00      	nop
 800f386:	bf00      	nop
 800f388:	371c      	adds	r7, #28
 800f38a:	46bd      	mov	sp, r7
 800f38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f390:	4770      	bx	lr
	...

0800f394 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f394:	b580      	push	{r7, lr}
 800f396:	b098      	sub	sp, #96	@ 0x60
 800f398:	af00      	add	r7, sp, #0
 800f39a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800f39c:	f107 0310 	add.w	r3, r7, #16
 800f3a0:	2250      	movs	r2, #80	@ 0x50
 800f3a2:	2100      	movs	r1, #0
 800f3a4:	4618      	mov	r0, r3
 800f3a6:	f000 fb33 	bl	800fa10 <memset>
  if(pcdHandle->Instance==USB)
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	681b      	ldr	r3, [r3, #0]
 800f3ae:	4a15      	ldr	r2, [pc, #84]	@ (800f404 <HAL_PCD_MspInit+0x70>)
 800f3b0:	4293      	cmp	r3, r2
 800f3b2:	d122      	bne.n	800f3fa <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800f3b4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800f3b8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800f3ba:	2300      	movs	r3, #0
 800f3bc:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800f3be:	f107 0310 	add.w	r3, r7, #16
 800f3c2:	4618      	mov	r0, r3
 800f3c4:	f7f7 fb86 	bl	8006ad4 <HAL_RCCEx_PeriphCLKConfig>
 800f3c8:	4603      	mov	r3, r0
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	d001      	beq.n	800f3d2 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800f3ce:	f7f3 fee1 	bl	8003194 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800f3d2:	4b0d      	ldr	r3, [pc, #52]	@ (800f408 <HAL_PCD_MspInit+0x74>)
 800f3d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f3d6:	4a0c      	ldr	r2, [pc, #48]	@ (800f408 <HAL_PCD_MspInit+0x74>)
 800f3d8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800f3dc:	6593      	str	r3, [r2, #88]	@ 0x58
 800f3de:	4b0a      	ldr	r3, [pc, #40]	@ (800f408 <HAL_PCD_MspInit+0x74>)
 800f3e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f3e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f3e6:	60fb      	str	r3, [r7, #12]
 800f3e8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 800f3ea:	2200      	movs	r2, #0
 800f3ec:	2105      	movs	r1, #5
 800f3ee:	2014      	movs	r0, #20
 800f3f0:	f7f4 fcd8 	bl	8003da4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800f3f4:	2014      	movs	r0, #20
 800f3f6:	f7f4 fcef 	bl	8003dd8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800f3fa:	bf00      	nop
 800f3fc:	3760      	adds	r7, #96	@ 0x60
 800f3fe:	46bd      	mov	sp, r7
 800f400:	bd80      	pop	{r7, pc}
 800f402:	bf00      	nop
 800f404:	40005c00 	.word	0x40005c00
 800f408:	40021000 	.word	0x40021000

0800f40c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f40c:	b580      	push	{r7, lr}
 800f40e:	b082      	sub	sp, #8
 800f410:	af00      	add	r7, sp, #0
 800f412:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800f420:	4619      	mov	r1, r3
 800f422:	4610      	mov	r0, r2
 800f424:	f7fb fa5c 	bl	800a8e0 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800f428:	bf00      	nop
 800f42a:	3708      	adds	r7, #8
 800f42c:	46bd      	mov	sp, r7
 800f42e:	bd80      	pop	{r7, pc}

0800f430 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f430:	b580      	push	{r7, lr}
 800f432:	b082      	sub	sp, #8
 800f434:	af00      	add	r7, sp, #0
 800f436:	6078      	str	r0, [r7, #4]
 800f438:	460b      	mov	r3, r1
 800f43a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800f442:	78fa      	ldrb	r2, [r7, #3]
 800f444:	6879      	ldr	r1, [r7, #4]
 800f446:	4613      	mov	r3, r2
 800f448:	009b      	lsls	r3, r3, #2
 800f44a:	4413      	add	r3, r2
 800f44c:	00db      	lsls	r3, r3, #3
 800f44e:	440b      	add	r3, r1
 800f450:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800f454:	681a      	ldr	r2, [r3, #0]
 800f456:	78fb      	ldrb	r3, [r7, #3]
 800f458:	4619      	mov	r1, r3
 800f45a:	f7fb fa96 	bl	800a98a <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800f45e:	bf00      	nop
 800f460:	3708      	adds	r7, #8
 800f462:	46bd      	mov	sp, r7
 800f464:	bd80      	pop	{r7, pc}

0800f466 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f466:	b580      	push	{r7, lr}
 800f468:	b082      	sub	sp, #8
 800f46a:	af00      	add	r7, sp, #0
 800f46c:	6078      	str	r0, [r7, #4]
 800f46e:	460b      	mov	r3, r1
 800f470:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800f478:	78fa      	ldrb	r2, [r7, #3]
 800f47a:	6879      	ldr	r1, [r7, #4]
 800f47c:	4613      	mov	r3, r2
 800f47e:	009b      	lsls	r3, r3, #2
 800f480:	4413      	add	r3, r2
 800f482:	00db      	lsls	r3, r3, #3
 800f484:	440b      	add	r3, r1
 800f486:	3324      	adds	r3, #36	@ 0x24
 800f488:	681a      	ldr	r2, [r3, #0]
 800f48a:	78fb      	ldrb	r3, [r7, #3]
 800f48c:	4619      	mov	r1, r3
 800f48e:	f7fb fadf 	bl	800aa50 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800f492:	bf00      	nop
 800f494:	3708      	adds	r7, #8
 800f496:	46bd      	mov	sp, r7
 800f498:	bd80      	pop	{r7, pc}

0800f49a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f49a:	b580      	push	{r7, lr}
 800f49c:	b082      	sub	sp, #8
 800f49e:	af00      	add	r7, sp, #0
 800f4a0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800f4a8:	4618      	mov	r0, r3
 800f4aa:	f7fb fbf3 	bl	800ac94 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800f4ae:	bf00      	nop
 800f4b0:	3708      	adds	r7, #8
 800f4b2:	46bd      	mov	sp, r7
 800f4b4:	bd80      	pop	{r7, pc}

0800f4b6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f4b6:	b580      	push	{r7, lr}
 800f4b8:	b084      	sub	sp, #16
 800f4ba:	af00      	add	r7, sp, #0
 800f4bc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800f4be:	2301      	movs	r3, #1
 800f4c0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	795b      	ldrb	r3, [r3, #5]
 800f4c6:	2b02      	cmp	r3, #2
 800f4c8:	d001      	beq.n	800f4ce <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800f4ca:	f7f3 fe63 	bl	8003194 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800f4d4:	7bfa      	ldrb	r2, [r7, #15]
 800f4d6:	4611      	mov	r1, r2
 800f4d8:	4618      	mov	r0, r3
 800f4da:	f7fb fb9d 	bl	800ac18 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800f4e4:	4618      	mov	r0, r3
 800f4e6:	f7fb fb49 	bl	800ab7c <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800f4ea:	bf00      	nop
 800f4ec:	3710      	adds	r7, #16
 800f4ee:	46bd      	mov	sp, r7
 800f4f0:	bd80      	pop	{r7, pc}
	...

0800f4f4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f4f4:	b580      	push	{r7, lr}
 800f4f6:	b082      	sub	sp, #8
 800f4f8:	af00      	add	r7, sp, #0
 800f4fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800f502:	4618      	mov	r0, r3
 800f504:	f7fb fb98 	bl	800ac38 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	7a5b      	ldrb	r3, [r3, #9]
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	d005      	beq.n	800f51c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f510:	4b04      	ldr	r3, [pc, #16]	@ (800f524 <HAL_PCD_SuspendCallback+0x30>)
 800f512:	691b      	ldr	r3, [r3, #16]
 800f514:	4a03      	ldr	r2, [pc, #12]	@ (800f524 <HAL_PCD_SuspendCallback+0x30>)
 800f516:	f043 0306 	orr.w	r3, r3, #6
 800f51a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800f51c:	bf00      	nop
 800f51e:	3708      	adds	r7, #8
 800f520:	46bd      	mov	sp, r7
 800f522:	bd80      	pop	{r7, pc}
 800f524:	e000ed00 	.word	0xe000ed00

0800f528 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f528:	b580      	push	{r7, lr}
 800f52a:	b082      	sub	sp, #8
 800f52c:	af00      	add	r7, sp, #0
 800f52e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	7a5b      	ldrb	r3, [r3, #9]
 800f534:	2b00      	cmp	r3, #0
 800f536:	d007      	beq.n	800f548 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f538:	4b08      	ldr	r3, [pc, #32]	@ (800f55c <HAL_PCD_ResumeCallback+0x34>)
 800f53a:	691b      	ldr	r3, [r3, #16]
 800f53c:	4a07      	ldr	r2, [pc, #28]	@ (800f55c <HAL_PCD_ResumeCallback+0x34>)
 800f53e:	f023 0306 	bic.w	r3, r3, #6
 800f542:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800f544:	f000 f9f8 	bl	800f938 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800f54e:	4618      	mov	r0, r3
 800f550:	f7fb fb88 	bl	800ac64 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800f554:	bf00      	nop
 800f556:	3708      	adds	r7, #8
 800f558:	46bd      	mov	sp, r7
 800f55a:	bd80      	pop	{r7, pc}
 800f55c:	e000ed00 	.word	0xe000ed00

0800f560 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800f560:	b580      	push	{r7, lr}
 800f562:	b082      	sub	sp, #8
 800f564:	af00      	add	r7, sp, #0
 800f566:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800f568:	4a2b      	ldr	r2, [pc, #172]	@ (800f618 <USBD_LL_Init+0xb8>)
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	4a29      	ldr	r2, [pc, #164]	@ (800f618 <USBD_LL_Init+0xb8>)
 800f574:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 800f578:	4b27      	ldr	r3, [pc, #156]	@ (800f618 <USBD_LL_Init+0xb8>)
 800f57a:	4a28      	ldr	r2, [pc, #160]	@ (800f61c <USBD_LL_Init+0xbc>)
 800f57c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800f57e:	4b26      	ldr	r3, [pc, #152]	@ (800f618 <USBD_LL_Init+0xb8>)
 800f580:	2208      	movs	r2, #8
 800f582:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800f584:	4b24      	ldr	r3, [pc, #144]	@ (800f618 <USBD_LL_Init+0xb8>)
 800f586:	2202      	movs	r2, #2
 800f588:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800f58a:	4b23      	ldr	r3, [pc, #140]	@ (800f618 <USBD_LL_Init+0xb8>)
 800f58c:	2202      	movs	r2, #2
 800f58e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800f590:	4b21      	ldr	r3, [pc, #132]	@ (800f618 <USBD_LL_Init+0xb8>)
 800f592:	2200      	movs	r2, #0
 800f594:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800f596:	4b20      	ldr	r3, [pc, #128]	@ (800f618 <USBD_LL_Init+0xb8>)
 800f598:	2200      	movs	r2, #0
 800f59a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800f59c:	4b1e      	ldr	r3, [pc, #120]	@ (800f618 <USBD_LL_Init+0xb8>)
 800f59e:	2200      	movs	r2, #0
 800f5a0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800f5a2:	4b1d      	ldr	r3, [pc, #116]	@ (800f618 <USBD_LL_Init+0xb8>)
 800f5a4:	2200      	movs	r2, #0
 800f5a6:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800f5a8:	481b      	ldr	r0, [pc, #108]	@ (800f618 <USBD_LL_Init+0xb8>)
 800f5aa:	f7f4 ff93 	bl	80044d4 <HAL_PCD_Init>
 800f5ae:	4603      	mov	r3, r0
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d001      	beq.n	800f5b8 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800f5b4:	f7f3 fdee 	bl	8003194 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800f5be:	2318      	movs	r3, #24
 800f5c0:	2200      	movs	r2, #0
 800f5c2:	2100      	movs	r1, #0
 800f5c4:	f7f6 fc1a 	bl	8005dfc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800f5ce:	2358      	movs	r3, #88	@ 0x58
 800f5d0:	2200      	movs	r2, #0
 800f5d2:	2180      	movs	r1, #128	@ 0x80
 800f5d4:	f7f6 fc12 	bl	8005dfc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800f5de:	23c0      	movs	r3, #192	@ 0xc0
 800f5e0:	2200      	movs	r2, #0
 800f5e2:	2181      	movs	r1, #129	@ 0x81
 800f5e4:	f7f6 fc0a 	bl	8005dfc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800f5ee:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800f5f2:	2200      	movs	r2, #0
 800f5f4:	2101      	movs	r1, #1
 800f5f6:	f7f6 fc01 	bl	8005dfc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800f600:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f604:	2200      	movs	r2, #0
 800f606:	2182      	movs	r1, #130	@ 0x82
 800f608:	f7f6 fbf8 	bl	8005dfc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800f60c:	2300      	movs	r3, #0
}
 800f60e:	4618      	mov	r0, r3
 800f610:	3708      	adds	r7, #8
 800f612:	46bd      	mov	sp, r7
 800f614:	bd80      	pop	{r7, pc}
 800f616:	bf00      	nop
 800f618:	2001657c 	.word	0x2001657c
 800f61c:	40005c00 	.word	0x40005c00

0800f620 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800f620:	b580      	push	{r7, lr}
 800f622:	b084      	sub	sp, #16
 800f624:	af00      	add	r7, sp, #0
 800f626:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f628:	2300      	movs	r3, #0
 800f62a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f62c:	2300      	movs	r3, #0
 800f62e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800f636:	4618      	mov	r0, r3
 800f638:	f7f5 f81a 	bl	8004670 <HAL_PCD_Start>
 800f63c:	4603      	mov	r3, r0
 800f63e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f640:	7bfb      	ldrb	r3, [r7, #15]
 800f642:	4618      	mov	r0, r3
 800f644:	f000 f97e 	bl	800f944 <USBD_Get_USB_Status>
 800f648:	4603      	mov	r3, r0
 800f64a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f64c:	7bbb      	ldrb	r3, [r7, #14]
}
 800f64e:	4618      	mov	r0, r3
 800f650:	3710      	adds	r7, #16
 800f652:	46bd      	mov	sp, r7
 800f654:	bd80      	pop	{r7, pc}

0800f656 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800f656:	b580      	push	{r7, lr}
 800f658:	b084      	sub	sp, #16
 800f65a:	af00      	add	r7, sp, #0
 800f65c:	6078      	str	r0, [r7, #4]
 800f65e:	4608      	mov	r0, r1
 800f660:	4611      	mov	r1, r2
 800f662:	461a      	mov	r2, r3
 800f664:	4603      	mov	r3, r0
 800f666:	70fb      	strb	r3, [r7, #3]
 800f668:	460b      	mov	r3, r1
 800f66a:	70bb      	strb	r3, [r7, #2]
 800f66c:	4613      	mov	r3, r2
 800f66e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f670:	2300      	movs	r3, #0
 800f672:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f674:	2300      	movs	r3, #0
 800f676:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800f67e:	78bb      	ldrb	r3, [r7, #2]
 800f680:	883a      	ldrh	r2, [r7, #0]
 800f682:	78f9      	ldrb	r1, [r7, #3]
 800f684:	f7f5 f961 	bl	800494a <HAL_PCD_EP_Open>
 800f688:	4603      	mov	r3, r0
 800f68a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f68c:	7bfb      	ldrb	r3, [r7, #15]
 800f68e:	4618      	mov	r0, r3
 800f690:	f000 f958 	bl	800f944 <USBD_Get_USB_Status>
 800f694:	4603      	mov	r3, r0
 800f696:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f698:	7bbb      	ldrb	r3, [r7, #14]
}
 800f69a:	4618      	mov	r0, r3
 800f69c:	3710      	adds	r7, #16
 800f69e:	46bd      	mov	sp, r7
 800f6a0:	bd80      	pop	{r7, pc}

0800f6a2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f6a2:	b580      	push	{r7, lr}
 800f6a4:	b084      	sub	sp, #16
 800f6a6:	af00      	add	r7, sp, #0
 800f6a8:	6078      	str	r0, [r7, #4]
 800f6aa:	460b      	mov	r3, r1
 800f6ac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f6ae:	2300      	movs	r3, #0
 800f6b0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f6b2:	2300      	movs	r3, #0
 800f6b4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800f6bc:	78fa      	ldrb	r2, [r7, #3]
 800f6be:	4611      	mov	r1, r2
 800f6c0:	4618      	mov	r0, r3
 800f6c2:	f7f5 f9a1 	bl	8004a08 <HAL_PCD_EP_Close>
 800f6c6:	4603      	mov	r3, r0
 800f6c8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f6ca:	7bfb      	ldrb	r3, [r7, #15]
 800f6cc:	4618      	mov	r0, r3
 800f6ce:	f000 f939 	bl	800f944 <USBD_Get_USB_Status>
 800f6d2:	4603      	mov	r3, r0
 800f6d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f6d6:	7bbb      	ldrb	r3, [r7, #14]
}
 800f6d8:	4618      	mov	r0, r3
 800f6da:	3710      	adds	r7, #16
 800f6dc:	46bd      	mov	sp, r7
 800f6de:	bd80      	pop	{r7, pc}

0800f6e0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f6e0:	b580      	push	{r7, lr}
 800f6e2:	b084      	sub	sp, #16
 800f6e4:	af00      	add	r7, sp, #0
 800f6e6:	6078      	str	r0, [r7, #4]
 800f6e8:	460b      	mov	r3, r1
 800f6ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f6ec:	2300      	movs	r3, #0
 800f6ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f6f0:	2300      	movs	r3, #0
 800f6f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800f6fa:	78fa      	ldrb	r2, [r7, #3]
 800f6fc:	4611      	mov	r1, r2
 800f6fe:	4618      	mov	r0, r3
 800f700:	f7f5 fa4a 	bl	8004b98 <HAL_PCD_EP_SetStall>
 800f704:	4603      	mov	r3, r0
 800f706:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f708:	7bfb      	ldrb	r3, [r7, #15]
 800f70a:	4618      	mov	r0, r3
 800f70c:	f000 f91a 	bl	800f944 <USBD_Get_USB_Status>
 800f710:	4603      	mov	r3, r0
 800f712:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f714:	7bbb      	ldrb	r3, [r7, #14]
}
 800f716:	4618      	mov	r0, r3
 800f718:	3710      	adds	r7, #16
 800f71a:	46bd      	mov	sp, r7
 800f71c:	bd80      	pop	{r7, pc}

0800f71e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f71e:	b580      	push	{r7, lr}
 800f720:	b084      	sub	sp, #16
 800f722:	af00      	add	r7, sp, #0
 800f724:	6078      	str	r0, [r7, #4]
 800f726:	460b      	mov	r3, r1
 800f728:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f72a:	2300      	movs	r3, #0
 800f72c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f72e:	2300      	movs	r3, #0
 800f730:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800f738:	78fa      	ldrb	r2, [r7, #3]
 800f73a:	4611      	mov	r1, r2
 800f73c:	4618      	mov	r0, r3
 800f73e:	f7f5 fa7d 	bl	8004c3c <HAL_PCD_EP_ClrStall>
 800f742:	4603      	mov	r3, r0
 800f744:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f746:	7bfb      	ldrb	r3, [r7, #15]
 800f748:	4618      	mov	r0, r3
 800f74a:	f000 f8fb 	bl	800f944 <USBD_Get_USB_Status>
 800f74e:	4603      	mov	r3, r0
 800f750:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f752:	7bbb      	ldrb	r3, [r7, #14]
}
 800f754:	4618      	mov	r0, r3
 800f756:	3710      	adds	r7, #16
 800f758:	46bd      	mov	sp, r7
 800f75a:	bd80      	pop	{r7, pc}

0800f75c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f75c:	b480      	push	{r7}
 800f75e:	b085      	sub	sp, #20
 800f760:	af00      	add	r7, sp, #0
 800f762:	6078      	str	r0, [r7, #4]
 800f764:	460b      	mov	r3, r1
 800f766:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800f76e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800f770:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f774:	2b00      	cmp	r3, #0
 800f776:	da0b      	bge.n	800f790 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800f778:	78fb      	ldrb	r3, [r7, #3]
 800f77a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f77e:	68f9      	ldr	r1, [r7, #12]
 800f780:	4613      	mov	r3, r2
 800f782:	009b      	lsls	r3, r3, #2
 800f784:	4413      	add	r3, r2
 800f786:	00db      	lsls	r3, r3, #3
 800f788:	440b      	add	r3, r1
 800f78a:	3312      	adds	r3, #18
 800f78c:	781b      	ldrb	r3, [r3, #0]
 800f78e:	e00b      	b.n	800f7a8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800f790:	78fb      	ldrb	r3, [r7, #3]
 800f792:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f796:	68f9      	ldr	r1, [r7, #12]
 800f798:	4613      	mov	r3, r2
 800f79a:	009b      	lsls	r3, r3, #2
 800f79c:	4413      	add	r3, r2
 800f79e:	00db      	lsls	r3, r3, #3
 800f7a0:	440b      	add	r3, r1
 800f7a2:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800f7a6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f7a8:	4618      	mov	r0, r3
 800f7aa:	3714      	adds	r7, #20
 800f7ac:	46bd      	mov	sp, r7
 800f7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7b2:	4770      	bx	lr

0800f7b4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800f7b4:	b580      	push	{r7, lr}
 800f7b6:	b084      	sub	sp, #16
 800f7b8:	af00      	add	r7, sp, #0
 800f7ba:	6078      	str	r0, [r7, #4]
 800f7bc:	460b      	mov	r3, r1
 800f7be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f7c0:	2300      	movs	r3, #0
 800f7c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f7c4:	2300      	movs	r3, #0
 800f7c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800f7ce:	78fa      	ldrb	r2, [r7, #3]
 800f7d0:	4611      	mov	r1, r2
 800f7d2:	4618      	mov	r0, r3
 800f7d4:	f7f5 f895 	bl	8004902 <HAL_PCD_SetAddress>
 800f7d8:	4603      	mov	r3, r0
 800f7da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f7dc:	7bfb      	ldrb	r3, [r7, #15]
 800f7de:	4618      	mov	r0, r3
 800f7e0:	f000 f8b0 	bl	800f944 <USBD_Get_USB_Status>
 800f7e4:	4603      	mov	r3, r0
 800f7e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f7e8:	7bbb      	ldrb	r3, [r7, #14]
}
 800f7ea:	4618      	mov	r0, r3
 800f7ec:	3710      	adds	r7, #16
 800f7ee:	46bd      	mov	sp, r7
 800f7f0:	bd80      	pop	{r7, pc}

0800f7f2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f7f2:	b580      	push	{r7, lr}
 800f7f4:	b086      	sub	sp, #24
 800f7f6:	af00      	add	r7, sp, #0
 800f7f8:	60f8      	str	r0, [r7, #12]
 800f7fa:	607a      	str	r2, [r7, #4]
 800f7fc:	603b      	str	r3, [r7, #0]
 800f7fe:	460b      	mov	r3, r1
 800f800:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f802:	2300      	movs	r3, #0
 800f804:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f806:	2300      	movs	r3, #0
 800f808:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800f810:	7af9      	ldrb	r1, [r7, #11]
 800f812:	683b      	ldr	r3, [r7, #0]
 800f814:	687a      	ldr	r2, [r7, #4]
 800f816:	f7f5 f988 	bl	8004b2a <HAL_PCD_EP_Transmit>
 800f81a:	4603      	mov	r3, r0
 800f81c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f81e:	7dfb      	ldrb	r3, [r7, #23]
 800f820:	4618      	mov	r0, r3
 800f822:	f000 f88f 	bl	800f944 <USBD_Get_USB_Status>
 800f826:	4603      	mov	r3, r0
 800f828:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f82a:	7dbb      	ldrb	r3, [r7, #22]
}
 800f82c:	4618      	mov	r0, r3
 800f82e:	3718      	adds	r7, #24
 800f830:	46bd      	mov	sp, r7
 800f832:	bd80      	pop	{r7, pc}

0800f834 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f834:	b580      	push	{r7, lr}
 800f836:	b086      	sub	sp, #24
 800f838:	af00      	add	r7, sp, #0
 800f83a:	60f8      	str	r0, [r7, #12]
 800f83c:	607a      	str	r2, [r7, #4]
 800f83e:	603b      	str	r3, [r7, #0]
 800f840:	460b      	mov	r3, r1
 800f842:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f844:	2300      	movs	r3, #0
 800f846:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f848:	2300      	movs	r3, #0
 800f84a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f84c:	68fb      	ldr	r3, [r7, #12]
 800f84e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800f852:	7af9      	ldrb	r1, [r7, #11]
 800f854:	683b      	ldr	r3, [r7, #0]
 800f856:	687a      	ldr	r2, [r7, #4]
 800f858:	f7f5 f91e 	bl	8004a98 <HAL_PCD_EP_Receive>
 800f85c:	4603      	mov	r3, r0
 800f85e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f860:	7dfb      	ldrb	r3, [r7, #23]
 800f862:	4618      	mov	r0, r3
 800f864:	f000 f86e 	bl	800f944 <USBD_Get_USB_Status>
 800f868:	4603      	mov	r3, r0
 800f86a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f86c:	7dbb      	ldrb	r3, [r7, #22]
}
 800f86e:	4618      	mov	r0, r3
 800f870:	3718      	adds	r7, #24
 800f872:	46bd      	mov	sp, r7
 800f874:	bd80      	pop	{r7, pc}

0800f876 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f876:	b580      	push	{r7, lr}
 800f878:	b082      	sub	sp, #8
 800f87a:	af00      	add	r7, sp, #0
 800f87c:	6078      	str	r0, [r7, #4]
 800f87e:	460b      	mov	r3, r1
 800f880:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800f888:	78fa      	ldrb	r2, [r7, #3]
 800f88a:	4611      	mov	r1, r2
 800f88c:	4618      	mov	r0, r3
 800f88e:	f7f5 f934 	bl	8004afa <HAL_PCD_EP_GetRxCount>
 800f892:	4603      	mov	r3, r0
}
 800f894:	4618      	mov	r0, r3
 800f896:	3708      	adds	r7, #8
 800f898:	46bd      	mov	sp, r7
 800f89a:	bd80      	pop	{r7, pc}

0800f89c <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f89c:	b580      	push	{r7, lr}
 800f89e:	b082      	sub	sp, #8
 800f8a0:	af00      	add	r7, sp, #0
 800f8a2:	6078      	str	r0, [r7, #4]
 800f8a4:	460b      	mov	r3, r1
 800f8a6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800f8a8:	78fb      	ldrb	r3, [r7, #3]
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	d002      	beq.n	800f8b4 <HAL_PCDEx_LPM_Callback+0x18>
 800f8ae:	2b01      	cmp	r3, #1
 800f8b0:	d013      	beq.n	800f8da <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800f8b2:	e023      	b.n	800f8fc <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	7a5b      	ldrb	r3, [r3, #9]
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	d007      	beq.n	800f8cc <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800f8bc:	f000 f83c 	bl	800f938 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f8c0:	4b10      	ldr	r3, [pc, #64]	@ (800f904 <HAL_PCDEx_LPM_Callback+0x68>)
 800f8c2:	691b      	ldr	r3, [r3, #16]
 800f8c4:	4a0f      	ldr	r2, [pc, #60]	@ (800f904 <HAL_PCDEx_LPM_Callback+0x68>)
 800f8c6:	f023 0306 	bic.w	r3, r3, #6
 800f8ca:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800f8d2:	4618      	mov	r0, r3
 800f8d4:	f7fb f9c6 	bl	800ac64 <USBD_LL_Resume>
    break;
 800f8d8:	e010      	b.n	800f8fc <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800f8e0:	4618      	mov	r0, r3
 800f8e2:	f7fb f9a9 	bl	800ac38 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	7a5b      	ldrb	r3, [r3, #9]
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d005      	beq.n	800f8fa <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f8ee:	4b05      	ldr	r3, [pc, #20]	@ (800f904 <HAL_PCDEx_LPM_Callback+0x68>)
 800f8f0:	691b      	ldr	r3, [r3, #16]
 800f8f2:	4a04      	ldr	r2, [pc, #16]	@ (800f904 <HAL_PCDEx_LPM_Callback+0x68>)
 800f8f4:	f043 0306 	orr.w	r3, r3, #6
 800f8f8:	6113      	str	r3, [r2, #16]
    break;
 800f8fa:	bf00      	nop
}
 800f8fc:	bf00      	nop
 800f8fe:	3708      	adds	r7, #8
 800f900:	46bd      	mov	sp, r7
 800f902:	bd80      	pop	{r7, pc}
 800f904:	e000ed00 	.word	0xe000ed00

0800f908 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800f908:	b480      	push	{r7}
 800f90a:	b083      	sub	sp, #12
 800f90c:	af00      	add	r7, sp, #0
 800f90e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800f910:	4b03      	ldr	r3, [pc, #12]	@ (800f920 <USBD_static_malloc+0x18>)
}
 800f912:	4618      	mov	r0, r3
 800f914:	370c      	adds	r7, #12
 800f916:	46bd      	mov	sp, r7
 800f918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f91c:	4770      	bx	lr
 800f91e:	bf00      	nop
 800f920:	20016858 	.word	0x20016858

0800f924 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800f924:	b480      	push	{r7}
 800f926:	b083      	sub	sp, #12
 800f928:	af00      	add	r7, sp, #0
 800f92a:	6078      	str	r0, [r7, #4]

}
 800f92c:	bf00      	nop
 800f92e:	370c      	adds	r7, #12
 800f930:	46bd      	mov	sp, r7
 800f932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f936:	4770      	bx	lr

0800f938 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800f938:	b580      	push	{r7, lr}
 800f93a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800f93c:	f7f2 ffb4 	bl	80028a8 <SystemClock_Config>
}
 800f940:	bf00      	nop
 800f942:	bd80      	pop	{r7, pc}

0800f944 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f944:	b480      	push	{r7}
 800f946:	b085      	sub	sp, #20
 800f948:	af00      	add	r7, sp, #0
 800f94a:	4603      	mov	r3, r0
 800f94c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f94e:	2300      	movs	r3, #0
 800f950:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f952:	79fb      	ldrb	r3, [r7, #7]
 800f954:	2b03      	cmp	r3, #3
 800f956:	d817      	bhi.n	800f988 <USBD_Get_USB_Status+0x44>
 800f958:	a201      	add	r2, pc, #4	@ (adr r2, 800f960 <USBD_Get_USB_Status+0x1c>)
 800f95a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f95e:	bf00      	nop
 800f960:	0800f971 	.word	0x0800f971
 800f964:	0800f977 	.word	0x0800f977
 800f968:	0800f97d 	.word	0x0800f97d
 800f96c:	0800f983 	.word	0x0800f983
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800f970:	2300      	movs	r3, #0
 800f972:	73fb      	strb	r3, [r7, #15]
    break;
 800f974:	e00b      	b.n	800f98e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f976:	2303      	movs	r3, #3
 800f978:	73fb      	strb	r3, [r7, #15]
    break;
 800f97a:	e008      	b.n	800f98e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f97c:	2301      	movs	r3, #1
 800f97e:	73fb      	strb	r3, [r7, #15]
    break;
 800f980:	e005      	b.n	800f98e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f982:	2303      	movs	r3, #3
 800f984:	73fb      	strb	r3, [r7, #15]
    break;
 800f986:	e002      	b.n	800f98e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800f988:	2303      	movs	r3, #3
 800f98a:	73fb      	strb	r3, [r7, #15]
    break;
 800f98c:	bf00      	nop
  }
  return usb_status;
 800f98e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f990:	4618      	mov	r0, r3
 800f992:	3714      	adds	r7, #20
 800f994:	46bd      	mov	sp, r7
 800f996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f99a:	4770      	bx	lr

0800f99c <_vsniprintf_r>:
 800f99c:	b530      	push	{r4, r5, lr}
 800f99e:	4614      	mov	r4, r2
 800f9a0:	2c00      	cmp	r4, #0
 800f9a2:	b09b      	sub	sp, #108	@ 0x6c
 800f9a4:	4605      	mov	r5, r0
 800f9a6:	461a      	mov	r2, r3
 800f9a8:	da05      	bge.n	800f9b6 <_vsniprintf_r+0x1a>
 800f9aa:	238b      	movs	r3, #139	@ 0x8b
 800f9ac:	6003      	str	r3, [r0, #0]
 800f9ae:	f04f 30ff 	mov.w	r0, #4294967295
 800f9b2:	b01b      	add	sp, #108	@ 0x6c
 800f9b4:	bd30      	pop	{r4, r5, pc}
 800f9b6:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800f9ba:	f8ad 300c 	strh.w	r3, [sp, #12]
 800f9be:	bf14      	ite	ne
 800f9c0:	f104 33ff 	addne.w	r3, r4, #4294967295
 800f9c4:	4623      	moveq	r3, r4
 800f9c6:	9302      	str	r3, [sp, #8]
 800f9c8:	9305      	str	r3, [sp, #20]
 800f9ca:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f9ce:	9100      	str	r1, [sp, #0]
 800f9d0:	9104      	str	r1, [sp, #16]
 800f9d2:	f8ad 300e 	strh.w	r3, [sp, #14]
 800f9d6:	4669      	mov	r1, sp
 800f9d8:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800f9da:	f000 fa05 	bl	800fde8 <_svfiprintf_r>
 800f9de:	1c43      	adds	r3, r0, #1
 800f9e0:	bfbc      	itt	lt
 800f9e2:	238b      	movlt	r3, #139	@ 0x8b
 800f9e4:	602b      	strlt	r3, [r5, #0]
 800f9e6:	2c00      	cmp	r4, #0
 800f9e8:	d0e3      	beq.n	800f9b2 <_vsniprintf_r+0x16>
 800f9ea:	9b00      	ldr	r3, [sp, #0]
 800f9ec:	2200      	movs	r2, #0
 800f9ee:	701a      	strb	r2, [r3, #0]
 800f9f0:	e7df      	b.n	800f9b2 <_vsniprintf_r+0x16>
	...

0800f9f4 <vsniprintf>:
 800f9f4:	b507      	push	{r0, r1, r2, lr}
 800f9f6:	9300      	str	r3, [sp, #0]
 800f9f8:	4613      	mov	r3, r2
 800f9fa:	460a      	mov	r2, r1
 800f9fc:	4601      	mov	r1, r0
 800f9fe:	4803      	ldr	r0, [pc, #12]	@ (800fa0c <vsniprintf+0x18>)
 800fa00:	6800      	ldr	r0, [r0, #0]
 800fa02:	f7ff ffcb 	bl	800f99c <_vsniprintf_r>
 800fa06:	b003      	add	sp, #12
 800fa08:	f85d fb04 	ldr.w	pc, [sp], #4
 800fa0c:	200001a8 	.word	0x200001a8

0800fa10 <memset>:
 800fa10:	4402      	add	r2, r0
 800fa12:	4603      	mov	r3, r0
 800fa14:	4293      	cmp	r3, r2
 800fa16:	d100      	bne.n	800fa1a <memset+0xa>
 800fa18:	4770      	bx	lr
 800fa1a:	f803 1b01 	strb.w	r1, [r3], #1
 800fa1e:	e7f9      	b.n	800fa14 <memset+0x4>

0800fa20 <_reclaim_reent>:
 800fa20:	4b29      	ldr	r3, [pc, #164]	@ (800fac8 <_reclaim_reent+0xa8>)
 800fa22:	681b      	ldr	r3, [r3, #0]
 800fa24:	4283      	cmp	r3, r0
 800fa26:	b570      	push	{r4, r5, r6, lr}
 800fa28:	4604      	mov	r4, r0
 800fa2a:	d04b      	beq.n	800fac4 <_reclaim_reent+0xa4>
 800fa2c:	69c3      	ldr	r3, [r0, #28]
 800fa2e:	b1ab      	cbz	r3, 800fa5c <_reclaim_reent+0x3c>
 800fa30:	68db      	ldr	r3, [r3, #12]
 800fa32:	b16b      	cbz	r3, 800fa50 <_reclaim_reent+0x30>
 800fa34:	2500      	movs	r5, #0
 800fa36:	69e3      	ldr	r3, [r4, #28]
 800fa38:	68db      	ldr	r3, [r3, #12]
 800fa3a:	5959      	ldr	r1, [r3, r5]
 800fa3c:	2900      	cmp	r1, #0
 800fa3e:	d13b      	bne.n	800fab8 <_reclaim_reent+0x98>
 800fa40:	3504      	adds	r5, #4
 800fa42:	2d80      	cmp	r5, #128	@ 0x80
 800fa44:	d1f7      	bne.n	800fa36 <_reclaim_reent+0x16>
 800fa46:	69e3      	ldr	r3, [r4, #28]
 800fa48:	4620      	mov	r0, r4
 800fa4a:	68d9      	ldr	r1, [r3, #12]
 800fa4c:	f000 f878 	bl	800fb40 <_free_r>
 800fa50:	69e3      	ldr	r3, [r4, #28]
 800fa52:	6819      	ldr	r1, [r3, #0]
 800fa54:	b111      	cbz	r1, 800fa5c <_reclaim_reent+0x3c>
 800fa56:	4620      	mov	r0, r4
 800fa58:	f000 f872 	bl	800fb40 <_free_r>
 800fa5c:	6961      	ldr	r1, [r4, #20]
 800fa5e:	b111      	cbz	r1, 800fa66 <_reclaim_reent+0x46>
 800fa60:	4620      	mov	r0, r4
 800fa62:	f000 f86d 	bl	800fb40 <_free_r>
 800fa66:	69e1      	ldr	r1, [r4, #28]
 800fa68:	b111      	cbz	r1, 800fa70 <_reclaim_reent+0x50>
 800fa6a:	4620      	mov	r0, r4
 800fa6c:	f000 f868 	bl	800fb40 <_free_r>
 800fa70:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800fa72:	b111      	cbz	r1, 800fa7a <_reclaim_reent+0x5a>
 800fa74:	4620      	mov	r0, r4
 800fa76:	f000 f863 	bl	800fb40 <_free_r>
 800fa7a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fa7c:	b111      	cbz	r1, 800fa84 <_reclaim_reent+0x64>
 800fa7e:	4620      	mov	r0, r4
 800fa80:	f000 f85e 	bl	800fb40 <_free_r>
 800fa84:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800fa86:	b111      	cbz	r1, 800fa8e <_reclaim_reent+0x6e>
 800fa88:	4620      	mov	r0, r4
 800fa8a:	f000 f859 	bl	800fb40 <_free_r>
 800fa8e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800fa90:	b111      	cbz	r1, 800fa98 <_reclaim_reent+0x78>
 800fa92:	4620      	mov	r0, r4
 800fa94:	f000 f854 	bl	800fb40 <_free_r>
 800fa98:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800fa9a:	b111      	cbz	r1, 800faa2 <_reclaim_reent+0x82>
 800fa9c:	4620      	mov	r0, r4
 800fa9e:	f000 f84f 	bl	800fb40 <_free_r>
 800faa2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800faa4:	b111      	cbz	r1, 800faac <_reclaim_reent+0x8c>
 800faa6:	4620      	mov	r0, r4
 800faa8:	f000 f84a 	bl	800fb40 <_free_r>
 800faac:	6a23      	ldr	r3, [r4, #32]
 800faae:	b14b      	cbz	r3, 800fac4 <_reclaim_reent+0xa4>
 800fab0:	4620      	mov	r0, r4
 800fab2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fab6:	4718      	bx	r3
 800fab8:	680e      	ldr	r6, [r1, #0]
 800faba:	4620      	mov	r0, r4
 800fabc:	f000 f840 	bl	800fb40 <_free_r>
 800fac0:	4631      	mov	r1, r6
 800fac2:	e7bb      	b.n	800fa3c <_reclaim_reent+0x1c>
 800fac4:	bd70      	pop	{r4, r5, r6, pc}
 800fac6:	bf00      	nop
 800fac8:	200001a8 	.word	0x200001a8

0800facc <__errno>:
 800facc:	4b01      	ldr	r3, [pc, #4]	@ (800fad4 <__errno+0x8>)
 800face:	6818      	ldr	r0, [r3, #0]
 800fad0:	4770      	bx	lr
 800fad2:	bf00      	nop
 800fad4:	200001a8 	.word	0x200001a8

0800fad8 <__libc_init_array>:
 800fad8:	b570      	push	{r4, r5, r6, lr}
 800fada:	4d0d      	ldr	r5, [pc, #52]	@ (800fb10 <__libc_init_array+0x38>)
 800fadc:	4c0d      	ldr	r4, [pc, #52]	@ (800fb14 <__libc_init_array+0x3c>)
 800fade:	1b64      	subs	r4, r4, r5
 800fae0:	10a4      	asrs	r4, r4, #2
 800fae2:	2600      	movs	r6, #0
 800fae4:	42a6      	cmp	r6, r4
 800fae6:	d109      	bne.n	800fafc <__libc_init_array+0x24>
 800fae8:	4d0b      	ldr	r5, [pc, #44]	@ (800fb18 <__libc_init_array+0x40>)
 800faea:	4c0c      	ldr	r4, [pc, #48]	@ (800fb1c <__libc_init_array+0x44>)
 800faec:	f001 f84e 	bl	8010b8c <_init>
 800faf0:	1b64      	subs	r4, r4, r5
 800faf2:	10a4      	asrs	r4, r4, #2
 800faf4:	2600      	movs	r6, #0
 800faf6:	42a6      	cmp	r6, r4
 800faf8:	d105      	bne.n	800fb06 <__libc_init_array+0x2e>
 800fafa:	bd70      	pop	{r4, r5, r6, pc}
 800fafc:	f855 3b04 	ldr.w	r3, [r5], #4
 800fb00:	4798      	blx	r3
 800fb02:	3601      	adds	r6, #1
 800fb04:	e7ee      	b.n	800fae4 <__libc_init_array+0xc>
 800fb06:	f855 3b04 	ldr.w	r3, [r5], #4
 800fb0a:	4798      	blx	r3
 800fb0c:	3601      	adds	r6, #1
 800fb0e:	e7f2      	b.n	800faf6 <__libc_init_array+0x1e>
 800fb10:	080115cc 	.word	0x080115cc
 800fb14:	080115cc 	.word	0x080115cc
 800fb18:	080115cc 	.word	0x080115cc
 800fb1c:	080115d0 	.word	0x080115d0

0800fb20 <__retarget_lock_acquire_recursive>:
 800fb20:	4770      	bx	lr

0800fb22 <__retarget_lock_release_recursive>:
 800fb22:	4770      	bx	lr

0800fb24 <memcpy>:
 800fb24:	440a      	add	r2, r1
 800fb26:	4291      	cmp	r1, r2
 800fb28:	f100 33ff 	add.w	r3, r0, #4294967295
 800fb2c:	d100      	bne.n	800fb30 <memcpy+0xc>
 800fb2e:	4770      	bx	lr
 800fb30:	b510      	push	{r4, lr}
 800fb32:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fb36:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fb3a:	4291      	cmp	r1, r2
 800fb3c:	d1f9      	bne.n	800fb32 <memcpy+0xe>
 800fb3e:	bd10      	pop	{r4, pc}

0800fb40 <_free_r>:
 800fb40:	b538      	push	{r3, r4, r5, lr}
 800fb42:	4605      	mov	r5, r0
 800fb44:	2900      	cmp	r1, #0
 800fb46:	d041      	beq.n	800fbcc <_free_r+0x8c>
 800fb48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fb4c:	1f0c      	subs	r4, r1, #4
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	bfb8      	it	lt
 800fb52:	18e4      	addlt	r4, r4, r3
 800fb54:	f000 f8e0 	bl	800fd18 <__malloc_lock>
 800fb58:	4a1d      	ldr	r2, [pc, #116]	@ (800fbd0 <_free_r+0x90>)
 800fb5a:	6813      	ldr	r3, [r2, #0]
 800fb5c:	b933      	cbnz	r3, 800fb6c <_free_r+0x2c>
 800fb5e:	6063      	str	r3, [r4, #4]
 800fb60:	6014      	str	r4, [r2, #0]
 800fb62:	4628      	mov	r0, r5
 800fb64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fb68:	f000 b8dc 	b.w	800fd24 <__malloc_unlock>
 800fb6c:	42a3      	cmp	r3, r4
 800fb6e:	d908      	bls.n	800fb82 <_free_r+0x42>
 800fb70:	6820      	ldr	r0, [r4, #0]
 800fb72:	1821      	adds	r1, r4, r0
 800fb74:	428b      	cmp	r3, r1
 800fb76:	bf01      	itttt	eq
 800fb78:	6819      	ldreq	r1, [r3, #0]
 800fb7a:	685b      	ldreq	r3, [r3, #4]
 800fb7c:	1809      	addeq	r1, r1, r0
 800fb7e:	6021      	streq	r1, [r4, #0]
 800fb80:	e7ed      	b.n	800fb5e <_free_r+0x1e>
 800fb82:	461a      	mov	r2, r3
 800fb84:	685b      	ldr	r3, [r3, #4]
 800fb86:	b10b      	cbz	r3, 800fb8c <_free_r+0x4c>
 800fb88:	42a3      	cmp	r3, r4
 800fb8a:	d9fa      	bls.n	800fb82 <_free_r+0x42>
 800fb8c:	6811      	ldr	r1, [r2, #0]
 800fb8e:	1850      	adds	r0, r2, r1
 800fb90:	42a0      	cmp	r0, r4
 800fb92:	d10b      	bne.n	800fbac <_free_r+0x6c>
 800fb94:	6820      	ldr	r0, [r4, #0]
 800fb96:	4401      	add	r1, r0
 800fb98:	1850      	adds	r0, r2, r1
 800fb9a:	4283      	cmp	r3, r0
 800fb9c:	6011      	str	r1, [r2, #0]
 800fb9e:	d1e0      	bne.n	800fb62 <_free_r+0x22>
 800fba0:	6818      	ldr	r0, [r3, #0]
 800fba2:	685b      	ldr	r3, [r3, #4]
 800fba4:	6053      	str	r3, [r2, #4]
 800fba6:	4408      	add	r0, r1
 800fba8:	6010      	str	r0, [r2, #0]
 800fbaa:	e7da      	b.n	800fb62 <_free_r+0x22>
 800fbac:	d902      	bls.n	800fbb4 <_free_r+0x74>
 800fbae:	230c      	movs	r3, #12
 800fbb0:	602b      	str	r3, [r5, #0]
 800fbb2:	e7d6      	b.n	800fb62 <_free_r+0x22>
 800fbb4:	6820      	ldr	r0, [r4, #0]
 800fbb6:	1821      	adds	r1, r4, r0
 800fbb8:	428b      	cmp	r3, r1
 800fbba:	bf04      	itt	eq
 800fbbc:	6819      	ldreq	r1, [r3, #0]
 800fbbe:	685b      	ldreq	r3, [r3, #4]
 800fbc0:	6063      	str	r3, [r4, #4]
 800fbc2:	bf04      	itt	eq
 800fbc4:	1809      	addeq	r1, r1, r0
 800fbc6:	6021      	streq	r1, [r4, #0]
 800fbc8:	6054      	str	r4, [r2, #4]
 800fbca:	e7ca      	b.n	800fb62 <_free_r+0x22>
 800fbcc:	bd38      	pop	{r3, r4, r5, pc}
 800fbce:	bf00      	nop
 800fbd0:	20016bbc 	.word	0x20016bbc

0800fbd4 <sbrk_aligned>:
 800fbd4:	b570      	push	{r4, r5, r6, lr}
 800fbd6:	4e0f      	ldr	r6, [pc, #60]	@ (800fc14 <sbrk_aligned+0x40>)
 800fbd8:	460c      	mov	r4, r1
 800fbda:	6831      	ldr	r1, [r6, #0]
 800fbdc:	4605      	mov	r5, r0
 800fbde:	b911      	cbnz	r1, 800fbe6 <sbrk_aligned+0x12>
 800fbe0:	f000 fba6 	bl	8010330 <_sbrk_r>
 800fbe4:	6030      	str	r0, [r6, #0]
 800fbe6:	4621      	mov	r1, r4
 800fbe8:	4628      	mov	r0, r5
 800fbea:	f000 fba1 	bl	8010330 <_sbrk_r>
 800fbee:	1c43      	adds	r3, r0, #1
 800fbf0:	d103      	bne.n	800fbfa <sbrk_aligned+0x26>
 800fbf2:	f04f 34ff 	mov.w	r4, #4294967295
 800fbf6:	4620      	mov	r0, r4
 800fbf8:	bd70      	pop	{r4, r5, r6, pc}
 800fbfa:	1cc4      	adds	r4, r0, #3
 800fbfc:	f024 0403 	bic.w	r4, r4, #3
 800fc00:	42a0      	cmp	r0, r4
 800fc02:	d0f8      	beq.n	800fbf6 <sbrk_aligned+0x22>
 800fc04:	1a21      	subs	r1, r4, r0
 800fc06:	4628      	mov	r0, r5
 800fc08:	f000 fb92 	bl	8010330 <_sbrk_r>
 800fc0c:	3001      	adds	r0, #1
 800fc0e:	d1f2      	bne.n	800fbf6 <sbrk_aligned+0x22>
 800fc10:	e7ef      	b.n	800fbf2 <sbrk_aligned+0x1e>
 800fc12:	bf00      	nop
 800fc14:	20016bb8 	.word	0x20016bb8

0800fc18 <_malloc_r>:
 800fc18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fc1c:	1ccd      	adds	r5, r1, #3
 800fc1e:	f025 0503 	bic.w	r5, r5, #3
 800fc22:	3508      	adds	r5, #8
 800fc24:	2d0c      	cmp	r5, #12
 800fc26:	bf38      	it	cc
 800fc28:	250c      	movcc	r5, #12
 800fc2a:	2d00      	cmp	r5, #0
 800fc2c:	4606      	mov	r6, r0
 800fc2e:	db01      	blt.n	800fc34 <_malloc_r+0x1c>
 800fc30:	42a9      	cmp	r1, r5
 800fc32:	d904      	bls.n	800fc3e <_malloc_r+0x26>
 800fc34:	230c      	movs	r3, #12
 800fc36:	6033      	str	r3, [r6, #0]
 800fc38:	2000      	movs	r0, #0
 800fc3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fc3e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800fd14 <_malloc_r+0xfc>
 800fc42:	f000 f869 	bl	800fd18 <__malloc_lock>
 800fc46:	f8d8 3000 	ldr.w	r3, [r8]
 800fc4a:	461c      	mov	r4, r3
 800fc4c:	bb44      	cbnz	r4, 800fca0 <_malloc_r+0x88>
 800fc4e:	4629      	mov	r1, r5
 800fc50:	4630      	mov	r0, r6
 800fc52:	f7ff ffbf 	bl	800fbd4 <sbrk_aligned>
 800fc56:	1c43      	adds	r3, r0, #1
 800fc58:	4604      	mov	r4, r0
 800fc5a:	d158      	bne.n	800fd0e <_malloc_r+0xf6>
 800fc5c:	f8d8 4000 	ldr.w	r4, [r8]
 800fc60:	4627      	mov	r7, r4
 800fc62:	2f00      	cmp	r7, #0
 800fc64:	d143      	bne.n	800fcee <_malloc_r+0xd6>
 800fc66:	2c00      	cmp	r4, #0
 800fc68:	d04b      	beq.n	800fd02 <_malloc_r+0xea>
 800fc6a:	6823      	ldr	r3, [r4, #0]
 800fc6c:	4639      	mov	r1, r7
 800fc6e:	4630      	mov	r0, r6
 800fc70:	eb04 0903 	add.w	r9, r4, r3
 800fc74:	f000 fb5c 	bl	8010330 <_sbrk_r>
 800fc78:	4581      	cmp	r9, r0
 800fc7a:	d142      	bne.n	800fd02 <_malloc_r+0xea>
 800fc7c:	6821      	ldr	r1, [r4, #0]
 800fc7e:	1a6d      	subs	r5, r5, r1
 800fc80:	4629      	mov	r1, r5
 800fc82:	4630      	mov	r0, r6
 800fc84:	f7ff ffa6 	bl	800fbd4 <sbrk_aligned>
 800fc88:	3001      	adds	r0, #1
 800fc8a:	d03a      	beq.n	800fd02 <_malloc_r+0xea>
 800fc8c:	6823      	ldr	r3, [r4, #0]
 800fc8e:	442b      	add	r3, r5
 800fc90:	6023      	str	r3, [r4, #0]
 800fc92:	f8d8 3000 	ldr.w	r3, [r8]
 800fc96:	685a      	ldr	r2, [r3, #4]
 800fc98:	bb62      	cbnz	r2, 800fcf4 <_malloc_r+0xdc>
 800fc9a:	f8c8 7000 	str.w	r7, [r8]
 800fc9e:	e00f      	b.n	800fcc0 <_malloc_r+0xa8>
 800fca0:	6822      	ldr	r2, [r4, #0]
 800fca2:	1b52      	subs	r2, r2, r5
 800fca4:	d420      	bmi.n	800fce8 <_malloc_r+0xd0>
 800fca6:	2a0b      	cmp	r2, #11
 800fca8:	d917      	bls.n	800fcda <_malloc_r+0xc2>
 800fcaa:	1961      	adds	r1, r4, r5
 800fcac:	42a3      	cmp	r3, r4
 800fcae:	6025      	str	r5, [r4, #0]
 800fcb0:	bf18      	it	ne
 800fcb2:	6059      	strne	r1, [r3, #4]
 800fcb4:	6863      	ldr	r3, [r4, #4]
 800fcb6:	bf08      	it	eq
 800fcb8:	f8c8 1000 	streq.w	r1, [r8]
 800fcbc:	5162      	str	r2, [r4, r5]
 800fcbe:	604b      	str	r3, [r1, #4]
 800fcc0:	4630      	mov	r0, r6
 800fcc2:	f000 f82f 	bl	800fd24 <__malloc_unlock>
 800fcc6:	f104 000b 	add.w	r0, r4, #11
 800fcca:	1d23      	adds	r3, r4, #4
 800fccc:	f020 0007 	bic.w	r0, r0, #7
 800fcd0:	1ac2      	subs	r2, r0, r3
 800fcd2:	bf1c      	itt	ne
 800fcd4:	1a1b      	subne	r3, r3, r0
 800fcd6:	50a3      	strne	r3, [r4, r2]
 800fcd8:	e7af      	b.n	800fc3a <_malloc_r+0x22>
 800fcda:	6862      	ldr	r2, [r4, #4]
 800fcdc:	42a3      	cmp	r3, r4
 800fcde:	bf0c      	ite	eq
 800fce0:	f8c8 2000 	streq.w	r2, [r8]
 800fce4:	605a      	strne	r2, [r3, #4]
 800fce6:	e7eb      	b.n	800fcc0 <_malloc_r+0xa8>
 800fce8:	4623      	mov	r3, r4
 800fcea:	6864      	ldr	r4, [r4, #4]
 800fcec:	e7ae      	b.n	800fc4c <_malloc_r+0x34>
 800fcee:	463c      	mov	r4, r7
 800fcf0:	687f      	ldr	r7, [r7, #4]
 800fcf2:	e7b6      	b.n	800fc62 <_malloc_r+0x4a>
 800fcf4:	461a      	mov	r2, r3
 800fcf6:	685b      	ldr	r3, [r3, #4]
 800fcf8:	42a3      	cmp	r3, r4
 800fcfa:	d1fb      	bne.n	800fcf4 <_malloc_r+0xdc>
 800fcfc:	2300      	movs	r3, #0
 800fcfe:	6053      	str	r3, [r2, #4]
 800fd00:	e7de      	b.n	800fcc0 <_malloc_r+0xa8>
 800fd02:	230c      	movs	r3, #12
 800fd04:	6033      	str	r3, [r6, #0]
 800fd06:	4630      	mov	r0, r6
 800fd08:	f000 f80c 	bl	800fd24 <__malloc_unlock>
 800fd0c:	e794      	b.n	800fc38 <_malloc_r+0x20>
 800fd0e:	6005      	str	r5, [r0, #0]
 800fd10:	e7d6      	b.n	800fcc0 <_malloc_r+0xa8>
 800fd12:	bf00      	nop
 800fd14:	20016bbc 	.word	0x20016bbc

0800fd18 <__malloc_lock>:
 800fd18:	4801      	ldr	r0, [pc, #4]	@ (800fd20 <__malloc_lock+0x8>)
 800fd1a:	f7ff bf01 	b.w	800fb20 <__retarget_lock_acquire_recursive>
 800fd1e:	bf00      	nop
 800fd20:	20016bb4 	.word	0x20016bb4

0800fd24 <__malloc_unlock>:
 800fd24:	4801      	ldr	r0, [pc, #4]	@ (800fd2c <__malloc_unlock+0x8>)
 800fd26:	f7ff befc 	b.w	800fb22 <__retarget_lock_release_recursive>
 800fd2a:	bf00      	nop
 800fd2c:	20016bb4 	.word	0x20016bb4

0800fd30 <__ssputs_r>:
 800fd30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fd34:	688e      	ldr	r6, [r1, #8]
 800fd36:	461f      	mov	r7, r3
 800fd38:	42be      	cmp	r6, r7
 800fd3a:	680b      	ldr	r3, [r1, #0]
 800fd3c:	4682      	mov	sl, r0
 800fd3e:	460c      	mov	r4, r1
 800fd40:	4690      	mov	r8, r2
 800fd42:	d82d      	bhi.n	800fda0 <__ssputs_r+0x70>
 800fd44:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800fd48:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800fd4c:	d026      	beq.n	800fd9c <__ssputs_r+0x6c>
 800fd4e:	6965      	ldr	r5, [r4, #20]
 800fd50:	6909      	ldr	r1, [r1, #16]
 800fd52:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fd56:	eba3 0901 	sub.w	r9, r3, r1
 800fd5a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fd5e:	1c7b      	adds	r3, r7, #1
 800fd60:	444b      	add	r3, r9
 800fd62:	106d      	asrs	r5, r5, #1
 800fd64:	429d      	cmp	r5, r3
 800fd66:	bf38      	it	cc
 800fd68:	461d      	movcc	r5, r3
 800fd6a:	0553      	lsls	r3, r2, #21
 800fd6c:	d527      	bpl.n	800fdbe <__ssputs_r+0x8e>
 800fd6e:	4629      	mov	r1, r5
 800fd70:	f7ff ff52 	bl	800fc18 <_malloc_r>
 800fd74:	4606      	mov	r6, r0
 800fd76:	b360      	cbz	r0, 800fdd2 <__ssputs_r+0xa2>
 800fd78:	6921      	ldr	r1, [r4, #16]
 800fd7a:	464a      	mov	r2, r9
 800fd7c:	f7ff fed2 	bl	800fb24 <memcpy>
 800fd80:	89a3      	ldrh	r3, [r4, #12]
 800fd82:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800fd86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fd8a:	81a3      	strh	r3, [r4, #12]
 800fd8c:	6126      	str	r6, [r4, #16]
 800fd8e:	6165      	str	r5, [r4, #20]
 800fd90:	444e      	add	r6, r9
 800fd92:	eba5 0509 	sub.w	r5, r5, r9
 800fd96:	6026      	str	r6, [r4, #0]
 800fd98:	60a5      	str	r5, [r4, #8]
 800fd9a:	463e      	mov	r6, r7
 800fd9c:	42be      	cmp	r6, r7
 800fd9e:	d900      	bls.n	800fda2 <__ssputs_r+0x72>
 800fda0:	463e      	mov	r6, r7
 800fda2:	6820      	ldr	r0, [r4, #0]
 800fda4:	4632      	mov	r2, r6
 800fda6:	4641      	mov	r1, r8
 800fda8:	f000 faa8 	bl	80102fc <memmove>
 800fdac:	68a3      	ldr	r3, [r4, #8]
 800fdae:	1b9b      	subs	r3, r3, r6
 800fdb0:	60a3      	str	r3, [r4, #8]
 800fdb2:	6823      	ldr	r3, [r4, #0]
 800fdb4:	4433      	add	r3, r6
 800fdb6:	6023      	str	r3, [r4, #0]
 800fdb8:	2000      	movs	r0, #0
 800fdba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fdbe:	462a      	mov	r2, r5
 800fdc0:	f000 fac6 	bl	8010350 <_realloc_r>
 800fdc4:	4606      	mov	r6, r0
 800fdc6:	2800      	cmp	r0, #0
 800fdc8:	d1e0      	bne.n	800fd8c <__ssputs_r+0x5c>
 800fdca:	6921      	ldr	r1, [r4, #16]
 800fdcc:	4650      	mov	r0, sl
 800fdce:	f7ff feb7 	bl	800fb40 <_free_r>
 800fdd2:	230c      	movs	r3, #12
 800fdd4:	f8ca 3000 	str.w	r3, [sl]
 800fdd8:	89a3      	ldrh	r3, [r4, #12]
 800fdda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fdde:	81a3      	strh	r3, [r4, #12]
 800fde0:	f04f 30ff 	mov.w	r0, #4294967295
 800fde4:	e7e9      	b.n	800fdba <__ssputs_r+0x8a>
	...

0800fde8 <_svfiprintf_r>:
 800fde8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdec:	4698      	mov	r8, r3
 800fdee:	898b      	ldrh	r3, [r1, #12]
 800fdf0:	061b      	lsls	r3, r3, #24
 800fdf2:	b09d      	sub	sp, #116	@ 0x74
 800fdf4:	4607      	mov	r7, r0
 800fdf6:	460d      	mov	r5, r1
 800fdf8:	4614      	mov	r4, r2
 800fdfa:	d510      	bpl.n	800fe1e <_svfiprintf_r+0x36>
 800fdfc:	690b      	ldr	r3, [r1, #16]
 800fdfe:	b973      	cbnz	r3, 800fe1e <_svfiprintf_r+0x36>
 800fe00:	2140      	movs	r1, #64	@ 0x40
 800fe02:	f7ff ff09 	bl	800fc18 <_malloc_r>
 800fe06:	6028      	str	r0, [r5, #0]
 800fe08:	6128      	str	r0, [r5, #16]
 800fe0a:	b930      	cbnz	r0, 800fe1a <_svfiprintf_r+0x32>
 800fe0c:	230c      	movs	r3, #12
 800fe0e:	603b      	str	r3, [r7, #0]
 800fe10:	f04f 30ff 	mov.w	r0, #4294967295
 800fe14:	b01d      	add	sp, #116	@ 0x74
 800fe16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe1a:	2340      	movs	r3, #64	@ 0x40
 800fe1c:	616b      	str	r3, [r5, #20]
 800fe1e:	2300      	movs	r3, #0
 800fe20:	9309      	str	r3, [sp, #36]	@ 0x24
 800fe22:	2320      	movs	r3, #32
 800fe24:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800fe28:	f8cd 800c 	str.w	r8, [sp, #12]
 800fe2c:	2330      	movs	r3, #48	@ 0x30
 800fe2e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ffcc <_svfiprintf_r+0x1e4>
 800fe32:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800fe36:	f04f 0901 	mov.w	r9, #1
 800fe3a:	4623      	mov	r3, r4
 800fe3c:	469a      	mov	sl, r3
 800fe3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fe42:	b10a      	cbz	r2, 800fe48 <_svfiprintf_r+0x60>
 800fe44:	2a25      	cmp	r2, #37	@ 0x25
 800fe46:	d1f9      	bne.n	800fe3c <_svfiprintf_r+0x54>
 800fe48:	ebba 0b04 	subs.w	fp, sl, r4
 800fe4c:	d00b      	beq.n	800fe66 <_svfiprintf_r+0x7e>
 800fe4e:	465b      	mov	r3, fp
 800fe50:	4622      	mov	r2, r4
 800fe52:	4629      	mov	r1, r5
 800fe54:	4638      	mov	r0, r7
 800fe56:	f7ff ff6b 	bl	800fd30 <__ssputs_r>
 800fe5a:	3001      	adds	r0, #1
 800fe5c:	f000 80a7 	beq.w	800ffae <_svfiprintf_r+0x1c6>
 800fe60:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fe62:	445a      	add	r2, fp
 800fe64:	9209      	str	r2, [sp, #36]	@ 0x24
 800fe66:	f89a 3000 	ldrb.w	r3, [sl]
 800fe6a:	2b00      	cmp	r3, #0
 800fe6c:	f000 809f 	beq.w	800ffae <_svfiprintf_r+0x1c6>
 800fe70:	2300      	movs	r3, #0
 800fe72:	f04f 32ff 	mov.w	r2, #4294967295
 800fe76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fe7a:	f10a 0a01 	add.w	sl, sl, #1
 800fe7e:	9304      	str	r3, [sp, #16]
 800fe80:	9307      	str	r3, [sp, #28]
 800fe82:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800fe86:	931a      	str	r3, [sp, #104]	@ 0x68
 800fe88:	4654      	mov	r4, sl
 800fe8a:	2205      	movs	r2, #5
 800fe8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fe90:	484e      	ldr	r0, [pc, #312]	@ (800ffcc <_svfiprintf_r+0x1e4>)
 800fe92:	f7f0 f9c5 	bl	8000220 <memchr>
 800fe96:	9a04      	ldr	r2, [sp, #16]
 800fe98:	b9d8      	cbnz	r0, 800fed2 <_svfiprintf_r+0xea>
 800fe9a:	06d0      	lsls	r0, r2, #27
 800fe9c:	bf44      	itt	mi
 800fe9e:	2320      	movmi	r3, #32
 800fea0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fea4:	0711      	lsls	r1, r2, #28
 800fea6:	bf44      	itt	mi
 800fea8:	232b      	movmi	r3, #43	@ 0x2b
 800feaa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800feae:	f89a 3000 	ldrb.w	r3, [sl]
 800feb2:	2b2a      	cmp	r3, #42	@ 0x2a
 800feb4:	d015      	beq.n	800fee2 <_svfiprintf_r+0xfa>
 800feb6:	9a07      	ldr	r2, [sp, #28]
 800feb8:	4654      	mov	r4, sl
 800feba:	2000      	movs	r0, #0
 800febc:	f04f 0c0a 	mov.w	ip, #10
 800fec0:	4621      	mov	r1, r4
 800fec2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fec6:	3b30      	subs	r3, #48	@ 0x30
 800fec8:	2b09      	cmp	r3, #9
 800feca:	d94b      	bls.n	800ff64 <_svfiprintf_r+0x17c>
 800fecc:	b1b0      	cbz	r0, 800fefc <_svfiprintf_r+0x114>
 800fece:	9207      	str	r2, [sp, #28]
 800fed0:	e014      	b.n	800fefc <_svfiprintf_r+0x114>
 800fed2:	eba0 0308 	sub.w	r3, r0, r8
 800fed6:	fa09 f303 	lsl.w	r3, r9, r3
 800feda:	4313      	orrs	r3, r2
 800fedc:	9304      	str	r3, [sp, #16]
 800fede:	46a2      	mov	sl, r4
 800fee0:	e7d2      	b.n	800fe88 <_svfiprintf_r+0xa0>
 800fee2:	9b03      	ldr	r3, [sp, #12]
 800fee4:	1d19      	adds	r1, r3, #4
 800fee6:	681b      	ldr	r3, [r3, #0]
 800fee8:	9103      	str	r1, [sp, #12]
 800feea:	2b00      	cmp	r3, #0
 800feec:	bfbb      	ittet	lt
 800feee:	425b      	neglt	r3, r3
 800fef0:	f042 0202 	orrlt.w	r2, r2, #2
 800fef4:	9307      	strge	r3, [sp, #28]
 800fef6:	9307      	strlt	r3, [sp, #28]
 800fef8:	bfb8      	it	lt
 800fefa:	9204      	strlt	r2, [sp, #16]
 800fefc:	7823      	ldrb	r3, [r4, #0]
 800fefe:	2b2e      	cmp	r3, #46	@ 0x2e
 800ff00:	d10a      	bne.n	800ff18 <_svfiprintf_r+0x130>
 800ff02:	7863      	ldrb	r3, [r4, #1]
 800ff04:	2b2a      	cmp	r3, #42	@ 0x2a
 800ff06:	d132      	bne.n	800ff6e <_svfiprintf_r+0x186>
 800ff08:	9b03      	ldr	r3, [sp, #12]
 800ff0a:	1d1a      	adds	r2, r3, #4
 800ff0c:	681b      	ldr	r3, [r3, #0]
 800ff0e:	9203      	str	r2, [sp, #12]
 800ff10:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ff14:	3402      	adds	r4, #2
 800ff16:	9305      	str	r3, [sp, #20]
 800ff18:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ffdc <_svfiprintf_r+0x1f4>
 800ff1c:	7821      	ldrb	r1, [r4, #0]
 800ff1e:	2203      	movs	r2, #3
 800ff20:	4650      	mov	r0, sl
 800ff22:	f7f0 f97d 	bl	8000220 <memchr>
 800ff26:	b138      	cbz	r0, 800ff38 <_svfiprintf_r+0x150>
 800ff28:	9b04      	ldr	r3, [sp, #16]
 800ff2a:	eba0 000a 	sub.w	r0, r0, sl
 800ff2e:	2240      	movs	r2, #64	@ 0x40
 800ff30:	4082      	lsls	r2, r0
 800ff32:	4313      	orrs	r3, r2
 800ff34:	3401      	adds	r4, #1
 800ff36:	9304      	str	r3, [sp, #16]
 800ff38:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ff3c:	4824      	ldr	r0, [pc, #144]	@ (800ffd0 <_svfiprintf_r+0x1e8>)
 800ff3e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ff42:	2206      	movs	r2, #6
 800ff44:	f7f0 f96c 	bl	8000220 <memchr>
 800ff48:	2800      	cmp	r0, #0
 800ff4a:	d036      	beq.n	800ffba <_svfiprintf_r+0x1d2>
 800ff4c:	4b21      	ldr	r3, [pc, #132]	@ (800ffd4 <_svfiprintf_r+0x1ec>)
 800ff4e:	bb1b      	cbnz	r3, 800ff98 <_svfiprintf_r+0x1b0>
 800ff50:	9b03      	ldr	r3, [sp, #12]
 800ff52:	3307      	adds	r3, #7
 800ff54:	f023 0307 	bic.w	r3, r3, #7
 800ff58:	3308      	adds	r3, #8
 800ff5a:	9303      	str	r3, [sp, #12]
 800ff5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ff5e:	4433      	add	r3, r6
 800ff60:	9309      	str	r3, [sp, #36]	@ 0x24
 800ff62:	e76a      	b.n	800fe3a <_svfiprintf_r+0x52>
 800ff64:	fb0c 3202 	mla	r2, ip, r2, r3
 800ff68:	460c      	mov	r4, r1
 800ff6a:	2001      	movs	r0, #1
 800ff6c:	e7a8      	b.n	800fec0 <_svfiprintf_r+0xd8>
 800ff6e:	2300      	movs	r3, #0
 800ff70:	3401      	adds	r4, #1
 800ff72:	9305      	str	r3, [sp, #20]
 800ff74:	4619      	mov	r1, r3
 800ff76:	f04f 0c0a 	mov.w	ip, #10
 800ff7a:	4620      	mov	r0, r4
 800ff7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ff80:	3a30      	subs	r2, #48	@ 0x30
 800ff82:	2a09      	cmp	r2, #9
 800ff84:	d903      	bls.n	800ff8e <_svfiprintf_r+0x1a6>
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	d0c6      	beq.n	800ff18 <_svfiprintf_r+0x130>
 800ff8a:	9105      	str	r1, [sp, #20]
 800ff8c:	e7c4      	b.n	800ff18 <_svfiprintf_r+0x130>
 800ff8e:	fb0c 2101 	mla	r1, ip, r1, r2
 800ff92:	4604      	mov	r4, r0
 800ff94:	2301      	movs	r3, #1
 800ff96:	e7f0      	b.n	800ff7a <_svfiprintf_r+0x192>
 800ff98:	ab03      	add	r3, sp, #12
 800ff9a:	9300      	str	r3, [sp, #0]
 800ff9c:	462a      	mov	r2, r5
 800ff9e:	4b0e      	ldr	r3, [pc, #56]	@ (800ffd8 <_svfiprintf_r+0x1f0>)
 800ffa0:	a904      	add	r1, sp, #16
 800ffa2:	4638      	mov	r0, r7
 800ffa4:	f3af 8000 	nop.w
 800ffa8:	1c42      	adds	r2, r0, #1
 800ffaa:	4606      	mov	r6, r0
 800ffac:	d1d6      	bne.n	800ff5c <_svfiprintf_r+0x174>
 800ffae:	89ab      	ldrh	r3, [r5, #12]
 800ffb0:	065b      	lsls	r3, r3, #25
 800ffb2:	f53f af2d 	bmi.w	800fe10 <_svfiprintf_r+0x28>
 800ffb6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ffb8:	e72c      	b.n	800fe14 <_svfiprintf_r+0x2c>
 800ffba:	ab03      	add	r3, sp, #12
 800ffbc:	9300      	str	r3, [sp, #0]
 800ffbe:	462a      	mov	r2, r5
 800ffc0:	4b05      	ldr	r3, [pc, #20]	@ (800ffd8 <_svfiprintf_r+0x1f0>)
 800ffc2:	a904      	add	r1, sp, #16
 800ffc4:	4638      	mov	r0, r7
 800ffc6:	f000 f879 	bl	80100bc <_printf_i>
 800ffca:	e7ed      	b.n	800ffa8 <_svfiprintf_r+0x1c0>
 800ffcc:	08011578 	.word	0x08011578
 800ffd0:	08011582 	.word	0x08011582
 800ffd4:	00000000 	.word	0x00000000
 800ffd8:	0800fd31 	.word	0x0800fd31
 800ffdc:	0801157e 	.word	0x0801157e

0800ffe0 <_printf_common>:
 800ffe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ffe4:	4616      	mov	r6, r2
 800ffe6:	4698      	mov	r8, r3
 800ffe8:	688a      	ldr	r2, [r1, #8]
 800ffea:	690b      	ldr	r3, [r1, #16]
 800ffec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800fff0:	4293      	cmp	r3, r2
 800fff2:	bfb8      	it	lt
 800fff4:	4613      	movlt	r3, r2
 800fff6:	6033      	str	r3, [r6, #0]
 800fff8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800fffc:	4607      	mov	r7, r0
 800fffe:	460c      	mov	r4, r1
 8010000:	b10a      	cbz	r2, 8010006 <_printf_common+0x26>
 8010002:	3301      	adds	r3, #1
 8010004:	6033      	str	r3, [r6, #0]
 8010006:	6823      	ldr	r3, [r4, #0]
 8010008:	0699      	lsls	r1, r3, #26
 801000a:	bf42      	ittt	mi
 801000c:	6833      	ldrmi	r3, [r6, #0]
 801000e:	3302      	addmi	r3, #2
 8010010:	6033      	strmi	r3, [r6, #0]
 8010012:	6825      	ldr	r5, [r4, #0]
 8010014:	f015 0506 	ands.w	r5, r5, #6
 8010018:	d106      	bne.n	8010028 <_printf_common+0x48>
 801001a:	f104 0a19 	add.w	sl, r4, #25
 801001e:	68e3      	ldr	r3, [r4, #12]
 8010020:	6832      	ldr	r2, [r6, #0]
 8010022:	1a9b      	subs	r3, r3, r2
 8010024:	42ab      	cmp	r3, r5
 8010026:	dc26      	bgt.n	8010076 <_printf_common+0x96>
 8010028:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801002c:	6822      	ldr	r2, [r4, #0]
 801002e:	3b00      	subs	r3, #0
 8010030:	bf18      	it	ne
 8010032:	2301      	movne	r3, #1
 8010034:	0692      	lsls	r2, r2, #26
 8010036:	d42b      	bmi.n	8010090 <_printf_common+0xb0>
 8010038:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801003c:	4641      	mov	r1, r8
 801003e:	4638      	mov	r0, r7
 8010040:	47c8      	blx	r9
 8010042:	3001      	adds	r0, #1
 8010044:	d01e      	beq.n	8010084 <_printf_common+0xa4>
 8010046:	6823      	ldr	r3, [r4, #0]
 8010048:	6922      	ldr	r2, [r4, #16]
 801004a:	f003 0306 	and.w	r3, r3, #6
 801004e:	2b04      	cmp	r3, #4
 8010050:	bf02      	ittt	eq
 8010052:	68e5      	ldreq	r5, [r4, #12]
 8010054:	6833      	ldreq	r3, [r6, #0]
 8010056:	1aed      	subeq	r5, r5, r3
 8010058:	68a3      	ldr	r3, [r4, #8]
 801005a:	bf0c      	ite	eq
 801005c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010060:	2500      	movne	r5, #0
 8010062:	4293      	cmp	r3, r2
 8010064:	bfc4      	itt	gt
 8010066:	1a9b      	subgt	r3, r3, r2
 8010068:	18ed      	addgt	r5, r5, r3
 801006a:	2600      	movs	r6, #0
 801006c:	341a      	adds	r4, #26
 801006e:	42b5      	cmp	r5, r6
 8010070:	d11a      	bne.n	80100a8 <_printf_common+0xc8>
 8010072:	2000      	movs	r0, #0
 8010074:	e008      	b.n	8010088 <_printf_common+0xa8>
 8010076:	2301      	movs	r3, #1
 8010078:	4652      	mov	r2, sl
 801007a:	4641      	mov	r1, r8
 801007c:	4638      	mov	r0, r7
 801007e:	47c8      	blx	r9
 8010080:	3001      	adds	r0, #1
 8010082:	d103      	bne.n	801008c <_printf_common+0xac>
 8010084:	f04f 30ff 	mov.w	r0, #4294967295
 8010088:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801008c:	3501      	adds	r5, #1
 801008e:	e7c6      	b.n	801001e <_printf_common+0x3e>
 8010090:	18e1      	adds	r1, r4, r3
 8010092:	1c5a      	adds	r2, r3, #1
 8010094:	2030      	movs	r0, #48	@ 0x30
 8010096:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801009a:	4422      	add	r2, r4
 801009c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80100a0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80100a4:	3302      	adds	r3, #2
 80100a6:	e7c7      	b.n	8010038 <_printf_common+0x58>
 80100a8:	2301      	movs	r3, #1
 80100aa:	4622      	mov	r2, r4
 80100ac:	4641      	mov	r1, r8
 80100ae:	4638      	mov	r0, r7
 80100b0:	47c8      	blx	r9
 80100b2:	3001      	adds	r0, #1
 80100b4:	d0e6      	beq.n	8010084 <_printf_common+0xa4>
 80100b6:	3601      	adds	r6, #1
 80100b8:	e7d9      	b.n	801006e <_printf_common+0x8e>
	...

080100bc <_printf_i>:
 80100bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80100c0:	7e0f      	ldrb	r7, [r1, #24]
 80100c2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80100c4:	2f78      	cmp	r7, #120	@ 0x78
 80100c6:	4691      	mov	r9, r2
 80100c8:	4680      	mov	r8, r0
 80100ca:	460c      	mov	r4, r1
 80100cc:	469a      	mov	sl, r3
 80100ce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80100d2:	d807      	bhi.n	80100e4 <_printf_i+0x28>
 80100d4:	2f62      	cmp	r7, #98	@ 0x62
 80100d6:	d80a      	bhi.n	80100ee <_printf_i+0x32>
 80100d8:	2f00      	cmp	r7, #0
 80100da:	f000 80d2 	beq.w	8010282 <_printf_i+0x1c6>
 80100de:	2f58      	cmp	r7, #88	@ 0x58
 80100e0:	f000 80b9 	beq.w	8010256 <_printf_i+0x19a>
 80100e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80100e8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80100ec:	e03a      	b.n	8010164 <_printf_i+0xa8>
 80100ee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80100f2:	2b15      	cmp	r3, #21
 80100f4:	d8f6      	bhi.n	80100e4 <_printf_i+0x28>
 80100f6:	a101      	add	r1, pc, #4	@ (adr r1, 80100fc <_printf_i+0x40>)
 80100f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80100fc:	08010155 	.word	0x08010155
 8010100:	08010169 	.word	0x08010169
 8010104:	080100e5 	.word	0x080100e5
 8010108:	080100e5 	.word	0x080100e5
 801010c:	080100e5 	.word	0x080100e5
 8010110:	080100e5 	.word	0x080100e5
 8010114:	08010169 	.word	0x08010169
 8010118:	080100e5 	.word	0x080100e5
 801011c:	080100e5 	.word	0x080100e5
 8010120:	080100e5 	.word	0x080100e5
 8010124:	080100e5 	.word	0x080100e5
 8010128:	08010269 	.word	0x08010269
 801012c:	08010193 	.word	0x08010193
 8010130:	08010223 	.word	0x08010223
 8010134:	080100e5 	.word	0x080100e5
 8010138:	080100e5 	.word	0x080100e5
 801013c:	0801028b 	.word	0x0801028b
 8010140:	080100e5 	.word	0x080100e5
 8010144:	08010193 	.word	0x08010193
 8010148:	080100e5 	.word	0x080100e5
 801014c:	080100e5 	.word	0x080100e5
 8010150:	0801022b 	.word	0x0801022b
 8010154:	6833      	ldr	r3, [r6, #0]
 8010156:	1d1a      	adds	r2, r3, #4
 8010158:	681b      	ldr	r3, [r3, #0]
 801015a:	6032      	str	r2, [r6, #0]
 801015c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010160:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8010164:	2301      	movs	r3, #1
 8010166:	e09d      	b.n	80102a4 <_printf_i+0x1e8>
 8010168:	6833      	ldr	r3, [r6, #0]
 801016a:	6820      	ldr	r0, [r4, #0]
 801016c:	1d19      	adds	r1, r3, #4
 801016e:	6031      	str	r1, [r6, #0]
 8010170:	0606      	lsls	r6, r0, #24
 8010172:	d501      	bpl.n	8010178 <_printf_i+0xbc>
 8010174:	681d      	ldr	r5, [r3, #0]
 8010176:	e003      	b.n	8010180 <_printf_i+0xc4>
 8010178:	0645      	lsls	r5, r0, #25
 801017a:	d5fb      	bpl.n	8010174 <_printf_i+0xb8>
 801017c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8010180:	2d00      	cmp	r5, #0
 8010182:	da03      	bge.n	801018c <_printf_i+0xd0>
 8010184:	232d      	movs	r3, #45	@ 0x2d
 8010186:	426d      	negs	r5, r5
 8010188:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801018c:	4859      	ldr	r0, [pc, #356]	@ (80102f4 <_printf_i+0x238>)
 801018e:	230a      	movs	r3, #10
 8010190:	e011      	b.n	80101b6 <_printf_i+0xfa>
 8010192:	6821      	ldr	r1, [r4, #0]
 8010194:	6833      	ldr	r3, [r6, #0]
 8010196:	0608      	lsls	r0, r1, #24
 8010198:	f853 5b04 	ldr.w	r5, [r3], #4
 801019c:	d402      	bmi.n	80101a4 <_printf_i+0xe8>
 801019e:	0649      	lsls	r1, r1, #25
 80101a0:	bf48      	it	mi
 80101a2:	b2ad      	uxthmi	r5, r5
 80101a4:	2f6f      	cmp	r7, #111	@ 0x6f
 80101a6:	4853      	ldr	r0, [pc, #332]	@ (80102f4 <_printf_i+0x238>)
 80101a8:	6033      	str	r3, [r6, #0]
 80101aa:	bf14      	ite	ne
 80101ac:	230a      	movne	r3, #10
 80101ae:	2308      	moveq	r3, #8
 80101b0:	2100      	movs	r1, #0
 80101b2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80101b6:	6866      	ldr	r6, [r4, #4]
 80101b8:	60a6      	str	r6, [r4, #8]
 80101ba:	2e00      	cmp	r6, #0
 80101bc:	bfa2      	ittt	ge
 80101be:	6821      	ldrge	r1, [r4, #0]
 80101c0:	f021 0104 	bicge.w	r1, r1, #4
 80101c4:	6021      	strge	r1, [r4, #0]
 80101c6:	b90d      	cbnz	r5, 80101cc <_printf_i+0x110>
 80101c8:	2e00      	cmp	r6, #0
 80101ca:	d04b      	beq.n	8010264 <_printf_i+0x1a8>
 80101cc:	4616      	mov	r6, r2
 80101ce:	fbb5 f1f3 	udiv	r1, r5, r3
 80101d2:	fb03 5711 	mls	r7, r3, r1, r5
 80101d6:	5dc7      	ldrb	r7, [r0, r7]
 80101d8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80101dc:	462f      	mov	r7, r5
 80101de:	42bb      	cmp	r3, r7
 80101e0:	460d      	mov	r5, r1
 80101e2:	d9f4      	bls.n	80101ce <_printf_i+0x112>
 80101e4:	2b08      	cmp	r3, #8
 80101e6:	d10b      	bne.n	8010200 <_printf_i+0x144>
 80101e8:	6823      	ldr	r3, [r4, #0]
 80101ea:	07df      	lsls	r7, r3, #31
 80101ec:	d508      	bpl.n	8010200 <_printf_i+0x144>
 80101ee:	6923      	ldr	r3, [r4, #16]
 80101f0:	6861      	ldr	r1, [r4, #4]
 80101f2:	4299      	cmp	r1, r3
 80101f4:	bfde      	ittt	le
 80101f6:	2330      	movle	r3, #48	@ 0x30
 80101f8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80101fc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010200:	1b92      	subs	r2, r2, r6
 8010202:	6122      	str	r2, [r4, #16]
 8010204:	f8cd a000 	str.w	sl, [sp]
 8010208:	464b      	mov	r3, r9
 801020a:	aa03      	add	r2, sp, #12
 801020c:	4621      	mov	r1, r4
 801020e:	4640      	mov	r0, r8
 8010210:	f7ff fee6 	bl	800ffe0 <_printf_common>
 8010214:	3001      	adds	r0, #1
 8010216:	d14a      	bne.n	80102ae <_printf_i+0x1f2>
 8010218:	f04f 30ff 	mov.w	r0, #4294967295
 801021c:	b004      	add	sp, #16
 801021e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010222:	6823      	ldr	r3, [r4, #0]
 8010224:	f043 0320 	orr.w	r3, r3, #32
 8010228:	6023      	str	r3, [r4, #0]
 801022a:	4833      	ldr	r0, [pc, #204]	@ (80102f8 <_printf_i+0x23c>)
 801022c:	2778      	movs	r7, #120	@ 0x78
 801022e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8010232:	6823      	ldr	r3, [r4, #0]
 8010234:	6831      	ldr	r1, [r6, #0]
 8010236:	061f      	lsls	r7, r3, #24
 8010238:	f851 5b04 	ldr.w	r5, [r1], #4
 801023c:	d402      	bmi.n	8010244 <_printf_i+0x188>
 801023e:	065f      	lsls	r7, r3, #25
 8010240:	bf48      	it	mi
 8010242:	b2ad      	uxthmi	r5, r5
 8010244:	6031      	str	r1, [r6, #0]
 8010246:	07d9      	lsls	r1, r3, #31
 8010248:	bf44      	itt	mi
 801024a:	f043 0320 	orrmi.w	r3, r3, #32
 801024e:	6023      	strmi	r3, [r4, #0]
 8010250:	b11d      	cbz	r5, 801025a <_printf_i+0x19e>
 8010252:	2310      	movs	r3, #16
 8010254:	e7ac      	b.n	80101b0 <_printf_i+0xf4>
 8010256:	4827      	ldr	r0, [pc, #156]	@ (80102f4 <_printf_i+0x238>)
 8010258:	e7e9      	b.n	801022e <_printf_i+0x172>
 801025a:	6823      	ldr	r3, [r4, #0]
 801025c:	f023 0320 	bic.w	r3, r3, #32
 8010260:	6023      	str	r3, [r4, #0]
 8010262:	e7f6      	b.n	8010252 <_printf_i+0x196>
 8010264:	4616      	mov	r6, r2
 8010266:	e7bd      	b.n	80101e4 <_printf_i+0x128>
 8010268:	6833      	ldr	r3, [r6, #0]
 801026a:	6825      	ldr	r5, [r4, #0]
 801026c:	6961      	ldr	r1, [r4, #20]
 801026e:	1d18      	adds	r0, r3, #4
 8010270:	6030      	str	r0, [r6, #0]
 8010272:	062e      	lsls	r6, r5, #24
 8010274:	681b      	ldr	r3, [r3, #0]
 8010276:	d501      	bpl.n	801027c <_printf_i+0x1c0>
 8010278:	6019      	str	r1, [r3, #0]
 801027a:	e002      	b.n	8010282 <_printf_i+0x1c6>
 801027c:	0668      	lsls	r0, r5, #25
 801027e:	d5fb      	bpl.n	8010278 <_printf_i+0x1bc>
 8010280:	8019      	strh	r1, [r3, #0]
 8010282:	2300      	movs	r3, #0
 8010284:	6123      	str	r3, [r4, #16]
 8010286:	4616      	mov	r6, r2
 8010288:	e7bc      	b.n	8010204 <_printf_i+0x148>
 801028a:	6833      	ldr	r3, [r6, #0]
 801028c:	1d1a      	adds	r2, r3, #4
 801028e:	6032      	str	r2, [r6, #0]
 8010290:	681e      	ldr	r6, [r3, #0]
 8010292:	6862      	ldr	r2, [r4, #4]
 8010294:	2100      	movs	r1, #0
 8010296:	4630      	mov	r0, r6
 8010298:	f7ef ffc2 	bl	8000220 <memchr>
 801029c:	b108      	cbz	r0, 80102a2 <_printf_i+0x1e6>
 801029e:	1b80      	subs	r0, r0, r6
 80102a0:	6060      	str	r0, [r4, #4]
 80102a2:	6863      	ldr	r3, [r4, #4]
 80102a4:	6123      	str	r3, [r4, #16]
 80102a6:	2300      	movs	r3, #0
 80102a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80102ac:	e7aa      	b.n	8010204 <_printf_i+0x148>
 80102ae:	6923      	ldr	r3, [r4, #16]
 80102b0:	4632      	mov	r2, r6
 80102b2:	4649      	mov	r1, r9
 80102b4:	4640      	mov	r0, r8
 80102b6:	47d0      	blx	sl
 80102b8:	3001      	adds	r0, #1
 80102ba:	d0ad      	beq.n	8010218 <_printf_i+0x15c>
 80102bc:	6823      	ldr	r3, [r4, #0]
 80102be:	079b      	lsls	r3, r3, #30
 80102c0:	d413      	bmi.n	80102ea <_printf_i+0x22e>
 80102c2:	68e0      	ldr	r0, [r4, #12]
 80102c4:	9b03      	ldr	r3, [sp, #12]
 80102c6:	4298      	cmp	r0, r3
 80102c8:	bfb8      	it	lt
 80102ca:	4618      	movlt	r0, r3
 80102cc:	e7a6      	b.n	801021c <_printf_i+0x160>
 80102ce:	2301      	movs	r3, #1
 80102d0:	4632      	mov	r2, r6
 80102d2:	4649      	mov	r1, r9
 80102d4:	4640      	mov	r0, r8
 80102d6:	47d0      	blx	sl
 80102d8:	3001      	adds	r0, #1
 80102da:	d09d      	beq.n	8010218 <_printf_i+0x15c>
 80102dc:	3501      	adds	r5, #1
 80102de:	68e3      	ldr	r3, [r4, #12]
 80102e0:	9903      	ldr	r1, [sp, #12]
 80102e2:	1a5b      	subs	r3, r3, r1
 80102e4:	42ab      	cmp	r3, r5
 80102e6:	dcf2      	bgt.n	80102ce <_printf_i+0x212>
 80102e8:	e7eb      	b.n	80102c2 <_printf_i+0x206>
 80102ea:	2500      	movs	r5, #0
 80102ec:	f104 0619 	add.w	r6, r4, #25
 80102f0:	e7f5      	b.n	80102de <_printf_i+0x222>
 80102f2:	bf00      	nop
 80102f4:	08011589 	.word	0x08011589
 80102f8:	0801159a 	.word	0x0801159a

080102fc <memmove>:
 80102fc:	4288      	cmp	r0, r1
 80102fe:	b510      	push	{r4, lr}
 8010300:	eb01 0402 	add.w	r4, r1, r2
 8010304:	d902      	bls.n	801030c <memmove+0x10>
 8010306:	4284      	cmp	r4, r0
 8010308:	4623      	mov	r3, r4
 801030a:	d807      	bhi.n	801031c <memmove+0x20>
 801030c:	1e43      	subs	r3, r0, #1
 801030e:	42a1      	cmp	r1, r4
 8010310:	d008      	beq.n	8010324 <memmove+0x28>
 8010312:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010316:	f803 2f01 	strb.w	r2, [r3, #1]!
 801031a:	e7f8      	b.n	801030e <memmove+0x12>
 801031c:	4402      	add	r2, r0
 801031e:	4601      	mov	r1, r0
 8010320:	428a      	cmp	r2, r1
 8010322:	d100      	bne.n	8010326 <memmove+0x2a>
 8010324:	bd10      	pop	{r4, pc}
 8010326:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801032a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801032e:	e7f7      	b.n	8010320 <memmove+0x24>

08010330 <_sbrk_r>:
 8010330:	b538      	push	{r3, r4, r5, lr}
 8010332:	4d06      	ldr	r5, [pc, #24]	@ (801034c <_sbrk_r+0x1c>)
 8010334:	2300      	movs	r3, #0
 8010336:	4604      	mov	r4, r0
 8010338:	4608      	mov	r0, r1
 801033a:	602b      	str	r3, [r5, #0]
 801033c:	f7f3 f892 	bl	8003464 <_sbrk>
 8010340:	1c43      	adds	r3, r0, #1
 8010342:	d102      	bne.n	801034a <_sbrk_r+0x1a>
 8010344:	682b      	ldr	r3, [r5, #0]
 8010346:	b103      	cbz	r3, 801034a <_sbrk_r+0x1a>
 8010348:	6023      	str	r3, [r4, #0]
 801034a:	bd38      	pop	{r3, r4, r5, pc}
 801034c:	20016bb0 	.word	0x20016bb0

08010350 <_realloc_r>:
 8010350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010354:	4680      	mov	r8, r0
 8010356:	4615      	mov	r5, r2
 8010358:	460c      	mov	r4, r1
 801035a:	b921      	cbnz	r1, 8010366 <_realloc_r+0x16>
 801035c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010360:	4611      	mov	r1, r2
 8010362:	f7ff bc59 	b.w	800fc18 <_malloc_r>
 8010366:	b92a      	cbnz	r2, 8010374 <_realloc_r+0x24>
 8010368:	f7ff fbea 	bl	800fb40 <_free_r>
 801036c:	2400      	movs	r4, #0
 801036e:	4620      	mov	r0, r4
 8010370:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010374:	f000 f81a 	bl	80103ac <_malloc_usable_size_r>
 8010378:	4285      	cmp	r5, r0
 801037a:	4606      	mov	r6, r0
 801037c:	d802      	bhi.n	8010384 <_realloc_r+0x34>
 801037e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8010382:	d8f4      	bhi.n	801036e <_realloc_r+0x1e>
 8010384:	4629      	mov	r1, r5
 8010386:	4640      	mov	r0, r8
 8010388:	f7ff fc46 	bl	800fc18 <_malloc_r>
 801038c:	4607      	mov	r7, r0
 801038e:	2800      	cmp	r0, #0
 8010390:	d0ec      	beq.n	801036c <_realloc_r+0x1c>
 8010392:	42b5      	cmp	r5, r6
 8010394:	462a      	mov	r2, r5
 8010396:	4621      	mov	r1, r4
 8010398:	bf28      	it	cs
 801039a:	4632      	movcs	r2, r6
 801039c:	f7ff fbc2 	bl	800fb24 <memcpy>
 80103a0:	4621      	mov	r1, r4
 80103a2:	4640      	mov	r0, r8
 80103a4:	f7ff fbcc 	bl	800fb40 <_free_r>
 80103a8:	463c      	mov	r4, r7
 80103aa:	e7e0      	b.n	801036e <_realloc_r+0x1e>

080103ac <_malloc_usable_size_r>:
 80103ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80103b0:	1f18      	subs	r0, r3, #4
 80103b2:	2b00      	cmp	r3, #0
 80103b4:	bfbc      	itt	lt
 80103b6:	580b      	ldrlt	r3, [r1, r0]
 80103b8:	18c0      	addlt	r0, r0, r3
 80103ba:	4770      	bx	lr

080103bc <powf>:
 80103bc:	b508      	push	{r3, lr}
 80103be:	ed2d 8b04 	vpush	{d8-d9}
 80103c2:	eeb0 8a60 	vmov.f32	s16, s1
 80103c6:	eeb0 9a40 	vmov.f32	s18, s0
 80103ca:	f000 f87b 	bl	80104c4 <__ieee754_powf>
 80103ce:	eeb4 8a48 	vcmp.f32	s16, s16
 80103d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80103d6:	eef0 8a40 	vmov.f32	s17, s0
 80103da:	d63e      	bvs.n	801045a <powf+0x9e>
 80103dc:	eeb5 9a40 	vcmp.f32	s18, #0.0
 80103e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80103e4:	d112      	bne.n	801040c <powf+0x50>
 80103e6:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80103ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80103ee:	d039      	beq.n	8010464 <powf+0xa8>
 80103f0:	eeb0 0a48 	vmov.f32	s0, s16
 80103f4:	f000 f858 	bl	80104a8 <finitef>
 80103f8:	b378      	cbz	r0, 801045a <powf+0x9e>
 80103fa:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80103fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010402:	d52a      	bpl.n	801045a <powf+0x9e>
 8010404:	f7ff fb62 	bl	800facc <__errno>
 8010408:	2322      	movs	r3, #34	@ 0x22
 801040a:	e014      	b.n	8010436 <powf+0x7a>
 801040c:	f000 f84c 	bl	80104a8 <finitef>
 8010410:	b998      	cbnz	r0, 801043a <powf+0x7e>
 8010412:	eeb0 0a49 	vmov.f32	s0, s18
 8010416:	f000 f847 	bl	80104a8 <finitef>
 801041a:	b170      	cbz	r0, 801043a <powf+0x7e>
 801041c:	eeb0 0a48 	vmov.f32	s0, s16
 8010420:	f000 f842 	bl	80104a8 <finitef>
 8010424:	b148      	cbz	r0, 801043a <powf+0x7e>
 8010426:	eef4 8a68 	vcmp.f32	s17, s17
 801042a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801042e:	d7e9      	bvc.n	8010404 <powf+0x48>
 8010430:	f7ff fb4c 	bl	800facc <__errno>
 8010434:	2321      	movs	r3, #33	@ 0x21
 8010436:	6003      	str	r3, [r0, #0]
 8010438:	e00f      	b.n	801045a <powf+0x9e>
 801043a:	eef5 8a40 	vcmp.f32	s17, #0.0
 801043e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010442:	d10a      	bne.n	801045a <powf+0x9e>
 8010444:	eeb0 0a49 	vmov.f32	s0, s18
 8010448:	f000 f82e 	bl	80104a8 <finitef>
 801044c:	b128      	cbz	r0, 801045a <powf+0x9e>
 801044e:	eeb0 0a48 	vmov.f32	s0, s16
 8010452:	f000 f829 	bl	80104a8 <finitef>
 8010456:	2800      	cmp	r0, #0
 8010458:	d1d4      	bne.n	8010404 <powf+0x48>
 801045a:	eeb0 0a68 	vmov.f32	s0, s17
 801045e:	ecbd 8b04 	vpop	{d8-d9}
 8010462:	bd08      	pop	{r3, pc}
 8010464:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8010468:	e7f7      	b.n	801045a <powf+0x9e>
	...

0801046c <sqrtf>:
 801046c:	b508      	push	{r3, lr}
 801046e:	ed2d 8b02 	vpush	{d8}
 8010472:	eeb0 8a40 	vmov.f32	s16, s0
 8010476:	f000 f821 	bl	80104bc <__ieee754_sqrtf>
 801047a:	eeb4 8a48 	vcmp.f32	s16, s16
 801047e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010482:	d60c      	bvs.n	801049e <sqrtf+0x32>
 8010484:	eddf 8a07 	vldr	s17, [pc, #28]	@ 80104a4 <sqrtf+0x38>
 8010488:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801048c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010490:	d505      	bpl.n	801049e <sqrtf+0x32>
 8010492:	f7ff fb1b 	bl	800facc <__errno>
 8010496:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 801049a:	2321      	movs	r3, #33	@ 0x21
 801049c:	6003      	str	r3, [r0, #0]
 801049e:	ecbd 8b02 	vpop	{d8}
 80104a2:	bd08      	pop	{r3, pc}
 80104a4:	00000000 	.word	0x00000000

080104a8 <finitef>:
 80104a8:	ee10 3a10 	vmov	r3, s0
 80104ac:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 80104b0:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 80104b4:	bfac      	ite	ge
 80104b6:	2000      	movge	r0, #0
 80104b8:	2001      	movlt	r0, #1
 80104ba:	4770      	bx	lr

080104bc <__ieee754_sqrtf>:
 80104bc:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80104c0:	4770      	bx	lr
	...

080104c4 <__ieee754_powf>:
 80104c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80104c8:	ee10 4a90 	vmov	r4, s1
 80104cc:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 80104d0:	ed2d 8b02 	vpush	{d8}
 80104d4:	ee10 6a10 	vmov	r6, s0
 80104d8:	eeb0 8a40 	vmov.f32	s16, s0
 80104dc:	eef0 8a60 	vmov.f32	s17, s1
 80104e0:	d10c      	bne.n	80104fc <__ieee754_powf+0x38>
 80104e2:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 80104e6:	0076      	lsls	r6, r6, #1
 80104e8:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 80104ec:	f240 829c 	bls.w	8010a28 <__ieee754_powf+0x564>
 80104f0:	ee38 0a28 	vadd.f32	s0, s16, s17
 80104f4:	ecbd 8b02 	vpop	{d8}
 80104f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80104fc:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 8010500:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 8010504:	d802      	bhi.n	801050c <__ieee754_powf+0x48>
 8010506:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 801050a:	d908      	bls.n	801051e <__ieee754_powf+0x5a>
 801050c:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 8010510:	d1ee      	bne.n	80104f0 <__ieee754_powf+0x2c>
 8010512:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 8010516:	0064      	lsls	r4, r4, #1
 8010518:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 801051c:	e7e6      	b.n	80104ec <__ieee754_powf+0x28>
 801051e:	2e00      	cmp	r6, #0
 8010520:	da1e      	bge.n	8010560 <__ieee754_powf+0x9c>
 8010522:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 8010526:	d22b      	bcs.n	8010580 <__ieee754_powf+0xbc>
 8010528:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 801052c:	d332      	bcc.n	8010594 <__ieee754_powf+0xd0>
 801052e:	ea4f 53e9 	mov.w	r3, r9, asr #23
 8010532:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 8010536:	fa49 f503 	asr.w	r5, r9, r3
 801053a:	fa05 f303 	lsl.w	r3, r5, r3
 801053e:	454b      	cmp	r3, r9
 8010540:	d126      	bne.n	8010590 <__ieee754_powf+0xcc>
 8010542:	f005 0501 	and.w	r5, r5, #1
 8010546:	f1c5 0502 	rsb	r5, r5, #2
 801054a:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 801054e:	d122      	bne.n	8010596 <__ieee754_powf+0xd2>
 8010550:	2c00      	cmp	r4, #0
 8010552:	f280 826f 	bge.w	8010a34 <__ieee754_powf+0x570>
 8010556:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801055a:	ee87 0a88 	vdiv.f32	s0, s15, s16
 801055e:	e7c9      	b.n	80104f4 <__ieee754_powf+0x30>
 8010560:	2500      	movs	r5, #0
 8010562:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8010566:	d1f0      	bne.n	801054a <__ieee754_powf+0x86>
 8010568:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 801056c:	f000 825c 	beq.w	8010a28 <__ieee754_powf+0x564>
 8010570:	d908      	bls.n	8010584 <__ieee754_powf+0xc0>
 8010572:	ed9f 0ad8 	vldr	s0, [pc, #864]	@ 80108d4 <__ieee754_powf+0x410>
 8010576:	2c00      	cmp	r4, #0
 8010578:	bfa8      	it	ge
 801057a:	eeb0 0a68 	vmovge.f32	s0, s17
 801057e:	e7b9      	b.n	80104f4 <__ieee754_powf+0x30>
 8010580:	2502      	movs	r5, #2
 8010582:	e7ee      	b.n	8010562 <__ieee754_powf+0x9e>
 8010584:	2c00      	cmp	r4, #0
 8010586:	f280 8252 	bge.w	8010a2e <__ieee754_powf+0x56a>
 801058a:	eeb1 0a68 	vneg.f32	s0, s17
 801058e:	e7b1      	b.n	80104f4 <__ieee754_powf+0x30>
 8010590:	2500      	movs	r5, #0
 8010592:	e7da      	b.n	801054a <__ieee754_powf+0x86>
 8010594:	2500      	movs	r5, #0
 8010596:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 801059a:	d102      	bne.n	80105a2 <__ieee754_powf+0xde>
 801059c:	ee28 0a08 	vmul.f32	s0, s16, s16
 80105a0:	e7a8      	b.n	80104f4 <__ieee754_powf+0x30>
 80105a2:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 80105a6:	d109      	bne.n	80105bc <__ieee754_powf+0xf8>
 80105a8:	2e00      	cmp	r6, #0
 80105aa:	db07      	blt.n	80105bc <__ieee754_powf+0xf8>
 80105ac:	eeb0 0a48 	vmov.f32	s0, s16
 80105b0:	ecbd 8b02 	vpop	{d8}
 80105b4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80105b8:	f7ff bf80 	b.w	80104bc <__ieee754_sqrtf>
 80105bc:	eeb0 0a48 	vmov.f32	s0, s16
 80105c0:	f000 fa50 	bl	8010a64 <fabsf>
 80105c4:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 80105c8:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 80105cc:	4647      	mov	r7, r8
 80105ce:	d002      	beq.n	80105d6 <__ieee754_powf+0x112>
 80105d0:	f1b8 0f00 	cmp.w	r8, #0
 80105d4:	d117      	bne.n	8010606 <__ieee754_powf+0x142>
 80105d6:	2c00      	cmp	r4, #0
 80105d8:	bfbc      	itt	lt
 80105da:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 80105de:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 80105e2:	2e00      	cmp	r6, #0
 80105e4:	da86      	bge.n	80104f4 <__ieee754_powf+0x30>
 80105e6:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 80105ea:	ea58 0805 	orrs.w	r8, r8, r5
 80105ee:	d104      	bne.n	80105fa <__ieee754_powf+0x136>
 80105f0:	ee70 7a40 	vsub.f32	s15, s0, s0
 80105f4:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80105f8:	e77c      	b.n	80104f4 <__ieee754_powf+0x30>
 80105fa:	2d01      	cmp	r5, #1
 80105fc:	f47f af7a 	bne.w	80104f4 <__ieee754_powf+0x30>
 8010600:	eeb1 0a40 	vneg.f32	s0, s0
 8010604:	e776      	b.n	80104f4 <__ieee754_powf+0x30>
 8010606:	0ff0      	lsrs	r0, r6, #31
 8010608:	3801      	subs	r0, #1
 801060a:	ea55 0300 	orrs.w	r3, r5, r0
 801060e:	d104      	bne.n	801061a <__ieee754_powf+0x156>
 8010610:	ee38 8a48 	vsub.f32	s16, s16, s16
 8010614:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8010618:	e76c      	b.n	80104f4 <__ieee754_powf+0x30>
 801061a:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 801061e:	d973      	bls.n	8010708 <__ieee754_powf+0x244>
 8010620:	4bad      	ldr	r3, [pc, #692]	@ (80108d8 <__ieee754_powf+0x414>)
 8010622:	4598      	cmp	r8, r3
 8010624:	d808      	bhi.n	8010638 <__ieee754_powf+0x174>
 8010626:	2c00      	cmp	r4, #0
 8010628:	da0b      	bge.n	8010642 <__ieee754_powf+0x17e>
 801062a:	2000      	movs	r0, #0
 801062c:	ecbd 8b02 	vpop	{d8}
 8010630:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010634:	f000 baa4 	b.w	8010b80 <__math_oflowf>
 8010638:	4ba8      	ldr	r3, [pc, #672]	@ (80108dc <__ieee754_powf+0x418>)
 801063a:	4598      	cmp	r8, r3
 801063c:	d908      	bls.n	8010650 <__ieee754_powf+0x18c>
 801063e:	2c00      	cmp	r4, #0
 8010640:	dcf3      	bgt.n	801062a <__ieee754_powf+0x166>
 8010642:	2000      	movs	r0, #0
 8010644:	ecbd 8b02 	vpop	{d8}
 8010648:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801064c:	f000 ba92 	b.w	8010b74 <__math_uflowf>
 8010650:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8010654:	ee30 0a67 	vsub.f32	s0, s0, s15
 8010658:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 80108e0 <__ieee754_powf+0x41c>
 801065c:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 8010660:	eee0 6a67 	vfms.f32	s13, s0, s15
 8010664:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8010668:	eee6 7ac0 	vfms.f32	s15, s13, s0
 801066c:	ee20 7a00 	vmul.f32	s14, s0, s0
 8010670:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010674:	eddf 7a9b 	vldr	s15, [pc, #620]	@ 80108e4 <__ieee754_powf+0x420>
 8010678:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 801067c:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 80108e8 <__ieee754_powf+0x424>
 8010680:	eee0 7a07 	vfma.f32	s15, s0, s14
 8010684:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 80108ec <__ieee754_powf+0x428>
 8010688:	eef0 6a67 	vmov.f32	s13, s15
 801068c:	eee0 6a07 	vfma.f32	s13, s0, s14
 8010690:	ee16 3a90 	vmov	r3, s13
 8010694:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8010698:	f023 030f 	bic.w	r3, r3, #15
 801069c:	ee06 3a90 	vmov	s13, r3
 80106a0:	eee0 6a47 	vfms.f32	s13, s0, s14
 80106a4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80106a8:	3d01      	subs	r5, #1
 80106aa:	f424 647f 	bic.w	r4, r4, #4080	@ 0xff0
 80106ae:	4305      	orrs	r5, r0
 80106b0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80106b4:	f024 040f 	bic.w	r4, r4, #15
 80106b8:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 80106bc:	bf18      	it	ne
 80106be:	eeb0 8a47 	vmovne.f32	s16, s14
 80106c2:	ee07 4a10 	vmov	s14, r4
 80106c6:	ee67 0aa8 	vmul.f32	s1, s15, s17
 80106ca:	ee38 7ac7 	vsub.f32	s14, s17, s14
 80106ce:	ee07 3a90 	vmov	s15, r3
 80106d2:	eee7 0a27 	vfma.f32	s1, s14, s15
 80106d6:	ee07 4a10 	vmov	s14, r4
 80106da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80106de:	ee30 7aa7 	vadd.f32	s14, s1, s15
 80106e2:	ee17 1a10 	vmov	r1, s14
 80106e6:	2900      	cmp	r1, #0
 80106e8:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80106ec:	f340 80dd 	ble.w	80108aa <__ieee754_powf+0x3e6>
 80106f0:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 80106f4:	f240 80ca 	bls.w	801088c <__ieee754_powf+0x3c8>
 80106f8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80106fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010700:	bf4c      	ite	mi
 8010702:	2001      	movmi	r0, #1
 8010704:	2000      	movpl	r0, #0
 8010706:	e791      	b.n	801062c <__ieee754_powf+0x168>
 8010708:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 801070c:	bf01      	itttt	eq
 801070e:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 80108f0 <__ieee754_powf+0x42c>
 8010712:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8010716:	f06f 0317 	mvneq.w	r3, #23
 801071a:	ee17 7a90 	vmoveq	r7, s15
 801071e:	ea4f 52e7 	mov.w	r2, r7, asr #23
 8010722:	bf18      	it	ne
 8010724:	2300      	movne	r3, #0
 8010726:	3a7f      	subs	r2, #127	@ 0x7f
 8010728:	441a      	add	r2, r3
 801072a:	4b72      	ldr	r3, [pc, #456]	@ (80108f4 <__ieee754_powf+0x430>)
 801072c:	f3c7 0716 	ubfx	r7, r7, #0, #23
 8010730:	429f      	cmp	r7, r3
 8010732:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 8010736:	dd06      	ble.n	8010746 <__ieee754_powf+0x282>
 8010738:	4b6f      	ldr	r3, [pc, #444]	@ (80108f8 <__ieee754_powf+0x434>)
 801073a:	429f      	cmp	r7, r3
 801073c:	f340 80a4 	ble.w	8010888 <__ieee754_powf+0x3c4>
 8010740:	3201      	adds	r2, #1
 8010742:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 8010746:	2600      	movs	r6, #0
 8010748:	4b6c      	ldr	r3, [pc, #432]	@ (80108fc <__ieee754_powf+0x438>)
 801074a:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 801074e:	ee07 1a10 	vmov	s14, r1
 8010752:	edd3 5a00 	vldr	s11, [r3]
 8010756:	4b6a      	ldr	r3, [pc, #424]	@ (8010900 <__ieee754_powf+0x43c>)
 8010758:	ee75 7a87 	vadd.f32	s15, s11, s14
 801075c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010760:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 8010764:	1049      	asrs	r1, r1, #1
 8010766:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 801076a:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 801076e:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 8010772:	ee37 6a65 	vsub.f32	s12, s14, s11
 8010776:	ee07 1a90 	vmov	s15, r1
 801077a:	ee26 5a24 	vmul.f32	s10, s12, s9
 801077e:	ee77 5ae5 	vsub.f32	s11, s15, s11
 8010782:	ee15 7a10 	vmov	r7, s10
 8010786:	401f      	ands	r7, r3
 8010788:	ee06 7a90 	vmov	s13, r7
 801078c:	eea6 6ae7 	vfms.f32	s12, s13, s15
 8010790:	ee37 7a65 	vsub.f32	s14, s14, s11
 8010794:	ee65 7a05 	vmul.f32	s15, s10, s10
 8010798:	eea6 6ac7 	vfms.f32	s12, s13, s14
 801079c:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8010904 <__ieee754_powf+0x440>
 80107a0:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8010908 <__ieee754_powf+0x444>
 80107a4:	eee7 5a87 	vfma.f32	s11, s15, s14
 80107a8:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 801090c <__ieee754_powf+0x448>
 80107ac:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80107b0:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 80108e0 <__ieee754_powf+0x41c>
 80107b4:	eee7 5a27 	vfma.f32	s11, s14, s15
 80107b8:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8010910 <__ieee754_powf+0x44c>
 80107bc:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80107c0:	eddf 5a54 	vldr	s11, [pc, #336]	@ 8010914 <__ieee754_powf+0x450>
 80107c4:	ee26 6a24 	vmul.f32	s12, s12, s9
 80107c8:	eee7 5a27 	vfma.f32	s11, s14, s15
 80107cc:	ee35 7a26 	vadd.f32	s14, s10, s13
 80107d0:	ee67 4aa7 	vmul.f32	s9, s15, s15
 80107d4:	ee27 7a06 	vmul.f32	s14, s14, s12
 80107d8:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 80107dc:	eea4 7aa5 	vfma.f32	s14, s9, s11
 80107e0:	eef0 5a67 	vmov.f32	s11, s15
 80107e4:	eee6 5aa6 	vfma.f32	s11, s13, s13
 80107e8:	ee75 5a87 	vadd.f32	s11, s11, s14
 80107ec:	ee15 1a90 	vmov	r1, s11
 80107f0:	4019      	ands	r1, r3
 80107f2:	ee05 1a90 	vmov	s11, r1
 80107f6:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80107fa:	eee6 7ae6 	vfms.f32	s15, s13, s13
 80107fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010802:	ee67 7a85 	vmul.f32	s15, s15, s10
 8010806:	eee6 7a25 	vfma.f32	s15, s12, s11
 801080a:	eeb0 6a67 	vmov.f32	s12, s15
 801080e:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8010812:	ee16 1a10 	vmov	r1, s12
 8010816:	4019      	ands	r1, r3
 8010818:	ee06 1a10 	vmov	s12, r1
 801081c:	eeb0 7a46 	vmov.f32	s14, s12
 8010820:	eea6 7ae5 	vfms.f32	s14, s13, s11
 8010824:	493c      	ldr	r1, [pc, #240]	@ (8010918 <__ieee754_powf+0x454>)
 8010826:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 801082a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801082e:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 801091c <__ieee754_powf+0x458>
 8010832:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 8010920 <__ieee754_powf+0x45c>
 8010836:	ee67 7a87 	vmul.f32	s15, s15, s14
 801083a:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8010924 <__ieee754_powf+0x460>
 801083e:	eee6 7a07 	vfma.f32	s15, s12, s14
 8010842:	ed91 7a00 	vldr	s14, [r1]
 8010846:	ee77 7a87 	vadd.f32	s15, s15, s14
 801084a:	ee07 2a10 	vmov	s14, r2
 801084e:	eef0 6a67 	vmov.f32	s13, s15
 8010852:	4a35      	ldr	r2, [pc, #212]	@ (8010928 <__ieee754_powf+0x464>)
 8010854:	eee6 6a25 	vfma.f32	s13, s12, s11
 8010858:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 801085c:	ed92 5a00 	vldr	s10, [r2]
 8010860:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010864:	ee76 6a85 	vadd.f32	s13, s13, s10
 8010868:	ee76 6a87 	vadd.f32	s13, s13, s14
 801086c:	ee16 2a90 	vmov	r2, s13
 8010870:	4013      	ands	r3, r2
 8010872:	ee06 3a90 	vmov	s13, r3
 8010876:	ee36 7ac7 	vsub.f32	s14, s13, s14
 801087a:	ee37 7a45 	vsub.f32	s14, s14, s10
 801087e:	eea6 7a65 	vfms.f32	s14, s12, s11
 8010882:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010886:	e70f      	b.n	80106a8 <__ieee754_powf+0x1e4>
 8010888:	2601      	movs	r6, #1
 801088a:	e75d      	b.n	8010748 <__ieee754_powf+0x284>
 801088c:	d152      	bne.n	8010934 <__ieee754_powf+0x470>
 801088e:	eddf 6a27 	vldr	s13, [pc, #156]	@ 801092c <__ieee754_powf+0x468>
 8010892:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010896:	ee70 6aa6 	vadd.f32	s13, s1, s13
 801089a:	eef4 6ac7 	vcmpe.f32	s13, s14
 801089e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108a2:	f73f af29 	bgt.w	80106f8 <__ieee754_powf+0x234>
 80108a6:	2386      	movs	r3, #134	@ 0x86
 80108a8:	e048      	b.n	801093c <__ieee754_powf+0x478>
 80108aa:	4a21      	ldr	r2, [pc, #132]	@ (8010930 <__ieee754_powf+0x46c>)
 80108ac:	4293      	cmp	r3, r2
 80108ae:	d907      	bls.n	80108c0 <__ieee754_powf+0x3fc>
 80108b0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80108b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108b8:	bf4c      	ite	mi
 80108ba:	2001      	movmi	r0, #1
 80108bc:	2000      	movpl	r0, #0
 80108be:	e6c1      	b.n	8010644 <__ieee754_powf+0x180>
 80108c0:	d138      	bne.n	8010934 <__ieee754_powf+0x470>
 80108c2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80108c6:	eeb4 7ae0 	vcmpe.f32	s14, s1
 80108ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108ce:	dbea      	blt.n	80108a6 <__ieee754_powf+0x3e2>
 80108d0:	e7ee      	b.n	80108b0 <__ieee754_powf+0x3ec>
 80108d2:	bf00      	nop
 80108d4:	00000000 	.word	0x00000000
 80108d8:	3f7ffff3 	.word	0x3f7ffff3
 80108dc:	3f800007 	.word	0x3f800007
 80108e0:	3eaaaaab 	.word	0x3eaaaaab
 80108e4:	3fb8aa3b 	.word	0x3fb8aa3b
 80108e8:	36eca570 	.word	0x36eca570
 80108ec:	3fb8aa00 	.word	0x3fb8aa00
 80108f0:	4b800000 	.word	0x4b800000
 80108f4:	001cc471 	.word	0x001cc471
 80108f8:	005db3d6 	.word	0x005db3d6
 80108fc:	080115bc 	.word	0x080115bc
 8010900:	fffff000 	.word	0xfffff000
 8010904:	3e6c3255 	.word	0x3e6c3255
 8010908:	3e53f142 	.word	0x3e53f142
 801090c:	3e8ba305 	.word	0x3e8ba305
 8010910:	3edb6db7 	.word	0x3edb6db7
 8010914:	3f19999a 	.word	0x3f19999a
 8010918:	080115ac 	.word	0x080115ac
 801091c:	3f76384f 	.word	0x3f76384f
 8010920:	3f763800 	.word	0x3f763800
 8010924:	369dc3a0 	.word	0x369dc3a0
 8010928:	080115b4 	.word	0x080115b4
 801092c:	3338aa3c 	.word	0x3338aa3c
 8010930:	43160000 	.word	0x43160000
 8010934:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 8010938:	d971      	bls.n	8010a1e <__ieee754_powf+0x55a>
 801093a:	15db      	asrs	r3, r3, #23
 801093c:	3b7e      	subs	r3, #126	@ 0x7e
 801093e:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8010942:	4118      	asrs	r0, r3
 8010944:	4408      	add	r0, r1
 8010946:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 801094a:	4a3c      	ldr	r2, [pc, #240]	@ (8010a3c <__ieee754_powf+0x578>)
 801094c:	3b7f      	subs	r3, #127	@ 0x7f
 801094e:	411a      	asrs	r2, r3
 8010950:	4002      	ands	r2, r0
 8010952:	ee07 2a10 	vmov	s14, r2
 8010956:	f3c0 0016 	ubfx	r0, r0, #0, #23
 801095a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 801095e:	f1c3 0317 	rsb	r3, r3, #23
 8010962:	4118      	asrs	r0, r3
 8010964:	2900      	cmp	r1, #0
 8010966:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801096a:	bfb8      	it	lt
 801096c:	4240      	neglt	r0, r0
 801096e:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8010972:	eddf 6a33 	vldr	s13, [pc, #204]	@ 8010a40 <__ieee754_powf+0x57c>
 8010976:	ed9f 6a33 	vldr	s12, [pc, #204]	@ 8010a44 <__ieee754_powf+0x580>
 801097a:	ee17 3a10 	vmov	r3, s14
 801097e:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8010982:	f023 030f 	bic.w	r3, r3, #15
 8010986:	ee07 3a10 	vmov	s14, r3
 801098a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801098e:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8010992:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8010996:	eddf 7a2c 	vldr	s15, [pc, #176]	@ 8010a48 <__ieee754_powf+0x584>
 801099a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801099e:	eee0 7aa6 	vfma.f32	s15, s1, s13
 80109a2:	eef0 6a67 	vmov.f32	s13, s15
 80109a6:	eee7 6a06 	vfma.f32	s13, s14, s12
 80109aa:	eef0 5a66 	vmov.f32	s11, s13
 80109ae:	eee7 5a46 	vfms.f32	s11, s14, s12
 80109b2:	ee26 7aa6 	vmul.f32	s14, s13, s13
 80109b6:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80109ba:	ed9f 6a24 	vldr	s12, [pc, #144]	@ 8010a4c <__ieee754_powf+0x588>
 80109be:	eddf 5a24 	vldr	s11, [pc, #144]	@ 8010a50 <__ieee754_powf+0x58c>
 80109c2:	eea7 6a25 	vfma.f32	s12, s14, s11
 80109c6:	eddf 5a23 	vldr	s11, [pc, #140]	@ 8010a54 <__ieee754_powf+0x590>
 80109ca:	eee6 5a07 	vfma.f32	s11, s12, s14
 80109ce:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 8010a58 <__ieee754_powf+0x594>
 80109d2:	eea5 6a87 	vfma.f32	s12, s11, s14
 80109d6:	eddf 5a21 	vldr	s11, [pc, #132]	@ 8010a5c <__ieee754_powf+0x598>
 80109da:	eee6 5a07 	vfma.f32	s11, s12, s14
 80109de:	eeb0 6a66 	vmov.f32	s12, s13
 80109e2:	eea5 6ac7 	vfms.f32	s12, s11, s14
 80109e6:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80109ea:	ee66 5a86 	vmul.f32	s11, s13, s12
 80109ee:	ee36 6a47 	vsub.f32	s12, s12, s14
 80109f2:	eee6 7aa7 	vfma.f32	s15, s13, s15
 80109f6:	ee85 7a86 	vdiv.f32	s14, s11, s12
 80109fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80109fe:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8010a02:	ee30 0a67 	vsub.f32	s0, s0, s15
 8010a06:	ee10 3a10 	vmov	r3, s0
 8010a0a:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8010a0e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8010a12:	da06      	bge.n	8010a22 <__ieee754_powf+0x55e>
 8010a14:	f000 f82e 	bl	8010a74 <scalbnf>
 8010a18:	ee20 0a08 	vmul.f32	s0, s0, s16
 8010a1c:	e56a      	b.n	80104f4 <__ieee754_powf+0x30>
 8010a1e:	2000      	movs	r0, #0
 8010a20:	e7a5      	b.n	801096e <__ieee754_powf+0x4aa>
 8010a22:	ee00 3a10 	vmov	s0, r3
 8010a26:	e7f7      	b.n	8010a18 <__ieee754_powf+0x554>
 8010a28:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8010a2c:	e562      	b.n	80104f4 <__ieee754_powf+0x30>
 8010a2e:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 8010a60 <__ieee754_powf+0x59c>
 8010a32:	e55f      	b.n	80104f4 <__ieee754_powf+0x30>
 8010a34:	eeb0 0a48 	vmov.f32	s0, s16
 8010a38:	e55c      	b.n	80104f4 <__ieee754_powf+0x30>
 8010a3a:	bf00      	nop
 8010a3c:	ff800000 	.word	0xff800000
 8010a40:	3f317218 	.word	0x3f317218
 8010a44:	3f317200 	.word	0x3f317200
 8010a48:	35bfbe8c 	.word	0x35bfbe8c
 8010a4c:	b5ddea0e 	.word	0xb5ddea0e
 8010a50:	3331bb4c 	.word	0x3331bb4c
 8010a54:	388ab355 	.word	0x388ab355
 8010a58:	bb360b61 	.word	0xbb360b61
 8010a5c:	3e2aaaab 	.word	0x3e2aaaab
 8010a60:	00000000 	.word	0x00000000

08010a64 <fabsf>:
 8010a64:	ee10 3a10 	vmov	r3, s0
 8010a68:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010a6c:	ee00 3a10 	vmov	s0, r3
 8010a70:	4770      	bx	lr
	...

08010a74 <scalbnf>:
 8010a74:	ee10 3a10 	vmov	r3, s0
 8010a78:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8010a7c:	d02b      	beq.n	8010ad6 <scalbnf+0x62>
 8010a7e:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8010a82:	d302      	bcc.n	8010a8a <scalbnf+0x16>
 8010a84:	ee30 0a00 	vadd.f32	s0, s0, s0
 8010a88:	4770      	bx	lr
 8010a8a:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8010a8e:	d123      	bne.n	8010ad8 <scalbnf+0x64>
 8010a90:	4b24      	ldr	r3, [pc, #144]	@ (8010b24 <scalbnf+0xb0>)
 8010a92:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8010b28 <scalbnf+0xb4>
 8010a96:	4298      	cmp	r0, r3
 8010a98:	ee20 0a27 	vmul.f32	s0, s0, s15
 8010a9c:	db17      	blt.n	8010ace <scalbnf+0x5a>
 8010a9e:	ee10 3a10 	vmov	r3, s0
 8010aa2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8010aa6:	3a19      	subs	r2, #25
 8010aa8:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8010aac:	4288      	cmp	r0, r1
 8010aae:	dd15      	ble.n	8010adc <scalbnf+0x68>
 8010ab0:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8010b2c <scalbnf+0xb8>
 8010ab4:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8010b30 <scalbnf+0xbc>
 8010ab8:	ee10 3a10 	vmov	r3, s0
 8010abc:	eeb0 7a67 	vmov.f32	s14, s15
 8010ac0:	2b00      	cmp	r3, #0
 8010ac2:	bfb8      	it	lt
 8010ac4:	eef0 7a66 	vmovlt.f32	s15, s13
 8010ac8:	ee27 0a87 	vmul.f32	s0, s15, s14
 8010acc:	4770      	bx	lr
 8010ace:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8010b34 <scalbnf+0xc0>
 8010ad2:	ee27 0a80 	vmul.f32	s0, s15, s0
 8010ad6:	4770      	bx	lr
 8010ad8:	0dd2      	lsrs	r2, r2, #23
 8010ada:	e7e5      	b.n	8010aa8 <scalbnf+0x34>
 8010adc:	4410      	add	r0, r2
 8010ade:	28fe      	cmp	r0, #254	@ 0xfe
 8010ae0:	dce6      	bgt.n	8010ab0 <scalbnf+0x3c>
 8010ae2:	2800      	cmp	r0, #0
 8010ae4:	dd06      	ble.n	8010af4 <scalbnf+0x80>
 8010ae6:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8010aea:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8010aee:	ee00 3a10 	vmov	s0, r3
 8010af2:	4770      	bx	lr
 8010af4:	f110 0f16 	cmn.w	r0, #22
 8010af8:	da09      	bge.n	8010b0e <scalbnf+0x9a>
 8010afa:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8010b34 <scalbnf+0xc0>
 8010afe:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8010b38 <scalbnf+0xc4>
 8010b02:	ee10 3a10 	vmov	r3, s0
 8010b06:	eeb0 7a67 	vmov.f32	s14, s15
 8010b0a:	2b00      	cmp	r3, #0
 8010b0c:	e7d9      	b.n	8010ac2 <scalbnf+0x4e>
 8010b0e:	3019      	adds	r0, #25
 8010b10:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8010b14:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8010b18:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8010b3c <scalbnf+0xc8>
 8010b1c:	ee07 3a90 	vmov	s15, r3
 8010b20:	e7d7      	b.n	8010ad2 <scalbnf+0x5e>
 8010b22:	bf00      	nop
 8010b24:	ffff3cb0 	.word	0xffff3cb0
 8010b28:	4c000000 	.word	0x4c000000
 8010b2c:	7149f2ca 	.word	0x7149f2ca
 8010b30:	f149f2ca 	.word	0xf149f2ca
 8010b34:	0da24260 	.word	0x0da24260
 8010b38:	8da24260 	.word	0x8da24260
 8010b3c:	33000000 	.word	0x33000000

08010b40 <with_errnof>:
 8010b40:	b510      	push	{r4, lr}
 8010b42:	ed2d 8b02 	vpush	{d8}
 8010b46:	eeb0 8a40 	vmov.f32	s16, s0
 8010b4a:	4604      	mov	r4, r0
 8010b4c:	f7fe ffbe 	bl	800facc <__errno>
 8010b50:	eeb0 0a48 	vmov.f32	s0, s16
 8010b54:	ecbd 8b02 	vpop	{d8}
 8010b58:	6004      	str	r4, [r0, #0]
 8010b5a:	bd10      	pop	{r4, pc}

08010b5c <xflowf>:
 8010b5c:	b130      	cbz	r0, 8010b6c <xflowf+0x10>
 8010b5e:	eef1 7a40 	vneg.f32	s15, s0
 8010b62:	ee27 0a80 	vmul.f32	s0, s15, s0
 8010b66:	2022      	movs	r0, #34	@ 0x22
 8010b68:	f7ff bfea 	b.w	8010b40 <with_errnof>
 8010b6c:	eef0 7a40 	vmov.f32	s15, s0
 8010b70:	e7f7      	b.n	8010b62 <xflowf+0x6>
	...

08010b74 <__math_uflowf>:
 8010b74:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8010b7c <__math_uflowf+0x8>
 8010b78:	f7ff bff0 	b.w	8010b5c <xflowf>
 8010b7c:	10000000 	.word	0x10000000

08010b80 <__math_oflowf>:
 8010b80:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8010b88 <__math_oflowf+0x8>
 8010b84:	f7ff bfea 	b.w	8010b5c <xflowf>
 8010b88:	70000000 	.word	0x70000000

08010b8c <_init>:
 8010b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b8e:	bf00      	nop
 8010b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010b92:	bc08      	pop	{r3}
 8010b94:	469e      	mov	lr, r3
 8010b96:	4770      	bx	lr

08010b98 <_fini>:
 8010b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b9a:	bf00      	nop
 8010b9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010b9e:	bc08      	pop	{r3}
 8010ba0:	469e      	mov	lr, r3
 8010ba2:	4770      	bx	lr
